void sub_207E40B84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40B98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40BAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40BC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40BD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40BE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40BFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40C10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40C24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40C38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40C4C(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_207E40D98();
      sub_208212838((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v14 = a3;
    sub_207E41430(a2, &v14);
    sub_207E41118(*a3, (uint64_t)a2, (uint64_t)a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    sub_207E40F94((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    v14 = a3;
    sub_207E41430(a2, &v14);
    sub_207E41118(*a3, (uint64_t)a2, (uint64_t)a3);
  }
}

__int128 *sub_207E40D98()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C1D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C1D0))
    return &xmmword_25452C1B8;
  v2 = (char *)sub_207E40E74();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452C1B8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452C1C8 = *((_QWORD *)v2 + 2);
    xmmword_25452C1B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C1B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C1D0);
  return &xmmword_25452C1B8;
}

void sub_207E40E5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C1D0);
  _Unwind_Resume(a1);
}

void *sub_207E40E74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C1F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C1F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::commonio::NumberSample]", qword_25452C1D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C1D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C1F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452C210);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C210))
    return &unk_25452C1F8;
  sub_208215C6C((uint64_t)qword_25452C1D8, (uint64_t)&unk_25452C1F8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452C1F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C210);
  return &unk_25452C1F8;
}

void sub_207E40F64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C210);
  _Unwind_Resume(a1);
}

void sub_207E40F7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C1F0);
  _Unwind_Resume(a1);
}

void sub_207E40F94(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  char *v5;
  unsigned __int8 v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19[8];
  char v20;
  char *v21;
  char *v22;
  _DWORD *v23;

  v19[0] = 7;
  v20 = 7;
  v5 = (char *)operator new(4uLL);
  v21 = v5;
  *(_DWORD *)v5 = 0;
  v22 = v5 + 4;
  v23 = v5 + 4;
  v14 = v19;
  sub_207E41430(a2, &v14);
  sub_207E415B4(v19[0], (uint64_t)a2, (uint64_t)v19);
  v6 = v19[0];
  LOBYTE(v14) = v19[0];
  v7 = v20;
  v15 = v20;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v8 = v21;
  v9 = v22 - v21;
  if (v22 == v21)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v19[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v21;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v10 = (char *)operator new(v22 - v21);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v22 = v8;
    operator delete(v8);
  }
}

void sub_207E410CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_207E41118(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E41430(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  char *v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = (char *)operator new(0x118uLL);
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_208215780((uint64_t)v5, v7);
    v15 = v6;
    v14 = 0;
    sub_208205A04((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v6[*(_QWORD *)(v10 - 24)] = *(_QWORD *)(v9 + 64);
    *((_QWORD *)v6 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v6 + 2) = v11;
    if (v6[111] < 0)
      operator delete(*((void **)v6 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v6 + 128);
    operator delete(v6);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_207E41578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_2082155DC(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E415B4(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 96))(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 88))(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 136))(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_2082056D4(a1);
  }
}

_QWORD *sub_207E418CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new(0xF0uLL);
  v5 = v4;
  *(_QWORD *)v4 = off_24C0770C0;
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4[2] = *(_OWORD *)(a1 + 32);
  *((_BYTE *)v4 + 48) = 0;
  *((_BYTE *)v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4[3] = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v4 + 8) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *((_BYTE *)v4 + 72) = 1;
  }
  *((_BYTE *)v4 + 80) = 0;
  *((_BYTE *)v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v4[5] = *(_OWORD *)(a1 + 80);
    *((_QWORD *)v4 + 12) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *((_BYTE *)v4 + 104) = 1;
  }
  *((_BYTE *)v4 + 144) = 0;
  v4[7] = *(_OWORD *)(a1 + 112);
  *((_QWORD *)v4 + 16) = *(_QWORD *)(a1 + 128);
  *((_BYTE *)v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    v4[9] = *(_OWORD *)(a1 + 144);
    *((_QWORD *)v4 + 20) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    v4[11] = v7;
    *((_BYTE *)v4 + 192) = 1;
  }
  *((_BYTE *)v4 + 208) = 0;
  *((_BYTE *)v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v4[13] = *(_OWORD *)(a1 + 208);
    *((_QWORD *)v4 + 28) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *((_BYTE *)v4 + 232) = 1;
  }
  *(_QWORD *)v4 = off_24C077040;
  *a2 = &off_24C078D18;
  a2[1] = v4;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_207E41A44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207E41AD0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E41A58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0770C0;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E41AD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0770C0;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E41B48(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207E41B50(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C077080, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_20807F93C(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_207E41BF8(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_207E42C94();
  sub_207E41CAC(a1);
  sub_207D49528(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_207E41C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E41CAC(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C350);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C350))
  {
    v4 = sub_207E42A98();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_25452C338, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25452C348 = *(_QWORD *)(v9 - 8);
      xmmword_25452C338 = v7;
    }
    sub_207C99DE0(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C338, &dword_207C77000);
    __cxa_guard_release(&qword_25452C350);
  }
  return sub_207E42F5C(&xmmword_25452C338, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)"}");
}

void sub_207E41DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  __cxa_guard_abort(&qword_25452C350);
  _Unwind_Resume(a1);
}

void sub_207E41DDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C350);
  _Unwind_Resume(a1);
}

void sub_207E41DF4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 2;
}

void sub_207E41E20(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 2, a2);
}

_QWORD *sub_207E41E58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0770C0;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E41ED0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0770C0;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E41F48(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207E42534();
  return sub_207E4209C(v2, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_207E41FA0(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207E422C8((uint64_t)v5, (uint64_t)v2, (unsigned __int8 **)(a1 + 8));
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765F8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765E0[v3])(v5, v2);
  return result;
}

void sub_207E42038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C0765E0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207E42070(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207E4209C(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207E422C8((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0765F8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0765E0[v16])(&p_dst, &__dst);
  return result;
}

void sub_207E42238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E42250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E42264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E42278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E4228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E422A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E422B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E422C8(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_20807ED6C((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E424F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E42520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

__int128 *sub_207E42534()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C230);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C230))
    return &xmmword_25452C218;
  v2 = sub_207E42610();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C218, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C228 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C218 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C218, &dword_207C77000);
  __cxa_guard_release(&qword_25452C230);
  return &xmmword_25452C218;
}

void sub_207E425F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C230);
  _Unwind_Resume(a1);
}

std::string *sub_207E42610()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C250);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C250))
    return &stru_25452C238;
  sub_207E428B4((uint64_t)__p);
  sub_207E42700((char *)__p, &stru_25452C238);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C238, &dword_207C77000);
  __cxa_guard_release(&qword_25452C250);
  return &stru_25452C238;
}

void sub_207E426C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C250);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C250);
  _Unwind_Resume(a1);
}

void sub_207E42700(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207E42A98();
  if (*((char *)v4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207E42864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207E428B4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C2D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C2D0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Numbers>]", qword_25452C2B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C2B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C2D0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C2F0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C2F0))
  {
    v5 = sub_207D49434(qword_25452C2B8, "<", 0);
    sub_207D49330(qword_25452C2B8, 0, v5, qword_25452C2D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C2D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C2F0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C310);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C310))
  {
    sub_208215C6C((uint64_t)qword_25452C2D8, (uint64_t)&xmmword_25452C2F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C2F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C310);
  }
  if (byte_25452C30F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C2F8, *((unint64_t *)&xmmword_25452C2F8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C2F8;
    *(_QWORD *)(a1 + 16) = unk_25452C308;
  }
}

void sub_207E42A50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C310);
  _Unwind_Resume(a1);
}

void sub_207E42A68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C2F0);
  _Unwind_Resume(a1);
}

void sub_207E42A80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C2D0);
  _Unwind_Resume(a1);
}

__int128 *sub_207E42A98()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C270);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C270))
    return &xmmword_25452C258;
  v2 = (char *)sub_207E42B74();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452C258, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452C268 = *((_QWORD *)v2 + 2);
    xmmword_25452C258 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C258, &dword_207C77000);
  __cxa_guard_release(&qword_25452C270);
  return &xmmword_25452C258;
}

void sub_207E42B5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C270);
  _Unwind_Resume(a1);
}

void *sub_207E42B74()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C290);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C290))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Numbers]", qword_25452C278);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C278, &dword_207C77000);
    __cxa_guard_release(&qword_25452C290);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452C2B0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C2B0))
    return &unk_25452C298;
  sub_208215C6C((uint64_t)qword_25452C278, (uint64_t)&unk_25452C298);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452C298, &dword_207C77000);
  __cxa_guard_release(&qword_25452C2B0);
  return &unk_25452C298;
}

void sub_207E42C64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C2B0);
  _Unwind_Resume(a1);
}

void sub_207E42C7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C290);
  _Unwind_Resume(a1);
}

std::string *sub_207E42C94()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452C330);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C330))
  {
    sub_207C96EE8(v9, "viz::PackageData");
    v2 = sub_207E42A98();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_207D50540();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_207CAA110(v8, (uint64_t)__dst, 4uLL);
    sub_208215D20((char *)v9, (uint64_t *)v8, &stru_25452C318, v6, v7);
    sub_207C99DE0(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C318, &dword_207C77000);
        __cxa_guard_release(&qword_25452C330);
        return &stru_25452C318;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25452C318;
}

void sub_207E42E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_207C99DE0(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25452C330);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25452C330);
  _Unwind_Resume(a1);
}

uint64_t sub_207E42F5C(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207E422C8((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0765F8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0765E0[v11])(&p_dst, &__dst);
  return result;
}

void sub_207E4309C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E430B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E430C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E430DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E430F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E43104(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  unsigned __int8 *v12;
  int v13;
  void **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 *v21;
  void **v22;

  v18 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v19 = *((_QWORD *)a2 + 2);
  v20 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v21 = &v18;
  sub_207E392A0(a1, (_BYTE **)&v21);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    if (*(_BYTE *)(a1 + 88) && *(_QWORD *)(a1 + 80) == 7)
    {
      v8 = *(int **)(a1 + 72);
      v9 = *v8;
      v10 = *(int *)((char *)v8 + 3);
      if (v9 == *(_DWORD *)"version" && v10 == *(_DWORD *)"sion")
        goto LABEL_17;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LOBYTE(v21) = 6;
  v22 = (void **)*((_QWORD *)&v18 + 1);
  v12 = (unsigned __int8 *)sub_2081F1A98(a1);
  v13 = *v12;
  *v12 = v21;
  LOBYTE(v21) = v13;
  v14 = (void **)*((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v22;
  v22 = v14;
  sub_20806DC2C(&v22, v13);
LABEL_17:
  sub_207E432D8(v18, (uint64_t)&v18, a1);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_207E432A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E432C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E432D8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  float *v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(float **)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v9 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v9)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v7;
      v56 = v6;
      sub_2081F1FC0(a3, (size_t *)&v55);
      break;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (v13
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v12 >> 1);
      v56 = v11;
      sub_2081F4624(a3, (uint64_t)&v55);
      break;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v19)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v17 >> 2);
      v56 = v16;
      sub_2081F4894(a3, (uint64_t)&v55);
      break;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v20 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (v23
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v24)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v22 >> 3);
      v56 = v21;
      sub_2081F4B04(a3, (uint64_t)&v55);
      break;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(float **)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (!v28
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v29 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v29)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v27;
      v56 = v26;
      sub_2081F43B4(a3, (size_t *)&v55);
      break;
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v34 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v34)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v32 >> 1);
      v56 = v31;
      sub_2081F44EC(a3, (uint64_t)&v55);
      break;
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v35 = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v39 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v39)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v37 >> 2);
      v56 = v36;
      sub_2081F475C(a3, (uint64_t)&v55);
      break;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v40 = *(_QWORD *)(a2 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v44 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v44)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v42 >> 3);
      v56 = v41;
      sub_2081F49CC(a3, (uint64_t)&v55);
      break;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v45 = *(_QWORD *)(a2 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (v48
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v49 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v49)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v47 >> 2);
      v56 = v46;
      sub_2081F50E4(a3, &v55);
      break;
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v50 = *(_QWORD *)(a2 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_100:
        abort();
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v54 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v54)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v52 >> 3);
      v56 = v51;
      sub_2081F5504(a3, &v55);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E439D0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v14 = (uint64_t *)(v6 + 16);
    sub_2082100A4(&v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14) = -52;
      BYTE1(v14) = v11;
    }
    else
    {
      LOBYTE(v14) = v11;
    }
    std::ostream::write();
  }
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v14 = (uint64_t *)(v7 + 16);
    sub_20821166C(&v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_208211974();
  }
  sub_207E43B18(v11, (uint64_t)&v11, a1);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_207E43B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E43B18(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  __int16 *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v6 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(v6 + 40);
      v7 = *(char **)(v6 + 48);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (!v9)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v10 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        for (*(_QWORD *)&v82 = v10 + 16; v8; --v8)
          result = (uint64_t)sub_2082100A4((uint64_t **)&v82, *v7++);
      }
      else
      {
        for (; v8; --v8)
        {
          v69 = *v7;
          if (v69 < 0)
          {
            LOBYTE(v82) = -52;
            BYTE1(v82) = v69;
          }
          else
          {
            LOBYTE(v82) = *v7;
          }
          result = std::ostream::write();
          ++v7;
        }
      }
      break;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v11 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      *(_QWORD *)&v82 = v13 >> 1;
      *((_QWORD *)&v82 + 1) = v12;
      result = sub_20820B4B0(*(_QWORD *)(a3 + 24), &v82);
      break;
    case 2:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(unsigned int **)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v19 = v17 >> 2;
      v20 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v20 + 40))
      {
        *(_QWORD *)&v82 = v20 + 16;
        if (v17 >= 4)
        {
          v21 = 4 * v19;
          do
          {
            result = (uint64_t)sub_208210C8C((uint64_t **)&v82, *v16++);
            v21 -= 4;
          }
          while (v21);
        }
      }
      else if (v17 >= 4)
      {
        v70 = v20 + 8;
        v71 = 4 * v19;
        do
        {
          result = sub_208210F00((uint64_t)&v82, v70);
          ++v16;
          v71 -= 4;
        }
        while (v71);
      }
      break;
    case 3:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v22 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(v22 + 40);
      v23 = *(unint64_t **)(v22 + 48);
      if (v23)
        v25 = 0;
      else
        v25 = v24 >= 8;
      if (v25)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v26 = v24 >> 3;
      v27 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v27 + 40))
      {
        *(_QWORD *)&v82 = v27 + 16;
        if (v24 >= 8)
        {
          v28 = 8 * v26;
          do
          {
            result = (uint64_t)sub_20821166C((uint64_t **)&v82, *v23++);
            v28 -= 8;
          }
          while (v28);
        }
      }
      else if (v24 >= 8)
      {
        v72 = 8 * v26;
        do
        {
          ++v23;
          result = sub_208211974();
          v72 -= 8;
        }
        while (v72);
      }
      break;
    case 5:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v29 = *(_QWORD *)(a2 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_BYTE **)(v29 + 48);
      if (v30)
        v32 = 1;
      else
        v32 = v31 == 0;
      if (!v32)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v33 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v33 + 40))
      {
        for (*(_QWORD *)&v82 = v33 + 16; v31; --v31)
          result = (uint64_t)sub_20820FF5C((uint64_t **)&v82, (char)*v30++);
      }
      else
      {
        for (; v31; --v31)
        {
          v73 = (char)*v30;
          if (v73 > -33)
          {
            LOBYTE(v82) = *v30;
          }
          else
          {
            LOBYTE(v82) = -48;
            BYTE1(v82) = v73;
          }
          result = std::ostream::write();
          ++v30;
        }
      }
      break;
    case 6:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v34 = *(_QWORD *)(a2 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(__int16 **)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 2;
      if (v37)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v38 = v36 >> 1;
      v39 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v39 + 40))
      {
        *(_QWORD *)&v82 = v39 + 16;
        if (v36 >= 2)
        {
          v40 = 2 * v38;
          do
          {
            result = (uint64_t)sub_2082101E8((uint64_t **)&v82, *v35++);
            v40 -= 2;
          }
          while (v40);
        }
      }
      else if (v36 >= 2)
      {
        v74 = 2 * v38;
        do
        {
          ++v35;
          result = sub_2082104AC();
          v74 -= 2;
        }
        while (v74);
      }
      break;
    case 7:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v41 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)(v41 + 40);
      v42 = *(unsigned int **)(v41 + 48);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 4;
      if (v44)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v45 = v43 >> 2;
      v46 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v46 + 40))
      {
        *(_QWORD *)&v82 = v46 + 16;
        if (v43 >= 4)
        {
          v47 = 4 * v45;
          do
          {
            result = (uint64_t)sub_208210774((uint64_t **)&v82, *v42++);
            v47 -= 4;
          }
          while (v47);
        }
      }
      else if (v43 >= 4)
      {
        v75 = 4 * v45;
        do
        {
          ++v42;
          result = sub_208210B90();
          v75 -= 4;
        }
        while (v75);
      }
      break;
    case 8:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v48 = *(_QWORD *)(a2 + 16);
      v50 = *(_QWORD *)(v48 + 40);
      v49 = *(unint64_t **)(v48 + 48);
      if (v49)
        v51 = 0;
      else
        v51 = v50 >= 8;
      if (v51)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v52 = v50 >> 3;
      v53 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v53 + 40))
      {
        *(_QWORD *)&v82 = v53 + 16;
        if (v50 >= 8)
        {
          v54 = 8 * v52;
          do
          {
            result = (uint64_t)sub_208210FF0((uint64_t **)&v82, *v49++);
            v54 -= 8;
          }
          while (v54);
        }
      }
      else if (v50 >= 8)
      {
        v76 = 8 * v52;
        do
        {
          ++v49;
          result = sub_20821152C();
          v76 -= 8;
        }
        while (v76);
      }
      break;
    case 11:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v55 = *(_QWORD *)(a2 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unsigned int **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 4;
      if (v58)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 2;
      v60 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v82 = v60 + 16;
        if (v57 >= 4)
        {
          v61 = 4 * v59;
          do
          {
            result = (uint64_t)sub_208211A6C((uint64_t)&v81, (uint64_t **)&v82, v56++);
            v61 -= 4;
          }
          while (v61);
        }
      }
      else if (v57 >= 4)
      {
        v77 = 4 * v59;
        do
        {
          v78 = *v56;
          LOBYTE(v82) = -54;
          *(_DWORD *)((char *)&v82 + 1) = bswap32(v78);
          result = std::ostream::write();
          ++v56;
          v77 -= 4;
        }
        while (v77);
      }
      break;
    case 12:
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v62 = *(_QWORD *)(a2 + 16);
      v64 = *(_QWORD *)(v62 + 40);
      v63 = *(unint64_t **)(v62 + 48);
      if (v63)
        v65 = 0;
      else
        v65 = v64 >= 8;
      if (v65)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v66 = v64 >> 3;
      v67 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v67 + 40))
      {
        *(_QWORD *)&v82 = v67 + 16;
        if (v64 >= 8)
        {
          v68 = 8 * v66;
          do
          {
            result = (uint64_t)sub_208211B48((uint64_t)&v81, (uint64_t **)&v82, v63++);
            v68 -= 8;
          }
          while (v68);
        }
      }
      else if (v64 >= 8)
      {
        v79 = 8 * v66;
        do
        {
          v80 = *v63;
          LOBYTE(v82) = -53;
          *(_QWORD *)((char *)&v82 + 1) = bswap64(v80);
          result = std::ostream::write();
          ++v63;
          v79 -= 8;
        }
        while (v79);
      }
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

void sub_207E44324(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 *v21;
  uint64_t v22;

  v18 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v19 = *((_QWORD *)a2 + 2);
  v20 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v21 = &v18;
  sub_207E3B438(a1, (_BYTE **)&v21);
  if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    if (*(_BYTE *)(a1 + 88) && *(_QWORD *)(a1 + 80) == 7)
    {
      v8 = *(int **)(a1 + 72);
      v9 = *v8;
      v10 = *(int *)((char *)v8 + 3);
      if (v9 == *(_DWORD *)"version" && v10 == *(_DWORD *)"sion")
        goto LABEL_17;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "size";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LOBYTE(v21) = 6;
  v22 = *((_QWORD *)&v18 + 1);
  v12 = (unsigned __int8 *)sub_2081F133C(a1);
  v13 = *v12;
  *v12 = v21;
  LOBYTE(v21) = v13;
  v14 = *((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = v22;
  v22 = v14;
  sub_207D20660(&v22, v13);
LABEL_17:
  sub_207E444F8(v18, (uint64_t)&v18, a1);
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_207E444C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_207D20660(v13, a13);
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E444E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E444F8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  float *v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(float **)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v9 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v9)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v7;
      v56 = v6;
      sub_2081F1960(a3, (size_t *)&v55);
      break;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (v13
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v12 >> 1);
      v56 = v11;
      sub_2081F2940(a3, (uint64_t)&v55);
      break;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v15 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v19 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v19)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v17 >> 2);
      v56 = v16;
      sub_2081F2BB0(a3, (uint64_t)&v55);
      break;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v20 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (v23
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v24)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v22 >> 3);
      v56 = v21;
      sub_2081F2E20(a3, (uint64_t)&v55);
      break;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(float **)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (!v28
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v29 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v29)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = v27;
      v56 = v26;
      sub_2081F26D0(a3, (size_t *)&v55);
      break;
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v34 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v34)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v32 >> 1);
      v56 = v31;
      sub_2081F2808(a3, (uint64_t)&v55);
      break;
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v35 = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v39 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v39)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v37 >> 2);
      v56 = v36;
      sub_2081F2A78(a3, (uint64_t)&v55);
      break;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v40 = *(_QWORD *)(a2 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v44 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v44)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v42 >> 3);
      v56 = v41;
      sub_2081F2CE8(a3, (uint64_t)&v55);
      break;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v45 = *(_QWORD *)(a2 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (v48
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_100;
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v49 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v49)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v47 >> 2);
      v56 = v46;
      sub_2081F3400(a3, &v55);
      break;
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v50 = *(_QWORD *)(a2 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_100:
        abort();
      }
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v54 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "numbers";
        *(_QWORD *)(a3 + 80) = 7;
        if (!v54)
          *(_BYTE *)(a3 + 88) = 1;
      }
      v55 = (float *)(v52 >> 3);
      v56 = v51;
      sub_2081F3820(a3, &v55);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E44BF0(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unsigned __int8 v13;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v13 = v10;
  sub_208208D08(a1, &v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v13 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_207E44CF4(v10, (uint64_t)&v10, a1);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_207E44CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E44CF4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(unsigned __int8 **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return;
        goto LABEL_65;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        do
        {
LABEL_65:
          sub_208208D08(a3, v6++);
          --v7;
        }
        while (v7);
        return;
      }
      goto LABEL_110;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v9 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_68;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_68:
        v46 = *(_QWORD *)(a3 + 40);
        v47 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v46)
          {
            v48 = *(_QWORD **)(a3 + 24);
            v71 = *(_BYTE *)(a3 + 32);
            sub_207CBAB98(v48, (uint64_t)&v71, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v46 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v46;
          v47 -= 2;
        }
        while (v47);
        return;
      }
      goto LABEL_110;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v13 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(v13 + 40);
      v14 = *(_QWORD *)(v13 + 48);
      if (v14)
        v16 = 0;
      else
        v16 = v15 >= 4;
      if (!v16)
      {
        if (v15 < 4)
          return;
        goto LABEL_73;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_73:
        v49 = *(_QWORD *)(a3 + 40);
        v50 = v15 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v49)
          {
            v51 = *(_QWORD **)(a3 + 24);
            v72 = *(_BYTE *)(a3 + 32);
            sub_207CBAB98(v51, (uint64_t)&v72, 1);
          }
          v14 += 4;
          std::ostream::operator<<();
          v49 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v49;
          v50 -= 4;
        }
        while (v50);
        return;
      }
      goto LABEL_110;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v17 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(_QWORD *)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 8;
      if (!v20)
      {
        if (v19 < 8)
          return;
        goto LABEL_78;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_78:
        v52 = *(_QWORD *)(a3 + 40);
        v53 = v19 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v52)
          {
            v54 = *(_QWORD **)(a3 + 24);
            v73 = *(_BYTE *)(a3 + 32);
            sub_207CBAB98(v54, (uint64_t)&v73, 1);
          }
          v18 += 8;
          std::ostream::operator<<();
          v52 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v52;
          v53 -= 8;
        }
        while (v53);
        return;
      }
      goto LABEL_110;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v21 = *(_QWORD *)(a2 + 16);
      v23 = *(_QWORD *)(v21 + 40);
      v22 = *(char **)(v21 + 48);
      if (v22)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (v24)
      {
        if (!v23)
          return;
        goto LABEL_83;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        do
        {
LABEL_83:
          sub_208208B24(a3, v22++);
          --v23;
        }
        while (v23);
        return;
      }
      goto LABEL_110;
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 2;
      if (!v28)
      {
        if (v27 < 2)
          return;
        goto LABEL_86;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_86:
        v56 = *(_QWORD *)(a3 + 40);
        v57 = v27 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(a3 + 24);
            v74 = *(_BYTE *)(a3 + 32);
            sub_207CBAB98(v58, (uint64_t)&v74, 1);
          }
          v26 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_110;
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v29 = *(_QWORD *)(a2 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 4;
      if (!v32)
      {
        if (v31 < 4)
          return;
        goto LABEL_91;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_91:
        v59 = *(_QWORD *)(a3 + 40);
        v60 = v31 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v59)
          {
            v61 = *(_QWORD **)(a3 + 24);
            v75 = *(_BYTE *)(a3 + 32);
            sub_207CBAB98(v61, (uint64_t)&v75, 1);
          }
          v30 += 4;
          std::ostream::operator<<();
          v59 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v59;
          v60 -= 4;
        }
        while (v60);
        return;
      }
      goto LABEL_110;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v33 = *(_QWORD *)(a2 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_QWORD *)(v33 + 48);
      if (v34)
        v36 = 0;
      else
        v36 = v35 >= 8;
      if (!v36)
      {
        if (v35 < 8)
          return;
        goto LABEL_96;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_96:
        v62 = *(_QWORD *)(a3 + 40);
        v63 = v35 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v62)
          {
            v64 = *(_QWORD **)(a3 + 24);
            v76 = *(_BYTE *)(a3 + 32);
            sub_207CBAB98(v64, (uint64_t)&v76, 1);
          }
          v34 += 8;
          std::ostream::operator<<();
          v62 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v62;
          v63 -= 8;
        }
        while (v63);
        return;
      }
      goto LABEL_110;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v37 = *(_QWORD *)(a2 + 16);
      v39 = *(_QWORD *)(v37 + 40);
      v38 = *(_QWORD *)(v37 + 48);
      if (v38)
        v40 = 0;
      else
        v40 = v39 >= 4;
      if (!v40)
      {
        if (v39 < 4)
          return;
        goto LABEL_101;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_101:
        v65 = *(_QWORD *)(a3 + 40);
        v66 = v39 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v65)
          {
            v67 = *(_QWORD **)(a3 + 24);
            v77 = *(_BYTE *)(a3 + 32);
            sub_207CBAB98(v67, (uint64_t)&v77, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 9;
          v38 += 4;
          std::ostream::operator<<();
          v65 = *(_QWORD *)(a3 + 40) + 1;
          *(_QWORD *)(a3 + 40) = v65;
          v66 -= 4;
        }
        while (v66);
        return;
      }
      goto LABEL_110;
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v41 = *(_QWORD *)(a2 + 16);
      v43 = *(_QWORD *)(v41 + 40);
      v42 = *(_QWORD *)(v41 + 48);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 8;
      if (v44)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_110:
          abort();
        }
      }
      else if (v43 < 8)
      {
        return;
      }
      v68 = *(_QWORD *)(a3 + 40);
      v69 = v43 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v68)
        {
          v70 = *(_QWORD **)(a3 + 24);
          v78 = *(_BYTE *)(a3 + 32);
          sub_207CBAB98(v70, (uint64_t)&v78, 1);
        }
        *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 17;
        v42 += 8;
        std::ostream::operator<<();
        v68 = *(_QWORD *)(a3 + 40) + 1;
        *(_QWORD *)(a3 + 40) = v68;
        v69 -= 8;
      }
      while (v69);
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E453C4(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char __src;
  uint64_t v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  __src = v9;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v13, 1);
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  sub_207E454C4(v9, (uint64_t)&v9, a1);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_207E454B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_207E454C4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(v5 + 40);
      v7 = *(char **)(v5 + 48);
      if (v7)
        v8 = 1;
      else
        v8 = v6 == 0;
      if (!v8)
        goto LABEL_27;
      return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v9 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(char **)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v13 + 40);
      v10 = *(char **)(v13 + 48);
      if (v10)
        v15 = 0;
      else
        v15 = v14 >= 4;
      if (!v15)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v16 + 40);
      v10 = *(char **)(v16 + 48);
      if (v10)
        v18 = 0;
      else
        v18 = v17 >= 8;
      if (!v18)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v19 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(v19 + 40);
      v7 = *(char **)(v19 + 48);
      if (v7)
        v20 = 1;
      else
        v20 = v6 == 0;
      if (v20)
        return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
LABEL_27:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
      return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), v7, &v7[v6], v6);
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v21 = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(v21 + 40);
      v10 = *(char **)(v21 + 48);
      if (v10)
        v22 = 0;
      else
        v22 = v11 >= 2;
      if (!v22)
        goto LABEL_37;
LABEL_36:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_37:
      v23 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (v10)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (!v24)
        goto LABEL_75;
      return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v25 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v25 + 40);
      v10 = *(char **)(v25 + 48);
      if (v10)
        v26 = 0;
      else
        v26 = v14 >= 4;
      if (!v26)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v27 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v27 + 40);
      v10 = *(char **)(v27 + 48);
      if (v10)
        v28 = 0;
      else
        v28 = v17 >= 8;
      if (!v28)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(v29 + 40);
      v10 = *(char **)(v29 + 48);
      if (v10)
        v30 = 0;
      else
        v30 = v14 >= 4;
      if (!v30)
        goto LABEL_59;
LABEL_58:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_59:
      v23 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      if (v10)
        v31 = 1;
      else
        v31 = v23 == 0;
      if (!v31)
        goto LABEL_75;
      return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(v32 + 40);
      v10 = *(char **)(v32 + 48);
      if (v10)
        v33 = 0;
      else
        v33 = v17 >= 8;
      if (!v33)
        goto LABEL_71;
LABEL_70:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_71:
      v23 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
        v34 = 1;
      else
        v34 = v23 == 0;
      if (!v34)
      {
LABEL_75:
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_77:
          abort();
        }
      }
      return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), v10, &v10[v23], v23);
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E45818(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  __int128 *v12;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = &v9;
  sub_207E3D2B0(a1, (_BYTE **)&v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  sub_207E458F8(v9, (uint64_t)&v9, (uint64_t)a1);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_207E458E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_207E458F8(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  switch(a1)
  {
    case 0:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v6 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(v6 + 40);
      v7 = *(_QWORD *)(v6 + 48);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        if (!v8)
          return result;
        goto LABEL_65;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        do
        {
LABEL_65:
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 80))(a3, v7++);
          --v8;
        }
        while (v8);
        return result;
      }
      goto LABEL_102;
    case 1:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v10 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_68;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_68:
        v47 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 96))(a3, v11);
          v11 += 2;
          v47 -= 2;
        }
        while (v47);
        return result;
      }
      goto LABEL_102;
    case 2:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v14 = *(_QWORD *)(a2 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return result;
        goto LABEL_72;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_72:
        v48 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 104))(a3, v15);
          v15 += 4;
          v48 -= 4;
        }
        while (v48);
        return result;
      }
      goto LABEL_102;
    case 3:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v18 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(v18 + 40);
      v19 = *(_QWORD *)(v18 + 48);
      if (v19)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
      {
        if (v20 < 8)
          return result;
        goto LABEL_76;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_76:
        v49 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 120))(a3, v19);
          v19 += 8;
          v49 -= 8;
        }
        while (v49);
        return result;
      }
      goto LABEL_102;
    case 5:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v22 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(v22 + 40);
      v23 = *(_QWORD *)(v22 + 48);
      if (v23)
        v25 = 1;
      else
        v25 = v24 == 0;
      if (v25)
      {
        if (!v24)
          return result;
        goto LABEL_80;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        do
        {
LABEL_80:
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 88))(a3, v23++);
          --v24;
        }
        while (v24);
        return result;
      }
      goto LABEL_102;
    case 6:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v26 = *(_QWORD *)(a2 + 16);
      v28 = *(_QWORD *)(v26 + 40);
      v27 = *(_QWORD *)(v26 + 48);
      if (v27)
        v29 = 0;
      else
        v29 = v28 >= 2;
      if (!v29)
      {
        if (v28 < 2)
          return result;
        goto LABEL_83;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_83:
        v51 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v27);
          v27 += 2;
          v51 -= 2;
        }
        while (v51);
        return result;
      }
      goto LABEL_102;
    case 7:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v30 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 4;
      if (!v33)
      {
        if (v32 < 4)
          return result;
        goto LABEL_87;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_87:
        v52 = v32 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 56))(a3, v31);
          v31 += 4;
          v52 -= 4;
        }
        while (v52);
        return result;
      }
      goto LABEL_102;
    case 8:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v34 = *(_QWORD *)(a2 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 8;
      if (!v37)
      {
        if (v36 < 8)
          return result;
        goto LABEL_91;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_91:
        v53 = v36 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 72))(a3, v35);
          v35 += 8;
          v53 -= 8;
        }
        while (v53);
        return result;
      }
      goto LABEL_102;
    case 11:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v38 = *(_QWORD *)(a2 + 16);
      v40 = *(_QWORD *)(v38 + 40);
      v39 = *(_QWORD *)(v38 + 48);
      if (v39)
        v41 = 0;
      else
        v41 = v40 >= 4;
      if (!v41)
      {
        if (v40 < 4)
          return result;
        goto LABEL_95;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_95:
        v54 = v40 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(a3, v39);
          v39 += 4;
          v54 -= 4;
        }
        while (v54);
        return result;
      }
      goto LABEL_102;
    case 12:
      result = sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v42 = *(_QWORD *)(a2 + 16);
      v44 = *(_QWORD *)(v42 + 40);
      v43 = *(_QWORD *)(v42 + 48);
      if (v43)
        v45 = 0;
      else
        v45 = v44 >= 8;
      if (v45)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_102:
          abort();
        }
      }
      else if (v44 < 8)
      {
        return result;
      }
      v55 = v44 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 136))(a3, v43);
        v43 += 8;
        v55 -= 8;
      }
      while (v55);
      return result;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E45E88(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  unint64_t v14;

  sub_2081F5F4C(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_20809778C(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v7 = 2;
  else
    v7 = v14;
  if (v7 < 2)
  {
    sub_207E45FFC((uint64_t)&v14, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v14 = (unint64_t)a3;
    sub_207E3DB44((uint64_t *)a2, (_BYTE **)&v14);
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "size";
    *(_QWORD *)(a2 + 96) = 4;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2081F6204((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v14 = 0;
    sub_20809778C(v10, &v14);
    *((_QWORD *)a3 + 1) = v14;
    sub_207E461BC(*a3, (uint64_t)a3, a2);
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_207E45FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  void *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16[8];
  void *v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20807DEF0(&v22, 7, (uint64_t)&__p);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v16;
  sub_207E3DB44((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20809778C(v7, &__p);
  v17 = __p;
  sub_207E470CC(v16[0], (uint64_t)v16, a2);
  v8 = v17;
  v9 = v18;
  v18 = 0uLL;
  *(_BYTE *)a3 = v16[0];
  *(_QWORD *)(a3 + 8) = v8;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E4618C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E461A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E461BC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E462E4(v3);
      break;
    case 1:
      sub_207E46434(v3);
      break;
    case 2:
      sub_207E46590(v3);
      break;
    case 3:
      sub_207E466F0(v3);
      break;
    case 5:
      sub_207E46888(v3);
      break;
    case 6:
      sub_207E469D8(v3);
      break;
    case 7:
      sub_207E46B34(v3);
      break;
    case 8:
      sub_207E46C94(v3);
      break;
    case 11:
      sub_207E46E2C(v3);
      break;
    case 12:
      sub_207E46F7C(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E462E4(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F631C(v7, (uint64_t)&v15);
  sub_20807DA08(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E46410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E46434(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F7078(v7, (uint64_t)&v15);
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4656C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E46590(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F71F0(v7, (uint64_t)&v15);
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E466CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E466F0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F8AC4(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E3DC(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4684C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E46888(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6E98(v7, (uint64_t)&v15);
  sub_20807D868(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E469B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E469D8(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6F88(v7, (uint64_t)&v15);
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E46B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E46B34(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F7134(v7, (uint64_t)&v15);
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E46C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E46C94(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F8788(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E238(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E46DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E46E2C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F75DC(v6, (float *)v3);
  sub_20807E580(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E46F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E46F7C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F76E4(v6, (double *)v3);
  sub_20807E724(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E470A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E470CC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E471F4(v3);
      break;
    case 1:
      sub_207E47344(v3);
      break;
    case 2:
      sub_207E474A0(v3);
      break;
    case 3:
      sub_207E47600(v3);
      break;
    case 5:
      sub_207E47798(v3);
      break;
    case 6:
      sub_207E478E8(v3);
      break;
    case 7:
      sub_207E47A44(v3);
      break;
    case 8:
      sub_207E47BA4(v3);
      break;
    case 11:
      sub_207E47D3C(v3);
      break;
    case 12:
      sub_207E47E8C(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E471F4(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F631C(v7, (uint64_t)&v15);
  sub_20807DA08(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E47320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47344(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F7078(v7, (uint64_t)&v15);
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4747C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E474A0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F71F0(v7, (uint64_t)&v15);
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E475DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47600(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F8AC4(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E3DC(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47798(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6E98(v7, (uint64_t)&v15);
  sub_20807D868(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E478C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E478E8(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6F88(v7, (uint64_t)&v15);
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E47A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47A44(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F6204((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F7134(v7, (uint64_t)&v15);
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E47B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47BA4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F8788(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E238(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E47D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47D3C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F75DC(v6, (float *)v3);
  sub_20807E580(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E47E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47E8C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F6204((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F76E4(v6, (double *)v3);
  sub_20807E724(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E47FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E47FDC(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;

  if (a4 < 2)
  {
    sub_207E480B8((uint64_t)&v9, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v10 = 0;
    sub_20820B6F8(a2[6], &v10);
    *a3 = v10;
    sub_20820BBEC(a2[6], (_QWORD *)a3 + 1);
    sub_207E48230(*a3, (uint64_t)a3, (uint64_t)a2);
    v7 = a2[4];
    v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
    if (v8)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v8);
    a2[4] -= 16;
  }
}

void sub_207E480B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20807DEF0(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20820B6F8(*(_QWORD *)(a2 + 48), &__p);
  v13[0] = __p;
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v14);
  sub_207E49020(v13[0], (uint64_t)v13, a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_207E48200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4821C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E48230(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E48358(v3);
      break;
    case 1:
      sub_207E48490(v3);
      break;
    case 2:
      sub_207E485D8(v3);
      break;
    case 3:
      sub_207E48724(v3);
      break;
    case 5:
      sub_207E48870(v3);
      break;
    case 6:
      sub_207E489A8(v3);
      break;
    case 7:
      sub_207E48AF0(v3);
      break;
    case 8:
      sub_207E48C3C(v3);
      break;
    case 11:
      sub_207E48D88(v3);
      break;
    case 12:
      sub_207E48ED4(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E48358(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20820B6F8(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807DA08(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4846C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E48490(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20820B88C(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DD4C(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E485B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E485D8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820BA20(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E094(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E48700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E48724(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820BBEC(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E3DC(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4884C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E48870(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20820B648(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807D868(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E48984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E489A8(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20820B7DC(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DBA8(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E48ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E48AF0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820B970(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807DEF0(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E48C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E48C3C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820BB04(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E238(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E48D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E48D88(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820BCC8(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E580(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E48EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E48ED4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820BDF8(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E724(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E48FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49020(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E49148(v3);
      break;
    case 1:
      sub_207E49280(v3);
      break;
    case 2:
      sub_207E493C8(v3);
      break;
    case 3:
      sub_207E49514(v3);
      break;
    case 5:
      sub_207E49660(v3);
      break;
    case 6:
      sub_207E49798(v3);
      break;
    case 7:
      sub_207E498E0(v3);
      break;
    case 8:
      sub_207E49A2C(v3);
      break;
    case 11:
      sub_207E49B78(v3);
      break;
    case 12:
      sub_207E49CC4(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E49148(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20820B6F8(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807DA08(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4925C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49280(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20820B88C(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DD4C(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E493A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E493C8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820BA20(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E094(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E494F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49514(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820BBEC(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E3DC(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4963C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49660(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = *(_QWORD *)(a1[1] + 48);
    do
    {
      sub_20820B648(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807D868(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E49774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49798(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_20820B7DC(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DBA8(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E498BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E498E0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820B970(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807DEF0(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E49A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49A2C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820BB04(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E238(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E49B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49B78(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820BCC8(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E580(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E49CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49CC4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = *(_QWORD *)(a1[1] + 48);
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820BDF8(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E724(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E49DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E49E10(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  unint64_t v14;

  sub_2081F5AC0(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_208097288(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v7 = 2;
  else
    v7 = v14;
  if (v7 < 2)
  {
    sub_207E49F84((uint64_t)&v14, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v14 = (unint64_t)a3;
    sub_207E3F0C4((uint64_t *)a2, (_BYTE **)&v14);
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "size";
    *(_QWORD *)(a2 + 96) = 4;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2081F5D78((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v14 = 0;
    sub_208097288(v10, &v14);
    *((_QWORD *)a3 + 1) = v14;
    sub_207E4A144(*a3, (uint64_t)a3, a2);
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
}

void sub_207E49F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  void *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16[8];
  void *v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_20807DEF0(&v22, 7, (uint64_t)&__p);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v16;
  sub_207E3F0C4((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_208097288(v7, &__p);
  v17 = __p;
  sub_207E4B054(v16[0], (uint64_t)v16, a2);
  v8 = v17;
  v9 = v18;
  v18 = 0uLL;
  *(_BYTE *)a3 = v16[0];
  *(_QWORD *)(a3 + 8) = v8;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E4A114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4A130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E4A144(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E4A26C(v3);
      break;
    case 1:
      sub_207E4A3BC(v3);
      break;
    case 2:
      sub_207E4A518(v3);
      break;
    case 3:
      sub_207E4A678(v3);
      break;
    case 5:
      sub_207E4A810(v3);
      break;
    case 6:
      sub_207E4A960(v3);
      break;
    case 7:
      sub_207E4AABC(v3);
      break;
    case 8:
      sub_207E4AC1C(v3);
      break;
    case 11:
      sub_207E4ADB4(v3);
      break;
    case 12:
      sub_207E4AF04(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E4A26C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F5E90(v7, (uint64_t)&v15);
  sub_20807DA08(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4A398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4A3BC(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F65B8(v7, (uint64_t)&v15);
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4A4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4A518(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6730(v7, (uint64_t)&v15);
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4A654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4A678(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F80CC(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E3DC(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4A7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4A810(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F63D8(v7, (uint64_t)&v15);
  sub_20807D868(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4A93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4A960(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F64C8(v7, (uint64_t)&v15);
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4AA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4AABC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6674(v7, (uint64_t)&v15);
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4ABF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4AC1C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F7A10(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E238(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4AD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4ADB4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F6B44(v6, (float *)v3);
  sub_20807E580(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E4AEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4AF04(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F6C74(v6, (double *)v3);
  sub_20807E724(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E4B030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4B054(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E4B17C(v3);
      break;
    case 1:
      sub_207E4B2CC(v3);
      break;
    case 2:
      sub_207E4B428(v3);
      break;
    case 3:
      sub_207E4B588(v3);
      break;
    case 5:
      sub_207E4B720(v3);
      break;
    case 6:
      sub_207E4B870(v3);
      break;
    case 7:
      sub_207E4B9CC(v3);
      break;
    case 8:
      sub_207E4BB2C(v3);
      break;
    case 11:
      sub_207E4BCC4(v3);
      break;
    case 12:
      sub_207E4BE14(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E4B17C(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F5E90(v7, (uint64_t)&v15);
  sub_20807DA08(&v15, 0, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4B2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4B2CC(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F65B8(v7, (uint64_t)&v15);
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4B404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4B428(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6730(v7, (uint64_t)&v15);
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4B564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4B588(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F80CC(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E3DC(&v15, 3, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4B6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4B720(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v14 = &v3[v2];
    bzero(v3, v2);
    v13 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = v4 - v3;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F63D8(v7, (uint64_t)&v15);
  sub_20807D868(&v15, 5, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4B84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4B870(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v14 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 1;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F64C8(v7, (uint64_t)&v15);
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4B9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4B9CC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v14 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v14;
    v13 = v14;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = a1[1];
  v6 = *(unsigned __int8 *)(v5 + 104);
  *(_QWORD *)(v5 + 88) = "numbers";
  *(_QWORD *)(v5 + 96) = 7;
  if (!v6)
    *(_BYTE *)(v5 + 104) = 1;
  *(_QWORD *)&v15 = (v4 - v3) >> 2;
  *((_QWORD *)&v15 + 1) = v3;
  v7 = (char *)sub_2081F5D78((uint64_t *)v5);
  ++*(_QWORD *)(v5 + 112);
  sub_2081F6674(v7, (uint64_t)&v15);
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4BB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4BB2C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v14 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v13 = v14;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = (char *)sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  v15 = 0uLL;
  v16 = 0;
  sub_2081F7A10(v6, (uint64_t)&v15);
  v7 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    memmove(v3, (const void *)v15, *((_QWORD *)&v15 + 1) - v15);
  if (v7)
  {
    *((_QWORD *)&v15 + 1) = v7;
    operator delete(v7);
  }
  sub_20807E238(&v15, 8, (uint64_t)&__p);
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v15;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E4BC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4BCC4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v13 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F6B44(v6, (float *)v3);
  sub_20807E580(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E4BDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4BE14(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v13 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v12 = v13;
  }
  else
  {
    v3 = 0;
  }
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(v4 + 104);
  *(_QWORD *)(v4 + 88) = "numbers";
  *(_QWORD *)(v4 + 96) = 7;
  if (!v5)
    *(_BYTE *)(v4 + 104) = 1;
  v6 = sub_2081F5D78((uint64_t *)v4);
  ++*(_QWORD *)(v4 + 112);
  sub_2081F6C74(v6, (double *)v3);
  sub_20807E724(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E4BF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4BF64(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_208209DC8(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_207E4C0B8((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_208209484(a2, __p);
    *a3 = __p[0];
    sub_20820A270(a2, (_QWORD *)a3 + 1);
    sub_207E4C230(*a3, (uint64_t)a3, a2);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E4C0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20807DEF0(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_208209484(a2, &__p);
  v13[0] = __p;
  sub_20820A270(a2, &v14);
  sub_207E4CFF8(v13[0], (uint64_t)v13, a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_207E4C200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4C21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E4C230(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E4C358(v3);
      break;
    case 1:
      sub_207E4C48C(v3);
      break;
    case 2:
      sub_207E4C5D0(v3);
      break;
    case 3:
      sub_207E4C718(v3);
      break;
    case 5:
      sub_207E4C860(v3);
      break;
    case 6:
      sub_207E4C994(v3);
      break;
    case 7:
      sub_207E4CAD8(v3);
      break;
    case 8:
      sub_207E4CC20(v3);
      break;
    case 11:
      sub_207E4CD68(v3);
      break;
    case 12:
      sub_207E4CEB0(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E4C358(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_208209484(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807DA08(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4C468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4C48C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_208209920(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DD4C(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4C5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4C5D0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_208209DC8(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E094(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4C6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4C718(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820A270(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E3DC(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4C83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4C860(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20820923C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807D868(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4C994(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_2082096CC(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DBA8(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4CAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4CAD8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_208209B74(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807DEF0(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4CBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4CC20(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820A01C(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E238(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4CD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4CD68(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820A740(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E580(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4CE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4CEB0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820A994(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E724(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4CFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4CFF8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E4D120(v3);
      break;
    case 1:
      sub_207E4D254(v3);
      break;
    case 2:
      sub_207E4D398(v3);
      break;
    case 3:
      sub_207E4D4E0(v3);
      break;
    case 5:
      sub_207E4D628(v3);
      break;
    case 6:
      sub_207E4D75C(v3);
      break;
    case 7:
      sub_207E4D8A0(v3);
      break;
    case 8:
      sub_207E4D9E8(v3);
      break;
    case 11:
      sub_207E4DB30(v3);
      break;
    case 12:
      sub_207E4DC78(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E4D120(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_208209484(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807DA08(&v13, 0, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4D230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4D254(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_208209920(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DD4C(&v13, 1, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4D374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4D398(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_208209DC8(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E094(&v13, 2, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4D4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4D4E0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820A270(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E3DC(&v13, 3, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4D604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4D628(_QWORD *a1)
{
  size_t v2;
  _BYTE *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  _BYTE *v11;
  _BYTE *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = operator new(v2);
    __p = v3;
    v12 = &v3[v2];
    bzero(v3, v2);
    v11 = &v3[v2];
    v4 = v2;
    v5 = a1[1];
    do
    {
      sub_20820923C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_20807D868(&v13, 5, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4D75C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v11 = v12;
    if (2 * v2)
    {
      v4 = a1[1];
      v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_2082096CC(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_20807DBA8(&v13, 6, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4D87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4D8A0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_208209B74(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807DEF0(&v13, 7, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4D9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4D9E8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820A01C(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E238(&v13, 8, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4DB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4DB30(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v11 = v12;
    if (4 * v2)
    {
      v4 = a1[1];
      v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_20820A740(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_20807E580(&v13, 11, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4DC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4DC78(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  void *v11;
  char *v12;
  __int128 v13;

  v2 = *(_QWORD *)(*a1 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v11 = v12;
    if (8 * v2)
    {
      v4 = a1[1];
      v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_20820A994(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_20807E724(&v13, 12, (uint64_t)&__p);
  v6 = *a1;
  v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v13;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E4DD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4DDC0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E4DEB4((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E4E008(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E4DEA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E4DEB4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20807DEF0(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  sub_207E4F24C(a2, (uint64_t)v13);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_207E4DFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E4DFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4E008(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v5 = a1[3];
  v6 = *(unsigned __int8 *)(v5 + v2);
  v7 = v2 + 1;
  a1[6] = v7;
  *(_BYTE *)a2 = v6;
  v8 = v3 >= v7;
  v9 = v3 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v5 + v7);
  a1[6] += 8;
  sub_207E4E0DC(v6, a2, (uint64_t)a1);
}

void sub_207E4E0B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E4E0C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E4E0DC(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E4E204(v3);
      break;
    case 1:
      sub_207E4E39C(v3);
      break;
    case 2:
      sub_207E4E53C(v3);
      break;
    case 3:
      sub_207E4E6E0(v3);
      break;
    case 5:
      sub_207E4E884(v3);
      break;
    case 6:
      sub_207E4EA1C(v3);
      break;
    case 7:
      sub_207E4EBBC(v3);
      break;
    case 8:
      sub_207E4ED60(v3);
      break;
    case 11:
      sub_207E4EF04(v3);
      break;
    case 12:
      sub_207E4F0A8(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E4E204(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DA08(&v19, 0, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4E368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4E39C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DD4C(&v19, 1, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4E508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4E53C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E094(&v19, 2, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4E6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4E6E0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E3DC(&v19, 3, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4E850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4E884(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807D868(&v19, 5, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4E9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4EA1C(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DBA8(&v19, 6, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4EB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4EBBC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DEF0(&v19, 7, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4ED2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4ED60(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E238(&v19, 8, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4EED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4EF04(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E580(&v19, 11, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4F074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4F0A8(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E724(&v19, 12, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4F218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4F24C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v5 = a1[3];
  v6 = *(unsigned __int8 *)(v5 + v2);
  v7 = v2 + 1;
  a1[6] = v7;
  *(_BYTE *)a2 = v6;
  v8 = v3 >= v7;
  v9 = v3 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v5 + v7);
  a1[6] += 8;
  sub_207E4F320(v6, a2, (uint64_t)a1);
}

void sub_207E4F2F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E4F30C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E4F320(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E4F448(v3);
      break;
    case 1:
      sub_207E4F5E0(v3);
      break;
    case 2:
      sub_207E4F780(v3);
      break;
    case 3:
      sub_207E4F924(v3);
      break;
    case 5:
      sub_207E4FAC8(v3);
      break;
    case 6:
      sub_207E4FC60(v3);
      break;
    case 7:
      sub_207E4FE00(v3);
      break;
    case 8:
      sub_207E4FFA4(v3);
      break;
    case 11:
      sub_207E50148(v3);
      break;
    case 12:
      sub_207E502EC(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E4F448(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DA08(&v19, 0, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4F5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4F5E0(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DD4C(&v19, 1, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4F74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4F780(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E094(&v19, 2, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4F8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4F924(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E3DC(&v19, 3, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4FA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4FAC8(_QWORD *a1)
{
  size_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  char *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    v4 = &v3[v2];
    __p = v3;
    v18 = &v3[v2];
    bzero(v3, v2);
    v17 = &v3[v2];
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807D868(&v19, 5, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E4FC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4FC60(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = (char *)operator new(2 * v2);
    __p = v3;
    v18 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DBA8(&v19, 6, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4FDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4FE00(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807DEF0(&v19, 7, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E4FF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E4FFA4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E238(&v19, 8, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E50114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E50148(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = (char *)operator new(4 * v2);
    __p = v3;
    v18 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E580(&v19, 11, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E502B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E502EC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  size_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  size_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::logic_error *exception;
  void *__p;
  void *v17;
  char *v18;
  __int128 v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v17 = 0;
  v18 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = (char *)operator new(8 * v2);
    __p = v3;
    v18 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    v4 = v18;
    v17 = v18;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  v5 = v4 - v3;
  v6 = (_QWORD *)a1[1];
  v7 = v6[6];
  v8 = v6[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 < v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_20807E724(&v19, 12, (uint64_t)&__p);
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v19;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_207E5045C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E50490(int *a1, _BYTE *a2, _BYTE *a3)
{
  unsigned int v6;
  char v7;
  _BYTE *v8;

  v6 = 2;
  (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_207E508AC((uint64_t)&v7, a2, (uint64_t)a3);
    }
    else
    {
      v8 = a3;
      sub_207E41430(a2, &v8);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      sub_207E50A28(*a3, (uint64_t)a3, (uint64_t)a2);
    }
  }
  else
  {
    sub_207E50574(a1, a2, a3, v6);
  }
}

void sub_207E50574(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;
  _BYTE *v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_207E506B0();
      sub_208212838((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_207E508AC((uint64_t)&v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v15 = a3;
  sub_207E41430(a2, &v15);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  sub_207E50A28(*a3, (uint64_t)a3, (uint64_t)a2);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E506B0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C370);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C370))
    return &xmmword_25452C358;
  v2 = (char *)sub_207E5078C();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452C358, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452C368 = *((_QWORD *)v2 + 2);
    xmmword_25452C358 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C358, &dword_207C77000);
  __cxa_guard_release(&qword_25452C370);
  return &xmmword_25452C358;
}

void sub_207E50774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C370);
  _Unwind_Resume(a1);
}

void *sub_207E5078C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C390);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C390))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::NumbersSample]", qword_25452C378);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C378, &dword_207C77000);
    __cxa_guard_release(&qword_25452C390);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452C3B0);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C3B0))
    return &unk_25452C398;
  sub_208215C6C((uint64_t)qword_25452C378, (uint64_t)&unk_25452C398);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452C398, &dword_207C77000);
  __cxa_guard_release(&qword_25452C3B0);
  return &unk_25452C398;
}

void sub_207E5087C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C3B0);
  _Unwind_Resume(a1);
}

void sub_207E50894(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C390);
  _Unwind_Resume(a1);
}

void sub_207E508AC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;
  __int128 v15;
  void *__p;
  void *v17;
  uint64_t v18;
  __int128 v19;

  v13[0] = 7;
  v14 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_20807DEF0(&v19, 7, (uint64_t)&__p);
  v15 = v19;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  __p = v13;
  sub_207E41430(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v14);
  sub_207E51708(v13[0], (uint64_t)v13, (uint64_t)a2);
  v5 = v14;
  v6 = v15;
  v15 = 0uLL;
  *(_BYTE *)a3 = v13[0];
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_207E509F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E50A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E50A28(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E50B50(v3);
      break;
    case 1:
      sub_207E50C70(v3);
      break;
    case 2:
      sub_207E50D9C(v3);
      break;
    case 3:
      sub_207E50ECC(v3);
      break;
    case 5:
      sub_207E50FFC(v3);
      break;
    case 6:
      sub_207E5111C(v3);
      break;
    case 7:
      sub_207E51248(v3);
      break;
    case 8:
      sub_207E51378(v3);
      break;
    case 11:
      sub_207E514A8(v3);
      break;
    case 12:
      sub_207E515D8(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E50B50(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v12, 0, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E50C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E50C70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20807DD4C(&v14, 1, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E50D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E50D9C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20807E094(&v14, 2, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E50EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E50ECC(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20807E3DC(&v14, 3, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E50FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E50FFC(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v12, 5, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E510F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5111C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20807DBA8(&v14, 6, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E51224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51248(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20807DEF0(&v14, 7, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E51354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51378(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20807E238(&v14, 8, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E51484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E514A8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20807E580(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E515B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E515D8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20807E724(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E516E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51708(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E51830(v3);
      break;
    case 1:
      sub_207E51950(v3);
      break;
    case 2:
      sub_207E51A7C(v3);
      break;
    case 3:
      sub_207E51BAC(v3);
      break;
    case 5:
      sub_207E51CDC(v3);
      break;
    case 6:
      sub_207E51DFC(v3);
      break;
    case 7:
      sub_207E51F28(v3);
      break;
    case 8:
      sub_207E52058(v3);
      break;
    case 11:
      sub_207E52188(v3);
      break;
    case 12:
      sub_207E522B8(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E51830(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v12, 0, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5192C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51950(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207DCF3A0();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20807DD4C(&v14, 1, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E51A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51A7C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20807E094(&v14, 2, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E51B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51BAC(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20807E3DC(&v14, 3, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E51CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51CDC(_QWORD *a1)
{
  size_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  __int128 v12;

  v2 = *(_QWORD *)(*a1 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v3 = (char *)operator new(v2);
    __p = v3;
    v11 = &v3[v2];
    bzero(v3, v2);
    v10 = &v3[v2];
    v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v12, 5, (uint64_t)&__p);
  v5 = *a1;
  v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v12;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E51DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51DFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 < 0)
      sub_207CA420C();
    v3 = 2 * v2;
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v13 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_20807DBA8(&v14, 6, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E51F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E51F28(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207CA420C();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20807DEF0(&v14, 7, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E52034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E52058(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20807E238(&v14, 8, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E52164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E52188(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 62)
      sub_207D0CD58();
    v3 = 4 * v2;
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v13 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_20807E580(&v14, 11, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E52294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E522B8(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = *(_QWORD *)(*a1 + 8);
  v12 = 0;
  v13 = 0;
  __p = 0;
  if (v2)
  {
    if (v2 >> 61)
      sub_207CA420C();
    v3 = 8 * v2;
    v4 = (char *)operator new(8 * v2);
    __p = v4;
    v13 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    v12 = v13;
    v5 = a1[1];
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_20807E724(&v14, 12, (uint64_t)&__p);
  v7 = *a1;
  v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v14;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E523C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207E523E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new(0xF0uLL);
  v5 = v4;
  *(_QWORD *)v4 = off_24C074D18;
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4[2] = *(_OWORD *)(a1 + 32);
  *((_BYTE *)v4 + 48) = 0;
  *((_BYTE *)v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4[3] = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v4 + 8) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *((_BYTE *)v4 + 72) = 1;
  }
  *((_BYTE *)v4 + 80) = 0;
  *((_BYTE *)v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v4[5] = *(_OWORD *)(a1 + 80);
    *((_QWORD *)v4 + 12) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *((_BYTE *)v4 + 104) = 1;
  }
  *((_BYTE *)v4 + 144) = 0;
  v4[7] = *(_OWORD *)(a1 + 112);
  *((_QWORD *)v4 + 16) = *(_QWORD *)(a1 + 128);
  *((_BYTE *)v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    v4[9] = *(_OWORD *)(a1 + 144);
    *((_QWORD *)v4 + 20) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    v4[11] = v7;
    *((_BYTE *)v4 + 192) = 1;
  }
  *((_BYTE *)v4 + 208) = 0;
  *((_BYTE *)v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v4[13] = *(_OWORD *)(a1 + 208);
    *((_QWORD *)v4 + 28) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *((_BYTE *)v4 + 232) = 1;
  }
  *(_QWORD *)v4 = off_24C074C98;
  *a2 = &off_24C078D18;
  a2[1] = v4;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_207E52560(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207DC7DB8(v1);
  _Unwind_Resume(a1);
}

void sub_207E52574(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_207E392A0(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2081F1A98(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20806DC2C(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points2";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2081F1E44(a1);
  sub_207E527D4(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_207E527A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E527C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E527D4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              v47 = 2;
              v48 = v36;
              sub_2081F1FC0(a3, (size_t *)&v47);
              v36 += 2;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 2;
            v48 = v5;
            sub_2081F1FC0(a3, (size_t *)&v47);
            v5 += 2;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 2;
            v48 = v8;
            sub_2081F4624(a3, (uint64_t)&v47);
            v8 += 4;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v37;
          sub_2081F4624(a3, (uint64_t)&v47);
          v37 += 4;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 2;
            v48 = v11;
            sub_2081F4894(a3, (uint64_t)&v47);
            v11 += 8;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v38;
          sub_2081F4894(a3, (uint64_t)&v47);
          v38 += 8;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 2;
            v48 = v14;
            sub_2081F4B04(a3, (uint64_t)&v47);
            v14 += 16;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v39;
          sub_2081F4B04(a3, (uint64_t)&v47);
          v39 += 16;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 2;
          v48 = v17;
          sub_2081F43B4(a3, (size_t *)&v47);
          v17 += 2;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            v47 = 2;
            v48 = v41;
            sub_2081F43B4(a3, (size_t *)&v47);
            v41 += 2;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 2;
            v48 = v20;
            sub_2081F44EC(a3, (uint64_t)&v47);
            v20 += 4;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v42;
          sub_2081F44EC(a3, (uint64_t)&v47);
          v42 += 4;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 2;
            v48 = v23;
            sub_2081F475C(a3, (uint64_t)&v47);
            v23 += 8;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v43;
          sub_2081F475C(a3, (uint64_t)&v47);
          v43 += 8;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 2;
            v48 = v26;
            sub_2081F49CC(a3, (uint64_t)&v47);
            v26 += 16;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v44;
          sub_2081F49CC(a3, (uint64_t)&v47);
          v44 += 16;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 2;
            v48 = v29;
            sub_2081F50E4(a3, (float **)&v47);
            v29 += 8;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v45;
          sub_2081F50E4(a3, (float **)&v47);
          v45 += 8;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 2;
            v48 = v32;
            sub_2081F5504(a3, &v47);
            v32 += 16;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v46;
          sub_2081F5504(a3, &v47);
          v46 += 16;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E531EC(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_2082100A4(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20821166C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_208211974();
  }
  v15 = xmmword_24C076878;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_207E53350(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_207E5333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E53350(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_2082100A4((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20820B4B0(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_208210C8C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_208210F00((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20821166C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_208211974();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20820FF5C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_2082101E8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_2082104AC();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_208210774((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_208210B90();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_208210FF0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20821152C();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_208211A6C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_208211B48((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

void sub_207E53BA8(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_207E3B438(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2081F133C(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_207D20660(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points2";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2081F17E4(a1);
  sub_207E53E08(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_207E53DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_207D20660(v13, a13);
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E53DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E53E08(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              v47 = 2;
              v48 = v36;
              sub_2081F1960(a3, (size_t *)&v47);
              v36 += 2;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 2;
            v48 = v5;
            sub_2081F1960(a3, (size_t *)&v47);
            v5 += 2;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 2;
            v48 = v8;
            sub_2081F2940(a3, (uint64_t)&v47);
            v8 += 4;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v37;
          sub_2081F2940(a3, (uint64_t)&v47);
          v37 += 4;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 2;
            v48 = v11;
            sub_2081F2BB0(a3, (uint64_t)&v47);
            v11 += 8;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v38;
          sub_2081F2BB0(a3, (uint64_t)&v47);
          v38 += 8;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 2;
            v48 = v14;
            sub_2081F2E20(a3, (uint64_t)&v47);
            v14 += 16;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v39;
          sub_2081F2E20(a3, (uint64_t)&v47);
          v39 += 16;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 2;
          v48 = v17;
          sub_2081F26D0(a3, (size_t *)&v47);
          v17 += 2;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            v47 = 2;
            v48 = v41;
            sub_2081F26D0(a3, (size_t *)&v47);
            v41 += 2;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 2;
            v48 = v20;
            sub_2081F2808(a3, (uint64_t)&v47);
            v20 += 4;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v42;
          sub_2081F2808(a3, (uint64_t)&v47);
          v42 += 4;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 2;
            v48 = v23;
            sub_2081F2A78(a3, (uint64_t)&v47);
            v23 += 8;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v43;
          sub_2081F2A78(a3, (uint64_t)&v47);
          v43 += 8;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 2;
            v48 = v26;
            sub_2081F2CE8(a3, (uint64_t)&v47);
            v26 += 16;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v44;
          sub_2081F2CE8(a3, (uint64_t)&v47);
          v44 += 16;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 2;
            v48 = v29;
            sub_2081F3400(a3, (float **)&v47);
            v29 += 8;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v45;
          sub_2081F3400(a3, (float **)&v47);
          v45 += 8;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 2;
            v48 = v32;
            sub_2081F3820(a3, &v47);
            v32 += 16;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 2;
          v48 = v46;
          sub_2081F3820(a3, &v47);
          v46 += 16;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E54820(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_208208D08(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24C076878;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_207E54940(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_207E5492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E54940(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_208208D08(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_207CBAB98(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_207CBAB98(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_207CBAB98(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_208208B24(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_207CBAB98(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_207CBAB98(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_207CBAB98(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_207CBAB98(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_207CBAB98(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E5505C(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24C076878;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_207E55180(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_207E5516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_207E55180(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| (v8 = a2[1], sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_207D0B114(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_207D0B114(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

void sub_207E5550C(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_207E3D2B0(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24C076878;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_207E55608(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_207E555F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_207E55608(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E55BE4(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_207E55D08((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_207E3DB44((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_20809778C(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points2";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2081F5F4C(a1);
    sub_207E55F1C(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_207E55D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_2080806D0((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_207E3DB44((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20809778C(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points2";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2081F5F4C(a2);
  sub_207E576E4(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_207E55EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E55F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E55F1C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E56044(v3);
      break;
    case 1:
      sub_207E56270(v3);
      break;
    case 2:
      sub_207E564A8(v3);
      break;
    case 3:
      sub_207E566E4(v3);
      break;
    case 5:
      sub_207E56964(v3);
      break;
    case 6:
      sub_207E56B90(v3);
      break;
    case 7:
      sub_207E56DC8(v3);
      break;
    case 8:
      sub_207E57004(v3);
      break;
    case 11:
      sub_207E57284(v3);
      break;
    case 12:
      sub_207E574B4(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E56044(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F631C(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E5620C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E56270(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7078(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E56444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E564A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F71F0(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E56680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E566E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8AC4(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E568E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E56964(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F6E98(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E56B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E56B90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207CA420C();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F6F88(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E56D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E56DC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7134(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E56FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E57004(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8788(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E57208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E57284(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F75DC(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E57450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E574B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F76E4(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E57680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E576E4(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E5780C(v3);
      break;
    case 1:
      sub_207E57A38(v3);
      break;
    case 2:
      sub_207E57C70(v3);
      break;
    case 3:
      sub_207E57EAC(v3);
      break;
    case 5:
      sub_207E5812C(v3);
      break;
    case 6:
      sub_207E58358(v3);
      break;
    case 7:
      sub_207E58590(v3);
      break;
    case 8:
      sub_207E587CC(v3);
      break;
    case 11:
      sub_207E58A4C(v3);
      break;
    case 12:
      sub_207E58C7C(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E5780C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F631C(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E579D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E57A38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7078(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E57C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E57C70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F71F0(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E57E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E57EAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8AC4(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E580B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5812C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F6E98(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E582F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E58358(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207CA420C();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F6F88(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5852C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E58590(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7134(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E58768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E587CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8788(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E589D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E58A4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F75DC(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E58C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E58C7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F76E4(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E58E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E58EAC(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  if (a4 < 2)
  {
    sub_207E58FA0((uint64_t)v10, a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    LOBYTE(v10[0]) = 0;
    sub_20820B6F8(a2[6], v10);
    *a3 = v10[0];
    sub_20820BBEC(a2[6], (_QWORD *)a3 + 1);
    v11 = xmmword_24C076878;
    v7 = *a3;
    v10[0] = a3;
    v10[1] = a2;
    v10[2] = &v11;
    sub_207E59134(v7, v10);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(uint64_t *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_207E58FA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2080806D0((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20820B6F8(a2[6], &__p);
  v16 = __p;
  sub_20820BBEC(a2[6], &v17);
  v22 = xmmword_24C076878;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_207E5A3CC(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E59104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E59134(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E591DC(a2);
      break;
    case 1:
      sub_207E59398(a2);
      break;
    case 2:
      sub_207E59564(a2);
      break;
    case 3:
      sub_207E59734(a2);
      break;
    case 5:
      sub_207E59904(a2);
      break;
    case 6:
      sub_207E59AC0(a2);
      break;
    case 7:
      sub_207E59C8C(a2);
      break;
    case 8:
      sub_207E59E5C(a2);
      break;
    case 11:
      sub_207E5A02C(a2);
      break;
    case 12:
      sub_207E5A1FC(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E591DC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B6F8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E59338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59398(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B88C(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E59504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59564(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BA20(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E596D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59734(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BBEC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E598A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59904(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B648(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E59A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59AC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B7DC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E59C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59C8C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820B970(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E59DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E59E5C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BB04(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E59FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5A02C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BCC8(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5A19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5A1FC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BDF8(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5A36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5A3CC(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E5A474(a2);
      break;
    case 1:
      sub_207E5A630(a2);
      break;
    case 2:
      sub_207E5A7FC(a2);
      break;
    case 3:
      sub_207E5A9CC(a2);
      break;
    case 5:
      sub_207E5AB9C(a2);
      break;
    case 6:
      sub_207E5AD58(a2);
      break;
    case 7:
      sub_207E5AF24(a2);
      break;
    case 8:
      sub_207E5B0F4(a2);
      break;
    case 11:
      sub_207E5B2C4(a2);
      break;
    case 12:
      sub_207E5B494(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E5A474(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B6F8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5A5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5A630(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B88C(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5A79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5A7FC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BA20(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5A96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5A9CC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BBEC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5AB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5AB9C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B648(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5ACF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5AD58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B7DC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5AEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5AF24(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820B970(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5B094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5B0F4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BB04(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5B264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5B2C4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BCC8(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5B434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5B494(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BDF8(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5B604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5B664(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_207E5B788((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_207E3F0C4((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_208097288(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points2";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2081F5AC0(a1);
    sub_207E5B99C(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_207E5B788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_2080806D0((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_207E3F0C4((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_208097288(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points2";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2081F5AC0(a2);
  sub_207E5D164(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_207E5B96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5B988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E5B99C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E5BAC4(v3);
      break;
    case 1:
      sub_207E5BCF0(v3);
      break;
    case 2:
      sub_207E5BF28(v3);
      break;
    case 3:
      sub_207E5C164(v3);
      break;
    case 5:
      sub_207E5C3E4(v3);
      break;
    case 6:
      sub_207E5C610(v3);
      break;
    case 7:
      sub_207E5C848(v3);
      break;
    case 8:
      sub_207E5CA84(v3);
      break;
    case 11:
      sub_207E5CD04(v3);
      break;
    case 12:
      sub_207E5CF34(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E5BAC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F5E90(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E5BC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5BCF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F65B8(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5BEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5BF28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6730(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5C100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5C164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F80CC(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E5C368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5C3E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F63D8(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E5C5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5C610(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207CA420C();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F64C8(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5C7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5C848(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6674(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5CA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5CA84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F7A10(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E5CC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5CD04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6B44(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5CED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5CF34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6C74(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5D100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5D164(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E5D28C(v3);
      break;
    case 1:
      sub_207E5D4B8(v3);
      break;
    case 2:
      sub_207E5D6F0(v3);
      break;
    case 3:
      sub_207E5D92C(v3);
      break;
    case 5:
      sub_207E5DBAC(v3);
      break;
    case 6:
      sub_207E5DDD8(v3);
      break;
    case 7:
      sub_207E5E010(v3);
      break;
    case 8:
      sub_207E5E24C(v3);
      break;
    case 11:
      sub_207E5E4CC(v3);
      break;
    case 12:
      sub_207E5E6FC(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E5D28C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F5E90(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E5D454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5D4B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F65B8(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5D68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5D6F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6730(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5D8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5D92C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F80CC(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E5DB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5DBAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 2 * v2);
    v16 = v5;
  }
  if (v2)
  {
    v6 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 2;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F63D8(v8, (uint64_t)&v18);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if ((*(_BYTE *)(v18 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E5DD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5DDD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0)
      sub_207CA420C();
    __p = operator new(4 * v2);
    v14 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F64C8(v5, (uint64_t)&v15);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5DFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5E010(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(8 * v2);
    v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v13 = v14;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 2;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6674(v5, (uint64_t)&v15);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if ((*(_BYTE *)(v15 + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E5E1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5E24C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v16 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v15 = v16;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F7A10(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if ((v17[56] & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E5E450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5E4CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(8 * v2);
    v15 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6B44(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5E698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5E6FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(16 * v2);
    v15 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v14 = v15;
  }
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6C74(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5E8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5E92C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  __int128 v10;
  void *__p;
  uint64_t v12;
  __int128 *v13;

  LODWORD(__p) = 2;
  sub_208209DC8(a2, &__p);
  v5 = __p;
  if (__p >= 2)
    v6 = 2;
  else
    v6 = __p;
  if (v6 < 2)
  {
    sub_207E5EA98((uint64_t)&__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_208209484(a2, &__p);
    *a3 = __p;
    sub_20820A270(a2, (_QWORD *)a3 + 1);
    v10 = xmmword_24C076878;
    v7 = *a3;
    __p = a3;
    v12 = a2;
    v13 = &v10;
    sub_207E5EC2C(v7, &__p);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          v9 = 0;
          if (SHIBYTE(v13) < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      v9 = 1;
      if (SHIBYTE(v13) < 0)
LABEL_24:
        operator delete(__p);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v8 = 0;
      else
        v8 = v9;
    }
    while ((v8 & 1) != 0);
  }
}

void sub_207E5EA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2080806D0((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = (uint64_t)__p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_208209484(a2, &__p);
  v16 = __p;
  sub_20820A270(a2, &v17);
  v22 = xmmword_24C076878;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_207E5FE9C(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E5EBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5EC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E5EC2C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E5ECD4(a2);
      break;
    case 1:
      sub_207E5EE8C(a2);
      break;
    case 2:
      sub_207E5F054(a2);
      break;
    case 3:
      sub_207E5F220(a2);
      break;
    case 5:
      sub_207E5F3EC(a2);
      break;
    case 6:
      sub_207E5F5A4(a2);
      break;
    case 7:
      sub_207E5F76C(a2);
      break;
    case 8:
      sub_207E5F938(a2);
      break;
    case 11:
      sub_207E5FB04(a2);
      break;
    case 12:
      sub_207E5FCD0(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E5ECD4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_208209484(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5EE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5EE8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_208209920(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5EFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5F054(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209DC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5F1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5F220(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A270(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5F38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5F3EC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20820923C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E5F544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5F5A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_2082096CC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5F70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5F76C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209B74(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5F8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5F938(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A01C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5FAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5FB04(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20820A740(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5FC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5FCD0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A994(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E5FE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E5FE9C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E5FF44(a2);
      break;
    case 1:
      sub_207E600FC(a2);
      break;
    case 2:
      sub_207E602C4(a2);
      break;
    case 3:
      sub_207E60490(a2);
      break;
    case 5:
      sub_207E6065C(a2);
      break;
    case 6:
      sub_207E60814(a2);
      break;
    case 7:
      sub_207E609DC(a2);
      break;
    case 8:
      sub_207E60BA8(a2);
      break;
    case 11:
      sub_207E60D74(a2);
      break;
    case 12:
      sub_207E60F40(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E5FF44(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_208209484(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E6009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E600FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_208209920(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E60264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E602C4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209DC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E60430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E60490(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A270(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E605FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6065C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20820923C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E607B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E60814(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_2082096CC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E6097C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E609DC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209B74(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E60B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E60BA8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A01C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E60D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E60D74(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20820A740(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E60EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E60F40(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A994(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E610AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6110C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E61200((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E61360(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E611EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E61200(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16[8];
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2080806D0((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  sub_207E62A78(a2, (uint64_t)v16);
  v5 = v16[0];
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E61330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E61344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E61360(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C076878;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_207E61460(v5, v10);
}

void sub_207E61438(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E6144C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E61460(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E61508(a2);
      break;
    case 1:
      sub_207E61724(a2);
      break;
    case 2:
      sub_207E61948(a2);
      break;
    case 3:
      sub_207E61B70(a2);
      break;
    case 5:
      sub_207E61D98(a2);
      break;
    case 6:
      sub_207E61FB4(a2);
      break;
    case 7:
      sub_207E621D8(a2);
      break;
    case 8:
      sub_207E62400(a2);
      break;
    case 11:
      sub_207E62628(a2);
      break;
    case 12:
      sub_207E62850(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E61508(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DA08(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E616B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E61724(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807DD4C(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E618D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E61948(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E094(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E61B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E61B70(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E3DC(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E61D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E61D98(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807D868(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E61F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E61FB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807DBA8(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E62168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E621D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807DEF0(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E62390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E62400(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E238(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E625B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E62628(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E580(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E627E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E62850(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E724(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E62A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E62A78(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C076878;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_207E62B78(v5, v10);
}

void sub_207E62B50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E62B64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E62B78(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E62C20(a2);
      break;
    case 1:
      sub_207E62E3C(a2);
      break;
    case 2:
      sub_207E63060(a2);
      break;
    case 3:
      sub_207E63288(a2);
      break;
    case 5:
      sub_207E634B0(a2);
      break;
    case 6:
      sub_207E636CC(a2);
      break;
    case 7:
      sub_207E638F0(a2);
      break;
    case 8:
      sub_207E63B18(a2);
      break;
    case 11:
      sub_207E63D40(a2);
      break;
    case 12:
      sub_207E63F68(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E62C20(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DA08(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E62DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E62E3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807DD4C(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E62FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E63060(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E094(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E63218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E63288(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E3DC(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E63440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E634B0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807D868(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E6365C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E636CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807DBA8(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E63880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E638F0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807DEF0(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E63AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E63B18(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E238(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E63CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E63D40(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E580(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E63EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E63F68(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_20807E724(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E64120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E64190(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *v7[3];
  __int128 v8;

  LODWORD(v7[0]) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2)
    {
      sub_207E64790((uint64_t)v7, a2, (uint64_t)a3);
    }
    else
    {
      v7[0] = a3;
      sub_207E41430(a2, v7);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      v8 = xmmword_24C076878;
      v6 = *a3;
      v7[0] = a3;
      v7[1] = a2;
      v7[2] = &v8;
      sub_207E64928(v6, v7);
    }
  }
  else
  {
    sub_207E6428C(a1, a2, a3, v7[0]);
  }
}

void sub_207E6428C(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int128 *v13;
  _BYTE *v14[3];
  __int128 v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v14[0]) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      v12 = v14[0];
      v13 = sub_207E643E0();
      sub_208212838((std::string *)v13, v12, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_207E64790((uint64_t)v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_207E41430(a2, v14);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v15 = xmmword_24C076878;
  v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_207E64928(v11, v14);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E643E0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C3D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C3D0))
    return &xmmword_25452C3B8;
  v2 = sub_207E644BC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C3B8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C3C8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C3B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C3B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C3D0);
  return &xmmword_25452C3B8;
}

void sub_207E644A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C3D0);
  _Unwind_Resume(a1);
}

std::string *sub_207E644BC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C3F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C3F0))
    return &stru_25452C3D8;
  sub_207E645AC((uint64_t)__p);
  sub_207D50234((char *)__p, &stru_25452C3D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C3D8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C3F0);
  return &stru_25452C3D8;
}

void sub_207E6456C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C3F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C3F0);
  _Unwind_Resume(a1);
}

void sub_207E645AC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C410);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C410))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<2>]", qword_25452C3F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C3F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C410);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C430);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C430))
  {
    v5 = sub_207D49434(qword_25452C3F8, "<", 0);
    sub_207D49330(qword_25452C3F8, 0, v5, qword_25452C418);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C418, &dword_207C77000);
    __cxa_guard_release(&qword_25452C430);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C450);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C450))
  {
    sub_208215C6C((uint64_t)qword_25452C418, (uint64_t)&xmmword_25452C438);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C438, &dword_207C77000);
    __cxa_guard_release(&qword_25452C450);
  }
  if (byte_25452C44F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C438, *((unint64_t *)&xmmword_25452C438 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C438;
    *(_QWORD *)(a1 + 16) = unk_25452C448;
  }
}

void sub_207E64748(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C450);
  _Unwind_Resume(a1);
}

void sub_207E64760(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C430);
  _Unwind_Resume(a1);
}

void sub_207E64778(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C410);
  _Unwind_Resume(a1);
}

void sub_207E64790(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_2080806D0((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  __p = &v16;
  sub_207E41430(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
  v22 = xmmword_24C076878;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_207E65AF0(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E648F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E64914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E64928(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E649D0(a2);
      break;
    case 1:
      sub_207E64B74(a2);
      break;
    case 2:
      sub_207E64D2C(a2);
      break;
    case 3:
      sub_207E64EE8(a2);
      break;
    case 5:
      sub_207E650A4(a2);
      break;
    case 6:
      sub_207E65248(a2);
      break;
    case 7:
      sub_207E65400(a2);
      break;
    case 8:
      sub_207E655BC(a2);
      break;
    case 11:
      sub_207E65778(a2);
      break;
    case 12:
      sub_207E65934(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E649D0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807DA08(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E64B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E64B74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E64CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E64D2C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E64E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E64EE8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E65044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E650A4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807D868(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E651E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E65248(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E653A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E65400(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E6555C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E655BC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E65718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E65778(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E658D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E65934(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E65A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E65AF0(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E65B98(a2);
      break;
    case 1:
      sub_207E65D3C(a2);
      break;
    case 2:
      sub_207E65EF4(a2);
      break;
    case 3:
      sub_207E660B0(a2);
      break;
    case 5:
      sub_207E6626C(a2);
      break;
    case 6:
      sub_207E66410(a2);
      break;
    case 7:
      sub_207E665C8(a2);
      break;
    case 8:
      sub_207E66784(a2);
      break;
    case 11:
      sub_207E66940(a2);
      break;
    case 12:
      sub_207E66AFC(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E65B98(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CF94B8();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807DA08(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E65CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E65D3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207DCF3A0();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E65E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E65EF4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E66050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E660B0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E6620C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6626C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807D868(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E663B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E66410(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 < 0)
      sub_207CA420C();
    v4 = 4 * v2;
    v5 = (char *)operator new(4 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E66568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E665C8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207CA420C();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E66724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E66784(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E668E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E66940(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62)
      sub_207D0CD58();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E66A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E66AFC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 2 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61)
      sub_207CA420C();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 1) != 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E66C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207E66CB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new(0xF0uLL);
  v5 = v4;
  *(_QWORD *)v4 = off_24C077540;
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4[2] = *(_OWORD *)(a1 + 32);
  *((_BYTE *)v4 + 48) = 0;
  *((_BYTE *)v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4[3] = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v4 + 8) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *((_BYTE *)v4 + 72) = 1;
  }
  *((_BYTE *)v4 + 80) = 0;
  *((_BYTE *)v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v4[5] = *(_OWORD *)(a1 + 80);
    *((_QWORD *)v4 + 12) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *((_BYTE *)v4 + 104) = 1;
  }
  *((_BYTE *)v4 + 144) = 0;
  v4[7] = *(_OWORD *)(a1 + 112);
  *((_QWORD *)v4 + 16) = *(_QWORD *)(a1 + 128);
  *((_BYTE *)v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    v4[9] = *(_OWORD *)(a1 + 144);
    *((_QWORD *)v4 + 20) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    v4[11] = v7;
    *((_BYTE *)v4 + 192) = 1;
  }
  *((_BYTE *)v4 + 208) = 0;
  *((_BYTE *)v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v4[13] = *(_OWORD *)(a1 + 208);
    *((_QWORD *)v4 + 28) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *((_BYTE *)v4 + 232) = 1;
  }
  *(_QWORD *)v4 = off_24C0774C0;
  *a2 = &off_24C078D18;
  a2[1] = v4;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_207E66E30(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207E66EBC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E66E44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C077540;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E66EBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C077540;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E66F34(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207E66F3C(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C077500, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_20807F93C(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_207E66FE4(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_207E68290();
  sub_207E67098(a1);
  sub_207D49528(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_207E6707C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E67098(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C5F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C5F0))
  {
    v4 = sub_207E67EE0();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_25452C5D8, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25452C5E8 = *(_QWORD *)(v9 - 8);
      xmmword_25452C5D8 = v7;
    }
    sub_207C99DE0(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C5D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C5F0);
  }
  return sub_207E68558(&xmmword_25452C5D8, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)"}");
}

void sub_207E671A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  __cxa_guard_abort(&qword_25452C5F0);
  _Unwind_Resume(a1);
}

void sub_207E671C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C5F0);
  _Unwind_Resume(a1);
}

void sub_207E671E0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 4;
}

void sub_207E6720C(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 4, a2);
}

_QWORD *sub_207E67244(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C077540;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E672BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C077540;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E67334(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207E6797C();
  return sub_207E67488(v2, (uint64_t)"{", (_BYTE **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_207E6738C(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207E676B4((uint64_t)v5, (uint64_t)v2, (_BYTE **)(a1 + 8));
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765F8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765E0[v3])(v5, v2);
  return result;
}

void sub_207E67424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C0765E0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207E6745C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207E67488(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207E676B4((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0765F8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0765E0[v16])(&p_dst, &__dst);
  return result;
}

void sub_207E67624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E6763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E67650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E67664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E67678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E6768C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E676A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E676B4(uint64_t a1, uint64_t a2, _BYTE **a3)
{
  _OWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v24 = v5;
  v6 = sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_208205930(v6, v23);
  sub_207CBAB98(v7, (uint64_t)",", 1);
  v23[0] = v5 + 1;
  sub_208081F80(**a3, (uint64_t)a3, (uint64_t)v23);
  sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)"}", 1);
  v8 = *((_DWORD *)v5 + 30);
  if ((v8 & 0x10) != 0)
  {
    v11 = *((_QWORD *)v5 + 14);
    v12 = *((_QWORD *)v5 + 9);
    if (v11 < v12)
    {
      *((_QWORD *)v5 + 14) = v12;
      v11 = v12;
    }
    v13 = (const void *)*((_QWORD *)v5 + 8);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = (const void *)*((_QWORD *)v5 + 5);
    v9 = *((_QWORD *)v5 + 7) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v16 + 16);
    operator delete(v16);
  }
  v23[0] = a2;
  v23[1] = __dst;
  v23[2] = a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_207CA9F48();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_207E67940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E67968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2082155DC((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_207E6797C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C470);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C470))
    return &xmmword_25452C458;
  v2 = sub_207E67A58();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C458, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C468 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C458 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C458, &dword_207C77000);
  __cxa_guard_release(&qword_25452C470);
  return &xmmword_25452C458;
}

void sub_207E67A40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C470);
  _Unwind_Resume(a1);
}

std::string *sub_207E67A58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C490);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C490))
    return &stru_25452C478;
  sub_207E67CFC((uint64_t)__p);
  sub_207E67B48((char *)__p, &stru_25452C478);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C478, &dword_207C77000);
  __cxa_guard_release(&qword_25452C490);
  return &stru_25452C478;
}

void sub_207E67B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C490);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C490);
  _Unwind_Resume(a1);
}

void sub_207E67B48(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207E67EE0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207E67CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207E67CFC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C550);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C550))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Points<3>>]", qword_25452C538);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C538, &dword_207C77000);
    __cxa_guard_release(&qword_25452C550);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C570);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C570))
  {
    v5 = sub_207D49434(qword_25452C538, "<", 0);
    sub_207D49330(qword_25452C538, 0, v5, qword_25452C558);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C558, &dword_207C77000);
    __cxa_guard_release(&qword_25452C570);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C590);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C590))
  {
    sub_208215C6C((uint64_t)qword_25452C558, (uint64_t)&xmmword_25452C578);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C578, &dword_207C77000);
    __cxa_guard_release(&qword_25452C590);
  }
  if (byte_25452C58F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C578, *((unint64_t *)&xmmword_25452C578 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C578;
    *(_QWORD *)(a1 + 16) = unk_25452C588;
  }
}

void sub_207E67E98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C590);
  _Unwind_Resume(a1);
}

void sub_207E67EB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C570);
  _Unwind_Resume(a1);
}

void sub_207E67EC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C550);
  _Unwind_Resume(a1);
}

__int128 *sub_207E67EE0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C4B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C4B0))
    return &xmmword_25452C498;
  v2 = sub_207E67FBC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C498, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C4A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C498 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C498, &dword_207C77000);
  __cxa_guard_release(&qword_25452C4B0);
  return &xmmword_25452C498;
}

void sub_207E67FA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C4B0);
  _Unwind_Resume(a1);
}

std::string *sub_207E67FBC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C4D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C4D0))
    return &stru_25452C4B8;
  sub_207E680AC((uint64_t)__p);
  sub_207E36DD8((char *)__p, &stru_25452C4B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C4B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C4D0);
  return &stru_25452C4B8;
}

void sub_207E6806C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C4D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C4D0);
  _Unwind_Resume(a1);
}

void sub_207E680AC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C4F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C4F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Points<3>]", qword_25452C4D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C4D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C4F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C510);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C510))
  {
    v5 = sub_207D49434(qword_25452C4D8, "<", 0);
    sub_207D49330(qword_25452C4D8, 0, v5, qword_25452C4F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C4F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C510);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C530);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C530))
  {
    sub_208215C6C((uint64_t)qword_25452C4F8, (uint64_t)&xmmword_25452C518);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C518, &dword_207C77000);
    __cxa_guard_release(&qword_25452C530);
  }
  if (byte_25452C52F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C518, *((unint64_t *)&xmmword_25452C518 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C518;
    *(_QWORD *)(a1 + 16) = unk_25452C528;
  }
}

void sub_207E68248(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C530);
  _Unwind_Resume(a1);
}

void sub_207E68260(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C510);
  _Unwind_Resume(a1);
}

void sub_207E68278(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C4F0);
  _Unwind_Resume(a1);
}

std::string *sub_207E68290()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452C5B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C5B0))
  {
    sub_207C96EE8(v9, "viz::PackageData");
    v2 = sub_207E67EE0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_207E316D0();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_207CAA110(v8, (uint64_t)__dst, 4uLL);
    sub_208215D20((char *)v9, (uint64_t *)v8, &stru_25452C598, v6, v7);
    sub_207C99DE0(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C598, &dword_207C77000);
        __cxa_guard_release(&qword_25452C5B0);
        return &stru_25452C598;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25452C598;
}

void sub_207E68474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_207C99DE0(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25452C5B0);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25452C5B0);
  _Unwind_Resume(a1);
}

uint64_t sub_207E68558(__int128 *a1, uint64_t a2, _BYTE **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207E676B4((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0765F8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0765E0[v11])(&p_dst, &__dst);
  return result;
}

void sub_207E68698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E686B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E686C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E686D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E686EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E68700(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_207E392A0(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2081F1A98(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20806DC2C(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points3";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2081F1E44(a1);
  sub_207E68960(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_207E6892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E6894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E68960(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              v47 = 3;
              v48 = v36;
              sub_2081F1FC0(a3, (size_t *)&v47);
              v36 += 3;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 3;
            v48 = v5;
            sub_2081F1FC0(a3, (size_t *)&v47);
            v5 += 3;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 3;
            v48 = v8;
            sub_2081F4624(a3, (uint64_t)&v47);
            v8 += 6;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v37;
          sub_2081F4624(a3, (uint64_t)&v47);
          v37 += 6;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 3;
            v48 = v11;
            sub_2081F4894(a3, (uint64_t)&v47);
            v11 += 12;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v38;
          sub_2081F4894(a3, (uint64_t)&v47);
          v38 += 12;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 3;
            v48 = v14;
            sub_2081F4B04(a3, (uint64_t)&v47);
            v14 += 24;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v39;
          sub_2081F4B04(a3, (uint64_t)&v47);
          v39 += 24;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 3;
          v48 = v17;
          sub_2081F43B4(a3, (size_t *)&v47);
          v17 += 3;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            v47 = 3;
            v48 = v41;
            sub_2081F43B4(a3, (size_t *)&v47);
            v41 += 3;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 3;
            v48 = v20;
            sub_2081F44EC(a3, (uint64_t)&v47);
            v20 += 6;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v42;
          sub_2081F44EC(a3, (uint64_t)&v47);
          v42 += 6;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 3;
            v48 = v23;
            sub_2081F475C(a3, (uint64_t)&v47);
            v23 += 12;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v43;
          sub_2081F475C(a3, (uint64_t)&v47);
          v43 += 12;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 3;
            v48 = v26;
            sub_2081F49CC(a3, (uint64_t)&v47);
            v26 += 24;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v44;
          sub_2081F49CC(a3, (uint64_t)&v47);
          v44 += 24;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 3;
            v48 = v29;
            sub_2081F50E4(a3, (float **)&v47);
            v29 += 12;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v45;
          sub_2081F50E4(a3, (float **)&v47);
          v45 += 12;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 3;
            v48 = v32;
            sub_2081F5504(a3, &v47);
            v32 += 24;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v46;
          sub_2081F5504(a3, &v47);
          v46 += 24;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E69378(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_2082100A4(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20821166C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_208211974();
  }
  v15 = xmmword_24C076888;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_207E694DC(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_207E694C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E694DC(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_2082100A4((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20820B4B0(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_208210C8C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_208210F00((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20821166C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_208211974();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20820FF5C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_2082101E8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_2082104AC();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_208210774((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_208210B90();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_208210FF0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20821152C();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_208211A6C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_208211B48((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

void sub_207E69D34(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_207E3B438(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2081F133C(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_207D20660(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "points3";
    *v11 = 7;
    if (!v16)
      *v10 = 1;
  }
  sub_2081F17E4(a1);
  sub_207E69F94(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_207E69F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_207D20660(v13, a13);
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E69F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E69F94(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  switch(a1)
  {
    case 0:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 0);
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v5)
        v6 = 1;
      else
        v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
        {
          if (!v5)
          {
LABEL_86:
            v36 = 0;
            while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              v47 = 3;
              v48 = v36;
              sub_2081F1960(a3, (size_t *)&v47);
              v36 += 3;
              if (!--v7)
                return;
            }
            goto LABEL_144;
          }
          do
          {
            v47 = 3;
            v48 = v5;
            sub_2081F1960(a3, (size_t *)&v47);
            v5 += 3;
            --v7;
          }
          while (v7);
        }
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v7 = *(_QWORD *)(a2 + 8);
        if (v7)
          goto LABEL_86;
      }
      return;
    case 1:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 1);
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v8)
        v9 = 0;
      else
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v9)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (!v10)
          return;
        if (v8)
        {
          do
          {
            v47 = 3;
            v48 = v8;
            sub_2081F2940(a3, (uint64_t)&v47);
            v8 += 6;
            --v10;
          }
          while (v10);
          return;
        }
        goto LABEL_92;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v10 = *(_QWORD *)(a2 + 8);
      if (v10)
      {
LABEL_92:
        v37 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v37;
          sub_2081F2940(a3, (uint64_t)&v47);
          v37 += 6;
          if (!--v10)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 2:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 2);
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v11)
        v12 = 0;
      else
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v12)
      {
        v13 = *(_QWORD *)(a2 + 8);
        if (!v13)
          return;
        if (v11)
        {
          do
          {
            v47 = 3;
            v48 = v11;
            sub_2081F2BB0(a3, (uint64_t)&v47);
            v11 += 12;
            --v13;
          }
          while (v13);
          return;
        }
        goto LABEL_98;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v13 = *(_QWORD *)(a2 + 8);
      if (v13)
      {
LABEL_98:
        v38 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v38;
          sub_2081F2BB0(a3, (uint64_t)&v47);
          v38 += 12;
          if (!--v13)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 3:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 3);
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v14)
        v15 = 0;
      else
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        if (!v16)
          return;
        if (v14)
        {
          do
          {
            v47 = 3;
            v48 = v14;
            sub_2081F2E20(a3, (uint64_t)&v47);
            v14 += 24;
            --v16;
          }
          while (v16);
          return;
        }
        goto LABEL_104;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v16 = *(_QWORD *)(a2 + 8);
      if (v16)
      {
LABEL_104:
        v39 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v39;
          sub_2081F2E20(a3, (uint64_t)&v47);
          v39 += 24;
          if (!--v16)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 5:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 5);
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v17)
        v18 = 1;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) == 0;
      if (v18)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (!v19)
          return;
        if (!v17)
          goto LABEL_110;
        do
        {
          v47 = 3;
          v48 = v17;
          sub_2081F26D0(a3, (size_t *)&v47);
          v17 += 3;
          --v19;
        }
        while (v19);
      }
      else
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_144;
        }
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
        {
LABEL_110:
          v41 = 0;
          while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            v47 = 3;
            v48 = v41;
            sub_2081F26D0(a3, (size_t *)&v47);
            v41 += 3;
            if (!--v19)
              return;
          }
          goto LABEL_144;
        }
      }
      return;
    case 6:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 6);
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v20)
        v21 = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 2uLL;
      if (!v21)
      {
        v22 = *(_QWORD *)(a2 + 8);
        if (!v22)
          return;
        if (v20)
        {
          do
          {
            v47 = 3;
            v48 = v20;
            sub_2081F2808(a3, (uint64_t)&v47);
            v20 += 6;
            --v22;
          }
          while (v22);
          return;
        }
        goto LABEL_116;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
      {
LABEL_116:
        v42 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v42;
          sub_2081F2808(a3, (uint64_t)&v47);
          v42 += 6;
          if (!--v22)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 7:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 7);
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v23)
        v24 = 0;
      else
        v24 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v24)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (!v25)
          return;
        if (v23)
        {
          do
          {
            v47 = 3;
            v48 = v23;
            sub_2081F2A78(a3, (uint64_t)&v47);
            v23 += 12;
            --v25;
          }
          while (v25);
          return;
        }
        goto LABEL_122;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v25 = *(_QWORD *)(a2 + 8);
      if (v25)
      {
LABEL_122:
        v43 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v43;
          sub_2081F2A78(a3, (uint64_t)&v47);
          v43 += 12;
          if (!--v25)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 8:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 8);
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v26)
        v27 = 0;
      else
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v27)
      {
        v28 = *(_QWORD *)(a2 + 8);
        if (!v28)
          return;
        if (v26)
        {
          do
          {
            v47 = 3;
            v48 = v26;
            sub_2081F2CE8(a3, (uint64_t)&v47);
            v26 += 24;
            --v28;
          }
          while (v28);
          return;
        }
        goto LABEL_128;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
LABEL_128:
        v44 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v44;
          sub_2081F2CE8(a3, (uint64_t)&v47);
          v44 += 24;
          if (!--v28)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 11:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 11);
      v29 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v29)
        v30 = 0;
      else
        v30 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 4uLL;
      if (!v30)
      {
        v31 = *(_QWORD *)(a2 + 8);
        if (!v31)
          return;
        if (v29)
        {
          do
          {
            v47 = 3;
            v48 = v29;
            sub_2081F3400(a3, (float **)&v47);
            v29 += 12;
            --v31;
          }
          while (v31);
          return;
        }
        goto LABEL_134;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v31 = *(_QWORD *)(a2 + 8);
      if (v31)
      {
LABEL_134:
        v45 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v45;
          sub_2081F3400(a3, (float **)&v47);
          v45 += 12;
          if (!--v31)
            return;
        }
        goto LABEL_144;
      }
      return;
    case 12:
      sub_20807EB10((unsigned __int8 **)(a2 + 16), 12);
      v32 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 48);
      if (v32)
        v33 = 0;
      else
        v33 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40) >= 8uLL;
      if (!v33)
      {
        v34 = *(_QWORD *)(a2 + 8);
        if (!v34)
          return;
        if (v32)
        {
          do
          {
            v47 = 3;
            v48 = v32;
            sub_2081F3820(a3, &v47);
            v32 += 24;
            --v34;
          }
          while (v34);
          return;
        }
LABEL_140:
        v46 = 0;
        while (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v47 = 3;
          v48 = v46;
          sub_2081F3820(a3, &v47);
          v46 += 24;
          if (!--v34)
            return;
        }
LABEL_144:
        abort();
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_144;
      }
      v34 = *(_QWORD *)(a2 + 8);
      if (v34)
        goto LABEL_140;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E6A9AC(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_208208D08(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24C076888;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_207E6AACC(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_207E6AAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E6AACC(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_208208D08(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_207CBAB98(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_207CBAB98(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_207CBAB98(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_208208B24(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_207CBAB98(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_207CBAB98(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_207CBAB98(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_207CBAB98(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_207CBAB98(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E6B1E8(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24C076888;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_207E6B30C(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_207E6B2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_207E6B30C(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| (v8 = a2[1], sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_207D0B114(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_207D0B114(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

void sub_207E6B698(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_207E3D2B0(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24C076888;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_207E6B794(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_207E6B780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207DCBDC4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_207E6B794(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_20807EB10((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E6BD70(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_207E6BE94((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_207E3DB44((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_20809778C(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points3";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2081F5F4C(a1);
    sub_207E6C0A8(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_207E6BE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_208080B58((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_207E3DB44((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_20809778C(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points3";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2081F5F4C(a2);
  sub_207E6D958(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_207E6C078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6C094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E6C0A8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E6C1D0(v3);
      break;
    case 1:
      sub_207E6C410(v3);
      break;
    case 2:
      sub_207E6C660(v3);
      break;
    case 3:
      sub_207E6C8B4(v3);
      break;
    case 5:
      sub_207E6CB4C(v3);
      break;
    case 6:
      sub_207E6CD8C(v3);
      break;
    case 7:
      sub_207E6CFDC(v3);
      break;
    case 8:
      sub_207E6D230(v3);
      break;
    case 11:
      sub_207E6D4C8(v3);
      break;
    case 12:
      sub_207E6D710(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E6C1D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F631C(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E6C3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6C410(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7078(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6C5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6C660(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F71F0(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6C850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6C8B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8AC4(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E6CAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6CB4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F6E98(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E6CD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6CD8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207CA420C();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F6F88(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6CF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6CFDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7134(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6D1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6D230(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8788(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E6D44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6D4C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F75DC(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E6D6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6D710(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F76E4(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E6D8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6D958(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E6DA80(v3);
      break;
    case 1:
      sub_207E6DCC0(v3);
      break;
    case 2:
      sub_207E6DF10(v3);
      break;
    case 3:
      sub_207E6E164(v3);
      break;
    case 5:
      sub_207E6E3FC(v3);
      break;
    case 6:
      sub_207E6E63C(v3);
      break;
    case 7:
      sub_207E6E88C(v3);
      break;
    case 8:
      sub_207E6EAE0(v3);
      break;
    case 11:
      sub_207E6ED78(v3);
      break;
    case 12:
      sub_207E6EFC0(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E6DA80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F631C(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E6DC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6DCC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7078(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6DEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6DF10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F71F0(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6E100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6E164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8AC4(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E6E380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6E3FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F6204(v7);
      ++v7[14];
      sub_2081F6E98(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E6E5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6E63C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207CA420C();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F6F88(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6E88C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F6204(v4);
      ++v4[14];
      sub_2081F7134(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E6EA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6EAE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F6204(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F8788(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E6ECFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6ED78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F75DC(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E6EF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6EFC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F6204(v5);
      ++v5[14];
      sub_2081F76E4(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E6F1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6F208(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  if (a4 < 2)
  {
    sub_207E6F2FC((uint64_t)v10, a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    LOBYTE(v10[0]) = 0;
    sub_20820B6F8(a2[6], v10);
    *a3 = v10[0];
    sub_20820BBEC(a2[6], (_QWORD *)a3 + 1);
    v11 = xmmword_24C076888;
    v7 = *a3;
    v10[0] = a3;
    v10[1] = a2;
    v10[2] = &v11;
    sub_207E6F490(v7, v10);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(uint64_t *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_207E6F2FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_208080B58((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_20820B6F8(a2[6], &__p);
  v16 = __p;
  sub_20820BBEC(a2[6], &v17);
  v22 = xmmword_24C076888;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_207E70818(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E6F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6F47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E6F490(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E6F538(a2);
      break;
    case 1:
      sub_207E6F70C(a2);
      break;
    case 2:
      sub_207E6F8F0(a2);
      break;
    case 3:
      sub_207E6FAD8(a2);
      break;
    case 5:
      sub_207E6FCC0(a2);
      break;
    case 6:
      sub_207E6FE94(a2);
      break;
    case 7:
      sub_207E70078(a2);
      break;
    case 8:
      sub_207E70260(a2);
      break;
    case 11:
      sub_207E70448(a2);
      break;
    case 12:
      sub_207E70630(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E6F538(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B6F8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E6F6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6F70C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B88C(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E6F890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6F8F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BA20(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E6FA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6FAD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BBEC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E6FC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6FCC0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B648(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E6FE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E6FE94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B7DC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E70018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70078(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820B970(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E70200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70260(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BB04(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E703E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70448(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BCC8(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E705D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70630(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BDF8(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E707B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70818(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E708C0(a2);
      break;
    case 1:
      sub_207E70A94(a2);
      break;
    case 2:
      sub_207E70C78(a2);
      break;
    case 3:
      sub_207E70E60(a2);
      break;
    case 5:
      sub_207E71048(a2);
      break;
    case 6:
      sub_207E7121C(a2);
      break;
    case 7:
      sub_207E71400(a2);
      break;
    case 8:
      sub_207E715E8(a2);
      break;
    case 11:
      sub_207E717D0(a2);
      break;
    case 12:
      sub_207E719B8(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E708C0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B6F8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E70A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70A94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B88C(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E70C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70C78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BA20(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E70E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E70E60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BBEC(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E70FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E71048(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20820B648(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E711BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7121C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20820B7DC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E713A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E71400(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820B970(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E71588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E715E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BB04(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E71770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E717D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20820BCC8(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E71958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E719B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20820BDF8(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E71B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E71BA0(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (a3 < 2)
  {
    sub_207E71CC4((uint64_t)&v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "value_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v11 = a2;
    sub_207E3F0C4((uint64_t *)a1, &v11);
    v6 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "size";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v6)
      *(_BYTE *)(a1 + 104) = 1;
    v7 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v11 = 0;
    sub_208097288(v7, &v11);
    *((_QWORD *)a2 + 1) = v11;
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "points3";
    *(_QWORD *)(a1 + 96) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    sub_2081F5AC0(a1);
    sub_207E71ED8(*a2, (uint64_t)a2, a1);
    v9 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 - 8);
    v10 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v10 - 8);
    *(_QWORD *)(a1 + 48) = v9 - 8;
    *(_QWORD *)(a1 + 72) = v10 - 8;
  }
}

void sub_207E71CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[8];
  void *v23;
  __int128 v24;
  void *__p;
  void *v26;
  uint64_t v27;
  __int128 v28;

  v22[0] = 7;
  v23 = 0;
  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_208080B58((uint64_t)&__p, &v28);
  v24 = v28;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  __p = v22;
  sub_207E3F0C4((uint64_t *)a2, (_BYTE **)&__p);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  __p = 0;
  sub_208097288(v7, &__p);
  v23 = __p;
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "points3";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2081F5AC0(a2);
  sub_207E73788(v22[0], (uint64_t)v22, a2);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
  v11 = v22[0];
  v12 = v23;
  v13 = v24;
  if (*((_QWORD *)&v24 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v13;
  v16 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v13 + 1);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_207E71EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E71EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E71ED8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E72000(v3);
      break;
    case 1:
      sub_207E72240(v3);
      break;
    case 2:
      sub_207E72490(v3);
      break;
    case 3:
      sub_207E726E4(v3);
      break;
    case 5:
      sub_207E7297C(v3);
      break;
    case 6:
      sub_207E72BBC(v3);
      break;
    case 7:
      sub_207E72E0C(v3);
      break;
    case 8:
      sub_207E73060(v3);
      break;
    case 11:
      sub_207E732F8(v3);
      break;
    case 12:
      sub_207E73540(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E72000(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F5E90(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E721DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E72240(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F65B8(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E7242C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E72490(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6730(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E72680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E726E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F80CC(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E72900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7297C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F63D8(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E72B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E72BBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207CA420C();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F64C8(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E72DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E72E0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6674(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E72FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E73060(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F7A10(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E7327C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E732F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6B44(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E734DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E73540(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6C74(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E73724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E73788(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_207E738B0(v3);
      break;
    case 1:
      sub_207E73AF0(v3);
      break;
    case 2:
      sub_207E73D40(v3);
      break;
    case 3:
      sub_207E73F94(v3);
      break;
    case 5:
      sub_207E7422C(v3);
      break;
    case 6:
      sub_207E7446C(v3);
      break;
    case 7:
      sub_207E746BC(v3);
      break;
    case 8:
      sub_207E74910(v3);
      break;
    case 11:
      sub_207E74BA8(v3);
      break;
    case 12:
      sub_207E74DF0(v3);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E738B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F5E90(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807DA08(&v18, 0, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E73A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E73AF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207DCF3A0();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F65B8(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DD4C(&v15, 1, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E73CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E73D40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6730(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E094(&v15, 2, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E73F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E73F94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F80CC(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E3DC(&v17, 3, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E741B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7422C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v17 = &v4[v3];
    bzero(v4, 3 * v2);
    v6 = 0;
    v16 = v5;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v18 = 3;
      v19 = (char *)__p + v6;
      v8 = (char *)sub_2081F5D78(v7);
      ++v7[14];
      sub_2081F63D8(v8, (uint64_t)&v18);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_20807D868(&v18, 5, (uint64_t)&__p);
  v10 = v18;
  v9 = v19;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_207E74408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7446C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if (3 * v2 < 0)
      sub_207CA420C();
    __p = operator new(6 * v2);
    v14 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F64C8(v5, (uint64_t)&v15);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_20807DBA8(&v15, 6, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E74658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E746BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    __p = operator new(12 * v2);
    v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v13 = v14;
    do
    {
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (uint64_t *)a1[1];
      v15 = 3;
      v16 = (char *)__p + v3;
      v5 = (char *)sub_2081F5D78(v4);
      ++v4[14];
      sub_2081F6674(v5, (uint64_t)&v15);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807DEF0(&v15, 7, (uint64_t)&__p);
  v7 = v15;
  v6 = v16;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15 + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_207E748AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E74910(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;
  const void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  void *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(*a1 + 8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v16 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v15 = v16;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = (char *)sub_2081F5D78(v5);
      ++v5[14];
      v17 = 0;
      v18 = 0;
      v19 = 0;
      sub_2081F7A10(v6, (uint64_t)&v17);
      v7 = v17;
      if (v18 != v17)
      {
        memmove(&v4[v3], v17, v18 - v17);
        v7 = v17;
      }
      if (v7)
      {
        v18 = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E238(&v17, 8, (uint64_t)&__p);
  v9 = v17;
  v8 = v18;
  if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v17 + 7) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v10 = *a1;
  v11 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v8;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_207E74B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E74BA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    __p = operator new(12 * v2);
    v15 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6B44(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_20807E580(v16, 11, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E74D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E74DF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  void *v14;
  char *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    __p = operator new(24 * v2);
    v15 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v3 = 0;
    v14 = v15;
    do
    {
      v4 = (char *)__p;
      if (!__p
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v5 = (uint64_t *)a1[1];
      v6 = sub_2081F5D78(v5);
      ++v5[14];
      sub_2081F6C74(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_20807E724(v16, 12, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E74FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E75038(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  char v8;
  char v9;
  __int128 v10;
  void *__p;
  uint64_t v12;
  __int128 *v13;

  LODWORD(__p) = 2;
  sub_208209DC8(a2, &__p);
  v5 = __p;
  if (__p >= 2)
    v6 = 2;
  else
    v6 = __p;
  if (v6 < 2)
  {
    sub_207E751A4((uint64_t)&__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_208209484(a2, &__p);
    *a3 = __p;
    sub_20820A270(a2, (_QWORD *)a3 + 1);
    v10 = xmmword_24C076888;
    v7 = *a3;
    __p = a3;
    v12 = a2;
    v13 = &v10;
    sub_207E75338(v7, &__p);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          v9 = 0;
          if (SHIBYTE(v13) < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      v9 = 1;
      if (SHIBYTE(v13) < 0)
LABEL_24:
        operator delete(__p);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v8 = 0;
      else
        v8 = v9;
    }
    while ((v8 & 1) != 0);
  }
}

void sub_207E751A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_208080B58((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = (uint64_t)__p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_208209484(a2, &__p);
  v16 = __p;
  sub_20820A270(a2, &v17);
  v22 = xmmword_24C076888;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_207E76698(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E75308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E75324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E75338(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E753E0(a2);
      break;
    case 1:
      sub_207E755B0(a2);
      break;
    case 2:
      sub_207E75790(a2);
      break;
    case 3:
      sub_207E75974(a2);
      break;
    case 5:
      sub_207E75B58(a2);
      break;
    case 6:
      sub_207E75D28(a2);
      break;
    case 7:
      sub_207E75F08(a2);
      break;
    case 8:
      sub_207E760EC(a2);
      break;
    case 11:
      sub_207E762D0(a2);
      break;
    case 12:
      sub_207E764B4(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E753E0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_208209484(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E75550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E755B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_208209920(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E75730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E75790(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209DC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E75914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E75974(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A270(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E75AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E75B58(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20820923C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E75CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E75D28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_2082096CC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E75EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E75F08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209B74(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7608C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E760EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A01C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E76270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E762D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20820A740(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E76454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E764B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A994(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E76638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E76698(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E76740(a2);
      break;
    case 1:
      sub_207E76910(a2);
      break;
    case 2:
      sub_207E76AF0(a2);
      break;
    case 3:
      sub_207E76CD4(a2);
      break;
    case 5:
      sub_207E76EB8(a2);
      break;
    case 6:
      sub_207E77088(a2);
      break;
    case 7:
      sub_207E77268(a2);
      break;
    case 8:
      sub_207E7744C(a2);
      break;
    case 11:
      sub_207E77630(a2);
      break;
    case 12:
      sub_207E77814(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E76740(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_208209484(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807DA08(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E768B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E76910(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_208209920(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E76A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E76AF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209DC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E76C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E76CD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A270(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E76E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E76EB8(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = operator new(3 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20820923C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_20807D868(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_207E77028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E77088(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_2082096CC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E77208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E77268(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_208209B74(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E773EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7744C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A01C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E775D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E77630(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20820A740(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E777B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E77814(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20820A994(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E77998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E779F8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E77AEC((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E77C4C(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E77AD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E77AEC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16[8];
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  __int128 v22;

  v16[0] = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_208080B58((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  sub_207E79454(a2, (uint64_t)v16);
  v5 = v16[0];
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E77C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E77C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E77C4C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C076888;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_207E77D4C(v5, v10);
}

void sub_207E77D24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E77D38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E77D4C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E77DF4(a2);
      break;
    case 1:
      sub_207E78028(a2);
      break;
    case 2:
      sub_207E78264(a2);
      break;
    case 3:
      sub_207E784A4(a2);
      break;
    case 5:
      sub_207E786E4(a2);
      break;
    case 6:
      sub_207E78918(a2);
      break;
    case 7:
      sub_207E78B54(a2);
      break;
    case 8:
      sub_207E78D94(a2);
      break;
    case 11:
      sub_207E78FD4(a2);
      break;
    case 12:
      sub_207E79214(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E77DF4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DA08(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E77FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E78028(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DD4C(v22, 1, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E781F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E78264(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_207CA420C();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E094(v22, 2, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E78434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E784A4(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_207CA420C();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E3DC(v22, 3, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E78674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E786E4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807D868(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E788A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E78918(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_207CA420C();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DBA8(v22, 6, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E78AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E78B54(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_207CA420C();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DEF0(v22, 7, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E78D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E78D94(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_207CA420C();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E238(v22, 8, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E78F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E78FD4(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E580(v22, 11, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E791A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E79214(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_207CA420C();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E724(v22, 12, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E793E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E79454(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24C076888;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_207E79554(v5, v10);
}

void sub_207E7952C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E79540(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E79554(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E795FC(a2);
      break;
    case 1:
      sub_207E79830(a2);
      break;
    case 2:
      sub_207E79A6C(a2);
      break;
    case 3:
      sub_207E79CAC(a2);
      break;
    case 5:
      sub_207E79EEC(a2);
      break;
    case 6:
      sub_207E7A120(a2);
      break;
    case 7:
      sub_207E7A35C(a2);
      break;
    case 8:
      sub_207E7A59C(a2);
      break;
    case 11:
      sub_207E7A7DC(a2);
      break;
    case 12:
      sub_207E7AA1C(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E795FC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DA08(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E797C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E79830(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DD4C(v22, 1, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E799FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E79A6C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_207CA420C();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E094(v22, 2, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E79C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E79CAC(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_207CA420C();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E3DC(v22, 3, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E79E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E79EEC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807D868(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7A0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7A120(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if (3 * (_QWORD)v2 < 0)
      sub_207CA420C();
    v4 = 6 * (_QWORD)v2;
    v5 = (char *)operator new(6 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[2 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DBA8(v22, 6, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7A2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7A35C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_207CA420C();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807DEF0(v22, 7, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7A52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7A59C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_207CA420C();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E238(v22, 8, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7A76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7A7DC(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * (_QWORD)v2;
    v5 = (char *)operator new(12 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[4 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E580(v22, 11, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7A9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7AA1C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(char **)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * (_QWORD)v2;
    if ((unint64_t)(3 * (_QWORD)v2) >> 61)
      sub_207CA420C();
    v4 = 24 * (_QWORD)v2;
    v5 = (char *)operator new(24 * (_QWORD)v2);
    __p = v5;
    v21 = &v5[8 * v3];
    bzero(v5, v4);
    v2 = &v5[v4];
    v20 = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = v2 - v5;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_20807E724(v22, 12, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7ABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7AC5C(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v6;
  _BYTE *v7[3];
  __int128 v8;

  LODWORD(v7[0]) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2)
    {
      sub_207E7B25C((uint64_t)v7, a2, (uint64_t)a3);
    }
    else
    {
      v7[0] = a3;
      sub_207E41430(a2, v7);
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
      v8 = xmmword_24C076888;
      v6 = *a3;
      v7[0] = a3;
      v7[1] = a2;
      v7[2] = &v8;
      sub_207E7B3F4(v6, v7);
    }
  }
  else
  {
    sub_207E7AD58(a1, a2, a3, v7[0]);
  }
}

void sub_207E7AD58(int *a1, _BYTE *a2, _BYTE *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int128 *v13;
  _BYTE *v14[3];
  __int128 v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v14[0]) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      v12 = v14[0];
      v13 = sub_207E7AEAC();
      sub_208212838((std::string *)v13, v12, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_207E7B25C((uint64_t)v14, a2, (uint64_t)a3);
    return;
  }
  v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_207E41430(a2, v14);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v15 = xmmword_24C076888;
  v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_207E7B3F4(v11, v14);
  if (v9)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E7AEAC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C610);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C610))
    return &xmmword_25452C5F8;
  v2 = sub_207E7AF88();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C5F8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C608 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C5F8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C5F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C610);
  return &xmmword_25452C5F8;
}

void sub_207E7AF70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C610);
  _Unwind_Resume(a1);
}

std::string *sub_207E7AF88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C630);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C630))
    return &stru_25452C618;
  sub_207E7B078((uint64_t)__p);
  sub_207E36DD8((char *)__p, &stru_25452C618);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C618, &dword_207C77000);
  __cxa_guard_release(&qword_25452C630);
  return &stru_25452C618;
}

void sub_207E7B038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C630);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C630);
  _Unwind_Resume(a1);
}

void sub_207E7B078(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C650);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C650))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<3>]", qword_25452C638);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C638, &dword_207C77000);
    __cxa_guard_release(&qword_25452C650);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C670);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C670))
  {
    v5 = sub_207D49434(qword_25452C638, "<", 0);
    sub_207D49330(qword_25452C638, 0, v5, qword_25452C658);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C658, &dword_207C77000);
    __cxa_guard_release(&qword_25452C670);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C690);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C690))
  {
    sub_208215C6C((uint64_t)qword_25452C658, (uint64_t)&xmmword_25452C678);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C678, &dword_207C77000);
    __cxa_guard_release(&qword_25452C690);
  }
  if (byte_25452C68F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C678, *((unint64_t *)&xmmword_25452C678 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C678;
    *(_QWORD *)(a1 + 16) = unk_25452C688;
  }
}

void sub_207E7B214(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C690);
  _Unwind_Resume(a1);
}

void sub_207E7B22C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C670);
  _Unwind_Resume(a1);
}

void sub_207E7B244(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C650);
  _Unwind_Resume(a1);
}

void sub_207E7B25C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  void *__p;
  void *v20;
  __int128 *v21;
  __int128 v22;

  v16 = 7;
  v17 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  sub_208080B58((uint64_t)&__p, &v22);
  v18 = v22;
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  __p = &v16;
  sub_207E41430(a2, (_BYTE **)&__p);
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a2 + 120))(a2, &v17);
  v22 = xmmword_24C076888;
  __p = &v16;
  v20 = a2;
  v21 = &v22;
  sub_207E7C6CC(v16, &__p);
  v5 = v16;
  v6 = v17;
  v7 = v18;
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  v10 = *(std::__shared_weak_count **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v7 + 1);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E7B3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7B3E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DCBDC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7B3F4(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E7B49C(a2);
      break;
    case 1:
      sub_207E7B658(a2);
      break;
    case 2:
      sub_207E7B82C(a2);
      break;
    case 3:
      sub_207E7BA04(a2);
      break;
    case 5:
      sub_207E7BBDC(a2);
      break;
    case 6:
      sub_207E7BD98(a2);
      break;
    case 7:
      sub_207E7BF6C(a2);
      break;
    case 8:
      sub_207E7C144(a2);
      break;
    case 11:
      sub_207E7C31C(a2);
      break;
    case 12:
      sub_207E7C4F4(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E7B49C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807DA08(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7B5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7B658(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7B7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7B82C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7B9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7BA04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7BB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7BBDC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807D868(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7BD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7BD98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7BF6C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7C0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7C144(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7C2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7C31C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7C494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7C4F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7C66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7C6CC(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_207E7C774(a2);
      break;
    case 1:
      sub_207E7C930(a2);
      break;
    case 2:
      sub_207E7CB04(a2);
      break;
    case 3:
      sub_207E7CCDC(a2);
      break;
    case 5:
      sub_207E7CEB4(a2);
      break;
    case 6:
      sub_207E7D070(a2);
      break;
    case 7:
      sub_207E7D244(a2);
      break;
    case 8:
      sub_207E7D41C(a2);
      break;
    case 11:
      sub_207E7D5F4(a2);
      break;
    case 12:
      sub_207E7D7CC(a2);
      break;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E7C774(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CF94B8();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807DA08(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7C8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7C930(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207DCF3A0();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DD4C(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7CAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7CB04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E094(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7CC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7CCDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E3DC(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7CE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7CEB4(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_20807D868(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7D010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7D070(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_207CA420C();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_20807DBA8(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7D1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7D244(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207CA420C();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807DEF0(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7D3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7D41C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E238(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7D594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7D5F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_207D0CD58();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_20807E580(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7D76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7D7CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_207CA420C();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_20807E724(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_207E7D944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207E7D9A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  _QWORD *result;

  v4 = operator new(0xF0uLL);
  v5 = v4;
  *v4 = off_24C0777E8;
  v4[1] = &off_24C084548;
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *((_OWORD *)v4 + 1) = v6;
  *((_OWORD *)v4 + 2) = v7;
  *((_BYTE *)v4 + 48) = 0;
  *((_BYTE *)v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *((_OWORD *)v4 + 3) = *(_OWORD *)(a1 + 48);
    v4[8] = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *((_BYTE *)v4 + 72) = 1;
  }
  *((_BYTE *)v4 + 80) = 0;
  *((_BYTE *)v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *((_OWORD *)v4 + 5) = *(_OWORD *)(a1 + 80);
    v4[12] = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *((_BYTE *)v4 + 104) = 1;
  }
  *((_BYTE *)v4 + 144) = 0;
  *((_OWORD *)v4 + 7) = *(_OWORD *)(a1 + 112);
  v4[16] = *(_QWORD *)(a1 + 128);
  *((_BYTE *)v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *((_OWORD *)v4 + 9) = *(_OWORD *)(a1 + 144);
    v4[20] = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v8 = (unsigned __int128 *)(a1 + 176);
    do
      v9 = __ldaxp(v8);
    while (__stlxp(v9, v8));
    *((_OWORD *)v4 + 11) = v9;
    *((_BYTE *)v4 + 192) = 1;
  }
  *((_BYTE *)v4 + 208) = 0;
  *((_BYTE *)v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *((_OWORD *)v4 + 13) = *(_OWORD *)(a1 + 208);
    v4[28] = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *((_BYTE *)v4 + 232) = 1;
  }
  *v4 = off_24C077768;
  *a2 = &off_24C078D18;
  a2[1] = v4;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_207E7DB1C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207E7DBB4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E7DB30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0777E8;
  sub_207D49CF4((uint64_t)(a1 + 4));
  a1[1] = &off_24C084548;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E7DBB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0777E8;
  sub_207D49CF4((uint64_t)(a1 + 4));
  a1[1] = &off_24C084548;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E7DC38(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207E7DC40(void *a1, void *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C0777A8, 0);
  if (result)
    return a1 == lpsrc || sub_20808CB2C((uint64_t)a1 + 8, result + 8);
  return result;
}

void sub_207E7DCA4(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_207E7ED58();
  sub_207E7DD58(a1);
  sub_207D49528(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_207E7DD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E7DD58(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C7F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C7F0))
  {
    v4 = sub_207E7EB5C();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_25452C7D8, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25452C7E8 = *(_QWORD *)(v9 - 8);
      xmmword_25452C7D8 = v7;
    }
    sub_207C99DE0(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C7D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C7F0);
  }
  return sub_207E7F118(&xmmword_25452C7D8, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_207E7DE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  __cxa_guard_abort(&qword_25452C7F0);
  _Unwind_Resume(a1);
}

void sub_207E7DE88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C7F0);
  _Unwind_Resume(a1);
}

void sub_207E7DEA0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 5;
}

void sub_207E7DECC(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 5, a2);
}

_QWORD *sub_207E7DF04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0777E8;
  sub_207D49CF4((uint64_t)(a1 + 4));
  a1[1] = &off_24C084548;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E7DF88(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C0777E8;
  sub_207D49CF4((uint64_t)(a1 + 4));
  a1[1] = &off_24C084548;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E7E00C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207E7E5F8();
  return sub_207E7E160(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_207E7E064(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207E7E38C((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765F8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765E0[v3])(v5, v2);
  return result;
}

void sub_207E7E0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C0765E0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207E7E134(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207E7E160(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207E7E38C((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0765F8[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0765E0[v16])(&p_dst, &__dst);
  return result;
}

void sub_207E7E2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7E314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7E328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7E33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7E350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7E364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7E378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7E38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_20808D510((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E7E5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E7E5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

__int128 *sub_207E7E5F8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C6B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C6B0))
    return &xmmword_25452C698;
  v2 = sub_207E7E6D4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C698, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C6A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C698 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C698, &dword_207C77000);
  __cxa_guard_release(&qword_25452C6B0);
  return &xmmword_25452C698;
}

void sub_207E7E6BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C6B0);
  _Unwind_Resume(a1);
}

std::string *sub_207E7E6D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C6D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C6D0))
    return &stru_25452C6B8;
  sub_207E7E978((uint64_t)__p);
  sub_207E7E7C4((char *)__p, &stru_25452C6B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C6B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C6D0);
  return &stru_25452C6B8;
}

void sub_207E7E784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C6D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C6D0);
  _Unwind_Resume(a1);
}

void sub_207E7E7C4(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207E7EB5C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207E7E928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207E7E978(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C750);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C750))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::cam::Camera>]", qword_25452C738);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C738, &dword_207C77000);
    __cxa_guard_release(&qword_25452C750);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C770);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C770))
  {
    v5 = sub_207D49434(qword_25452C738, "<", 0);
    sub_207D49330(qword_25452C738, 0, v5, qword_25452C758);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C758, &dword_207C77000);
    __cxa_guard_release(&qword_25452C770);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C790);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C790))
  {
    sub_208215C6C((uint64_t)qword_25452C758, (uint64_t)&xmmword_25452C778);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C778, &dword_207C77000);
    __cxa_guard_release(&qword_25452C790);
  }
  if (byte_25452C78F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C778, *((unint64_t *)&xmmword_25452C778 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C778;
    *(_QWORD *)(a1 + 16) = unk_25452C788;
  }
}

void sub_207E7EB14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C790);
  _Unwind_Resume(a1);
}

void sub_207E7EB2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C770);
  _Unwind_Resume(a1);
}

void sub_207E7EB44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C750);
  _Unwind_Resume(a1);
}

__int128 *sub_207E7EB5C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C6F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C6F0))
    return &xmmword_25452C6D8;
  v2 = (char *)sub_207E7EC38();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452C6D8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452C6E8 = *((_QWORD *)v2 + 2);
    xmmword_25452C6D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C6D8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C6F0);
  return &xmmword_25452C6D8;
}

void sub_207E7EC20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C6F0);
  _Unwind_Resume(a1);
}

void *sub_207E7EC38()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C710);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C710))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::Camera]", qword_25452C6F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C6F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C710);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452C730);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C730))
    return &unk_25452C718;
  sub_208215C6C((uint64_t)qword_25452C6F8, (uint64_t)&unk_25452C718);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452C718, &dword_207C77000);
  __cxa_guard_release(&qword_25452C730);
  return &unk_25452C718;
}

void sub_207E7ED28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C730);
  _Unwind_Resume(a1);
}

void sub_207E7ED40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C710);
  _Unwind_Resume(a1);
}

std::string *sub_207E7ED58()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452C7B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C7B0))
  {
    sub_207C96EE8(v9, "viz::PackageData");
    v2 = sub_207E7EB5C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_207E7F020();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_207CAA110(v8, (uint64_t)__dst, 4uLL);
    sub_208215D20((char *)v9, (uint64_t *)v8, &stru_25452C798, v6, v7);
    sub_207C99DE0(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C798, &dword_207C77000);
        __cxa_guard_release(&qword_25452C7B0);
        return &stru_25452C798;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25452C798;
}

void sub_207E7EF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_207C99DE0(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25452C7B0);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25452C7B0);
  _Unwind_Resume(a1);
}

std::string *sub_207E7F020()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C7D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C7D0))
    return &stru_25452C7B8;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 5U]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452C7B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C7B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C7D0);
  return &stru_25452C7B8;
}

void sub_207E7F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C7D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C7D0);
  _Unwind_Resume(a1);
}

uint64_t sub_207E7F118(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207E7E38C((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0766E8[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0765F8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0765E0[v11])(&p_dst, &__dst);
  return result;
}

void sub_207E7F258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7F270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7F284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7F298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7F2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  sub_2081F1E44(a2);
  v10 = "version";
  v11 = 7;
  LODWORD(v12[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2081F3DDC(a2, v12);
  LODWORD(v10) = *(_DWORD *)a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(a3 + 8);
  v7 = a3 + 8;
  v6 = v8;
  v11 = 0;
  v12[0] = 0;
  if (v8)
    v6(1, v7, &v11, 0, 0);
  sub_207E7F440(a2, (uint64_t)&v10);
  if (v11)
    ((void (*)(_QWORD, uint64_t *, _QWORD, _QWORD, _QWORD))v11)(0, &v11, 0, 0, 0);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E7F3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E7F440(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v41;
  int *v42;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "camera_type";
    *(_QWORD *)(a1 + 80) = 11;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v42 = (int *)a2;
  sub_207E7F8E4(a1, &v42);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_55;
      v14 = v11(3, v12, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v15 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_18;
    case 1:
      v18 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v17 = a2 + 8;
      v16 = v18;
      if (!v18)
        goto LABEL_55;
      v19 = v16(3, v17, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v19)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v20 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v20)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_24;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v22 = a2 + 8;
      v21 = v23;
      if (!v23)
        goto LABEL_55;
      v14 = v21(3, v22, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v24)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_18:
      sub_207E7FC58((uint64_t)&v42, a1, v14);
      break;
    case 11:
      v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v26 = a2 + 8;
      v25 = v27;
      if (!v27 || (v19 = v25(3, v26, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_55:
        sub_207DCBF24();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v28 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v28)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_24:
      sub_207E7FDE4((uint64_t)&v42, a1, v19);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_55;
          v9 = v6(3, v7, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v10 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v10)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_11;
        case 'e':
          v31 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v30 = a2 + 8;
          v29 = v31;
          if (!v31)
            goto LABEL_55;
          v32 = v29(3, v30, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v33 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v33)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_42;
        case 'n':
          v36 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v35 = a2 + 8;
          v34 = v36;
          if (!v36)
            goto LABEL_55;
          v9 = v34(3, v35, 0, &unk_24C077A40, &unk_20823C240);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v37 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v37)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_11:
          sub_207E7FF70((uint64_t)&v42, a1, v9);
          break;
        case 'o':
          v40 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v39 = a2 + 8;
          v38 = v40;
          if (!v40)
            goto LABEL_55;
          v32 = v38(3, v39, 0, &unk_24C077A90, &unk_20823C318);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v41 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v41)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_42:
          sub_207E80144((uint64_t)&v42, a1, v32);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E7F8E4(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_207E7F9EC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_207CA9F48();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
  sub_2081F42A4(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_207E7F9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E7F9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E7F9EC(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_2080870AC((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E7FC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E7FC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E7FC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2081F1E44(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F3DDC(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F3DDC(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2081F50E4(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_2081F50E4(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2081F4894(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E7FDE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2081F1E44(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F3DDC(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F3DDC(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2081F5504(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2081F5504(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 32;
  sub_2081F4894(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E7FF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2081F1E44(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F3DDC(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F3DDC(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2081F50E4(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 8;
  sub_2081F50E4(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 16;
  sub_2081F50E4(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 36;
  sub_2081F4894(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E80144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2081F1E44(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F3DDC(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F3DDC(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2081F5504(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 16;
  sub_2081F5504(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 32;
  sub_2081F5504(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 72;
  sub_2081F4894(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E80318(uint64_t a1, uint64_t a2, int *a3)
{
  void (*v5)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  int *v6;
  void (*v7)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  sub_20820C2C0(*(_QWORD *)(a2 + 24));
  v13 = *a3;
  v7 = (void (*)(uint64_t, int *, _QWORD *, _QWORD, _QWORD))*((_QWORD *)a3 + 1);
  v6 = a3 + 2;
  v5 = v7;
  v14[0] = 0;
  v14[1] = 0;
  if (v7)
    v5(1, v6, v14, 0, 0);
  sub_207E804A0(a2, (uint64_t)&v13);
  if (v14[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v14[0])(0, v14, 0, 0, 0);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
}

void sub_207E80458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E804A0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  unsigned int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, _QWORD, void *, void *);
  unsigned int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BYTE v113[9];
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v113 = v5 + 16;
    sub_208210C8C((uint64_t **)v113, v4);
  }
  else
  {
    sub_208210F00((uint64_t)v113, v5 + 8);
  }
  v6 = *(_DWORD *)a2;
  switch(v6)
  {
    case 0u:
      v14 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v13 = a2 + 8;
      v12 = v14;
      if (!v14 || (v15 = (unsigned int *)v12(3, v13, 0, &unk_24C077860, &unk_20823BD3C)) == 0)
        sub_207DCBF24();
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
        *(_QWORD *)v113 = v16 + 16;
        sub_208210C8C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_208210F00((uint64_t)v113, v16 + 8);
      }
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      v45 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v45 + 40))
      {
        *(_QWORD *)v113 = v45 + 16;
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15);
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15 + 1);
      }
      else
      {
        v52 = *v15;
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v52);
        std::ostream::write();
        v53 = v15[1];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v53);
        std::ostream::write();
      }
      v54 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v54 + 40))
      {
        *(_QWORD *)v113 = v54 + 16;
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15 + 2);
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15 + 3);
      }
      else
      {
        v61 = v15[2];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v61);
        std::ostream::write();
        v62 = v15[3];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v62);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
        goto LABEL_68;
      goto LABEL_125;
    case 1u:
      v28 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v27 = a2 + 8;
      v26 = v28;
      if (!v28 || (v20 = v26(3, v27, 0, &unk_24C0778B0, &unk_20823BE10)) == 0)
        sub_207DCBF24();
      v29 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v29 + 40))
      {
        *(_QWORD *)v113 = v29 + 16;
        sub_208210C8C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_208210F00((uint64_t)v113, v29 + 8);
      }
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      v46 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v46 + 40))
      {
        *(_QWORD *)v113 = v46 + 16;
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v20);
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 8));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v20);
        v113[0] = -53;
        std::ostream::write();
        v55 = *(_QWORD *)(v20 + 8);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v55);
        std::ostream::write();
      }
      v56 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v56 + 40))
      {
        *(_QWORD *)v113 = v56 + 16;
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 16));
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 24));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v20 + 16));
        v113[0] = -53;
        std::ostream::write();
        v63 = *(_QWORD *)(v20 + 24);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v63);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
        goto LABEL_65;
      goto LABEL_125;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      return;
    case 0xAu:
      v24 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24 || (v15 = (unsigned int *)v22(3, v23, 0, &unk_24C077900, &unk_20823BEE4)) == 0)
        sub_207DCBF24();
      v25 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)v113 = v25 + 16;
        sub_208210C8C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_208210F00((uint64_t)v113, v25 + 8);
      }
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      v44 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)v113 = v44 + 16;
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15);
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15 + 1);
      }
      else
      {
        v49 = *v15;
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v49);
        std::ostream::write();
        v50 = v15[1];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v50);
        std::ostream::write();
      }
      v51 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v51 + 40))
      {
        *(_QWORD *)v113 = v51 + 16;
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15 + 2);
        sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v15 + 3);
      }
      else
      {
        v59 = v15[2];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v59);
        std::ostream::write();
        v60 = v15[3];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v60);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v58 + 40))
        goto LABEL_125;
LABEL_68:
      *(_QWORD *)v113 = v58 + 16;
      sub_208210C8C((uint64_t **)v113, v15[4]);
      sub_208210C8C((uint64_t **)v113, v15[5]);
      break;
    case 0xBu:
      v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v18 = a2 + 8;
      v17 = v19;
      if (!v19 || (v20 = v17(3, v18, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
        sub_207DCBF24();
      v21 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v21 + 40))
      {
        *(_QWORD *)v113 = v21 + 16;
        sub_208210C8C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_208210F00((uint64_t)v113, v21 + 8);
      }
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      v43 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v43 + 40))
      {
        *(_QWORD *)v113 = v43 + 16;
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v20);
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 8));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v20);
        v113[0] = -53;
        std::ostream::write();
        v47 = *(_QWORD *)(v20 + 8);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v47);
        std::ostream::write();
      }
      v48 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v48 + 40))
      {
        *(_QWORD *)v113 = v48 + 16;
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 16));
        sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 24));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v20 + 16));
        v113[0] = -53;
        std::ostream::write();
        v57 = *(_QWORD *)(v20 + 24);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v57);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
      {
LABEL_65:
        *(_QWORD *)v113 = v58 + 16;
        sub_208210C8C((uint64_t **)v113, *(_DWORD *)(v20 + 32));
        sub_208210C8C((uint64_t **)v113, *(_DWORD *)(v20 + 36));
      }
      else
      {
LABEL_125:
        v106 = v58 + 8;
        sub_208210F00((uint64_t)v113, v58 + 8);
        sub_208210F00((uint64_t)v113, v106);
      }
      break;
    default:
      switch(v6)
      {
        case 'd':
          v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v8 = a2 + 8;
          v7 = v9;
          if (!v9 || (v10 = (unsigned int *)v7(3, v8, 0, &unk_24C0779A0, &unk_20823C090)) == 0)
            sub_207DCBF24();
          v11 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v11 + 40))
          {
            *(_QWORD *)v113 = v11 + 16;
            sub_208210C8C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_208210F00((uint64_t)v113, v11 + 8);
          }
          sub_20820C2C0(*(_QWORD *)(a1 + 24));
          v66 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v66 + 40))
          {
            *(_QWORD *)v113 = v66 + 16;
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 1);
          }
          else
          {
            v73 = *v10;
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v73);
            std::ostream::write();
            v74 = v10[1];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v74);
            std::ostream::write();
          }
          v75 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v75 + 40))
          {
            *(_QWORD *)v113 = v75 + 16;
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 2);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 3);
          }
          else
          {
            v83 = v10[2];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v83);
            std::ostream::write();
            v84 = v10[3];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v84);
            std::ostream::write();
          }
          v85 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v85 + 40))
          {
            *(_QWORD *)v113 = v85 + 16;
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 4);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 5);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 6);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 7);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 8);
          }
          else
          {
            v97 = v10[4];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v97);
            std::ostream::write();
            v98 = v10[5];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v98);
            std::ostream::write();
            v99 = v10[6];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v99);
            std::ostream::write();
            v100 = v10[7];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v100);
            std::ostream::write();
            v101 = v10[8];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v101);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
          goto LABEL_119;
        case 'e':
          v41 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v40 = a2 + 8;
          v39 = v41;
          if (!v41 || (v33 = v39(3, v40, 0, &unk_24C0779F0, &unk_20823C168)) == 0)
            sub_207DCBF24();
          v42 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v42 + 40))
          {
            *(_QWORD *)v113 = v42 + 16;
            sub_208210C8C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_208210F00((uint64_t)v113, v42 + 8);
          }
          sub_20820C2C0(*(_QWORD *)(a1 + 24));
          v67 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v67 + 40))
          {
            *(_QWORD *)v113 = v67 + 16;
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v33);
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 8));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v33);
            v113[0] = -53;
            std::ostream::write();
            v76 = *(_QWORD *)(v33 + 8);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v76);
            std::ostream::write();
          }
          v77 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v77 + 40))
          {
            *(_QWORD *)v113 = v77 + 16;
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 16));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 24));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 16));
            v113[0] = -53;
            std::ostream::write();
            v86 = *(_QWORD *)(v33 + 24);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v86);
            std::ostream::write();
          }
          v87 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v87 + 40))
          {
            *(_QWORD *)v113 = v87 + 16;
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 32));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 40));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 48));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 56));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 64));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 32));
            v113[0] = -53;
            std::ostream::write();
            v102 = *(_QWORD *)(v33 + 40);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v102);
            std::ostream::write();
            v103 = *(_QWORD *)(v33 + 48);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v103);
            std::ostream::write();
            v104 = *(_QWORD *)(v33 + 56);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v104);
            std::ostream::write();
            v105 = *(_QWORD *)(v33 + 64);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v105);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
          goto LABEL_116;
        case 'n':
          v37 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v36 = a2 + 8;
          v35 = v37;
          if (!v37 || (v10 = (unsigned int *)v35(3, v36, 0, &unk_24C077A40, &unk_20823C240)) == 0)
            sub_207DCBF24();
          v38 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v38 + 40))
          {
            *(_QWORD *)v113 = v38 + 16;
            sub_208210C8C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_208210F00((uint64_t)v113, v38 + 8);
          }
          sub_20820C2C0(*(_QWORD *)(a1 + 24));
          v65 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v65 + 40))
          {
            *(_QWORD *)v113 = v65 + 16;
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 1);
          }
          else
          {
            v70 = *v10;
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v70);
            std::ostream::write();
            v71 = v10[1];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v71);
            std::ostream::write();
          }
          v72 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v72 + 40))
          {
            *(_QWORD *)v113 = v72 + 16;
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 2);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 3);
          }
          else
          {
            v80 = v10[2];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v80);
            std::ostream::write();
            v81 = v10[3];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v81);
            std::ostream::write();
          }
          v82 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v82 + 40))
          {
            *(_QWORD *)v113 = v82 + 16;
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 4);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 5);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 6);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 7);
            sub_208211A6C((uint64_t)&v112, (uint64_t **)v113, v10 + 8);
          }
          else
          {
            v92 = v10[4];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v92);
            std::ostream::write();
            v93 = v10[5];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v93);
            std::ostream::write();
            v94 = v10[6];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v94);
            std::ostream::write();
            v95 = v10[7];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v95);
            std::ostream::write();
            v96 = v10[8];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v96);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
LABEL_119:
          *(_QWORD *)v113 = v58 + 16;
          sub_208210C8C((uint64_t **)v113, v10[9]);
          sub_208210C8C((uint64_t **)v113, v10[10]);
          goto LABEL_126;
        case 'o':
          v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v31 = a2 + 8;
          v30 = v32;
          if (!v32 || (v33 = v30(3, v31, 0, &unk_24C077A90, &unk_20823C318)) == 0)
            sub_207DCBF24();
          v34 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v34 + 40))
          {
            *(_QWORD *)v113 = v34 + 16;
            sub_208210C8C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_208210F00((uint64_t)v113, v34 + 8);
          }
          sub_20820C2C0(*(_QWORD *)(a1 + 24));
          v64 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v64 + 40))
          {
            *(_QWORD *)v113 = v64 + 16;
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v33);
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 8));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v33);
            v113[0] = -53;
            std::ostream::write();
            v68 = *(_QWORD *)(v33 + 8);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v68);
            std::ostream::write();
          }
          v69 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v69 + 40))
          {
            *(_QWORD *)v113 = v69 + 16;
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 16));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 24));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 16));
            v113[0] = -53;
            std::ostream::write();
            v78 = *(_QWORD *)(v33 + 24);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v78);
            std::ostream::write();
          }
          v79 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v79 + 40))
          {
            *(_QWORD *)v113 = v79 + 16;
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 32));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 40));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 48));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 56));
            sub_208211B48((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 64));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 32));
            v113[0] = -53;
            std::ostream::write();
            v88 = *(_QWORD *)(v33 + 40);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v88);
            std::ostream::write();
            v89 = *(_QWORD *)(v33 + 48);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v89);
            std::ostream::write();
            v90 = *(_QWORD *)(v33 + 56);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v90);
            std::ostream::write();
            v91 = *(_QWORD *)(v33 + 64);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v91);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
LABEL_116:
          *(_QWORD *)v113 = v58 + 16;
          sub_208210C8C((uint64_t **)v113, *(_DWORD *)(v33 + 72));
          sub_208210C8C((uint64_t **)v113, *(_DWORD *)(v33 + 76));
          goto LABEL_126;
        default:
          return;
      }
  }
LABEL_126:
  v107 = *(_QWORD *)(a1 + 24);
  v108 = *(_QWORD *)(*(_QWORD *)(v107 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v107 + 48), *(_QWORD *)(v107 + 16) - v108 - 9);
  v109 = *(_QWORD *)(v107 + 48);
  if (v109)
    memmove((void *)(*(_QWORD *)(v107 + 24) + v108), *(const void **)(v107 + 56), v109);
  *(_QWORD *)(v107 + 48) = 0;
  v110 = *(_QWORD *)(v107 + 80);
  v111 = *(_QWORD *)(v107 + 88) - 8;
  *(_QWORD *)(v107 + 88) = v111;
  if (v110 == v111)
  {
    std::ostream::write();
    if (*(_BYTE *)(v107 + 40))
    {
      free(*(void **)(v107 + 24));
      *(_BYTE *)(v107 + 40) = 0;
    }
  }
}

void sub_207E81900(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void sub_207E81944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  sub_2081F17E4(a2);
  v10 = "version";
  v11 = 7;
  LODWORD(v12[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2081F20F8(a2, v12);
  LODWORD(v10) = *(_DWORD *)a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(a3 + 8);
  v7 = a3 + 8;
  v6 = v8;
  v11 = 0;
  v12[0] = 0;
  if (v8)
    v6(1, v7, &v11, 0, 0);
  sub_207E81AC4(a2, (uint64_t)&v10);
  if (v11)
    ((void (*)(_QWORD, uint64_t *, _QWORD, _QWORD, _QWORD))v11)(0, &v11, 0, 0, 0);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E81A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E81AC4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v41;
  int *v42;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "camera_type";
    *(_QWORD *)(a1 + 80) = 11;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v42 = (int *)a2;
  sub_207E81F68(a1, &v42);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_55;
      v14 = v11(3, v12, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v15 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_18;
    case 1:
      v18 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v17 = a2 + 8;
      v16 = v18;
      if (!v18)
        goto LABEL_55;
      v19 = v16(3, v17, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v19)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v20 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v20)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_24;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v22 = a2 + 8;
      v21 = v23;
      if (!v23)
        goto LABEL_55;
      v14 = v21(3, v22, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v24)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_18:
      sub_207E82070((uint64_t)&v42, a1, v14);
      break;
    case 11:
      v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v26 = a2 + 8;
      v25 = v27;
      if (!v27 || (v19 = v25(3, v26, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_55:
        sub_207DCBF24();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v28 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v28)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_24:
      sub_207E821FC((uint64_t)&v42, a1, v19);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_55;
          v9 = v6(3, v7, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v10 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v10)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_11;
        case 'e':
          v31 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v30 = a2 + 8;
          v29 = v31;
          if (!v31)
            goto LABEL_55;
          v32 = v29(3, v30, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v33 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v33)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_42;
        case 'n':
          v36 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v35 = a2 + 8;
          v34 = v36;
          if (!v36)
            goto LABEL_55;
          v9 = v34(3, v35, 0, &unk_24C077A40, &unk_20823C240);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v37 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v37)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_11:
          sub_207E82388((uint64_t)&v42, a1, v9);
          break;
        case 'o':
          v40 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v39 = a2 + 8;
          v38 = v40;
          if (!v40)
            goto LABEL_55;
          v32 = v38(3, v39, 0, &unk_24C077A90, &unk_20823C318);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v41 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v41)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_42:
          sub_207E8255C((uint64_t)&v42, a1, v32);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E81F68(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_207E7F9EC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_207CA9F48();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
  sub_2081F25C0(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_207E8202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E82048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E82070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2081F17E4(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F20F8(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F20F8(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2081F3400(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_2081F3400(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2081F2BB0(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E821FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2081F17E4(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F20F8(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F20F8(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2081F3820(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2081F3820(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 32;
  sub_2081F2BB0(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E82388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2081F17E4(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F20F8(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F20F8(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2081F3400(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 8;
  sub_2081F3400(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 16;
  sub_2081F3400(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 36;
  sub_2081F2BB0(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E8255C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2081F17E4(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2081F20F8(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2081F20F8(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2081F3820(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 16;
  sub_2081F3820(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 32;
  sub_2081F3820(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 72;
  sub_2081F2BB0(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_207E82730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  void (*v6)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;
  int v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)a3;
  v6 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
  v4 = a3 + 8;
  v5 = v6;
  v12[0] = 0;
  v12[1] = 0;
  if (v6)
    v5(1, v4, v12, 0, 0);
  sub_207E8287C(a2, &v11);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v7 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v8 = *(_QWORD **)(a2 + 24);
    LOBYTE(v11) = *(_BYTE *)(a2 + 32);
    sub_207CBAB98(v8, (uint64_t)&v11, 1);
  }
  v9 = *(_QWORD **)(a2 + 24);
  LOBYTE(v11) = v7;
  result = sub_207CBAB98(v9, (uint64_t)&v11, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_207E82834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E8287C(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  int *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  int *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  int *v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  int *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, int *, _QWORD, void *, void *);
  int *v50;
  uint64_t (*v51)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v52;
  uint64_t (*v53)(uint64_t, int *, _QWORD, void *, void *);
  int *v54;
  uint64_t (*v55)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, int *, _QWORD, void *, void *);
  int *v79;
  uint64_t (*v80)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  _QWORD *v107;
  char v108;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v4, (uint64_t)&v108, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v6 = *a2;
  switch(v6)
  {
    case 0:
      v13 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v12 = a2 + 2;
      v11 = v13;
      if (!v13)
        goto LABEL_105;
      v14 = v11(3, v12, 0, &unk_24C077860, &unk_20823BD3C);
      goto LABEL_14;
    case 1:
      v17 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v16 = a2 + 2;
      v15 = v17;
      if (!v17)
        goto LABEL_105;
      v18 = v15(3, v16, 0, &unk_24C0778B0, &unk_20823BE10);
      goto LABEL_31;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 10:
      v21 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v20 = a2 + 2;
      v19 = v21;
      if (!v21)
        goto LABEL_105;
      v14 = v19(3, v20, 0, &unk_24C077900, &unk_20823BEE4);
LABEL_14:
      if (!v14)
        goto LABEL_105;
      if (*(_QWORD *)(a1 + 40))
      {
        v22 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v22, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v23 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23 + 1;
      if (v23 != -1)
      {
        v24 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v24, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v25 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v25 + 1;
      if (v25 != -1)
      {
        v26 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v26, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v27 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v27 + 1;
      if (v27 != -1)
      {
        v28 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v28, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v29 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v29 + 1;
      if (v29 != -1)
      {
        v30 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v30, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v31 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v31 + 1;
      if (v31 != -1)
      {
        v32 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v32, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v33 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v33 + 1;
      if (v33 == -1)
        goto LABEL_102;
      goto LABEL_101;
    case 11:
      v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v35 = a2 + 2;
      v34 = v36;
      if (!v36)
        goto LABEL_105;
      v18 = v34(3, v35, 0, &unk_24C077950, &unk_20823BFB8);
LABEL_31:
      if (!v18)
LABEL_105:
        sub_207DCBF24();
      if (*(_QWORD *)(a1 + 40))
      {
        v37 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v37, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v38 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v38 + 1;
      if (v38 != -1)
      {
        v39 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v39, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v40 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v40 + 1;
      if (v40 != -1)
      {
        v41 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v41, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v42 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v42 + 1;
      if (v42 != -1)
      {
        v43 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v43, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v44 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v44 + 1;
      if (v44 != -1)
      {
        v45 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v45, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v46 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v46 + 1;
      if (v46 != -1)
      {
        v47 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v47, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v48 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v48 + 1;
      if (v48 == -1)
        goto LABEL_102;
LABEL_101:
      v103 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v103, (uint64_t)&v108, 1);
LABEL_102:
      std::ostream::operator<<();
      v104 = *(_QWORD *)(a1 + 40);
      v105 = *(_BYTE *)(a1 + 34);
      *(_QWORD *)(a1 + 40) = v104 + 1;
      if (v104 != -1)
      {
        v106 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v106, (uint64_t)&v108, 1);
      }
      v107 = *(_QWORD **)(a1 + 24);
      v108 = v105;
      result = (uint64_t)sub_207CBAB98(v107, (uint64_t)&v108, 1);
      ++*(_QWORD *)(a1 + 40);
      return result;
    default:
      switch(v6)
      {
        case 'd':
          v9 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v8 = a2 + 2;
          v7 = v9;
          if (!v9)
            goto LABEL_105;
          v10 = v7(3, v8, 0, &unk_24C0779A0, &unk_20823C090);
          goto LABEL_50;
        case 'e':
          v51 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v50 = a2 + 2;
          v49 = v51;
          if (!v51)
            goto LABEL_105;
          v52 = v49(3, v50, 0, &unk_24C0779F0, &unk_20823C168);
          goto LABEL_77;
        case 'n':
          v55 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v54 = a2 + 2;
          v53 = v55;
          if (!v55)
            goto LABEL_105;
          v10 = v53(3, v54, 0, &unk_24C077A40, &unk_20823C240);
LABEL_50:
          if (!v10)
            goto LABEL_105;
          if (*(_QWORD *)(a1 + 40))
          {
            v56 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v56, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v57 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v57 + 1;
          if (v57 != -1)
          {
            v58 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v58, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v59 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v59 + 1;
          if (v59 != -1)
          {
            v60 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v60, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v61 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v61 + 1;
          if (v61 != -1)
          {
            v62 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v62, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v63 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v63 + 1;
          if (v63 != -1)
          {
            v64 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v64, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v65 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v65 + 1;
          if (v65 != -1)
          {
            v66 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v66, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v67 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v67 + 1;
          if (v67 != -1)
          {
            v68 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v68, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v69 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v69 + 1;
          if (v69 != -1)
          {
            v70 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v70, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v71 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v71 + 1;
          if (v71 != -1)
          {
            v72 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v72, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v73 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v73 + 1;
          if (v73 != -1)
          {
            v74 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v74, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v75 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v75 + 1;
          if (v75 != -1)
          {
            v76 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v76, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v77 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v77 + 1;
          if (v77 == -1)
            goto LABEL_102;
          goto LABEL_101;
        case 'o':
          v80 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v79 = a2 + 2;
          v78 = v80;
          if (!v80)
            goto LABEL_105;
          v52 = v78(3, v79, 0, &unk_24C077A90, &unk_20823C318);
LABEL_77:
          if (!v52)
            goto LABEL_105;
          if (*(_QWORD *)(a1 + 40))
          {
            v81 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v81, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v82 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v82 + 1;
          if (v82 != -1)
          {
            v83 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v83, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v84 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v84 + 1;
          if (v84 != -1)
          {
            v85 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v85, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v86 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v86 + 1;
          if (v86 != -1)
          {
            v87 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v87, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v88 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v88 + 1;
          if (v88 != -1)
          {
            v89 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v89, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v90 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v90 + 1;
          if (v90 != -1)
          {
            v91 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v91, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v92 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v92 + 1;
          if (v92 != -1)
          {
            v93 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v93, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v94 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v94 + 1;
          if (v94 != -1)
          {
            v95 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v95, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v96 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v96 + 1;
          if (v96 != -1)
          {
            v97 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v97, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v98 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v98 + 1;
          if (v98 != -1)
          {
            v99 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v99, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v100 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v100 + 1;
          if (v100 != -1)
          {
            v101 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v101, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v102 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v102 + 1;
          if (v102 != -1)
            goto LABEL_101;
          goto LABEL_102;
        default:
          return result;
      }
  }
}

char *sub_207E83460(uint64_t a1, _QWORD *a2, int *a3)
{
  void (*v5)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  int *v6;
  void (*v7)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  char *result;
  int v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  sub_208072A10(a2);
  v9 = *a3;
  v7 = (void (*)(uint64_t, int *, _QWORD *, _QWORD, _QWORD))*((_QWORD *)a3 + 1);
  v6 = a3 + 2;
  v5 = v7;
  v10[0] = 0;
  v10[1] = 0;
  if (v7)
    v5(1, v6, v10, 0, 0);
  result = sub_207E8359C((uint64_t)a2, (uint64_t)&v9);
  if (v10[0])
    result = (char *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  *(_QWORD *)(*(_QWORD *)(a2[7] - 8) + a2[3] + 10) = a2[4] - (*(_QWORD *)(a2[7] - 8) + a2[3]) - 18;
  a2[7] -= 8;
  return result;
}

void sub_207E83554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

char *sub_207E8359C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  int v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v33;
  char *v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v42;
  char *v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v47;
  char *v48;
  uint64_t v49;
  int __src;
  uint64_t v51;

  __src = *(_DWORD *)a2;
  v4 = a1 + 24;
  result = sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
  v6 = *(_DWORD *)a2;
  switch(v6)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_29;
      v14 = v11(3, v12, 0, &unk_24C077860, &unk_20823BD3C);
      goto LABEL_12;
    case 1:
      v17 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v16 = a2 + 8;
      v15 = v17;
      if (!v17)
        goto LABEL_29;
      v18 = v15(3, v16, 0, &unk_24C0778B0, &unk_20823BE10);
      goto LABEL_16;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 10:
      v21 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v20 = a2 + 8;
      v19 = v21;
      if (!v21)
        goto LABEL_29;
      v14 = v19(3, v20, 0, &unk_24C077900, &unk_20823BEE4);
LABEL_12:
      v22 = (char *)v14;
      if (!v14)
        goto LABEL_29;
      __src = 2;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
      sub_208072A10((_QWORD *)a1);
      v23 = v22 + 8;
      sub_207D0B114(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      v24 = *(char **)(a1 + 32);
      v25 = v22 + 16;
      v26 = v4;
      v27 = v23;
      v28 = v25;
      v29 = 8;
      break;
    case 11:
      v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_29;
      v18 = v30(3, v31, 0, &unk_24C077950, &unk_20823BFB8);
LABEL_16:
      v33 = (char *)v18;
      if (!v18)
LABEL_29:
        sub_207DCBF24();
      __src = 2;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
      sub_208072A10((_QWORD *)a1);
      v34 = v33 + 16;
      sub_207D0B114(v4, *(char **)(a1 + 32), v33, v33 + 16, 16);
      v24 = *(char **)(a1 + 32);
      v25 = v33 + 32;
      v26 = v4;
      v27 = v34;
      v28 = v25;
      v29 = 16;
      break;
    default:
      switch(v6)
      {
        case 'd':
          v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v8 = a2 + 8;
          v7 = v9;
          if (!v9)
            goto LABEL_29;
          v10 = v7(3, v8, 0, &unk_24C0779A0, &unk_20823C090);
          goto LABEL_22;
        case 'e':
          v37 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v36 = a2 + 8;
          v35 = v37;
          if (!v37)
            goto LABEL_29;
          v38 = v35(3, v36, 0, &unk_24C0779F0, &unk_20823C168);
          goto LABEL_26;
        case 'n':
          v41 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v40 = a2 + 8;
          v39 = v41;
          if (!v41)
            goto LABEL_29;
          v10 = v39(3, v40, 0, &unk_24C077A40, &unk_20823C240);
LABEL_22:
          v42 = (char *)v10;
          if (!v10)
            goto LABEL_29;
          __src = 2;
          sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
          sub_208072A10((_QWORD *)a1);
          sub_207D0B114(v4, *(char **)(a1 + 32), v42, v42 + 8, 8);
          v43 = v42 + 16;
          sub_207D0B114(v4, *(char **)(a1 + 32), v42 + 8, v42 + 16, 8);
          v24 = *(char **)(a1 + 32);
          v25 = v42 + 36;
          v26 = v4;
          v27 = v43;
          v28 = v25;
          v29 = 20;
          break;
        case 'o':
          v46 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v45 = a2 + 8;
          v44 = v46;
          if (!v46)
            goto LABEL_29;
          v38 = v44(3, v45, 0, &unk_24C077A90, &unk_20823C318);
LABEL_26:
          v47 = (char *)v38;
          if (!v38)
            goto LABEL_29;
          __src = 2;
          sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
          sub_208072A10((_QWORD *)a1);
          sub_207D0B114(v4, *(char **)(a1 + 32), v47, v47 + 16, 16);
          v48 = v47 + 32;
          sub_207D0B114(v4, *(char **)(a1 + 32), v47 + 16, v47 + 32, 16);
          v24 = *(char **)(a1 + 32);
          v25 = v47 + 72;
          v26 = v4;
          v27 = v48;
          v28 = v25;
          v29 = 40;
          break;
        default:
          return result;
      }
      break;
  }
  sub_207D0B114(v26, v24, v27, v28, v29);
  result = sub_207D0B114(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v49 + 10) = *(_QWORD *)(a1 + 32) - v49 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

void sub_207E839E0(int *a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  int v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v9 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (*a1 < 1)
  {
    v9 = *(_DWORD *)a3;
    v8 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
    v7 = a3 + 8;
    v6 = v8;
    v10[0] = 0;
    v10[1] = 0;
    if (v8)
      v6(1, v7, v10, 0, 0);
    sub_207E83CA4(a2, (uint64_t)&v9);
    if (v10[0])
      ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  }
  else
  {
    sub_207E83B30(a1, a2, a3);
  }
}

void sub_207E83AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E83B30(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v7)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  int v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v10 = *(_DWORD *)a3;
  v9 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
  v8 = a3 + 8;
  v7 = v9;
  v11[0] = 0;
  v11[1] = 0;
  if (v9)
    v7(1, v8, v11, 0, 0);
  sub_207E83CA4(a2, (uint64_t)&v10);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

void sub_207E83C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E83CA4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  int *v33;

  v33 = (int *)a2;
  sub_207E83FD4((_BYTE *)a1, &v33);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v10 = a2 + 8;
      v9 = v11;
      if (v11)
      {
        v12 = v9(3, v10, 0, &unk_24C077860, &unk_20823BD3C);
        if (v12)
          goto LABEL_9;
      }
      goto LABEL_27;
    case 1:
      v15 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v14 = a2 + 8;
      v13 = v15;
      if (v15)
      {
        v16 = v13(3, v14, 0, &unk_24C0778B0, &unk_20823BE10);
        if (v16)
          goto LABEL_12;
      }
      goto LABEL_27;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v18 = a2 + 8;
      v17 = v19;
      if (!v19)
        goto LABEL_27;
      v12 = v17(3, v18, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v12)
        goto LABEL_27;
LABEL_9:
      v33 = *(int **)(a1 + 8);
      sub_207E8410C((int *)&v33, a1, v12);
      break;
    case 11:
      v22 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v21 = a2 + 8;
      v20 = v22;
      if (!v22 || (v16 = v20(3, v21, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_27:
        sub_207DCBF24();
LABEL_12:
      v33 = *(int **)(a1 + 8);
      sub_207E842C8((int *)&v33, a1, v16);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v6 = a2 + 8;
          v5 = v7;
          if (v7)
          {
            v8 = v5(3, v6, 0, &unk_24C0779A0, &unk_20823C090);
            if (v8)
              goto LABEL_5;
          }
          goto LABEL_27;
        case 'e':
          v25 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v24 = a2 + 8;
          v23 = v25;
          if (v25)
          {
            v26 = v23(3, v24, 0, &unk_24C0779F0, &unk_20823C168);
            if (v26)
              goto LABEL_21;
          }
          goto LABEL_27;
        case 'n':
          v29 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v28 = a2 + 8;
          v27 = v29;
          if (!v29)
            goto LABEL_27;
          v8 = v27(3, v28, 0, &unk_24C077A40, &unk_20823C240);
          if (!v8)
            goto LABEL_27;
LABEL_5:
          v33 = *(int **)(a1 + 8);
          sub_207E84484((int *)&v33, a1, v8);
          break;
        case 'o':
          v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v31 = a2 + 8;
          v30 = v32;
          if (!v32)
            goto LABEL_27;
          v26 = v30(3, v31, 0, &unk_24C077A90, &unk_20823C318);
          if (!v26)
            goto LABEL_27;
LABEL_21:
          v33 = *(int **)(a1 + 8);
          sub_207E84750((int *)&v33, a1, v26);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E83FD4(_BYTE *a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _DWORD v6[6];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_207E7F9EC((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_207CA9F48();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0765F8[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _DWORD *))off_24C0765E0[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v6);
  }
}

void sub_207E840C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E840E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E840F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207E8410C(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  }
  else
  {
    if (*a1 == 2 && (v9 = 2, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_207E842C8(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 32);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  }
  else
  {
    if (*a1 == 2 && (v9 = 2, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 32);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_207E84484(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;

  v7 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_207E845E4(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
}

uint64_t sub_207E845E4(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

uint64_t sub_207E84750(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;

  v7 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_207E848B0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
}

uint64_t sub_207E848B0(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

uint64_t sub_207E84A1C(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5F4C(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20809778C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_207E84B18((uint64_t)&v11, a1, a2);
  else
    sub_207E84D14(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

_QWORD *sub_207E84B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20808C968(&v14);
  sub_208082FE8((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C084548;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207E87A30(a2, (unint64_t)&v17);
  sub_208084544(&v17, v12);
  sub_2080855CC((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C084548;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_207E88140((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_207E84C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E84D14(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_207E85424((uint64_t *)a1, (_DWORD **)&v73);
  sub_2080869E0((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_207E855E4(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_207E859E8(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_207E85E20(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_95:
        sub_207DCBF24();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_207E86224(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_207E8665C(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_207E86B08(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C077A40, &unk_20823C240);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_207E87024(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C077A90, &unk_20823C318);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_207E874D0(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

void sub_207E85424(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F6204(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_208097C8C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_208087184((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E85568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E855E4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E85708((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v10, (uint64_t)v11);
  }
}

void sub_207E85708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0842C8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083CD8;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = off_24C084408;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C083D30;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C083CD8;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E859C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E859D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E859E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E85B0C((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v10, (uint64_t)v11);
  }
}

void sub_207E85B0C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084368;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083E98;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = off_24C0844A8;
  *((_QWORD *)v26 + 4) = &off_24C083EF0;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C083E98;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_207E85DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E85E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E85E20(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E85F44((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v10, (uint64_t)v11);
  }
}

void sub_207E85F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084318;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083DE8;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = off_24C084458;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C083D30;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C083DE8;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E861FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E86210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E86224(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E86348((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v10, (uint64_t)v11);
  }
}

void sub_207E86348(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0843B8;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083FA8;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = off_24C0844F8;
  *((_QWORD *)v26 + 4) = &off_24C083EF0;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C083FA8;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_207E86634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E86648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8665C(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E867C0((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v12, (uint64_t)v13);
  }
}

void sub_207E867C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084000;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083958;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v14, (uint64_t)&v36);
  v15 = sub_20808B0E4((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = off_24C084140;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C0839B0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C083958;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E86AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E86AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E86B08(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E86C6C((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v12, (uint64_t)v13);
  }
}

void sub_207E86C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840A0;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083B18;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v14, (uint64_t)&v44);
  v15 = sub_20808B20C((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C0841E0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C083B70;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C083B18;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E86FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E87010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E87024(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E87188((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v12, (uint64_t)v13);
  }
}

void sub_207E87188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084050;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083A68;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F75DC(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v14, (uint64_t)&v36);
  v15 = sub_20808B0E4((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = off_24C084190;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C0839B0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C083A68;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E874A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E874BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E874D0(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E87634((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F76E4(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v12, (uint64_t)v13);
  }
}

void sub_207E87634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840F0;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083C28;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F76E4(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F71F0(v14, (uint64_t)&v44);
  v15 = sub_20808B20C((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084230;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C083B70;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C083C28;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E879C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E879D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E879EC(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8);
  if (v2)
    v2(0, a1 + 8, 0, 0, 0);
  return a1;
}

void sub_207E87A30(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_207E85424((uint64_t *)a1, (_DWORD **)&v73);
  sub_208084F00((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_207E855E4(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_207E859E8(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_207E85E20(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_95:
        sub_207DCBF24();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_20809778C(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_207E86224(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_207E8665C(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_207E86B08(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C077A40, &unk_20823C240);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_207E87024(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C077A90, &unk_20823C318);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5F4C(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2081F6204((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_20809778C(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_207E874D0(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

_QWORD *sub_207E88140(_QWORD *a1, void (**a2)(uint64_t))
{
  _QWORD v4[9];

  v4[8] = *MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2)
    (*a2)(2);
  if (v4 != a1 && *a1 != (unsigned __int128)0)
    ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))*a1)(2, a1, v4, 0, 0);
  if (v4[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v4[0])(0, v4, 0, 0, 0);
  return a1;
}

void sub_207E88298(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E882B8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20820BA20(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_207E88390((uint64_t)&v8, a1, (uint64_t)a2);
    return a1;
  }
  else
  {
    sub_207E17CA8(a1 + 2);
    sub_207E8858C(a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

_QWORD *sub_207E88390(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20808C968(&v14);
  sub_208082FE8((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C084548;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207E8AAB8(a2, &v17);
  sub_208084544(&v17, v12);
  sub_2080855CC((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C084548;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_207E88140((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_207E88514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E8858C(_QWORD *a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20820BA20(a1[6], &v37);
  *a2 = v37;
  sub_2080869E0((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = v9(3, v10, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v12)
        goto LABEL_28;
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E88970((uint64_t)&v37, a1, v12, v37);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v16)
        goto LABEL_28;
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E88D0C((uint64_t)&v37, a1, v16, v37);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = v17(3, v18, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v20)
        goto LABEL_28;
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E890DC((uint64_t)&v37, a1, v20, v37);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_28:
        sub_207DCBF24();
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E89478((uint64_t)&v37, a1, v24, v37);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = v5(3, v6, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E89848((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E89CAC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = v29(3, v30, 0, &unk_24C077A40, &unk_20823C240);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E8A180((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C077A90, &unk_20823C318);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E8A5E4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E88970(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_207E88A6C((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BCC8(v7, (float *)a3);
    sub_20820BCC8(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20820BCC8(v8, (float *)(a3 + 8));
    sub_20820BCC8(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20820BA20(v9, (_DWORD *)(a3 + 16));
    sub_20820BA20(v9, (_DWORD *)(a3 + 20));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_207E88A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t *v39;
  std::__shared_weak_count *v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0842C8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083CD8;
  v39 = (int8x16_t *)(v5 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v7, (float *)&v36);
  sub_20820BCC8(v7, (float *)&v36 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v8, (float *)&v37);
  sub_20820BCC8(v8, (float *)&v37 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v9, &v38);
  sub_20820BA20(v9, (_DWORD *)&v38 + 1);
  v10 = v38;
  v11 = (float32x2_t *)v39;
  v12 = v36;
  v13 = v37;
  __asm { FMOV            V2.2S, #1.0 }
  v19 = vdiv_f32(_D2, v36);
  v20 = vmul_f32(v19, vneg_f32(v37));
  v21 = vzip1_s32((int32x2_t)v36, (int32x2_t)v37);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v39[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v36, (int32x2_t)v37), 0x20uLL), v22);
  v11[4] = v19;
  v11[5] = v20;
  v11[6].i32[0] = v12.i32[0];
  v11[7] = 0;
  v11[6].i32[1] = 0;
  v11[8].i32[0] = v12.i32[1];
  v11[8].i32[1] = 0;
  v11[9] = v13;
  v11[10].i32[0] = 1065353216;
  v11[11] = v10;
  v23 = v39;
  v35 = v39[1];
  v24 = v39[5].i64[1];
  v25 = (char *)operator new(0x78uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = off_24C084408;
  v26 = v23[1];
  *((_QWORD *)v25 + 4) = &off_24C083D30;
  *(int8x16_t *)(v25 + 40) = v26;
  *(int8x16_t *)(v25 + 56) = v23[2];
  v27 = v23[3];
  v28 = v23[4];
  *((_DWORD *)v25 + 26) = v23[5].i32[0];
  *(int8x16_t *)(v25 + 88) = v28;
  *(int8x16_t *)(v25 + 72) = v27;
  *((_QWORD *)v25 + 3) = &off_24C083CD8;
  *((_QWORD *)v25 + 14) = v24;
  *(int8x16_t *)a3 = v35;
  *(_QWORD *)(a3 + 16) = v24;
  *(_QWORD *)(a3 + 24) = v25 + 24;
  v29 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v25;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_207E88CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E88CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E88CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E88CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E88D0C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_207E88E08((uint64_t)&v12, (uint64_t)a2, (_QWORD *)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BDF8(v7, (double *)a3);
    sub_20820BDF8(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20820BDF8(v8, (double *)(a3 + 16));
    sub_20820BDF8(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20820BA20(v9, (_DWORD *)(a3 + 32));
    sub_20820BA20(v9, (_DWORD *)(a3 + 36));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_207E88E08(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084368;
  v39 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v39;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v38 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083E98;
  v37 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v7, (double *)&v34);
  sub_20820BDF8(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v8, (double *)&v35);
  sub_20820BDF8(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v9, &v36);
  sub_20820BA20(v9, (_DWORD *)&v36 + 1);
  v10 = v34;
  v11 = v35;
  v12 = 1.0 / *(double *)&v34;
  v13 = v36;
  v14 = v37;
  *((_OWORD *)v37 + 1) = v34;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((_QWORD *)v14 + 10) = v10;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 14) = *((_QWORD *)&v10 + 1);
  *((_QWORD *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((_QWORD *)v14 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v14 + 19) = v13;
  v15 = v37;
  v16 = v37 + 16;
  v17 = *((_QWORD *)v37 + 2);
  v18 = *((_QWORD *)v37 + 3);
  v19 = v37 + 32;
  v20 = *((_QWORD *)v37 + 4);
  v21 = *((_QWORD *)v37 + 5);
  v22 = *((_QWORD *)v37 + 19);
  v23 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = off_24C0844A8;
  *((_QWORD *)v23 + 4) = &off_24C083EF0;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  v25 = *((_OWORD *)v15 + 6);
  v26 = *((_OWORD *)v15 + 7);
  v27 = *((_OWORD *)v15 + 8);
  *((_QWORD *)v23 + 21) = *((_QWORD *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((_QWORD *)v23 + 22) = v22;
  *((_QWORD *)v23 + 3) = &off_24C083E98;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_207E8908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E890A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E890B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E890C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E890DC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_207E891D8((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BCC8(v7, (float *)a3);
    sub_20820BCC8(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20820BCC8(v8, (float *)(a3 + 8));
    sub_20820BCC8(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20820BA20(v9, (_DWORD *)(a3 + 16));
    sub_20820BA20(v9, (_DWORD *)(a3 + 20));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_207E891D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t *v39;
  std::__shared_weak_count *v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084318;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083DE8;
  v39 = (int8x16_t *)(v5 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v7, (float *)&v36);
  sub_20820BCC8(v7, (float *)&v36 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v8, (float *)&v37);
  sub_20820BCC8(v8, (float *)&v37 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v9, &v38);
  sub_20820BA20(v9, (_DWORD *)&v38 + 1);
  v10 = v38;
  v11 = (float32x2_t *)v39;
  v12 = v36;
  v13 = v37;
  __asm { FMOV            V2.2S, #1.0 }
  v19 = vdiv_f32(_D2, v36);
  v20 = vmul_f32(v19, vneg_f32(v37));
  v21 = vzip1_s32((int32x2_t)v36, (int32x2_t)v37);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v39[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v36, (int32x2_t)v37), 0x20uLL), v22);
  v11[4] = v19;
  v11[5] = v20;
  v11[6].i32[0] = v12.i32[0];
  v11[7] = 0;
  v11[6].i32[1] = 0;
  v11[8].i32[0] = v12.i32[1];
  v11[8].i32[1] = 0;
  v11[9] = v13;
  v11[10].i32[0] = 1065353216;
  v11[11] = v10;
  v23 = v39;
  v35 = v39[1];
  v24 = v39[5].i64[1];
  v25 = (char *)operator new(0x78uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = off_24C084458;
  v26 = v23[1];
  *((_QWORD *)v25 + 4) = &off_24C083D30;
  *(int8x16_t *)(v25 + 40) = v26;
  *(int8x16_t *)(v25 + 56) = v23[2];
  v27 = v23[3];
  v28 = v23[4];
  *((_DWORD *)v25 + 26) = v23[5].i32[0];
  *(int8x16_t *)(v25 + 88) = v28;
  *(int8x16_t *)(v25 + 72) = v27;
  *((_QWORD *)v25 + 3) = &off_24C083DE8;
  *((_QWORD *)v25 + 14) = v24;
  *(int8x16_t *)a3 = v35;
  *(_QWORD *)(a3 + 16) = v24;
  *(_QWORD *)(a3 + 24) = v25 + 24;
  v29 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v25;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_207E89428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89478(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_207E89574((uint64_t)&v12, (uint64_t)a2, (_QWORD *)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BDF8(v7, (double *)a3);
    sub_20820BDF8(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20820BDF8(v8, (double *)(a3 + 16));
    sub_20820BDF8(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20820BA20(v9, (_DWORD *)(a3 + 32));
    sub_20820BA20(v9, (_DWORD *)(a3 + 36));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_207E89574(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0843B8;
  v39 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v39;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v38 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083FA8;
  v37 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v7, (double *)&v34);
  sub_20820BDF8(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v8, (double *)&v35);
  sub_20820BDF8(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v9, &v36);
  sub_20820BA20(v9, (_DWORD *)&v36 + 1);
  v10 = v34;
  v11 = v35;
  v12 = 1.0 / *(double *)&v34;
  v13 = v36;
  v14 = v37;
  *((_OWORD *)v37 + 1) = v34;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((_QWORD *)v14 + 10) = v10;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 14) = *((_QWORD *)&v10 + 1);
  *((_QWORD *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((_QWORD *)v14 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v14 + 19) = v13;
  v15 = v37;
  v16 = v37 + 16;
  v17 = *((_QWORD *)v37 + 2);
  v18 = *((_QWORD *)v37 + 3);
  v19 = v37 + 32;
  v20 = *((_QWORD *)v37 + 4);
  v21 = *((_QWORD *)v37 + 5);
  v22 = *((_QWORD *)v37 + 19);
  v23 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = off_24C0844F8;
  *((_QWORD *)v23 + 4) = &off_24C083EF0;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  v25 = *((_OWORD *)v15 + 6);
  v26 = *((_OWORD *)v15 + 7);
  v27 = *((_OWORD *)v15 + 8);
  *((_QWORD *)v23 + 21) = *((_QWORD *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((_QWORD *)v23 + 22) = v22;
  *((_QWORD *)v23 + 3) = &off_24C083FA8;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_207E897F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E89820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E89834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E89848(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_207E89984((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BCC8(v7, (float *)a3);
    sub_20820BCC8(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20820BCC8(v8, (float *)(a3 + 8));
    sub_20820BCC8(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20820BCC8(v9, (float *)(a3 + 16));
    sub_20820BCC8(v9, (float *)(a3 + 20));
    sub_20820BCC8(v9, (float *)(a3 + 24));
    sub_20820BCC8(v9, (float *)(a3 + 28));
    sub_20820BCC8(v9, (float *)(a3 + 32));
    v10 = a2[6];
    sub_20820BA20(v10, (_DWORD *)(a3 + 36));
    sub_20820BA20(v10, (_DWORD *)(a3 + 40));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_207E89984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  float v29[8];
  char *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  memset(v29, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084000;
  v33 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v33;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v31 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083958;
  v30 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v7, (float *)&v28);
  sub_20820BCC8(v7, (float *)&v28 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v8, (float *)&v28 + 2);
  sub_20820BCC8(v8, (float *)((unint64_t)&v28 | 0xC));
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v9, v29);
  sub_20820BCC8(v9, &v29[1]);
  sub_20820BCC8(v9, &v29[2]);
  sub_20820BCC8(v9, &v29[3]);
  sub_20820BCC8(v9, &v29[4]);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v10, &v29[5]);
  sub_20820BA20(v10, &v29[6]);
  v11 = sub_20808B0E4((uint64_t)&v28);
  v27 = *(_OWORD *)(v11 + 16);
  v32 = *(_OWORD *)(v11 + 32);
  LODWORD(v33) = *(_DWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 120);
  v13 = (char *)operator new(0x98uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = off_24C084140;
  v14 = *(_QWORD *)(v11 + 52);
  v15 = *(_WORD *)(v11 + 112);
  v16 = *(_OWORD *)(v11 + 16);
  *((_QWORD *)v13 + 4) = &off_24C0839B0;
  *(_OWORD *)(v13 + 40) = v16;
  v17 = *(_OWORD *)(v11 + 32);
  *((_DWORD *)v13 + 18) = *(_DWORD *)(v11 + 48);
  *(_OWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 76) = v14;
  *(_OWORD *)(v13 + 84) = *(_OWORD *)(v11 + 60);
  v18 = *(_OWORD *)(v11 + 76);
  v19 = *(_OWORD *)(v11 + 92);
  *((_DWORD *)v13 + 33) = *(_DWORD *)(v11 + 108);
  *(_OWORD *)(v13 + 116) = v19;
  *(_OWORD *)(v13 + 100) = v18;
  *((_WORD *)v13 + 68) = v15;
  *((_QWORD *)v13 + 18) = v12;
  *((_QWORD *)v13 + 3) = &off_24C083958;
  v20 = v32;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 36) = v12;
  v21 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v13 + 24;
  *(_QWORD *)(a3 + 56) = v13;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_207E89C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E89CAC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_207E89DE8((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BDF8(v7, (double *)a3);
    sub_20820BDF8(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20820BDF8(v8, (double *)(a3 + 16));
    sub_20820BDF8(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20820BDF8(v9, (double *)(a3 + 32));
    sub_20820BDF8(v9, (double *)(a3 + 40));
    sub_20820BDF8(v9, (double *)(a3 + 48));
    sub_20820BDF8(v9, (double *)(a3 + 56));
    sub_20820BDF8(v9, (double *)(a3 + 64));
    v10 = a2[6];
    sub_20820BA20(v10, (_DWORD *)(a3 + 72));
    sub_20820BA20(v10, (_DWORD *)(a3 + 76));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_207E89DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840A0;
  v45 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v44;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083B18;
  v39 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v7, (double *)&v34);
  sub_20820BDF8(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v8, (double *)&v35);
  sub_20820BDF8(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v9, (double *)&v36);
  sub_20820BDF8(v9, (double *)&v36 + 1);
  sub_20820BDF8(v9, (double *)&v37);
  sub_20820BDF8(v9, (double *)&v37 + 1);
  sub_20820BDF8(v9, (double *)&v38);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v10, (_DWORD *)&v38 + 2);
  sub_20820BA20(v10, (_DWORD *)&v38 + 3);
  v11 = sub_20808B20C((uint64_t)&v34);
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 40);
  v16 = *(_OWORD *)(v11 + 64);
  v41 = *(_OWORD *)(v11 + 48);
  v42 = v16;
  *(_QWORD *)&v43 = *(_QWORD *)(v11 + 80);
  v17 = *(_QWORD *)(v11 + 216);
  v18 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = off_24C0841E0;
  v19 = *(_WORD *)(v11 + 208);
  *((_QWORD *)v18 + 4) = &off_24C083B70;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(v11 + 16);
  *(_OWORD *)(v18 + 56) = *(_OWORD *)(v11 + 32);
  v20 = *(_OWORD *)(v11 + 48);
  v21 = *(_OWORD *)(v11 + 64);
  *((_QWORD *)v18 + 13) = *(_QWORD *)(v11 + 80);
  *(_OWORD *)(v18 + 88) = v21;
  *(_OWORD *)(v18 + 72) = v20;
  v22 = *(_QWORD *)(v11 + 88);
  *((_DWORD *)v18 + 30) = *(_DWORD *)(v11 + 96);
  *((_QWORD *)v18 + 14) = v22;
  v23 = *(_OWORD *)(v11 + 120);
  *((_OWORD *)v18 + 8) = *(_OWORD *)(v11 + 104);
  *((_OWORD *)v18 + 9) = v23;
  v24 = *(_OWORD *)(v11 + 152);
  v25 = *(_OWORD *)(v11 + 168);
  v26 = *(_OWORD *)(v11 + 184);
  *((_QWORD *)v18 + 28) = *(_QWORD *)(v11 + 200);
  *((_OWORD *)v18 + 12) = v25;
  *((_OWORD *)v18 + 13) = v26;
  *((_OWORD *)v18 + 11) = v24;
  *((_OWORD *)v18 + 10) = *(_OWORD *)(v11 + 136);
  *((_WORD *)v18 + 116) = v19;
  *((_QWORD *)v18 + 30) = v17;
  *((_QWORD *)v18 + 3) = &off_24C083B18;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v15;
  v27 = v42;
  *(_OWORD *)(a3 + 32) = v41;
  *(_OWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 64) = v43;
  *(_QWORD *)(a3 + 72) = v17;
  v28 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v18 + 24;
  *(_QWORD *)(a3 + 88) = v18;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_207E8A11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8A130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8A144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8A158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8A16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8A180(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_207E8A2BC((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BCC8(v7, (float *)a3);
    sub_20820BCC8(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20820BCC8(v8, (float *)(a3 + 8));
    sub_20820BCC8(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20820BCC8(v9, (float *)(a3 + 16));
    sub_20820BCC8(v9, (float *)(a3 + 20));
    sub_20820BCC8(v9, (float *)(a3 + 24));
    sub_20820BCC8(v9, (float *)(a3 + 28));
    sub_20820BCC8(v9, (float *)(a3 + 32));
    v10 = a2[6];
    sub_20820BA20(v10, (_DWORD *)(a3 + 36));
    sub_20820BA20(v10, (_DWORD *)(a3 + 40));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_207E8A2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  float v29[8];
  char *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  memset(v29, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084050;
  v33 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v33;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v31 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083A68;
  v30 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v7, (float *)&v28);
  sub_20820BCC8(v7, (float *)&v28 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v8, (float *)&v28 + 2);
  sub_20820BCC8(v8, (float *)((unint64_t)&v28 | 0xC));
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BCC8(v9, v29);
  sub_20820BCC8(v9, &v29[1]);
  sub_20820BCC8(v9, &v29[2]);
  sub_20820BCC8(v9, &v29[3]);
  sub_20820BCC8(v9, &v29[4]);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v10, &v29[5]);
  sub_20820BA20(v10, &v29[6]);
  v11 = sub_20808B0E4((uint64_t)&v28);
  v27 = *(_OWORD *)(v11 + 16);
  v32 = *(_OWORD *)(v11 + 32);
  LODWORD(v33) = *(_DWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 120);
  v13 = (char *)operator new(0x98uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = off_24C084190;
  v14 = *(_QWORD *)(v11 + 52);
  v15 = *(_WORD *)(v11 + 112);
  v16 = *(_OWORD *)(v11 + 16);
  *((_QWORD *)v13 + 4) = &off_24C0839B0;
  *(_OWORD *)(v13 + 40) = v16;
  v17 = *(_OWORD *)(v11 + 32);
  *((_DWORD *)v13 + 18) = *(_DWORD *)(v11 + 48);
  *(_OWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 76) = v14;
  *(_OWORD *)(v13 + 84) = *(_OWORD *)(v11 + 60);
  v18 = *(_OWORD *)(v11 + 76);
  v19 = *(_OWORD *)(v11 + 92);
  *((_DWORD *)v13 + 33) = *(_DWORD *)(v11 + 108);
  *(_OWORD *)(v13 + 116) = v19;
  *(_OWORD *)(v13 + 100) = v18;
  *((_WORD *)v13 + 68) = v15;
  *((_QWORD *)v13 + 18) = v12;
  *((_QWORD *)v13 + 3) = &off_24C083A68;
  v20 = v32;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 36) = v12;
  v21 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v13 + 24;
  *(_QWORD *)(a3 + 56) = v13;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_207E8A580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8A594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8A5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8A5E4(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_207E8A720((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v7 = a2[6];
    sub_20820BDF8(v7, (double *)a3);
    sub_20820BDF8(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20820BDF8(v8, (double *)(a3 + 16));
    sub_20820BDF8(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20820BDF8(v9, (double *)(a3 + 32));
    sub_20820BDF8(v9, (double *)(a3 + 40));
    sub_20820BDF8(v9, (double *)(a3 + 48));
    sub_20820BDF8(v9, (double *)(a3 + 56));
    sub_20820BDF8(v9, (double *)(a3 + 64));
    v10 = a2[6];
    sub_20820BA20(v10, (_DWORD *)(a3 + 72));
    sub_20820BA20(v10, (_DWORD *)(a3 + 76));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_207E8A720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840F0;
  v45 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v44;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083C28;
  v39 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v7, (double *)&v34);
  sub_20820BDF8(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v8, (double *)&v35);
  sub_20820BDF8(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20820BDF8(v9, (double *)&v36);
  sub_20820BDF8(v9, (double *)&v36 + 1);
  sub_20820BDF8(v9, (double *)&v37);
  sub_20820BDF8(v9, (double *)&v37 + 1);
  sub_20820BDF8(v9, (double *)&v38);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20820BA20(v10, (_DWORD *)&v38 + 2);
  sub_20820BA20(v10, (_DWORD *)&v38 + 3);
  v11 = sub_20808B20C((uint64_t)&v34);
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 40);
  v16 = *(_OWORD *)(v11 + 64);
  v41 = *(_OWORD *)(v11 + 48);
  v42 = v16;
  *(_QWORD *)&v43 = *(_QWORD *)(v11 + 80);
  v17 = *(_QWORD *)(v11 + 216);
  v18 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = off_24C084230;
  v19 = *(_WORD *)(v11 + 208);
  *((_QWORD *)v18 + 4) = &off_24C083B70;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(v11 + 16);
  *(_OWORD *)(v18 + 56) = *(_OWORD *)(v11 + 32);
  v20 = *(_OWORD *)(v11 + 48);
  v21 = *(_OWORD *)(v11 + 64);
  *((_QWORD *)v18 + 13) = *(_QWORD *)(v11 + 80);
  *(_OWORD *)(v18 + 88) = v21;
  *(_OWORD *)(v18 + 72) = v20;
  v22 = *(_QWORD *)(v11 + 88);
  *((_DWORD *)v18 + 30) = *(_DWORD *)(v11 + 96);
  *((_QWORD *)v18 + 14) = v22;
  v23 = *(_OWORD *)(v11 + 120);
  *((_OWORD *)v18 + 8) = *(_OWORD *)(v11 + 104);
  *((_OWORD *)v18 + 9) = v23;
  v24 = *(_OWORD *)(v11 + 152);
  v25 = *(_OWORD *)(v11 + 168);
  v26 = *(_OWORD *)(v11 + 184);
  *((_QWORD *)v18 + 28) = *(_QWORD *)(v11 + 200);
  *((_OWORD *)v18 + 12) = v25;
  *((_OWORD *)v18 + 13) = v26;
  *((_OWORD *)v18 + 11) = v24;
  *((_OWORD *)v18 + 10) = *(_OWORD *)(v11 + 136);
  *((_WORD *)v18 + 116) = v19;
  *((_QWORD *)v18 + 30) = v17;
  *((_QWORD *)v18 + 3) = &off_24C083C28;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v15;
  v27 = v42;
  *(_OWORD *)(a3 + 32) = v41;
  *(_OWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 64) = v43;
  *(_QWORD *)(a3 + 72) = v17;
  v28 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v18 + 24;
  *(_QWORD *)(a3 + 88) = v18;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_207E8AA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8AA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8AA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8AA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8AAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8AAB8(_QWORD *a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20820BA20(a1[6], &v37);
  *a2 = v37;
  sub_208084F00((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = v9(3, v10, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v12)
        goto LABEL_28;
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E88970((uint64_t)&v37, a1, v12, v37);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v16)
        goto LABEL_28;
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E88D0C((uint64_t)&v37, a1, v16, v37);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = v17(3, v18, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v20)
        goto LABEL_28;
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E890DC((uint64_t)&v37, a1, v20, v37);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_28:
        sub_207DCBF24();
      v37 = 2;
      sub_20820BA20(a1[6], &v37);
      sub_207E89478((uint64_t)&v37, a1, v24, v37);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = v5(3, v6, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E89848((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E89CAC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = v29(3, v30, 0, &unk_24C077A40, &unk_20823C240);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E8A180((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C077A90, &unk_20823C318);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20820BA20(a1[6], &v37);
          sub_207E8A5E4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

uint64_t sub_207E8AE9C(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5AC0(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_208097288(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_207E8AF98((uint64_t)&v11, a1, a2);
  else
    sub_207E8B194(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

_QWORD *sub_207E8AF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20808C968(&v14);
  sub_208082FE8((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C084548;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207E8DE6C(a2, (unint64_t)&v17);
  sub_208084544(&v17, v12);
  sub_2080855CC((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C084548;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_207E88140((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_207E8B11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E8B194(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_207E8B8A4((uint64_t *)a1, (_DWORD **)&v73);
  sub_2080869E0((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_207E8BA64(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_207E8BE68(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_207E8C2A0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_95:
        sub_207DCBF24();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_207E8C6A4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_207E8CADC(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_207E8CF88(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C077A40, &unk_20823C240);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_207E8D4A4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C077A90, &unk_20823C318);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_207E8D950(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

void sub_207E8B8A4(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F5D78(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_207D21A34(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_208087184((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E8B9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E8BA64(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E8BB88((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v10, (uint64_t)v11);
  }
}

void sub_207E8BB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0842C8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083CD8;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = off_24C084408;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C083D30;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C083CD8;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E8BE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8BE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8BE68(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E8BF8C((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v10, (uint64_t)v11);
  }
}

void sub_207E8BF8C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084368;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083E98;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = off_24C0844A8;
  *((_QWORD *)v26 + 4) = &off_24C083EF0;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C083E98;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_207E8C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8C28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8C2A0(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E8C3C4((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v10, (uint64_t)v11);
  }
}

void sub_207E8C3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084318;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083DE8;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = off_24C084458;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C083D30;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C083DE8;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E8C67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8C690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8C6A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_207E8C7C8((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v10, (uint64_t)v11);
  }
}

void sub_207E8C7C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0843B8;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083FA8;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = off_24C0844F8;
  *((_QWORD *)v26 + 4) = &off_24C083EF0;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24C083FA8;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_207E8CAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8CAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8CADC(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E8CC40((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v12, (uint64_t)v13);
  }
}

void sub_207E8CC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084000;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083958;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v14, (uint64_t)&v36);
  v15 = sub_20808B0E4((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = off_24C084140;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C0839B0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C083958;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E8CF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8CF88(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E8D0EC((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v12, (uint64_t)v13);
  }
}

void sub_207E8D0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840A0;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083B18;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v14, (uint64_t)&v44);
  v15 = sub_20808B20C((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C0841E0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C083B70;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C083B18;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E8D47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8D4A4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E8D608((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v12, (uint64_t)v13);
  }
}

void sub_207E8D608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084050;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083A68;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6B44(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v14, (uint64_t)&v36);
  v15 = sub_20808B0E4((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = off_24C084190;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24C0839B0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24C083A68;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E8D928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8D950(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_207E8DAB4((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6C74(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v12, (uint64_t)v13);
  }
}

void sub_207E8DAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840F0;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083C28;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6C74(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F6730(v14, (uint64_t)&v44);
  v15 = sub_20808B20C((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084230;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24C083B70;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24C083C28;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_207E8DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8DE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8DE6C(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_207E8B8A4((uint64_t *)a1, (_DWORD **)&v73);
  sub_208084F00((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_207E8BA64(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_207E8BE68(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_207E8C2A0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_95:
        sub_207DCBF24();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_208097288(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_207E8C6A4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_207E8CADC(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_207E8CF88(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24C077A40, &unk_20823C240);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_207E8D4A4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24C077A90, &unk_20823C318);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2081F5AC0(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2081F5D78((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_208097288(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_207E8D950(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

_QWORD *sub_207E8E57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20808C968(&v14);
  sub_208082FE8((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C084548;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207E90ED0(a2, &v17);
  sub_208084544(&v17, v12);
  sub_2080855CC((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C084548;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_207E88140((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_207E8E700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E8E778(uint64_t a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_208209DC8(a1, &v37);
  *a2 = v37;
  sub_2080869E0((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = (_DWORD *)v9(3, v10, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v12)
        goto LABEL_28;
      sub_207E8EAE8((uint64_t)&v37, a1, v12);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v16)
        goto LABEL_28;
      sub_207E8EEE4((uint64_t)&v37, a1, v16);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = (_DWORD *)v17(3, v18, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v20)
        goto LABEL_28;
      sub_207E8F314((uint64_t)&v37, a1, v20);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_28:
        sub_207DCBF24();
      sub_207E8F710((uint64_t)&v37, a1, v24);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = (_DWORD *)v5(3, v6, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E8FB40((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E8FFEC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = (_DWORD *)v29(3, v30, 0, &unk_24C077A40, &unk_20823C240);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E90508((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C077A90, &unk_20823C318);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E909B4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E8EAE8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_208209DC8(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_207E8EC50((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20820A740(a2, a3);
    sub_20820A740(a2, a3 + 1);
    sub_20820A740(a2, a3 + 2);
    sub_20820A740(a2, a3 + 3);
    sub_208209DC8(a2, a3 + 4);
    sub_208209DC8(a2, a3 + 5);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E8EC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0842C8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083CD8;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20820A740(a2, &v33);
  sub_20820A740(a2, (_DWORD *)&v33 + 1);
  sub_20820A740(a2, &v34);
  sub_20820A740(a2, (_DWORD *)&v34 + 1);
  sub_208209DC8(a2, &v35);
  sub_208209DC8(a2, (_DWORD *)&v35 + 1);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084408;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C083D30;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C083CD8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_207E8EE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8EEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8EEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8EED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8EEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_208209DC8(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_207E8F04C((uint64_t)__p, a2, (_QWORD *)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20820A994(a2, (_QWORD *)a3);
    sub_20820A994(a2, (_QWORD *)(a3 + 8));
    sub_20820A994(a2, (_QWORD *)(a3 + 16));
    sub_20820A994(a2, (_QWORD *)(a3 + 24));
    sub_208209DC8(a2, (_DWORD *)(a3 + 32));
    sub_208209DC8(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E8F04C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084368;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083E98;
  v34 = v5 + 24;
  sub_20820A994(a2, &v31);
  sub_20820A994(a2, (_QWORD *)&v31 + 1);
  sub_20820A994(a2, &v32);
  sub_20820A994(a2, (_QWORD *)&v32 + 1);
  sub_208209DC8(a2, &v33);
  sub_208209DC8(a2, (_DWORD *)&v33 + 1);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = off_24C0844A8;
  *((_QWORD *)v20 + 4) = &off_24C083EF0;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C083E98;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E8F2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8F2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8F2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8F300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8F314(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_208209DC8(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_207E8F47C((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20820A740(a2, a3);
    sub_20820A740(a2, a3 + 1);
    sub_20820A740(a2, a3 + 2);
    sub_20820A740(a2, a3 + 3);
    sub_208209DC8(a2, a3 + 4);
    sub_208209DC8(a2, a3 + 5);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E8F47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084318;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083DE8;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20820A740(a2, &v33);
  sub_20820A740(a2, (_DWORD *)&v33 + 1);
  sub_20820A740(a2, &v34);
  sub_20820A740(a2, (_DWORD *)&v34 + 1);
  sub_208209DC8(a2, &v35);
  sub_208209DC8(a2, (_DWORD *)&v35 + 1);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084458;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C083D30;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C083DE8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_207E8F6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8F6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8F710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_208209DC8(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_207E8F878((uint64_t)__p, a2, (_QWORD *)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20820A994(a2, (_QWORD *)a3);
    sub_20820A994(a2, (_QWORD *)(a3 + 8));
    sub_20820A994(a2, (_QWORD *)(a3 + 16));
    sub_20820A994(a2, (_QWORD *)(a3 + 24));
    sub_208209DC8(a2, (_DWORD *)(a3 + 32));
    sub_208209DC8(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E8F878(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0843B8;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083FA8;
  v34 = v5 + 24;
  sub_20820A994(a2, &v31);
  sub_20820A994(a2, (_QWORD *)&v31 + 1);
  sub_20820A994(a2, &v32);
  sub_20820A994(a2, (_QWORD *)&v32 + 1);
  sub_208209DC8(a2, &v33);
  sub_208209DC8(a2, (_DWORD *)&v33 + 1);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = off_24C0844F8;
  *((_QWORD *)v20 + 4) = &off_24C083EF0;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C083FA8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E8FAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8FB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8FB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E8FB40(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_207E8FCD4((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20820A740(a2, a3);
    sub_20820A740(a2, a3 + 1);
    sub_20820A740(a2, a3 + 2);
    sub_20820A740(a2, a3 + 3);
    sub_20820A740(a2, a3 + 4);
    sub_20820A740(a2, a3 + 5);
    sub_20820A740(a2, a3 + 6);
    sub_20820A740(a2, a3 + 7);
    sub_20820A740(a2, a3 + 8);
    sub_208209DC8(a2, a3 + 9);
    sub_208209DC8(a2, a3 + 10);
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E8FCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084000;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083958;
  v26 = v5 + 24;
  sub_20820A740(a2, &v24);
  sub_20820A740(a2, (_DWORD *)&v24 + 1);
  sub_20820A740(a2, (_DWORD *)&v24 + 2);
  sub_20820A740(a2, (_DWORD *)((unint64_t)&v24 | 0xC));
  sub_20820A740(a2, v25);
  sub_20820A740(a2, &v25[1]);
  sub_20820A740(a2, &v25[2]);
  sub_20820A740(a2, &v25[3]);
  sub_20820A740(a2, &v25[4]);
  sub_208209DC8(a2, &v25[5]);
  sub_208209DC8(a2, &v25[6]);
  v7 = sub_20808B0E4((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C084140;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C0839B0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C083958;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_207E8FF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8FFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8FFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8FFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E8FFEC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_207E90180((uint64_t)__p, a2, a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20820A994(a2, (_QWORD *)a3);
    sub_20820A994(a2, (_QWORD *)(a3 + 8));
    sub_20820A994(a2, (_QWORD *)(a3 + 16));
    sub_20820A994(a2, (_QWORD *)(a3 + 24));
    sub_20820A994(a2, (_QWORD *)(a3 + 32));
    sub_20820A994(a2, (_QWORD *)(a3 + 40));
    sub_20820A994(a2, (_QWORD *)(a3 + 48));
    sub_20820A994(a2, (_QWORD *)(a3 + 56));
    sub_20820A994(a2, (_QWORD *)(a3 + 64));
    sub_208209DC8(a2, (_DWORD *)(a3 + 72));
    sub_208209DC8(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E90180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840A0;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083B18;
  v35 = v5 + 24;
  sub_20820A994(a2, &v30);
  sub_20820A994(a2, (_QWORD *)&v30 + 1);
  sub_20820A994(a2, &v31);
  sub_20820A994(a2, (_QWORD *)&v31 + 1);
  sub_20820A994(a2, &v32);
  sub_20820A994(a2, (_QWORD *)&v32 + 1);
  sub_20820A994(a2, &v33);
  sub_20820A994(a2, (_QWORD *)&v33 + 1);
  sub_20820A994(a2, &v34);
  sub_208209DC8(a2, (_DWORD *)&v34 + 2);
  sub_208209DC8(a2, (_DWORD *)&v34 + 3);
  v7 = sub_20808B20C((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C0841E0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C083B70;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C083B18;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207E904A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E904B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E904CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E904E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E904F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E90508(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_207E9069C((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20820A740(a2, a3);
    sub_20820A740(a2, a3 + 1);
    sub_20820A740(a2, a3 + 2);
    sub_20820A740(a2, a3 + 3);
    sub_20820A740(a2, a3 + 4);
    sub_20820A740(a2, a3 + 5);
    sub_20820A740(a2, a3 + 6);
    sub_20820A740(a2, a3 + 7);
    sub_20820A740(a2, a3 + 8);
    sub_208209DC8(a2, a3 + 9);
    sub_208209DC8(a2, a3 + 10);
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E9069C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084050;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083A68;
  v26 = v5 + 24;
  sub_20820A740(a2, &v24);
  sub_20820A740(a2, (_DWORD *)&v24 + 1);
  sub_20820A740(a2, (_DWORD *)&v24 + 2);
  sub_20820A740(a2, (_DWORD *)((unint64_t)&v24 | 0xC));
  sub_20820A740(a2, v25);
  sub_20820A740(a2, &v25[1]);
  sub_20820A740(a2, &v25[2]);
  sub_20820A740(a2, &v25[3]);
  sub_20820A740(a2, &v25[4]);
  sub_208209DC8(a2, &v25[5]);
  sub_208209DC8(a2, &v25[6]);
  v7 = sub_20808B0E4((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C084190;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C0839B0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C083A68;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_207E90950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E90964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E90978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E909A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E909B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_207E90B48((uint64_t)__p, a2, a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20820A994(a2, (_QWORD *)a3);
    sub_20820A994(a2, (_QWORD *)(a3 + 8));
    sub_20820A994(a2, (_QWORD *)(a3 + 16));
    sub_20820A994(a2, (_QWORD *)(a3 + 24));
    sub_20820A994(a2, (_QWORD *)(a3 + 32));
    sub_20820A994(a2, (_QWORD *)(a3 + 40));
    sub_20820A994(a2, (_QWORD *)(a3 + 48));
    sub_20820A994(a2, (_QWORD *)(a3 + 56));
    sub_20820A994(a2, (_QWORD *)(a3 + 64));
    sub_208209DC8(a2, (_DWORD *)(a3 + 72));
    sub_208209DC8(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20820B068(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_207E90B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840F0;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083C28;
  v35 = v5 + 24;
  sub_20820A994(a2, &v30);
  sub_20820A994(a2, (_QWORD *)&v30 + 1);
  sub_20820A994(a2, &v31);
  sub_20820A994(a2, (_QWORD *)&v31 + 1);
  sub_20820A994(a2, &v32);
  sub_20820A994(a2, (_QWORD *)&v32 + 1);
  sub_20820A994(a2, &v33);
  sub_20820A994(a2, (_QWORD *)&v33 + 1);
  sub_20820A994(a2, &v34);
  sub_208209DC8(a2, (_DWORD *)&v34 + 2);
  sub_208209DC8(a2, (_DWORD *)&v34 + 3);
  v7 = sub_20808B20C((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C084230;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C083B70;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C083C28;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207E90E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E90E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E90E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E90EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E90EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E90ED0(uint64_t a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_208209DC8(a1, &v37);
  *a2 = v37;
  sub_208084F00((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = (_DWORD *)v9(3, v10, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v12)
        goto LABEL_28;
      sub_207E8EAE8((uint64_t)&v37, a1, v12);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v16)
        goto LABEL_28;
      sub_207E8EEE4((uint64_t)&v37, a1, v16);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = (_DWORD *)v17(3, v18, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v20)
        goto LABEL_28;
      sub_207E8F314((uint64_t)&v37, a1, v20);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_28:
        sub_207DCBF24();
      sub_207E8F710((uint64_t)&v37, a1, v24);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = (_DWORD *)v5(3, v6, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E8FB40((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E8FFEC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = (_DWORD *)v29(3, v30, 0, &unk_24C077A40, &unk_20823C240);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E90508((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24C077A90, &unk_20823C318);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_208209DC8(a1, &v37);
          sub_207E909B4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E91240(uint64_t a1, _QWORD *a2, int *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E91334((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E91530(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E91320(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E91334(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20808C968(&v14);
  sub_208082FE8((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C084548;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207E94A10(a2, &v17);
  sub_208084544(&v17, v12);
  sub_2080855CC((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C084548;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_207E88140((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_207E914B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E91530(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, int *, _QWORD, void *, void *);
  int *v11;
  uint64_t (*v12)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int *, _QWORD, void *, void *);
  int *v15;
  uint64_t (*v16)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, int *, _QWORD, void *, void *);
  int *v19;
  uint64_t (*v20)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, int *, _QWORD, void *, void *);
  int *v23;
  uint64_t (*v24)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, int *, _QWORD, void *, void *);
  int *v27;
  uint64_t (*v28)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, int *, _QWORD, void *, void *);
  int *v31;
  uint64_t (*v32)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, int *, _QWORD, void *, void *);
  int *v39;
  uint64_t (*v40)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v41;
  std::logic_error *exception;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *a2 = v8;
  sub_2080869E0((void (**)(int))a2);
  v9 = *a2;
  switch(v9)
  {
    case 0:
      v16 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v15 = a2 + 2;
      v14 = v16;
      if (!v16)
        goto LABEL_31;
      v17 = (_QWORD *)v14(3, v15, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v17)
        goto LABEL_31;
      sub_207E91888((uint64_t)&v43, a1, v17);
      break;
    case 1:
      v20 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v19 = a2 + 2;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = (_QWORD *)v18(3, v19, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v21)
        goto LABEL_31;
      sub_207E91E18((uint64_t)&v44, a1, v21);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v24 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v23 = a2 + 2;
      v22 = v24;
      if (!v24)
        goto LABEL_31;
      v25 = (_QWORD *)v22(3, v23, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v25)
        goto LABEL_31;
      sub_207E923DC((uint64_t)&v45, a1, v25);
      break;
    case 11:
      v28 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v27 = a2 + 2;
      v26 = v28;
      if (!v28 || (v29 = (_QWORD *)v26(3, v27, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_31:
        sub_207DCBF24();
      sub_207E9296C((uint64_t)&v46, a1, v29);
      break;
    default:
      switch(v9)
      {
        case 'd':
          v12 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v11 = a2 + 2;
          v10 = v12;
          if (!v12)
            goto LABEL_31;
          v13 = v10(3, v11, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v13)
            goto LABEL_31;
          sub_207E92F30((uint64_t)&v47, a1, v13);
          break;
        case 'e':
          v32 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v31 = a2 + 2;
          v30 = v32;
          if (!v32)
            goto LABEL_31;
          v33 = v30(3, v31, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v33)
            goto LABEL_31;
          sub_207E935B0((uint64_t)&v48, a1, v33);
          break;
        case 'n':
          v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v35 = a2 + 2;
          v34 = v36;
          if (!v36)
            goto LABEL_31;
          v37 = v34(3, v35, 0, &unk_24C077A40, &unk_20823C240);
          if (!v37)
            goto LABEL_31;
          sub_207E93CA0((uint64_t)&v49, a1, v37);
          break;
        case 'o':
          v40 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v39 = a2 + 2;
          v38 = v40;
          if (!v40)
            goto LABEL_31;
          v41 = v38(3, v39, 0, &unk_24C077A90, &unk_20823C318);
          if (!v41)
            goto LABEL_31;
          sub_207E94320((uint64_t)&v50, a1, v41);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E91874(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E91888(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E9197C((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E91BA8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E91968(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9197C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0842C8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083CD8;
  v36 = (int8x16_t *)(v5 + 24);
  sub_207E91CE0(a2, &v33);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084408;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C083D30;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C083CD8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_207E91B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E91B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E91BA8(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E91CA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E91CB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E91CCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E91CE0(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E91DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E91DF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E91E04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E91E18(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E91F0C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E9216C(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E91EF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E91F0C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084368;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083E98;
  v34 = v5 + 24;
  sub_207E922A4(a2, (uint64_t)&v31);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = off_24C0844A8;
  *((_QWORD *)v20 + 4) = &off_24C083EF0;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C083E98;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E92144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E92158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E9216C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E92268(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9227C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92290(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E922A4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E923A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E923B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E923C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E923DC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E924D0((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E926FC(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E924BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E924D0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084318;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083DE8;
  v36 = (int8x16_t *)(v5 + 24);
  sub_207E92834(a2, &v33);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084458;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C083D30;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C083DE8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_207E926D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E926E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E926FC(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E927F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9280C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92820(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E92834(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E92930(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92944(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92958(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9296C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E92A60((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E92CC0(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E92A4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92A60(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0843B8;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083FA8;
  v34 = v5 + 24;
  sub_207E92DF8(a2, (uint64_t)&v31);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = off_24C0844F8;
  *((_QWORD *)v20 + 4) = &off_24C083EF0;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C083FA8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E92C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E92CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E92CC0(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E92DBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92DD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92DE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E92DF8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_207E92EF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92F08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92F1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E92F30(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E93024((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E93278(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E93010(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93024(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _OWORD v24[3];
  char *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v24, 0, 44);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084000;
  v28 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v28;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v26 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083958;
  v25 = v5 + 24;
  sub_207E93414(a2, (uint64_t)v24);
  v7 = sub_20808B0E4((uint64_t)v24);
  v23 = *(_OWORD *)(v7 + 16);
  v27 = *(_OWORD *)(v7 + 32);
  LODWORD(v28) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C084140;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C0839B0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C083958;
  v16 = v27;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v28;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_207E93250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E93264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E93278(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_207E933C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E933D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E933EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E93414(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_207E93560(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93574(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93588(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9359C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E935B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E936A4((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E93968(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E93690(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E936A4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[5];
  char *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  v5 = (char *)operator new(0xF8uLL);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840A0;
  v37 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v36;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v32 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083B18;
  v31 = v5 + 24;
  sub_207E93B04(a2, (uint64_t)v30);
  v7 = sub_20808B20C((uint64_t)v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v33 = *(_OWORD *)(v7 + 48);
  v34 = v12;
  *(_QWORD *)&v35 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C0841E0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C083B70;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C083B18;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v34;
  *(_OWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v35;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207E93940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E93954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E93968(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_207E93AB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93AC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93ADC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93AF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E93B04(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_207E93C50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93C64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93C78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93C8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93CA0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E93D94((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E93FE8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E93D80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E93D94(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _OWORD v24[3];
  char *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v24, 0, 44);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084050;
  v28 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v28;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v26 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083A68;
  v25 = v5 + 24;
  sub_207E94184(a2, (uint64_t)v24);
  v7 = sub_20808B0E4((uint64_t)v24);
  v23 = *(_OWORD *)(v7 + 16);
  v27 = *(_OWORD *)(v7 + 32);
  LODWORD(v28) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C084190;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C0839B0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C083A68;
  v16 = v27;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v28;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_207E93FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E93FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E93FE8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_207E94134(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94148(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9415C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94170(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E94184(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_207E942D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E942E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E942F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9430C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94320(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207E94414((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207E946D8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207E94400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94414(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[5];
  char *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  v5 = (char *)operator new(0xF8uLL);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840F0;
  v37 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v36;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v32 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083C28;
  v31 = v5 + 24;
  sub_207E94874(a2, (uint64_t)v30);
  v7 = sub_20808B20C((uint64_t)v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v33 = *(_OWORD *)(v7 + 48);
  v34 = v12;
  *(_QWORD *)&v35 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C084230;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C083B70;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C083C28;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v34;
  *(_OWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v35;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207E946B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E946C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E946D8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_207E94824(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94838(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E9484C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E94874(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_207E949C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E949D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E949E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E949FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94A10(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, int *, _QWORD, void *, void *);
  int *v11;
  uint64_t (*v12)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int *, _QWORD, void *, void *);
  int *v15;
  uint64_t (*v16)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, int *, _QWORD, void *, void *);
  int *v19;
  uint64_t (*v20)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, int *, _QWORD, void *, void *);
  int *v23;
  uint64_t (*v24)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, int *, _QWORD, void *, void *);
  int *v27;
  uint64_t (*v28)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, int *, _QWORD, void *, void *);
  int *v31;
  uint64_t (*v32)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, int *, _QWORD, void *, void *);
  int *v39;
  uint64_t (*v40)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v41;
  std::logic_error *exception;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *a2 = v8;
  sub_208084F00((void (**)(int))a2);
  v9 = *a2;
  switch(v9)
  {
    case 0:
      v16 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v15 = a2 + 2;
      v14 = v16;
      if (!v16)
        goto LABEL_31;
      v17 = (_QWORD *)v14(3, v15, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v17)
        goto LABEL_31;
      sub_207E91888((uint64_t)&v43, a1, v17);
      break;
    case 1:
      v20 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v19 = a2 + 2;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = (_QWORD *)v18(3, v19, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v21)
        goto LABEL_31;
      sub_207E91E18((uint64_t)&v44, a1, v21);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v24 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v23 = a2 + 2;
      v22 = v24;
      if (!v24)
        goto LABEL_31;
      v25 = (_QWORD *)v22(3, v23, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v25)
        goto LABEL_31;
      sub_207E923DC((uint64_t)&v45, a1, v25);
      break;
    case 11:
      v28 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v27 = a2 + 2;
      v26 = v28;
      if (!v28 || (v29 = (_QWORD *)v26(3, v27, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_31:
        sub_207DCBF24();
      sub_207E9296C((uint64_t)&v46, a1, v29);
      break;
    default:
      switch(v9)
      {
        case 'd':
          v12 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v11 = a2 + 2;
          v10 = v12;
          if (!v12)
            goto LABEL_31;
          v13 = v10(3, v11, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v13)
            goto LABEL_31;
          sub_207E92F30((uint64_t)&v47, a1, v13);
          break;
        case 'e':
          v32 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v31 = a2 + 2;
          v30 = v32;
          if (!v32)
            goto LABEL_31;
          v33 = v30(3, v31, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v33)
            goto LABEL_31;
          sub_207E935B0((uint64_t)&v48, a1, v33);
          break;
        case 'n':
          v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v35 = a2 + 2;
          v34 = v36;
          if (!v36)
            goto LABEL_31;
          v37 = v34(3, v35, 0, &unk_24C077A40, &unk_20823C240);
          if (!v37)
            goto LABEL_31;
          sub_207E93CA0((uint64_t)&v49, a1, v37);
          break;
        case 'o':
          v40 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v39 = a2 + 2;
          v38 = v40;
          if (!v40)
            goto LABEL_31;
          v41 = v38(3, v39, 0, &unk_24C077A90, &unk_20823C318);
          if (!v41)
            goto LABEL_31;
          sub_207E94320((uint64_t)&v50, a1, v41);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E94D54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E94D68(int *a1, uint64_t a2, void (**a3)(int a1), unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_207E94E94();
      sub_208212838((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_207E95440(a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_207E95244((uint64_t)&v13, a2, (uint64_t)a3);
  else
    sub_207E95440(a2, a3);
}

__int128 *sub_207E94E94()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C810);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C810))
    return &xmmword_25452C7F8;
  v2 = sub_207E94F70();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C7F8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C808 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C7F8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C7F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C810);
  return &xmmword_25452C7F8;
}

void sub_207E94F58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C810);
  _Unwind_Resume(a1);
}

std::string *sub_207E94F70()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C830))
    return &stru_25452C818;
  sub_207E95060((uint64_t)__p);
  sub_207D50234((char *)__p, &stru_25452C818);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C818, &dword_207C77000);
  __cxa_guard_release(&qword_25452C830);
  return &stru_25452C818;
}

void sub_207E95020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C830);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C830);
  _Unwind_Resume(a1);
}

void sub_207E95060(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C850);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C850))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::CameraSample<>]", qword_25452C838);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C838, &dword_207C77000);
    __cxa_guard_release(&qword_25452C850);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C870);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C870))
  {
    v5 = sub_207D49434(qword_25452C838, "<", 0);
    sub_207D49330(qword_25452C838, 0, v5, qword_25452C858);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C858, &dword_207C77000);
    __cxa_guard_release(&qword_25452C870);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C890);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C890))
  {
    sub_208215C6C((uint64_t)qword_25452C858, (uint64_t)&xmmword_25452C878);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C878, &dword_207C77000);
    __cxa_guard_release(&qword_25452C890);
  }
  if (byte_25452C88F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C878, *((unint64_t *)&xmmword_25452C878 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C878;
    *(_QWORD *)(a1 + 16) = unk_25452C888;
  }
}

void sub_207E951FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C890);
  _Unwind_Resume(a1);
}

void sub_207E95214(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C870);
  _Unwind_Resume(a1);
}

void sub_207E9522C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C850);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E95244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  void (*v17)(int);
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_20808C968(&v14);
  sub_208082FE8((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24C084548;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207E9B148(a2, &v17);
  sub_208084544((int *)&v17, v12);
  sub_2080855CC((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24C084548;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_207E88140((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_207E953C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_207E95440(uint64_t a1, void (**a2)(int a1))
{
  int v4;
  void (*v5)(int);
  int *v6;
  void (*v7)(int);
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(int);
  int *v12;
  void (*v13)(int);
  uint64_t v14;
  void (*v15)(int);
  int *v16;
  void (*v17)(int);
  _QWORD *v18;
  void (*v19)(int);
  int *v20;
  void (*v21)(int);
  uint64_t v22;
  void (*v23)(int);
  int *v24;
  void (*v25)(int);
  _QWORD *v26;
  void (*v27)(int);
  int *v28;
  void (*v29)(int);
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(int);
  int *v34;
  void (*v35)(int);
  uint64_t v36;
  uint64_t v37;
  int v38;
  void (*v39)(int);
  int *v40;
  void (*v41)(int);
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45[3];
  unsigned int v46;

  *(_QWORD *)v45 = a2;
  sub_207E958CC((_BYTE *)a1, (_DWORD **)v45);
  sub_2080869E0(a2);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v13 = a2[1];
      v12 = (int *)(a2 + 1);
      v11 = v13;
      if (!v13)
        goto LABEL_36;
      v14 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v11)(3, v12, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v14)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E95A50(v45, a1, v14);
      break;
    case 1:
      v17 = a2[1];
      v16 = (int *)(a2 + 1);
      v15 = v17;
      if (!v17)
        goto LABEL_36;
      v18 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v15)(3, v16, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v18)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E96660(v45, a1, v18);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v21 = a2[1];
      v20 = (int *)(a2 + 1);
      v19 = v21;
      if (!v21)
        goto LABEL_36;
      v22 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v19)(3, v20, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v22)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E971AC(v45, a1, v22);
      break;
    case 11:
      v25 = a2[1];
      v24 = (int *)(a2 + 1);
      v23 = v25;
      if (!v25
        || (v26 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v23)(3, v24, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
      {
LABEL_36:
        sub_207DCBF24();
      }
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E97DBC(v45, a1, v26);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = a2[1];
          v6 = (int *)(a2 + 1);
          v5 = v7;
          if (!v7)
            goto LABEL_36;
          v8 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v5)(3, v6, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v8)
            goto LABEL_36;
          v9 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v10 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v9 + 104))(a1, &v46);
          if (v10 < 1)
            sub_207E98E80(a1, v8, v46);
          else
            sub_207E98908(v45, a1, v8, v46);
          break;
        case 'e':
          v29 = a2[1];
          v28 = (int *)(a2 + 1);
          v27 = v29;
          if (!v29)
            goto LABEL_36;
          v30 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v27)(3, v28, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v32 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v31 + 104))(a1, &v46);
          if (v32 < 1)
            sub_207E99858(a1, v30, v46);
          else
            sub_207E992E0(v45, a1, v30, v46);
          break;
        case 'n':
          v35 = a2[1];
          v34 = (int *)(a2 + 1);
          v33 = v35;
          if (!v35)
            goto LABEL_36;
          v36 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v33)(3, v34, 0, &unk_24C077A40, &unk_20823C240);
          if (!v36)
            goto LABEL_36;
          v37 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v38 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v37 + 104))(a1, &v46);
          if (v38 < 1)
            sub_207E9A2A0(a1, v36, v46);
          else
            sub_207E99D28(v45, a1, v36, v46);
          break;
        case 'o':
          v41 = a2[1];
          v40 = (int *)(a2 + 1);
          v39 = v41;
          if (!v41)
            goto LABEL_36;
          v42 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v39)(3, v40, 0, &unk_24C077A90, &unk_20823C318);
          if (!v42)
            goto LABEL_36;
          v43 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v44 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v43 + 104))(a1, &v46);
          if (v44 < 1)
            sub_207E9AC78(a1, v42, v46);
          else
            sub_207E9A700(v45, a1, v42, v46);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_207E958CC(_BYTE *a1, _DWORD **a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  int v14;
  char *v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = (char *)operator new(0x118uLL);
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_208215780((uint64_t)v5, v7);
    v15 = v6;
    v14 = 0;
    sub_208087184((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v6[*(_QWORD *)(v10 - 24)] = *(_QWORD *)(v9 + 64);
    *((_QWORD *)v6 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v6 + 2) = v11;
    if (v6[111] < 0)
      operator delete(*((void **)v6 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v6 + 128);
    operator delete(v6);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 104))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_207E95A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_2082155DC(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E95A50(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_207E963C4((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_207E95B78(a1, a2, a3, v6);
  }
}

void sub_207E95B78(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_207E95CF8();
      sub_208212838((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_207E963C4((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E95CF8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C8B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C8B0))
    return &xmmword_25452C898;
  v2 = sub_207E95DD4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C898, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C8A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C898 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C898, &dword_207C77000);
  __cxa_guard_release(&qword_25452C8B0);
  return &xmmword_25452C898;
}

void sub_207E95DBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C8B0);
  _Unwind_Resume(a1);
}

std::string *sub_207E95DD4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C8D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C8D0))
    return &stru_25452C8B8;
  sub_207E960E8((uint64_t)__p);
  sub_207E95EC4((char *)__p, &stru_25452C8B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C8B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C8D0);
  return &stru_25452C8B8;
}

void sub_207E95E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C8D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C8D0);
  _Unwind_Resume(a1);
}

void sub_207E95EC4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float32";
  v16 = 0x700000000000000;
  v4 = sub_207E962CC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_207D50540();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)v15, 3uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_207E96060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_207E960C0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x207E960B8);
  }
}

void sub_207E960E8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C910);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C910))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452C8F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C8F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C910);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C930);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C930))
  {
    v5 = sub_207D49434(qword_25452C8F8, "<", 0);
    sub_207D49330(qword_25452C8F8, 0, v5, qword_25452C918);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C918, &dword_207C77000);
    __cxa_guard_release(&qword_25452C930);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C950);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C950))
  {
    sub_208215C6C((uint64_t)qword_25452C918, (uint64_t)&xmmword_25452C938);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C938, &dword_207C77000);
    __cxa_guard_release(&qword_25452C950);
  }
  if (byte_25452C94F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C938, *((unint64_t *)&xmmword_25452C938 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C938;
    *(_QWORD *)(a1 + 16) = unk_25452C948;
  }
}

void sub_207E96284(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C950);
  _Unwind_Resume(a1);
}

void sub_207E9629C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C930);
  _Unwind_Resume(a1);
}

void sub_207E962B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C910);
  _Unwind_Resume(a1);
}

std::string *sub_207E962CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C8F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C8F0))
    return &stru_25452C8D8;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PixelOrigin::Center]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452C8D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C8D8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C8F0);
  return &stru_25452C8D8;
}

void sub_207E96384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C8F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C8F0);
  _Unwind_Resume(a1);
}

void sub_207E963C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0842C8;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083CD8;
  v36 = (int8x16_t *)(v5 + 24);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v33 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v34);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v34 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 104))(a2, &v35);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v35 + 4);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084408;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C083D30;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C083CD8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_207E96638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E96660(int *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_207E96EDC((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_207E96788(a1, a2, a3, v6);
  }
}

void sub_207E96788(int *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_207E96908();
      sub_208212838((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_207E96EDC((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E96908()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C970);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C970))
    return &xmmword_25452C958;
  v2 = sub_207E969E4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C958, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C968 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C958 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C958, &dword_207C77000);
  __cxa_guard_release(&qword_25452C970);
  return &xmmword_25452C958;
}

void sub_207E969CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C970);
  _Unwind_Resume(a1);
}

std::string *sub_207E969E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C990);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C990))
    return &stru_25452C978;
  sub_207E96CF8((uint64_t)__p);
  sub_207E96AD4((char *)__p, &stru_25452C978);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C978, &dword_207C77000);
  __cxa_guard_release(&qword_25452C990);
  return &stru_25452C978;
}

void sub_207E96A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C990);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C990);
  _Unwind_Resume(a1);
}

void sub_207E96AD4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float64";
  v16 = 0x700000000000000;
  v4 = sub_207E962CC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_207D50540();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)v15, 3uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_207E96C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_207E96CD0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x207E96CC8);
  }
}

void sub_207E96CF8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C9B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C9B0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452C998);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C998, &dword_207C77000);
    __cxa_guard_release(&qword_25452C9B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C9D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C9D0))
  {
    v5 = sub_207D49434(qword_25452C998, "<", 0);
    sub_207D49330(qword_25452C998, 0, v5, qword_25452C9B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C9B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C9D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C9F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C9F0))
  {
    sub_208215C6C((uint64_t)qword_25452C9B8, (uint64_t)&xmmword_25452C9D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C9D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C9F0);
  }
  if (byte_25452C9EF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C9D8, *((unint64_t *)&xmmword_25452C9D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C9D8;
    *(_QWORD *)(a1 + 16) = unk_25452C9E8;
  }
}

void sub_207E96E94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C9F0);
  _Unwind_Resume(a1);
}

void sub_207E96EAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C9D0);
  _Unwind_Resume(a1);
}

void sub_207E96EC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C9B0);
  _Unwind_Resume(a1);
}

void sub_207E96EDC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084368;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083E98;
  v34 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v33 + 4);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = off_24C0844A8;
  *((_QWORD *)v20 + 4) = &off_24C083EF0;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C083E98;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E97184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E97198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E971AC(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_207E97B20((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_207E972D4(a1, a2, a3, v6);
  }
}

void sub_207E972D4(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_207E97454();
      sub_208212838((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_207E97B20((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E97454()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CA10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CA10))
    return &xmmword_25452C9F8;
  v2 = sub_207E97530();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C9F8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452CA08 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C9F8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C9F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452CA10);
  return &xmmword_25452C9F8;
}

void sub_207E97518(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CA10);
  _Unwind_Resume(a1);
}

std::string *sub_207E97530()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CA30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CA30))
    return &stru_25452CA18;
  sub_207E97844((uint64_t)__p);
  sub_207E97620((char *)__p, &stru_25452CA18);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452CA18, &dword_207C77000);
  __cxa_guard_release(&qword_25452CA30);
  return &stru_25452CA18;
}

void sub_207E975E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452CA30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452CA30);
  _Unwind_Resume(a1);
}

void sub_207E97620(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float32";
  v16 = 0x700000000000000;
  v4 = sub_207E97A28();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_207D50540();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)v15, 3uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_207E977BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_207E9781C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x207E97814);
  }
}

void sub_207E97844(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452CA70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452CA70))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452CA58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CA58, &dword_207C77000);
    __cxa_guard_release(&qword_25452CA70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452CA90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452CA90))
  {
    v5 = sub_207D49434(qword_25452CA58, "<", 0);
    sub_207D49330(qword_25452CA58, 0, v5, qword_25452CA78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CA78, &dword_207C77000);
    __cxa_guard_release(&qword_25452CA90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452CAB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452CAB0))
  {
    sub_208215C6C((uint64_t)qword_25452CA78, (uint64_t)&xmmword_25452CA98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CA98, &dword_207C77000);
    __cxa_guard_release(&qword_25452CAB0);
  }
  if (byte_25452CAAF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452CA98, *((unint64_t *)&xmmword_25452CA98 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452CA98;
    *(_QWORD *)(a1 + 16) = unk_25452CAA8;
  }
}

void sub_207E979E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CAB0);
  _Unwind_Resume(a1);
}

void sub_207E979F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CA90);
  _Unwind_Resume(a1);
}

void sub_207E97A10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CA70);
  _Unwind_Resume(a1);
}

std::string *sub_207E97A28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CA50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CA50))
    return &stru_25452CA38;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PixelOrigin::Corner]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452CA38);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452CA38, &dword_207C77000);
  __cxa_guard_release(&qword_25452CA50);
  return &stru_25452CA38;
}

void sub_207E97AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452CA50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452CA50);
  _Unwind_Resume(a1);
}

void sub_207E97B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084318;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083D30;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083DE8;
  v36 = (int8x16_t *)(v5 + 24);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v33 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v34);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v34 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 104))(a2, &v35);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v35 + 4);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = off_24C084458;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C083D30;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C083DE8;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_207E97D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E97DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20806CAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E97DBC(int *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_207E98638((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_207E97EE4(a1, a2, a3, v6);
  }
}

void sub_207E97EE4(int *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_207E98064();
      sub_208212838((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_207E98638((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E98064()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CAD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CAD0))
    return &xmmword_25452CAB8;
  v2 = sub_207E98140();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452CAB8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452CAC8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452CAB8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CAB8, &dword_207C77000);
  __cxa_guard_release(&qword_25452CAD0);
  return &xmmword_25452CAB8;
}

void sub_207E98128(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CAD0);
  _Unwind_Resume(a1);
}

std::string *sub_207E98140()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CAF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CAF0))
    return &stru_25452CAD8;
  sub_207E98454((uint64_t)__p);
  sub_207E98230((char *)__p, &stru_25452CAD8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452CAD8, &dword_207C77000);
  __cxa_guard_release(&qword_25452CAF0);
  return &stru_25452CAD8;
}

void sub_207E981F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452CAF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452CAF0);
  _Unwind_Resume(a1);
}

void sub_207E98230(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float64";
  v16 = 0x700000000000000;
  v4 = sub_207E97A28();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_207D50540();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)v15, 3uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_207E983CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_207E9842C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x207E98424);
  }
}

void sub_207E98454(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452CB10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452CB10))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452CAF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CAF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452CB10);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452CB30);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452CB30))
  {
    v5 = sub_207D49434(qword_25452CAF8, "<", 0);
    sub_207D49330(qword_25452CAF8, 0, v5, qword_25452CB18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CB18, &dword_207C77000);
    __cxa_guard_release(&qword_25452CB30);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452CB50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452CB50))
  {
    sub_208215C6C((uint64_t)qword_25452CB18, (uint64_t)&xmmword_25452CB38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CB38, &dword_207C77000);
    __cxa_guard_release(&qword_25452CB50);
  }
  if (byte_25452CB4F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452CB38, *((unint64_t *)&xmmword_25452CB38 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452CB38;
    *(_QWORD *)(a1 + 16) = unk_25452CB48;
  }
}

void sub_207E985F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CB50);
  _Unwind_Resume(a1);
}

void sub_207E98608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CB30);
  _Unwind_Resume(a1);
}

void sub_207E98620(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CB10);
  _Unwind_Resume(a1);
}

void sub_207E98638(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0843B8;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)v5 + 4) = &off_24C083EF0;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083FA8;
  v34 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v33 + 4);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = off_24C0844F8;
  *((_QWORD *)v20 + 4) = &off_24C083EF0;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24C083FA8;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207E988E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E988F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E98908(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_207E98AD0();
      sub_208212838((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_207E98E80(a2, a3, v9);
}

__int128 *sub_207E98AD0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CB70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CB70))
    return &xmmword_25452CB58;
  v2 = sub_207E98BAC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452CB58, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452CB68 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452CB58 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CB58, &dword_207C77000);
  __cxa_guard_release(&qword_25452CB70);
  return &xmmword_25452CB58;
}

void sub_207E98B94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CB70);
  _Unwind_Resume(a1);
}

std::string *sub_207E98BAC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CB90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CB90))
    return &stru_25452CB78;
  sub_207E98C9C((uint64_t)__p);
  sub_207E95EC4((char *)__p, &stru_25452CB78);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452CB78, &dword_207C77000);
  __cxa_guard_release(&qword_25452CB90);
  return &stru_25452CB78;
}

void sub_207E98C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452CB90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452CB90);
  _Unwind_Resume(a1);
}

void sub_207E98C9C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452CBB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452CBB0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452CB98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CB98, &dword_207C77000);
    __cxa_guard_release(&qword_25452CBB0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452CBD0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452CBD0))
  {
    v5 = sub_207D49434(qword_25452CB98, "<", 0);
    sub_207D49330(qword_25452CB98, 0, v5, qword_25452CBB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CBB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452CBD0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452CBF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452CBF0))
  {
    sub_208215C6C((uint64_t)qword_25452CBB8, (uint64_t)&xmmword_25452CBD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CBD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452CBF0);
  }
  if (byte_25452CBEF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452CBD8, *((unint64_t *)&xmmword_25452CBD8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452CBD8;
    *(_QWORD *)(a1 + 16) = unk_25452CBE8;
  }
}

void sub_207E98E38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CBF0);
  _Unwind_Resume(a1);
}

void sub_207E98E50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CBD0);
  _Unwind_Resume(a1);
}

void sub_207E98E68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CBB0);
  _Unwind_Resume(a1);
}

void sub_207E98E80(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_207E98FAC((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 40);
  }
}

void sub_207E98FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084000;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083958;
  v26 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 128))(a2, &v24);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 4);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 128))(a2, (unint64_t)&v24 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, v25);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[6]);
  v7 = sub_20808B0E4((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C084140;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C0839B0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C083958;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_207E992B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E992CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E992E0(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_207E994A8();
      sub_208212838((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_207E99858(a2, a3, v9);
}

__int128 *sub_207E994A8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CC10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CC10))
    return &xmmword_25452CBF8;
  v2 = sub_207E99584();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452CBF8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452CC08 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452CBF8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CBF8, &dword_207C77000);
  __cxa_guard_release(&qword_25452CC10);
  return &xmmword_25452CBF8;
}

void sub_207E9956C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CC10);
  _Unwind_Resume(a1);
}

std::string *sub_207E99584()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CC30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CC30))
    return &stru_25452CC18;
  sub_207E99674((uint64_t)__p);
  sub_207E96AD4((char *)__p, &stru_25452CC18);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452CC18, &dword_207C77000);
  __cxa_guard_release(&qword_25452CC30);
  return &stru_25452CC18;
}

void sub_207E99634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452CC30);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452CC30);
  _Unwind_Resume(a1);
}

void sub_207E99674(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452CC50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452CC50))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452CC38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CC38, &dword_207C77000);
    __cxa_guard_release(&qword_25452CC50);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452CC70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452CC70))
  {
    v5 = sub_207D49434(qword_25452CC38, "<", 0);
    sub_207D49330(qword_25452CC38, 0, v5, qword_25452CC58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CC58, &dword_207C77000);
    __cxa_guard_release(&qword_25452CC70);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452CC90);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452CC90))
  {
    sub_208215C6C((uint64_t)qword_25452CC58, (uint64_t)&xmmword_25452CC78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CC78, &dword_207C77000);
    __cxa_guard_release(&qword_25452CC90);
  }
  if (byte_25452CC8F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452CC78, *((unint64_t *)&xmmword_25452CC78 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452CC78;
    *(_QWORD *)(a1 + 16) = unk_25452CC88;
  }
}

void sub_207E99810(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CC90);
  _Unwind_Resume(a1);
}

void sub_207E99828(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CC70);
  _Unwind_Resume(a1);
}

void sub_207E99840(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CC50);
  _Unwind_Resume(a1);
}

void sub_207E99858(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_207E99984((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 76);
  }
}

void sub_207E99984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840A0;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083B18;
  v35 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v30);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v30 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v33 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v34);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 8);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 12);
  v7 = sub_20808B20C((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C0841E0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C083B70;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C083B18;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207E99D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E99D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E99D28(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_207E99EF0();
      sub_208212838((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_207E9A2A0(a2, a3, v9);
}

__int128 *sub_207E99EF0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CCB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CCB0))
    return &xmmword_25452CC98;
  v2 = sub_207E99FCC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452CC98, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452CCA8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452CC98 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CC98, &dword_207C77000);
  __cxa_guard_release(&qword_25452CCB0);
  return &xmmword_25452CC98;
}

void sub_207E99FB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CCB0);
  _Unwind_Resume(a1);
}

std::string *sub_207E99FCC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CCD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CCD0))
    return &stru_25452CCB8;
  sub_207E9A0BC((uint64_t)__p);
  sub_207E97620((char *)__p, &stru_25452CCB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452CCB8, &dword_207C77000);
  __cxa_guard_release(&qword_25452CCD0);
  return &stru_25452CCB8;
}

void sub_207E9A07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452CCD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452CCD0);
  _Unwind_Resume(a1);
}

void sub_207E9A0BC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452CCF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452CCF0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452CCD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CCD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452CCF0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452CD10);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452CD10))
  {
    v5 = sub_207D49434(qword_25452CCD8, "<", 0);
    sub_207D49330(qword_25452CCD8, 0, v5, qword_25452CCF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CCF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452CD10);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452CD30);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452CD30))
  {
    sub_208215C6C((uint64_t)qword_25452CCF8, (uint64_t)&xmmword_25452CD18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CD18, &dword_207C77000);
    __cxa_guard_release(&qword_25452CD30);
  }
  if (byte_25452CD2F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452CD18, *((unint64_t *)&xmmword_25452CD18 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452CD18;
    *(_QWORD *)(a1 + 16) = unk_25452CD28;
  }
}

void sub_207E9A258(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CD30);
  _Unwind_Resume(a1);
}

void sub_207E9A270(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CD10);
  _Unwind_Resume(a1);
}

void sub_207E9A288(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CCF0);
  _Unwind_Resume(a1);
}

void sub_207E9A2A0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_207E9A3CC((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 40);
  }
}

void sub_207E9A3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084050;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083A68;
  v26 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 128))(a2, &v24);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 4);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 128))(a2, (unint64_t)&v24 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, v25);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[6]);
  v7 = sub_20808B0E4((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C084190;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24C0839B0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24C083A68;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_207E9A6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20808B1A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9A700(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_207E9A8C8();
      sub_208212838((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_207E9AC78(a2, a3, v9);
}

__int128 *sub_207E9A8C8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CD50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CD50))
    return &xmmword_25452CD38;
  v2 = sub_207E9A9A4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452CD38, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452CD48 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452CD38 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CD38, &dword_207C77000);
  __cxa_guard_release(&qword_25452CD50);
  return &xmmword_25452CD38;
}

void sub_207E9A98C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CD50);
  _Unwind_Resume(a1);
}

std::string *sub_207E9A9A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452CD70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452CD70))
    return &stru_25452CD58;
  sub_207E9AA94((uint64_t)__p);
  sub_207E98230((char *)__p, &stru_25452CD58);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452CD58, &dword_207C77000);
  __cxa_guard_release(&qword_25452CD70);
  return &stru_25452CD58;
}

void sub_207E9AA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452CD70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452CD70);
  _Unwind_Resume(a1);
}

void sub_207E9AA94(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452CD90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452CD90))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452CD78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CD78, &dword_207C77000);
    __cxa_guard_release(&qword_25452CD90);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452CDB0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452CDB0))
  {
    v5 = sub_207D49434(qword_25452CD78, "<", 0);
    sub_207D49330(qword_25452CD78, 0, v5, qword_25452CD98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452CD98, &dword_207C77000);
    __cxa_guard_release(&qword_25452CDB0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452CDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452CDD0))
  {
    sub_208215C6C((uint64_t)qword_25452CD98, (uint64_t)&xmmword_25452CDB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452CDB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452CDD0);
  }
  if (byte_25452CDCF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452CDB8, *((unint64_t *)&xmmword_25452CDB8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452CDB8;
    *(_QWORD *)(a1 + 16) = unk_25452CDC8;
  }
}

void sub_207E9AC30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CDD0);
  _Unwind_Resume(a1);
}

void sub_207E9AC48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CDB0);
  _Unwind_Resume(a1);
}

void sub_207E9AC60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452CD90);
  _Unwind_Resume(a1);
}

void sub_207E9AC78(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_207E9ADA4((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 76);
  }
}

void sub_207E9ADA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C0840F0;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C083B70;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C083C28;
  v35 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v30);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v30 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v33 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v34);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 8);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 12);
  v7 = sub_20808B20C((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = off_24C084230;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24C083B70;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24C083C28;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207E9B120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E9B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E9B148(uint64_t a1, void (**a2)(int a1))
{
  int v4;
  void (*v5)(int);
  int *v6;
  void (*v7)(int);
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(int);
  int *v12;
  void (*v13)(int);
  uint64_t v14;
  void (*v15)(int);
  int *v16;
  void (*v17)(int);
  _QWORD *v18;
  void (*v19)(int);
  int *v20;
  void (*v21)(int);
  uint64_t v22;
  void (*v23)(int);
  int *v24;
  void (*v25)(int);
  _QWORD *v26;
  void (*v27)(int);
  int *v28;
  void (*v29)(int);
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(int);
  int *v34;
  void (*v35)(int);
  uint64_t v36;
  uint64_t v37;
  int v38;
  void (*v39)(int);
  int *v40;
  void (*v41)(int);
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45[3];
  unsigned int v46;

  *(_QWORD *)v45 = a2;
  sub_207E958CC((_BYTE *)a1, (_DWORD **)v45);
  sub_208084F00(a2);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v13 = a2[1];
      v12 = (int *)(a2 + 1);
      v11 = v13;
      if (!v13)
        goto LABEL_36;
      v14 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v11)(3, v12, 0, &unk_24C077860, &unk_20823BD3C);
      if (!v14)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E95A50(v45, a1, v14);
      break;
    case 1:
      v17 = a2[1];
      v16 = (int *)(a2 + 1);
      v15 = v17;
      if (!v17)
        goto LABEL_36;
      v18 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v15)(3, v16, 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v18)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E96660(v45, a1, v18);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v21 = a2[1];
      v20 = (int *)(a2 + 1);
      v19 = v21;
      if (!v21)
        goto LABEL_36;
      v22 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v19)(3, v20, 0, &unk_24C077900, &unk_20823BEE4);
      if (!v22)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E971AC(v45, a1, v22);
      break;
    case 11:
      v25 = a2[1];
      v24 = (int *)(a2 + 1);
      v23 = v25;
      if (!v25
        || (v26 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v23)(3, v24, 0, &unk_24C077950, &unk_20823BFB8)) == 0)
      {
LABEL_36:
        sub_207DCBF24();
      }
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_207E97DBC(v45, a1, v26);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = a2[1];
          v6 = (int *)(a2 + 1);
          v5 = v7;
          if (!v7)
            goto LABEL_36;
          v8 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v5)(3, v6, 0, &unk_24C0779A0, &unk_20823C090);
          if (!v8)
            goto LABEL_36;
          v9 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v10 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v9 + 104))(a1, &v46);
          if (v10 < 1)
            sub_207E98E80(a1, v8, v46);
          else
            sub_207E98908(v45, a1, v8, v46);
          break;
        case 'e':
          v29 = a2[1];
          v28 = (int *)(a2 + 1);
          v27 = v29;
          if (!v29)
            goto LABEL_36;
          v30 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v27)(3, v28, 0, &unk_24C0779F0, &unk_20823C168);
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v32 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v31 + 104))(a1, &v46);
          if (v32 < 1)
            sub_207E99858(a1, v30, v46);
          else
            sub_207E992E0(v45, a1, v30, v46);
          break;
        case 'n':
          v35 = a2[1];
          v34 = (int *)(a2 + 1);
          v33 = v35;
          if (!v35)
            goto LABEL_36;
          v36 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v33)(3, v34, 0, &unk_24C077A40, &unk_20823C240);
          if (!v36)
            goto LABEL_36;
          v37 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v38 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v37 + 104))(a1, &v46);
          if (v38 < 1)
            sub_207E9A2A0(a1, v36, v46);
          else
            sub_207E99D28(v45, a1, v36, v46);
          break;
        case 'o':
          v41 = a2[1];
          v40 = (int *)(a2 + 1);
          v39 = v41;
          if (!v41)
            goto LABEL_36;
          v42 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v39)(3, v40, 0, &unk_24C077A90, &unk_20823C318);
          if (!v42)
            goto LABEL_36;
          v43 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v44 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v43 + 104))(a1, &v46);
          if (v44 < 1)
            sub_207E9AC78(a1, v42, v46);
          else
            sub_207E9A700(v45, a1, v42, v46);
          break;
        default:
          return;
      }
      break;
  }
}

_QWORD *sub_207E9B5D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  _OWORD *v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new(0xF0uLL);
  v5 = v4;
  *(_QWORD *)v4 = off_24C076280;
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4[2] = *(_OWORD *)(a1 + 32);
  *((_BYTE *)v4 + 48) = 0;
  *((_BYTE *)v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    v4[3] = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v4 + 8) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *((_BYTE *)v4 + 72) = 1;
  }
  *((_BYTE *)v4 + 80) = 0;
  *((_BYTE *)v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v4[5] = *(_OWORD *)(a1 + 80);
    *((_QWORD *)v4 + 12) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *((_BYTE *)v4 + 104) = 1;
  }
  *((_BYTE *)v4 + 144) = 0;
  v4[7] = *(_OWORD *)(a1 + 112);
  *((_QWORD *)v4 + 16) = *(_QWORD *)(a1 + 128);
  *((_BYTE *)v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    v4[9] = *(_OWORD *)(a1 + 144);
    *((_QWORD *)v4 + 20) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    v4[11] = v7;
    *((_BYTE *)v4 + 192) = 1;
  }
  *((_BYTE *)v4 + 208) = 0;
  *((_BYTE *)v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v4[13] = *(_OWORD *)(a1 + 208);
    *((_QWORD *)v4 + 28) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *((_BYTE *)v4 + 232) = 1;
  }
  *(_QWORD *)v4 = off_24C076218;
  *a2 = &off_24C078D18;
  a2[1] = v4;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_207E9B758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_207E015E0(v2);
  sub_207E9B774((_QWORD **)va);
  _Unwind_Resume(a1);
}

_QWORD **sub_207E9B774(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *v2 = off_24C076280;
    sub_207D49CF4((uint64_t)(v2 + 4));
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_207E9B7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  int v16;

  sub_2081F1E44(a2);
  v14 = (std::__shared_weak_count_vtbl *)"version";
  v15 = 7;
  v16 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2081F3DDC(a2, &v16);
  v6 = v16;
  v7 = *(_QWORD *)(a3 + 8);
  v14 = *(std::__shared_weak_count_vtbl **)a3;
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_207E9B944(a2, &v14, v6);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E9B900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207E9B944(uint64_t a1, std::__shared_weak_count_vtbl **a2, unsigned int a3)
{
  int v4;
  std::__shared_weak_count_vtbl *v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  std::__shared_weak_count_vtbl *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count_vtbl ***v20;
  std::__shared_weak_count_vtbl **v21;

  if (a3 > 2)
  {
    v11 = *a2;
    v12 = (unint64_t *)&(*a2)[2].~__shared_weak_count_0;
    v19 = *a2;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v21 = &v19;
      v20 = &v21;
      std::__call_once(v12, &v20, (void (__cdecl *)(void *))sub_20806D878);
    }
    sub_208093A80(&v17, (uint64_t)&v11[1].~__shared_weak_count_0);
    sub_207E9BAEC(a1, (uint64_t)&v17);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v4 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "dictionary";
      *(_QWORD *)(a1 + 80) = 10;
      if (!v4)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v5 = *a2;
    v6 = (unint64_t *)&(*a2)[2];
    v17 = *a2;
    v18 = (std::__shared_weak_count *)&v19;
    v19 = 0;
    v7 = atomic_load(v6);
    if (v7 != -1)
    {
      v21 = &v17;
      v20 = &v21;
      std::__call_once(v6, &v20, (void (__cdecl *)(void *))sub_20806D5D4);
    }
    sub_2080968B4((uint64_t)&v17, (unsigned __int8 *)v5->__on_zero_shared);
    v8 = (unsigned __int8 *)sub_2081F1A98(a1);
    v9 = *v8;
    *v8 = v17;
    LOBYTE(v17) = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v18;
    v18 = (std::__shared_weak_count *)v10;
    sub_20806DC2C((void ***)&v18, v9);
  }
}

void sub_207E9BAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9BAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;

  sub_20806DC2C((void ***)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

void sub_207E9BAEC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  void **v7;
  void ***v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unsigned __int8 v15;
  void **v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E01D24(&v12, a2);
  sub_20809288C((uint64_t)&v12, &v14);
  v4 = v14;
  v15 = *(_BYTE *)v14;
  v16 = *(void ***)(v14 + 8);
  *(_BYTE *)v14 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned __int8 *)sub_2081F1A98(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = (void **)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_20806DC2C(&v16, v6);
  v8 = (void ***)v14;
  v14 = 0;
  if (v8)
  {
    sub_20806DC2C(v8 + 1, *(unsigned __int8 *)v8);
    operator delete(v8);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_207E9BC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  sub_2081E5300(&a12);
  sub_207C99D78((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_207E9BC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9BC4C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20806D878);
  }
  sub_208093A80(&v14, v4 + 48);
  sub_207E9BD90(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E9BD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9BD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9BD90(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t *i;
  char *v27;
  uint64_t *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  char v34;

  v33 = 0u;
  memset(v32, 0, sizeof(v32));
  sub_208093BC8((uint64_t)&v28, a2);
  v3 = v28;
  *(_QWORD *)&v32[0] = v28;
  *(_OWORD *)((char *)v32 + 8) = v29;
  v4 = v30;
  *((_QWORD *)&v32[1] + 1) = v30;
  v27 = (char *)v31;
  v33 = v31;
  v5 = (uint64_t *)v29;
  v6 = ((_QWORD)v29 - (_QWORD)v28) / 24;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v28 = (uint64_t *)(v7 + 16);
    sub_20821166C(&v28, v6);
  }
  else
  {
    sub_208211974();
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    v28 = (uint64_t *)(v8 + 16);
    if (v5 != v3)
    {
      v9 = 24 * v6;
      v10 = (const void **)v3;
      do
      {
        sub_208211D5C((uint64_t)&v34, &v28, v10);
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else if (v5 != v3)
  {
    v11 = v8 + 8;
    v12 = 24 * v6;
    v13 = (uint64_t)v3;
    do
    {
      sub_208212184((uint64_t)&v28, v11, v13);
      v13 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  v14 = v27;
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v28 = (uint64_t *)(v15 + 16);
    sub_20821166C(&v28, (v27 - v4) / 24);
  }
  else
  {
    sub_208211974();
  }
  if (v27 == v4)
  {
    if (!v4)
      goto LABEL_37;
    goto LABEL_36;
  }
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v28 = (uint64_t *)(v17 + 16);
      sub_208210C8C(&v28, 2u);
    }
    else
    {
      sub_208210F00((uint64_t)&v28, v17 + 8);
    }
    sub_20820C2C0(*(_QWORD *)(a1 + 24));
    sub_207E9C2A0(a1, (unsigned __int16 *)&v4[v16]);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 88) - 8);
    sub_20820C0E8((uint64_t *)(v18 + 48), *(_QWORD *)(v18 + 16) - v19 - 9);
    v20 = *(_QWORD *)(v18 + 48);
    if (v20)
      memmove((void *)(*(_QWORD *)(v18 + 24) + v19), *(const void **)(v18 + 56), v20);
    *(_QWORD *)(v18 + 48) = 0;
    v21 = *(_QWORD *)(v18 + 80);
    v22 = *(_QWORD *)(v18 + 88) - 8;
    *(_QWORD *)(v18 + 88) = v22;
    if (v21 == v22)
    {
      std::ostream::write();
      if (*(_BYTE *)(v18 + 40))
      {
        free(*(void **)(v18 + 24));
        *(_BYTE *)(v18 + 40) = 0;
      }
    }
    v16 += 24;
  }
  while (24 * ((v27 - v4) / 24) != v16);
  if (v4)
  {
    do
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v14 -= 24;
    }
    while (v14 != v4);
    v4 = (char *)*((_QWORD *)&v32[1] + 1);
    v3 = *(uint64_t **)&v32[0];
LABEL_36:
    operator delete(v4);
  }
LABEL_37:
  if (v3)
  {
    for (i = (uint64_t *)*((_QWORD *)&v32[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete((void *)*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_207E9C0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9C0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9C0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9C0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void **sub_207E9C128(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  void **v9;
  void *v10;

  v2 = (char *)a1[3];
  if (v2)
  {
    v3 = (char *)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (void **)*a1;
  if (*a1)
  {
    v9 = (void **)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void **sub_207E9C208(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_207E9C2A0(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  CFTypeID TypeID;
  const void *v9;
  CFTypeID v10;
  std::__shared_weak_count_vtbl *v11;
  const void *v12;
  CFTypeID v13;
  _BOOL4 v14;
  uint64_t v15;
  std::string::value_type v16;
  const void *v17;
  CFTypeID v18;
  const __CFArray *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  CFIndex Count;
  CFIndex i;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::string::size_type size;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  size_t v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::string::size_type v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string::size_type v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  __int128 theArray;
  uint64_t *v94;
  __int128 v95;
  std::string v96;
  std::string::size_type v97;
  std::string::size_type v98;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    if (v4 > 0x7F)
    {
      if (v4 > 0xFF)
      {
        v96.__r_.__value_.__s.__data_[0] = -51;
        *(_WORD *)((char *)&v96.__r_.__value_.__l.__data_ + 1) = __rev16(v4);
        std::ostream::write();
        v6 = *a2;
        if (v6 <= 4)
          goto LABEL_3;
      }
      else
      {
        v96.__r_.__value_.__s.__data_[0] = -52;
        v96.__r_.__value_.__s.__data_[1] = v4;
        std::ostream::write();
        v6 = *a2;
        if (v6 <= 4)
          goto LABEL_3;
      }
    }
    else
    {
      v96.__r_.__value_.__s.__data_[0] = v4;
      std::ostream::write();
      v6 = *a2;
      if (v6 <= 4)
        goto LABEL_3;
    }
LABEL_9:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
    abort();
  }
  v96.__r_.__value_.__r.__words[0] = v5 + 16;
  sub_2082105A8((uint64_t **)&v96, v4);
  v6 = *a2;
LABEL_3:
  switch(v6)
  {
    case 0u:
      v7 = (const void *)*((_QWORD *)a2 + 1);
      if (v7 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v7) == TypeID))
      {
        sub_207E9D1F4(&v91, *((std::__shared_weak_count_vtbl **)a2 + 1), 1);
      }
      else
      {
        v91 = 0;
        v92 = 0;
      }
      sub_207E9D308((std::__shared_weak_count_vtbl **)&theArray, (uint64_t)&v91);
      sub_207D01AA0((CFNumberRef *)&theArray);
      v96.__r_.__value_.__s.__data_[0] = (char)v94;
      v96.__r_.__value_.__s.__data_[8] = (char)v94;
      v97 = 0;
      v98 = 0;
      v96.__r_.__value_.__r.__words[2] = 0;
      v38 = (void *)v95;
      v39 = *((_QWORD *)&v95 + 1) - v95;
      if (*((_QWORD *)&v95 + 1) != (_QWORD)v95)
      {
        if ((v39 & 0x8000000000000000) != 0)
          sub_207CA420C();
        v96.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v95 + 1) - v95);
        v97 = v96.__r_.__value_.__r.__words[2];
        v40 = v96.__r_.__value_.__r.__words[2] + v39;
        v98 = v96.__r_.__value_.__r.__words[2] + v39;
        memcpy((void *)v96.__r_.__value_.__r.__words[2], v38, v39);
        v97 = v40;
      }
      if (v38)
      {
        *((_QWORD *)&v95 + 1) = v38;
        operator delete(v38);
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = v92;
      if (v92)
      {
        p_shared_owners = (unint64_t *)&v92->__shared_owners_;
        do
          v46 = __ldaxr(p_shared_owners);
        while (__stlxr(v46 - 1, p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v47 + 40))
      {
        v94 = (uint64_t *)(v47 + 16);
        sub_208210C8C(&v94, 2u);
      }
      else
      {
        sub_208210F00((uint64_t)&v94, v47 + 8);
      }
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      v67 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v67 + 40))
      {
        v94 = (uint64_t *)(v67 + 16);
        sub_2082100A4(&v94, v96.__r_.__value_.__s.__data_[0]);
      }
      else
      {
        if (v96.__r_.__value_.__s.__data_[0] < 0)
        {
          LOBYTE(v94) = -52;
          BYTE1(v94) = v96.__r_.__value_.__s.__data_[0];
        }
        else
        {
          LOBYTE(v94) = v96.__r_.__value_.__s.__data_[0];
        }
        std::ostream::write();
      }
      sub_207E39BF8(v96.__r_.__value_.__s.__data_[0], (uint64_t)&v96, a1);
      v82 = *(_QWORD *)(a1 + 24);
      v83 = *(_QWORD *)(*(_QWORD *)(v82 + 88) - 8);
      sub_20820C0E8((uint64_t *)(v82 + 48), *(_QWORD *)(v82 + 16) - v83 - 9);
      v84 = *(_QWORD *)(v82 + 48);
      if (v84)
        memmove((void *)(*(_QWORD *)(v82 + 24) + v83), *(const void **)(v82 + 56), v84);
      *(_QWORD *)(v82 + 48) = 0;
      v85 = *(_QWORD *)(v82 + 80);
      v86 = *(_QWORD *)(v82 + 88) - 8;
      *(_QWORD *)(v82 + 88) = v86;
      if (v85 == v86)
      {
        std::ostream::write();
        if (*(_BYTE *)(v82 + 40))
        {
          free(*(void **)(v82 + 24));
          *(_BYTE *)(v82 + 40) = 0;
        }
      }
      v48 = (void *)v96.__r_.__value_.__r.__words[2];
      if (!v96.__r_.__value_.__r.__words[2])
        return;
      v97 = v96.__r_.__value_.__r.__words[2];
      goto LABEL_153;
    case 1u:
      sub_207CF9014(*((_QWORD *)a2 + 1), &v96);
      v20 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v20 + 40))
      {
        v94 = (uint64_t *)(v20 + 16);
        sub_208211D5C((uint64_t)&theArray, &v94, (const void **)&v96.__r_.__value_.__l.__data_);
      }
      else
      {
        sub_208212184((uint64_t)&v94, v20 + 8, (uint64_t)&v96);
      }
      if (!(_BYTE)v97 || (SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v48 = (void *)v96.__r_.__value_.__r.__words[0];
LABEL_153:
      operator delete(v48);
      return;
    case 2u:
      v12 = (const void *)*((_QWORD *)a2 + 1);
      if (!v12 || (v13 = CFBooleanGetTypeID(), CFGetTypeID(v12) != v13))
      {
        v14 = 0;
        LOWORD(v94) = 0;
        v15 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v15 + 40))
          goto LABEL_16;
LABEL_36:
        v96.__r_.__value_.__r.__words[0] = v15 + 16;
        sub_208211C24((uint64_t)&theArray, (uint64_t **)&v96, &v94);
        return;
      }
      v14 = CFBooleanGetValue((CFBooleanRef)v12) != 0;
      LOWORD(v94) = v14 | 0x100;
      v15 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v15 + 40))
        goto LABEL_36;
LABEL_16:
      if (v14)
        v16 = -61;
      else
        v16 = -62;
      v96.__r_.__value_.__s.__data_[0] = v16;
      std::ostream::write();
      return;
    case 3u:
      v17 = (const void *)*((_QWORD *)a2 + 1);
      if (v17 && (v18 = CFArrayGetTypeID(), CFGetTypeID(v17) == v18))
      {
        sub_207CB7A4C((std::__shared_weak_count_vtbl **)&theArray, *((std::__shared_weak_count_vtbl **)a2 + 1), 1);
        v19 = (const __CFArray *)theArray;
      }
      else
      {
        v19 = 0;
        theArray = 0uLL;
      }
      memset(&v96, 0, sizeof(v96));
      Count = CFArrayGetCount(v19);
      sub_207E9CE58(&v96.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_207CF871C(&v89, ValueAtIndex, 1);
          sub_208092FD8((uint64_t)&v94, (uint64_t)&v89);
          size = v96.__r_.__value_.__l.__size_;
          if (v96.__r_.__value_.__l.__size_ >= v96.__r_.__value_.__r.__words[2])
          {
            v30 = sub_207E9D460(&v96.__r_.__value_.__l.__data_, (uint64_t)&v94);
            v31 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
            v96.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
            if (*((_QWORD *)&v95 + 1))
            {
              v32 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
          }
          else
          {
            *(_WORD *)v96.__r_.__value_.__l.__size_ = (_WORD)v94;
            *(_OWORD *)(size + 8) = v95;
            v95 = 0uLL;
            v96.__r_.__value_.__l.__size_ = size + 24;
          }
          v34 = v90;
          if (v90)
          {
            v35 = (unint64_t *)&v90->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
      }
      v37 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        v94 = (uint64_t *)(v37 + 16);
        sub_20821166C(&v94, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3));
      }
      else
      {
        sub_208211974();
      }
      v68 = v96.__r_.__value_.__r.__words[0];
      if (v96.__r_.__value_.__l.__size_ != v96.__r_.__value_.__r.__words[0])
      {
        v69 = 24 * ((int64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          v70 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v70 + 40))
          {
            v94 = (uint64_t *)(v70 + 16);
            sub_208210C8C(&v94, 2u);
          }
          else
          {
            sub_208210F00((uint64_t)&v94, v70 + 8);
          }
          sub_20820C2C0(*(_QWORD *)(a1 + 24));
          sub_207E9C2A0(a1, v68, 2);
          v71 = *(_QWORD *)(a1 + 24);
          v72 = *(_QWORD *)(*(_QWORD *)(v71 + 88) - 8);
          sub_20820C0E8((uint64_t *)(v71 + 48), *(_QWORD *)(v71 + 16) - v72 - 9);
          v73 = *(_QWORD *)(v71 + 48);
          if (v73)
            memmove((void *)(*(_QWORD *)(v71 + 24) + v72), *(const void **)(v71 + 56), v73);
          *(_QWORD *)(v71 + 48) = 0;
          v74 = *(_QWORD *)(v71 + 80);
          v75 = *(_QWORD *)(v71 + 88) - 8;
          *(_QWORD *)(v71 + 88) = v75;
          if (v74 == v75)
          {
            std::ostream::write();
            if (*(_BYTE *)(v71 + 40))
            {
              free(*(void **)(v71 + 24));
              *(_BYTE *)(v71 + 40) = 0;
            }
          }
          v68 += 24;
          v69 -= 24;
        }
        while (v69);
        v68 = v96.__r_.__value_.__r.__words[0];
      }
      if (v68)
      {
        v76 = v96.__r_.__value_.__l.__size_;
        v77 = (void *)v68;
        if (v96.__r_.__value_.__l.__size_ != v68)
        {
          do
          {
            v78 = *(std::__shared_weak_count **)(v76 - 8);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v76 -= 24;
          }
          while (v76 != v68);
          v77 = (void *)v96.__r_.__value_.__r.__words[0];
        }
        v96.__r_.__value_.__l.__size_ = v68;
        operator delete(v77);
      }
      v64 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v81 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v66 = __ldaxr(v81);
      while (__stlxr(v66 - 1, v81));
      goto LABEL_140;
    case 4u:
      v9 = (const void *)*((_QWORD *)a2 + 1);
      if (v9 && (v10 = CFDictionaryGetTypeID(), CFGetTypeID(v9) == v10))
      {
        sub_207CF9D84(&v87, *((std::__shared_weak_count_vtbl **)a2 + 1), 1);
        v11 = v87;
      }
      else
      {
        v11 = 0;
        v87 = 0;
        v88 = 0;
      }
      sub_207CF9D84((std::__shared_weak_count_vtbl **)&v96, v11, 1);
      v21 = *(_OWORD *)&v96.__r_.__value_.__l.__data_;
      if (v96.__r_.__value_.__l.__size_)
      {
        v22 = (unint64_t *)(v96.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        theArray = v21;
        do
          v24 = __ldxr(v22);
        while (__stxr(v24 + 1, v22));
        do
          v25 = __ldaxr(v22);
        while (__stlxr(v25 - 1, v22));
        if (!v25)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
        }
      }
      else
      {
        theArray = v96.__r_.__value_.__r.__words[0];
      }
      v49 = (std::__shared_weak_count *)v96.__r_.__value_.__l.__size_;
      if (v96.__r_.__value_.__l.__size_)
      {
        v50 = (unint64_t *)(v96.__r_.__value_.__l.__size_ + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      sub_208093A80((std::__shared_weak_count_vtbl **)&v94, (uint64_t)&theArray);
      v52 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v53 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = v88;
      if (v88)
      {
        v56 = (unint64_t *)&v88->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
      {
        v96.__r_.__value_.__r.__words[0] = v58 + 16;
        sub_208210C8C((uint64_t **)&v96, 2u);
      }
      else
      {
        sub_208210F00((uint64_t)&v96, v58 + 8);
      }
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      sub_207E9BD90(a1, &v94, 2);
      v59 = *(_QWORD *)(a1 + 24);
      v60 = *(_QWORD *)(*(_QWORD *)(v59 + 88) - 8);
      sub_20820C0E8((uint64_t *)(v59 + 48), *(_QWORD *)(v59 + 16) - v60 - 9);
      v61 = *(_QWORD *)(v59 + 48);
      if (v61)
        memmove((void *)(*(_QWORD *)(v59 + 24) + v60), *(const void **)(v59 + 56), v61);
      *(_QWORD *)(v59 + 48) = 0;
      v62 = *(_QWORD *)(v59 + 80);
      v63 = *(_QWORD *)(v59 + 88) - 8;
      *(_QWORD *)(v59 + 88) = v63;
      if (v62 == v63)
      {
        std::ostream::write();
        if (*(_BYTE *)(v59 + 40))
        {
          free(*(void **)(v59 + 24));
          *(_BYTE *)(v59 + 40) = 0;
        }
      }
      v64 = (std::__shared_weak_count *)v95;
      if (!(_QWORD)v95)
        return;
      v65 = (unint64_t *)(v95 + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
LABEL_140:
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      return;
    default:
      goto LABEL_9;
  }
}

void sub_207E9CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9CD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9CD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (*(_BYTE *)(v20 - 64))
  {
    if (*(char *)(v20 - 65) < 0)
    {
      operator delete(*(void **)(v20 - 88));
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207E9CE58(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_WORD *)v4 - 12);
        v4 -= 24;
        *((_WORD *)v9 - 12) = v10;
        v9 -= 24;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v4 + 8);
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 24;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_207E9CF78(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)(&off_24C084688)[2 * *a3], (uint64_t)(&off_24C084688)[2 * *a3 + 1]);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E9D1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E9D1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207E9D1F4(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0726B0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207E9D2B4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207E9D2C8()
{
  __break(1u);
}

void sub_207E9D2F4()
{
  __cxa_end_catch();
  JUMPOUT(0x207E9D2FCLL);
}

std::__shared_weak_count_vtbl **sub_207E9D308(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0726B0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207E9D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E9D42C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207E9D444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_207E9D460(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA3AB8();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_WORD *)v9 = *(_WORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *((_WORD *)v13 - 12);
      v13 -= 24;
      *((_WORD *)v9 - 12) = v14;
      v9 -= 24;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 24;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_207E9D5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  int v16;

  sub_2081F17E4(a2);
  v14 = (std::__shared_weak_count_vtbl *)"version";
  v15 = 7;
  v16 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2081F20F8(a2, &v16);
  v6 = v16;
  v7 = *(_QWORD *)(a3 + 8);
  v14 = *(std::__shared_weak_count_vtbl **)a3;
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_207E9D708(a2, &v14, v6);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E9D6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207E9D708(uint64_t a1, std::__shared_weak_count_vtbl **a2, unsigned int a3)
{
  int v4;
  unsigned __int8 **v5;
  unint64_t *p_on_zero_shared_weak;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count_vtbl ***v20;
  std::__shared_weak_count_vtbl **v21;

  if (a3 > 2)
  {
    v11 = *a2;
    v12 = (unint64_t *)&(*a2)[2].~__shared_weak_count_0;
    v19 = *a2;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v21 = &v19;
      v20 = &v21;
      std::__call_once(v12, &v20, (void (__cdecl *)(void *))sub_20806D878);
    }
    sub_208093A80(&v17, (uint64_t)&v11[1].~__shared_weak_count_0);
    sub_207E9D8B0(a1, (uint64_t)&v17);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v4 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "dictionary";
      *(_QWORD *)(a1 + 80) = 10;
      if (!v4)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v5 = (unsigned __int8 **)*a2;
    p_on_zero_shared_weak = (unint64_t *)&(*a2)[1].__on_zero_shared_weak;
    v17 = *a2;
    v18 = (std::__shared_weak_count *)&v19;
    v19 = 0;
    v7 = atomic_load(p_on_zero_shared_weak);
    if (v7 != -1)
    {
      v21 = &v17;
      v20 = &v21;
      std::__call_once(p_on_zero_shared_weak, &v20, (void (__cdecl *)(void *))sub_20806D330);
    }
    sub_207D1D968((uint64_t)&v17, *v5);
    v8 = (unsigned __int8 *)sub_2081F133C(a1);
    v9 = *v8;
    *v8 = v17;
    LOBYTE(v17) = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v18;
    v18 = (std::__shared_weak_count *)v10;
    sub_207D20660((uint64_t *)&v18, v9);
  }
}

void sub_207E9D884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9D898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;

  sub_207D20660((uint64_t *)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

void sub_207E9D8B0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unsigned __int8 v15;
  uint64_t v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E01D24(&v12, a2);
  sub_20809252C((uint64_t)&v12, &v14);
  v4 = v14;
  v15 = *(_BYTE *)v14;
  v16 = v14[1];
  *(_BYTE *)v14 = 0;
  v4[1] = 0;
  v5 = (unsigned __int8 *)sub_2081F133C(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = *((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_207D20660(&v16, v6);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    sub_207D20660(v8 + 1, *(unsigned __int8 *)v8);
    operator delete(v8);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_207E9D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t *a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_207D20660(v13, a13);
  sub_2081E52C0(&a12);
  sub_207C99D78((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_207E9D9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9DA10(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20806D878);
  }
  sub_208093A80(&v14, v4 + 48);
  sub_207E9DB54(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E9DB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9DB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9DB54(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  char *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void **i;
  void **v24;
  char *v25;
  void **v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;

  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  sub_208093BC8((uint64_t)&v26, a2);
  v3 = v26;
  *(_QWORD *)&v30[0] = v26;
  v4 = (void **)v27;
  *(_OWORD *)((char *)v30 + 8) = v27;
  v5 = v28;
  *((_QWORD *)&v30[1] + 1) = v28;
  v25 = (char *)v29;
  v31 = v29;
  if (*(_QWORD *)(a1 + 40))
  {
    v24 = (void **)v27;
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)&v26, 1);
    v4 = v24;
  }
  v7 = v4;
  v8 = ((char *)v4 - (char *)v3) / 24;
  std::ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v9;
  if (v7 != v3)
  {
    v10 = 24 * v8;
    v11 = (uint64_t)v3;
    do
    {
      sub_208208DC4(a1, v11);
      v11 += 24;
      v10 -= 24;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 40);
  }
  if (v9)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v12, (uint64_t)&v26, 1);
  }
  v13 = v25;
  std::ostream::operator<<();
  v14 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v14;
  if (v25 == v5)
  {
    if (!v5)
      goto LABEL_27;
    goto LABEL_26;
  }
  v15 = 0;
  do
  {
    if (v14)
    {
      v16 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v16, (uint64_t)&v26, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    sub_207E9DE58(a1, (uint64_t)&v5[v15]);
    v17 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v18 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v18, (uint64_t)&v26, 1);
    }
    v19 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = v17;
    sub_207CBAB98(v19, (uint64_t)&v26, 1);
    v14 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v14;
    v15 += 24;
  }
  while (24 * ((v25 - v5) / 24) != v15);
  if (v5)
  {
    do
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v13 -= 24;
    }
    while (v13 != v5);
    v5 = (char *)*((_QWORD *)&v30[1] + 1);
    v3 = *(void ***)&v30[0];
LABEL_26:
    operator delete(v5);
  }
LABEL_27:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v30[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_207E9DDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9DE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9DE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9DE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9DE58(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  CFTypeID TypeID;
  const void *v7;
  CFTypeID v8;
  std::__shared_weak_count_vtbl *v9;
  const __CFBoolean *v10;
  CFTypeID v11;
  _QWORD *v12;
  const void *v13;
  CFTypeID v14;
  const __CFArray *v15;
  void *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  CFIndex Count;
  CFIndex i;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::string::size_type size;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::string::size_type v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string::size_type v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  size_t v47;
  std::string::size_type v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  _QWORD *v55;
  char v56;
  _QWORD *v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  std::string::value_type v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  __int128 theArray;
  std::__shared_weak_count_vtbl *v83;
  __int128 v84;
  std::string v85;
  std::string::size_type v86;
  std::string::size_type v87;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v85.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v4, (uint64_t)&v85, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_207E9D1F4(&v80, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
      }
      else
      {
        v80 = 0;
        v81 = 0;
      }
      sub_207E9D308((std::__shared_weak_count_vtbl **)&theArray, (uint64_t)&v80);
      sub_207D01AA0((CFNumberRef *)&theArray);
      v85.__r_.__value_.__s.__data_[0] = (char)v83;
      v85.__r_.__value_.__s.__data_[8] = (char)v83;
      v86 = 0;
      v87 = 0;
      v85.__r_.__value_.__r.__words[2] = 0;
      v46 = (void *)v84;
      v47 = *((_QWORD *)&v84 + 1) - v84;
      if (*((_QWORD *)&v84 + 1) != (_QWORD)v84)
      {
        if ((v47 & 0x8000000000000000) != 0)
          sub_207CA420C();
        v85.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v84 + 1) - v84);
        v86 = v85.__r_.__value_.__r.__words[2];
        v48 = v85.__r_.__value_.__r.__words[2] + v47;
        v87 = v85.__r_.__value_.__r.__words[2] + v47;
        memcpy((void *)v85.__r_.__value_.__r.__words[2], v46, v47);
        v86 = v48;
      }
      if (v46)
      {
        *((_QWORD *)&v84 + 1) = v46;
        operator delete(v46);
      }
      v49 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v81;
      if (v81)
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v55 = *(_QWORD **)(a1 + 24);
        LOBYTE(v83) = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v55, (uint64_t)&v83, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      LOBYTE(v83) = v85.__r_.__value_.__s.__data_[0];
      sub_208208D08(a1, (unsigned __int8 *)&v83);
      sub_207E3BE3C(v85.__r_.__value_.__s.__data_[0], (uint64_t)&v85, a1);
      v56 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v57 = *(_QWORD **)(a1 + 24);
        LOBYTE(v83) = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v57, (uint64_t)&v83, 1);
      }
      v58 = *(_QWORD **)(a1 + 24);
      LOBYTE(v83) = v56;
      sub_207CBAB98(v58, (uint64_t)&v83, 1);
      ++*(_QWORD *)(a1 + 40);
      v16 = (void *)v85.__r_.__value_.__r.__words[2];
      if (!v85.__r_.__value_.__r.__words[2])
        return;
      v86 = v85.__r_.__value_.__r.__words[2];
      goto LABEL_88;
    case 1:
      sub_207CF9014(*(_QWORD *)(a2 + 8), &v85);
      sub_208208DC4(a1, (uint64_t)&v85);
      if (!(_BYTE)v86 || (SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v16 = (void *)v85.__r_.__value_.__r.__words[0];
LABEL_88:
      operator delete(v16);
      return;
    case 2:
      v10 = *(const __CFBoolean **)(a2 + 8);
      if (!v10)
        goto LABEL_13;
      v11 = CFBooleanGetTypeID();
      if (CFGetTypeID(v10) == v11)
      {
        CFBooleanGetValue(v10);
LABEL_13:
        if (*(_QWORD *)(a1 + 40))
          goto LABEL_14;
      }
      else if (*(_QWORD *)(a1 + 40))
      {
LABEL_14:
        v12 = *(_QWORD **)(a1 + 24);
        v85.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v12, (uint64_t)&v85, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      return;
    case 3:
      v13 = *(const void **)(a2 + 8);
      if (v13 && (v14 = CFArrayGetTypeID(), CFGetTypeID(v13) == v14))
      {
        sub_207CB7A4C((std::__shared_weak_count_vtbl **)&theArray, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
        v15 = (const __CFArray *)theArray;
      }
      else
      {
        v15 = 0;
        theArray = 0uLL;
      }
      memset(&v85, 0, sizeof(v85));
      Count = CFArrayGetCount(v15);
      sub_207E9CE58(&v85.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_207CF871C(&v78, ValueAtIndex, 1);
          sub_208092FD8((uint64_t)&v83, (uint64_t)&v78);
          size = v85.__r_.__value_.__l.__size_;
          if (v85.__r_.__value_.__l.__size_ >= v85.__r_.__value_.__r.__words[2])
          {
            v26 = sub_207E9D460(&v85.__r_.__value_.__l.__data_, (uint64_t)&v83);
            v27 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
            v85.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
            if (*((_QWORD *)&v84 + 1))
            {
              v28 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
          }
          else
          {
            *(_WORD *)v85.__r_.__value_.__l.__size_ = (_WORD)v83;
            *(_OWORD *)(size + 8) = v84;
            v84 = 0uLL;
            v85.__r_.__value_.__l.__size_ = size + 24;
          }
          v30 = v79;
          if (v79)
          {
            v31 = (unint64_t *)&v79->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v33 = *(_QWORD **)(a1 + 24);
        LOBYTE(v83) = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v33, (uint64_t)&v83, 1);
      }
      std::ostream::operator<<();
      v34 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v34;
      v35 = v85.__r_.__value_.__r.__words[0];
      if (v85.__r_.__value_.__l.__size_ != v85.__r_.__value_.__r.__words[0])
      {
        v36 = 24 * ((int64_t)(v85.__r_.__value_.__l.__size_ - v85.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          if (v34)
          {
            v37 = *(_QWORD **)(a1 + 24);
            LOBYTE(v83) = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v37, (uint64_t)&v83, 1);
          }
          std::ostream::operator<<();
          ++*(_QWORD *)(a1 + 40);
          sub_207E9DE58(a1, v35, 2);
          v38 = *(_BYTE *)(a1 + 34);
          if (*(_QWORD *)(a1 + 40))
          {
            v39 = *(_QWORD **)(a1 + 24);
            LOBYTE(v83) = *(_BYTE *)(a1 + 32);
            sub_207CBAB98(v39, (uint64_t)&v83, 1);
          }
          v40 = *(_QWORD **)(a1 + 24);
          LOBYTE(v83) = v38;
          sub_207CBAB98(v40, (uint64_t)&v83, 1);
          v34 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v34;
          v35 += 24;
          v36 -= 24;
        }
        while (v36);
        v35 = v85.__r_.__value_.__r.__words[0];
      }
      if (v35)
      {
        v41 = v85.__r_.__value_.__l.__size_;
        v42 = (void *)v35;
        if (v85.__r_.__value_.__l.__size_ != v35)
        {
          do
          {
            v43 = *(std::__shared_weak_count **)(v41 - 8);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v41 -= 24;
          }
          while (v41 != v35);
          v42 = (void *)v85.__r_.__value_.__r.__words[0];
        }
        v85.__r_.__value_.__l.__size_ = v35;
        operator delete(v42);
      }
      v59 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v60 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      goto LABEL_118;
    case 4:
      v7 = *(const void **)(a2 + 8);
      if (v7 && (v8 = CFDictionaryGetTypeID(), CFGetTypeID(v7) == v8))
      {
        sub_207CF9D84(&v76, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
        v9 = v76;
      }
      else
      {
        v9 = 0;
        v76 = 0;
        v77 = 0;
      }
      sub_207CF9D84((std::__shared_weak_count_vtbl **)&v85, v9, 1);
      v17 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
      if (v85.__r_.__value_.__l.__size_)
      {
        v18 = (unint64_t *)(v85.__r_.__value_.__l.__size_ + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        theArray = v17;
        do
          v20 = __ldxr(v18);
        while (__stxr(v20 + 1, v18));
        do
          v21 = __ldaxr(v18);
        while (__stlxr(v21 - 1, v18));
        if (!v21)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
        }
      }
      else
      {
        theArray = v85.__r_.__value_.__r.__words[0];
      }
      v62 = (std::__shared_weak_count *)v85.__r_.__value_.__l.__size_;
      if (v85.__r_.__value_.__l.__size_)
      {
        v63 = (unint64_t *)(v85.__r_.__value_.__l.__size_ + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      sub_208093A80(&v83, (uint64_t)&theArray);
      v65 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = v77;
      if (v77)
      {
        v69 = (unint64_t *)&v77->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v71 = *(_QWORD **)(a1 + 24);
        v85.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v71, (uint64_t)&v85, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      sub_207E9DB54(a1, &v83, 2);
      v72 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v73 = *(_QWORD **)(a1 + 24);
        v85.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v73, (uint64_t)&v85, 1);
      }
      v74 = *(_QWORD **)(a1 + 24);
      v85.__r_.__value_.__s.__data_[0] = v72;
      sub_207CBAB98(v74, (uint64_t)&v85, 1);
      ++*(_QWORD *)(a1 + 40);
      v59 = (std::__shared_weak_count *)v84;
      if (!(_QWORD)v84)
        return;
      v75 = (unint64_t *)(v84 + 8);
      do
        v61 = __ldaxr(v75);
      while (__stlxr(v61 - 1, v75));
LABEL_118:
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      return;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
}

void sub_207E9E704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9E720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9E73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9E750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (*(_BYTE *)(v20 - 64))
  {
    if (*(char *)(v20 - 65) < 0)
    {
      operator delete(*(void **)(v20 - 88));
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207E9E84C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20806D878);
  }
  sub_208093A80(&v14, v4 + 48);
  sub_207E9E990(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E9E960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9E97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9E990(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void **i;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t __src;
  uint64_t v28;

  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_208093BC8((uint64_t)&v21, a2);
  v3 = (void **)v21;
  *(_QWORD *)&v25[0] = v21;
  *(_OWORD *)((char *)v25 + 8) = v22;
  v4 = v23;
  *((_QWORD *)&v25[1] + 1) = v23;
  v20 = (char *)v24;
  v26 = v24;
  v5 = (void **)v22;
  v6 = ((uint64_t)v22 - v21) / 24;
  __src = v6;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v28, 8);
  if (v5 != v3)
  {
    v7 = 24 * v6;
    v8 = (char **)v3;
    do
    {
      v9 = *((unsigned __int8 *)v8 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = (uint64_t)v8[1];
      v21 = v9;
      sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
      if (*((char *)v8 + 23) < 0)
      {
        v11 = *v8;
        v10 = (int64_t)v8[1];
        if (*v8)
          v12 = 1;
        else
          v12 = v10 == 0;
        if (!v12)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          v11 = 0;
        }
      }
      else
      {
        v10 = *((unsigned __int8 *)v8 + 23);
        v11 = (char *)v8;
      }
      sub_207D0B114(a1 + 24, *(char **)(a1 + 32), v11, &v11[v10], v10);
      v8 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v13 = v20;
  v21 = (v20 - v4) / 24;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
  if (v20 == v4)
  {
    if (!v4)
      goto LABEL_28;
    goto LABEL_27;
  }
  v14 = 0;
  do
  {
    LODWORD(__src) = 2;
    sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
    sub_208072A10((_QWORD *)a1);
    sub_207E9ED0C(a1, (uint64_t)&v4[v14]);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v15 + 10) = *(_QWORD *)(a1 + 32) - v15 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v14 += 24;
  }
  while (24 * ((v20 - v4) / 24) != v14);
  if (v4)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 24;
    }
    while (v13 != v4);
    v4 = (char *)*((_QWORD *)&v25[1] + 1);
    v3 = *(void ***)&v25[0];
LABEL_27:
    operator delete(v4);
  }
LABEL_28:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v25[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_207E9EC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9ECA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9ECE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9ECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9ED0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeID TypeID;
  const void *v7;
  CFTypeID v8;
  std::__shared_weak_count_vtbl *v9;
  const __CFBoolean *v10;
  CFTypeID v11;
  __int16 v12;
  __int16 v13;
  const void *v14;
  CFTypeID v15;
  const __CFArray *v16;
  std::string::size_type size;
  std::string::size_type v18;
  std::string *p_p;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  CFIndex Count;
  CFIndex i;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::string::size_type v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string::size_type v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  size_t v46;
  char *v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t data_low;
  uint64_t v70;
  unint64_t *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  __int128 theArray;
  unint64_t __src;
  __int128 v80;
  std::string __p;
  char *v82;
  char *v83;

  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)a2;
  v4 = a1 + 24;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[2], 2);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_207E9D1F4(&v76, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
      }
      else
      {
        v76 = 0;
        v77 = 0;
      }
      sub_207E9D308((std::__shared_weak_count_vtbl **)&theArray, (uint64_t)&v76);
      sub_207D01AA0((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = __src;
      __p.__r_.__value_.__s.__data_[8] = __src;
      v82 = 0;
      v83 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v45 = (void *)v80;
      v46 = *((_QWORD *)&v80 + 1) - v80;
      if (*((_QWORD *)&v80 + 1) != (_QWORD)v80)
      {
        if ((v46 & 0x8000000000000000) != 0)
          sub_207CA420C();
        v47 = (char *)operator new(*((_QWORD *)&v80 + 1) - v80);
        v48 = &v47[v46];
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v47;
        v83 = &v47[v46];
        memcpy(v47, v45, v46);
        v82 = v48;
      }
      if (v45)
      {
        *((_QWORD *)&v80 + 1) = v45;
        operator delete(v45);
      }
      v49 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v50 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v77;
      if (v77)
      {
        p_shared_owners = (unint64_t *)&v77->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      LODWORD(__src) = 2;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
      sub_208072A10((_QWORD *)a1);
      LOBYTE(__src) = __p.__r_.__value_.__s.__data_[0];
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      sub_207E3C60C(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v55 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v55 + 10) = *(_QWORD *)(a1 + 32) - v55 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v56 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v82 = (char *)__p.__r_.__value_.__r.__words[2];
      goto LABEL_110;
    case 1:
      sub_207CF9014(*(_QWORD *)(a2 + 8), &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      __src = size;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v80, 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v18 = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0] && __p.__r_.__value_.__l.__size_)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          p_p = 0;
        }
      }
      else
      {
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
      }
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)p_p, (char *)p_p + v18, v18);
      if (!(_BYTE)v82 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v56 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_110:
      operator delete(v56);
      return;
    case 2:
      v10 = *(const __CFBoolean **)(a2 + 8);
      if (v10 && (v11 = CFBooleanGetTypeID(), CFGetTypeID(v10) == v11))
      {
        v12 = CFBooleanGetValue(v10) != 0;
        v13 = 1;
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v12 | (v13 << 8);
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[1], 1);
      return;
    case 3:
      v14 = *(const void **)(a2 + 8);
      if (v14 && (v15 = CFArrayGetTypeID(), CFGetTypeID(v14) == v15))
      {
        sub_207CB7A4C((std::__shared_weak_count_vtbl **)&theArray, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
        v16 = (const __CFArray *)theArray;
      }
      else
      {
        v16 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v16);
      sub_207E9CE58(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_207CF871C(&v74, ValueAtIndex, 1);
          sub_208092FD8((uint64_t)&__src, (uint64_t)&v74);
          v28 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v29 = sub_207E9D460(&__p.__r_.__value_.__l.__data_, (uint64_t)&__src);
            v30 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
            if (*((_QWORD *)&v80 + 1))
            {
              v31 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = __src;
            *(_OWORD *)(v28 + 8) = v80;
            v80 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v28 + 24;
          }
          v33 = v75;
          if (v75)
          {
            v34 = (unint64_t *)&v75->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
      }
      __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v80, 8);
      v36 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v37 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          LODWORD(v72) = 2;
          sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v72, (char *)&v72 + 4, 4);
          v38 = v72;
          sub_208072A10((_QWORD *)a1);
          sub_207E9ED0C(a1, v36, v38);
          v39 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v39 + 10) = *(_QWORD *)(a1 + 32) - v39 - 18;
          *(_QWORD *)(a1 + 56) -= 8;
          v36 += 24;
          v37 -= 24;
        }
        while (v37);
        v36 = __p.__r_.__value_.__r.__words[0];
      }
      if (v36)
      {
        v40 = __p.__r_.__value_.__l.__size_;
        v41 = (void *)v36;
        if (__p.__r_.__value_.__l.__size_ != v36)
        {
          do
          {
            v42 = *(std::__shared_weak_count **)(v40 - 8);
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v40 -= 24;
          }
          while (v40 != v36);
          v41 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v36;
        operator delete(v41);
      }
      v57 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v58 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      goto LABEL_101;
    case 4:
      v7 = *(const void **)(a2 + 8);
      if (v7 && (v8 = CFDictionaryGetTypeID(), CFGetTypeID(v7) == v8))
      {
        sub_207CF9D84(&v72, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
        v9 = v72;
      }
      else
      {
        v9 = 0;
        v72 = 0;
        v73 = 0;
      }
      sub_207CF9D84((std::__shared_weak_count_vtbl **)&__p, v9, 1);
      v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        theArray = v20;
        do
          v23 = __ldxr(v21);
        while (__stxr(v23 + 1, v21));
        do
          v24 = __ldaxr(v21);
        while (__stlxr(v24 - 1, v21));
        if (!v24)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
        }
      }
      else
      {
        theArray = __p.__r_.__value_.__r.__words[0];
      }
      v60 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v61 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      sub_208093A80((std::__shared_weak_count_vtbl **)&__src, (uint64_t)&theArray);
      v63 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = v73;
      if (v73)
      {
        v67 = (unint64_t *)&v73->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[4], 4);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      sub_208072A10((_QWORD *)a1);
      sub_207E9E990(a1, &__src, data_low);
      v70 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v70 + 10) = *(_QWORD *)(a1 + 32) - v70 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v57 = (std::__shared_weak_count *)v80;
      if (!(_QWORD)v80)
        return;
      v71 = (unint64_t *)(v80 + 8);
      do
        v59 = __ldaxr(v71);
      while (__stlxr(v59 - 1, v71));
LABEL_101:
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      return;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
}

void sub_207E9F588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9F5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9F5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9F5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9F5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  sub_207C99D78((uint64_t)&a16);
  sub_207C99D78((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_207E9F624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  if ((_BYTE)a28)
  {
    if (a27 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207E9F6D0(_DWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_20806D878);
  }
  sub_208093A80(&v14, v4 + 48);
  sub_207E9F814(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_207E9F7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9F800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E9F814(_DWORD *a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void (*v5)(_DWORD *, uint64_t *);
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **i;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  int v24;

  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_208093BC8((uint64_t)&v18, a2);
  v3 = (void **)v18;
  *(_QWORD *)&v22[0] = v18;
  *(_OWORD *)((char *)v22 + 8) = v19;
  v4 = v20;
  *((_QWORD *)&v22[1] + 1) = v20;
  v17 = (char *)v21;
  v23 = v21;
  v5 = *(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120);
  v6 = (void **)v19;
  v7 = ((uint64_t)v19 - v18) / 24;
  v18 = v7;
  v5(a1, &v18);
  if (v6 != v3)
  {
    v8 = 24 * v7;
    v9 = (char *)v3;
    do
    {
      (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 144))(a1, v9);
      v9 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  v10 = v17;
  v18 = (v17 - v4) / 24;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v18);
  if (v17 == v4)
  {
    if (!v4)
      goto LABEL_23;
    goto LABEL_22;
  }
  v11 = 0;
  do
  {
    v12 = a1[2];
    v24 = 2;
    (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
    if (v12 < 1)
    {
      sub_207E9FAF0((uint64_t)a1, (std::string::size_type)&v4[v11]);
    }
    else
    {
      if (v12 == 2)
      {
        v24 = 2;
        (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
      sub_207E9FAF0((uint64_t)a1, (std::string::size_type)&v4[v11]);
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    }
    v11 += 24;
  }
  while (24 * ((v17 - v4) / 24) != v11);
  if (v4)
  {
    do
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v10 -= 24;
    }
    while (v10 != v4);
    v4 = (char *)*((_QWORD *)&v22[1] + 1);
    v3 = *(void ***)&v22[0];
LABEL_22:
    operator delete(v4);
  }
LABEL_23:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v22[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_207E9FA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9FAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9FAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9FAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9FADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E9FAF0(uint64_t a1, std::string::size_type a2)
{
  const void *v4;
  CFTypeID TypeID;
  const void *v6;
  CFTypeID v7;
  std::__shared_weak_count_vtbl *v8;
  const __CFBoolean *v9;
  CFTypeID v10;
  __int16 v11;
  __int16 v12;
  const void *v13;
  CFTypeID v14;
  const __CFArray *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  CFIndex Count;
  CFIndex i;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::string::size_type size;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string::size_type v32;
  int64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  int v46;
  std::string::size_type v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  uint64_t data_low;
  unint64_t *v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  __int128 theArray;
  unint64_t v74;
  __int128 v75;
  std::string v76;
  std::string::size_type v77;
  std::string::size_type v78;

  v76.__r_.__value_.__r.__words[0] = a2;
  sub_207EA0474((_BYTE *)a1, (unsigned __int16 **)&v76);
  switch(*(_WORD *)a2)
  {
    case 0:
      v4 = *(const void **)(a2 + 8);
      if (v4 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v4) == TypeID))
      {
        sub_207E9D1F4(&v71, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
      }
      else
      {
        v71 = 0;
        v72 = 0;
      }
      sub_207E9D308((std::__shared_weak_count_vtbl **)&theArray, (uint64_t)&v71);
      sub_207D01AA0((CFNumberRef *)&theArray);
      v76.__r_.__value_.__s.__data_[0] = v74;
      v76.__r_.__value_.__s.__data_[8] = v74;
      v77 = 0;
      v78 = 0;
      v76.__r_.__value_.__r.__words[2] = 0;
      v36 = (void *)v75;
      v37 = *((_QWORD *)&v75 + 1) - v75;
      if (*((_QWORD *)&v75 + 1) != (_QWORD)v75)
      {
        if ((v37 & 0x8000000000000000) != 0)
          sub_207CA420C();
        v76.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v75 + 1) - v75);
        v77 = v76.__r_.__value_.__r.__words[2];
        v38 = v76.__r_.__value_.__r.__words[2] + v37;
        v78 = v76.__r_.__value_.__r.__words[2] + v37;
        memcpy((void *)v76.__r_.__value_.__r.__words[2], v36, v37);
        v77 = v38;
      }
      if (v36)
      {
        *((_QWORD *)&v75 + 1) = v36;
        operator delete(v36);
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v72;
      if (v72)
      {
        p_shared_owners = (unint64_t *)&v72->__shared_owners_;
        do
          v44 = __ldaxr(p_shared_owners);
        while (__stlxr(v44 - 1, p_shared_owners));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = *(_QWORD *)a1;
      *(_QWORD *)&theArray = *(_QWORD *)(a1 + 8);
      v46 = theArray;
      LODWORD(v74) = 2;
      (*(void (**)(uint64_t, unint64_t *))(v45 + 104))(a1, &v74);
      if (v46 < 1)
      {
        v74 = (unint64_t)&v76;
        sub_207E3D2B0((_BYTE *)a1, (_BYTE **)&v74);
        sub_207E3D144(v76.__r_.__value_.__s.__data_[0], (uint64_t)&v76, a1);
      }
      else
      {
        sub_207EA05AC((int *)&theArray, (_BYTE *)a1, &v76);
      }
      if (v76.__r_.__value_.__r.__words[2])
      {
        v77 = v76.__r_.__value_.__r.__words[2];
        operator delete((void *)v76.__r_.__value_.__r.__words[2]);
      }
      return;
    case 1:
      sub_207CF9014(*(_QWORD *)(a2 + 8), &v76);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &v76);
      if ((_BYTE)v77 && SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      return;
    case 2:
      v9 = *(const __CFBoolean **)(a2 + 8);
      if (v9 && (v10 = CFBooleanGetTypeID(), CFGetTypeID(v9) == v10))
      {
        v11 = CFBooleanGetValue(v9) != 0;
        v12 = 1;
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      LOWORD(v76.__r_.__value_.__l.__data_) = v11 | (v12 << 8);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 32))(a1, &v76);
      return;
    case 3:
      v13 = *(const void **)(a2 + 8);
      if (v13 && (v14 = CFArrayGetTypeID(), CFGetTypeID(v13) == v14))
      {
        sub_207CB7A4C((std::__shared_weak_count_vtbl **)&theArray, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
        v15 = (const __CFArray *)theArray;
      }
      else
      {
        v15 = 0;
        theArray = 0uLL;
      }
      memset(&v76, 0, sizeof(v76));
      Count = CFArrayGetCount(v15);
      sub_207E9CE58(&v76.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_207CF871C(&v69, ValueAtIndex, 1);
          sub_208092FD8((uint64_t)&v74, (uint64_t)&v69);
          size = v76.__r_.__value_.__l.__size_;
          if (v76.__r_.__value_.__l.__size_ >= v76.__r_.__value_.__r.__words[2])
          {
            v25 = sub_207E9D460(&v76.__r_.__value_.__l.__data_, (uint64_t)&v74);
            v26 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
            v76.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
            if (*((_QWORD *)&v75 + 1))
            {
              v27 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
          }
          else
          {
            *(_WORD *)v76.__r_.__value_.__l.__size_ = v74;
            *(_OWORD *)(size + 8) = v75;
            v75 = 0uLL;
            v76.__r_.__value_.__l.__size_ = size + 24;
          }
          v29 = v70;
          if (v70)
          {
            v30 = (unint64_t *)&v70->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
      }
      v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) >> 3);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v74);
      v32 = v76.__r_.__value_.__r.__words[0];
      if (v76.__r_.__value_.__l.__size_ != v76.__r_.__value_.__r.__words[0])
      {
        v33 = 24 * ((int64_t)(v76.__r_.__value_.__l.__size_ - v76.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          v34 = *(_DWORD *)(a1 + 8);
          LODWORD(v67) = 2;
          (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)a1 + 104))(a1, &v67);
          v35 = v67;
          if (v34 < 1)
          {
            sub_207E9FAF0(a1, v32, v67);
          }
          else
          {
            if (v34 == 2)
            {
              LODWORD(v67) = 2;
              (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)a1 + 104))(a1, &v67);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
            sub_207E9FAF0(a1, v32, v35);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          }
          v32 += 24;
          v33 -= 24;
        }
        while (v33);
        v32 = v76.__r_.__value_.__r.__words[0];
      }
      if (v32)
      {
        v47 = v76.__r_.__value_.__l.__size_;
        v48 = (void *)v32;
        if (v76.__r_.__value_.__l.__size_ != v32)
        {
          do
          {
            v49 = *(std::__shared_weak_count **)(v47 - 8);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 24;
          }
          while (v47 != v32);
          v48 = (void *)v76.__r_.__value_.__r.__words[0];
        }
        v76.__r_.__value_.__l.__size_ = v32;
        operator delete(v48);
      }
      v52 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v53 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      break;
    case 4:
      v6 = *(const void **)(a2 + 8);
      if (v6 && (v7 = CFDictionaryGetTypeID(), CFGetTypeID(v6) == v7))
      {
        sub_207CF9D84(&v67, *(std::__shared_weak_count_vtbl **)(a2 + 8), 1);
        v8 = v67;
      }
      else
      {
        v8 = 0;
        v67 = 0;
        v68 = 0;
      }
      sub_207CF9D84((std::__shared_weak_count_vtbl **)&v76, v8, 1);
      v16 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
      if (v76.__r_.__value_.__l.__size_)
      {
        v17 = (unint64_t *)(v76.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        theArray = v16;
        do
          v19 = __ldxr(v17);
        while (__stxr(v19 + 1, v17));
        do
          v20 = __ldaxr(v17);
        while (__stlxr(v20 - 1, v17));
        if (!v20)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
        }
      }
      else
      {
        theArray = v76.__r_.__value_.__r.__words[0];
      }
      v55 = (std::__shared_weak_count *)v76.__r_.__value_.__l.__size_;
      if (v76.__r_.__value_.__l.__size_)
      {
        v56 = (unint64_t *)(v76.__r_.__value_.__l.__size_ + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      sub_208093A80((std::__shared_weak_count_vtbl **)&v74, (uint64_t)&theArray);
      v58 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v68;
      if (v68)
      {
        v62 = (unint64_t *)&v68->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = *(_DWORD *)(a1 + 8);
      LODWORD(v76.__r_.__value_.__l.__data_) = 2;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &v76);
      data_low = LODWORD(v76.__r_.__value_.__l.__data_);
      if (v64 < 1)
      {
        sub_207E9F814(a1, &v74, LODWORD(v76.__r_.__value_.__l.__data_));
      }
      else
      {
        if (v64 == 2)
        {
          LODWORD(v76.__r_.__value_.__l.__data_) = 2;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &v76);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        sub_207E9F814(a1, &v74, data_low);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      }
      v52 = (std::__shared_weak_count *)v75;
      if (!(_QWORD)v75)
        return;
      v66 = (unint64_t *)(v75 + 8);
      do
        v54 = __ldaxr(v66);
      while (__stlxr(v54 - 1, v66));
      break;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
}

void sub_207EA032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA0348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA0364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA0378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (*(_BYTE *)(v20 - 64))
  {
    if (*(char *)(v20 - 65) < 0)
    {
      operator delete(*(void **)(v20 - 88));
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207EA0420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_207CBD7E8((uint64_t)va2);
  sub_207C99D78((uint64_t)va);
  sub_207E9C208((void **)(v4 - 88));
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207EA0454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_207E9C208(v8 - 88);
  sub_207C99D78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207EA0474(_BYTE *a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  void *__p[2];
  char v5;
  _WORD v6[12];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_207E9CF78((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_207CA9F48();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _WORD *))off_24C0765F8[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _WORD *))off_24C0765E0[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _WORD *))(*(_QWORD *)a1 + 96))(a1, v6);
  }
}

void sub_207EA0568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207EA0584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA0598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207EA05AC(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v8;
  _BYTE *v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(_BYTE *, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 < 1)
  {
    v9 = a3;
    sub_207E3D2B0(a2, &v9);
    return sub_207E3D144(*a3, (uint64_t)a3, (uint64_t)a2);
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = a3;
    sub_207E3D2B0(a2, &v9);
    sub_207E3D144(*a3, (uint64_t)a3, (uint64_t)a2);
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  }
}

uint64_t sub_207EA0684(uint64_t a1, _QWORD *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5F4C(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20809778C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_207EA0780((uint64_t)&v11, a1, a2, v6);
  else
    sub_207EA0884(a1, a2, 2u);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_207EA0780(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_20806CB1C(&v17);
  sub_207EA0D70(a2, &v17, a4);
  v8 = v17;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a3[1];
  *a3 = v8;
  a3[1] = v7;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_207EA0870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA0884(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void ***v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  void ***v20;
  void **v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_207CFFB70(&v20, (std::__shared_weak_count_vtbl **)&v22);
    v19 = v22;
    sub_207CFF9E4((uint64_t)&v20, (char *)v21[0]);
    sub_207EA0ADC(a1, (uint64_t)&v19);
    sub_207EA0C5C((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = operator new(0x10uLL);
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2080968B4((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (void **)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20806DC2C(v21, v8);
    v10 = operator new(0xC0uLL);
    sub_20806BFE0((uint64_t)v10, (uint64_t *)&v22);
    v11 = operator new(0x20uLL);
    *v11 = &off_24C082A28;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (void ***)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20806DC2C(v15 + 1, *(unsigned __int8 *)v15);
      operator delete(v15);
    }
  }
}

void sub_207EA0A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA0A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20806D14C((uint64_t)v7);
  operator delete(v7);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA0AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0ADC(uint64_t a1, uint64_t a2)
{
  int v4;
  void ***v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void ***v16;
  void ***v17;
  void ***v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (void ***)operator new(0x10uLL);
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2080968B4((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = (void **)*((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_20806DC2C((void ***)&v19 + 1, v7);
  v17 = v5;
  sub_208094A98((uint64_t *)&v17, (std::__shared_weak_count_vtbl **)&v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_20806DC2C(v18 + 1, *(unsigned __int8 *)v18);
    operator delete(v16);
  }
}

void sub_207EA0C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0C48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0C5C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  sub_207E01D24(&v13, a2);
  sub_20806CC28((char **)&v15, (uint64_t)&v13, 1);
  v3 = v15;
  v15 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_207EA0D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA0D70(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void ***v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  void ***v20;
  void **v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_207CFFB70(&v20, (std::__shared_weak_count_vtbl **)&v22);
    v19 = v22;
    sub_207CFF9E4((uint64_t)&v20, (char *)v21[0]);
    sub_207EA0ADC(a1, (uint64_t)&v19);
    sub_207EA0FC8((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = operator new(0x10uLL);
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2080968B4((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (void **)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20806DC2C(v21, v8);
    v10 = operator new(0xC0uLL);
    sub_20806BFE0((uint64_t)v10, (uint64_t *)&v22);
    v11 = operator new(0x20uLL);
    *v11 = &off_24C082A28;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (void ***)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20806DC2C(v15 + 1, *(unsigned __int8 *)v15);
      operator delete(v15);
    }
  }
}

void sub_207EA0F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA0F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20806D14C((uint64_t)v7);
  operator delete(v7);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA0FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_207EA0FC8(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  sub_207E01D24(&v13, a2);
  sub_20806CC28((char **)&v15, (uint64_t)&v13, 1);
  v3 = v15;
  v15 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_207EA10C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207EA10DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20820BA20(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_207EA12CC((uint64_t)&v8, a1, a2);
    return a1;
  }
  else
  {
    sub_207E17CA8(a1 + 2);
    sub_207EA11B4(a1, (uint64_t)a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_207EA11B4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_207CFFB70(&v8, (std::__shared_weak_count_vtbl **)&v10);
  v7 = v10;
  sub_207CFF9E4((uint64_t)&v8, v9[0]);
  sub_207EA13D0(a1, (uint64_t)&v7);
  sub_207EA0C5C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_207EA1270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA1288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207EA12CC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20806CB1C(&v15);
  sub_207EA3FF8(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207EA13BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA13D0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  __int128 v32;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  unsigned int v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_207E18434((uint64_t)a1, (char **)v33);
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  sub_20820BBEC(a1[6], &v32);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v6 = v32 - v5;
  if ((unint64_t)v32 <= v5)
  {
    if ((unint64_t)v32 >= v5)
    {
      v7 = (char *)__p[1];
      v8 = v35 - (unint64_t)__p[1];
      if ((void *)v35 == __p[1])
        goto LABEL_22;
    }
    else
    {
      v9 = (char *)__p[1] + 24 * v32;
      while (v4 != v9)
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v4 -= 24;
      }
      *(_QWORD *)&v35 = v9;
      v7 = (char *)__p[1];
      v8 = v9 - (char *)__p[1];
      if (v9 == __p[1])
        goto LABEL_22;
    }
  }
  else
  {
    sub_207EA1930((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v35 - (unint64_t)__p[1];
    if ((void *)v35 == __p[1])
      goto LABEL_22;
  }
  v13 = 24 * (v8 / 24);
  do
  {
    while (1)
    {
      v36 = 2;
      sub_20820BA20(a1[6], &v36);
      if (v36 > 1)
        break;
      sub_207EA1B08((uint64_t)&v36, a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
      if (!v13)
        goto LABEL_22;
    }
    sub_207E17CA8(a1 + 2);
    sub_207EA1CC0(a1, (uint64_t)v7);
    v14 = a1[4];
    v15 = *(_QWORD *)(v14 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v14 - 8);
    if (v15)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v15);
    a1[4] -= 16;
    v7 += 24;
    v13 -= 24;
  }
  while (v13);
LABEL_22:
  sub_2080941EC((uint64_t *)v33, (void ***)&v32);
  v16 = v32;
  v32 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_207EA1708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA171C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA1730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA1744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA1758(_QWORD *a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char v20;

  v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20820BBEC(a1[6], &v18);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v18 - v5;
  if (v18 <= v5)
  {
    if (v18 >= v5)
    {
      v7 = *a2;
      v10 = v4 - v7;
      if (v4 == v7)
        return;
    }
    else
    {
      v11 = (uint64_t)&(*a2)[24 * v18];
      while (v4 != (char *)v11)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v4 -= 24;
      }
      a2[1] = (char *)v11;
      v7 = *a2;
      v10 = v11 - (_QWORD)v7;
      if ((char *)v11 == v7)
        return;
    }
  }
  else
  {
    sub_207EA1930(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
  }
  v15 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      v19 = 2;
      sub_20820BA20(a1[6], &v19);
      if (v19 > 1)
        break;
      sub_207EA1B08((uint64_t)&v20, a1, (uint64_t)v7);
      v7 += 24;
      v15 -= 24;
      if (!v15)
        return;
    }
    sub_207E17CA8(a1 + 2);
    sub_207EA1CC0(a1, v7, 2);
    v16 = a1[4];
    v17 = *(_QWORD *)(v16 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v16 - 8);
    if (v17)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v17);
    a1[4] -= 16;
    v7 += 24;
    v15 -= 24;
  }
  while (v15);
}

void sub_207EA1930(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[24 * a2];
      v12 = v4 + 8;
      v13 = 24 * a2;
      do
      {
        *v12 = 0;
        v12[1] = 0;
        v12 += 3;
        v13 -= 24;
      }
      while (v13);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v19 = *a1;
  v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v20)
      return;
LABEL_34:
    operator delete(v20);
    return;
  }
  do
  {
    v21 = *((_WORD *)v20 - 12);
    v20 -= 24;
    *((_WORD *)v14 - 12) = v21;
    v14 -= 24;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v20 + 8);
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
  }
  while (v20 != v19);
  v22 = *a1;
  v20 = a1[1];
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v15;
  if (v20 != v22)
  {
    do
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v20 -= 24;
    }
    while (v20 != v22);
    v20 = v22;
  }
  if (v20)
    goto LABEL_34;
}

void sub_207EA1B08(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_207EA362C(a2, (uint64_t)&v19);
  v4 = v19;
  sub_207CFBA9C(&v22, (uint64_t)&v20);
  sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_207EA1C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA1C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA1CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA1CC0(_QWORD *a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  char *v65;
  char *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71[2];
  void *v72;
  void *v73[2];
  uint64_t v74;
  __int128 v75;
  void *v76[2];
  void *__p;
  void *v78;
  _DWORD *v79;

  LOWORD(v76[0]) = 0;
  sub_20820B88C(a1[6], v76);
  v4 = LOWORD(v76[0]);
  *(_WORD *)a2 = v76[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v76[0]) = 7;
      LOBYTE(v76[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v78 = v5 + 1;
      v79 = v5 + 1;
      LODWORD(v73[0]) = 2;
      sub_20820BA20(a1[6], v73);
      sub_207E3E190((uint64_t)v73, a1, (unsigned __int8 *)v76, v73[0]);
      sub_207D01DD8((uint64_t)v73, (uint64_t)&v76[1]);
      v75 = *(_OWORD *)v73;
      sub_207EA2588((std::__shared_weak_count_vtbl **)v71, (uint64_t)&v75);
      v6 = *(_OWORD *)v71;
      v71[0] = 0;
      v71[1] = 0;
      v7 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v11 = (unint64_t *)((char *)v71[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (__p)
      {
        v78 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v76[0] = 0;
      v76[1] = 0;
      __p = 0;
      sub_20820C000(a1[6], v76);
      sub_207CF8F18((uint64_t)v76, (CFStringRef *)v71);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)v73, (uint64_t)v71);
      v16 = *(_OWORD *)v73;
      v73[0] = 0;
      v73[1] = 0;
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)v73[1];
      if (v73[1])
      {
        v21 = (unint64_t *)((char *)v73[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v24 = (unint64_t *)((char *)v71[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v76[0]);
      return;
    case 2:
      LOBYTE(v71[0]) = 0;
      sub_20820BF24(a1[6], v71);
      sub_207CF8E38(v71, (std::__shared_weak_count_vtbl **)v73);
      sub_207EA2838((std::__shared_weak_count_vtbl **)v76, (uint64_t)v73);
      v26 = *(_OWORD *)v76;
      v76[0] = 0;
      v76[1] = 0;
      v27 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v31 = (unint64_t *)((char *)v76[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v73[1];
      if (!v73[1])
        return;
      v34 = (unint64_t *)((char *)v73[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      break;
    case 3:
      v73[0] = 0;
      v73[1] = 0;
      v74 = 0;
      sub_207EA1758(a1, (char **)v73);
      v76[1] = 0;
      __p = 0;
      v76[0] = 0;
      sub_207CFED24((uint64_t)v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v73[1] - (char *)v73[0]) >> 3));
      sub_207EA2C40((uint64_t)v73[0], (uint64_t)v73[1], (uint64_t)v76);
      *(_OWORD *)v71 = *(_OWORD *)v76;
      v72 = __p;
      sub_207EA2DA8((uint64_t *)v71, (CFMutableArrayRef *)&v75);
      sub_207EA2990((std::__shared_weak_count_vtbl **)v76, (uint64_t)&v75);
      v36 = *(_OWORD *)v76;
      v76[0] = 0;
      v76[1] = 0;
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v41 = (unint64_t *)((char *)v76[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (char *)v71[0];
      if (v71[0])
      {
        v47 = (char *)v71[1];
        v48 = v71[0];
        if (v71[1] != v71[0])
        {
          do
          {
            v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = v71[0];
        }
        v71[1] = v46;
        operator delete(v48);
      }
      v65 = (char *)v73[0];
      if (v73[0])
      {
        v66 = (char *)v73[1];
        v67 = v73[0];
        if (v73[1] != v73[0])
        {
          do
          {
            v68 = (std::__shared_weak_count *)*((_QWORD *)v66 - 1);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v66 -= 24;
          }
          while (v66 != v65);
          v67 = v73[0];
        }
        v73[1] = v65;
        operator delete(v67);
      }
      return;
    case 4:
      v76[1] = 0;
      __p = 0;
      v76[0] = &v76[1];
      sub_207CFFB70(v76, (std::__shared_weak_count_vtbl **)v73);
      *(_OWORD *)v71 = *(_OWORD *)v73;
      sub_207CFF9E4((uint64_t)v76, (char *)v76[1]);
      LODWORD(v76[0]) = 2;
      sub_20820BA20(a1[6], v76);
      if (LODWORD(v76[0]) <= 1)
      {
        sub_207EA303C((uint64_t)v76, (uint64_t)a1, (uint64_t)v71);
      }
      else
      {
        sub_207E17CA8(a1 + 2);
        sub_207EA13D0(a1, v71, 2);
        v52 = a1[4];
        v53 = *(_QWORD *)(v52 - 16)
            - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
            + *(_QWORD *)(v52 - 8);
        if (v53)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v53);
        a1[4] -= 16;
      }
      sub_207E01D24((std::__shared_weak_count_vtbl **)v73, (uint64_t)v71);
      sub_207EA2AE8((std::__shared_weak_count_vtbl **)v76, (uint64_t)v73);
      v54 = *(_OWORD *)v76;
      v76[0] = 0;
      v76[1] = 0;
      v55 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v59 = (unint64_t *)((char *)v76[1] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)v73[1];
      if (v73[1])
      {
        v62 = (unint64_t *)((char *)v73[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v33 = (std::__shared_weak_count *)v71[1];
      if (!v71[1])
        return;
      v64 = (unint64_t *)((char *)v71[1] + 8);
      do
        v35 = __ldaxr(v64);
      while (__stlxr(v35 - 1, v64));
      break;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_207EA2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_207C99D78((uint64_t)&a13);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA2474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA2488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  sub_207CFF9E4((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void sub_207EA24A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_207C99D78((uint64_t)&a17);
  sub_207CBE108(&a9);
  sub_207E9C208(&a13);
  _Unwind_Resume(a1);
}

void sub_207EA24CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_207CBE108((void **)va1);
  sub_207E9C208((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA24EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207E9C208((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA2500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA2514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_207C99D78((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207EA2588(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207EA2698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA26AC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207EA26C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207EA26E0(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207EA27F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA2804(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207EA281C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207EA2838(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207EA2948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA295C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207EA2974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207EA2990(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207EA2AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA2AB4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207EA2ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207EA2AE8(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207EA2BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA2C0C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207EA2C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207EA2C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_207CFBA9C(&v15, i + 8);
      sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_207CFEE1C((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_207EA2D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA2D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA2DA8(uint64_t *a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFMutableArrayRef theArray[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_207CF94CC((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v6 = theArray[0];
  v5 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_30;
  }
  else
  {
LABEL_6:
    if (!v6)
      goto LABEL_30;
  }
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      v13 = *(const void **)v10;
      v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (!v12)
        goto LABEL_18;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (v13)
        {
LABEL_19:
          CFArrayAppendValue(theArray[0], v13);
          if (v12)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else
      {
LABEL_18:
        if (v13)
          goto LABEL_19;
      }
      *a2 = 0;
      a2[1] = 0;
      if (v12)
      {
LABEL_23:
        v20 = (unint64_t *)&v12->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
LABEL_27:
      if (!v13)
        goto LABEL_31;
      v10 += 16;
    }
    while (v10 != v11);
  }
  *(_OWORD *)a2 = *(_OWORD *)theArray;
  a2 = theArray;
LABEL_30:
  *a2 = 0;
  a2[1] = 0;
LABEL_31:
  v22 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v23 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_207EA2FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a10)
  {
    v14 = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207EA303C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_207CFFB70(&v16, (std::__shared_weak_count_vtbl **)&v18);
  v15 = v18;
  sub_207CFF9E4((uint64_t)&v16, *((char **)&v16 + 1));
  sub_207EA31C4(a2, (uint64_t)&v15);
  sub_208093A80((std::__shared_weak_count_vtbl **)&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207EA3184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA3198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA31AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_207CFF9E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_207EA31C4(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_207E18434(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_20820BBEC(*(_QWORD *)(a1 + 48), &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_207EA1930((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_20820BA20(*(_QWORD *)(a1 + 48), &v34);
      sub_207EA362C(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_208093578((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_207EA347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA3490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA34A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA34B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA34CC(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20820BBEC(*(_QWORD *)(a1 + 48), &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_207EA1930(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      sub_20820BA20(*(_QWORD *)(a1 + 48), &v17);
      sub_207EA362C(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_207EA362C(_QWORD *a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  char *v63;
  char *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69[2];
  void *v70;
  void *v71[2];
  uint64_t v72;
  __int128 v73;
  void *v74[2];
  void *__p;
  void *v76;
  _DWORD *v77;

  LOWORD(v74[0]) = 0;
  sub_20820B88C(a1[6], v74);
  v4 = LOWORD(v74[0]);
  *(_WORD *)a2 = v74[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v74[0]) = 7;
      LOBYTE(v74[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v76 = v5 + 1;
      v77 = v5 + 1;
      LODWORD(v71[0]) = 2;
      sub_20820BA20(a1[6], v71);
      sub_207E3E190((uint64_t)v71, a1, (unsigned __int8 *)v74, v71[0]);
      sub_207D01DD8((uint64_t)v71, (uint64_t)&v74[1]);
      v73 = *(_OWORD *)v71;
      sub_207EA2588((std::__shared_weak_count_vtbl **)v69, (uint64_t)&v73);
      v6 = *(_OWORD *)v69;
      v69[0] = 0;
      v69[1] = 0;
      v7 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v11 = (unint64_t *)((char *)v69[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (__p)
      {
        v76 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v74[0] = 0;
      v74[1] = 0;
      __p = 0;
      sub_20820C000(a1[6], v74);
      sub_207CF8F18((uint64_t)v74, (CFStringRef *)v69);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)v71, (uint64_t)v69);
      v16 = *(_OWORD *)v71;
      v71[0] = 0;
      v71[1] = 0;
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v21 = (unint64_t *)((char *)v71[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v24 = (unint64_t *)((char *)v69[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v74[0]);
      return;
    case 2:
      LOBYTE(v69[0]) = 0;
      sub_20820BF24(a1[6], v69);
      sub_207CF8E38(v69, (std::__shared_weak_count_vtbl **)v71);
      sub_207EA2838((std::__shared_weak_count_vtbl **)v74, (uint64_t)v71);
      v26 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v27 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v31 = (unint64_t *)((char *)v74[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v71[1];
      if (!v71[1])
        return;
      v34 = (unint64_t *)((char *)v71[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      break;
    case 3:
      v71[0] = 0;
      v71[1] = 0;
      v72 = 0;
      sub_207EA34CC((uint64_t)a1, (char **)v71);
      v74[1] = 0;
      __p = 0;
      v74[0] = 0;
      sub_207CFED24((uint64_t)v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v71[1] - (char *)v71[0]) >> 3));
      sub_207EA3E90((uint64_t)v71[0], (uint64_t)v71[1], (uint64_t)v74);
      *(_OWORD *)v69 = *(_OWORD *)v74;
      v70 = __p;
      sub_207EA2DA8((uint64_t *)v69, (CFMutableArrayRef *)&v73);
      sub_207EA2990((std::__shared_weak_count_vtbl **)v74, (uint64_t)&v73);
      v36 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v41 = (unint64_t *)((char *)v74[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (char *)v69[0];
      if (v69[0])
      {
        v47 = (char *)v69[1];
        v48 = v69[0];
        if (v69[1] != v69[0])
        {
          do
          {
            v49 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = v69[0];
        }
        v69[1] = v46;
        operator delete(v48);
      }
      v63 = (char *)v71[0];
      if (v71[0])
      {
        v64 = (char *)v71[1];
        v65 = v71[0];
        if (v71[1] != v71[0])
        {
          do
          {
            v66 = (std::__shared_weak_count *)*((_QWORD *)v64 - 1);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v64 -= 24;
          }
          while (v64 != v63);
          v65 = v71[0];
        }
        v71[1] = v63;
        operator delete(v65);
      }
      return;
    case 4:
      v74[1] = 0;
      __p = 0;
      v74[0] = &v74[1];
      sub_207CFFB70(v74, (std::__shared_weak_count_vtbl **)v71);
      *(_OWORD *)v69 = *(_OWORD *)v71;
      sub_207CFF9E4((uint64_t)v74, (char *)v74[1]);
      LODWORD(v74[0]) = 1;
      sub_20820BA20(a1[6], v74);
      sub_207EA31C4((uint64_t)a1, (uint64_t)v69);
      sub_207E01D24((std::__shared_weak_count_vtbl **)v71, (uint64_t)v69);
      sub_207EA2AE8((std::__shared_weak_count_vtbl **)v74, (uint64_t)v71);
      v52 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v53 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v52;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v57 = (unint64_t *)((char *)v74[1] + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v60 = (unint64_t *)((char *)v71[1] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v33 = (std::__shared_weak_count *)v69[1];
      if (!v69[1])
        return;
      v62 = (unint64_t *)((char *)v69[1] + 8);
      do
        v35 = __ldaxr(v62);
      while (__stlxr(v35 - 1, v62));
      break;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_207EA3D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_207C99D78((uint64_t)&a13);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA3D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA3D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  sub_207CFF9E4((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void sub_207EA3DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_207C99D78((uint64_t)&a17);
  sub_207CBE108(&a9);
  sub_207E9C208(&a13);
  _Unwind_Resume(a1);
}

void sub_207EA3DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_207CBE108((void **)va1);
  sub_207E9C208((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA3DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207E9C208((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA3E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA3E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_207C99D78((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207EA3E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_207CFBA9C(&v15, i + 8);
      sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_207CFEE1C((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_207EA3FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA3FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA3FF8(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_207CFFB70(&v8, (std::__shared_weak_count_vtbl **)&v10);
  v7 = v10;
  sub_207CFF9E4((uint64_t)&v8, v9[0]);
  sub_207EA13D0(a1, (uint64_t)&v7);
  sub_207EA0FC8(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_207EA40B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA40CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207EA4110(uint64_t a1, _QWORD *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5AC0(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_208097288(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_207EA420C((uint64_t)&v11, a1, a2, v6);
  else
    sub_207EA4310(a1, a2, 2u);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_207EA420C(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_20806CB1C(&v17);
  sub_207EA46E8(a2, &v17, a4);
  v8 = v17;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a3[1];
  *a3 = v8;
  a3[1] = v7;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_207EA42FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4310(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  char **v20;
  char *v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_207CFFB70(&v20, (std::__shared_weak_count_vtbl **)&v22);
    v19 = v22;
    sub_207CFF9E4((uint64_t)&v20, v21[0]);
    sub_207EA4568(a1, (uint64_t)&v19);
    sub_207EA0C5C((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = operator new(0x10uLL);
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_207D1D968((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (char *)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_207D20660((uint64_t *)v21, v8);
    v10 = operator new(0xC0uLL);
    sub_20806C154((uint64_t)v10, (uint64_t *)&v22);
    v11 = operator new(0x20uLL);
    *v11 = &off_24C082A28;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (uint64_t *)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_207D20660(v15 + 1, *(unsigned __int8 *)v15);
      operator delete(v15);
    }
  }
}

void sub_207EA44E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA4500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20806D14C((uint64_t)v7);
  operator delete(v7);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA452C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA4540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA4568(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (uint64_t *)operator new(0x10uLL);
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_207D1D968((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = *((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_207D20660((uint64_t *)&v19 + 1, v7);
  v17 = v5;
  sub_2080949A0((uint64_t *)&v17, (std::__shared_weak_count_vtbl **)&v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_207D20660(v18 + 1, *(unsigned __int8 *)v18);
    operator delete(v16);
  }
}

void sub_207EA46C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA46D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA46E8(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  char **v20;
  char *v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_207CFFB70(&v20, (std::__shared_weak_count_vtbl **)&v22);
    v19 = v22;
    sub_207CFF9E4((uint64_t)&v20, v21[0]);
    sub_207EA4568(a1, (uint64_t)&v19);
    sub_207EA0FC8((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = operator new(0x10uLL);
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_207D1D968((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (char *)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_207D20660((uint64_t *)v21, v8);
    v10 = operator new(0xC0uLL);
    sub_20806C154((uint64_t)v10, (uint64_t *)&v22);
    v11 = operator new(0x20uLL);
    *v11 = &off_24C082A28;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (uint64_t *)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_207D20660(v15 + 1, *(unsigned __int8 *)v15);
      operator delete(v15);
    }
  }
}

void sub_207EA48C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA48D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20806D14C((uint64_t)v7);
  operator delete(v7);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA4904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA4918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_207EA4940(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_207CFFB70(&v8, (std::__shared_weak_count_vtbl **)&v10);
  v7 = v10;
  sub_207CFF9E4((uint64_t)&v8, v9[0]);
  sub_207EA4B5C(a1, (uint64_t)&v7);
  sub_207EA0C5C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_207EA49FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA4A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207EA4A58(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20806CB1C(&v15);
  sub_207EA7024(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207EA4B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4B5C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v15;
  char v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  void **v31;
  void *v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  unint64_t v36;
  void *__p[2];
  char v38;

  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_207E1BF18(a1, (char **)v33);
  v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  sub_20820A270(a1, &v36);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  v6 = v36 - v5;
  if (v36 > v5)
  {
    sub_207EA1930((char **)&v34[1], v6);
    v7 = (char *)v34[1];
    v8 = (char *)v35;
    if ((void *)v35 != v34[1])
      goto LABEL_18;
    goto LABEL_44;
  }
  if (v36 < v5)
  {
    v8 = (char *)v34[1] + 24 * v36;
    while (v4 != v8)
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v9->__on_zero_shared)(v9, v6);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 -= 24;
    }
    *(_QWORD *)&v35 = v8;
    v7 = (char *)v34[1];
    if (v8 == v34[1])
      goto LABEL_44;
LABEL_18:
    while (1)
    {
      LODWORD(__p[0]) = 2;
      sub_208209DC8(a1, __p);
      v12 = __p[0];
      v13 = LODWORD(__p[0]) >= 2 ? 2 : LODWORD(__p[0]);
      if (v13 < 2)
        sub_207EA515C((uint64_t)__p, a1, (uint64_t)v7);
      else
        sub_207EA5314(a1, (uint64_t)v7);
      if (v12 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == v8)
        goto LABEL_44;
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_20820B068(a1, (uint64_t)__p);
      if (v38 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_40:
          v16 = 0;
          if (v38 < 0)
            goto LABEL_43;
          goto LABEL_29;
        }
      }
      else if (v38 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_40;
      }
      v16 = 1;
      if (v38 < 0)
LABEL_43:
        operator delete(__p[0]);
LABEL_29:
      if (*(_BYTE *)(a1 + 131))
        v15 = 0;
      else
        v15 = v16;
      if ((v15 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = (char *)v35;
  v7 = (char *)v34[1];
  if ((void *)v35 != v34[1])
    goto LABEL_18;
LABEL_44:
  sub_2080941EC((uint64_t *)v33, (void ***)__p);
  v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v18 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (char *)v34[1];
  if (v34[1])
  {
    v25 = (char *)v35;
    v26 = v34[1];
    if ((void *)v35 != v34[1])
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 24;
      }
      while (v25 != v24);
      v26 = v34[1];
    }
    *(_QWORD *)&v35 = v24;
    operator delete(v26);
  }
  v30 = (void **)v33[0];
  if (v33[0])
  {
    v31 = (void **)v33[1];
    v32 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v31 - 1) < 0)
          operator delete(*(v31 - 3));
        v31 -= 3;
      }
      while (v31 != v30);
      v32 = v33[0];
    }
    v33[1] = v30;
    operator delete(v32);
  }
}

void sub_207EA4ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA4F34(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v17;
  char v18;
  unint64_t v19;
  void *__p[2];
  char v21;

  v19 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20820A270(a1, &v19);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v19 - v5;
  if (v19 > v5)
  {
    sub_207EA1930(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = (uint64_t)v9[1];
    if ((char *)v8 != v7)
      goto LABEL_18;
    return;
  }
  if (v19 < v5)
  {
    v8 = (uint64_t)&(*a2)[24 * v19];
    while (v4 != (char *)v8)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 -= 24;
    }
    a2[1] = (char *)v8;
    v7 = *a2;
    if ((char *)v8 == v7)
      return;
    while (1)
    {
LABEL_18:
      LODWORD(__p[0]) = 2;
      sub_208209DC8(a1, __p);
      v13 = __p[0];
      if (LODWORD(__p[0]) >= 2)
        v14 = 2;
      else
        v14 = __p[0];
      if (v14 >= 2)
      {
        sub_207EA5314(a1, v7, 2);
        if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
          goto LABEL_36;
        goto LABEL_17;
      }
      sub_207EA515C((uint64_t)__p, a1, (uint64_t)v7);
      if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == (char *)v8)
        return;
    }
    while (1)
    {
LABEL_36:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_20820B068(a1, (uint64_t)__p);
      if (v21 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_43:
          v18 = 0;
          if (v21 < 0)
            goto LABEL_46;
          goto LABEL_32;
        }
      }
      else if (v21 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_43;
      }
      v18 = 1;
      if (v21 < 0)
LABEL_46:
        operator delete(__p[0]);
LABEL_32:
      if (*(_BYTE *)(a1 + 131))
        v17 = 0;
      else
        v17 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = (uint64_t)a2[1];
  v7 = *a2;
  if (v4 != v7)
    goto LABEL_18;
}

void sub_207EA515C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_207EA650C(a2, (uint64_t)&v19);
  v4 = v19;
  sub_207CFBA9C(&v22, (uint64_t)&v20);
  sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_207EA52D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA52EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA5300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA5314(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81[2];
  void *v82;
  __int128 v83;
  void *v84[2];
  void *__p;
  void *v86;
  _DWORD *v87;
  __int128 v88;
  void *v89;

  LOWORD(v84[0]) = 0;
  sub_208209920(a1, v84);
  v4 = LOWORD(v84[0]);
  *(_WORD *)a2 = v84[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v84[0]) = 7;
      LOBYTE(v84[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v86 = v5 + 1;
      v87 = v5 + 1;
      LODWORD(v88) = 2;
      sub_208209DC8(a1, &v88);
      v6 = v88;
      if (v88 >= 2)
        v7 = 2;
      else
        v7 = v88;
      if (v7 < 2)
      {
        sub_207E3F710((uint64_t)&v88, a1, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v88) = 0;
        sub_208209484(a1, &v88);
        LOBYTE(v84[0]) = v88;
        sub_207E3F894(v88, a1, (uint64_t)v84);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_75;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_20820B068(a1, (uint64_t)&v88);
          if (SHIBYTE(v89) < 0)
          {
            if (*((_QWORD *)&v88 + 1) != 1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v88)
            {
LABEL_92:
              v57 = 1;
              if ((SHIBYTE(v89) & 0x80000000) == 0)
                goto LABEL_93;
              goto LABEL_105;
            }
          }
          else if (SHIBYTE(v89) != 1 || *(unsigned __int8 *)(a1 + 72) != v88)
          {
            goto LABEL_92;
          }
          v57 = 0;
          if ((SHIBYTE(v89) & 0x80000000) == 0)
          {
LABEL_93:
            if (*(_BYTE *)(a1 + 131))
              v58 = 0;
            else
              v58 = v57;
            if ((v58 & 1) == 0)
              break;
            continue;
          }
LABEL_105:
          operator delete((void *)v88);
          if (*(_BYTE *)(a1 + 131))
            v59 = 0;
          else
            v59 = v57;
          if ((v59 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_75:
      sub_207D01DD8((uint64_t)&v88, (uint64_t)&v84[1]);
      v83 = v88;
      sub_207EA2588((std::__shared_weak_count_vtbl **)v81, (uint64_t)&v83);
      v47 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v52 = (unint64_t *)((char *)v81[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (__p)
      {
        v86 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v88 = 0uLL;
      v89 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_20820B068(a1, (uint64_t)v84);
        v36 = *(_QWORD *)(a1 + 104);
        v88 = *(_OWORD *)v84;
        v89 = __p;
        *(_QWORD *)(a1 + 104) = v36 + 1;
      }
      sub_207CF8F18((uint64_t)&v88, (CFStringRef *)v81);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)v84, (uint64_t)v81);
      v37 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v38 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v37;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v42 = (unint64_t *)((char *)v84[1] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v45 = (unint64_t *)((char *)v81[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (SHIBYTE(v89) < 0)
        operator delete((void *)v88);
      return;
    case 2:
      LOBYTE(v81[0]) = 0;
      sub_20820ABE8(a1, v81);
      sub_207CF8E38(v81, (std::__shared_weak_count_vtbl **)&v88);
      sub_207EA2838((std::__shared_weak_count_vtbl **)v84, (uint64_t)&v88);
      v8 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v13 = (unint64_t *)((char *)v84[1] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_132;
      }
      return;
    case 3:
      v88 = 0uLL;
      v89 = 0;
      sub_207EA4F34(a1, (char **)&v88);
      v84[1] = 0;
      __p = 0;
      v84[0] = 0;
      sub_207CFED24((uint64_t)v84, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 3));
      sub_207EA5DB8(v88, *((uint64_t *)&v88 + 1), (uint64_t)v84);
      *(_OWORD *)v81 = *(_OWORD *)v84;
      v82 = __p;
      sub_207EA2DA8((uint64_t *)v81, (CFMutableArrayRef *)&v83);
      sub_207EA2990((std::__shared_weak_count_vtbl **)v84, (uint64_t)&v83);
      v20 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v21 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v20;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v25 = (unint64_t *)((char *)v84[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (char *)v81[0];
      if (v81[0])
      {
        v31 = (char *)v81[1];
        v32 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v33 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v31 -= 16;
          }
          while (v31 != v30);
          v32 = v81[0];
        }
        v81[1] = v30;
        operator delete(v32);
      }
      v75 = v88;
      if ((_QWORD)v88)
      {
        v76 = *((_QWORD *)&v88 + 1);
        v77 = (void *)v88;
        if (*((_QWORD *)&v88 + 1) != (_QWORD)v88)
        {
          do
          {
            v78 = *(std::__shared_weak_count **)(v76 - 8);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v76 -= 24;
          }
          while (v76 != v75);
          v77 = (void *)v88;
        }
        *((_QWORD *)&v88 + 1) = v75;
        operator delete(v77);
      }
      return;
    case 4:
      v84[1] = 0;
      __p = 0;
      v84[0] = &v84[1];
      sub_207CFFB70(v84, (std::__shared_weak_count_vtbl **)&v88);
      *(_OWORD *)v81 = v88;
      sub_207CFF9E4((uint64_t)v84, (char *)v84[1]);
      LODWORD(v84[0]) = 2;
      sub_208209DC8(a1, v84);
      v18 = v84[0];
      if (LODWORD(v84[0]) >= 2)
        v19 = 2;
      else
        v19 = v84[0];
      if (v19 < 2)
        sub_207EA5F20((uint64_t)v84, a1, (uint64_t)v81);
      else
        sub_207EA4B5C(a1, v81, 2);
      if (v18 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_113;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_20820B068(a1, (uint64_t)v84);
          if (SHIBYTE(__p) < 0)
          {
            if (v84[1] != (void *)1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v84[0])
            {
LABEL_133:
              v72 = 1;
              if ((SHIBYTE(__p) & 0x80000000) == 0)
                goto LABEL_134;
              goto LABEL_146;
            }
          }
          else if (SHIBYTE(__p) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(v84[0]))
          {
            goto LABEL_133;
          }
          v72 = 0;
          if ((SHIBYTE(__p) & 0x80000000) == 0)
          {
LABEL_134:
            if (*(_BYTE *)(a1 + 131))
              v73 = 0;
            else
              v73 = v72;
            if ((v73 & 1) == 0)
              break;
            continue;
          }
LABEL_146:
          operator delete(v84[0]);
          if (*(_BYTE *)(a1 + 131))
            v74 = 0;
          else
            v74 = v72;
          if ((v74 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_113:
      sub_207E01D24((std::__shared_weak_count_vtbl **)&v88, (uint64_t)v81);
      sub_207EA2AE8((std::__shared_weak_count_vtbl **)v84, (uint64_t)&v88);
      v60 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v61 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v60;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v65 = (unint64_t *)((char *)v84[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v15 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v70 = (unint64_t *)((char *)v81[1] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
LABEL_132:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
}

void sub_207EA5C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78(v9 - 64);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA5C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA5C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_207C99D78((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_207EA5DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_207CFBA9C(&v15, i + 8);
      sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_207CFEE1C((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_207EA5EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA5F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA5F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_207CFFB70(&v16, (std::__shared_weak_count_vtbl **)&v18);
  v15 = v18;
  sub_207CFF9E4((uint64_t)&v16, *((char **)&v16 + 1));
  sub_207EA60A8(a2, (uint64_t)&v15);
  sub_208093A80((std::__shared_weak_count_vtbl **)&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207EA6068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA607C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA6090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_207CFF9E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_207EA60A8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_207E1BF18(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_20820A270(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_207EA1930((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_208209DC8(a1, &v34);
      sub_207EA650C(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_208093578((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_207EA6360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA6374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA6388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207E9C128((void **)va);
  _Unwind_Resume(a1);
}

void sub_207EA63B0(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20820A270(a1, &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_207EA1930(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      sub_208209DC8(a1, &v17);
      sub_207EA650C(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_207EA650C(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76[2];
  void *v77;
  __int128 v78;
  __int128 v79;
  void *__p;
  void *v81;
  _DWORD *v82;
  __int128 v83;
  void *v84;

  LOWORD(v79) = 0;
  sub_208209920(a1, &v79);
  v4 = (unsigned __int16)v79;
  *(_WORD *)a2 = v79;
  switch(v4)
  {
    case 0:
      LOBYTE(v79) = 7;
      BYTE8(v79) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v81 = v5 + 1;
      v82 = v5 + 1;
      LODWORD(v83) = 2;
      sub_208209DC8(a1, &v83);
      v6 = v83;
      if (v83 >= 2)
        v7 = 2;
      else
        v7 = v83;
      if (v7 < 2)
      {
        sub_207E3F710((uint64_t)&v83, a1, (uint64_t)&v79);
      }
      else
      {
        LOBYTE(v83) = 0;
        sub_208209484(a1, &v83);
        LOBYTE(v79) = v83;
        sub_207E3F894(v83, a1, (uint64_t)&v79);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_90;
      break;
    case 1:
      v83 = 0uLL;
      v84 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_20820B068(a1, (uint64_t)&v79);
        v46 = *(_QWORD *)(a1 + 104);
        v83 = v79;
        v84 = __p;
        *(_QWORD *)(a1 + 104) = v46 + 1;
      }
      sub_207CF8F18((uint64_t)&v83, (CFStringRef *)v76);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)&v79, (uint64_t)v76);
      v47 = v79;
      v79 = 0uLL;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v55 = (unint64_t *)((char *)v76[1] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (SHIBYTE(v84) < 0)
        operator delete((void *)v83);
      return;
    case 2:
      LOBYTE(v76[0]) = 0;
      sub_20820ABE8(a1, v76);
      sub_207CF8E38(v76, (std::__shared_weak_count_vtbl **)&v83);
      sub_207EA2838((std::__shared_weak_count_vtbl **)&v79, (uint64_t)&v83);
      v8 = v79;
      v79 = 0uLL;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_41;
      }
      return;
    case 3:
      v83 = 0uLL;
      v84 = 0;
      sub_207EA63B0(a1, (char **)&v83);
      __p = 0;
      v79 = 0uLL;
      sub_207CFED24((uint64_t)&v79, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v83 + 1) - v83) >> 3));
      sub_207EA6EBC(v83, *((uint64_t *)&v83 + 1), (uint64_t)&v79);
      *(_OWORD *)v76 = v79;
      v77 = __p;
      sub_207EA2DA8((uint64_t *)v76, (CFMutableArrayRef *)&v78);
      sub_207EA2990((std::__shared_weak_count_vtbl **)&v79, (uint64_t)&v78);
      v30 = v79;
      v79 = 0uLL;
      v31 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (char *)v76[0];
      if (v76[0])
      {
        v41 = (char *)v76[1];
        v42 = v76[0];
        if (v76[1] != v76[0])
        {
          do
          {
            v43 = (std::__shared_weak_count *)*((_QWORD *)v41 - 1);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v41 -= 16;
          }
          while (v41 != v40);
          v42 = v76[0];
        }
        v76[1] = v40;
        operator delete(v42);
      }
      v70 = v83;
      if ((_QWORD)v83)
      {
        v71 = *((_QWORD *)&v83 + 1);
        v72 = (void *)v83;
        if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
        {
          do
          {
            v73 = *(std::__shared_weak_count **)(v71 - 8);
            if (v73)
            {
              v74 = (unint64_t *)&v73->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v71 -= 24;
          }
          while (v71 != v70);
          v72 = (void *)v83;
        }
        *((_QWORD *)&v83 + 1) = v70;
        operator delete(v72);
      }
      return;
    case 4:
      *((_QWORD *)&v79 + 1) = 0;
      __p = 0;
      *(_QWORD *)&v79 = (char *)&v79 + 8;
      sub_207CFFB70(&v79, (std::__shared_weak_count_vtbl **)&v83);
      *(_OWORD *)v76 = v83;
      sub_207CFF9E4((uint64_t)&v79, *((char **)&v79 + 1));
      LODWORD(v79) = 1;
      sub_208209DC8(a1, &v79);
      sub_207EA60A8(a1, (uint64_t)v76);
      sub_207E01D24((std::__shared_weak_count_vtbl **)&v83, (uint64_t)v76);
      sub_207EA2AE8((std::__shared_weak_count_vtbl **)&v79, (uint64_t)&v83);
      v18 = v79;
      v79 = 0uLL;
      v19 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v18;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v15 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v28 = (unint64_t *)((char *)v76[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
LABEL_41:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
  while ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    sub_20820B068(a1, (uint64_t)&v83);
    if (SHIBYTE(v84) < 0)
    {
      if (*((_QWORD *)&v83 + 1) == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v83)
        goto LABEL_119;
LABEL_107:
      v67 = 1;
      if (SHIBYTE(v84) < 0)
        goto LABEL_120;
LABEL_108:
      if (*(_BYTE *)(a1 + 131))
        v68 = 0;
      else
        v68 = v67;
      if ((v68 & 1) == 0)
        break;
    }
    else
    {
      if (SHIBYTE(v84) != 1 || *(unsigned __int8 *)(a1 + 72) != v83)
        goto LABEL_107;
LABEL_119:
      v67 = 0;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_108;
LABEL_120:
      operator delete((void *)v83);
      if (*(_BYTE *)(a1 + 131))
        v69 = 0;
      else
        v69 = v67;
      if ((v69 & 1) == 0)
        break;
    }
  }
LABEL_90:
  sub_207D01DD8((uint64_t)&v83, (uint64_t)&v79 + 8);
  v78 = v83;
  sub_207EA2588((std::__shared_weak_count_vtbl **)v76, (uint64_t)&v78);
  v57 = *(_OWORD *)v76;
  v76[0] = 0;
  v76[1] = 0;
  v58 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v57;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)v76[1];
  if (v76[1])
  {
    v62 = (unint64_t *)((char *)v76[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
}

void sub_207EA6D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_207C99D78((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_207EA6EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_207CFBA9C(&v15, i + 8);
      sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_207CFEE1C((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_207EA6FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA7010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA7024(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_207CFFB70(&v8, (std::__shared_weak_count_vtbl **)&v10);
  v7 = v10;
  sub_207CFF9E4((uint64_t)&v8, v9[0]);
  sub_207EA4B5C(a1, (uint64_t)&v7);
  sub_207EA0FC8(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_207EA70E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA70F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207EA713C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207EA7348((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207EA7230(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207EA721C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207EA7230(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_207CFFB70(&v8, (std::__shared_weak_count_vtbl **)&v10);
  v7 = v10;
  sub_207CFF9E4((uint64_t)&v8, v9[0]);
  sub_207EA744C(a1, (uint64_t)&v7);
  sub_207EA0C5C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_207EA72EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207EA7304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207EA7348(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_20806CB1C(&v15);
  sub_207EA99B0(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207EA7438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA744C(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  std::logic_error *exception;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  __int128 v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_207E1D690(a1, (uint64_t)v33);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v35;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v12 = (char *)v35;
    }
    else
    {
      v12 = (char *)__p[1] + 24 * v8;
      while (v9 != v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 24;
      }
      *(_QWORD *)&v35 = v12;
    }
  }
  else
  {
    sub_207EA1930((char **)&__p[1], v11);
    v12 = (char *)v35;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)__p[1]) >> 3);
  *((void **)&v36 + 1) = __p[1];
  sub_207EA78E8(a1, &v36);
  sub_2080941EC((uint64_t *)v33, (void ***)&v36);
  v16 = v36;
  v36 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_207EA7700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA7730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA7744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA7758(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  int64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_207EA1930(a2, v12);
    v15 = a2;
    v13 = *a2;
    v14 = v15[1];
    v16 = v14 - v13;
    if (v14 == v13)
      return;
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    v13 = *a2;
    v16 = v10 - v13;
    if (v10 == v13)
      return;
    goto LABEL_19;
  }
  v17 = &v9[24 * v8];
  while (v10 != v17)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 -= 24;
  }
  a2[1] = v17;
  v13 = *a2;
  v16 = v17 - v13;
  if (v17 != v13)
  {
LABEL_19:
    v21 = 24 * (v16 / 24);
    do
    {
      sub_207EA7A00((uint64_t)&v23, a1, (uint64_t)v13);
      v13 += 24;
      v21 -= 24;
    }
    while (v21);
  }
}

void sub_207EA78D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207EA78E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  std::logic_error *exception;
  char v13;

  if (*a2)
  {
    v3 = a2[1];
    v4 = 24 * *a2;
    do
    {
      while (1)
      {
        v7 = a1[6];
        v8 = a1[7];
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (!v9)
          v10 = 0;
        if (v10 <= 3)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_207CA4068(exception, "Not enough data to read");
          __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
        }
        v11 = *(_DWORD *)(a1[3] + v7);
        a1[6] = v7 + 4;
        if (v11 <= 1)
          break;
        sub_208072ECC(a1);
        sub_207EA7CAC(a1, v3);
        v5 = a1[12];
        v6 = a1[9];
        a1[6] = *(_QWORD *)(v5 - 8) + *(_QWORD *)(v6 - 8) + 8;
        a1[9] = v6 - 8;
        a1[12] = v5 - 8;
        v3 += 24;
        v4 -= 24;
        if (!v4)
          return;
      }
      sub_207EA7AF4((uint64_t)&v13, a1, v3);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
}

void sub_207EA79EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207EA7A00(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_207EA7AF4((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_208072ECC(a2);
    sub_207EA7CAC(a2, a3, 2);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_207EA7AE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207EA7AF4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_207EA8F08(a2, (uint64_t)&v19);
  v4 = v19;
  sub_207CFBA9C(&v22, (uint64_t)&v20);
  sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_207EA7C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA7C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA7C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA7CAC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::logic_error *exception;
  std::logic_error *v83;
  void *v84[2];
  void *v85;
  void *v86[2];
  uint64_t v87;
  __int128 v88;
  void *v89[2];
  void *__p;
  void *v91;
  _DWORD *v92;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_119:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v89[0]) = 7;
      LOBYTE(v89[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v91 = v10 + 1;
      v92 = v10 + 1;
      sub_207E3FE24((uint64_t)v86, a1, v89);
      sub_207D01DD8((uint64_t)v86, (uint64_t)&v89[1]);
      v88 = *(_OWORD *)v86;
      sub_207EA2588((std::__shared_weak_count_vtbl **)v84, (uint64_t)&v88);
      v11 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v16 = (unint64_t *)((char *)v84[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v91 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v89[0] = 0;
      v89[1] = 0;
      __p = 0;
      sub_20807321C(a1, (uint64_t)v89);
      sub_207CF8F18((uint64_t)v89, (CFStringRef *)v84);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)v86, (uint64_t)v84);
      v54 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v55 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v59 = (unint64_t *)((char *)v86[1] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v62 = (unint64_t *)((char *)v84[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v89[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_119;
      LOBYTE(v84[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_207CF8E38(v84, (std::__shared_weak_count_vtbl **)v86);
      sub_207EA2838((std::__shared_weak_count_vtbl **)v89, (uint64_t)v86);
      v28 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v29 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v33 = (unint64_t *)((char *)v89[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v36 = (unint64_t *)((char *)v86[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
LABEL_104:
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      return;
    case 3:
      v86[0] = 0;
      v86[1] = 0;
      v87 = 0;
      sub_207EA7758(a1, (char **)v86);
      v89[1] = 0;
      __p = 0;
      v89[0] = 0;
      sub_207CFED24((uint64_t)v89, 0xAAAAAAAAAAAAAAABLL * (((char *)v86[1] - (char *)v86[0]) >> 3));
      sub_207EA8638((uint64_t)v86[0], (uint64_t)v86[1], (uint64_t)v89);
      *(_OWORD *)v84 = *(_OWORD *)v89;
      v85 = __p;
      sub_207EA2DA8((uint64_t *)v84, (CFMutableArrayRef *)&v88);
      sub_207EA2990((std::__shared_weak_count_vtbl **)v89, (uint64_t)&v88);
      v38 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v43 = (unint64_t *)((char *)v89[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (char *)v84[0];
      if (v84[0])
      {
        v49 = (char *)v84[1];
        v50 = v84[0];
        if (v84[1] != v84[0])
        {
          do
          {
            v51 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v49 -= 16;
          }
          while (v49 != v48);
          v50 = v84[0];
        }
        v84[1] = v48;
        operator delete(v50);
      }
      v76 = (char *)v86[0];
      if (v86[0])
      {
        v77 = (char *)v86[1];
        v78 = v86[0];
        if (v86[1] != v86[0])
        {
          do
          {
            v79 = (std::__shared_weak_count *)*((_QWORD *)v77 - 1);
            if (v79)
            {
              v80 = (unint64_t *)&v79->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v77 -= 24;
          }
          while (v77 != v76);
          v78 = v86[0];
        }
        v86[1] = v76;
        operator delete(v78);
      }
      return;
    case 4:
      v89[1] = 0;
      __p = 0;
      v89[0] = &v89[1];
      sub_207CFFB70(v89, (std::__shared_weak_count_vtbl **)v86);
      *(_OWORD *)v84 = *(_OWORD *)v86;
      sub_207CFF9E4((uint64_t)v89, (char *)v89[1]);
      v21 = a1[6];
      v22 = a1[7];
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
        v24 = 0;
      if (v24 <= 3)
      {
        v83 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v83, "Not enough data to read");
        v83->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v83, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
      }
      v25 = *(_DWORD *)(a1[3] + v21);
      a1[6] = v21 + 4;
      if (v25 <= 1)
      {
        sub_207EA87A0((uint64_t)v89, a1, (uint64_t)v84);
      }
      else
      {
        sub_208072ECC(a1);
        sub_207EA744C(a1, v84, 2);
        v26 = a1[12];
        v27 = a1[9];
        a1[6] = *(_QWORD *)(v26 - 8) + *(_QWORD *)(v27 - 8) + 8;
        a1[9] = v27 - 8;
        a1[12] = v26 - 8;
      }
      sub_207E01D24((std::__shared_weak_count_vtbl **)v86, (uint64_t)v84);
      sub_207EA2AE8((std::__shared_weak_count_vtbl **)v89, (uint64_t)v86);
      v64 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v65 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v64;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v69 = (unint64_t *)((char *)v89[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v72 = (unint64_t *)((char *)v86[1] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v35 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v74 = (unint64_t *)((char *)v84[1] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
          goto LABEL_104;
      }
      return;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
}

void sub_207EA84C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA84E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207EA84F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_207C99D78((uint64_t)&a13);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA8510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_207C99D78((uint64_t)&a17);
  sub_207CBE108(&a9);
  sub_207E9C208(&a13);
  _Unwind_Resume(a1);
}

void sub_207EA8550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_207C99D78((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207EA8610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA8624(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207EA8638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_207CFBA9C(&v15, i + 8);
      sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_207CFEE1C((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_207EA8770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA878C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CBD7E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207EA87A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_207CFFB70(&v16, (std::__shared_weak_count_vtbl **)&v18);
  v15 = v18;
  sub_207CFF9E4((uint64_t)&v16, *((char **)&v16 + 1));
  sub_207EA8928(a2, (uint64_t)&v15);
  sub_208093A80((std::__shared_weak_count_vtbl **)&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_207EA88E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA88FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207EA8910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_207CFF9E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_207EA8928(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  std::logic_error *exception;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  __int128 v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_207E1D690(a1, (uint64_t)v33);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v35;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v12 = (char *)v35;
    }
    else
    {
      v12 = (char *)__p[1] + 24 * v8;
      while (v9 != v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 24;
      }
      *(_QWORD *)&v35 = v12;
    }
  }
  else
  {
    sub_207EA1930((char **)&__p[1], v11);
    v12 = (char *)v35;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)__p[1]) >> 3);
  *((void **)&v36 + 1) = __p[1];
  sub_207EA8DC4((uint64_t)a1, &v36);
  sub_208093578((uint64_t *)v33, (void ***)&v36);
  v16 = v36;
  v36 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_207EA8BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA8BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA8C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA8C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207E9C128(&a9);
  _Unwind_Resume(a1);
}

void sub_207EA8C34(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  int64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_207EA1930(a2, v12);
    v15 = a2;
    v13 = *a2;
    v14 = v15[1];
    v16 = v14 - v13;
    if (v14 == v13)
      return;
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    v13 = *a2;
    v16 = v10 - v13;
    if (v10 == v13)
      return;
    goto LABEL_19;
  }
  v17 = &v9[24 * v8];
  while (v10 != v17)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 -= 24;
  }
  a2[1] = v17;
  v13 = *a2;
  v16 = v17 - v13;
  if (v17 != v13)
  {
LABEL_19:
    v21 = 24 * (v16 / 24);
    do
    {
      sub_207EA8E7C((uint64_t)&v23, a1, (uint64_t)v13);
      v13 += 24;
      v21 -= 24;
    }
    while (v21);
  }
}

void sub_207EA8DB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207EA8DC4(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  std::logic_error *exception;

  if (*a2)
  {
    v2 = (_QWORD *)result;
    v3 = a2[1];
    v4 = 24 * *a2;
    do
    {
      v5 = v2[6];
      v6 = v2[7];
      v7 = v6 >= v5;
      v8 = v6 - v5;
      if (!v7)
        v8 = 0;
      if (v8 <= 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_207CA4068(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
      }
      v9 = *(unsigned int *)(v2[3] + v5);
      v2[6] = v5 + 4;
      result = sub_207EA8F08(v2, v3, v9);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

void sub_207EA8E68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207EA8E7C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::logic_error *exception;

  v4 = a2[6];
  v3 = a2[7];
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v7 = *(unsigned int *)(a2[3] + v4);
  a2[6] = v4 + 4;
  return sub_207EA8F08(a2, a3, v7);
}

void sub_207EA8EF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207EA8F08(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::logic_error *exception;
  std::logic_error *v80;
  void *v81[2];
  void *v82;
  void *v83[2];
  uint64_t v84;
  __int128 v85;
  void *v86[2];
  void *__p;
  void *v88;
  _DWORD *v89;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_116:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v86[0]) = 7;
      LOBYTE(v86[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v88 = v10 + 1;
      v89 = v10 + 1;
      sub_207E3FE24((uint64_t)v83, a1, v86);
      sub_207D01DD8((uint64_t)v83, (uint64_t)&v86[1]);
      v85 = *(_OWORD *)v83;
      sub_207EA2588((std::__shared_weak_count_vtbl **)v81, (uint64_t)&v85);
      v11 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v16 = (unint64_t *)((char *)v81[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v88 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v86[0] = 0;
      v86[1] = 0;
      __p = 0;
      sub_20807321C(a1, (uint64_t)v86);
      sub_207CF8F18((uint64_t)v86, (CFStringRef *)v81);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)v83, (uint64_t)v81);
      v63 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v64 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v63;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v68 = (unint64_t *)((char *)v83[1] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v71 = (unint64_t *)((char *)v81[1] + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v86[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_116;
      LOBYTE(v81[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_207CF8E38(v81, (std::__shared_weak_count_vtbl **)v83);
      sub_207EA2838((std::__shared_weak_count_vtbl **)v86, (uint64_t)v83);
      v38 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v43 = (unint64_t *)((char *)v86[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v35 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v45 = (unint64_t *)((char *)v83[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
LABEL_60:
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      return;
    case 3:
      v83[0] = 0;
      v83[1] = 0;
      v84 = 0;
      sub_207EA8C34(a1, (char **)v83);
      v86[1] = 0;
      __p = 0;
      v86[0] = 0;
      sub_207CFED24((uint64_t)v86, 0xAAAAAAAAAAAAAAABLL * (((char *)v83[1] - (char *)v83[0]) >> 3));
      sub_207EA9848((uint64_t)v83[0], (uint64_t)v83[1], (uint64_t)v86);
      *(_OWORD *)v81 = *(_OWORD *)v86;
      v82 = __p;
      sub_207EA2DA8((uint64_t *)v81, (CFMutableArrayRef *)&v85);
      sub_207EA2990((std::__shared_weak_count_vtbl **)v86, (uint64_t)&v85);
      v47 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v52 = (unint64_t *)((char *)v86[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (char *)v81[0];
      if (v81[0])
      {
        v58 = (char *)v81[1];
        v59 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v60 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v58 -= 16;
          }
          while (v58 != v57);
          v59 = v81[0];
        }
        v81[1] = v57;
        operator delete(v59);
      }
      v73 = (char *)v83[0];
      if (v83[0])
      {
        v74 = (char *)v83[1];
        v75 = v83[0];
        if (v83[1] != v83[0])
        {
          do
          {
            v76 = (std::__shared_weak_count *)*((_QWORD *)v74 - 1);
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v74 -= 24;
          }
          while (v74 != v73);
          v75 = v83[0];
        }
        v83[1] = v73;
        operator delete(v75);
      }
      return;
    case 4:
      v86[1] = 0;
      __p = 0;
      v86[0] = &v86[1];
      sub_207CFFB70(v86, (std::__shared_weak_count_vtbl **)v83);
      *(_OWORD *)v81 = *(_OWORD *)v83;
      sub_207CFF9E4((uint64_t)v86, (char *)v86[1]);
      v21 = a1[6];
      v22 = a1[7];
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
        v24 = 0;
      if (v24 <= 3)
      {
        v80 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v80, "Not enough data to read");
        v80->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v80, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
      }
      a1[6] = v21 + 4;
      sub_207EA8928(a1, (uint64_t)v81);
      sub_207E01D24((std::__shared_weak_count_vtbl **)v83, (uint64_t)v81);
      sub_207EA2AE8((std::__shared_weak_count_vtbl **)v86, (uint64_t)v83);
      v25 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v26 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v30 = (unint64_t *)((char *)v86[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v33 = (unint64_t *)((char *)v83[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v36 = (unint64_t *)((char *)v81[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
          goto LABEL_60;
      }
      return;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_208216974);
      abort();
  }
}

