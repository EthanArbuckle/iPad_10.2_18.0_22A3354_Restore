void sub_208065A00(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F40160();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208065AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208065B28(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452EAB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452EAB0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra8u>]", qword_25452EA98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EA98, &dword_207C77000);
    __cxa_guard_release(&qword_25452EAB0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452EAD0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452EAD0))
  {
    v5 = sub_207D49434(qword_25452EA98, "<", 0);
    sub_207D49330(qword_25452EA98, 0, v5, qword_25452EAB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EAB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EAD0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452EAF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452EAF0))
  {
    sub_208215C6C((uint64_t)qword_25452EAB8, (uint64_t)&xmmword_25452EAD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EAD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EAF0);
  }
  if (byte_25452EAEF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452EAD8, *((unint64_t *)&xmmword_25452EAD8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452EAD8;
    *(_QWORD *)(a1 + 16) = unk_25452EAE8;
  }
}

void sub_208065CC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EAF0);
  _Unwind_Resume(a1);
}

void sub_208065CDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EAD0);
  _Unwind_Resume(a1);
}

void sub_208065CF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EAB0);
  _Unwind_Resume(a1);
}

void sub_208065D10(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208065D24(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208065D60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208065DD0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208065E38(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208065EA0()
{
  return 29;
}

uint64_t sub_208065EA8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208065EB0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208065EC4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_208065F40(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C081D80;
  sub_2081A0210(a1, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C080F70;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C081DB8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819A108((uint64_t)v3, 29, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2080660EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208066120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208066134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208066154()
{
  return 29;
}

__int128 *sub_208066160()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EB10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452EB10))
  {
    v2 = sub_208066238();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452EAF8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452EB08 = *((_QWORD *)v2 + 2);
      xmmword_25452EAF8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EAF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EB10);
  }
  if (byte_25452EB0F >= 0)
    return &xmmword_25452EAF8;
  else
    return (__int128 *)xmmword_25452EAF8;
}

void sub_208066220(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EB10);
  _Unwind_Resume(a1);
}

__int128 *sub_208066238()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EB30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EB30))
    return &xmmword_25452EB18;
  v2 = sub_208066314();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452EB18, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452EB28 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452EB18 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EB18, &dword_207C77000);
  __cxa_guard_release(&qword_25452EB30);
  return &xmmword_25452EB18;
}

void sub_2080662FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EB30);
  _Unwind_Resume(a1);
}

std::string *sub_208066314()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EB50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EB50))
    return &stru_25452EB38;
  sub_20806652C((uint64_t)__p);
  sub_208066404((char *)__p, &stru_25452EB38);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452EB38, &dword_207C77000);
  __cxa_guard_release(&qword_25452EB50);
  return &stru_25452EB38;
}

void sub_2080663C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452EB50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452EB50);
  _Unwind_Resume(a1);
}

void sub_208066404(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F4231C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208066500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20806652C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452EB70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452EB70))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba8u>]", qword_25452EB58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EB58, &dword_207C77000);
    __cxa_guard_release(&qword_25452EB70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452EB90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452EB90))
  {
    v5 = sub_207D49434(qword_25452EB58, "<", 0);
    sub_207D49330(qword_25452EB58, 0, v5, qword_25452EB78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EB78, &dword_207C77000);
    __cxa_guard_release(&qword_25452EB90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452EBB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452EBB0))
  {
    sub_208215C6C((uint64_t)qword_25452EB78, (uint64_t)&xmmword_25452EB98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EB98, &dword_207C77000);
    __cxa_guard_release(&qword_25452EBB0);
  }
  if (byte_25452EBAF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452EB98, *((unint64_t *)&xmmword_25452EB98 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452EB98;
    *(_QWORD *)(a1 + 16) = unk_25452EBA8;
  }
}

void sub_2080666C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EBB0);
  _Unwind_Resume(a1);
}

void sub_2080666E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EB90);
  _Unwind_Resume(a1);
}

void sub_2080666F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EB70);
  _Unwind_Resume(a1);
}

void sub_208066714(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208066728(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208066764(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2080667D4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20806683C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080668A4()
{
  return 30;
}

uint64_t sub_2080668AC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2080668B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_2080668CC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_208066948(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE7A4((uint64_t)__p, a1);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C080FF0;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C081F00;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819A730((uint64_t)v6, 30, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a2 + 5) = v12;
  *(_OWORD *)(a2 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a2 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208066B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208066B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208066B58(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208066B74()
{
  return 30;
}

__int128 *sub_208066B80()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EBD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452EBD0))
  {
    v2 = sub_208066C58();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452EBB8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452EBC8 = *((_QWORD *)v2 + 2);
      xmmword_25452EBB8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EBB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EBD0);
  }
  if (byte_25452EBCF >= 0)
    return &xmmword_25452EBB8;
  else
    return (__int128 *)xmmword_25452EBB8;
}

void sub_208066C40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EBD0);
  _Unwind_Resume(a1);
}

__int128 *sub_208066C58()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EBF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EBF0))
    return &xmmword_25452EBD8;
  v2 = sub_208066D34();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452EBD8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452EBE8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452EBD8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EBD8, &dword_207C77000);
  __cxa_guard_release(&qword_25452EBF0);
  return &xmmword_25452EBD8;
}

void sub_208066D1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EBF0);
  _Unwind_Resume(a1);
}

std::string *sub_208066D34()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EC10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EC10))
    return &stru_25452EBF8;
  sub_208066F4C((uint64_t)__p);
  sub_208066E24((char *)__p, &stru_25452EBF8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452EBF8, &dword_207C77000);
  __cxa_guard_release(&qword_25452EC10);
  return &stru_25452EBF8;
}

void sub_208066DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452EC10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452EC10);
  _Unwind_Resume(a1);
}

void sub_208066E24(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F42BC8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208066F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208066F4C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452EC30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452EC30))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16u>]", qword_25452EC18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EC18, &dword_207C77000);
    __cxa_guard_release(&qword_25452EC30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452EC50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452EC50))
  {
    v5 = sub_207D49434(qword_25452EC18, "<", 0);
    sub_207D49330(qword_25452EC18, 0, v5, qword_25452EC38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EC38, &dword_207C77000);
    __cxa_guard_release(&qword_25452EC50);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452EC70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452EC70))
  {
    sub_208215C6C((uint64_t)qword_25452EC38, (uint64_t)&xmmword_25452EC58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EC58, &dword_207C77000);
    __cxa_guard_release(&qword_25452EC70);
  }
  if (byte_25452EC6F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452EC58, *((unint64_t *)&xmmword_25452EC58 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452EC58;
    *(_QWORD *)(a1 + 16) = unk_25452EC68;
  }
}

void sub_2080670E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EC70);
  _Unwind_Resume(a1);
}

void sub_208067100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EC50);
  _Unwind_Resume(a1);
}

void sub_208067118(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EC30);
  _Unwind_Resume(a1);
}

void sub_208067134(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208067148(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208067184(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2080671F4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20806725C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080672C4()
{
  return 31;
}

uint64_t sub_2080672CC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2080672D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_2080672EC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_208067368(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C082048;
  sub_2081A03D0(a1, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C081070;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C082080;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819AE98((uint64_t)v3, 31, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2080675AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_208067608(&a9);
  _Unwind_Resume(a1);
}

void sub_2080675E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_208067608(&a9);
  _Unwind_Resume(a1);
}

void sub_2080675F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20819AAA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_208067608(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2080676C4()
{
  return 31;
}

__int128 *sub_2080676D0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EC90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452EC90))
  {
    v2 = sub_2080677A8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452EC78, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452EC88 = *((_QWORD *)v2 + 2);
      xmmword_25452EC78 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EC78, &dword_207C77000);
    __cxa_guard_release(&qword_25452EC90);
  }
  if (byte_25452EC8F >= 0)
    return &xmmword_25452EC78;
  else
    return (__int128 *)xmmword_25452EC78;
}

void sub_208067790(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EC90);
  _Unwind_Resume(a1);
}

__int128 *sub_2080677A8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452ECB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452ECB0))
    return &xmmword_25452EC98;
  v2 = sub_208067884();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452EC98, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452ECA8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452EC98 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EC98, &dword_207C77000);
  __cxa_guard_release(&qword_25452ECB0);
  return &xmmword_25452EC98;
}

void sub_20806786C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452ECB0);
  _Unwind_Resume(a1);
}

std::string *sub_208067884()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452ECD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452ECD0))
    return &stru_25452ECB8;
  sub_208067A9C((uint64_t)__p);
  sub_208067974((char *)__p, &stru_25452ECB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452ECB8, &dword_207C77000);
  __cxa_guard_release(&qword_25452ECD0);
  return &stru_25452ECB8;
}

void sub_208067934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452ECD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452ECD0);
  _Unwind_Resume(a1);
}

void sub_208067974(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F43474();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208067A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208067A9C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452ECF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452ECF0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16f>]", qword_25452ECD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452ECD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452ECF0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452ED10);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452ED10))
  {
    v5 = sub_207D49434(qword_25452ECD8, "<", 0);
    sub_207D49330(qword_25452ECD8, 0, v5, qword_25452ECF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452ECF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452ED10);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452ED30);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452ED30))
  {
    sub_208215C6C((uint64_t)qword_25452ECF8, (uint64_t)&xmmword_25452ED18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452ED18, &dword_207C77000);
    __cxa_guard_release(&qword_25452ED30);
  }
  if (byte_25452ED2F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452ED18, *((unint64_t *)&xmmword_25452ED18 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452ED18;
    *(_QWORD *)(a1 + 16) = unk_25452ED28;
  }
}

void sub_208067C38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452ED30);
  _Unwind_Resume(a1);
}

void sub_208067C50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452ED10);
  _Unwind_Resume(a1);
}

void sub_208067C68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452ECF0);
  _Unwind_Resume(a1);
}

void sub_208067C84(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208067C98(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_208067D48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208067DB8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208067E20(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208067E88()
{
  return 32;
}

uint64_t sub_208067E90(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208067E98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208067EB0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_208067F2C(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE960((uint64_t)__p, a1);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C0810F0;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0821C8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819B4C0((uint64_t)v6, 32, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a2 + 5) = v12;
  *(_OWORD *)(a2 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a2 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_2080680F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208068128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20806813C(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208068158()
{
  return 32;
}

__int128 *sub_208068164()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452ED50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452ED50))
  {
    v2 = sub_20806823C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452ED38, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452ED48 = *((_QWORD *)v2 + 2);
      xmmword_25452ED38 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452ED38, &dword_207C77000);
    __cxa_guard_release(&qword_25452ED50);
  }
  if (byte_25452ED4F >= 0)
    return &xmmword_25452ED38;
  else
    return (__int128 *)xmmword_25452ED38;
}

void sub_208068224(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452ED50);
  _Unwind_Resume(a1);
}

__int128 *sub_20806823C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452ED70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452ED70))
    return &xmmword_25452ED58;
  v2 = sub_208068318();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452ED58, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452ED68 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452ED58 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452ED58, &dword_207C77000);
  __cxa_guard_release(&qword_25452ED70);
  return &xmmword_25452ED58;
}

void sub_208068300(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452ED70);
  _Unwind_Resume(a1);
}

std::string *sub_208068318()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452ED90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452ED90))
    return &stru_25452ED78;
  sub_208068530((uint64_t)__p);
  sub_208068408((char *)__p, &stru_25452ED78);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452ED78, &dword_207C77000);
  __cxa_guard_release(&qword_25452ED90);
  return &stru_25452ED78;
}

void sub_2080683C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452ED90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452ED90);
  _Unwind_Resume(a1);
}

void sub_208068408(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F43D20();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208068504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208068530(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452EDB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452EDB0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba32f>]", qword_25452ED98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452ED98, &dword_207C77000);
    __cxa_guard_release(&qword_25452EDB0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452EDD0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452EDD0))
  {
    v5 = sub_207D49434(qword_25452ED98, "<", 0);
    sub_207D49330(qword_25452ED98, 0, v5, qword_25452EDB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EDB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EDD0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452EDF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452EDF0))
  {
    sub_208215C6C((uint64_t)qword_25452EDB8, (uint64_t)&xmmword_25452EDD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EDD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EDF0);
  }
  if (byte_25452EDEF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452EDD8, *((unint64_t *)&xmmword_25452EDD8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452EDD8;
    *(_QWORD *)(a1 + 16) = unk_25452EDE8;
  }
}

void sub_2080686CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EDF0);
  _Unwind_Resume(a1);
}

void sub_2080686E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EDD0);
  _Unwind_Resume(a1);
}

void sub_2080686FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EDB0);
  _Unwind_Resume(a1);
}

void sub_208068718(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20806872C(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208068768(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2080687D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208068840(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080688A8()
{
  return 33;
}

uint64_t sub_2080688B0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2080688B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_2080688CC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_208068948(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C082310;
  sub_2081A0554(a1, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C081170;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C082348;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819BAE8((uint64_t)v3, 33, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_208068AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208068B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208068B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208068B5C()
{
  return 33;
}

__int128 *sub_208068B68()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EE10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452EE10))
  {
    v2 = sub_208068C40();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452EDF8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452EE08 = *((_QWORD *)v2 + 2);
      xmmword_25452EDF8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EDF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EE10);
  }
  if (byte_25452EE0F >= 0)
    return &xmmword_25452EDF8;
  else
    return (__int128 *)xmmword_25452EDF8;
}

void sub_208068C28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EE10);
  _Unwind_Resume(a1);
}

__int128 *sub_208068C40()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EE30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EE30))
    return &xmmword_25452EE18;
  v2 = sub_208068D1C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452EE18, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452EE28 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452EE18 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EE18, &dword_207C77000);
  __cxa_guard_release(&qword_25452EE30);
  return &xmmword_25452EE18;
}

void sub_208068D04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EE30);
  _Unwind_Resume(a1);
}

std::string *sub_208068D1C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EE50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EE50))
    return &stru_25452EE38;
  sub_208068F34((uint64_t)__p);
  sub_208068E0C((char *)__p, &stru_25452EE38);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452EE38, &dword_207C77000);
  __cxa_guard_release(&qword_25452EE50);
  return &stru_25452EE38;
}

void sub_208068DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452EE50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452EE50);
  _Unwind_Resume(a1);
}

void sub_208068E0C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F445C8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_208068F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208068F34(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452EE70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452EE70))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr8u>]", qword_25452EE58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EE58, &dword_207C77000);
    __cxa_guard_release(&qword_25452EE70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452EE90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452EE90))
  {
    v5 = sub_207D49434(qword_25452EE58, "<", 0);
    sub_207D49330(qword_25452EE58, 0, v5, qword_25452EE78);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EE78, &dword_207C77000);
    __cxa_guard_release(&qword_25452EE90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452EEB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452EEB0))
  {
    sub_208215C6C((uint64_t)qword_25452EE78, (uint64_t)&xmmword_25452EE98);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EE98, &dword_207C77000);
    __cxa_guard_release(&qword_25452EEB0);
  }
  if (byte_25452EEAF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452EE98, *((unint64_t *)&xmmword_25452EE98 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452EE98;
    *(_QWORD *)(a1 + 16) = unk_25452EEA8;
  }
}

void sub_2080690D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EEB0);
  _Unwind_Resume(a1);
}

void sub_2080690E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EE90);
  _Unwind_Resume(a1);
}

void sub_208069100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EE70);
  _Unwind_Resume(a1);
}

void sub_20806911C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208069130(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20806916C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2080691DC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208069244(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080692AC()
{
  return 37;
}

uint64_t sub_2080692B4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2080692BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_2080692D0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20806934C(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C082490;
  sub_2081A0898(a1, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C0811F0;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0824C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819D4C8((uint64_t)v3, 37, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_2080694F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_20806952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  sub_207F1703C(&a9);
  _Unwind_Resume(a1);
}

void sub_208069540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208069560()
{
  return 37;
}

__int128 *sub_20806956C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EED0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452EED0))
  {
    v2 = sub_208069644();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452EEB8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452EEC8 = *((_QWORD *)v2 + 2);
      xmmword_25452EEB8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EEB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EED0);
  }
  if (byte_25452EECF >= 0)
    return &xmmword_25452EEB8;
  else
    return (__int128 *)xmmword_25452EEB8;
}

void sub_20806962C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EED0);
  _Unwind_Resume(a1);
}

__int128 *sub_208069644()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EEF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EEF0))
    return &xmmword_25452EED8;
  v2 = sub_208069720();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452EED8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452EEE8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452EED8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EED8, &dword_207C77000);
  __cxa_guard_release(&qword_25452EEF0);
  return &xmmword_25452EED8;
}

void sub_208069708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EEF0);
  _Unwind_Resume(a1);
}

std::string *sub_208069720()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EF10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EF10))
    return &stru_25452EEF8;
  sub_208069938((uint64_t)__p);
  sub_208069810((char *)__p, &stru_25452EEF8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452EEF8, &dword_207C77000);
  __cxa_guard_release(&qword_25452EF10);
  return &stru_25452EEF8;
}

void sub_2080697D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452EF10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452EF10);
  _Unwind_Resume(a1);
}

void sub_208069810(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F46784();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20806990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208069938(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452EF30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452EF30))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb8u>]", qword_25452EF18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EF18, &dword_207C77000);
    __cxa_guard_release(&qword_25452EF30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452EF50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452EF50))
  {
    v5 = sub_207D49434(qword_25452EF18, "<", 0);
    sub_207D49330(qword_25452EF18, 0, v5, qword_25452EF38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EF38, &dword_207C77000);
    __cxa_guard_release(&qword_25452EF50);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452EF70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452EF70))
  {
    sub_208215C6C((uint64_t)qword_25452EF38, (uint64_t)&xmmword_25452EF58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EF58, &dword_207C77000);
    __cxa_guard_release(&qword_25452EF70);
  }
  if (byte_25452EF6F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452EF58, *((unint64_t *)&xmmword_25452EF58 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452EF58;
    *(_QWORD *)(a1 + 16) = unk_25452EF68;
  }
}

void sub_208069AD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EF70);
  _Unwind_Resume(a1);
}

void sub_208069AEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EF50);
  _Unwind_Resume(a1);
}

void sub_208069B04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EF30);
  _Unwind_Resume(a1);
}

void sub_208069B20(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208069B34(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_208069B70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_208069BE0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_208069C48(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_208069CB0()
{
  return 38;
}

uint64_t sub_208069CB8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_208069CC0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_208069CD8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_208069D54(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE7A4((uint64_t)__p, a1);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C081270;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C082610;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819DAF0((uint64_t)v6, 38, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a2 + 5) = v12;
  *(_OWORD *)(a2 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a2 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_208069F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208069F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_208069F64(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208069F80()
{
  return 38;
}

__int128 *sub_208069F8C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EF90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452EF90))
  {
    v2 = sub_20806A064();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452EF78, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452EF88 = *((_QWORD *)v2 + 2);
      xmmword_25452EF78 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EF78, &dword_207C77000);
    __cxa_guard_release(&qword_25452EF90);
  }
  if (byte_25452EF8F >= 0)
    return &xmmword_25452EF78;
  else
    return (__int128 *)xmmword_25452EF78;
}

void sub_20806A04C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EF90);
  _Unwind_Resume(a1);
}

__int128 *sub_20806A064()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EFB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EFB0))
    return &xmmword_25452EF98;
  v2 = sub_20806A140();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452EF98, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452EFA8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452EF98 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452EF98, &dword_207C77000);
  __cxa_guard_release(&qword_25452EFB0);
  return &xmmword_25452EF98;
}

void sub_20806A128(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EFB0);
  _Unwind_Resume(a1);
}

std::string *sub_20806A140()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452EFD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452EFD0))
    return &stru_25452EFB8;
  sub_20806A358((uint64_t)__p);
  sub_20806A230((char *)__p, &stru_25452EFB8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452EFB8, &dword_207C77000);
  __cxa_guard_release(&qword_25452EFD0);
  return &stru_25452EFB8;
}

void sub_20806A1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452EFD0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452EFD0);
  _Unwind_Resume(a1);
}

void sub_20806A230(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F47030();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20806A32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20806A358(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452EFF0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452EFF0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16u>]", qword_25452EFD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EFD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452EFF0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F010);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F010))
  {
    v5 = sub_207D49434(qword_25452EFD8, "<", 0);
    sub_207D49330(qword_25452EFD8, 0, v5, qword_25452EFF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452EFF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F010);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F030);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F030))
  {
    sub_208215C6C((uint64_t)qword_25452EFF8, (uint64_t)&xmmword_25452F018);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F018, &dword_207C77000);
    __cxa_guard_release(&qword_25452F030);
  }
  if (byte_25452F02F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F018, *((unint64_t *)&xmmword_25452F018 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F018;
    *(_QWORD *)(a1 + 16) = unk_25452F028;
  }
}

void sub_20806A4F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F030);
  _Unwind_Resume(a1);
}

void sub_20806A50C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F010);
  _Unwind_Resume(a1);
}

void sub_20806A524(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452EFF0);
  _Unwind_Resume(a1);
}

void sub_20806A540(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20806A554(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20806A590(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20806A600(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20806A668(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20806A6D0()
{
  return 39;
}

uint64_t sub_20806A6D8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20806A6E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20806A6F8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20806A774(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  void *__p;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t (**v24)();

  v24 = &off_24C082758;
  sub_2081A0A58(a1, (uint64_t)&__p);
  v3 = (char *)operator new(0x70uLL);
  *(_QWORD *)v3 = &off_24C0812F0;
  *(_OWORD *)(v3 + 8) = v16;
  *(_OWORD *)(v3 + 24) = v17;
  *(_OWORD *)(v3 + 40) = v18;
  *((_QWORD *)v3 + 7) = v19;
  *((_OWORD *)v3 + 4) = v20;
  *((_QWORD *)v3 + 10) = v21;
  *((_QWORD *)v3 + 13) = v23;
  *(_OWORD *)(v3 + 88) = v22;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C082790;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819E258((uint64_t)v3, 39, &__p);
  v7 = __p;
  v9 = *((_OWORD *)__p + 1);
  v8 = *((_OWORD *)__p + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  __p = 0;
  operator delete(v7);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_20806A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_207C99D78(v10);
  sub_207C99D78((uint64_t)&a10);
  sub_20806AA14(&a9);
  _Unwind_Resume(a1);
}

void sub_20806A9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20806AA14(&a9);
  _Unwind_Resume(a1);
}

void sub_20806AA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20819DE64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20806AA14(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_20806AAD0()
{
  return 39;
}

__int128 *sub_20806AADC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F050);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452F050))
  {
    v2 = sub_20806ABB4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452F038, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452F048 = *((_QWORD *)v2 + 2);
      xmmword_25452F038 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F038, &dword_207C77000);
    __cxa_guard_release(&qword_25452F050);
  }
  if (byte_25452F04F >= 0)
    return &xmmword_25452F038;
  else
    return (__int128 *)xmmword_25452F038;
}

void sub_20806AB9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F050);
  _Unwind_Resume(a1);
}

__int128 *sub_20806ABB4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F070);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F070))
    return &xmmword_25452F058;
  v2 = sub_20806AC90();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F058, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F068 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F058 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F058, &dword_207C77000);
  __cxa_guard_release(&qword_25452F070);
  return &xmmword_25452F058;
}

void sub_20806AC78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F070);
  _Unwind_Resume(a1);
}

std::string *sub_20806AC90()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F090);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F090))
    return &stru_25452F078;
  sub_20806AEA8((uint64_t)__p);
  sub_20806AD80((char *)__p, &stru_25452F078);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F078, &dword_207C77000);
  __cxa_guard_release(&qword_25452F090);
  return &stru_25452F078;
}

void sub_20806AD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F090);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F090);
  _Unwind_Resume(a1);
}

void sub_20806AD80(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F478DC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20806AE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20806AEA8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F0B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F0B0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16f>]", qword_25452F098);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F098, &dword_207C77000);
    __cxa_guard_release(&qword_25452F0B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F0D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F0D0))
  {
    v5 = sub_207D49434(qword_25452F098, "<", 0);
    sub_207D49330(qword_25452F098, 0, v5, qword_25452F0B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F0B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F0D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F0F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F0F0))
  {
    sub_208215C6C((uint64_t)qword_25452F0B8, (uint64_t)&xmmword_25452F0D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F0D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F0F0);
  }
  if (byte_25452F0EF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F0D8, *((unint64_t *)&xmmword_25452F0D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F0D8;
    *(_QWORD *)(a1 + 16) = unk_25452F0E8;
  }
}

void sub_20806B044(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F0F0);
  _Unwind_Resume(a1);
}

void sub_20806B05C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F0D0);
  _Unwind_Resume(a1);
}

void sub_20806B074(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F0B0);
  _Unwind_Resume(a1);
}

void sub_20806B090(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20806B0A4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_20806B154(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20806B1C4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20806B22C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20806B294()
{
  return 40;
}

uint64_t sub_20806B29C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20806B2A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20806B2BC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20806B338(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  sub_2081BE960((uint64_t)__p, a1);
  v20 = *(_OWORD *)__p;
  v21 = v25;
  v22 = v26;
  v3 = v28;
  v23 = v27;
  v4 = v29;
  v5 = v30;
  v18 = v31;
  v19 = v32;
  v6 = (char *)operator new(0x70uLL);
  *(_OWORD *)(v6 + 8) = v20;
  *(_QWORD *)v6 = &off_24C081370;
  *(_OWORD *)(v6 + 24) = v21;
  *(_OWORD *)(v6 + 40) = v22;
  *((_QWORD *)v6 + 7) = v23;
  *((_QWORD *)v6 + 8) = v3;
  *((_QWORD *)v6 + 9) = v4;
  *((_QWORD *)v6 + 10) = v5;
  *(_OWORD *)(v6 + 88) = v18;
  *((_QWORD *)v6 + 13) = v19;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0828D8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  a2[2] = 0;
  sub_20819E880((uint64_t)v6, 40, __p);
  v10 = __p[0];
  v12 = *((_OWORD *)__p[0] + 1);
  v11 = *((_OWORD *)__p[0] + 2);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)__p[0];
  *(_OWORD *)(a2 + 5) = v12;
  *(_OWORD *)(a2 + 7) = v11;
  __p[0] = 0;
  operator delete(v10);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v13;
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 104))(*a2);
  v15 = v14;
  if ((v14 & 0xFFFFFF) <= 0x10000)
    v15 = 0;
  v16 = v14 & 0xFF00;
  if ((v14 & 0xFF0000) == 0)
    v16 = 0;
  *((_WORD *)a2 + 60) = v16 & 0xFF00 | v15;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20806B500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD *);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)va1);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20806B534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207F1703C((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20806B548(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20806B564()
{
  return 40;
}

__int128 *sub_20806B570()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F110);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452F110))
  {
    v2 = sub_20806B648();
    if (*((char *)v2 + 23) < 0)
    {
      sub_207CA40D8(&xmmword_25452F0F8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_25452F108 = *((_QWORD *)v2 + 2);
      xmmword_25452F0F8 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F0F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F110);
  }
  if (byte_25452F10F >= 0)
    return &xmmword_25452F0F8;
  else
    return (__int128 *)xmmword_25452F0F8;
}

void sub_20806B630(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F110);
  _Unwind_Resume(a1);
}

__int128 *sub_20806B648()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F130);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F130))
    return &xmmword_25452F118;
  v2 = sub_20806B724();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F118, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F128 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F118 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F118, &dword_207C77000);
  __cxa_guard_release(&qword_25452F130);
  return &xmmword_25452F118;
}

void sub_20806B70C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F130);
  _Unwind_Resume(a1);
}

std::string *sub_20806B724()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F150);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F150))
    return &stru_25452F138;
  sub_20806B93C((uint64_t)__p);
  sub_20806B814((char *)__p, &stru_25452F138);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F138, &dword_207C77000);
  __cxa_guard_release(&qword_25452F150);
  return &stru_25452F138;
}

void sub_20806B7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F150);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F150);
  _Unwind_Resume(a1);
}

void sub_20806B814(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207F48188();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20806B910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20806B93C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F170);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F170))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb32f>]", qword_25452F158);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F158, &dword_207C77000);
    __cxa_guard_release(&qword_25452F170);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F190);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F190))
  {
    v5 = sub_207D49434(qword_25452F158, "<", 0);
    sub_207D49330(qword_25452F158, 0, v5, qword_25452F178);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F178, &dword_207C77000);
    __cxa_guard_release(&qword_25452F190);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F1B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F1B0))
  {
    sub_208215C6C((uint64_t)qword_25452F178, (uint64_t)&xmmword_25452F198);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F198, &dword_207C77000);
    __cxa_guard_release(&qword_25452F1B0);
  }
  if (byte_25452F1AF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F198, *((unint64_t *)&xmmword_25452F198 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F198;
    *(_QWORD *)(a1 + 16) = unk_25452F1A8;
  }
}

void sub_20806BAD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F1B0);
  _Unwind_Resume(a1);
}

void sub_20806BAF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F190);
  _Unwind_Resume(a1);
}

void sub_20806BB08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F170);
  _Unwind_Resume(a1);
}

void sub_20806BB24(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20806BB38(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (void *)v1[9];
    if (v2)
      free(v2);
    operator delete(v1);
  }
}

uint64_t sub_20806BB74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_DWORD *sub_20806BBE4(_DWORD ***a1)
{
  return sub_20806BC00(**a1, (char *)(*a1)[1]);
}

void sub_20806BBF0(uint64_t a1, uint64_t a2)
{
  sub_20806BCF0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20806BC00(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C080200[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20806BCF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C080200[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20806BEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20806BEE8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20805A180((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20806BFD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20806BFE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char v7;
  char **v8;
  char *v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v3 = *a2;
  v4 = operator new(0x10uLL);
  *(_BYTE *)v4 = *(_BYTE *)v3;
  v4[1] = *(_QWORD *)(v3 + 8);
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = 850045863;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 184) = 0;
  v5 = atomic_load((unint64_t *)(a1 + 80));
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once((std::once_flag::_State_type *)(a1 + 80), &v8, (void (__cdecl *)(void *))nullsub_120);
  }
  return a1;
}

void sub_20806C0E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::mutex *v4;
  void ****v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v6;
  sub_20806D254(v7, *(_QWORD **)(v1 + 176));
  std::mutex::~mutex(v4);
  sub_207D2E2BC(v3);
  sub_207C99D78(v2);
  if (*(_BYTE *)(v1 + 24))
  {
    sub_2081E5300(v5);
    if (!*(_BYTE *)(v1 + 8))
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!*(_BYTE *)(v1 + 8))
  {
    goto LABEL_3;
  }
  sub_2081E52C0((uint64_t **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20806C154(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char v7;
  char **v8;
  char *v9;

  v3 = *a2;
  v4 = operator new(0x10uLL);
  *(_BYTE *)v4 = *(_BYTE *)v3;
  v4[1] = *(_QWORD *)(v3 + 8);
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 104) = 850045863;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  v5 = atomic_load((unint64_t *)(a1 + 72));
  if (v5 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once((std::once_flag::_State_type *)(a1 + 72), &v8, (void (__cdecl *)(void *))nullsub_119);
  }
  return a1;
}

void sub_20806C250(_Unwind_Exception *a1)
{
  uint64_t v1;
  void ****v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v6;
  sub_20806D254(v7, *(_QWORD **)(v1 + 176));
  std::mutex::~mutex(v5);
  sub_207D2E2BC(v4);
  sub_207C99D78(v3);
  if (*(_BYTE *)(v1 + 24))
  {
    sub_2081E5300(v2);
    if (!*(_BYTE *)(v1 + 8))
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!*(_BYTE *)(v1 + 8))
  {
    goto LABEL_3;
  }
  sub_2081E52C0((uint64_t **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20806C2B4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 *v8;
  const char *v9;
  __int128 *v10;
  const char *v11;
  const char *v12;
  __int128 **v13;

  v7 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(&v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  v7 = 1;
  v8 = &v5;
  v9 = ", but contains ";
  v10 = &v5;
  v11 = ", but contains ";
  v12 = ", but contains ";
  sub_207F1C808((uint64_t *)&v10, (uint64_t)&v5);
  if (*(_BYTE *)(a3 + 24))
  {
    v8 = &v5;
    v9 = (const char *)a3;
    v10 = &v5;
    v11 = (const char *)a3;
    v12 = (const char *)a3;
    if (v7 != -1)
    {
      v13 = &v8;
      ((void (*)(__int128 ***, __int128 *))off_24C082968[v7])(&v13, &v5);
      goto LABEL_9;
    }
LABEL_13:
    sub_207CA9F48();
  }
  v8 = &v5;
  v9 = "nullopt";
  v10 = &v5;
  v11 = "nullopt";
  v12 = "nullopt";
  if (v7 == -1)
    goto LABEL_13;
  v13 = &v8;
  ((void (*)(__int128 ***, __int128 *))off_24C082998[v7])(&v13, &v5);
LABEL_9:
  if (v7 == -1)
    sub_207CA9F48();
  v8 = (__int128 *)&v13;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0829B0[v7])(&v8, &v5);
  if (v7 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C082980[v7])(&v8, &v5);
  return result;
}

void sub_20806C430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20806C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20806C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20806C470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20806C484(uint64_t a1, std::mutex **a2)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  std::mutex **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::mutex *v16;
  char v17;
  char v18;

  if (a2)
  {
    v4 = 0;
    LOBYTE(v16) = 0;
    v18 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 104));
    v16 = (std::mutex *)(a1 + 104);
    v4 = 1;
    v17 = 1;
    v18 = 1;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
LABEL_3:
      v6 = 0;
      if (!v4)
        return v5;
      goto LABEL_18;
    }
  }
  if (*(_QWORD *)(a1 + 184))
  {
    v6 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 56);
    if (!v4)
      return v5;
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    v13 = 1;
    if (a2)
      v8 = a2;
    else
      v8 = &v16;
    sub_20806C5D4(&v14, a1, (uint64_t)v12, (uint64_t)v8);
    v5 = v14;
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 = v17 == 0;
    if (!v18)
      return v5;
  }
LABEL_18:
  if (v6)
    return v5;
  std::mutex::unlock(v16);
  return v5;
}

void sub_20806C5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if ((_BYTE)a17)
  {
    if (a15)
      std::mutex::unlock(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_20806C5D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_count v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;

  if (*(_BYTE *)(a2 + 96) || *(_BYTE *)(a2 + 24))
  {
    v38 = a2;
    v39 = &v40;
    v40 = a4;
    v7 = atomic_load((unint64_t *)(a2 + 80));
    if (v7 != -1)
    {
      v42 = &v38;
      v41 = &v42;
      std::__call_once((std::once_flag::_State_type *)(a2 + 80), &v41, (void (__cdecl *)(void *))sub_20806D5D4);
    }
    sub_2081E3AEC(*(unsigned __int8 **)(a2 + 16), a3, &v32);
  }
  else
  {
    v38 = a2;
    v39 = &v40;
    v40 = a4;
    v31 = atomic_load((unint64_t *)(a2 + 72));
    if (v31 != -1)
    {
      v42 = &v38;
      v41 = &v42;
      std::__call_once((std::once_flag::_State_type *)(a2 + 72), &v41, (void (__cdecl *)(void *))sub_20806D330);
    }
    sub_2081E32CC(*(unsigned __int8 **)a2, a3, &v32);
  }
  v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_24C0829D8;
  v8[1].std::__shared_count = v32;
  v8[1].__shared_weak_owners_ = v33;
  v36 = v8 + 1;
  v37 = v8;
  v32 = *(std::__shared_count *)a3;
  v33 = *(_QWORD *)(a3 + 16);
  v34 = v8 + 1;
  v35 = v8;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v12 = (uint64_t **)(a2 + 176);
  v11 = *(uint64_t **)(a2 + 176);
  if (v11)
  {
    if (LOBYTE(v32.__shared_owners_))
    {
      while (1)
      {
        while (1)
        {
          v13 = v11;
          if (!*((_BYTE *)v11 + 40))
            goto LABEL_21;
          v16 = v11[4];
          if (v32.__vftable == (std::__shared_count_vtbl *)v16)
            break;
          if (v32.__vftable >= (std::__shared_count_vtbl *)v16)
          {
            if ((std::__shared_count_vtbl *)v16 >= v32.__vftable)
              v15 = 1;
            else
              v15 = -1;
            if ((v15 & 0x80) == 0)
              goto LABEL_55;
            goto LABEL_21;
          }
LABEL_33:
          v11 = (uint64_t *)*v13;
          v12 = (uint64_t **)v13;
          if (!*v13)
            goto LABEL_36;
        }
        v17 = *((unsigned __int8 *)v13 + 48);
        if (v33 < v17)
          goto LABEL_33;
        v18 = v17 == v33;
        if (v17 >= v33)
          v19 = 1;
        else
          v19 = -1;
        if (v18)
          v19 = 0;
        if ((v19 & 0x80) == 0)
          goto LABEL_55;
LABEL_21:
        v11 = (uint64_t *)v13[1];
        if (!v11)
          goto LABEL_16;
      }
    }
    while (1)
    {
      while (1)
      {
        v13 = v11;
        if (!*((_BYTE *)v11 + 40))
        {
          v14 = *((unsigned __int8 *)v11 + 48);
          if (v33 >= v14)
            break;
        }
        v11 = (uint64_t *)*v11;
        v12 = (uint64_t **)v13;
        if (!*v13)
          goto LABEL_36;
      }
      if (v14 >= v33)
        break;
      v11 = (uint64_t *)v11[1];
      if (!v11)
      {
LABEL_16:
        v12 = (uint64_t **)(v13 + 1);
        goto LABEL_36;
      }
    }
LABEL_55:
    v20 = v13;
    goto LABEL_39;
  }
  v13 = (uint64_t *)(a2 + 176);
LABEL_36:
  v20 = operator new(0x48uLL);
  v20[2] = *(_OWORD *)a3;
  *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  *((_QWORD *)v20 + 7) = v8 + 1;
  *((_QWORD *)v20 + 8) = v8;
  v34 = 0;
  v35 = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v13;
  *v12 = (uint64_t *)v20;
  v21 = **(_QWORD **)(a2 + 168);
  v22 = (uint64_t *)v20;
  if (v21)
  {
    *(_QWORD *)(a2 + 168) = v21;
    v22 = *v12;
  }
  sub_207CC24B4(*(uint64_t **)(a2 + 176), v22);
  ++*(_QWORD *)(a2 + 184);
  v8 = v35;
  if (v35)
  {
LABEL_39:
    v23 = (unint64_t *)&v8->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = *((_QWORD *)v20 + 7);
  v25 = *((_QWORD *)v20 + 8);
  a1[1] = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = v37;
  if (v37)
  {
    v29 = (unint64_t *)&v37->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20806C8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20806CAB4((uint64_t)&a9);
  sub_207C99D78((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20806C910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20806C92C(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  BOOL v5;
  std::once_flag::_State_type *v6;
  unint64_t v7;
  unint64_t v8;
  std::once_flag::_State_type *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;

  if (*(_BYTE *)(a1 + 96))
    v4 = *(_BYTE *)(a2 + 96) == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (*(_BYTE *)(a1 + 64))
      v5 = *(_BYTE *)(a2 + 64) == 0;
    else
      v5 = 1;
    if (v5)
    {
      v6 = (std::once_flag::_State_type *)(a1 + 72);
      v13 = a1;
      v14 = &v15;
      v15 = 0;
      v7 = atomic_load((unint64_t *)(a1 + 72));
      if (v7 != -1)
      {
        v17 = &v13;
        v16 = &v17;
        std::__call_once(v6, &v16, (void (__cdecl *)(void *))sub_20806D330);
      }
      v14 = &v15;
      v15 = 0;
      v13 = a2;
      v8 = atomic_load((unint64_t *)(a2 + 72));
      if (v8 != -1)
      {
        v17 = &v13;
        v16 = &v17;
        std::__call_once((std::once_flag::_State_type *)(a2 + 72), &v16, (void (__cdecl *)(void *))sub_20806D330);
      }
      return sub_2081E5340(*(uint64_t **)a1, *(uint64_t **)a2);
    }
    else
    {
      return sub_207D00A20((const void **)(a1 + 48), a2 + 48);
    }
  }
  else
  {
    v9 = (std::once_flag::_State_type *)(a1 + 80);
    v13 = a1;
    v14 = &v15;
    v15 = 0;
    v10 = atomic_load((unint64_t *)(a1 + 80));
    if (v10 != -1)
    {
      v17 = &v13;
      v16 = &v17;
      std::__call_once(v9, &v16, (void (__cdecl *)(void *))sub_20806D5D4);
    }
    v14 = &v15;
    v15 = 0;
    v13 = a2;
    v11 = atomic_load((unint64_t *)(a2 + 80));
    if (v11 != -1)
    {
      v17 = &v13;
      v16 = &v17;
      std::__call_once((std::once_flag::_State_type *)(a2 + 80), &v16, (void (__cdecl *)(void *))sub_20806D5D4);
    }
    return sub_2081E56BC(*(uint64_t **)(a1 + 16), *(uint64_t **)(a2 + 16));
  }
}

uint64_t sub_20806CAB4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20806CB1C(_QWORD *a1)
{
  void *v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  unsigned __int8 *v6;

  v2 = operator new(0xC0uLL);
  v3 = (unsigned __int8 *)operator new(0x10uLL);
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v6 = v3;
  sub_20806BFE0((uint64_t)v2, (uint64_t *)&v6);
  sub_20806DC2C((void ***)v3 + 1, *v3);
  operator delete(v3);
  *a1 = v2;
  v4 = operator new(0x20uLL);
  *v4 = &off_24C082A28;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v2;
  a1[1] = v4;
  return a1;
}

void sub_20806CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20806CBF4(&a9);
  _Unwind_Resume(a1);
}

void sub_20806CBC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_2081E5300((void ****)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_20806CBE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20806CBF4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)sub_20806D14C(v2);
    operator delete(v3);
  }
  return a1;
}

char **sub_20806CC28(char **a1, uint64_t a2, int a3)
{
  char *v5;
  CFDictionaryRef *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeID v33;
  std::logic_error *exception;
  std::__shared_weak_count_vtbl *v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  std::string v41;
  char *v42;
  __int128 v43;
  std::string v44;

  sub_207E01D24((std::__shared_weak_count_vtbl **)&v36, a2);
  v5 = (char *)operator new(0xC0uLL);
  v5[16] = 0;
  *((_QWORD *)v5 + 4) = 0;
  *((_OWORD *)v5 + 3) = v36;
  v6 = (CFDictionaryRef *)(v5 + 48);
  v36 = 0uLL;
  *v5 = 0;
  v5[8] = 0;
  v5[24] = 0;
  *((_QWORD *)v5 + 5) = 0;
  v38 = 0;
  v39 = 0;
  v5[64] = 1;
  *((_QWORD *)v5 + 11) = 0;
  *((_QWORD *)v5 + 13) = 850045863;
  *((_QWORD *)v5 + 9) = 0;
  *((_QWORD *)v5 + 10) = 0;
  v5[96] = 0;
  *((_QWORD *)v5 + 22) = 0;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_QWORD *)v5 + 23) = 0;
  *((_QWORD *)v5 + 20) = 0;
  *((_QWORD *)v5 + 21) = v5 + 176;
  v7 = atomic_load((unint64_t *)v5 + 11);
  if (v7 != -1)
  {
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    std::__call_once((std::once_flag::_State_type *)v5 + 11, &v44, (void (__cdecl *)(void *))nullsub_121);
  }
  if (a3 == 1)
  {
    v8 = sub_2080930B4();
    if (!sub_207CFA79C((uint64_t)v6, v8, v9))
    {
      v33 = v10;
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v42 = (char *)operator new(0xA0uLL);
      v43 = xmmword_208264710;
      strcpy(v42, "CFDictionary cannot be used to create dict::Dictionary. It must only hold trivially serializable types: Boolean, Number, String, Array or Dictionary values");
      v35 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(v33);
      sub_207D0217C(&v40, v35, 0);
      sub_207CF9014((CFIndex)v40, &v41);
      sub_20806C2B4((uint64_t)&v44, (__int128 *)&v42, (uint64_t)&v41);
      std::logic_error::logic_error(exception, &v44);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
    }
  }
  v12 = *((_QWORD *)v5 + 6);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v5 + 7);
  if (!v11)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v12)
      goto LABEL_26;
  }
  else
  {
LABEL_10:
    if (!v12)
      goto LABEL_26;
  }
  v17 = *((_QWORD *)v5 + 6);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v5 + 7);
  if (!v16)
    goto LABEL_16;
  v18 = (unint64_t *)&v16->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  do
    v20 = __ldaxr(v18);
  while (__stlxr(v20 - 1, v18));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v17)
    {
LABEL_17:
      if (CFDictionaryGetCount(*v6))
        goto LABEL_26;
    }
  }
  else
  {
LABEL_16:
    if (v17)
      goto LABEL_17;
  }
  v21 = (char *)operator new(0x30uLL);
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *(_QWORD *)v21 = off_24C082928;
  v21[47] = 2;
  strcpy(v21 + 24, "{}");
  v22 = (std::__shared_weak_count *)*((_QWORD *)v5 + 5);
  *((_QWORD *)v5 + 4) = v21 + 24;
  *((_QWORD *)v5 + 5) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v37 = v5;
      v25 = v39;
      if (v39)
        goto LABEL_27;
LABEL_36:
      *a1 = v5;
      goto LABEL_37;
    }
  }
LABEL_26:
  v37 = v5;
  v25 = v39;
  if (!v39)
    goto LABEL_36;
LABEL_27:
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v5 = v37;
    *a1 = v37;
    if (!v5)
      goto LABEL_33;
LABEL_37:
    v29 = (char *)operator new(0x20uLL);
    *(_QWORD *)v29 = &off_24C082A28;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = 0;
    *((_QWORD *)v29 + 3) = v5;
    a1[1] = v29;
    v37 = 0;
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
      return a1;
    goto LABEL_38;
  }
  v5 = v37;
  *a1 = v37;
  if (v5)
    goto LABEL_37;
LABEL_33:
  a1[1] = 0;
  v37 = 0;
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    return a1;
LABEL_38:
  v30 = (unint64_t *)&v28->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  return a1;
}

void sub_20806D028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;
  void ****v27;
  uint64_t v28;
  uint64_t v29;
  std::mutex *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 81) < 0)
    operator delete(*(void **)(v35 - 104));
  if (a26 && a25 < 0)
    operator delete(__p);
  sub_207C99D78((uint64_t)&a18);
  operator delete(v32);
  if (v34)
    __cxa_free_exception(v31);
  sub_20806D254(v33 - 8, *(_QWORD **)(v26 + 176));
  std::mutex::~mutex(v30);
  sub_207D2E2BC(v29);
  sub_207C99D78(v28);
  if (*(_BYTE *)(v26 + 24))
    sub_2081E5300(v27);
  if (*(_BYTE *)(v26 + 8))
    sub_2081E52C0((uint64_t **)v26);
  sub_207C99D78((uint64_t)&a14);
  operator delete((void *)v26);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20806D138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20806D14C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void ***v8;
  uint64_t *v9;

  sub_20806D254(a1 + 168, *(_QWORD **)(a1 + 176));
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 56);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v5)
    goto LABEL_11;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_14;
  }
  else
  {
LABEL_11:
    if (!*(_BYTE *)(a1 + 24))
      goto LABEL_14;
  }
  v8 = *(void ****)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
  {
    sub_20806DC2C(v8 + 1, *(unsigned __int8 *)v8);
    operator delete(v8);
  }
LABEL_14:
  if (*(_BYTE *)(a1 + 8))
  {
    v9 = *(uint64_t **)a1;
    *(_QWORD *)a1 = 0;
    if (v9)
    {
      sub_207D20660(v9 + 1, *(unsigned __int8 *)v9);
      operator delete(v9);
    }
  }
  return a1;
}

void sub_20806D254(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_20806D254(a1, *a2);
    sub_20806D254(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[8];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void sub_20806D2E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C082928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20806D2F4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C082928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20806D314(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_20806D330(unsigned __int8 *****a1)
{
  unsigned __int8 ***v1;
  std::mutex ***v2;
  unsigned __int8 **v3;
  uint64_t *v4;
  std::__shared_weak_count_vtbl *v5;
  char v6;
  void (__cdecl *v7)(std::__shared_weak_count *__hidden);
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned __int8 *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unsigned __int8 *v27;
  char v28;
  uint64_t v29;

  v1 = **a1;
  v3 = *v1;
  v2 = (std::mutex ***)v1[1];
  if (v3[4] || *((_BYTE *)v3 + 24))
  {
    v4 = (uint64_t *)sub_20806C484((uint64_t)v3, *v2);
    sub_2081E4514(v4, &v25);
    if (*((_BYTE *)v3 + 8))
    {
      v5 = v25;
      v6 = (char)v25->~__shared_weak_count;
      v7 = v25->~__shared_weak_count_0;
      LOBYTE(v25->~__shared_weak_count) = 0;
      v5->~__shared_weak_count_0 = 0;
      v8 = (uint64_t)*v3;
      v9 = **v3;
      *(_BYTE *)v8 = v6;
      v28 = v9;
      v10 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v7;
      v29 = v10;
      sub_207D20660(&v29, v9);
      v11 = v25;
      v25 = 0;
      if (!v11)
        return;
    }
    else
    {
      v11 = v25;
      v12 = (unsigned __int8 *)operator new(0x10uLL);
      *v12 = v11->~__shared_weak_count;
      *((_QWORD *)v12 + 1) = v11->~__shared_weak_count_0;
      LOBYTE(v11->~__shared_weak_count) = 0;
      v11->~__shared_weak_count_0 = 0;
      *v3 = v12;
      *((_BYTE *)v3 + 8) = 1;
      v25 = 0;
    }
    sub_207D20660((uint64_t *)&v11->~__shared_weak_count_0, LOBYTE(v11->~__shared_weak_count));
    operator delete(v11);
    return;
  }
  sub_207E01D24(&v25, (uint64_t)(v3 + 6));
  sub_20809252C((uint64_t)&v25, &v27);
  v13 = v27;
  if (*((_BYTE *)v3 + 8))
  {
    v14 = (unsigned __int8 *)operator new(0x10uLL);
    sub_207D1D968((uint64_t)v14, v13);
    v15 = *v14;
    v16 = *((_QWORD *)v14 + 1);
    *v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    v17 = (uint64_t)*v3;
    v18 = **v3;
    *(_BYTE *)v17 = v15;
    v28 = v18;
    v19 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v16;
    v29 = v19;
    sub_207D20660(&v29, v18);
    sub_207D20660((uint64_t *)v14 + 1, *v14);
    operator delete(v14);
    v20 = (uint64_t *)v27;
    v27 = 0;
    if (!v20)
      goto LABEL_11;
    goto LABEL_10;
  }
  v24 = (unsigned __int8 *)operator new(0x10uLL);
  sub_207D1D968((uint64_t)v24, v13);
  *v3 = v24;
  *((_BYTE *)v3 + 8) = 1;
  v20 = (uint64_t *)v27;
  v27 = 0;
  if (v20)
  {
LABEL_10:
    sub_207D20660(v20 + 1, *(unsigned __int8 *)v20);
    operator delete(v20);
  }
LABEL_11:
  v21 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_20806D558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t *a12)
{
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  operator delete(v12);
  sub_2081E52C0(&a12);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20806D5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081E52C0((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20806D5D4(uint64_t ***a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count_vtbl *v5;
  unsigned __int8 v6;
  void (__cdecl *v7)(std::__shared_weak_count *__hidden);
  unsigned __int8 *v8;
  int v9;
  void **v10;
  std::__shared_weak_count_vtbl *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void ***v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unsigned __int8 *v27;
  char v28;
  void **v29;

  v1 = **a1;
  v3 = *v1;
  v2 = (_QWORD *)v1[1];
  if (*(_QWORD *)(v3 + 32) || *(_BYTE *)(v3 + 8))
  {
    v4 = (uint64_t *)sub_20806C484(v3, *v2);
    sub_2081E4638(v4, &v25);
    if (*(_BYTE *)(v3 + 24))
    {
      v5 = v25;
      v6 = v25->~__shared_weak_count;
      v7 = v25->~__shared_weak_count_0;
      LOBYTE(v25->~__shared_weak_count) = 0;
      v5->~__shared_weak_count_0 = 0;
      v8 = *(unsigned __int8 **)(v3 + 16);
      v9 = *v8;
      *v8 = v6;
      v28 = v9;
      v10 = (void **)*((_QWORD *)v8 + 1);
      *((_QWORD *)v8 + 1) = v7;
      v29 = v10;
      sub_20806DC2C(&v29, v9);
      v11 = v25;
      v25 = 0;
      if (!v11)
        return;
    }
    else
    {
      v11 = v25;
      v12 = operator new(0x10uLL);
      *(_BYTE *)v12 = v11->~__shared_weak_count;
      v12[1] = v11->~__shared_weak_count_0;
      LOBYTE(v11->~__shared_weak_count) = 0;
      v11->~__shared_weak_count_0 = 0;
      *(_QWORD *)(v3 + 16) = v12;
      *(_BYTE *)(v3 + 24) = 1;
      v25 = 0;
    }
    sub_20806DC2C((void ***)&v11->~__shared_weak_count_0, LOBYTE(v11->~__shared_weak_count));
    operator delete(v11);
    return;
  }
  sub_207E01D24(&v25, v3 + 48);
  sub_20809288C((uint64_t)&v25, &v27);
  v13 = v27;
  if (*(_BYTE *)(v3 + 24))
  {
    v14 = (unsigned __int8 *)operator new(0x10uLL);
    sub_2080968B4((uint64_t)v14, v13);
    v15 = *v14;
    v16 = *((_QWORD *)v14 + 1);
    *v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    v17 = *(unsigned __int8 **)(v3 + 16);
    v18 = *v17;
    *v17 = v15;
    v28 = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v16;
    v29 = v19;
    sub_20806DC2C(&v29, v18);
    sub_20806DC2C((void ***)v14 + 1, *v14);
    operator delete(v14);
    v20 = (void ***)v27;
    v27 = 0;
    if (!v20)
      goto LABEL_11;
    goto LABEL_10;
  }
  v24 = operator new(0x10uLL);
  sub_2080968B4((uint64_t)v24, v13);
  *(_QWORD *)(v3 + 16) = v24;
  *(_BYTE *)(v3 + 24) = 1;
  v20 = (void ***)v27;
  v27 = 0;
  if (v20)
  {
LABEL_10:
    sub_20806DC2C(v20 + 1, *(unsigned __int8 *)v20);
    operator delete(v20);
  }
LABEL_11:
  v21 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_20806D7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void ***a12)
{
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  operator delete(v12);
  sub_2081E5300(&a12);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20806D864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081E5300((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20806D878(std::__shared_weak_count_vtbl ****a1)
{
  std::__shared_weak_count_vtbl *v1;
  unint64_t v2;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl ***p_on_zero_shared;
  std::__shared_weak_count_vtbl **on_zero_shared;

  v1 = ***a1;
  if (LOBYTE(v1[2].__on_zero_shared))
  {
    v21 = ***a1;
    v22 = (std::__shared_weak_count *)&v23;
    v23 = 0;
    v2 = atomic_load((unint64_t *)&v1[2]);
    if (v2 != -1)
    {
      on_zero_shared = &v21;
      p_on_zero_shared = &on_zero_shared;
      std::__call_once((std::once_flag::_State_type *)&v1[2], &p_on_zero_shared, (void (__cdecl *)(void *))sub_20806D5D4);
    }
    on_zero_shared = (std::__shared_weak_count_vtbl **)v1->__on_zero_shared;
    sub_208094A98((uint64_t *)&on_zero_shared, &v21);
    v3 = v21;
    if (LOBYTE(v1[1].__get_deleter))
    {
      v4 = v22;
      v21 = 0;
      v22 = 0;
      v5 = (std::__shared_weak_count *)v1[1].__on_zero_shared;
      v1[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
      v1[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      v14 = v22;
      v1[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
      v1[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
      v21 = 0;
      v22 = 0;
      LOBYTE(v1[1].__get_deleter) = 1;
    }
    v15 = v22;
    if (!v22)
      return;
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (v17)
      return;
LABEL_29:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  v21 = ***a1;
  v22 = (std::__shared_weak_count *)&v23;
  v23 = 0;
  v8 = atomic_load((unint64_t *)&v1[1].__on_zero_shared_weak);
  if (v8 != -1)
  {
    on_zero_shared = &v21;
    p_on_zero_shared = &on_zero_shared;
    std::__call_once((std::once_flag::_State_type *)&v1[1].__on_zero_shared_weak, &p_on_zero_shared, (void (__cdecl *)(void *))sub_20806D330);
  }
  on_zero_shared = (std::__shared_weak_count_vtbl **)v1->~__shared_weak_count;
  sub_2080949A0((uint64_t *)&on_zero_shared, &v21);
  v9 = v21;
  if (LOBYTE(v1[1].__get_deleter))
  {
    v10 = v22;
    v21 = 0;
    v22 = 0;
    v11 = (std::__shared_weak_count *)v1[1].__on_zero_shared;
    v1[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
    v1[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v10;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v18 = v22;
    v1[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
    v1[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v18;
    v21 = 0;
    v22 = 0;
    LOBYTE(v1[1].__get_deleter) = 1;
  }
  v15 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
      goto LABEL_29;
  }
}

void sub_20806DA84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0829D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20806DA94(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0829D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20806DAB4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_20806DAD0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20806DAE4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = (void *)sub_20806D14C(v1);
    operator delete(v2);
  }
}

uint64_t sub_20806DB08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit4dict10Dictionary7PrivateEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void ***sub_20806DB78(void ***result)
{
  void ***v1;
  void **v2;
  void ***v3;
  void ***v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void ***)**result;
    if (v3)
    {
      v4 = (void ***)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          sub_20806DC2C(v4 - 1, *((unsigned __int8 *)v4 - 16));
          if (*((char *)v4 - 17) < 0)
            operator delete(*(v4 - 5));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20806DC18()
{
  sub_207C95C64("vector");
}

void sub_20806DC2C(void ***a1, int a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void **v52;
  void **v53;
  void *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  void *v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 v63;
  uint64_t *v64;
  void *__p;
  char *v66;
  char *v67;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_20806E25C((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 3));
    v7 = (char *)**a1;
    v8 = (char *)(*a1)[1];
    if (v7 != v8)
    {
      v9 = v66;
      v10 = v7 + 24;
      do
      {
        if (v9 < v67)
        {
          *v9 = *v10;
          *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
          *v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          v9 += 16;
        }
        else
        {
          v9 = sub_20806E340(&__p, v10);
        }
        v66 = v9;
        v11 = v10 + 16;
        v10 += 40;
      }
      while (v11 != v8);
    }
  }
  else if (a2 == 2)
  {
    sub_20806E25C((uint64_t)&__p, ((_BYTE *)(*a1)[1] - (_BYTE *)**a1) >> 4);
    v4 = (char *)**a1;
    v5 = (char *)(*a1)[1];
    if (v4 != v5)
    {
      v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *v6 = *v4;
          *((_QWORD *)v6 + 1) = *((_QWORD *)v4 + 1);
          *v4 = 0;
          *((_QWORD *)v4 + 1) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_20806E340(&__p, v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v13 = (char *)__p;
  v12 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v12 - 16);
      v64 = (uint64_t *)*((_QWORD *)v12 - 1);
      *(v12 - 16) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v15 = v66 - 16;
      sub_20806DC2C(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 != 1)
      {
        if (v63 != 2)
          goto LABEL_19;
        v16 = *v64;
        v17 = v64 + 1;
        v18 = v64[1];
        if (*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *v15 = *(_BYTE *)v16;
              *((_QWORD *)v15 + 1) = *(_QWORD *)(v16 + 8);
              *(_BYTE *)v16 = 0;
              *(_QWORD *)(v16 + 8) = 0;
              v15 += 16;
            }
            else
            {
              v19 = (char *)__p;
              v20 = (v15 - (_BYTE *)__p) >> 4;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60)
                goto LABEL_102;
              v22 = v67 - (_BYTE *)__p;
              if ((v67 - (_BYTE *)__p) >> 3 > v21)
                v21 = v22 >> 3;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v23 = 0xFFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23 >> 60)
                goto LABEL_103;
              v24 = (char *)operator new(16 * v23);
              v25 = &v24[16 * v20];
              *v25 = *(_BYTE *)v16;
              *((_QWORD *)v25 + 1) = *(_QWORD *)(v16 + 8);
              *(_BYTE *)v16 = 0;
              *(_QWORD *)(v16 + 8) = 0;
              v26 = v66;
              v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                  *v26 = 0;
                  *((_QWORD *)v26 + 1) = 0;
                }
                while (v26 != v19);
                v19 = v66;
              }
              v29 = &v24[16 * v23];
              v30 = (char *)__p;
              v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                v31 = v19 - 8;
                do
                {
                  v32 = v31 - 8;
                  sub_20806DC2C(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30)
                operator delete(v30);
            }
            v66 = v15;
            v16 += 16;
          }
          while (v16 != v18);
          v16 = *v64;
          v17 = v64 + 1;
          v47 = v64[1];
          if (v47 == *v64)
          {
            *v17 = v47;
            goto LABEL_19;
          }
          v48 = v47 - 8;
          do
          {
            v49 = v48 - 8;
            sub_20806DC2C(v48, *(unsigned __int8 *)(v48 - 8));
            v48 -= 16;
          }
          while (v49 != v16);
        }
        *v17 = v16;
        goto LABEL_19;
      }
      v14 = *v64;
      v33 = v64 + 1;
      v34 = v64[1];
      if (*v64 == v34)
        goto LABEL_18;
      do
      {
        if (v15 < v67)
        {
          *v15 = *(_BYTE *)(v14 + 24);
          *((_QWORD *)v15 + 1) = *(_QWORD *)(v14 + 32);
          *(_BYTE *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0;
          v35 = v15 + 16;
          goto LABEL_45;
        }
        v36 = (char *)__p;
        v37 = (v15 - (_BYTE *)__p) >> 4;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60)
LABEL_102:
          sub_20806DC18();
        v39 = v67 - (_BYTE *)__p;
        if ((v67 - (_BYTE *)__p) >> 3 > v38)
          v38 = v39 >> 3;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
          v40 = 0xFFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40 >> 60)
LABEL_103:
          sub_207CA3AB8();
        v41 = (char *)operator new(16 * v40);
        v42 = &v41[16 * v37];
        *v42 = *(_BYTE *)(v14 + 24);
        *((_QWORD *)v42 + 1) = *(_QWORD *)(v14 + 32);
        *(_BYTE *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 32) = 0;
        v35 = v42 + 16;
        if (v15 == v36)
        {
          __p = v42;
          v66 = v42 + 16;
          v67 = &v41[16 * v40];
LABEL_62:
          operator delete(v15);
          goto LABEL_45;
        }
        do
        {
          v43 = *(v15 - 16);
          v15 -= 16;
          *(v42 - 16) = v43;
          v42 -= 16;
          *((_QWORD *)v42 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v36);
        v15 = (char *)__p;
        v44 = v66;
        __p = v42;
        v66 = v35;
        v67 = &v41[16 * v40];
        if (v44 != v15)
        {
          v45 = v44 - 8;
          do
          {
            v46 = v45 - 8;
            sub_20806DC2C(v45, *(v45 - 8));
            v45 -= 16;
          }
          while (v46 != v15);
        }
        if (v15)
          goto LABEL_62;
LABEL_45:
        v66 = v35;
        v14 += 40;
        v15 = v35;
      }
      while (v14 != v34);
      v50 = *v64;
      v33 = v64 + 1;
      v14 = v64[1];
      if (v14 != *v64)
      {
        do
        {
          sub_20806DC2C(v14 - 8, *(unsigned __int8 *)(v14 - 16));
          if (*(char *)(v14 - 17) < 0)
            operator delete(*(void **)(v14 - 40));
          v14 -= 40;
        }
        while (v14 != v50);
        v14 = v50;
      }
LABEL_18:
      *v33 = v14;
LABEL_19:
      sub_20806DC2C(&v64, v63);
      v13 = (char *)__p;
      v12 = v66;
      if (__p == v66)
      {
        v3 = v62;
        break;
      }
    }
  }
  switch(v3)
  {
    case 0:
      v51 = *a1;
      v52 = (void **)**a1;
      if (!v52)
        goto LABEL_94;
      v53 = (void **)v51[1];
      v54 = **a1;
      if (v53 != v52)
      {
        do
        {
          sub_20806DC2C(v53 - 1, *((unsigned __int8 *)v53 - 16));
          if (*((char *)v53 - 17) < 0)
            operator delete(*(v53 - 5));
          v53 -= 5;
        }
        while (v53 != v52);
        v54 = *v51;
      }
      v51[1] = v52;
      break;
    case 1:
      v51 = *a1;
      v55 = (char *)**a1;
      if (!v55)
        goto LABEL_94;
      v56 = (char *)v51[1];
      v54 = **a1;
      if (v56 != v55)
      {
        v57 = v56 - 8;
        do
        {
          v58 = v57 - 8;
          sub_20806DC2C(v57, *(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v51;
      }
      v51[1] = v55;
      break;
    case 2:
      v51 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_94;
      v54 = *v51;
      break;
    case 7:
      v51 = *a1;
      v54 = **a1;
      if (!v54)
        goto LABEL_94;
      v51[1] = v54;
      break;
    default:
      goto LABEL_95;
  }
  operator delete(v54);
  v51 = *a1;
LABEL_94:
  operator delete(v51);
  v13 = (char *)__p;
LABEL_95:
  if (v13)
  {
    v59 = v13;
    if (v66 != v13)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_20806DC2C(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v13);
      v59 = __p;
    }
    v66 = v13;
    operator delete(v59);
  }
}

void sub_20806E25C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_20806DC18();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_20806DC2C(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

char *sub_20806E340(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20806DC18();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v15 + 1);
    *v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v15 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 8;
    do
    {
      v19 = v18 - 8;
      sub_20806DC2C(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

uint64_t sub_20806E468(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v17 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = sub_20806C92C(v3, v7);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!v17)
    return v11;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return v11;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return v11;
}

void sub_20806E560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20806E57C(uint64_t *a1, _DWORD *a2)
{
  _OWORD *v3;
  __int128 v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  void **v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  BOOL v20;
  int v21;
  uint64_t **v22;
  uint64_t *v23;
  int v24;
  void **v25;
  uint64_t *v26;
  size_t v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  size_t v35;
  int v36;
  int v37;
  uint64_t ***v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  __int128 *v43;
  size_t v44;
  uint64_t **v45;
  int v46;
  const void *v47;
  size_t v48;
  size_t v49;
  int v50;
  int v51;
  uint64_t *v52;
  size_t v53;
  size_t v54;
  int v55;
  _DWORD *v57;
  char *__p;
  char *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;

  v68 = (char *)operator new(0x48uLL);
  v69 = v68;
  v70 = v68 + 72;
  sub_20806FF6C((uint64_t)&v71, dword_2082648A8);
  v3 = v68;
  if (v68 >= v68 + 72)
  {
    v69 = sub_207CA4674((void **)&v68, (uint64_t)&v71);
    if (SHIBYTE(v72) < 0)
      operator delete((void *)v71);
  }
  else
  {
    v4 = v71;
    *((_QWORD *)v69 + 2) = v72;
    *v3 = v4;
    v69 = (char *)v3 + 24;
  }
  sub_20806FF6C((uint64_t)&v71, &dword_2082648AC);
  v5 = v69;
  if (v69 >= v70)
  {
    v69 = sub_207CA4674((void **)&v68, (uint64_t)&v71);
    if (SHIBYTE(v72) < 0)
      operator delete((void *)v71);
  }
  else
  {
    v6 = v71;
    *((_QWORD *)v69 + 2) = v72;
    *v5 = v6;
    v69 = (char *)v5 + 24;
  }
  sub_20806FF6C((uint64_t)&v71, dword_2082648B0);
  v7 = v69;
  v57 = a2;
  if (v69 >= v70)
  {
    v9 = sub_207CA4674((void **)&v68, (uint64_t)&v71);
    v69 = v9;
    if (SHIBYTE(v72) < 0)
    {
      operator delete((void *)v71);
      v9 = v69;
    }
  }
  else
  {
    v8 = v71;
    *((_QWORD *)v69 + 2) = v72;
    *v7 = v8;
    v9 = (char *)v7 + 24;
    v69 = (char *)v7 + 24;
  }
  v10 = 0;
  v11 = v68;
  v65 = v68;
  v66 = v9;
  v67 = v70;
  v63 = 0;
  v64 = 0;
  v62 = &v63;
  __p = v68;
  v60 = v9;
  while (1)
  {
LABEL_15:
    v12 = (char *)operator new(0x40uLL);
    v13 = (uint64_t *)v12;
    *(_QWORD *)&v71 = v12;
    *((_QWORD *)&v71 + 1) = &v63;
    LOBYTE(v72) = 0;
    v14 = (void **)(v12 + 32);
    if (v11[23] < 0)
    {
      sub_207CA40D8(v12 + 32, *(void **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v15 = *(_OWORD *)v11;
      *((_QWORD *)v12 + 6) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v14 = v15;
    }
    v61 = v10;
    *((_DWORD *)v13 + 14) = dword_2082648A8[v10];
    v16 = v63;
    v17 = &v63;
    if (v62 == &v63)
    {
LABEL_63:
      v29 = v17 + 1;
      if (v16)
        v30 = v17;
      else
        v30 = &v63;
      v38 = &v62;
      if (v16)
        v38 = (uint64_t ***)v17;
      else
        v29 = &v63;
      if (!v38[1])
        goto LABEL_73;
      v39 = v60;
      v40 = v61;
      if ((*((_BYTE *)v13 + 55) & 0x80) != 0)
        goto LABEL_78;
      goto LABEL_71;
    }
    v18 = v63;
    v19 = &v63;
    if (v63)
    {
      do
      {
        v17 = (uint64_t **)v18;
        v18 = (uint64_t *)v18[1];
      }
      while (v18);
    }
    else
    {
      do
      {
        v17 = (uint64_t **)v19[2];
        v20 = *v17 == (uint64_t *)v19;
        v19 = v17;
      }
      while (v20);
    }
    v21 = *((char *)v17 + 55);
    v22 = v21 >= 0 ? v17 + 4 : (uint64_t **)v17[4];
    v23 = v21 >= 0 ? (uint64_t *)*((unsigned __int8 *)v17 + 55) : v17[5];
    v24 = *((char *)v13 + 55);
    v25 = v24 >= 0 ? v14 : (void **)v13[4];
    v26 = v24 >= 0 ? (uint64_t *)*((unsigned __int8 *)v13 + 55) : (uint64_t *)v13[5];
    v27 = (size_t)(v26 >= v23 ? v23 : v26);
    v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if (v28 < 0)
        goto LABEL_63;
    }
    else if (v23 < v26)
    {
      goto LABEL_63;
    }
    v29 = &v63;
    v30 = &v63;
    if (v16)
      break;
LABEL_73:
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v30;
    *v29 = v13;
    if (*v62)
    {
      v62 = (uint64_t **)*v62;
      v13 = *v29;
    }
    sub_207CC24B4(v63, v13);
    ++v64;
    v39 = v60;
    v11 += 24;
    v10 = v61 + 1;
    if (v11 == v60)
      goto LABEL_14;
  }
  while (1)
  {
    while (1)
    {
      v30 = (uint64_t **)v16;
      v31 = *((unsigned __int8 *)v16 + 55);
      v32 = v16[5];
      v33 = (v31 & 0x80u) == 0 ? v16 + 4 : (uint64_t *)v16[4];
      v34 = (uint64_t *)((v31 & 0x80u) == 0 ? v31 : v32);
      v35 = (size_t)(v34 >= v26 ? v26 : v34);
      v36 = memcmp(v25, v33, v35);
      if (v36)
        break;
      if (v26 >= v34)
        goto LABEL_56;
LABEL_42:
      v16 = *v30;
      v29 = v30;
      if (!*v30)
        goto LABEL_73;
    }
    if (v36 < 0)
      goto LABEL_42;
LABEL_56:
    v37 = memcmp(v33, v25, v35);
    if (!v37)
      break;
    if ((v37 & 0x80000000) == 0)
      goto LABEL_77;
LABEL_60:
    v16 = v30[1];
    if (!v16)
    {
      v29 = v30 + 1;
      goto LABEL_73;
    }
  }
  if (v34 < v26)
    goto LABEL_60;
LABEL_77:
  v39 = v60;
  v40 = v61;
  if ((v24 & 0x80) == 0)
  {
LABEL_71:
    operator delete(v13);
    v11 += 24;
    v10 = v40 + 1;
    if (v11 != v39)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_78:
  operator delete(*v14);
  operator delete(v13);
  v11 += 24;
  v10 = v40 + 1;
  if (v11 != v39)
    goto LABEL_15;
LABEL_14:
  if (v10 != 3)
    goto LABEL_15;
  if (__p)
  {
    while (v39 != __p)
    {
      if (*(v39 - 1) < 0)
        operator delete(*((void **)v39 - 3));
      v39 -= 24;
    }
    operator delete(__p);
  }
  v71 = 0uLL;
  v72 = 0;
  sub_207EFCDF4(a1, (uint64_t)&v71);
  v41 = v63;
  if (!v63)
    goto LABEL_125;
  v42 = HIBYTE(v72);
  if (v72 >= 0)
    v43 = &v71;
  else
    v43 = (__int128 *)v71;
  if (v72 >= 0)
    v44 = HIBYTE(v72);
  else
    v44 = *((_QWORD *)&v71 + 1);
  v45 = &v63;
  while (2)
  {
    while (2)
    {
      v46 = *((char *)v41 + 55);
      if (v46 >= 0)
        v47 = v41 + 4;
      else
        v47 = (const void *)v41[4];
      if (v46 >= 0)
        v48 = *((unsigned __int8 *)v41 + 55);
      else
        v48 = v41[5];
      if (v44 >= v48)
        v49 = v48;
      else
        v49 = v44;
      v50 = memcmp(v47, v43, v49);
      if (v50)
      {
        if ((v50 & 0x80000000) == 0)
          break;
        goto LABEL_95;
      }
      if (v48 < v44)
      {
LABEL_95:
        v41 = (uint64_t *)v41[1];
        if (!v41)
          goto LABEL_110;
        continue;
      }
      break;
    }
    v45 = (uint64_t **)v41;
    v41 = (uint64_t *)*v41;
    if (v41)
      continue;
    break;
  }
LABEL_110:
  if (v45 == &v63)
    goto LABEL_125;
  v51 = *((char *)v45 + 55);
  if (v51 >= 0)
    v52 = (uint64_t *)(v45 + 4);
  else
    v52 = v45[4];
  if (v51 >= 0)
    v53 = *((unsigned __int8 *)v45 + 55);
  else
    v53 = (size_t)v45[5];
  if (v53 >= v44)
    v54 = v44;
  else
    v54 = v53;
  v55 = memcmp(v43, v52, v54);
  if (v55)
  {
    if ((v55 & 0x80000000) == 0)
      goto LABEL_122;
LABEL_125:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
    if (v72 < 0)
LABEL_126:
      operator delete((void *)v71);
  }
  else
  {
    if (v44 < v53)
      goto LABEL_125;
LABEL_122:
    *v57 = *((_DWORD *)v45 + 14);
    if (v42 < 0)
      goto LABEL_126;
  }
  sub_207DC9BDC((char *)v63);
  return a1;
}

void sub_20806EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 81) < 0)
    operator delete(*(void **)(v16 - 104));
  sub_207DC9BDC(a16);
  _Unwind_Resume(a1);
}

void sub_20806EB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20806EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  sub_2080702E0((uint64_t *)(v10 - 104));
  sub_207DC9BDC(a9);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void sub_20806EB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_207DC9BDC(a9);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20806EB8C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v2 = 0x100000000;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0x100000000;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0x100000000;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0x100000000;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 136) = 0x100000000;
    *(_QWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 160) = 0;
    *(_QWORD *)(result + 168) = 0x100000000;
    *(_QWORD *)(result + 176) = 0;
    *(_QWORD *)(result + 184) = 0;
    *(_QWORD *)(result + 192) = 0;
    *(_QWORD *)(result + 200) = 0x100000000;
    *(_QWORD *)(result + 208) = 0;
    *(_QWORD *)(result + 216) = 0;
    *(_QWORD *)(result + 224) = 0;
    *(_QWORD *)(result + 232) = 0x100000000;
    *(_QWORD *)(result + 240) = 0;
    *(_QWORD *)(result + 248) = 0;
    *(_QWORD *)(result + 256) = 0;
    *(_QWORD *)(result + 264) = 0x100000000;
    *(_DWORD *)(result + 272) = 0;
    *(_QWORD *)(result + 280) = 0;
    *(_QWORD *)(result + 288) = 0;
    *(_QWORD *)(result + 296) = 0;
    *(_QWORD *)(result + 304) = 0x100000000;
  }
  else
  {
    if (a2 == 2)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Mesh/include/Kit/Mesh/TriMeshAllocator.h", 151, (uint64_t)"", 0, (uint64_t)"Invalid mode", 12, (void (*)(void **))sub_208216974);
      abort();
    }
    v2 = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 256) = 0u;
    *(_DWORD *)(result + 272) = 0;
  }
  *(_DWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = v2;
  *(_DWORD *)(result + 352) = 0;
  *(_BYTE *)(result + 356) = 0;
  *(_BYTE *)(result + 380) = 0;
  return result;
}

_QWORD *sub_20806EC9C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void ***v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void ***v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void ***v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void ***v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  float *v63;
  float *v64;
  float *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  void ***v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  unsigned __int8 v81;
  void *v82;
  uint64_t v83;
  unsigned __int8 v84;
  int v85;
  void *v86[2];
  char v87;
  void *__p;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  void ***v93;
  void **v94;
  const char *v95;
  void **v96;
  const char *v97;
  const char *v98;

  v3 = a1;
  sub_207CBAB98(a1, (uint64_t)"TriMeshData{\n", 13);
  v4 = sub_207CBAB98(v3, (uint64_t)"vertices={", 10);
  LODWORD(v97) = 0;
  sub_20807032C((uint64_t)&v94, (uint64_t **)a2);
  if ((_DWORD)v97 == -1)
    sub_207CA9F48();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C082A98[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24C082A80[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v90) >= 0)
    v6 = HIBYTE(v90);
  else
    v6 = v89;
  v7 = sub_207CBAB98(v4, (uint64_t)p_p, v6);
  sub_207CBAB98(v7, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v8 = sub_207CBAB98(v3, (uint64_t)"faces={", 7);
  LODWORD(v97) = 0;
  sub_2080705E0((uint64_t)&v94, (uint64_t **)(a2 + 112));
  if ((_DWORD)v97 == -1)
    sub_207CA9F48();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C082A98[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24C082A80[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v9 = &__p;
  else
    v9 = __p;
  if (SHIBYTE(v90) >= 0)
    v10 = HIBYTE(v90);
  else
    v10 = v89;
  v11 = sub_207CBAB98(v8, (uint64_t)v9, v10);
  sub_207CBAB98(v11, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v12 = sub_207CBAB98(v3, (uint64_t)"normals={", 9);
  LODWORD(v97) = 0;
  sub_20807032C((uint64_t)&v94, (uint64_t **)(a2 + 72));
  if ((_DWORD)v97 == -1)
    sub_207CA9F48();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C082A98[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24C082A80[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v13 = &__p;
  else
    v13 = __p;
  if (SHIBYTE(v90) >= 0)
    v14 = HIBYTE(v90);
  else
    v14 = v89;
  v15 = sub_207CBAB98(v12, (uint64_t)v13, v14);
  sub_207CBAB98(v15, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v16 = sub_207CBAB98(v3, (uint64_t)"normals_type=", 13);
  sub_20806FF6C((uint64_t)&v94, (_DWORD *)(a2 + 104));
  if (SHIBYTE(v96) >= 0)
    v17 = &v94;
  else
    v17 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v18 = HIBYTE(v96);
  else
    v18 = (uint64_t)v95;
  v19 = sub_207CBAB98(v16, (uint64_t)v17, v18);
  sub_207CBAB98(v19, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v20 = sub_207CBAB98(v3, (uint64_t)"colors={", 8);
  LODWORD(v97) = 0;
  sub_20807032C((uint64_t)&v94, (uint64_t **)(a2 + 32));
  if ((_DWORD)v97 == -1)
    sub_207CA9F48();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C082A98[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24C082A80[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v21 = &__p;
  else
    v21 = __p;
  if (SHIBYTE(v90) >= 0)
    v22 = HIBYTE(v90);
  else
    v22 = v89;
  v23 = sub_207CBAB98(v20, (uint64_t)v21, v22);
  sub_207CBAB98(v23, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v24 = sub_207CBAB98(v3, (uint64_t)"colors_type=", 12);
  sub_20806FF6C((uint64_t)&v94, (_DWORD *)(a2 + 64));
  if (SHIBYTE(v96) >= 0)
    v25 = &v94;
  else
    v25 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v26 = HIBYTE(v96);
  else
    v26 = (uint64_t)v95;
  v27 = sub_207CBAB98(v24, (uint64_t)v25, v26);
  sub_207CBAB98(v27, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v28 = sub_207CBAB98(v3, (uint64_t)"edges={", 7);
  v85 = 0;
  v78 = v3;
  if ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) <= 7)
  {
    sub_207E35D98(&v82, "{}");
    goto LABEL_76;
  }
  sub_207CD4504(&v82, "{");
  v29 = *(uint64_t **)(a2 + 144);
  v92 = *v29;
  __p = (void *)0x100000002;
  LODWORD(v89) = 2;
  v90 = &v92;
  v91 = 0;
  sub_2081FC3A4((unsigned int *)&__p, v86);
  v94 = &v82;
  v95 = (const char *)v86;
  v96 = &v82;
  v97 = (const char *)v86;
  v98 = (const char *)v86;
  if (v85 == -1)
    sub_207CA9F48();
  v93 = &v94;
  ((void (*)(void ****, void **))off_24C082A68[v85])(&v93, &v82);
  if (v87 < 0)
  {
    operator delete(v86[0]);
    v30 = *(uint64_t **)(a2 + 152);
    v31 = v29 + 1;
    if (v29 + 1 != v30)
    {
LABEL_70:
      while (1)
      {
        v94 = &v82;
        v95 = ",";
        v96 = &v82;
        v97 = ",";
        v98 = ",";
        if (v85 == -1)
          break;
        __p = &v94;
        ((void (*)(void **, void **))off_24C082AC8[v85])(&__p, &v82);
        v92 = *v31;
        __p = (void *)0x100000002;
        LODWORD(v89) = 2;
        v90 = &v92;
        v91 = 0;
        sub_2081FC3A4((unsigned int *)&__p, v86);
        v94 = &v82;
        v95 = (const char *)v86;
        v96 = &v82;
        v97 = (const char *)v86;
        v98 = (const char *)v86;
        if (v85 == -1)
          sub_207CA9F48();
        v93 = &v94;
        ((void (*)(void ****, void **))off_24C082A68[v85])(&v93, &v82);
        if (v87 < 0)
          operator delete(v86[0]);
        if (++v31 == v30)
          goto LABEL_74;
      }
LABEL_204:
      sub_207CA9F48();
    }
  }
  else
  {
    v30 = *(uint64_t **)(a2 + 152);
    v31 = v29 + 1;
    if (v29 + 1 != v30)
      goto LABEL_70;
  }
LABEL_74:
  v94 = &v82;
  v95 = "}";
  v96 = &v82;
  v97 = "}";
  v98 = "}";
  if (v85 == -1)
    goto LABEL_204;
  __p = &v94;
  ((void (*)(void **, void **))off_24C082AC8[v85])(&__p, &v82);
  v3 = v78;
LABEL_76:
  if (v85 == -1)
    sub_207CA9F48();
  v94 = &__p;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C082A98[v85])(&v79, &v94, &v82);
  if (v85 != -1)
    ((void (*)(void ***, void **))off_24C082A80[v85])(&v94, &v82);
  if ((v81 & 0x80u) == 0)
    v32 = &v79;
  else
    v32 = v79;
  if ((v81 & 0x80u) == 0)
    v33 = v81;
  else
    v33 = v80;
  v34 = sub_207CBAB98(v28, (uint64_t)v32, v33);
  sub_207CBAB98(v34, (uint64_t)"}\n", 2);
  if ((char)v81 < 0)
    operator delete(v79);
  v35 = sub_207CBAB98(v3, (uint64_t)"tex_coords={", 12);
  v85 = 0;
  if ((uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) <= 7)
  {
    sub_207E35D98(&v82, "{}");
    goto LABEL_102;
  }
  sub_207CD4504(&v82, "{");
  v36 = *(uint64_t **)(a2 + 176);
  v92 = *v36;
  __p = (void *)0x100000002;
  LODWORD(v89) = 2;
  v90 = &v92;
  v91 = 0;
  sub_2081FC68C((unsigned int *)&__p, v86);
  v94 = &v82;
  v95 = (const char *)v86;
  v96 = &v82;
  v97 = (const char *)v86;
  v98 = (const char *)v86;
  if (v85 == -1)
    sub_207CA9F48();
  v93 = &v94;
  ((void (*)(void ****, void **))off_24C082A68[v85])(&v93, &v82);
  if (v87 < 0)
  {
    operator delete(v86[0]);
    v37 = *(uint64_t **)(a2 + 184);
    v38 = v36 + 1;
    if (v36 + 1 != v37)
    {
LABEL_96:
      while (1)
      {
        v94 = &v82;
        v95 = ",";
        v96 = &v82;
        v97 = ",";
        v98 = ",";
        if (v85 == -1)
          break;
        __p = &v94;
        ((void (*)(void **, void **))off_24C082AC8[v85])(&__p, &v82);
        v92 = *v38;
        __p = (void *)0x100000002;
        LODWORD(v89) = 2;
        v90 = &v92;
        v91 = 0;
        sub_2081FC68C((unsigned int *)&__p, v86);
        v94 = &v82;
        v95 = (const char *)v86;
        v96 = &v82;
        v97 = (const char *)v86;
        v98 = (const char *)v86;
        if (v85 == -1)
          sub_207CA9F48();
        v93 = &v94;
        ((void (*)(void ****, void **))off_24C082A68[v85])(&v93, &v82);
        if (v87 < 0)
          operator delete(v86[0]);
        if (++v38 == v37)
          goto LABEL_100;
      }
LABEL_205:
      sub_207CA9F48();
    }
  }
  else
  {
    v37 = *(uint64_t **)(a2 + 184);
    v38 = v36 + 1;
    if (v36 + 1 != v37)
      goto LABEL_96;
  }
LABEL_100:
  v94 = &v82;
  v95 = "}";
  v96 = &v82;
  v97 = "}";
  v98 = "}";
  if (v85 == -1)
    goto LABEL_205;
  __p = &v94;
  ((void (*)(void **, void **))off_24C082AC8[v85])(&__p, &v82);
  v3 = v78;
LABEL_102:
  if (v85 == -1)
    sub_207CA9F48();
  v94 = &__p;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C082A98[v85])(&v79, &v94, &v82);
  if (v85 != -1)
    ((void (*)(void ***, void **))off_24C082A80[v85])(&v94, &v82);
  if ((v81 & 0x80u) == 0)
    v39 = &v79;
  else
    v39 = v79;
  if ((v81 & 0x80u) == 0)
    v40 = v81;
  else
    v40 = v80;
  v41 = sub_207CBAB98(v35, (uint64_t)v39, v40);
  sub_207CBAB98(v41, (uint64_t)"}\n", 2);
  if ((char)v81 < 0)
    operator delete(v79);
  v42 = sub_207CBAB98(v3, (uint64_t)"tex_faces={", 11);
  LODWORD(v97) = 0;
  sub_2080705E0((uint64_t)&v94, (uint64_t **)(a2 + 208));
  if ((_DWORD)v97 == -1)
    sub_207CA9F48();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C082A98[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24C082A80[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v43 = &__p;
  else
    v43 = __p;
  if (SHIBYTE(v90) >= 0)
    v44 = HIBYTE(v90);
  else
    v44 = v89;
  v45 = sub_207CBAB98(v42, (uint64_t)v43, v44);
  sub_207CBAB98(v45, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v46 = sub_207CBAB98(v3, (uint64_t)"semantics={", 11);
  LODWORD(v97) = 0;
  sub_208070894((uint64_t)&v94, (unsigned __int8 **)(a2 + 240));
  if ((_DWORD)v97 == -1)
    sub_207CA9F48();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C082A98[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24C082A80[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v47 = &__p;
  else
    v47 = __p;
  if (SHIBYTE(v90) >= 0)
    v48 = HIBYTE(v90);
  else
    v48 = v89;
  v49 = sub_207CBAB98(v46, (uint64_t)v47, v48);
  sub_207CBAB98(v49, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v50 = sub_207CBAB98(v3, (uint64_t)"semantics_type=", 15);
  sub_20806FF6C((uint64_t)&v94, (_DWORD *)(a2 + 272));
  if (SHIBYTE(v96) >= 0)
    v51 = &v94;
  else
    v51 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v52 = HIBYTE(v96);
  else
    v52 = (uint64_t)v95;
  v53 = sub_207CBAB98(v50, (uint64_t)v51, v52);
  sub_207CBAB98(v53, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v54 = sub_207CBAB98(v3, (uint64_t)"materials={", 11);
  LODWORD(v97) = 0;
  sub_208070894((uint64_t)&v94, (unsigned __int8 **)(a2 + 280));
  if ((_DWORD)v97 == -1)
    sub_207CA9F48();
  v82 = v86;
  ((void (*)(void **__return_ptr, void **, void ***))off_24C082A98[v97])(&__p, &v82, &v94);
  if ((_DWORD)v97 != -1)
    ((void (*)(void **, void ***))off_24C082A80[v97])(&v82, &v94);
  if (SHIBYTE(v90) >= 0)
    v55 = &__p;
  else
    v55 = __p;
  if (SHIBYTE(v90) >= 0)
    v56 = HIBYTE(v90);
  else
    v56 = v89;
  v57 = sub_207CBAB98(v54, (uint64_t)v55, v56);
  sub_207CBAB98(v57, (uint64_t)"}\n", 2);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v58 = sub_207CBAB98(v3, (uint64_t)"materials_type=", 15);
  sub_20806FF6C((uint64_t)&v94, (_DWORD *)(a2 + 312));
  if (SHIBYTE(v96) >= 0)
    v59 = &v94;
  else
    v59 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v60 = HIBYTE(v96);
  else
    v60 = (uint64_t)v95;
  v61 = sub_207CBAB98(v58, (uint64_t)v59, v60);
  sub_207CBAB98(v61, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v62 = sub_207CBAB98(v3, (uint64_t)"confidences={", 13);
  v91 = 0;
  if ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) <= 3)
  {
    sub_207E35D98(&__p, "{}");
    goto LABEL_169;
  }
  sub_207CD4504(&__p, "{");
  v63 = *(float **)(a2 + 320);
  sub_207E36388((uint64_t)&v94, (uint64_t)&__p, v63);
  v64 = *(float **)(a2 + 328);
  v65 = v63 + 1;
  if (v65 != v64)
  {
    while (1)
    {
      v94 = &__p;
      v95 = ",";
      v96 = &__p;
      v97 = ",";
      v98 = ",";
      if (v91 == -1)
        break;
      v86[0] = &v94;
      ((void (*)(void **, void **))off_24C082AC8[v91])(v86, &__p);
      sub_207E36388((uint64_t)&v94, (uint64_t)&__p, v65++);
      if (v65 == v64)
        goto LABEL_167;
    }
LABEL_206:
    sub_207CA9F48();
  }
LABEL_167:
  v94 = &__p;
  v95 = "}";
  v96 = &__p;
  v97 = "}";
  v98 = "}";
  if (v91 == -1)
    goto LABEL_206;
  v86[0] = &v94;
  ((void (*)(void **, void **))off_24C082AC8[v91])(v86, &__p);
LABEL_169:
  if (v91 == -1)
    sub_207CA9F48();
  v94 = v86;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C082A98[v91])(&v82, &v94, &__p);
  if (v91 != -1)
    ((void (*)(void ***, void **))off_24C082A80[v91])(&v94, &__p);
  if ((v84 & 0x80u) == 0)
    v66 = &v82;
  else
    v66 = v82;
  if ((v84 & 0x80u) == 0)
    v67 = v84;
  else
    v67 = v83;
  v68 = sub_207CBAB98(v62, (uint64_t)v66, v67);
  sub_207CBAB98(v68, (uint64_t)"}\n", 2);
  if ((char)v84 < 0)
    operator delete(v82);
  v69 = sub_207CBAB98(v3, (uint64_t)"confidences_type=", 17);
  sub_20806FF6C((uint64_t)&v94, (_DWORD *)(a2 + 352));
  if (SHIBYTE(v96) >= 0)
    v70 = &v94;
  else
    v70 = (void ***)v94;
  if (SHIBYTE(v96) >= 0)
    v71 = HIBYTE(v96);
  else
    v71 = (uint64_t)v95;
  v72 = sub_207CBAB98(v69, (uint64_t)v70, v71);
  sub_207CBAB98(v72, (uint64_t)"\n", 1);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v73 = sub_207CBAB98(v3, (uint64_t)"bbox={", 6);
  v91 = 0;
  if (*(_BYTE *)(a2 + 380))
  {
    sub_207CD4504(&__p, "{");
    LOBYTE(v94) = 1;
    v95 = (const char *)&__p;
    v96 = &v79;
    sub_208070AE0((uint64_t)&v94, (uint64_t *)(a2 + 356));
    sub_208070AE0((uint64_t)&v94, (uint64_t *)(a2 + 368));
    v94 = &__p;
    v95 = "}";
    v96 = &__p;
    v97 = "}";
    v98 = "}";
    if (v91 == -1)
      sub_207CA9F48();
    v86[0] = &v94;
    ((void (*)(void **, void **))off_24C082AC8[v91])(v86, &__p);
  }
  else
  {
    sub_207CAA238(&__p, "nullopt");
  }
  if (v91 == -1)
    sub_207CA9F48();
  v94 = v86;
  ((void (*)(void **__return_ptr, void ***, void **))off_24C082A98[v91])(&v82, &v94, &__p);
  if (v91 != -1)
    ((void (*)(void ***, void **))off_24C082A80[v91])(&v94, &__p);
  if ((v84 & 0x80u) == 0)
    v74 = &v82;
  else
    v74 = v82;
  if ((v84 & 0x80u) == 0)
    v75 = v84;
  else
    v75 = v83;
  v76 = sub_207CBAB98(v73, (uint64_t)v74, v75);
  sub_207CBAB98(v76, (uint64_t)"}\n", 2);
  if ((char)v84 < 0)
    operator delete(v82);
  LOBYTE(v94) = 125;
  sub_207CBAB98(v3, (uint64_t)&v94, 1);
  return v3;
}

void sub_20806FD08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA9EF0(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_20806FD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA9EF0(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_20806FD30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CA9EF0(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_20806FD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_207CA9EF0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_20806FF6C(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _BYTE v19[24];
  int v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v20 = 0;
  v3 = operator new(0x118uLL);
  v3[34] = 0;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *(_OWORD *)v3 = 0u;
  sub_207CA2878((uint64_t)v3);
  v23[0] = v3;
  v4 = "unknown";
  v5 = 7;
  switch(*a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v4 = "per-vertex";
      v5 = 10;
      goto LABEL_4;
    case 2:
      v4 = "per-face";
      v5 = 8;
LABEL_4:
      sub_207CBAB98(v3 + 2, (uint64_t)v4, v5);
      break;
    case 3:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Mesh/src/TriMesh.cpp", 46, (uint64_t)"", 0, (uint64_t)"Unsupported type", 16, (void (*)(void **))sub_208216974);
      abort();
    default:
      break;
  }
  v6 = *((_DWORD *)v3 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = v3[14];
    v10 = v3[9];
    if (v9 < v10)
    {
      v3[14] = v10;
      v9 = v10;
    }
    v11 = (const void *)v3[8];
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v22) = 0;
      v8 = __dst;
      goto LABEL_18;
    }
    v11 = (const void *)v3[5];
    v7 = v3[7] - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v22 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_17;
  }
  HIBYTE(v22) = v7;
  v8 = __dst;
  if (v7)
LABEL_17:
    memmove(v8, v11, v7);
LABEL_18:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v23[0];
  if (v23[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v23[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v23[0] = v19;
  v23[1] = __dst;
  v23[2] = v19;
  v23[3] = __dst;
  v23[4] = __dst;
  if (v20 == -1)
    sub_207CA9F48();
  v24 = v23;
  ((void (*)(_QWORD **, _BYTE *, uint64_t))off_24C082A68[v20])(&v24, v19, v5);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  if (v20 == -1)
    sub_207CA9F48();
  v23[0] = __dst;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C082A98[v20])(v23, v19);
  if (v20 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C082A80[v20])(v23, v19);
  return result;
}

void sub_20807026C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_208070288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080702A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_2080702E0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 55) < 0)
      operator delete(*(void **)(v2 + 32));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_20807032C(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t *v29;

  if ((char *)a2[1] - (char *)*a2 <= 11)
  {
    v24 = a1;
    v25 = "{}";
    v26 = a1;
    v27 = "{}";
    v28 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v18 = (uint64_t)&v24;
      return ((uint64_t (*)(uint64_t *, uint64_t))off_24C082AB0[v3])(&v18, a1);
    }
LABEL_18:
    sub_207CA9F48();
  }
  v24 = a1;
  v25 = "{";
  v26 = a1;
  v27 = "{";
  v28 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  ((void (*)(uint64_t *, uint64_t))off_24C082AC8[v5])(&v18, a1);
  v7 = *a2;
  v8 = **a2;
  v23 = *((_DWORD *)*a2 + 2);
  v22 = v8;
  v18 = 0x100000003;
  v19 = 3;
  v20 = &v22;
  v21 = 0;
  sub_2081FC68C((unsigned int *)&v18, __p);
  v24 = a1;
  v25 = (const char *)__p;
  v26 = a1;
  v27 = (const char *)__p;
  v28 = (const char *)__p;
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9 == -1)
    sub_207CA9F48();
  v29 = &v24;
  ((void (*)(uint64_t **, uint64_t))off_24C082A68[v9])(&v29, a1);
  if (v17 < 0)
  {
    operator delete(__p[0]);
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v24 = a1;
        v25 = ",";
        v26 = a1;
        v27 = ",";
        v28 = ",";
        v12 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_18;
        v18 = (uint64_t)&v24;
        ((void (*)(uint64_t *, uint64_t))off_24C082AC8[v12])(&v18, a1);
        v13 = *v11;
        v23 = *((_DWORD *)v11 + 2);
        v22 = v13;
        v18 = 0x100000003;
        v19 = 3;
        v20 = &v22;
        v21 = 0;
        sub_2081FC68C((unsigned int *)&v18, __p);
        v24 = a1;
        v25 = (const char *)__p;
        v26 = a1;
        v27 = (const char *)__p;
        v28 = (const char *)__p;
        v14 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v14 == -1)
          sub_207CA9F48();
        v29 = &v24;
        ((void (*)(uint64_t **, uint64_t))off_24C082A68[v14])(&v29, a1);
        if (v17 < 0)
          operator delete(__p[0]);
        v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
      goto LABEL_12;
  }
  v24 = a1;
  v25 = "}";
  v26 = a1;
  v27 = "}";
  v28 = "}";
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  return ((uint64_t (*)(uint64_t *, uint64_t))off_24C082AC8[v15])(&v18, a1);
}

void sub_2080705BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080705E0(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t *v29;

  if ((char *)a2[1] - (char *)*a2 <= 11)
  {
    v24 = a1;
    v25 = "{}";
    v26 = a1;
    v27 = "{}";
    v28 = "{}";
    v3 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v3 != -1)
    {
      v18 = (uint64_t)&v24;
      return ((uint64_t (*)(uint64_t *, uint64_t))off_24C082AB0[v3])(&v18, a1);
    }
LABEL_18:
    sub_207CA9F48();
  }
  v24 = a1;
  v25 = "{";
  v26 = a1;
  v27 = "{";
  v28 = "{";
  v5 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  ((void (*)(uint64_t *, uint64_t))off_24C082AC8[v5])(&v18, a1);
  v7 = *a2;
  v8 = **a2;
  v23 = *((_DWORD *)*a2 + 2);
  v22 = v8;
  v18 = 0x100000003;
  v19 = 3;
  v20 = &v22;
  v21 = 0;
  sub_2081FC3A4((unsigned int *)&v18, __p);
  v24 = a1;
  v25 = (const char *)__p;
  v26 = a1;
  v27 = (const char *)__p;
  v28 = (const char *)__p;
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9 == -1)
    sub_207CA9F48();
  v29 = &v24;
  ((void (*)(uint64_t **, uint64_t))off_24C082A68[v9])(&v29, a1);
  if (v17 < 0)
  {
    operator delete(__p[0]);
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v24 = a1;
        v25 = ",";
        v26 = a1;
        v27 = ",";
        v28 = ",";
        v12 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_18;
        v18 = (uint64_t)&v24;
        ((void (*)(uint64_t *, uint64_t))off_24C082AC8[v12])(&v18, a1);
        v13 = *v11;
        v23 = *((_DWORD *)v11 + 2);
        v22 = v13;
        v18 = 0x100000003;
        v19 = 3;
        v20 = &v22;
        v21 = 0;
        sub_2081FC3A4((unsigned int *)&v18, __p);
        v24 = a1;
        v25 = (const char *)__p;
        v26 = a1;
        v27 = (const char *)__p;
        v28 = (const char *)__p;
        v14 = *(unsigned int *)(a1 + 24);
        if ((_DWORD)v14 == -1)
          sub_207CA9F48();
        v29 = &v24;
        ((void (*)(uint64_t **, uint64_t))off_24C082A68[v14])(&v29, a1);
        if (v17 < 0)
          operator delete(__p[0]);
        v11 = (uint64_t *)((char *)v11 + 12);
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a2[1];
    v11 = (uint64_t *)((char *)v7 + 12);
    if (v11 != v10)
      goto LABEL_12;
  }
  v24 = a1;
  v25 = "}";
  v26 = a1;
  v27 = "}";
  v28 = "}";
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_18;
  v18 = (uint64_t)&v24;
  return ((uint64_t (*)(uint64_t *, uint64_t))off_24C082AC8[v15])(&v18, a1);
}

void sub_208070870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208070894(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string v14;
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t *v20;

  if (a2[1] - *a2 <= 0)
  {
    v15 = a1;
    v16 = (std::string *)"{}";
    v17 = a1;
    v18 = (std::string *)"{}";
    v19 = (std::string *)"{}";
    v9 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v9 != -1)
    {
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      return ((uint64_t (*)(std::string *, uint64_t))off_24C082AB0[v9])(&v14, a1);
    }
    goto LABEL_19;
  }
  v15 = a1;
  v16 = (std::string *)"{";
  v17 = a1;
  v18 = (std::string *)"{";
  v19 = (std::string *)"{";
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_19;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  ((void (*)(std::string *, uint64_t))off_24C082AC8[v3])(&v14, a1);
  v5 = (uint64_t)*a2;
  std::to_string(&v14, **a2);
  v15 = a1;
  v16 = &v14;
  v17 = a1;
  v18 = &v14;
  v19 = &v14;
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v20 = &v15;
  ((void (*)(uint64_t **, uint64_t))off_24C082A68[v6])(&v20, a1);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    v7 = a2[1];
    v8 = (unsigned __int8 *)(v5 + 1);
    if (v8 == v7)
      goto LABEL_16;
LABEL_12:
    while (1)
    {
      v15 = a1;
      v16 = (std::string *)",";
      v17 = a1;
      v18 = (std::string *)",";
      v19 = (std::string *)",";
      v11 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v11 == -1)
        break;
      v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      ((void (*)(std::string *, uint64_t))off_24C082AC8[v11])(&v14, a1);
      std::to_string(&v14, *v8);
      v15 = a1;
      v16 = &v14;
      v17 = a1;
      v18 = &v14;
      v19 = &v14;
      v12 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v12 == -1)
        sub_207CA9F48();
      v20 = &v15;
      ((void (*)(uint64_t **, uint64_t))off_24C082A68[v12])(&v20, a1);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (++v8 == v7)
        goto LABEL_16;
    }
LABEL_19:
    sub_207CA9F48();
  }
  v7 = a2[1];
  v8 = (unsigned __int8 *)(v5 + 1);
  if (v8 != v7)
    goto LABEL_12;
LABEL_16:
  v15 = a1;
  v16 = (std::string *)"}";
  v17 = a1;
  v18 = (std::string *)"}";
  v19 = (std::string *)"}";
  v13 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v13 == -1)
    goto LABEL_19;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C082AC8[v13])(&v14, a1);
}

void sub_208070ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208070AE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t *v20;

  if (!*(_BYTE *)a1)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = (void **)",";
    v17 = v15;
    v18 = (void **)",";
    v19 = (void **)",";
    v4 = *(unsigned int *)(v15 + 24);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v9 = (uint64_t)&v15;
    ((void (*)(uint64_t *))off_24C082AC8[v4])(&v9);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v13 = *a2;
  v14 = *((_DWORD *)a2 + 2);
  v9 = 0x100000003;
  v10 = 3;
  v11 = &v13;
  v12 = 0;
  sub_2081FC68C((unsigned int *)&v9, __p);
  v15 = v5;
  v16 = __p;
  v17 = v5;
  v18 = __p;
  v19 = __p;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v20 = &v15;
  ((void (*)(uint64_t **, uint64_t))off_24C082A68[v6])(&v20, v5);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_208070BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_208070C18(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  int v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char *v99;
  int v100;
  int v101;
  _QWORD *v103;
  int v104;
  _QWORD **v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;

  v4 = (a2[1] - *a2) >> 2;
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_208071E68((uint64_t)&v106, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = (unint64_t)v107;
  }
  else
  {
    v7 = (unint64_t)v107;
    do
    {
      v9 = *(_DWORD *)(v5 + 8);
      v103 = *(_QWORD **)v5;
      v104 = v9;
      if (v7 < (unint64_t)v108)
      {
        v8 = (uint64_t)v103;
        *(_DWORD *)(v7 + 8) = v104;
        *(_QWORD *)v7 = v8;
        v7 += 12;
      }
      else
      {
        v7 = sub_208071FC8((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v7;
      v5 += 12;
    }
    while (v5 != v6);
  }
  *(_QWORD *)a1 = v106;
  *(_QWORD *)(a1 + 8) = v7;
  v10 = v109;
  *(_QWORD *)(a1 + 16) = v108;
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 16);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_208071E68((uint64_t)&v106, v11);
  v12 = a2[4];
  v13 = a2[5];
  if (v12 == v13)
  {
    v14 = (unint64_t)v107;
  }
  else
  {
    v14 = (unint64_t)v107;
    do
    {
      v16 = *(_DWORD *)(v12 + 8);
      v103 = *(_QWORD **)v12;
      v104 = v16;
      if (v14 < (unint64_t)v108)
      {
        v15 = (uint64_t)v103;
        *(_DWORD *)(v14 + 8) = v104;
        *(_QWORD *)v14 = v15;
        v14 += 12;
      }
      else
      {
        v14 = sub_208071FC8((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v14;
      v12 += 12;
    }
    while (v12 != v13);
  }
  *(_QWORD *)(a1 + 40) = v106;
  *(_QWORD *)(a1 + 48) = v14;
  v17 = v109;
  *(_QWORD *)(a1 + 56) = v108;
  *(_QWORD *)(a1 + 64) = v17;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 26);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[10] - a2[9]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_208071E68((uint64_t)&v106, v18);
  v19 = a2[9];
  v20 = a2[10];
  if (v19 == v20)
  {
    v21 = (unint64_t)v107;
  }
  else
  {
    v21 = (unint64_t)v107;
    do
    {
      v23 = *(_DWORD *)(v19 + 8);
      v103 = *(_QWORD **)v19;
      v104 = v23;
      if (v21 < (unint64_t)v108)
      {
        v22 = (uint64_t)v103;
        *(_DWORD *)(v21 + 8) = v104;
        *(_QWORD *)v21 = v22;
        v21 += 12;
      }
      else
      {
        v21 = sub_208071FC8((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v21;
      v19 += 12;
    }
    while (v19 != v20);
  }
  v25 = v108;
  v24 = v109;
  *(_QWORD *)(a1 + 80) = v106;
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = v25;
  *(_QWORD *)(a1 + 104) = v24;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 68);
  sub_207E22908((_QWORD *)(a1 + 120), (uint64_t)(a2 + 30));
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 78);
  sub_207E22908((_QWORD *)(a1 + 160), (uint64_t)(a2 + 35));
  v26 = 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_208072150((uint64_t)&v106, v26);
  v27 = a2[14];
  v28 = a2[15];
  if (v27 == v28)
  {
    v29 = (unint64_t)v107;
  }
  else
  {
    v29 = (unint64_t)v107;
    do
    {
      v31 = *(_DWORD *)(v27 + 8);
      v103 = *(_QWORD **)v27;
      v104 = v31;
      if (v29 < (unint64_t)v108)
      {
        v30 = (uint64_t)v103;
        *(_DWORD *)(v29 + 8) = v104;
        *(_QWORD *)v29 = v30;
        v29 += 12;
      }
      else
      {
        v29 = sub_2080722B0((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v29;
      v27 += 12;
    }
    while (v27 != v28);
  }
  v33 = v108;
  v32 = v109;
  *(_QWORD *)(a1 + 192) = v106;
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v33;
  *(_QWORD *)(a1 + 216) = v32;
  v35 = (char *)a2[18];
  v34 = (char *)a2[19];
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if ((v36 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v37 = (v36 >> 3);
    v38 = (char *)operator new(8 * v37);
    v106 = v38;
    v107 = v38;
    v108 = &v38[8 * v37];
    while (1)
    {
      v39 = *(_QWORD *)v35;
      if (v38 < v108)
      {
        *(_QWORD *)v38 = v39;
        v38 += 8;
      }
      else
      {
        v40 = (char *)(v38 - v106);
        v41 = (v38 - v106) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          sub_207CA420C();
        v42 = (v108 - v106) >> 2;
        if (v42 <= v41 + 1)
          v42 = v41 + 1;
        if ((unint64_t)(v108 - v106) >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        if (v43)
        {
          LODWORD(v105) = v43;
          if (HIDWORD(v109) == -1)
            sub_207CA9F48();
          v103 = &v105;
          v44 = ((uint64_t (*)(_QWORD **, uint64_t *))off_24C082B20[HIDWORD(v109)])(&v103, &v109);
          v46 = (char *)(v44 + 8 * v41);
          *(_QWORD *)v46 = v39;
          v38 = v46 + 8;
          v47 = (unint64_t)v106;
          v48 = (uint64_t)v107;
          v49 = v107 - v106;
          if (v107 != v106)
          {
LABEL_47:
            v51 = v49 - 8;
            if (v51 < 0x58)
              goto LABEL_110;
            if ((unint64_t)(v48 - v44 - (_QWORD)v40) < 0x20)
              goto LABEL_110;
            v52 = (v51 >> 3) + 1;
            v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
            v54 = v48 - v53;
            v46 -= v53;
            v55 = (_OWORD *)(v44 + 8 * v41 - 16);
            v56 = (__int128 *)(v48 - 16);
            v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              *v55 = v58;
              v55 -= 2;
              v56 -= 2;
              v57 -= 4;
            }
            while (v57);
            v48 = v54;
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_110:
              do
              {
                v59 = *(_QWORD *)(v48 - 8);
                v48 -= 8;
                *((_QWORD *)v46 - 1) = v59;
                v46 -= 8;
              }
              while (v48 != v47);
            }
            v48 = (uint64_t)v106;
            v106 = v46;
            v107 = v38;
            v50 = v108;
            v108 = (char *)(v44 + 8 * v45);
            if (!v48)
              goto LABEL_33;
LABEL_54:
            v103 = (_QWORD *)v48;
            v104 = (unint64_t)&v50[-v48] >> 3;
            if (HIDWORD(v109) == -1)
              sub_207CA9F48();
            v105 = &v103;
            ((void (*)(_QWORD ***, uint64_t *))off_24C082B30[HIDWORD(v109)])(&v105, &v109);
            goto LABEL_33;
          }
        }
        else
        {
          v44 = 0;
          v45 = 0;
          v46 = (char *)(8 * v41);
          *(_QWORD *)(8 * v41) = v39;
          v38 = (char *)(8 * v41 + 8);
          v47 = (unint64_t)v106;
          v48 = (uint64_t)v107;
          v49 = v107 - v106;
          if (v107 != v106)
            goto LABEL_47;
        }
        v106 = v46;
        v107 = v38;
        v50 = v108;
        v108 = (char *)(v44 + 8 * v45);
        if (v48)
          goto LABEL_54;
      }
LABEL_33:
      v107 = v38;
      v35 += 8;
      if (v35 == v34)
      {
        v60 = (unint64_t)v106;
        v36 = (unint64_t)v108;
        goto LABEL_58;
      }
    }
  }
  v60 = 0;
  v38 = 0;
LABEL_58:
  v61 = v109;
  *(_QWORD *)(a1 + 224) = v60;
  *(_QWORD *)(a1 + 232) = v38;
  *(_QWORD *)(a1 + 240) = v36;
  *(_QWORD *)(a1 + 248) = v61;
  v63 = (char *)a2[22];
  v62 = (char *)a2[23];
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  v64 = v62 - v63;
  if (v62 != v63)
  {
    if ((v64 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v65 = (v64 >> 3);
    v66 = (char *)operator new(8 * v65);
    v106 = v66;
    v107 = v66;
    v108 = &v66[8 * v65];
    while (1)
    {
      v68 = *(_DWORD *)v63;
      v67 = *((_DWORD *)v63 + 1);
      if (v66 < v108)
      {
        *(_DWORD *)v66 = v68;
        *((_DWORD *)v66 + 1) = v67;
        v66 += 8;
        goto LABEL_62;
      }
      v69 = (char *)(v66 - v106);
      v70 = (v66 - v106) >> 3;
      if ((unint64_t)(v70 + 1) >> 61)
        sub_207CA420C();
      v71 = (v108 - v106) >> 2;
      if (v71 <= v70 + 1)
        v71 = v70 + 1;
      v72 = (unint64_t)(v108 - v106) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v71;
      if (v72)
      {
        LODWORD(v105) = v72;
        if (HIDWORD(v109) == -1)
          sub_207CA9F48();
        v103 = &v105;
        v73 = ((uint64_t (*)(_QWORD **, uint64_t *))off_24C082B40[HIDWORD(v109)])(&v103, &v109);
        v75 = (char *)(v73 + 8 * v70);
        *(_DWORD *)v75 = v68;
        *((_DWORD *)v75 + 1) = v67;
        v76 = (unint64_t)v106;
        v77 = (uint64_t)v107;
        v78 = v107 - v106;
        if (v107 == v106)
        {
LABEL_76:
          v66 = v75 + 8;
          v106 = v75;
          v107 = v75 + 8;
          v81 = v108;
          v108 = (char *)(v73 + 8 * v74);
          if (v77)
            goto LABEL_84;
          goto LABEL_62;
        }
      }
      else
      {
        v73 = 0;
        v74 = 0;
        v75 = (char *)(8 * v70);
        *(_DWORD *)v75 = v68;
        *((_DWORD *)v75 + 1) = v67;
        v76 = (unint64_t)v106;
        v77 = (uint64_t)v107;
        v78 = v107 - v106;
        if (v107 == v106)
          goto LABEL_76;
      }
      v79 = v78 - 8;
      if ((unint64_t)(v78 - 8) < 0x58)
        break;
      v80 = (unint64_t)v75;
      if ((unint64_t)(v77 - v73 - (_QWORD)v69) < 0x20)
        goto LABEL_82;
      v82 = (v79 >> 3) + 1;
      v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      v84 = v77 - v83;
      v80 = (unint64_t)&v75[-v83];
      v85 = (_OWORD *)(v73 + 8 * v70 - 16);
      v86 = (__int128 *)(v77 - 16);
      v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v88 = *v86;
        *(v85 - 1) = *(v86 - 1);
        *v85 = v88;
        v85 -= 2;
        v86 -= 2;
        v87 -= 4;
      }
      while (v87);
      v77 = v84;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_82;
LABEL_83:
      v77 = (uint64_t)v106;
      v66 = v75 + 8;
      v106 = (char *)v80;
      v107 = v75 + 8;
      v81 = v108;
      v108 = (char *)(v73 + 8 * v74);
      if (v77)
      {
LABEL_84:
        v103 = (_QWORD *)v77;
        v104 = (unint64_t)&v81[-v77] >> 3;
        if (HIDWORD(v109) == -1)
          sub_207CA9F48();
        v105 = &v103;
        ((void (*)(_QWORD ***, uint64_t *))off_24C082B50[HIDWORD(v109)])(&v105, &v109);
      }
LABEL_62:
      v107 = v66;
      v63 += 8;
      if (v63 == v62)
      {
        v90 = (unint64_t)v106;
        v64 = (unint64_t)v108;
        goto LABEL_88;
      }
    }
    v80 = (unint64_t)v75;
    do
    {
LABEL_82:
      v89 = *(_QWORD *)(v77 - 8);
      v77 -= 8;
      *(_QWORD *)(v80 - 8) = v89;
      v80 -= 8;
    }
    while (v77 != v76);
    goto LABEL_83;
  }
  v90 = 0;
  v66 = 0;
LABEL_88:
  v91 = v109;
  *(_QWORD *)(a1 + 256) = v90;
  *(_QWORD *)(a1 + 264) = v66;
  *(_QWORD *)(a1 + 272) = v64;
  *(_QWORD *)(a1 + 280) = v91;
  v92 = 0xAAAAAAAAAAAAAAABLL * ((a2[27] - a2[26]) >> 2);
  HIDWORD(v109) = 0;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  sub_208072150((uint64_t)&v106, v92);
  v93 = a2[26];
  v94 = a2[27];
  if (v93 == v94)
  {
    v95 = (unint64_t)v107;
  }
  else
  {
    v95 = (unint64_t)v107;
    do
    {
      v97 = *(_DWORD *)(v93 + 8);
      v103 = *(_QWORD **)v93;
      v104 = v97;
      if (v95 < (unint64_t)v108)
      {
        v96 = (uint64_t)v103;
        *(_DWORD *)(v95 + 8) = v104;
        *(_QWORD *)v95 = v96;
        v95 += 12;
      }
      else
      {
        v95 = sub_2080722B0((unint64_t *)&v106, (uint64_t *)&v103);
      }
      v107 = (char *)v95;
      v93 += 12;
    }
    while (v93 != v94);
  }
  v99 = v108;
  v98 = v109;
  *(_QWORD *)(a1 + 288) = v106;
  *(_QWORD *)(a1 + 296) = v95;
  *(_QWORD *)(a1 + 304) = v99;
  *(_QWORD *)(a1 + 312) = v98;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 348) = *((_DWORD *)a2 + 88);
  sub_207E231C4((_QWORD *)(a1 + 352), (uint64_t)(a2 + 40));
  if (*((_BYTE *)a2 + 380))
  {
    if (*(_BYTE *)(a1 + 344))
      *(_BYTE *)(a1 + 344) = 0;
    v100 = *((_DWORD *)a2 + 91);
    *(_QWORD *)(a1 + 320) = *(uint64_t *)((char *)a2 + 356);
    *(_DWORD *)(a1 + 328) = v100;
    v101 = *((_DWORD *)a2 + 94);
    *(_QWORD *)(a1 + 332) = a2[46];
    *(_DWORD *)(a1 + 340) = v101;
    *(_BYTE *)(a1 + 344) = 1;
  }
  return a1;
}

void sub_2080714BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t *v11;
  uint64_t *v12;

  sub_207E08464(v12);
  sub_207E084F0(v11 + 32);
  sub_207E08570(v11 + 28);
  sub_207E08464(v11 + 24);
  sub_207E085F0(a10);
  sub_207E085F0(a11);
  sub_207E0866C(v11 + 10);
  sub_207E0866C(v11 + 5);
  sub_207E0866C(v11);
  _Unwind_Resume(a1);
}

void sub_2080715C0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  BOOL v42;
  size_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  _OWORD *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _OWORD *v117;
  __int128 *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  _BYTE *v144;
  _BYTE *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  BOOL v149;
  unint64_t v150;
  char *v151;
  int v152;
  char **v153;

  sub_20806EB8C(a3, a2);
  v6 = *a1;
  v5 = a1[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
  v9 = *(_QWORD *)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a3) >> 2);
  if (v7 <= v10)
  {
    if (v7 < v10)
    {
      v8 = v9 + 4 * ((v5 - *a1) >> 2);
      *(_QWORD *)(a3 + 8) = v8;
    }
  }
  else
  {
    sub_208072438(a3, v7 - v10);
    v6 = *a1;
    v5 = a1[1];
    v9 = *(_QWORD *)a3;
    v8 = *(_QWORD *)(a3 + 8);
  }
  if (v6 != v5 || v9 != v8)
  {
    v11 = v9 + 12;
    v12 = v6 + 12;
    do
    {
      do
      {
        v13 = v11;
        v14 = v12;
        v15 = *(_QWORD *)(v12 - 12);
        *(_DWORD *)(v11 - 4) = *(_DWORD *)(v14 - 4);
        *(_QWORD *)(v11 - 12) = v15;
        v11 += 12;
        v12 = v14 + 12;
      }
      while (v14 != v5);
    }
    while (v13 != v8);
  }
  v16 = *(_QWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 64) = *((_DWORD *)a1 + 8);
  v18 = a1[5];
  v17 = a1[6];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 2);
  v20 = *(_QWORD *)(a3 + 40);
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v16) >> 2);
  if (v19 <= v21)
  {
    if (v19 < v21)
    {
      v20 = v16 + 4 * ((v17 - v18) >> 2);
      *(_QWORD *)(a3 + 40) = v20;
    }
  }
  else
  {
    sub_208072438(a3 + 32, v19 - v21);
    v18 = a1[5];
    v17 = a1[6];
    v16 = *(_QWORD *)(a3 + 32);
    v20 = *(_QWORD *)(a3 + 40);
  }
  if (v18 != v17 || v16 != v20)
  {
    v22 = v16 + 12;
    v23 = v18 + 12;
    do
    {
      do
      {
        v24 = v22;
        v25 = v23;
        v26 = *(_QWORD *)(v23 - 12);
        *(_DWORD *)(v22 - 4) = *(_DWORD *)(v25 - 4);
        *(_QWORD *)(v22 - 12) = v26;
        v22 += 12;
        v23 = v25 + 12;
      }
      while (v25 != v17);
    }
    while (v24 != v20);
  }
  v27 = *(_QWORD *)(a3 + 72);
  *(_DWORD *)(a3 + 104) = *((_DWORD *)a1 + 18);
  v29 = a1[10];
  v28 = a1[11];
  v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 2);
  v31 = *(_QWORD *)(a3 + 80);
  v32 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v27) >> 2);
  if (v30 <= v32)
  {
    if (v30 < v32)
    {
      v31 = v27 + 4 * ((v28 - v29) >> 2);
      *(_QWORD *)(a3 + 80) = v31;
    }
  }
  else
  {
    sub_208072438(a3 + 72, v30 - v32);
    v29 = a1[10];
    v28 = a1[11];
    v27 = *(_QWORD *)(a3 + 72);
    v31 = *(_QWORD *)(a3 + 80);
  }
  if (v29 != v28 || v27 != v31)
  {
    v33 = v27 + 12;
    v34 = v29 + 12;
    do
    {
      do
      {
        v35 = v33;
        v36 = v34;
        v37 = *(_QWORD *)(v34 - 12);
        *(_DWORD *)(v33 - 4) = *(_DWORD *)(v36 - 4);
        *(_QWORD *)(v33 - 12) = v37;
        v33 += 12;
        v34 = v36 + 12;
      }
      while (v36 != v28);
    }
    while (v35 != v31);
  }
  v38 = *(_QWORD *)(a3 + 240);
  *(_DWORD *)(a3 + 272) = *((_DWORD *)a1 + 28);
  v39 = (_BYTE *)a1[15];
  v40 = (_BYTE *)a1[16];
  v41 = *(_QWORD *)(a3 + 248) - v38;
  v42 = v40 - v39 >= v41;
  v43 = v40 - v39 - v41;
  if (v43 != 0 && v42)
  {
    sub_207E28EB8(a3 + 240, v43);
    v39 = (_BYTE *)a1[15];
    v40 = (_BYTE *)a1[16];
  }
  else if (!v42)
  {
    *(_QWORD *)(a3 + 248) = v38 + v40 - v39;
  }
  if (v40 != v39)
    memmove(*(void **)(a3 + 240), v39, v40 - v39);
  *(_DWORD *)(a3 + 312) = *((_DWORD *)a1 + 38);
  v44 = (_BYTE *)a1[20];
  v45 = (_BYTE *)a1[21];
  v46 = *(_QWORD *)(a3 + 280);
  v47 = *(_QWORD *)(a3 + 288) - v46;
  v48 = v45 - v44 >= v47;
  v49 = v45 - v44 - v47;
  if (v49 != 0 && v48)
  {
    sub_207E28EB8(a3 + 280, v49);
    v44 = (_BYTE *)a1[20];
    v45 = (_BYTE *)a1[21];
  }
  else if (!v48)
  {
    *(_QWORD *)(a3 + 288) = v46 + v45 - v44;
  }
  if (v45 != v44)
    memmove(*(void **)(a3 + 280), v44, v45 - v44);
  v51 = a1[24];
  v50 = a1[25];
  v52 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v51) >> 2);
  v54 = *(_QWORD *)(a3 + 112);
  v53 = *(_QWORD *)(a3 + 120);
  v55 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v54) >> 2);
  if (v52 <= v55)
  {
    if (v52 < v55)
    {
      v53 = v54 + 4 * ((v50 - v51) >> 2);
      *(_QWORD *)(a3 + 120) = v53;
    }
  }
  else
  {
    sub_208072614(a3 + 112, v52 - v55);
    v51 = a1[24];
    v50 = a1[25];
    v54 = *(_QWORD *)(a3 + 112);
    v53 = *(_QWORD *)(a3 + 120);
  }
  if (v51 != v50 || v54 != v53)
  {
    v56 = v54 + 12;
    v57 = v51 + 12;
    do
    {
      do
      {
        v58 = v56;
        v59 = v57;
        v60 = *(_QWORD *)(v57 - 12);
        *(_DWORD *)(v56 - 4) = *(_DWORD *)(v59 - 4);
        *(_QWORD *)(v56 - 12) = v60;
        v56 += 12;
        v57 = v59 + 12;
      }
      while (v59 != v50);
    }
    while (v58 != v53);
  }
  v62 = *(_QWORD *)(a3 + 144);
  v61 = *(_QWORD *)(a3 + 152);
  v64 = a1[28];
  v63 = a1[29];
  v65 = v63 - v64;
  v66 = (v63 - v64) >> 3;
  v67 = v61 - v62;
  v68 = (uint64_t)(v61 - v62) >> 3;
  v69 = v66 - v68;
  if (v66 <= v68)
  {
    if (v66 < v68)
    {
      v61 = v62 + 8 * v66;
      *(_QWORD *)(a3 + 152) = v61;
    }
  }
  else
  {
    v70 = *(_QWORD *)(a3 + 160);
    if (v69 <= (uint64_t)(v70 - v61) >> 3)
    {
      v61 += 8 * v69;
      *(_QWORD *)(a3 + 152) = v61;
    }
    else
    {
      if (v65 < 0)
        sub_207CA420C();
      v71 = v70 - v62;
      v72 = (uint64_t)(v70 - v62) >> 2;
      if (v72 <= v66)
        LODWORD(v72) = v66;
      if (v71 >= 0x7FFFFFFFFFFFFFF8)
        v73 = -1;
      else
        v73 = v72;
      LODWORD(v153) = v73;
      v74 = *(unsigned int *)(a3 + 172);
      if ((_DWORD)v74 == -1)
        goto LABEL_133;
      v151 = (char *)&v153;
      v75 = ((uint64_t (*)(char **, uint64_t))off_24C082BA0[v74])(&v151, a3 + 168);
      v77 = *(char **)(a3 + 144);
      v78 = *(char **)(a3 + 152);
      v62 = v75 + 8 * v68;
      v61 = v62 + 8 * v69;
      if (v78 != v77)
      {
        v79 = v78 - v77 - 8;
        if (v79 < 0x58)
          goto LABEL_140;
        if ((unint64_t)&v78[-v67 - v75] < 0x20)
          goto LABEL_140;
        v80 = (v79 >> 3) + 1;
        v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        v82 = &v78[-v81];
        v62 -= v81;
        v83 = (_OWORD *)(v75 + 8 * v68 - 16);
        v84 = (__int128 *)(v78 - 16);
        v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v86 = *v84;
          *(v83 - 1) = *(v84 - 1);
          *v83 = v86;
          v83 -= 2;
          v84 -= 2;
          v85 -= 4;
        }
        while (v85);
        v78 = v82;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_140:
          do
          {
            v87 = *((_QWORD *)v78 - 1);
            v78 -= 8;
            *(_QWORD *)(v62 - 8) = v87;
            v62 -= 8;
          }
          while (v78 != v77);
        }
        v77 = *(char **)(a3 + 144);
      }
      *(_QWORD *)(a3 + 144) = v62;
      *(_QWORD *)(a3 + 152) = v61;
      v88 = *(_QWORD *)(a3 + 160);
      *(_QWORD *)(a3 + 160) = v75 + 8 * v76;
      if (v77)
      {
        v151 = v77;
        v152 = (unint64_t)(v88 - (_QWORD)v77) >> 3;
        v89 = *(unsigned int *)(a3 + 172);
        if ((_DWORD)v89 == -1)
          sub_207CA9F48();
        v153 = &v151;
        ((void (*)(char ***, uint64_t))off_24C082BB0[v89])(&v153, a3 + 168);
        v62 = *(_QWORD *)(a3 + 144);
        v61 = *(_QWORD *)(a3 + 152);
      }
    }
    v64 = a1[28];
    v63 = a1[29];
  }
  if (v64 != v63 || v62 != v61)
  {
    v91 = v62 + 8;
    v92 = v64 + 8;
    do
    {
      do
      {
        v93 = v91;
        v94 = v92;
        *(_QWORD *)(v91 - 8) = *(_QWORD *)(v92 - 8);
        v91 += 8;
        v92 += 8;
      }
      while (v94 != v63);
    }
    while (v93 != v61);
  }
  v96 = *(_QWORD *)(a3 + 176);
  v95 = *(_QWORD *)(a3 + 184);
  v98 = a1[32];
  v97 = a1[33];
  v99 = v97 - v98;
  v100 = (v97 - v98) >> 3;
  v101 = v95 - v96;
  v102 = (uint64_t)(v95 - v96) >> 3;
  v103 = v100 - v102;
  if (v100 > v102)
  {
    v104 = *(_QWORD *)(a3 + 192);
    if (v103 <= (uint64_t)(v104 - v95) >> 3)
    {
      v95 += 8 * v103;
      *(_QWORD *)(a3 + 184) = v95;
LABEL_105:
      v98 = a1[32];
      v97 = a1[33];
      goto LABEL_106;
    }
    if (v99 < 0)
      sub_207CA420C();
    v105 = v104 - v96;
    v106 = (uint64_t)(v104 - v96) >> 2;
    if (v106 <= v100)
      LODWORD(v106) = v100;
    if (v105 >= 0x7FFFFFFFFFFFFFF8)
      v107 = -1;
    else
      v107 = v106;
    LODWORD(v153) = v107;
    v108 = *(unsigned int *)(a3 + 204);
    if ((_DWORD)v108 != -1)
    {
      v151 = (char *)&v153;
      v109 = ((uint64_t (*)(char **, uint64_t))off_24C082BC0[v108])(&v151, a3 + 200);
      v111 = *(char **)(a3 + 176);
      v112 = *(char **)(a3 + 184);
      v96 = v109 + 8 * v102;
      v95 = v96 + 8 * v103;
      if (v112 != v111)
      {
        v113 = v112 - v111 - 8;
        if (v113 < 0x58)
          goto LABEL_141;
        if ((unint64_t)&v112[-v101 - v109] < 0x20)
          goto LABEL_141;
        v114 = (v113 >> 3) + 1;
        v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
        v116 = &v112[-v115];
        v96 -= v115;
        v117 = (_OWORD *)(v109 + 8 * v102 - 16);
        v118 = (__int128 *)(v112 - 16);
        v119 = v114 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v120 = *v118;
          *(v117 - 1) = *(v118 - 1);
          *v117 = v120;
          v117 -= 2;
          v118 -= 2;
          v119 -= 4;
        }
        while (v119);
        v112 = v116;
        if (v114 != (v114 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_141:
          do
          {
            v121 = *((_QWORD *)v112 - 1);
            v112 -= 8;
            *(_QWORD *)(v96 - 8) = v121;
            v96 -= 8;
          }
          while (v112 != v111);
        }
        v111 = *(char **)(a3 + 176);
      }
      *(_QWORD *)(a3 + 176) = v96;
      *(_QWORD *)(a3 + 184) = v95;
      v122 = *(_QWORD *)(a3 + 192);
      *(_QWORD *)(a3 + 192) = v109 + 8 * v110;
      if (v111)
      {
        v151 = v111;
        v152 = (unint64_t)(v122 - (_QWORD)v111) >> 3;
        v123 = *(unsigned int *)(a3 + 204);
        if ((_DWORD)v123 == -1)
          sub_207CA9F48();
        v153 = &v151;
        ((void (*)(char ***, uint64_t))off_24C082BD0[v123])(&v153, a3 + 200);
        v96 = *(_QWORD *)(a3 + 176);
        v95 = *(_QWORD *)(a3 + 184);
      }
      goto LABEL_105;
    }
LABEL_133:
    sub_207CA9F48();
  }
  if (v100 < v102)
  {
    v95 = v96 + 8 * v100;
    *(_QWORD *)(a3 + 184) = v95;
  }
LABEL_106:
  if (v98 != v97 || v96 != v95)
  {
    v125 = v96 + 8;
    v126 = v98 + 8;
    do
    {
      do
      {
        v127 = v125;
        v128 = v126;
        *(_QWORD *)(v125 - 8) = *(_QWORD *)(v126 - 8);
        v125 += 8;
        v126 += 8;
      }
      while (v128 != v97);
    }
    while (v127 != v95);
  }
  v130 = a1[36];
  v129 = a1[37];
  v131 = 0xAAAAAAAAAAAAAAABLL * ((v129 - v130) >> 2);
  v133 = *(_QWORD *)(a3 + 208);
  v132 = *(_QWORD *)(a3 + 216);
  v134 = 0xAAAAAAAAAAAAAAABLL * ((v132 - v133) >> 2);
  if (v131 <= v134)
  {
    if (v131 < v134)
    {
      v132 = v133 + 4 * ((v129 - v130) >> 2);
      *(_QWORD *)(a3 + 216) = v132;
    }
  }
  else
  {
    sub_208072614(a3 + 208, v131 - v134);
    v130 = a1[36];
    v129 = a1[37];
    v133 = *(_QWORD *)(a3 + 208);
    v132 = *(_QWORD *)(a3 + 216);
  }
  if (v130 != v129 || v133 != v132)
  {
    v135 = v133 + 12;
    v136 = v130 + 12;
    do
    {
      do
      {
        v137 = v135;
        v138 = v136;
        v139 = *(_QWORD *)(v136 - 12);
        *(_DWORD *)(v135 - 4) = *(_DWORD *)(v138 - 4);
        *(_QWORD *)(v135 - 12) = v139;
        v135 += 12;
        v136 = v138 + 12;
      }
      while (v138 != v129);
    }
    while (v137 != v132);
  }
  if (*((_BYTE *)a1 + 344))
  {
    v140 = a1[40];
    v141 = *(uint64_t *)((char *)a1 + 332);
    v142 = *((_DWORD *)a1 + 85);
    v143 = *(unsigned __int8 *)(a3 + 380);
    *(_DWORD *)(a3 + 364) = *((_DWORD *)a1 + 82);
    *(_QWORD *)(a3 + 356) = v140;
    *(_DWORD *)(a3 + 376) = v142;
    *(_QWORD *)(a3 + 368) = v141;
    if (!v143)
      *(_BYTE *)(a3 + 380) = 1;
  }
  *(_DWORD *)(a3 + 352) = *((_DWORD *)a1 + 87);
  v144 = (_BYTE *)a1[44];
  v145 = (_BYTE *)a1[45];
  v146 = (v145 - v144) >> 2;
  v147 = *(_QWORD *)(a3 + 320);
  v148 = (*(_QWORD *)(a3 + 328) - v147) >> 2;
  v149 = v146 >= v148;
  v150 = v146 - v148;
  if (v150 != 0 && v149)
  {
    sub_207E29E08(a3 + 320, v150);
    v144 = (_BYTE *)a1[44];
    v145 = (_BYTE *)a1[45];
  }
  else if (!v149)
  {
    *(_QWORD *)(a3 + 328) = v147 + 4 * v146;
  }
  if (v145 != v144)
    memmove(*(void **)(a3 + 320), v144, v145 - v144);
}

void sub_208071E54(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_207E08A64(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_208071E68(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  int v17;
  _QWORD *v18;

  v2 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2) < a2)
  {
    v3 = result;
    if (a2 >= 0x1555555555555556)
      sub_207CA420C();
    v4 = *(_QWORD *)(result + 8);
    LODWORD(v18) = a2;
    v5 = *(unsigned int *)(result + 28);
    if ((_DWORD)v5 == -1)
      sub_207CA9F48();
    v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    v16 = &v18;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C082AE0[v5])(&v16, result + 24);
    v10 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    v11 = result + 12 * v7;
    if (v9 != *(_QWORD *)v3)
    {
      do
      {
        v12 = *(_QWORD *)(v9 - 12);
        v9 -= 12;
        v13 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = result + 12 * v7;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      v16 = (_QWORD **)v9;
      v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      v15 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v15 == -1)
        sub_207CA9F48();
      v18 = &v16;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24C082AF0[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

unint64_t sub_208071FC8(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_207CA420C();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_207CA9F48();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24C082AE0[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_207CA9F48();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24C082AF0[v18])(&v22, a1 + 3);
  }
  return v12;
}

uint64_t sub_208072150(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  int v17;
  _QWORD *v18;

  v2 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2) < a2)
  {
    v3 = result;
    if (a2 >= 0x1555555555555556)
      sub_207CA420C();
    v4 = *(_QWORD *)(result + 8);
    LODWORD(v18) = a2;
    v5 = *(unsigned int *)(result + 28);
    if ((_DWORD)v5 == -1)
      sub_207CA9F48();
    v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    v16 = &v18;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C082B00[v5])(&v16, result + 24);
    v10 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    v11 = result + 12 * v7;
    if (v9 != *(_QWORD *)v3)
    {
      do
      {
        v12 = *(_QWORD *)(v9 - 12);
        v9 -= 12;
        v13 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = result + 12 * v7;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      v16 = (_QWORD **)v9;
      v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      v15 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v15 == -1)
        sub_207CA9F48();
      v18 = &v16;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24C082B10[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

unint64_t sub_2080722B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_207CA420C();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_207CA9F48();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24C082B00[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_207CA9F48();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24C082B10[v18])(&v22, a1 + 3);
  }
  return v12;
}

uint64_t sub_208072438(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD ***)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_207CA420C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      LODWORD(v21) = v10;
      v11 = *(unsigned int *)(result + 28);
      if ((_DWORD)v11 == -1)
        sub_207CA9F48();
      v19 = &v21;
      result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C082B60[v11])(&v19, result + 24);
      v6 = *(_QWORD ***)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
      v12 = 0;
    }
    v13 = result + 12 * v7;
    v14 = v13 + 12 * (12 * a2 / 0xC);
    if ((_QWORD **)v4 != v6)
    {
      do
      {
        v15 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v16 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v13 - 12) = v15;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v16;
      }
      while ((_QWORD **)v4 != v6);
      v6 = *(_QWORD ***)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v14;
    v17 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v12;
    if (v6)
    {
      v19 = v6;
      v20 = -1431655765 * ((unint64_t)(v17 - (_QWORD)v6) >> 2);
      v18 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v18 == -1)
        sub_207CA9F48();
      v21 = &v19;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24C082B70[v18])(&v21, v3 + 24);
    }
  }
  return result;
}

uint64_t sub_208072614(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD ***)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_207CA420C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      LODWORD(v21) = v10;
      v11 = *(unsigned int *)(result + 28);
      if ((_DWORD)v11 == -1)
        sub_207CA9F48();
      v19 = &v21;
      result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C082B80[v11])(&v19, result + 24);
      v6 = *(_QWORD ***)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
      v12 = 0;
    }
    v13 = result + 12 * v7;
    v14 = v13 + 12 * (12 * a2 / 0xC);
    if ((_QWORD **)v4 != v6)
    {
      do
      {
        v15 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v16 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v13 - 12) = v15;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v16;
      }
      while ((_QWORD **)v4 != v6);
      v6 = *(_QWORD ***)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v14;
    v17 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v12;
    if (v6)
    {
      v19 = v6;
      v20 = -1431655765 * ((unint64_t)(v17 - (_QWORD)v6) >> 2);
      v18 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v18 == -1)
        sub_207CA9F48();
      v21 = &v19;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24C082B90[v18])(&v21, v3 + 24);
    }
  }
  return result;
}

uint64_t sub_2080727F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_208072840(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void sub_208072850(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;

  v2 = __p[1];
  __p[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = __p[1];
    __p[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  operator delete(__p);
}

uint64_t sub_2080728A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2080728B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2080728C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2080728D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

uint64_t *sub_2080728E0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)MEMORY[0x20BD023A4]();
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_208072914(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_208072954(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_208072990(_QWORD *__p)
{
  void *v2;
  void *v3;

  v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[3];
  if (v3)
  {
    __p[4] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

void sub_2080729D0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  operator delete(a1 - 2);
}

void sub_208072A10(_QWORD *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;

  v2 = (char *)a1[3];
  v3 = (char *)a1[4];
  v4 = v3 - v2 - 10;
  v6 = (uint64_t *)a1[7];
  v5 = a1[8];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *v6 = v4;
    v8 = (uint64_t)(v6 + 1);
    goto LABEL_22;
  }
  v9 = (uint64_t *)a1[6];
  v10 = (char *)v6 - (char *)v9;
  v11 = v6 - v9;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_207CA420C();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_207CA3AB8();
    v15 = operator new(8 * v14);
    v10 = (char *)v6 - (char *)v9;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v4;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)v6 - (char *)v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (uint64_t *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v4;
  v8 = 8 * v11 + 8;
  v18 = (char *)v6 - (char *)v9;
  if (v6 != v9)
  {
LABEL_14:
    v19 = v18 - 8;
    if (v19 < 0x58)
      goto LABEL_58;
    if ((unint64_t)((char *)v6 - v15 - v10) < 0x20)
      goto LABEL_58;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[v21 / 0xFFFFFFFFFFFFFFF8];
    v16 = (uint64_t *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 2;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v26 = *--v7;
        *--v16 = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  a1[6] = v16;
  a1[7] = v8;
  a1[8] = v17;
  if (v9)
  {
    operator delete(v9);
    v2 = (char *)a1[3];
    v3 = (char *)a1[4];
  }
LABEL_22:
  a1[7] = v8;
  v27 = v3 - v2;
  v28 = v3 - v2 + 8;
  if ((unint64_t)(v3 - v2) > 0xFFFFFFFFFFFFFFF7)
  {
    a1[4] = v3 + 8;
    return;
  }
  v29 = a1[5];
  if ((unint64_t)(v29 - (_QWORD)v3) >= 8)
  {
    *(_QWORD *)v3 = 0;
    a1[4] = v3 + 8;
    return;
  }
  if ((v28 & 0x8000000000000000) != 0)
    sub_207CF94B8();
  v30 = v29 - (_QWORD)v2;
  v31 = 2 * v30;
  if (2 * v30 <= v28)
    v31 = v3 - v2 + 8;
  if (v30 >= 0x3FFFFFFFFFFFFFFFLL)
    v32 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v32 = v31;
  v33 = (char *)operator new(v32);
  v34 = &v33[v27];
  *(_QWORD *)&v33[v27] = 0;
  v35 = v3 - v2;
  if (v3 != v2)
  {
    if (v35 < 8 || (unint64_t)(v2 - v33) < 0x20)
    {
      v36 = v3;
      goto LABEL_34;
    }
    if (v35 >= 0x20)
    {
      v39 = v35 & 0xFFFFFFFFFFFFFFE0;
      v40 = &v33[v27 - 16];
      v41 = v3 - 16;
      v42 = v35 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v43 = *(_OWORD *)v41;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 32;
        v41 -= 32;
        v42 -= 32;
      }
      while (v42);
      if (v35 == v39)
        goto LABEL_36;
      if ((v35 & 0x18) == 0)
      {
        v34 -= v39;
        v36 = &v3[-v39];
LABEL_34:
        v37 = v34 - 1;
        do
        {
          v38 = *--v36;
          *v37-- = v38;
        }
        while (v36 != v2);
LABEL_36:
        v34 = v33;
        goto LABEL_37;
      }
    }
    else
    {
      v39 = 0;
    }
    v36 = &v3[-(v35 & 0xFFFFFFFFFFFFFFF8)];
    v34 -= v35 & 0xFFFFFFFFFFFFFFF8;
    v44 = v27 - v39 - 8;
    v45 = &v3[-v39 - 8];
    v46 = v39 - (v35 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v47 = *(_QWORD *)v45;
      v45 -= 8;
      *(_QWORD *)&v33[v44] = v47;
      v44 -= 8;
      v46 += 8;
    }
    while (v46);
    if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_36;
    goto LABEL_34;
  }
LABEL_37:
  a1[3] = v34;
  a1[4] = &v33[v28];
  a1[5] = &v33[v32];
  if (v2)
    operator delete(v2);
}

void sub_208072D30(uint64_t a1)
{
  sub_208072A10((_QWORD *)(a1 - 16));
}

_QWORD *sub_208072D38(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[7] - 8) + result[3];
  *(_QWORD *)(v1 + 10) = result[4] - v1 - 18;
  result[7] -= 8;
  return result;
}

_QWORD *sub_208072D64(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[5] - 8) + result[1];
  *(_QWORD *)(v1 + 10) = result[2] - v1 - 18;
  result[5] -= 8;
  return result;
}

_QWORD *sub_208072D90(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_208072DE0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void sub_208072E2C(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)__p[11];
  if (v2)
  {
    __p[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[8];
  if (v3)
  {
    __p[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)__p[3];
  if (v4)
  {
    __p[4] = v4;
    operator delete(v4);
  }
  operator delete(__p);
}

void sub_208072E7C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  operator delete(a1 - 2);
}

void sub_208072ECC(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _QWORD *v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  std::logic_error *exception;

  v3 = (char *)a1[12];
  v2 = a1[13];
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (char *)a1[11];
    v7 = (v3 - v6) >> 3;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_207CA420C();
    v9 = v2 - (_QWORD)v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        goto LABEL_48;
      v11 = operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *v12 = a1[6];
    v5 = v12 + 1;
    if (v3 != v6)
    {
      v14 = v3 - v6 - 8;
      if (v14 < 0x58)
        goto LABEL_53;
      if ((unint64_t)(v6 - v11) < 0x20)
        goto LABEL_53;
      v15 = (v14 >> 3) + 1;
      v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      v4 = &v3[-v16];
      v12 = (_QWORD *)((char *)v12 - v16);
      v17 = &v11[8 * v7 - 16];
      v18 = v3 - 16;
      v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *(_OWORD *)v18;
        *(v17 - 1) = *((_OWORD *)v18 - 1);
        *v17 = v20;
        v17 -= 2;
        v18 -= 32;
        v19 -= 4;
      }
      while (v19);
      if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_53:
        do
        {
          v21 = *((_QWORD *)v4 - 1);
          v4 -= 8;
          *--v12 = v21;
        }
        while (v4 != v6);
      }
    }
    a1[11] = v12;
    a1[12] = v5;
    a1[13] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v3 = a1[6];
    v5 = v3 + 8;
  }
  a1[12] = v5;
  v22 = a1[6];
  v23 = a1[7];
  v24 = v23 >= v22;
  v25 = v23 - v22;
  if (!v24)
    v25 = 0;
  if (v25 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v26 = *(_QWORD *)(a1[3] + v22);
  a1[6] = v22 + 8;
  v28 = (char *)a1[9];
  v27 = a1[10];
  if ((unint64_t)v28 < v27)
  {
    *(_QWORD *)v28 = v26;
    v29 = (uint64_t)(v28 + 8);
    goto LABEL_46;
  }
  v30 = (char *)a1[8];
  v31 = (v28 - v30) >> 3;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 61)
    sub_207CA420C();
  v33 = v27 - (_QWORD)v30;
  if (v33 >> 2 > v32)
    v32 = v33 >> 2;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
    v34 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (!v34)
  {
    v35 = 0;
    v36 = (_QWORD *)(8 * v31);
    v37 = 0;
    *(_QWORD *)(8 * v31) = v26;
    v29 = 8 * v31 + 8;
    v38 = v28 - v30;
    if (v28 == v30)
      goto LABEL_44;
LABEL_38:
    v39 = v38 - 8;
    if (v39 < 0x58)
      goto LABEL_54;
    if ((unint64_t)(v30 - v35) < 0x20)
      goto LABEL_54;
    v40 = (v39 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v28[-v41];
    v36 = (_QWORD *)((char *)v36 - v41);
    v43 = &v35[8 * v31 - 16];
    v44 = v28 - 16;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    v28 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_54:
      do
      {
        v47 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *--v36 = v47;
      }
      while (v28 != v30);
    }
    goto LABEL_44;
  }
  if (v34 >> 61)
LABEL_48:
    sub_207CA3AB8();
  v35 = operator new(8 * v34);
  v36 = &v35[8 * v31];
  v37 = &v35[8 * v34];
  *v36 = v26;
  v29 = (uint64_t)(v36 + 1);
  v38 = v28 - v30;
  if (v28 != v30)
    goto LABEL_38;
LABEL_44:
  a1[8] = v36;
  a1[9] = v29;
  a1[10] = v37;
  if (v30)
    operator delete(v30);
LABEL_46:
  a1[9] = v29;
}

void sub_2080731B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2080731C4(uint64_t a1)
{
  sub_208072ECC((_QWORD *)(a1 - 16));
}

_QWORD *sub_2080731CC(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[12];
  v2 = result[9];
  result[6] = *(_QWORD *)(v1 - 8) + *(_QWORD *)(v2 - 8) + 8;
  result[9] = v2 - 8;
  result[12] = v1 - 8;
  return result;
}

_QWORD *sub_2080731F4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[10];
  v2 = result[7];
  result[4] = *(_QWORD *)(v1 - 8) + *(_QWORD *)(v2 - 8) + 8;
  result[7] = v2 - 8;
  result[10] = v1 - 8;
  return result;
}

double sub_20807321C(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  char v18;
  double result;
  _OWORD *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  std::logic_error *exception;
  __int128 v25;
  unint64_t v26;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_27;
  }
  v6 = a1[3];
  v7 = *(_QWORD *)(v6 + v3);
  v8 = v3 + 8;
  a1[6] = v3 + 8;
  if (!v7)
    return result;
  v9 = v2 >= v8;
  v10 = v2 - v8;
  if (!v9)
    v10 = 0;
  if (v10 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read string");
LABEL_27:
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v12 = (char *)(v6 + v8);
  if (v7 <= 0x16)
  {
    HIBYTE(v26) = v7;
    v13 = &v25;
LABEL_15:
    v16 = v12;
    v17 = v13;
    do
    {
LABEL_16:
      v18 = *v16++;
      *(_BYTE *)v17 = v18;
      v17 = (__int128 *)((char *)v17 + 1);
    }
    while (v16 != &v12[v7]);
    goto LABEL_17;
  }
  v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17)
    v14 = v7 | 7;
  v15 = v14 + 1;
  v13 = (__int128 *)operator new(v14 + 1);
  *((_QWORD *)&v25 + 1) = v7;
  v26 = v15 | 0x8000000000000000;
  *(_QWORD *)&v25 = v13;
  if (v7 < 0x20 || (unint64_t)v13 + -v6 - v3 - 8 < 0x20)
    goto LABEL_15;
  v16 = &v12[v7 & 0xFFFFFFFFFFFFFFE0];
  v17 = (__int128 *)((char *)v13 + (v7 & 0xFFFFFFFFFFFFFFE0));
  v20 = v13 + 1;
  v21 = (__int128 *)(v3 + v6 + 24);
  v22 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v23 = *v21;
    *(v20 - 1) = *(v21 - 1);
    *v20 = v23;
    v20 += 2;
    v21 += 2;
    v22 -= 32;
  }
  while (v22);
  if (v7 != (v7 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_16;
LABEL_17:
  *(_BYTE *)v17 = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v25;
  *(_OWORD *)a2 = v25;
  *(_QWORD *)(a2 + 16) = v26;
  a1[6] += v7;
  return result;
}

void sub_2080733E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2080733FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_208073414(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[12];
  v2 = result[9];
  result[6] = *(_QWORD *)(v1 - 8) + *(_QWORD *)(v2 - 8) + 8;
  result[9] = v2 - 8;
  result[12] = v1 - 8;
  return result;
}

_QWORD *sub_20807343C(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_BYTE *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_2080734A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080734BC(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_BYTE *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_208073528(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807353C(_QWORD *result, _WORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_WORD *)(result[3] + v2);
  result[6] += 2;
  return result;
}

void sub_2080735B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080735C4(_QWORD *result, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_DWORD *)(result[3] + v2);
  result[6] += 4;
  return result;
}

void sub_208073638(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807364C(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_QWORD *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_2080736C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080736D4(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_QWORD *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_208073748(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807375C(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_BYTE *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_2080737C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080737DC(_QWORD *result, _BYTE *a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_BYTE *)(result[3] + v2);
  ++result[6];
  return result;
}

void sub_208073848(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807385C(_QWORD *result, _WORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_WORD *)(result[3] + v2);
  result[6] += 2;
  return result;
}

void sub_2080738D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080738E4(_QWORD *result, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_DWORD *)(result[3] + v2);
  result[6] += 4;
  return result;
}

void sub_208073958(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807396C(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_QWORD *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_2080739E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080739F4(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_QWORD *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_208073A68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_208073A7C(_QWORD *result, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_DWORD *)(result[3] + v2);
  result[6] += 4;
  return result;
}

void sub_208073AF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_208073B04(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  *a2 = *(_QWORD *)(result[3] + v2);
  result[6] += 8;
  return result;
}

void sub_208073B78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073B90(_QWORD *a1, size_t __n, void *__dst)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  size_t v6;
  void *result;
  std::logic_error *exception;

  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_208073C14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073C28(_QWORD *a1, size_t __n, void *__dst)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  size_t v6;
  void *result;
  std::logic_error *exception;

  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_208073CAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073CC0(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 2 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_208073D44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073D58(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 4 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_208073DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073DF0(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 8 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_208073E74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073E88(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 8 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_208073F0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073F20(_QWORD *a1, size_t __n, void *__dst)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  size_t v6;
  void *result;
  std::logic_error *exception;

  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_208073FA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208073FB8(_QWORD *a1, size_t __n, void *__dst)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  size_t v6;
  void *result;
  std::logic_error *exception;

  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 < __n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v3), __n);
  a1[6] += __n;
  return result;
}

void sub_20807403C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208074050(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 2 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_2080740D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2080740E8(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 4 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_20807416C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208074180(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 8 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_208074204(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208074218(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 8 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_20807429C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2080742B0(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 4 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_208074334(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_208074348(_QWORD *a1, uint64_t a2, void *__dst)
{
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  size_t v7;
  void *result;
  std::logic_error *exception;

  v3 = 8 * a2;
  v4 = a1[6];
  v5 = a1[7];
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (!v6)
    v7 = 0;
  if (v7 < v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(__dst, (const void *)(a1[3] + v4), v3);
  a1[6] += v3;
  return result;
}

void sub_2080743CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2080743E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 24 * a2;
    do
    {
      sub_20807321C(a1, a3);
      a3 += 24;
      v5 -= 24;
    }
    while (v5);
  }
}

void *sub_20807442C(_QWORD *a1, uint64_t a2)
{
  size_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  size_t v6;
  void *result;
  std::logic_error *exception;

  v2 = *(_QWORD *)a2;
  v3 = a1[6];
  v4 = a1[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 < v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read binary blob");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(*(void **)(a2 + 8), (const void *)(a1[3] + v3), v2);
  a1[6] += v2;
  return result;
}

void sub_2080744B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080744D0(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[7] - 8) + result[3];
  *(_QWORD *)(v1 + 10) = result[4] - v1 - 18;
  result[7] -= 8;
  return result;
}

char *sub_2080744FC(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_208074518(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_208074534(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 2, 2);
}

char *sub_208074550(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 4, 4);
}

char *sub_20807456C(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_208074588(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_2080745A4(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_2080745C0(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 1, 1);
}

char *sub_2080745DC(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 2, 2);
}

char *sub_2080745F8(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 4, 4);
}

char *sub_208074614(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_208074630(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_20807464C(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 4, 4);
}

char *sub_208074668(uint64_t a1, char *__src)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
}

char *sub_208074684(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t __src;
  uint64_t v11;

  v2 = a2;
  v4 = a2[23];
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  __src = v4;
  v5 = a1 + 24;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v11, 8);
  if (v2[23] < 0)
  {
    v6 = *((_QWORD *)v2 + 1);
    if (*(_QWORD *)v2)
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
    {
      v2 = *(char **)v2;
    }
    else
    {
      v8 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
      v2 = 0;
      if (v8)
        abort();
    }
  }
  else
  {
    v6 = v2[23];
  }
  return sub_207D0B114(v5, *(char **)(a1 + 32), v2, &v2[v6], v6);
}

char *sub_208074768(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[a2], a2);
}

char *sub_2080747E8(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[a2], a2);
}

char *sub_208074868(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 2 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_2080748E8(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 4 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074968(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 8 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_2080749E8(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 8 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074A68(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[a2], a2);
}

char *sub_208074AE8(uint64_t a1, int64_t a2, char *__src)
{
  if (!__src
    && a2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[a2], a2);
}

char *sub_208074B68(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 2 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074BE8(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 4 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074C68(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 8 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074CE8(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 8 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074D68(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 4 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074DE8(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;

  v5 = 8 * a2;
  if (!__src
    && v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), __src, &__src[v5], v5);
}

char *sub_208074E68(char *result, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t __src;
  uint64_t v13;

  if (a2)
  {
    v4 = result;
    v5 = (uint64_t)(result + 24);
    v6 = 24 * a2;
    do
    {
      v9 = *(unsigned __int8 *)(a3 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = *(_QWORD *)(a3 + 8);
      __src = v9;
      sub_207D0B114(v5, *((char **)v4 + 4), (char *)&__src, (char *)&v13, 8);
      if (*(char *)(a3 + 23) < 0)
      {
        v8 = *(char **)a3;
        v7 = *(_QWORD *)(a3 + 8);
        if (*(_QWORD *)a3)
          v10 = 1;
        else
          v10 = v7 == 0;
        if (!v10)
        {
          v11 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
          v8 = 0;
          if (v11)
            abort();
        }
      }
      else
      {
        v7 = *(unsigned __int8 *)(a3 + 23);
        v8 = (char *)a3;
      }
      result = sub_207D0B114(v5, *((char **)v4 + 4), v8, &v8[v7], v7);
      a3 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return result;
}

char *sub_208074F88(uint64_t a1, uint64_t a2)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), *(char **)(a2 + 8), (char *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2), *(_QWORD *)a2);
}

char *sub_208074FA0(uint64_t a1, uint64_t a2)
{
  return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), *(char **)(a2 + 8), (char *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2), *(_QWORD *)a2);
}

_QWORD *sub_208074FC0(uint64_t a1, _QWORD **a2, uint64_t *a3)
{
  _QWORD *v3;
  unsigned __int8 *v6;
  std::string *v7;
  std::string::size_type size;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  std::string *v12;
  std::string::size_type v13;
  std::string v14;

  v3 = *a2;
  if (*a3 <= 0)
    return sub_207CBAB98(v3, (uint64_t)"{}", 2);
  sub_207CBAB98(v3, (uint64_t)"{", 1);
  v6 = (unsigned __int8 *)a3[1];
  std::to_string(&v14, *v6);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v14;
  else
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  sub_207CBAB98(*a2, (uint64_t)v7, size);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v9 = (unsigned __int8 *)(a3[1] + *a3);
    v10 = v6 + 1;
    if (v10 == v9)
      return sub_207CBAB98(*a2, (uint64_t)"}", 1);
    do
    {
LABEL_15:
      sub_207CBAB98(*a2, (uint64_t)",", 1);
      std::to_string(&v14, *v10);
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v14;
      else
        v12 = (std::string *)v14.__r_.__value_.__r.__words[0];
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      else
        v13 = v14.__r_.__value_.__l.__size_;
      sub_207CBAB98(*a2, (uint64_t)v12, v13);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      ++v10;
    }
    while (v10 != v9);
    return sub_207CBAB98(*a2, (uint64_t)"}", 1);
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  v9 = (unsigned __int8 *)(a3[1] + *a3);
  v10 = v6 + 1;
  if (v10 != v9)
    goto LABEL_15;
  return sub_207CBAB98(*a2, (uint64_t)"}", 1);
}

void sub_20807512C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (**sub_20807514C(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_208076608;
  v10[0] = sub_208076608;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_208076608;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075294(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080752AC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void (*v12)(int);
  std::__shared_weak_count *v13;

  v4 = (char *)operator new(0x38uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_24C083018;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (char *)operator new(0x30uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_24C072750;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *((_QWORD *)v5 + 5) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v12 = (void (*)(int))(v5 + 24);
  v13 = (std::__shared_weak_count *)v5;
  sub_208075430(*(void (***)(int))a1, &v12);
  v6 = *((_QWORD *)v5 + 3);
  v7 = *((_QWORD *)v5 + 4);
  if (!v6
    && v7
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2082248E3, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  *(_QWORD *)(a1 + 16) = v7 - v6;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = v13;
  if (!v13)
    return a1;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_2080753FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807541C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void (**sub_208075430(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_208076780;
  v10[0] = sub_208076780;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_208076780;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075578(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208075590(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_20807694C;
  v10[0] = sub_20807694C;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_20807694C;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_2080756D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_2080756F0(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_208076B18;
  v10[0] = sub_208076B18;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_208076B18;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075838(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208075850(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_208076CE4;
  v10[0] = sub_208076CE4;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_208076CE4;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075998(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_2080759B0(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_208076EB0;
  v10[0] = sub_208076EB0;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_208076EB0;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075AF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208075B10(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_20807707C;
  v10[0] = sub_20807707C;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_20807707C;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075C58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208075C70(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_208077248;
  v10[0] = sub_208077248;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_208077248;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075DB8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208075DD0(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_208077414;
  v10[0] = sub_208077414;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_208077414;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208075F18(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208075F30(void (**a1)(int a1), void (**a2)(int a1)))(int a1)
{
  void (*v3)(int);
  void (*v4)(int);
  unint64_t *v5;
  unint64_t v6;
  void (*v7)(int);
  void (*v8)(int);
  _QWORD v10[4];
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v10[1] = *a2;
  v10[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = sub_2080775E0;
  v10[0] = sub_2080775E0;
  if (v10 == a1)
    goto LABEL_9;
  v8 = *a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    *a1 = sub_2080775E0;
    return a1;
  }
  v11[0] = 0;
  v11[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v8)(2, a1, v11, 0, 0);
  ((void (*)(int))v10[0])(2);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v11[0])(2, v11, v10, 0, 0);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  v7 = (void (*)(int))v10[0];
  if (v10[0])
LABEL_9:
    v7(0);
  return a1;
}

void sub_208076078(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_208076090(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12[2];
  void *__p[2];
  unsigned __int8 v14;
  char v15;

  LOBYTE(__p[0]) = 123;
  v3 = sub_207CBAB98(a1, (uint64_t)__p, 1);
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 0;
  if (v6
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2082248E3, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v12[0] = v5;
  v12[1] = v4;
  sub_2080761B0(v12, __p);
  if ((v14 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = (uint64_t)__p[1];
  v9 = sub_207CBAB98(v3, (uint64_t)v7, v8);
  v15 = 125;
  result = sub_207CBAB98(v9, (uint64_t)&v15, 1);
  v11 = result;
  if ((char)v14 < 0)
  {
    operator delete(__p[0]);
    return v11;
  }
  return result;
}

void sub_208076194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080761B0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  const std::ios_base *v11;
  uint64_t v12;
  const void **v13;
  const std::locale::facet *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  size_t v18;
  uint64_t *v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *__p[2];
  __int128 v33;
  int v34;
  uint64_t v35[19];
  std::locale v36;

  v4 = MEMORY[0x24BEDB870];
  v5 = MEMORY[0x24BEDB870] + 64;
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v35[0] = MEMORY[0x24BEDB870] + 64;
  v26 = v6;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v8, &v27);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v26 = v4 + 24;
  v35[0] = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x24BEDB848];
  v27 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  v34 = 16;
  v10 = v26;
  *(_DWORD *)((char *)&v26 + *(_QWORD *)(v26 - 24) + 8) = *(_DWORD *)((_BYTE *)&v26 + *(_QWORD *)(v26 - 24) + 8) & 0xFFFFFFB5 | 8;
  v11 = (const std::ios_base *)((char *)&v26 + *(_QWORD *)(v10 - 24));
  if (v11[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v11);
    v14 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 32);
    std::locale::~locale(&v36);
    v11[1].__fmtflags_ = 48;
    v12 = *a1;
    v13 = (const void **)v28;
    if (!*a1)
      goto LABEL_8;
  }
  else
  {
    v11[1].__fmtflags_ = 48;
    v12 = *a1;
    v13 = (const void **)v28;
    if (!*a1)
      goto LABEL_8;
  }
  v15 = a1[1];
  for (i = v12 - 1; ; --i)
  {
    *(_QWORD *)&v28[*(_QWORD *)(v26 - 24)] = 2;
    std::ostream::operator<<();
    if (!i)
      break;
    *(_QWORD *)&v28[*(_QWORD *)(v26 - 24)] = 1;
    LOBYTE(v36.__locale_) = 32;
    sub_207CBAB98(&v26, (uint64_t)&v36, 1);
    ++v15;
  }
LABEL_8:
  if ((v34 & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1) < v31)
    {
      *((_QWORD *)&v33 + 1) = v31;
      v20 = v31;
    }
    v13 = (const void **)&v30;
    v17 = v9;
  }
  else
  {
    v17 = v9;
    if ((v34 & 8) == 0)
    {
      v18 = 0;
      a2[23] = 0;
      v19 = (uint64_t *)MEMORY[0x24BEDB800];
      goto LABEL_23;
    }
    v20 = v29;
  }
  v21 = *v13;
  v18 = v20 - (_QWORD)v21;
  v19 = (uint64_t *)MEMORY[0x24BEDB800];
  if (v20 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    *((_QWORD *)a2 + 1) = v18;
    *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
    *(_QWORD *)a2 = v24;
    a2 = v24;
    goto LABEL_22;
  }
  a2[23] = v18;
  if (v18)
LABEL_22:
    memmove(a2, v21, v18);
LABEL_23:
  a2[v18] = 0;
  v26 = *v19;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v19[3];
  v27 = v17 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x20BD027B8](v35);
}

void sub_2080764A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_208077758((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080764B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 96));
  sub_208077758((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080764D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BD027B8](v1);
  _Unwind_Resume(a1);
}

void sub_2080764F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD027B8](v1);
  _Unwind_Resume(a1);
}

void sub_208076510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_208077758((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208076524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_208077758((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208076538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_208077758((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807654C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C083018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20807655C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C083018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20807657C(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(result + 24);
  if (v1)
    return v1(0, result + 24, 0, 0, 0);
  return result;
}

void sub_2080765B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2080765C8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080765EC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_208076608(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20807663C()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208076688(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208076608;
  return result;
}

__n128 sub_2080766C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208076608;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_2080766F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264B02)
    {
      if (((v6 & 0x8000000208264B02 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264B02))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264B02 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264B38)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_208076780(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2080767B4()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208076800(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208076780;
  return result;
}

__n128 sub_20807683C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208076780;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208076868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264B3CLL)
    {
      if (((v6 & 0x8000000208264B3CLL & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264B3CLL))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264B3CLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264B74)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_2080768F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C0830D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20807690C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C0830D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208076930(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_20807694C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208076980()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_2080769CC(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20807694C;
  return result;
}

__n128 sub_208076A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20807694C;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208076A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264BC2)
    {
      if (((v6 & 0x8000000208264BC2 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264BC2))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264BC2 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264BF8)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_208076AC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208076AD8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208076AFC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_208076B18(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208076B4C()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208076B98(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208076B18;
  return result;
}

__n128 sub_208076BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208076B18;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208076C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264C46)
    {
      if (((v6 & 0x8000000208264C46 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264C46))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264C46 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264C7C)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_208076C90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208076CA4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208076CC8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_208076CE4(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208076D18()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208076D64(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208076CE4;
  return result;
}

__n128 sub_208076DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208076CE4;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208076DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264CCALL)
    {
      if (((v6 & 0x8000000208264CCALL & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264CCALL))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264CCALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264D00)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_208076E5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C0831F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208076E70(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C0831F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208076E94(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_208076EB0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208076EE4()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208076F30(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208076EB0;
  return result;
}

__n128 sub_208076F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208076EB0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208076F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264D4ELL)
    {
      if (((v6 & 0x8000000208264D4ELL & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264D4ELL))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264D4ELL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264D84)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_208077028(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20807703C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208077060(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_20807707C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2080770B0()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_2080770FC(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20807707C;
  return result;
}

__n128 sub_208077138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20807707C;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208077164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264DD2)
    {
      if (((v6 & 0x8000000208264DD2 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264DD2))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264DD2 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264E08)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_2080771F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C0832B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208077208(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C0832B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_20807722C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_208077248(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20807727C()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_2080772C8(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208077248;
  return result;
}

__n128 sub_208077304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208077248;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208077330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264E56)
    {
      if (((v6 & 0x8000000208264E56 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264E56))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264E56 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264E8C)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_2080773C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2080773D4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080773F8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_208077414(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208077448()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208077494(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208077414;
  return result;
}

__n128 sub_2080774D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208077414;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_2080774FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264EDALL)
    {
      if (((v6 & 0x8000000208264EDALL & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264EDALL))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264EDALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264F10)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20807758C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2080775A0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C083378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_2080775C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_2080775E0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208077614()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208077660(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_2080775E0;
  return result;
}

__n128 sub_20807769C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_2080775E0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_2080776C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x8000000208264F5ELL)
    {
      if (((v6 & 0x8000000208264F5ELL & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x8000000208264F5ELL))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000208264F5ELL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208264F94)
  {
    return 0;
  }
  return v5 + 8;
}

uint64_t sub_208077758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD027B8](a1 + 112);
  return a1;
}

void sub_2080777DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21[5])(uint64_t);

  v21[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x18uLL);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)v4 = *(_QWORD *)a1;
  v15 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 8) = v15;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v18 = 0;
  v6 = (void (*)(uint64_t))operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24C0833D8;
  *((_QWORD *)v6 + 1) = 0;
  if (v5)
    v7 = ((uint64_t)v15 - v5) >> 2;
  else
    v7 = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v4;
  v21[1] = (void (*)(uint64_t))v4;
  v21[2] = v6;
  v19 = 0;
  v20 = 0;
  v21[0] = (void (*)(uint64_t))sub_208077B00;
  sub_20807E8C8(&v16, 7, v21, v7, v5);
  if (v21[0])
    v21[0](0);
  v8 = v16;
  v9 = v17;
  *a2 = v16;
  a2[1] = v9;
  v16 = 0;
  v17 = 0;
  if ((*(_BYTE *)(v8 + 56) & 3) != 0)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = *(void **)v18;
    if (*(_QWORD *)v18)
    {
      *((_QWORD *)v18 + 1) = v14;
      operator delete(v14);
    }
    operator delete(v13);
  }
}

void sub_2080779B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208077A3C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208077A50(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t sub_208077A90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9all"
                                "ocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_208077B00(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208077B34()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208077B80(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208077B00;
  return result;
}

__n128 sub_208077BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208077B00;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208077BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9all"
                                    "ocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj2EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208265138)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_208077C68(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22[5])(uint64_t);

  v22[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x18uLL);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)v4 = *(_QWORD *)a1;
  v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 8) = v6;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    v7 = v5;
  else
    v7 = 0;
  if (v5)
    v8 = ((uint64_t)v6 - v5) >> 2;
  else
    v8 = 0;
  v19 = 0;
  v9 = (void (*)(uint64_t))operator new(0x20uLL);
  *(_QWORD *)v9 = &off_24C083438;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v4;
  v22[1] = (void (*)(uint64_t))v4;
  v22[2] = v9;
  v20 = 0;
  v21 = 0;
  v22[0] = (void (*)(uint64_t))sub_208077FA8;
  sub_20807E8C8(&v17, 7, v22, v8, v7);
  if (v22[0])
    v22[0](0);
  v10 = v17;
  v11 = v18;
  *a2 = v17;
  a2[1] = v11;
  v17 = 0;
  v18 = 0;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v10 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v12 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = *(void **)v19;
    if (*(_QWORD *)v19)
    {
      *((_QWORD *)v19 + 1) = v16;
      operator delete(v16);
    }
    operator delete(v15);
  }
}

void sub_208077E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208077EE4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208077EF8(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t sub_208077F38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9all"
                                "ocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_208077FA8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208077FDC()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208078028(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208077FA8;
  return result;
}

__n128 sub_208078064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208077FA8;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208078090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9all"
                                    "ocatorIS8_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorINS_5arrayIN4cv3d3esn4math6VectorIiLj3EEELm2EEENS_9allocatorIS8_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_2082652A0)
  {
    return 0;
  }
  return v5 + 8;
}

_QWORD *sub_208078110(int a1, unsigned __int8 **a2, _QWORD **a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  unsigned int *v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  __int16 *v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  int *v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t *v33;
  unint64_t v34;
  BOOL v35;
  float *v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  double *v40;
  unint64_t v41;
  BOOL v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int *v47;
  unsigned int *v48;
  unint64_t *v49;
  unint64_t *v50;
  char *v51;
  char *v52;
  __int16 *v53;
  __int16 *v54;
  int *v55;
  int *v56;
  uint64_t *v57;
  uint64_t *v58;
  float *v59;
  float *v60;
  double *v61;
  double *v62;

  switch(a1)
  {
    case 0:
      sub_20807EB10(a2, 0);
      v6 = *((_QWORD *)*a2 + 5);
      v5 = (unsigned __int8 *)*((_QWORD *)*a2 + 6);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (!v7
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v5)
        v8 = 0;
      else
        v8 = v6 >= 4;
      if (!v8)
      {
        v9 = *a3;
        if (v6 <= 3)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
        goto LABEL_116;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
      {
        v9 = *a3;
LABEL_116:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807922C(v9, v5);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807922C(v9, v5 + 2);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v6 >> 2 != 1)
        {
          v43 = &v5[4 * (v6 >> 2)];
          v44 = v5 + 4;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807922C(v9, v44);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807922C(v9, v44 + 2);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v44 += 4;
          }
          while (v44 != v43);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      goto LABEL_173;
    case 1:
      sub_20807EB10(a2, 1);
      v11 = *((_QWORD *)*a2 + 5);
      v10 = (unsigned __int16 *)*((_QWORD *)*a2 + 6);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (v12
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v10)
        v13 = 0;
      else
        v13 = v11 >= 8;
      if (!v13)
      {
        v9 = *a3;
        if (v11 <= 7)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
        goto LABEL_122;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
      {
        v9 = *a3;
LABEL_122:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_208079514(v9, v10);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_208079514(v9, v10 + 2);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v11 >> 3 != 1)
        {
          v45 = &v10[4 * (v11 >> 3)];
          v46 = v10 + 4;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_208079514(v9, v46);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_208079514(v9, v46 + 2);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v46 += 4;
          }
          while (v46 != v45);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      goto LABEL_173;
    case 2:
      sub_20807EB10(a2, 2);
      v15 = *((_QWORD *)*a2 + 5);
      v14 = (unsigned int *)*((_QWORD *)*a2 + 6);
      if (v14)
        v16 = 0;
      else
        v16 = v15 >= 4;
      if (v16
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v14)
        v17 = 0;
      else
        v17 = v15 >= 0x10;
      if (!v17)
      {
        v9 = *a3;
        if (v15 <= 0xF)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
        goto LABEL_128;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
      {
        v9 = *a3;
LABEL_128:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_2080797FC(v9, v14);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_2080797FC(v9, v14 + 2);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v15 >> 4 != 1)
        {
          v47 = &v14[4 * (v15 >> 4)];
          v48 = v14 + 4;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_2080797FC(v9, v48);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_2080797FC(v9, v48 + 2);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v48 += 4;
          }
          while (v48 != v47);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      goto LABEL_173;
    case 3:
      sub_20807EB10(a2, 3);
      v19 = *((_QWORD *)*a2 + 5);
      v18 = (unint64_t *)*((_QWORD *)*a2 + 6);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 8;
      if (v20
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (!v18 && v19 >= 0x20)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          v9 = *a3;
          goto LABEL_133;
        }
LABEL_173:
        abort();
      }
      v9 = *a3;
      if (v19 > 0x1F)
      {
LABEL_133:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_208079928(v9, v18);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_208079928(v9, v18 + 2);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v19 >> 5 != 1)
        {
          v49 = &v18[4 * (v19 >> 5)];
          v50 = v18 + 4;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_208079928(v9, v50);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_208079928(v9, v50 + 2);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v50 += 4;
          }
          while (v50 != v49);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      return sub_207CBAB98(v9, (uint64_t)"{}", 2);
    case 5:
      sub_20807EB10(a2, 5);
      v22 = *((_QWORD *)*a2 + 5);
      v21 = (char *)*((_QWORD *)*a2 + 6);
      if (v21)
        v23 = 1;
      else
        v23 = v22 == 0;
      if (!v23
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v21)
        v24 = 0;
      else
        v24 = v22 >= 4;
      if (v24)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v22 <= 3)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_208079C10(v9, v21);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_208079C10(v9, v21 + 2);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v22 >> 2 != 1)
      {
        v51 = &v21[4 * (v22 >> 2)];
        v52 = v21 + 4;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_208079C10(v9, v52);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_208079C10(v9, v52 + 2);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v52 += 4;
        }
        while (v52 != v51);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 6:
      sub_20807EB10(a2, 6);
      v26 = *((_QWORD *)*a2 + 5);
      v25 = (__int16 *)*((_QWORD *)*a2 + 6);
      if (v25)
        v27 = 0;
      else
        v27 = v26 >= 2;
      if (v27
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v25)
        v28 = 0;
      else
        v28 = v26 >= 8;
      if (v28)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v26 <= 7)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_208079EF8(v9, v25);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_208079EF8(v9, v25 + 2);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v26 >> 3 != 1)
      {
        v53 = &v25[4 * (v26 >> 3)];
        v54 = v25 + 4;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_208079EF8(v9, v54);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_208079EF8(v9, v54 + 2);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v54 += 4;
        }
        while (v54 != v53);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 7:
      sub_20807EB10(a2, 7);
      v30 = *((_QWORD *)*a2 + 5);
      v29 = (int *)*((_QWORD *)*a2 + 6);
      if (v29)
        v31 = 0;
      else
        v31 = v30 >= 4;
      if (v31
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v29)
        v32 = 0;
      else
        v32 = v30 >= 0x10;
      if (v32)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v30 <= 0xF)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_20807A1E0(v9, v29);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_20807A1E0(v9, v29 + 2);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v30 >> 4 != 1)
      {
        v55 = &v29[4 * (v30 >> 4)];
        v56 = v29 + 4;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_20807A1E0(v9, v56);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_20807A1E0(v9, v56 + 2);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v56 += 4;
        }
        while (v56 != v55);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 8:
      sub_20807EB10(a2, 8);
      v34 = *((_QWORD *)*a2 + 5);
      v33 = (uint64_t *)*((_QWORD *)*a2 + 6);
      if (v33)
        v35 = 0;
      else
        v35 = v34 >= 8;
      if (v35
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (!v33 && v34 >= 0x20)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
LABEL_156:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807A4C8(v9, v33);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807A4C8(v9, v33 + 2);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v34 >> 5 != 1)
        {
          v57 = &v33[4 * (v34 >> 5)];
          v58 = v33 + 4;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807A4C8(v9, v58);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807A4C8(v9, v58 + 2);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v58 += 4;
          }
          while (v58 != v57);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      v9 = *a3;
      if (v34 > 0x1F)
        goto LABEL_156;
      return sub_207CBAB98(v9, (uint64_t)"{}", 2);
    case 11:
      sub_20807EB10(a2, 11);
      v37 = *((_QWORD *)*a2 + 5);
      v36 = (float *)*((_QWORD *)*a2 + 6);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v36)
        v39 = 0;
      else
        v39 = v37 >= 0x10;
      if (v39)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v37 <= 0xF)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_20807A7B0(v9, v36);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_20807A7B0(v9, v36 + 2);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v37 >> 4 != 1)
      {
        v59 = &v36[4 * (v37 >> 4)];
        v60 = v36 + 4;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_20807A7B0(v9, v60);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_20807A7B0(v9, v60 + 2);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v60 += 4;
        }
        while (v60 != v59);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 12:
      sub_20807EB10(a2, 12);
      v41 = *((_QWORD *)*a2 + 5);
      v40 = (double *)*((_QWORD *)*a2 + 6);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (v42
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (!v40 && v41 >= 0x20)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
LABEL_169:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807A8DC(v9, v40);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807A8DC(v9, v40 + 2);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v41 >> 5 != 1)
        {
          v61 = &v40[4 * (v41 >> 5)];
          v62 = v40 + 4;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807A8DC(v9, v62);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807A8DC(v9, v62 + 2);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v62 += 4;
          }
          while (v62 != v61);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      v9 = *a3;
      if (v41 > 0x1F)
        goto LABEL_169;
      return sub_207CBAB98(v9, (uint64_t)"{}", 2);
    default:
      sub_2082056D4(a1);
  }
}

_QWORD *sub_20807922C(_QWORD *a1, unsigned __int8 *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_208079358((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_208079314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208079330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208079344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208079358(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v11, a2);
}

void sub_2080794F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_208079514(_QWORD *a1, unsigned __int16 *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_208079640((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_2080795FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208079618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208079640(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v11, a2);
}

void sub_2080797D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2080797FC(_QWORD *a1, unsigned int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_207E368AC((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_2080798E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208079900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208079914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_208079928(_QWORD *a1, unint64_t *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_208079A54((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_208079A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208079A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208079A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208079A54(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v11, a2);
}

void sub_208079BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_208079C10(_QWORD *a1, char *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_208079D3C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_208079CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208079D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208079D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_208079D3C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v11, a2);
}

void sub_208079ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_208079EF8(_QWORD *a1, __int16 *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807A024((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_208079FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_208079FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807A010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807A024(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v11, a2);
}

void sub_20807A1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807A1E0(_QWORD *a1, int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807A30C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807A2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807A2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807A30C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v11, a2);
}

void sub_20807A4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807A4C8(_QWORD *a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807A5F4((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807A5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807A5F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v11, a2);
}

void sub_20807A78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807A7B0(_QWORD *a1, float *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_207E36A68((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807A898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807A8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807A8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807A8DC(_QWORD *a1, double *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807AA08((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807A9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807A9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807A9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807AA08(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t *v14;

  v9 = a2;
  v10 = "{";
  v11 = a2;
  v12 = "{";
  v13 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **))off_24C0834A0[v3])(&v14);
  sub_207DF6804((uint64_t)&v9, a2, a3);
  v9 = a2;
  v10 = ",";
  v11 = a2;
  v12 = ",";
  v13 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_24C0834A0[v6])(&v14, a2);
  sub_207DF6804((uint64_t)&v9, a2, a3 + 1);
  v9 = a2;
  v10 = "}";
  v11 = a2;
  v12 = "}";
  v13 = "}";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
LABEL_5:
    sub_207CA9F48();
  v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C0834A0[v7])(&v14, a2);
}

_QWORD *sub_20807AB0C(int a1, unsigned __int8 **a2, _QWORD **a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  unsigned int *v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  __int16 *v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  int *v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  uint64_t *v33;
  unint64_t v34;
  BOOL v35;
  float *v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  double *v40;
  unint64_t v41;
  BOOL v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int *v47;
  unsigned int *v48;
  unint64_t *v49;
  unint64_t *v50;
  char *v51;
  char *v52;
  __int16 *v53;
  __int16 *v54;
  int *v55;
  int *v56;
  uint64_t *v57;
  uint64_t *v58;
  float *v59;
  float *v60;
  double *v61;
  double *v62;

  switch(a1)
  {
    case 0:
      sub_20807EB10(a2, 0);
      v6 = *((_QWORD *)*a2 + 5);
      v5 = (unsigned __int8 *)*((_QWORD *)*a2 + 6);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (!v7
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v5)
        v8 = 0;
      else
        v8 = v6 >= 6;
      if (!v8)
      {
        v9 = *a3;
        if (v6 <= 5)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
        goto LABEL_116;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
      {
        v9 = *a3;
LABEL_116:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807BCF0(v9, v5);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807BCF0(v9, v5 + 3);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v6 - 6 >= 6)
        {
          v43 = &v5[6 * (v6 / 6)];
          v44 = v5 + 6;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807BCF0(v9, v44);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807BCF0(v9, v44 + 3);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v44 += 6;
          }
          while (v44 != v43);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      goto LABEL_173;
    case 1:
      sub_20807EB10(a2, 1);
      v11 = *((_QWORD *)*a2 + 5);
      v10 = (unsigned __int16 *)*((_QWORD *)*a2 + 6);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (v12
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v10)
        v13 = 0;
      else
        v13 = v11 >= 0xC;
      if (!v13)
      {
        v9 = *a3;
        if (v11 <= 0xB)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
        goto LABEL_122;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
      {
        v9 = *a3;
LABEL_122:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807C05C(v9, v10);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807C05C(v9, v10 + 3);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v11 - 12 >= 0xC)
        {
          v45 = &v10[6 * (v11 / 0xC)];
          v46 = v10 + 6;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807C05C(v9, v46);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807C05C(v9, v46 + 3);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v46 += 6;
          }
          while (v46 != v45);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      goto LABEL_173;
    case 2:
      sub_20807EB10(a2, 2);
      v15 = *((_QWORD *)*a2 + 5);
      v14 = (unsigned int *)*((_QWORD *)*a2 + 6);
      if (v14)
        v16 = 0;
      else
        v16 = v15 >= 4;
      if (v16
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v14)
        v17 = 0;
      else
        v17 = v15 >= 0x18;
      if (!v17)
      {
        v9 = *a3;
        if (v15 <= 0x17)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
        goto LABEL_128;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
      {
        v9 = *a3;
LABEL_128:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807C3C8(v9, v14);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807C3C8(v9, v14 + 3);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v15 - 24 >= 0x18)
        {
          v47 = &v14[6 * (v15 / 0x18)];
          v48 = v14 + 6;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807C3C8(v9, v48);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807C3C8(v9, v48 + 3);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v48 += 6;
          }
          while (v48 != v47);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      goto LABEL_173;
    case 3:
      sub_20807EB10(a2, 3);
      v19 = *((_QWORD *)*a2 + 5);
      v18 = (unint64_t *)*((_QWORD *)*a2 + 6);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 8;
      if (v20
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (!v18 && v19 >= 0x30)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          v9 = *a3;
          goto LABEL_133;
        }
LABEL_173:
        abort();
      }
      v9 = *a3;
      if (v19 > 0x2F)
      {
LABEL_133:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807C4F4(v9, v18);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807C4F4(v9, v18 + 3);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v19 - 48 >= 0x30)
        {
          v49 = &v18[6 * (v19 / 0x30)];
          v50 = v18 + 6;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807C4F4(v9, v50);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807C4F4(v9, v50 + 3);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v50 += 6;
          }
          while (v50 != v49);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      return sub_207CBAB98(v9, (uint64_t)"{}", 2);
    case 5:
      sub_20807EB10(a2, 5);
      v22 = *((_QWORD *)*a2 + 5);
      v21 = (char *)*((_QWORD *)*a2 + 6);
      if (v21)
        v23 = 1;
      else
        v23 = v22 == 0;
      if (!v23
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v21)
        v24 = 0;
      else
        v24 = v22 >= 6;
      if (v24)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v22 <= 5)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_20807C860(v9, v21);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_20807C860(v9, v21 + 3);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v22 - 6 >= 6)
      {
        v51 = &v21[6 * (v22 / 6)];
        v52 = v21 + 6;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_20807C860(v9, v52);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_20807C860(v9, v52 + 3);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v52 += 6;
        }
        while (v52 != v51);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 6:
      sub_20807EB10(a2, 6);
      v26 = *((_QWORD *)*a2 + 5);
      v25 = (__int16 *)*((_QWORD *)*a2 + 6);
      if (v25)
        v27 = 0;
      else
        v27 = v26 >= 2;
      if (v27
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v25)
        v28 = 0;
      else
        v28 = v26 >= 0xC;
      if (v28)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v26 <= 0xB)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_20807CBCC(v9, v25);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_20807CBCC(v9, v25 + 3);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v26 - 12 >= 0xC)
      {
        v53 = &v25[6 * (v26 / 0xC)];
        v54 = v25 + 6;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_20807CBCC(v9, v54);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_20807CBCC(v9, v54 + 3);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v54 += 6;
        }
        while (v54 != v53);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 7:
      sub_20807EB10(a2, 7);
      v30 = *((_QWORD *)*a2 + 5);
      v29 = (int *)*((_QWORD *)*a2 + 6);
      if (v29)
        v31 = 0;
      else
        v31 = v30 >= 4;
      if (v31
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v29)
        v32 = 0;
      else
        v32 = v30 >= 0x18;
      if (v32)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v30 <= 0x17)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_20807CF38(v9, v29);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_20807CF38(v9, v29 + 3);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v30 - 24 >= 0x18)
      {
        v55 = &v29[6 * (v30 / 0x18)];
        v56 = v29 + 6;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_20807CF38(v9, v56);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_20807CF38(v9, v56 + 3);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v56 += 6;
        }
        while (v56 != v55);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 8:
      sub_20807EB10(a2, 8);
      v34 = *((_QWORD *)*a2 + 5);
      v33 = (uint64_t *)*((_QWORD *)*a2 + 6);
      if (v33)
        v35 = 0;
      else
        v35 = v34 >= 8;
      if (v35
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (!v33 && v34 >= 0x30)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
LABEL_156:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807D2A4(v9, v33);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807D2A4(v9, v33 + 3);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v34 - 48 >= 0x30)
        {
          v57 = &v33[6 * (v34 / 0x30)];
          v58 = v33 + 6;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807D2A4(v9, v58);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807D2A4(v9, v58 + 3);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v58 += 6;
          }
          while (v58 != v57);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      v9 = *a3;
      if (v34 > 0x2F)
        goto LABEL_156;
      return sub_207CBAB98(v9, (uint64_t)"{}", 2);
    case 11:
      sub_20807EB10(a2, 11);
      v37 = *((_QWORD *)*a2 + 5);
      v36 = (float *)*((_QWORD *)*a2 + 6);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (v36)
        v39 = 0;
      else
        v39 = v37 >= 0x18;
      if (v39)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
      }
      else
      {
        v9 = *a3;
        if (v37 <= 0x17)
          return sub_207CBAB98(v9, (uint64_t)"{}", 2);
      }
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_207CBAB98(v9, (uint64_t)"{", 1);
      sub_20807D610(v9, v36);
      sub_207CBAB98(v9, (uint64_t)",", 1);
      sub_20807D610(v9, v36 + 3);
      sub_207CBAB98(v9, (uint64_t)"}", 1);
      if (v37 - 24 >= 0x18)
      {
        v59 = &v36[6 * (v37 / 0x18)];
        v60 = v36 + 6;
        do
        {
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_207CBAB98(v9, (uint64_t)"{", 1);
          sub_20807D610(v9, v60);
          sub_207CBAB98(v9, (uint64_t)",", 1);
          sub_20807D610(v9, v60 + 3);
          sub_207CBAB98(v9, (uint64_t)"}", 1);
          v60 += 6;
        }
        while (v60 != v59);
      }
      return sub_207CBAB98(v9, (uint64_t)"}", 1);
    case 12:
      sub_20807EB10(a2, 12);
      v41 = *((_QWORD *)*a2 + 5);
      v40 = (double *)*((_QWORD *)*a2 + 6);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (v42
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_173;
      }
      if (!v40 && v41 >= 0x30)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224959, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_173;
        }
        v9 = *a3;
LABEL_169:
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_207CBAB98(v9, (uint64_t)"{", 1);
        sub_20807D73C(v9, v40);
        sub_207CBAB98(v9, (uint64_t)",", 1);
        sub_20807D73C(v9, v40 + 3);
        sub_207CBAB98(v9, (uint64_t)"}", 1);
        if (v41 - 48 >= 0x30)
        {
          v61 = &v40[6 * (v41 / 0x30)];
          v62 = v40 + 6;
          do
          {
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_207CBAB98(v9, (uint64_t)"{", 1);
            sub_20807D73C(v9, v62);
            sub_207CBAB98(v9, (uint64_t)",", 1);
            sub_20807D73C(v9, v62 + 3);
            sub_207CBAB98(v9, (uint64_t)"}", 1);
            v62 += 6;
          }
          while (v62 != v61);
        }
        return sub_207CBAB98(v9, (uint64_t)"}", 1);
      }
      v9 = *a3;
      if (v41 > 0x2F)
        goto LABEL_169;
      return sub_207CBAB98(v9, (uint64_t)"{}", 2);
    default:
      sub_2082056D4(a1);
  }
}

_QWORD *sub_20807BCF0(_QWORD *a1, unsigned __int8 *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807BE1C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807BDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807BE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807BE1C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v11])(&v13, a2);
}

void sub_20807C038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807C05C(_QWORD *a1, unsigned __int16 *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807C188((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807C144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807C160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807C174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807C188(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v11])(&v13, a2);
}

void sub_20807C3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807C3C8(_QWORD *a1, unsigned int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_207E3666C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807C4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807C4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807C4F4(_QWORD *a1, unint64_t *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807C620((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807C5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807C5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807C60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807C620(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v11])(&v13, a2);
}

void sub_20807C83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807C860(_QWORD *a1, char *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807C98C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807C948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807C978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807C98C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v11])(&v13, a2);
}

void sub_20807CBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807CBCC(_QWORD *a1, __int16 *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807CCF8((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807CCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807CCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807CCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807CCF8(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v11])(&v13, a2);
}

void sub_20807CF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807CF38(_QWORD *a1, int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807D064((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807D03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807D050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807D064(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v11])(&v13, a2);
}

void sub_20807D280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807D2A4(_QWORD *a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20807D3D0((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807D38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807D3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807D3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20807D3D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0834A0[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0834A0[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0834B8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0834A0[v11])(&v13, a2);
}

void sub_20807D5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807D610(_QWORD *a1, float *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_207E35C2C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807D6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807D728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807D73C(_QWORD *a1, double *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_207F0BBC8((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0834D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C083488[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20807D824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20807D840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807D868(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C083068;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_20807514C((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = v8 - v9;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807D9F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807DA08(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C072750;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_208075430((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = v8 - v9;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807DB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807DB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807DBA8(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C0830D8;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_208075590((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 1;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807DD38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807DD4C(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C083138;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_2080756F0((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 1;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807DEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807DEDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807DEF0(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C083198;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_208075850((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 2;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807E060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807E080(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807E094(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C0831F8;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_2080759B0((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 2;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807E224(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807E238(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C083258;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_208075B10((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 3;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807E3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807E3C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807E3DC(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C0832B8;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_208075C70((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 3;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807E54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807E56C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807E580(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C083318;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_208075DD0((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 2;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807E6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807E710(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807E724(_QWORD *a1, char a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void (*v16)(int);
  std::__shared_weak_count *v17;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0834F8;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  a1[1] = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *a1 = v6;
  *v6 = a2;
  v7 = (char *)operator new(0x30uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_24C083378;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void (*)(int))(v7 + 24);
  v17 = (std::__shared_weak_count *)v7;
  sub_208075F30((void (**)(int))(*a1 + 8), &v16);
  v9 = *((_QWORD *)v7 + 3);
  v8 = *((_QWORD *)v7 + 4);
  v10 = v8 - v9;
  v11 = *a1;
  *(_QWORD *)(*a1 + 56) = (v8 - v9) >> 3;
  if (v8 && !v9)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v11 = *a1;
  }
  *(_QWORD *)(v11 + 40) = v10;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_20807E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78(v9);
  _Unwind_Resume(a1);
}

void sub_20807E8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807E8C8(_QWORD *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = off_24C0834F8;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *v10 = a2;
  sub_207E88140(v11, a3);
  v12 = *a1;
  *(_QWORD *)(*a1 + 56) = a4;
  v13 = 4 * a4;
  if (!a5 && v13)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v12 = *a1;
  }
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = a5;
  return a1;
}

void sub_20807E9A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20807E9EC(_QWORD *a1, char a2, void (**a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = off_24C0834F8;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  a1[1] = v10;
  v11 = v10 + 32;
  *(_OWORD *)(v10 + 24) = 0u;
  v10 += 24;
  *a1 = v10;
  *v10 = a2;
  sub_207E88140(v11, a3);
  v12 = *a1;
  *(_QWORD *)(*a1 + 56) = a4;
  v13 = 4 * a4;
  if (!a5 && v13)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v12 = *a1;
  }
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = a5;
  return a1;
}

void sub_20807EACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **sub_20807EB10(unsigned __int8 **result, int a2)
{
  _BYTE **v2;
  std::logic_error *exception;
  std::string v4;
  char v5;

  v5 = a2;
  if (**result != a2)
  {
    v2 = result;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v4);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20807EBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20807EBF4(char *__s, _BYTE *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD v11[5];
  _QWORD *v12;

  v10 = 0;
  sub_207F0A064(v9, __s);
  sub_207E393A8((uint64_t)&v8, (uint64_t)v9, a2);
  v11[0] = v9;
  v11[1] = a3;
  v11[2] = v9;
  v11[3] = a3;
  v11[4] = a3;
  if (v10 == -1)
    sub_207CA9F48();
  v12 = v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C083550[v10])(&v12, v9);
  sub_207E393A8((uint64_t)v11, (uint64_t)v9, a4);
  if (v10 == -1)
    sub_207CA9F48();
  v11[0] = &v12;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C083568[v10])(v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C083538[v10])(v11, v9);
  return result;
}

void sub_20807ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807ED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807ED30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20807ED58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20807ED6C(_QWORD *a1, unsigned __int8 **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  BOOL v8;
  unsigned __int16 *v9;
  unint64_t v10;
  BOOL v11;
  unsigned int *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  std::string *v21;
  std::string::size_type v22;
  uint64_t v23;
  char *v24;
  std::string *v25;
  std::string::size_type v26;
  __int16 *v27;
  unint64_t v28;
  BOOL v29;
  int *v30;
  unint64_t v31;
  BOOL v32;
  uint64_t *v33;
  unint64_t v34;
  BOOL v35;
  float *v36;
  unint64_t v37;
  BOOL v38;
  double *v39;
  unint64_t v40;
  BOOL v41;
  const char *v42;
  _QWORD *v43;
  uint64_t v44;
  std::string *v45;
  std::string::size_type size;
  unint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type v60;
  unint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  std::string *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  unint64_t v68;
  __int16 *v69;
  uint64_t v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  unint64_t v75;
  int *v76;
  uint64_t v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  std::string::size_type v81;
  unint64_t v82;
  unint64_t v83;
  float *v84;
  uint64_t v85;
  unint64_t v86;
  double *v87;
  uint64_t v88;
  uint64_t *v90;
  uint64_t v91;
  std::string *v92;
  std::string::size_type v93;
  _QWORD *v94;
  char v95;
  std::string v96;

  v4 = sub_207CBAB98(a1, (uint64_t)"{", 1);
  v96.__r_.__value_.__s.__data_[0] = **a2;
  v5 = sub_208205930(v4, &v96);
  sub_207CBAB98(v5, (uint64_t)",", 1);
  switch(**a2)
  {
    case 0u:
      sub_20807EB10(a2, 0);
      v7 = *((_QWORD *)*a2 + 5);
      v6 = *((_QWORD *)*a2 + 6);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_217;
      }
      v96.__r_.__value_.__r.__words[0] = v7;
      v96.__r_.__value_.__l.__size_ = v6;
      v94 = a1;
      sub_208074FC0((uint64_t)&v95, &v94, (uint64_t *)&v96);
      return sub_207CBAB98(a1, (uint64_t)"}", 1);
    case 1u:
      sub_20807EB10(a2, 1);
      v10 = *((_QWORD *)*a2 + 5);
      v9 = (unsigned __int16 *)*((_QWORD *)*a2 + 6);
      if (v9)
        v11 = 0;
      else
        v11 = v10 >= 2;
      if (v11)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
LABEL_82:
          sub_207CBAB98(a1, (uint64_t)"{", 1);
          std::to_string(&v96, *v9);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v45 = &v96;
          else
            v45 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            size = v96.__r_.__value_.__l.__size_;
          sub_207CBAB98(a1, (uint64_t)v45, size);
          v47 = v10 >> 1;
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          if (v47 != 1)
          {
            v48 = v9 + 1;
            v49 = 2 * v47 - 2;
            do
            {
              sub_207CBAB98(a1, (uint64_t)",", 1);
              std::to_string(&v96, *v48);
              if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v50 = &v96;
              else
                v50 = (std::string *)v96.__r_.__value_.__r.__words[0];
              if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v51 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
              else
                v51 = v96.__r_.__value_.__l.__size_;
              sub_207CBAB98(a1, (uint64_t)v50, v51);
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v96.__r_.__value_.__l.__data_);
              ++v48;
              v49 -= 2;
            }
            while (v49);
          }
LABEL_191:
          v42 = "}";
          v43 = a1;
LABEL_204:
          v44 = 1;
          goto LABEL_205;
        }
LABEL_217:
        abort();
      }
      if (v10 > 1)
        goto LABEL_82;
LABEL_80:
      v42 = "{}";
      v43 = a1;
      v44 = 2;
LABEL_205:
      sub_207CBAB98(v43, (uint64_t)v42, v44);
      return sub_207CBAB98(a1, (uint64_t)"}", 1);
    case 2u:
      sub_20807EB10(a2, 2);
      v13 = *((_QWORD *)*a2 + 5);
      v12 = (unsigned int *)*((_QWORD *)*a2 + 6);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 4;
      if (v14)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_217;
        }
      }
      else if (v13 <= 3)
      {
        goto LABEL_80;
      }
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v12);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v96;
      else
        v52 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v53 = v96.__r_.__value_.__l.__size_;
      sub_207CBAB98(a1, (uint64_t)v52, v53);
      v54 = v13 >> 2;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (v54 != 1)
      {
        v55 = v12 + 1;
        v56 = 4 * v54 - 4;
        do
        {
          sub_207CBAB98(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = &v96;
          else
            v57 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v58 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v58 = v96.__r_.__value_.__l.__size_;
          sub_207CBAB98(a1, (uint64_t)v57, v58);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          ++v55;
          v56 -= 4;
        }
        while (v56);
      }
      goto LABEL_191;
    case 3u:
      sub_20807EB10(a2, 3);
      v16 = *((_QWORD *)*a2 + 5);
      v15 = (unint64_t *)*((_QWORD *)*a2 + 6);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 8;
      if (v17)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_217;
        }
      }
      else if (v16 <= 7)
      {
        goto LABEL_80;
      }
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v15);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v96;
      else
        v59 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v60 = v96.__r_.__value_.__l.__size_;
      sub_207CBAB98(a1, (uint64_t)v59, v60);
      v61 = v16 >> 3;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (v61 != 1)
      {
        v62 = v15 + 1;
        v63 = 8 * v61 - 8;
        do
        {
          sub_207CBAB98(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v62);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = &v96;
          else
            v64 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v65 = v96.__r_.__value_.__l.__size_;
          sub_207CBAB98(a1, (uint64_t)v64, v65);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          ++v62;
          v63 -= 8;
        }
        while (v63);
      }
      goto LABEL_191;
    case 5u:
      sub_20807EB10(a2, 5);
      v19 = *((_QWORD *)*a2 + 5);
      v18 = (char *)*((_QWORD *)*a2 + 6);
      if (v18)
        v20 = 1;
      else
        v20 = v19 == 0;
      if (!v20
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_217;
      }
      if (v19 <= 0)
        goto LABEL_80;
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v18);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v96;
      else
        v21 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v22 = v96.__r_.__value_.__l.__size_;
      sub_207CBAB98(a1, (uint64_t)v21, v22);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      v23 = v19 - 1;
      if (v23)
      {
        v24 = v18 + 1;
        do
        {
          sub_207CBAB98(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v24);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v96;
          else
            v25 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v26 = v96.__r_.__value_.__l.__size_;
          sub_207CBAB98(a1, (uint64_t)v25, v26);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          ++v24;
          --v23;
        }
        while (v23);
      }
      goto LABEL_191;
    case 6u:
      sub_20807EB10(a2, 6);
      v28 = *((_QWORD *)*a2 + 5);
      v27 = (__int16 *)*((_QWORD *)*a2 + 6);
      if (v27)
        v29 = 0;
      else
        v29 = v28 >= 2;
      if (v29)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_217;
        }
      }
      else if (v28 <= 1)
      {
        goto LABEL_80;
      }
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v27);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &v96;
      else
        v66 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v67 = v96.__r_.__value_.__l.__size_;
      sub_207CBAB98(a1, (uint64_t)v66, v67);
      v68 = v28 >> 1;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (v68 != 1)
      {
        v69 = v27 + 1;
        v70 = 2 * v68 - 2;
        do
        {
          sub_207CBAB98(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v69);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &v96;
          else
            v71 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v72 = v96.__r_.__value_.__l.__size_;
          sub_207CBAB98(a1, (uint64_t)v71, v72);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          ++v69;
          v70 -= 2;
        }
        while (v70);
      }
      goto LABEL_191;
    case 7u:
      sub_20807EB10(a2, 7);
      v31 = *((_QWORD *)*a2 + 5);
      v30 = (int *)*((_QWORD *)*a2 + 6);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 4;
      if (v32)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_217;
        }
      }
      else if (v31 <= 3)
      {
        goto LABEL_80;
      }
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v30);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = &v96;
      else
        v73 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v74 = v96.__r_.__value_.__l.__size_;
      sub_207CBAB98(a1, (uint64_t)v73, v74);
      v75 = v31 >> 2;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (v75 != 1)
      {
        v76 = v30 + 1;
        v77 = 4 * v75 - 4;
        do
        {
          sub_207CBAB98(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v76);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = &v96;
          else
            v78 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v79 = v96.__r_.__value_.__l.__size_;
          sub_207CBAB98(a1, (uint64_t)v78, v79);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          ++v76;
          v77 -= 4;
        }
        while (v77);
      }
      goto LABEL_191;
    case 8u:
      sub_20807EB10(a2, 8);
      v34 = *((_QWORD *)*a2 + 5);
      v33 = (uint64_t *)*((_QWORD *)*a2 + 6);
      if (v33)
        v35 = 0;
      else
        v35 = v34 >= 8;
      if (v35)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_217;
        }
      }
      else if (v34 <= 7)
      {
        goto LABEL_80;
      }
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      std::to_string(&v96, *v33);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v96;
      else
        v80 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v81 = v96.__r_.__value_.__l.__size_;
      sub_207CBAB98(a1, (uint64_t)v80, v81);
      v82 = v34 >> 3;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (v82 != 1)
      {
        v90 = v33 + 1;
        v91 = 8 * v82 - 8;
        do
        {
          sub_207CBAB98(a1, (uint64_t)",", 1);
          std::to_string(&v96, *v90);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v92 = &v96;
          else
            v92 = (std::string *)v96.__r_.__value_.__r.__words[0];
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          else
            v93 = v96.__r_.__value_.__l.__size_;
          sub_207CBAB98(a1, (uint64_t)v92, v93);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v96.__r_.__value_.__l.__data_);
          ++v90;
          v91 -= 8;
        }
        while (v91);
      }
      goto LABEL_191;
    case 0xBu:
      sub_20807EB10(a2, 11);
      v37 = *((_QWORD *)*a2 + 5);
      v36 = (float *)*((_QWORD *)*a2 + 6);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_217;
        }
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      }
      else
      {
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        if (v37 <= 3)
          goto LABEL_80;
      }
      v83 = v37 >> 2;
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      sub_207E36B6C((uint64_t)&v94, &v96, v36);
      if (v83 != 1)
      {
        v84 = v36 + 1;
        v85 = 4 * v83 - 4;
        do
        {
          sub_207CBAB98(v96.__r_.__value_.__l.__data_, (uint64_t)",", 1);
          sub_207E36B6C((uint64_t)&v94, &v96, v84++);
          v85 -= 4;
        }
        while (v85);
      }
      goto LABEL_203;
    case 0xCu:
      sub_20807EB10(a2, 12);
      v40 = *((_QWORD *)*a2 + 5);
      v39 = (double *)*((_QWORD *)*a2 + 6);
      if (v39)
        v41 = 0;
      else
        v41 = v40 >= 8;
      if (v41)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_217;
        }
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
      }
      else
      {
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
        if (v40 <= 7)
          goto LABEL_80;
      }
      v86 = v40 >> 3;
      sub_207CBAB98(a1, (uint64_t)"{", 1);
      sub_208080464((uint64_t)&v94, &v96, v39);
      if (v86 != 1)
      {
        v87 = v39 + 1;
        v88 = 8 * v86 - 8;
        do
        {
          sub_207CBAB98(v96.__r_.__value_.__l.__data_, (uint64_t)",", 1);
          sub_208080464((uint64_t)&v94, &v96, v87++);
          v88 -= 8;
        }
        while (v88);
      }
LABEL_203:
      v43 = (_QWORD *)v96.__r_.__value_.__r.__words[0];
      v42 = "}";
      goto LABEL_204;
    default:
      sub_2082056D4(**a2);
  }
}

void sub_20807F8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20807F93C(int a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  const void *v5;
  BOOL v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  BOOL v10;
  const void *v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  const void *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  const void *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v35;
  float *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  float *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  uint64_t v49;
  float *v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  float *v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  switch(a1)
  {
    case 0:
    case 5:
      v3 = *(_QWORD *)(a2 + 8);
      v4 = *(_QWORD *)(v3 + 40);
      v5 = *(const void **)(v3 + 48);
      if (v5)
        v6 = 1;
      else
        v6 = v4 == 0;
      if (!v6
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v7 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(v7 + 40);
      v8 = *(const void **)(v7 + 48);
      v10 = v8 || v9 == 0;
      if (!v10
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      if (v4 != v9)
        return 0;
      v11 = v5;
      v12 = v8;
      v13 = v4;
      return memcmp(v11, v12, v13) == 0;
    case 1:
    case 6:
      v14 = *(_QWORD *)(a2 + 8);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(const void **)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 2;
      if (v17
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v18 = *(_QWORD *)(a2 + 16);
      v20 = *(_QWORD *)(v18 + 40);
      v19 = *(const void **)(v18 + 48);
      v21 = !v19 && v20 >= 2;
      if (v21
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v13 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if ((v16 & 0xFFFFFFFFFFFFFFFELL) != (v20 & 0xFFFFFFFFFFFFFFFELL))
        return 0;
      goto LABEL_55;
    case 2:
    case 7:
      v22 = *(_QWORD *)(a2 + 8);
      v23 = *(_QWORD *)(v22 + 40);
      v15 = *(const void **)(v22 + 48);
      if (v15)
        v24 = 0;
      else
        v24 = v23 >= 4;
      if (v24
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v25 = *(_QWORD *)(a2 + 16);
      v26 = *(_QWORD *)(v25 + 40);
      v19 = *(const void **)(v25 + 48);
      v27 = !v19 && v26 >= 4;
      if (v27
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v13 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v23 & 0xFFFFFFFFFFFFFFFCLL) != (v26 & 0xFFFFFFFFFFFFFFFCLL))
        return 0;
      goto LABEL_55;
    case 3:
    case 8:
      v28 = *(_QWORD *)(a2 + 8);
      v29 = *(_QWORD *)(v28 + 40);
      v15 = *(const void **)(v28 + 48);
      if (v15)
        v30 = 0;
      else
        v30 = v29 >= 8;
      if (v30
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v31 = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(v31 + 40);
      v19 = *(const void **)(v31 + 48);
      v33 = !v19 && v32 >= 8;
      if (v33
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v13 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 0xFFFFFFFFFFFFFFF8) != (v32 & 0xFFFFFFFFFFFFFFF8))
        return 0;
LABEL_55:
      v11 = v15;
      v12 = v19;
      return memcmp(v11, v12, v13) == 0;
    case 11:
      v35 = *(_QWORD *)(a2 + 8);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(float **)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v39 = *(_QWORD *)(a2 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(float **)(v39 + 48);
      v42 = !v40 && v41 >= 4;
      if (v42
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_106;
      }
      v43 = v37 >> 2;
      v44 = v41 >> 2;
      if (v37 >> 2 != v41 >> 2)
        return 0;
      if (v37 < 4)
      {
        v45 = v40;
        v46 = v36;
LABEL_72:
        v47 = &v36[v43];
        v48 = &v40[v44];
        return v46 == v47 && v45 == v48;
      }
      v60 = 4 * v43 - 4;
      v61 = 4 * v44 - 4;
      v46 = v36;
      v45 = v40;
      while (*v46 == *v45)
      {
        ++v46;
        ++v45;
        if (v60)
        {
          v60 -= 4;
          v62 = v61;
          v61 -= 4;
          if (v62)
            continue;
        }
        goto LABEL_72;
      }
      return 0;
    case 12:
      v49 = *(_QWORD *)(a2 + 8);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(float **)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)|| ((v53 = *(_QWORD *)(a2 + 16), v55 = *(_QWORD *)(v53 + 40), (v54 = *(float **)(v53 + 48)) == 0)? (v56 = v55 >= 8): (v56 = 0), v56&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974)))
      {
LABEL_106:
        abort();
      }
      v57 = v51 >> 3;
      v58 = v55 >> 3;
      if (v51 >> 3 != v55 >> 3)
        return 0;
      if (v51 >= 8)
      {
        v63 = 8 * v57 - 8;
        v64 = 8 * v58 - 8;
        v46 = v50;
        v45 = v54;
        do
        {
          if (*(double *)v46 != *(double *)v45)
            return 0;
          v46 += 2;
          v45 += 2;
          if (!v63)
            break;
          v63 -= 8;
          v65 = v64;
          v64 -= 8;
        }
        while (v65);
      }
      else
      {
        v45 = v54;
        v46 = v50;
      }
      v47 = &v50[2 * v57];
      v48 = &v54[2 * v58];
      return v46 == v47 && v45 == v48;
    default:
      sub_2082056D4(a1);
  }
}

void sub_20807FE64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0834F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20807FE74(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0834F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20807FE94(uint64_t result)
{
  uint64_t (*v1)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);

  v1 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(result + 32);
  if (v1)
    return v1(0, result + 32, 0, 0, 0);
  return result;
}

size_t sub_20807FECC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C083538[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20807FFB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C083538[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_207CAA110((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_208080170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2080801B4(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_208080444(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20808045C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_208080464(uint64_t a1, _QWORD **a2, double *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p;
  size_t v21;
  int64_t v22;
  std::string v23;

  std::to_string(&v23, *a3);
  v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v23;
  else
    v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v8 = size;
  do
  {
    if (!v8)
    {
      v8 = -1;
      if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_207CBAB98(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_51;
    }
    v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_16:
  if (strtod((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    goto LABEL_15;
  }
  v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v23.__r_.__value_.__l.__size_;
  v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46)
    v12 = 2;
  v13 = v12 + v8;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v21 = v14;
    v22 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14)
LABEL_40:
    memmove(p_p, v11, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  sub_207CBAB98(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_48;
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_208080664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_2080806D0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21[5])(uint64_t);

  v21[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x18uLL);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)v4 = *(_QWORD *)a1;
  v15 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 8) = v15;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v18 = 0;
  v6 = (void (*)(uint64_t))operator new(0x20uLL);
  *(_QWORD *)v6 = &off_24C083590;
  *((_QWORD *)v6 + 1) = 0;
  if (v5)
    v7 = ((uint64_t)v15 - v5) >> 2;
  else
    v7 = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v4;
  v21[1] = (void (*)(uint64_t))v4;
  v21[2] = v6;
  v19 = 0;
  v20 = 0;
  v21[0] = (void (*)(uint64_t))sub_2080809F0;
  sub_20807E8C8(&v16, 7, v21, v7, v5);
  if (v21[0])
    v21[0](0);
  v8 = v16;
  v9 = v17;
  *a2 = v16;
  a2[1] = v9;
  v16 = 0;
  v17 = 0;
  if ((*(_BYTE *)(v8 + 56) & 1) != 0)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = *(void **)v18;
    if (*(_QWORD *)v18)
    {
      *((_QWORD *)v18 + 1) = v14;
      operator delete(v14);
    }
    operator delete(v13);
  }
}

void sub_2080808A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20808092C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208080940(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t sub_208080980(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_2080809F0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208080A24()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208080A70(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_2080809F0;
  return result;
}

__n128 sub_208080AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_2080809F0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208080AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj2EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_208265484)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_208080B58(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22[5])(uint64_t);

  v22[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x18uLL);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)v4 = *(_QWORD *)a1;
  v6 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 8) = v6;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    v7 = v5;
  else
    v7 = 0;
  if (v5)
    v8 = ((uint64_t)v6 - v5) >> 2;
  else
    v8 = 0;
  v19 = 0;
  v9 = (void (*)(uint64_t))operator new(0x20uLL);
  *(_QWORD *)v9 = &off_24C0835F0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *((_QWORD *)v9 + 3) = v4;
  v22[1] = (void (*)(uint64_t))v4;
  v22[2] = v9;
  v20 = 0;
  v21 = 0;
  v22[0] = (void (*)(uint64_t))sub_208080E90;
  sub_20807E8C8(&v17, 7, v22, v8, v7);
  if (v22[0])
    v22[0](0);
  v10 = v17;
  v11 = v18;
  *a2 = v17;
  a2[1] = v11;
  v17 = 0;
  v18 = 0;
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v10 + 56) >= 0x5555555555555556)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v12 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = *(void **)v19;
    if (*(_QWORD *)v19)
    {
      *((_QWORD *)v19 + 1) = v16;
      operator delete(v16);
    }
    operator delete(v15);
  }
}

void sub_208080D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_208080DCC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_208080DE0(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t sub_208080E20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_208080E90(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208080EC4()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208080F10(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_208080E90;
  return result;
}

__n128 sub_208080F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_208080E90;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_208080F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrINS_6vectorIN4cv3d3esn4math6VectorIiLj3EEENS_9allocatorIS6_EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_2082655BC)
  {
    return 0;
  }
  return v5 + 8;
}

_QWORD *sub_208080FF8(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_208081120((uint64_t)v4);
      break;
    case 1:
      result = sub_208081290((uint64_t)v4);
      break;
    case 2:
      result = sub_208081400((uint64_t)v4);
      break;
    case 3:
      result = sub_208081570((uint64_t)v4);
      break;
    case 5:
      result = sub_2080816E0((uint64_t)v4);
      break;
    case 6:
      result = sub_208081850((uint64_t)v4);
      break;
    case 7:
      result = sub_2080819C0((uint64_t)v4);
      break;
    case 8:
      result = sub_208081B30((uint64_t)v4);
      break;
    case 11:
      result = sub_208081CA0((uint64_t)v4);
      break;
    case 12:
      result = sub_208081E10((uint64_t)v4);
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

_QWORD *sub_208081120(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 0);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned __int8 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_18;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 2;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_14;
    }
LABEL_18:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 1)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_14:
  v9 = v4 >> 1;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807922C(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 2 * v9 - 2;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807922C(v8, v10);
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081290(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int16 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 1);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned __int16 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 2;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 4;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 3)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 2;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_208079514(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 4 * v9 - 4;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_208079514(v8, v10);
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081400(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned int *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 2);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned int *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 8;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 7)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 3;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_2080797FC(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 8 * v9 - 8;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_2080797FC(v8, v10);
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081570(uint64_t a1)
{
  unsigned __int8 **v2;
  unint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 3);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unint64_t *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x10;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xF)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 4;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_208079928(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 16 * v9 - 16;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_208079928(v8, v10);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_2080816E0(uint64_t a1)
{
  unsigned __int8 **v2;
  char *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 5);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (char *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_18;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 2;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_14;
    }
LABEL_18:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 1)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_14:
  v9 = v4 >> 1;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_208079C10(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 2 * v9 - 2;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_208079C10(v8, v10);
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081850(uint64_t a1)
{
  unsigned __int8 **v2;
  __int16 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  __int16 *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 6);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (__int16 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 2;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 4;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 3)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 2;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_208079EF8(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 4 * v9 - 4;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_208079EF8(v8, v10);
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_2080819C0(uint64_t a1)
{
  unsigned __int8 **v2;
  int *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 7);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (int *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 8;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 7)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 3;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807A1E0(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 8 * v9 - 8;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807A1E0(v8, v10);
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081B30(uint64_t a1)
{
  unsigned __int8 **v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 8);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (uint64_t *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x10;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xF)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 4;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807A4C8(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 16 * v9 - 16;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807A4C8(v8, v10);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081CA0(uint64_t a1)
{
  unsigned __int8 **v2;
  float *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 11);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (float *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 8;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 7)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 3;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807A7B0(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 8 * v9 - 8;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807A7B0(v8, v10);
      v10 += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081E10(uint64_t a1)
{
  unsigned __int8 **v2;
  double *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 12);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (double *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x10;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xF)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  v9 = v4 >> 4;
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807A8DC(v8, v3);
  if (v9 != 1)
  {
    v10 = v3 + 2;
    v11 = 16 * v9 - 16;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807A8DC(v8, v10);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208081F80(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_2080820A8((uint64_t)v4);
      break;
    case 1:
      result = sub_208082228((uint64_t)v4);
      break;
    case 2:
      result = sub_2080823B0((uint64_t)v4);
      break;
    case 3:
      result = sub_208082538((uint64_t)v4);
      break;
    case 5:
      result = sub_2080826C0((uint64_t)v4);
      break;
    case 6:
      result = sub_208082840((uint64_t)v4);
      break;
    case 7:
      result = sub_2080829C8((uint64_t)v4);
      break;
    case 8:
      result = sub_208082B50((uint64_t)v4);
      break;
    case 11:
      result = sub_208082CD8((uint64_t)v4);
      break;
    case 12:
      result = sub_208082E60((uint64_t)v4);
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

_QWORD *sub_2080820A8(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 0);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned __int8 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_18;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 3;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_14;
    }
LABEL_18:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 2)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_14:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807BCF0(v8, v3);
  if (v4 - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 3 * (v4 / 3) - 3;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807BCF0(v8, v9);
      v9 += 3;
      v10 -= 3;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208082228(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int16 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unsigned __int16 *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 1);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned __int16 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 2;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 6;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 5)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807C05C(v8, v3);
  if ((v4 >> 1) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 6 * (v4 / 6) - 6;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807C05C(v8, v9);
      v9 += 3;
      v10 -= 6;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_2080823B0(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned int *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unsigned int *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 2);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unsigned int *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0xC;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xB)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807C3C8(v8, v3);
  if ((v4 >> 2) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 12 * (v4 / 0xC) - 12;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807C3C8(v8, v9);
      v9 += 3;
      v10 -= 12;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208082538(uint64_t a1)
{
  unsigned __int8 **v2;
  unint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 3);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (unint64_t *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x18;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0x17)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807C4F4(v8, v3);
  if ((v4 >> 3) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 24 * (v4 / 0x18) - 24;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807C4F4(v8, v9);
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_2080826C0(uint64_t a1)
{
  unsigned __int8 **v2;
  char *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 5);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (char *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_18;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 3;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_14;
    }
LABEL_18:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 2)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_14:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807C860(v8, v3);
  if (v4 - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 3 * (v4 / 3) - 3;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807C860(v8, v9);
      v9 += 3;
      v10 -= 3;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208082840(uint64_t a1)
{
  unsigned __int8 **v2;
  __int16 *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  __int16 *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 6);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (__int16 *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 2;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 6;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 5)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807CBCC(v8, v3);
  if ((v4 >> 1) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 6 * (v4 / 6) - 6;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807CBCC(v8, v9);
      v9 += 3;
      v10 -= 6;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_2080829C8(uint64_t a1)
{
  unsigned __int8 **v2;
  int *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  int *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 7);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (int *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0xC;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xB)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807CF38(v8, v3);
  if ((v4 >> 2) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 12 * (v4 / 0xC) - 12;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807CF38(v8, v9);
      v9 += 3;
      v10 -= 12;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208082B50(uint64_t a1)
{
  unsigned __int8 **v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 8);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (uint64_t *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x18;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0x17)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807D2A4(v8, v3);
  if ((v4 >> 3) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 24 * (v4 / 0x18) - 24;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807D2A4(v8, v9);
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208082CD8(uint64_t a1)
{
  unsigned __int8 **v2;
  float *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  float *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 11);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (float *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 4;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0xC;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0xB)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807D610(v8, v3);
  if ((v4 >> 2) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 12 * (v4 / 0xC) - 12;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807D610(v8, v9);
      v9 += 3;
      v10 -= 12;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

_QWORD *sub_208082E60(uint64_t a1)
{
  unsigned __int8 **v2;
  double *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD **v7;
  _QWORD *v8;
  double *v9;
  unint64_t v10;

  v2 = *(unsigned __int8 ***)a1;
  sub_20807EB10(*(unsigned __int8 ***)a1, 12);
  v4 = *((_QWORD *)*v2 + 5);
  v3 = (double *)*((_QWORD *)*v2 + 6);
  if (v3)
    v5 = 0;
  else
    v5 = v4 >= 8;
  if (v5
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_19;
  }
  if (v3)
    v6 = 0;
  else
    v6 = v4 >= 0x18;
  if (v6)
  {
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224A91, 0, (void (*)(void **))sub_208216974))
    {
      v8 = **(_QWORD ***)(a1 + 8);
      goto LABEL_15;
    }
LABEL_19:
    abort();
  }
  v7 = *(_QWORD ***)(a1 + 8);
  v8 = *v7;
  if (v4 <= 0x17)
    return sub_207CBAB98(*v7, (uint64_t)"{}", 2);
LABEL_15:
  sub_207CBAB98(v8, (uint64_t)"{", 1);
  sub_20807D73C(v8, v3);
  if ((v4 >> 3) - 3 >= 3)
  {
    v9 = v3 + 3;
    v10 = 24 * (v4 / 0x18) - 24;
    do
    {
      sub_207CBAB98(v8, (uint64_t)",", 1);
      sub_20807D73C(v8, v9);
      v9 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  return sub_207CBAB98(v8, (uint64_t)"}", 1);
}

uint64_t sub_208082FE8(uint64_t a1, uint64_t a2)
{
  void (**v4)(int);
  int v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  const void *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  const void *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  const void *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  BOOL v46;
  char v47;
  const void *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t *p_shared_owners;
  const void *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t *v74;
  BOOL v75;
  char v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  std::logic_error *exception;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void (**)(int))(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v5 == 1 && v6 == 1;
  v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    v10 = *(const void **)(a2 + 8);
    if (!v10
      || (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083D08, 0)) == 0)
    {
      v80 = sub_208087804();
      sub_20808D430(a2, (const char *)v80, (uint64_t)"trying to cast camera");
    }
    v12 = v11;
    v86 = v11[1];
    *(_QWORD *)&v87 = *((_QWORD *)v11 + 11);
    v13 = v87;
    v14 = (char *)operator new(0x78uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = off_24C084408;
    v15 = v12[1];
    *((_QWORD *)v14 + 4) = &off_24C083D30;
    *(_OWORD *)(v14 + 40) = v15;
    *(_OWORD *)(v14 + 56) = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v17;
    *(_OWORD *)(v14 + 72) = v16;
    *((_QWORD *)v14 + 14) = v13;
    *((_QWORD *)v14 + 3) = &off_24C083CD8;
    *((_QWORD *)&v87 + 1) = v14 + 24;
    *(_QWORD *)&v88 = v14;
    sub_2080838F8(v4, (uint64_t)&v86);
    v18 = (std::__shared_weak_count *)v88;
    if ((_QWORD)v88)
    {
      v19 = (unint64_t *)(v88 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_39:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (v7 != 12)
      v9 = 1;
    if ((v9 & 1) != 0)
    {
      if (v5)
        v21 = 0;
      else
        v21 = v6 == 1;
      v22 = !v21;
      if (v21 && v7 == 11)
      {
        *(_DWORD *)a1 = 10;
        v23 = *(const void **)(a2 + 8);
        if (!v23
          || (v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083E18, 0)) == 0)
        {
          v82 = sub_2080885E4();
          sub_20808D430(a2, (const char *)v82, (uint64_t)"trying to cast camera");
        }
        v25 = v24;
        v86 = v24[1];
        *(_QWORD *)&v87 = *((_QWORD *)v24 + 11);
        v26 = v87;
        v27 = (char *)operator new(0x78uLL);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = off_24C084458;
        v28 = v25[1];
        *((_QWORD *)v27 + 4) = &off_24C083D30;
        *(_OWORD *)(v27 + 40) = v28;
        *(_OWORD *)(v27 + 56) = v25[2];
        v29 = v25[3];
        v30 = v25[4];
        *((_DWORD *)v27 + 26) = *((_DWORD *)v25 + 20);
        *(_OWORD *)(v27 + 88) = v30;
        *(_OWORD *)(v27 + 72) = v29;
        *((_QWORD *)v27 + 14) = v26;
        *((_QWORD *)v27 + 3) = &off_24C083DE8;
        *((_QWORD *)&v87 + 1) = v27 + 24;
        *(_QWORD *)&v88 = v27;
        sub_208083BC0(v4, (uint64_t)&v86);
        v18 = (std::__shared_weak_count *)v88;
        if ((_QWORD)v88)
        {
          v31 = (unint64_t *)(v88 + 8);
          do
            v20 = __ldaxr(v31);
          while (__stlxr(v20 - 1, v31));
          goto LABEL_39;
        }
      }
      else
      {
        if (v7 != 12)
          v22 = 1;
        if ((v22 & 1) != 0)
        {
          v46 = v5 == 1 && v6 == 2;
          v47 = !v46;
          if (v46 && v7 == 11)
          {
            *(_DWORD *)a1 = 100;
            v48 = *(const void **)(a2 + 8);
            if (!v48
              || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083988, 0)) == 0)
            {
              v84 = sub_2080893C4();
              sub_20808D430(a2, (const char *)v84, (uint64_t)"trying to cast camera");
            }
            v50 = v49;
            v51 = v49[1];
            v52 = v49[2];
            LODWORD(v88) = *((_DWORD *)v49 + 12);
            v86 = v51;
            v87 = v52;
            *(_QWORD *)((char *)&v88 + 4) = *((_QWORD *)v49 + 15);
            v53 = *(_QWORD *)((char *)&v88 + 4);
            v54 = (char *)operator new(0x98uLL);
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 2) = 0;
            *(_QWORD *)v54 = off_24C084140;
            v55 = *(_QWORD *)((char *)v50 + 52);
            v56 = *((_WORD *)v50 + 56);
            v57 = v50[1];
            *((_QWORD *)v54 + 4) = &off_24C0839B0;
            *(_OWORD *)(v54 + 40) = v57;
            v58 = v50[2];
            *((_DWORD *)v54 + 18) = *((_DWORD *)v50 + 12);
            *(_OWORD *)(v54 + 56) = v58;
            *(_QWORD *)(v54 + 76) = v55;
            *(_OWORD *)(v54 + 84) = *(_OWORD *)((char *)v50 + 60);
            v59 = *(_OWORD *)((char *)v50 + 76);
            v60 = *(_OWORD *)((char *)v50 + 92);
            *((_DWORD *)v54 + 33) = *((_DWORD *)v50 + 27);
            *(_OWORD *)(v54 + 116) = v60;
            *(_OWORD *)(v54 + 100) = v59;
            *((_WORD *)v54 + 68) = v56;
            *((_QWORD *)v54 + 18) = v53;
            *((_QWORD *)v54 + 3) = &off_24C083958;
            v89 = (std::__shared_weak_count *)(v54 + 24);
            v90 = (std::__shared_weak_count *)v54;
            sub_208083E88(v4, (uint64_t)&v86);
            v18 = v90;
            if (v90)
            {
              p_shared_owners = (unint64_t *)&v90->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              goto LABEL_39;
            }
          }
          else
          {
            if (v7 != 12)
              v47 = 1;
            if ((v47 & 1) != 0)
            {
              if (v5)
                v75 = 0;
              else
                v75 = v6 == 2;
              v76 = !v75;
              if (v75 && v7 == 11)
              {
                *(_DWORD *)a1 = 110;
                v77 = sub_2080841B4(a2);
                sub_20808B304((uint64_t)&v86, (uint64_t)v77);
                sub_208084218(v4, (uint64_t)&v86);
                sub_20808B1A4((uint64_t)&v86);
              }
              else
              {
                if (v7 != 12)
                  v76 = 1;
                if ((v76 & 1) != 0)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
                }
                *(_DWORD *)a1 = 111;
                v79 = sub_20808437C(a2);
                sub_20808B4BC((uint64_t)&v86, (uint64_t)v79);
                sub_2080843E0(v4, (uint64_t)&v86);
                sub_207D86F18((uint64_t)&v86);
              }
            }
            else
            {
              *(_DWORD *)a1 = 101;
              v78 = sub_208083FEC(a2);
              sub_20808B3D4((uint64_t)&v86, (uint64_t)v78);
              sub_208084050(v4, (uint64_t)&v86);
              sub_207D86F18((uint64_t)&v86);
            }
          }
        }
        else
        {
          *(_DWORD *)a1 = 11;
          v62 = *(const void **)(a2 + 8);
          if (!v62
            || (v63 = __dynamic_cast(v62, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083FD8, 0)) == 0)
          {
            v83 = sub_208088CD4();
            sub_20808D430(a2, (const char *)v83, (uint64_t)"trying to cast camera");
          }
          v64 = v63;
          v65 = v63 + 1;
          v66 = v63 + 2;
          v67 = v63[2];
          v86 = v63[1];
          v87 = v67;
          *(_QWORD *)&v88 = *((_QWORD *)v63 + 19);
          v68 = v88;
          v69 = (char *)operator new(0xB8uLL);
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
          *(_QWORD *)v69 = off_24C0844F8;
          *((_QWORD *)v69 + 4) = &off_24C083EF0;
          *(_OWORD *)(v69 + 40) = *v65;
          *(_OWORD *)(v69 + 56) = *v66;
          v70 = v64[3];
          *(_OWORD *)(v69 + 88) = v64[4];
          *(_OWORD *)(v69 + 72) = v70;
          v71 = v64[6];
          v72 = v64[7];
          v73 = v64[8];
          *((_QWORD *)v69 + 21) = *((_QWORD *)v64 + 18);
          *(_OWORD *)(v69 + 152) = v73;
          *(_OWORD *)(v69 + 136) = v72;
          *(_OWORD *)(v69 + 120) = v71;
          *(_OWORD *)(v69 + 104) = v64[5];
          *((_QWORD *)v69 + 22) = v68;
          *((_QWORD *)v69 + 3) = &off_24C083FA8;
          *((_QWORD *)&v88 + 1) = v69 + 24;
          v89 = (std::__shared_weak_count *)v69;
          sub_208083D24(v4, (uint64_t)&v86);
          v18 = v89;
          if (v89)
          {
            v74 = (unint64_t *)&v89->__shared_owners_;
            do
              v20 = __ldaxr(v74);
            while (__stlxr(v20 - 1, v74));
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 1;
      v32 = *(const void **)(a2 + 8);
      if (!v32
        || (v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083EC8, 0)) == 0)
      {
        v81 = sub_208087EF4();
        sub_20808D430(a2, (const char *)v81, (uint64_t)"trying to cast camera");
      }
      v34 = v33;
      v35 = v33 + 1;
      v36 = v33 + 2;
      v37 = v33[2];
      v86 = v33[1];
      v87 = v37;
      *(_QWORD *)&v88 = *((_QWORD *)v33 + 19);
      v38 = v88;
      v39 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = off_24C0844A8;
      *((_QWORD *)v39 + 4) = &off_24C083EF0;
      *(_OWORD *)(v39 + 40) = *v35;
      *(_OWORD *)(v39 + 56) = *v36;
      v40 = v34[3];
      *(_OWORD *)(v39 + 88) = v34[4];
      *(_OWORD *)(v39 + 72) = v40;
      v41 = v34[6];
      v42 = v34[7];
      v43 = v34[8];
      *((_QWORD *)v39 + 21) = *((_QWORD *)v34 + 18);
      *(_OWORD *)(v39 + 152) = v43;
      *(_OWORD *)(v39 + 136) = v42;
      *(_OWORD *)(v39 + 120) = v41;
      *(_OWORD *)(v39 + 104) = v34[5];
      *((_QWORD *)v39 + 22) = v38;
      *((_QWORD *)v39 + 3) = &off_24C083E98;
      *((_QWORD *)&v88 + 1) = v39 + 24;
      v89 = (std::__shared_weak_count *)v39;
      sub_208083A5C(v4, (uint64_t)&v86);
      v18 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v20 = __ldaxr(v44);
        while (__stlxr(v20 - 1, v44));
        goto LABEL_39;
      }
    }
  }
  return a1;
}

void sub_20808370C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208083720(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v2;

  __cxa_free_exception(v2);
  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_20808373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D86F18((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208083758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808B1A4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208083774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D86F18((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208083790(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_2080837A4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_2080837B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808B1A4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_2080837D4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_2080837E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808C110((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208083804(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208083818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20806CAB4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208083834(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208083848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808C110((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208083864(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208083878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20806CAB4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208083894(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_2080838A8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_2080838BC(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_2080838D0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_2080838E4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void (**sub_2080838F8(void (**a1)(int a1), uint64_t a2))(int a1)
{
  char *v4;
  void (*v5)(int);
  void (*v6)(int);
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = sub_208087D58;
  v8[0] = sub_208087D58;
  v8[1] = v4;
  if (v8 == a1)
    goto LABEL_6;
  v6 = *a1;
  if (!*a1)
  {
    *a1 = sub_208087D58;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v6)(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v9[0])(2, v9, v8, 0, 0);
  if (v9[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v9[0])(0, v9, 0, 0, 0);
  v5 = (void (*)(int))v8[0];
  if (v8[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5)(0, v8, 0, 0, 0);
  return a1;
}

void sub_208083A44(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208083A5C(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x38uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = sub_208088448;
  v9[0] = sub_208088448;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_208088448;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_208083BA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208083BC0(void (**a1)(int a1), uint64_t a2))(int a1)
{
  char *v4;
  void (*v5)(int);
  void (*v6)(int);
  _QWORD v8[4];
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = sub_208088B38;
  v8[0] = sub_208088B38;
  v8[1] = v4;
  if (v8 == a1)
    goto LABEL_6;
  v6 = *a1;
  if (!*a1)
  {
    *a1 = sub_208088B38;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v6)(2, a1, v9, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v8[0])(2, v8, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v9[0])(2, v9, v8, 0, 0);
  if (v9[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v9[0])(0, v9, 0, 0, 0);
  v5 = (void (*)(int))v8[0];
  if (v8[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v5)(0, v8, 0, 0, 0);
  return a1;
}

void sub_208083D0C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208083D24(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x38uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v6 = sub_208089228;
  v9[0] = sub_208089228;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_208089228;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_208083E70(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void (**sub_208083E88(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x40uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = sub_208089774;
  v9[0] = sub_208089774;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_208089774;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_208083FD4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void *sub_208083FEC(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083B48, 0)) == 0)
  {
    v4 = sub_2080899B8();
    sub_20808D430(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_208084050(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v4)(int);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(int);
  void (*v9)(int);
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v4 = (void (*)(int))operator new(0x60uLL);
  v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v7;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = sub_208089D68;
  v11[0] = sub_208089D68;
  v11[1] = v4;
  if (v11 == a1)
    goto LABEL_6;
  v9 = *a1;
  if (!*a1)
  {
    *a1 = sub_208089D68;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v9)(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v12[0])(2, v12, v11, 0, 0);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v8 = (void (*)(int))v11[0];
  if (v11[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v8)(0, v11, 0, 0, 0);
  return a1;
}

void sub_20808419C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void *sub_2080841B4(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083A98, 0)) == 0)
  {
    v4 = sub_20808A000();
    sub_20808D430(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_208084218(void (**a1)(int a1), uint64_t a2))(int a1)
{
  _OWORD *v4;
  __int128 v5;
  void (*v6)(int);
  void (*v7)(int);
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v4 = operator new(0x40uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *v4 = *(_OWORD *)a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)(a2 + 28);
  v4[3] = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v6 = sub_20808A3B0;
  v9[0] = sub_20808A3B0;
  v9[1] = v4;
  if (v9 == a1)
    goto LABEL_6;
  v7 = *a1;
  if (!*a1)
  {
    *a1 = sub_20808A3B0;
    a1[1] = (void (*)(int))v4;
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v7)(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v10[0])(2, v10, v9, 0, 0);
  if (v10[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  v6 = (void (*)(int))v9[0];
  if (v9[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v6)(0, v9, 0, 0, 0);
  return a1;
}

void sub_208084364(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void *sub_20808437C(uint64_t a1)
{
  const void *v2;
  void *result;
  __int128 *v4;

  v2 = *(const void **)(a1 + 8);
  if (!v2
    || (result = __dynamic_cast(v2, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083C58, 0)) == 0)
  {
    v4 = sub_20808A5F4();
    sub_20808D430(a1, (const char *)v4, (uint64_t)"trying to cast camera");
  }
  return result;
}

void (**sub_2080843E0(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v4)(int);
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(int);
  void (*v9)(int);
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v4 = (void (*)(int))operator new(0x60uLL);
  v5 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 3) = v5;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v7;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = sub_20808A9A4;
  v11[0] = sub_20808A9A4;
  v11[1] = v4;
  if (v11 == a1)
    goto LABEL_6;
  v9 = *a1;
  if (!*a1)
  {
    *a1 = sub_20808A9A4;
    a1[1] = v4;
    return a1;
  }
  v12[0] = 0;
  v12[1] = 0;
  ((void (*)(uint64_t, void (**)(int), _QWORD *, _QWORD, _QWORD))v9)(2, a1, v12, 0, 0);
  ((void (*)(uint64_t, _QWORD *, void (**)(int), _QWORD, _QWORD))v11[0])(2, v11, a1, 0, 0);
  ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))v12[0])(2, v12, v11, 0, 0);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v8 = (void (*)(int))v11[0];
  if (v11[0])
LABEL_6:
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v8)(0, v11, 0, 0, 0);
  return a1;
}

void sub_20808452C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void sub_208084544(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  int v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v68;
  int32x2_t v69;
  int8x16_t v70;
  float32x2_t v71;
  unint64_t *v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v4)
        goto LABEL_30;
      v5 = (float32x2_t *)v4(3, (uint64_t)(a1 + 2), 0, &unk_24C077860, &unk_20823BD3C);
      if (!v5)
        goto LABEL_30;
      v6 = v5[2];
      v7 = v5[3];
      v8 = *v5;
      v9 = v5[1];
      __asm { FMOV            V2.2S, #1.0 }
      v15 = vdiv_f32(_D2, *v5);
      v16 = vzip1_s32((int32x2_t)*v5, (int32x2_t)v9);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v5, (int32x2_t)v9), 0x20uLL), v17);
      *(float32x2_t *)(*(_QWORD *)&v7 + 32) = v15;
      *(float32x2_t *)(*(_QWORD *)&v7 + 40) = vmul_f32(v15, vneg_f32(v9));
      *(_DWORD *)(*(_QWORD *)&v7 + 48) = v8.i32[0];
      *(_QWORD *)(*(_QWORD *)&v7 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 64) = v8.i32[1];
      *(_DWORD *)(*(_QWORD *)&v7 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v7 + 72) = v9;
      *(_DWORD *)(*(_QWORD *)&v7 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v7 + 88) = v6;
      v18 = v5[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C0838B0;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083D30;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v18 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v18 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v18 + 32);
      v21 = *(_DWORD *)(*(_QWORD *)&v18 + 80);
      v22 = *(_OWORD *)(*(_QWORD *)&v18 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v18 + 48);
      LODWORD(v19[4].__shared_owners_) = v21;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v22;
      v23 = *(_QWORD *)(*(_QWORD *)&v18 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083CD8;
      v19[4].__shared_weak_owners_ = v23;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      goto LABEL_28;
    case 1:
      v44 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v44)
        goto LABEL_30;
      v45 = v44(3, (uint64_t)(a1 + 2), 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v45)
        goto LABEL_30;
      v46 = *(double *)v45;
      v47 = *(double *)(v45 + 8);
      v48 = *(double *)(v45 + 16);
      v49 = *(double *)(v45 + 24);
      v50 = 1.0 / *(double *)v45;
      v51 = *(_QWORD *)(v45 + 32);
      v52 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)v45;
      *(double *)(v52 + 24) = v47;
      *(double *)(v52 + 32) = v48;
      *(double *)(v52 + 40) = v49;
      *(double *)(v52 + 48) = v50;
      *(double *)(v52 + 56) = 1.0 / v47;
      *(double *)(v52 + 64) = -(v48 * v50);
      *(double *)(v52 + 72) = -(v49 * (1.0 / v47));
      *(double *)(v52 + 80) = v46;
      *(_QWORD *)(v52 + 96) = 0;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 88) = 0;
      *(double *)(v52 + 112) = v47;
      *(_QWORD *)(v52 + 120) = 0;
      *(double *)(v52 + 128) = v48;
      *(double *)(v52 + 136) = v49;
      *(_QWORD *)(v52 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v52 + 152) = v51;
      v53 = *(_QWORD *)(v45 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v54 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C083680;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v53 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v53 + 32);
      v55 = *(_OWORD *)(v53 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v53 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v55;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v53 + 80);
      v57 = *(_OWORD *)(v53 + 112);
      v56 = *(_OWORD *)(v53 + 128);
      v58 = *(std::__shared_weak_count_vtbl **)(v53 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v53 + 96);
      v19[7].__vftable = v58;
      *(_OWORD *)&v19[6].__shared_owners_ = v56;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v57;
      v59 = *(_QWORD *)(v53 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083E98;
      v19[7].__shared_owners_ = v59;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v25 = __ldaxr(v54);
      while (__stlxr(v25 - 1, v54));
      goto LABEL_28;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      __break(1u);
      return;
    case 10:
      v61 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v61)
        goto LABEL_30;
      v62 = (float32x2_t *)v61(3, (uint64_t)(a1 + 2), 0, &unk_24C077900, &unk_20823BEE4);
      if (!v62)
        goto LABEL_30;
      v63 = v62[2];
      v64 = v62[3];
      v65 = *v62;
      v66 = v62[1];
      __asm { FMOV            V2.2S, #1.0 }
      v68 = vdiv_f32(_D2, *v62);
      v69 = vzip1_s32((int32x2_t)*v62, (int32x2_t)v66);
      v70.i64[0] = v69.u32[0];
      v70.i64[1] = v69.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v64 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v62, (int32x2_t)v66), 0x20uLL), v70);
      *(float32x2_t *)(*(_QWORD *)&v64 + 32) = v68;
      *(float32x2_t *)(*(_QWORD *)&v64 + 40) = vmul_f32(v68, vneg_f32(v66));
      *(_DWORD *)(*(_QWORD *)&v64 + 48) = v65.i32[0];
      *(_QWORD *)(*(_QWORD *)&v64 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 64) = v65.i32[1];
      *(_DWORD *)(*(_QWORD *)&v64 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v64 + 72) = v66;
      *(_DWORD *)(*(_QWORD *)&v64 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v64 + 88) = v63;
      v71 = v62[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      v72 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C0836D0;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083D30;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v71 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v71 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v71 + 32);
      v73 = *(_DWORD *)(*(_QWORD *)&v71 + 80);
      v74 = *(_OWORD *)(*(_QWORD *)&v71 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v71 + 48);
      LODWORD(v19[4].__shared_owners_) = v73;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v74;
      v75 = *(_QWORD *)(*(_QWORD *)&v71 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083DE8;
      v19[4].__shared_weak_owners_ = v75;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v76 = __ldxr(v72);
      while (__stxr(v76 + 1, v72));
      do
        v25 = __ldaxr(v72);
      while (__stlxr(v25 - 1, v72));
LABEL_28:
      if (v25)
        return;
      goto LABEL_16;
    case 11:
      v26 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v26 || (v27 = v26(3, (uint64_t)(a1 + 2), 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_30:
        sub_207DCBF24();
      v28 = *(double *)v27;
      v29 = *(double *)(v27 + 8);
      v30 = *(double *)(v27 + 16);
      v31 = *(double *)(v27 + 24);
      v32 = 1.0 / *(double *)v27;
      v33 = *(_QWORD *)(v27 + 32);
      v34 = *(_QWORD *)(v27 + 40);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)v27;
      *(double *)(v34 + 24) = v29;
      *(double *)(v34 + 32) = v30;
      *(double *)(v34 + 40) = v31;
      *(double *)(v34 + 48) = v32;
      *(double *)(v34 + 56) = 1.0 / v29;
      *(double *)(v34 + 64) = -(v30 * v32);
      *(double *)(v34 + 72) = -(v31 * (1.0 / v29));
      *(double *)(v34 + 80) = v28;
      *(_QWORD *)(v34 + 96) = 0;
      *(_QWORD *)(v34 + 104) = 0;
      *(_QWORD *)(v34 + 88) = 0;
      *(double *)(v34 + 112) = v29;
      *(_QWORD *)(v34 + 120) = 0;
      *(double *)(v34 + 128) = v30;
      *(double *)(v34 + 136) = v31;
      *(_QWORD *)(v34 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v34 + 152) = v33;
      v35 = *(_QWORD *)(v27 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v36 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C083720;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v35 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v35 + 32);
      v37 = *(_OWORD *)(v35 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v35 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v37;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v35 + 80);
      v39 = *(_OWORD *)(v35 + 112);
      v38 = *(_OWORD *)(v35 + 128);
      v40 = *(std::__shared_weak_count_vtbl **)(v35 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v35 + 96);
      v19[7].__vftable = v40;
      *(_OWORD *)&v19[6].__shared_owners_ = v38;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v39;
      v41 = *(_QWORD *)(v35 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083FA8;
      v19[7].__shared_owners_ = v41;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 - 1, v36));
      if (!v43)
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      return;
    default:
      __asm { BR              X10 }
      return;
  }
}

void sub_208084F00(void (**a1)(int a1))
{
  int v2;
  char *v3;
  int32x4_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  int32x4_t v9;
  unint64_t *v10;
  char *v11;
  int64x2_t v12;
  unint64_t *v13;
  char *v14;
  int32x4_t v15;
  unint64_t *v16;
  char *v17;
  int64x2_t v18;
  unint64_t *v19;
  char *v20;
  int32x4_t v21;
  unint64_t *v22;
  char *v23;
  int64x2_t v24;
  unint64_t *v25;
  char *v26;
  int64x2_t v27;
  unint64_t *p_shared_owners;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  char *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = *(_DWORD *)a1;
  switch(v2)
  {
    case 0:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v8 = (char *)operator new(0x78uLL);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = off_24C084408;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 4) = &off_24C083D30;
      v9 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v8 + 56) = v9;
      *(int32x4_t *)(v8 + 72) = v9;
      *(int32x4_t *)(v8 + 88) = v9;
      *((_DWORD *)v8 + 26) = 2143289344;
      *((_QWORD *)v8 + 14) = 0;
      *(_QWORD *)&v30[1] = v8;
      *((_QWORD *)v8 + 3) = &off_24C083CD8;
      *((_QWORD *)&v30[0] + 1) = v8 + 24;
      sub_2080838F8(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v10 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
        goto LABEL_35;
      }
      break;
    case 1:
      v29 = 0u;
      memset(v30, 0, 24);
      v11 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = off_24C0844A8;
      v36 = 0u;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *((_QWORD *)v11 + 4) = &off_24C083EF0;
      *(_OWORD *)(v11 + 56) = v36;
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v11 + 72) = v12;
      *(int64x2_t *)(v11 + 88) = v12;
      *(int64x2_t *)(v11 + 104) = v12;
      *(int64x2_t *)(v11 + 120) = v12;
      *(int64x2_t *)(v11 + 136) = v12;
      *(int64x2_t *)(v11 + 152) = v12;
      *((_QWORD *)v11 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v11 + 22) = 0;
      *(_QWORD *)&v31 = v11;
      *((_QWORD *)v11 + 3) = &off_24C083E98;
      *((_QWORD *)&v30[1] + 1) = v11 + 24;
      sub_208083A5C(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v13 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v13);
        while (__stlxr(v7 - 1, v13));
        goto LABEL_35;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v14 = (char *)operator new(0x78uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = off_24C084458;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = &off_24C083D30;
      v15 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v14 + 56) = v15;
      *(int32x4_t *)(v14 + 72) = v15;
      *(int32x4_t *)(v14 + 88) = v15;
      *((_DWORD *)v14 + 26) = 2143289344;
      *((_QWORD *)v14 + 14) = 0;
      *(_QWORD *)&v30[1] = v14;
      *((_QWORD *)v14 + 3) = &off_24C083DE8;
      *((_QWORD *)&v30[0] + 1) = v14 + 24;
      sub_208083BC0(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v16);
        while (__stlxr(v7 - 1, v16));
        goto LABEL_35;
      }
      break;
    case 11:
      v29 = 0u;
      memset(v30, 0, 24);
      v17 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = off_24C0844F8;
      v36 = 0u;
      *((_QWORD *)v17 + 5) = 0;
      *((_QWORD *)v17 + 6) = 0;
      *((_QWORD *)v17 + 4) = &off_24C083EF0;
      *(_OWORD *)(v17 + 56) = v36;
      v18 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v17 + 72) = v18;
      *(int64x2_t *)(v17 + 88) = v18;
      *(int64x2_t *)(v17 + 104) = v18;
      *(int64x2_t *)(v17 + 120) = v18;
      *(int64x2_t *)(v17 + 136) = v18;
      *(int64x2_t *)(v17 + 152) = v18;
      *((_QWORD *)v17 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v17 + 22) = 0;
      *(_QWORD *)&v31 = v17;
      *((_QWORD *)v17 + 3) = &off_24C083FA8;
      *((_QWORD *)&v30[1] + 1) = v17 + 24;
      sub_208083D24(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v19 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v19);
        while (__stlxr(v7 - 1, v19));
LABEL_35:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      break;
    default:
      switch(v2)
      {
        case 'd':
          v29 = 0u;
          memset(v30, 0, 28);
          v3 = (char *)operator new(0x98uLL);
          *((_QWORD *)v3 + 1) = 0;
          *((_QWORD *)v3 + 2) = 0;
          *(_QWORD *)v3 = off_24C084140;
          v36 = 0u;
          *((_QWORD *)v3 + 5) = 0;
          *((_QWORD *)v3 + 6) = 0;
          *((_QWORD *)v3 + 4) = &off_24C0839B0;
          *((_DWORD *)v3 + 18) = 0;
          *(_OWORD *)(v3 + 56) = v36;
          *(_QWORD *)(v3 + 76) = 0xA3727C5ACLL;
          v4 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v3 + 84) = v4;
          *(int32x4_t *)(v3 + 100) = v4;
          *(int32x4_t *)(v3 + 116) = v4;
          *((_DWORD *)v3 + 33) = 2143289344;
          *((_WORD *)v3 + 68) = 257;
          *((_QWORD *)v3 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v3;
          *((_QWORD *)v3 + 3) = &off_24C083958;
          *(_QWORD *)&v31 = v3 + 24;
          sub_208083E88(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v6 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v6);
            while (__stlxr(v7 - 1, v6));
            goto LABEL_35;
          }
          break;
        case 'e':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v26 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v26 + 56) = 0u;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          *(_QWORD *)v26 = off_24C0841E0;
          v39 = 0;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 4) = &off_24C083B70;
          *(_OWORD *)(v26 + 72) = 0u;
          *(_OWORD *)(v26 + 88) = v38;
          *((_QWORD *)v26 + 13) = 0;
          *((_QWORD *)v26 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v26 + 30) = 10;
          v27 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v26 + 8) = v27;
          *((int64x2_t *)v26 + 9) = v27;
          *((int64x2_t *)v26 + 10) = v27;
          *((int64x2_t *)v26 + 11) = v27;
          *((int64x2_t *)v26 + 12) = v27;
          *((int64x2_t *)v26 + 13) = v27;
          *((_QWORD *)v26 + 28) = 0x7FF8000000000000;
          *((_WORD *)v26 + 116) = 257;
          *((_QWORD *)v26 + 30) = 0;
          v34 = (std::__shared_weak_count *)v26;
          *((_QWORD *)v26 + 3) = &off_24C083B18;
          v33 = v26 + 24;
          sub_208084050(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            goto LABEL_35;
          }
          break;
        case 'n':
          v29 = 0u;
          memset(v30, 0, 28);
          v20 = (char *)operator new(0x98uLL);
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = off_24C084190;
          v36 = 0u;
          *((_QWORD *)v20 + 5) = 0;
          *((_QWORD *)v20 + 6) = 0;
          *((_QWORD *)v20 + 4) = &off_24C0839B0;
          *((_DWORD *)v20 + 18) = 0;
          *(_OWORD *)(v20 + 56) = v36;
          *(_QWORD *)(v20 + 76) = 0xA3727C5ACLL;
          v21 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v20 + 84) = v21;
          *(int32x4_t *)(v20 + 100) = v21;
          *(int32x4_t *)(v20 + 116) = v21;
          *((_DWORD *)v20 + 33) = 2143289344;
          *((_WORD *)v20 + 68) = 257;
          *((_QWORD *)v20 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v20;
          *((_QWORD *)v20 + 3) = &off_24C083A68;
          *(_QWORD *)&v31 = v20 + 24;
          sub_208084218(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v22);
            while (__stlxr(v7 - 1, v22));
            goto LABEL_35;
          }
          break;
        case 'o':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v23 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *(_QWORD *)v23 = off_24C084230;
          v39 = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 4) = &off_24C083B70;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 88) = v38;
          *((_QWORD *)v23 + 13) = 0;
          *((_QWORD *)v23 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v23 + 30) = 10;
          v24 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v23 + 8) = v24;
          *((int64x2_t *)v23 + 9) = v24;
          *((int64x2_t *)v23 + 10) = v24;
          *((int64x2_t *)v23 + 11) = v24;
          *((int64x2_t *)v23 + 12) = v24;
          *((int64x2_t *)v23 + 13) = v24;
          *((_QWORD *)v23 + 28) = 0x7FF8000000000000;
          *((_WORD *)v23 + 116) = 257;
          *((_QWORD *)v23 + 30) = 0;
          v34 = (std::__shared_weak_count *)v23;
          *((_QWORD *)v23 + 3) = &off_24C083C28;
          v33 = v23 + 24;
          sub_2080843E0(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            v25 = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(v25);
            while (__stlxr(v7 - 1, v25));
            goto LABEL_35;
          }
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20808552C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208085540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208085554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808B1A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208085568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20806CAB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208085590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080855A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20806CAB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080855B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808B1A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080855CC(uint64_t a1, uint64_t a2)
{
  void (**v4)(int);
  int v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  const void *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  const void *v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t *v31;
  const void *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t *v44;
  BOOL v46;
  char v47;
  const void *v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unint64_t *p_shared_owners;
  const void *v62;
  _OWORD *v63;
  _OWORD *v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t *v74;
  BOOL v75;
  char v76;
  void *v77;
  void *v78;
  void *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  std::logic_error *exception;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (void (**)(int))(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v5 == 1 && v6 == 1;
  v9 = !v8;
  if (v8 && v7 == 11)
  {
    *(_DWORD *)a1 = 0;
    v10 = *(const void **)(a2 + 8);
    if (!v10
      || (v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083D08, 0)) == 0)
    {
      v80 = sub_208087804();
      sub_20808D430(a2, (const char *)v80, (uint64_t)"trying to cast camera");
    }
    v12 = v11;
    v86 = v11[1];
    *(_QWORD *)&v87 = *((_QWORD *)v11 + 11);
    v13 = v87;
    v14 = (char *)operator new(0x78uLL);
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = off_24C084408;
    v15 = v12[1];
    *((_QWORD *)v14 + 4) = &off_24C083D30;
    *(_OWORD *)(v14 + 40) = v15;
    *(_OWORD *)(v14 + 56) = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    *((_DWORD *)v14 + 26) = *((_DWORD *)v12 + 20);
    *(_OWORD *)(v14 + 88) = v17;
    *(_OWORD *)(v14 + 72) = v16;
    *((_QWORD *)v14 + 14) = v13;
    *((_QWORD *)v14 + 3) = &off_24C083CD8;
    *((_QWORD *)&v87 + 1) = v14 + 24;
    *(_QWORD *)&v88 = v14;
    sub_2080838F8(v4, (uint64_t)&v86);
    v18 = (std::__shared_weak_count *)v88;
    if ((_QWORD)v88)
    {
      v19 = (unint64_t *)(v88 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_39:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if (v7 != 12)
      v9 = 1;
    if ((v9 & 1) != 0)
    {
      if (v5)
        v21 = 0;
      else
        v21 = v6 == 1;
      v22 = !v21;
      if (v21 && v7 == 11)
      {
        *(_DWORD *)a1 = 10;
        v23 = *(const void **)(a2 + 8);
        if (!v23
          || (v24 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083E18, 0)) == 0)
        {
          v82 = sub_2080885E4();
          sub_20808D430(a2, (const char *)v82, (uint64_t)"trying to cast camera");
        }
        v25 = v24;
        v86 = v24[1];
        *(_QWORD *)&v87 = *((_QWORD *)v24 + 11);
        v26 = v87;
        v27 = (char *)operator new(0x78uLL);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = off_24C084458;
        v28 = v25[1];
        *((_QWORD *)v27 + 4) = &off_24C083D30;
        *(_OWORD *)(v27 + 40) = v28;
        *(_OWORD *)(v27 + 56) = v25[2];
        v29 = v25[3];
        v30 = v25[4];
        *((_DWORD *)v27 + 26) = *((_DWORD *)v25 + 20);
        *(_OWORD *)(v27 + 88) = v30;
        *(_OWORD *)(v27 + 72) = v29;
        *((_QWORD *)v27 + 14) = v26;
        *((_QWORD *)v27 + 3) = &off_24C083DE8;
        *((_QWORD *)&v87 + 1) = v27 + 24;
        *(_QWORD *)&v88 = v27;
        sub_208083BC0(v4, (uint64_t)&v86);
        v18 = (std::__shared_weak_count *)v88;
        if ((_QWORD)v88)
        {
          v31 = (unint64_t *)(v88 + 8);
          do
            v20 = __ldaxr(v31);
          while (__stlxr(v20 - 1, v31));
          goto LABEL_39;
        }
      }
      else
      {
        if (v7 != 12)
          v22 = 1;
        if ((v22 & 1) != 0)
        {
          v46 = v5 == 1 && v6 == 2;
          v47 = !v46;
          if (v46 && v7 == 11)
          {
            *(_DWORD *)a1 = 100;
            v48 = *(const void **)(a2 + 8);
            if (!v48
              || (v49 = __dynamic_cast(v48, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083988, 0)) == 0)
            {
              v84 = sub_2080893C4();
              sub_20808D430(a2, (const char *)v84, (uint64_t)"trying to cast camera");
            }
            v50 = v49;
            v51 = v49[1];
            v52 = v49[2];
            LODWORD(v88) = *((_DWORD *)v49 + 12);
            v86 = v51;
            v87 = v52;
            *(_QWORD *)((char *)&v88 + 4) = *((_QWORD *)v49 + 15);
            v53 = *(_QWORD *)((char *)&v88 + 4);
            v54 = (char *)operator new(0x98uLL);
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 2) = 0;
            *(_QWORD *)v54 = off_24C084140;
            v55 = *(_QWORD *)((char *)v50 + 52);
            v56 = *((_WORD *)v50 + 56);
            v57 = v50[1];
            *((_QWORD *)v54 + 4) = &off_24C0839B0;
            *(_OWORD *)(v54 + 40) = v57;
            v58 = v50[2];
            *((_DWORD *)v54 + 18) = *((_DWORD *)v50 + 12);
            *(_OWORD *)(v54 + 56) = v58;
            *(_QWORD *)(v54 + 76) = v55;
            *(_OWORD *)(v54 + 84) = *(_OWORD *)((char *)v50 + 60);
            v59 = *(_OWORD *)((char *)v50 + 76);
            v60 = *(_OWORD *)((char *)v50 + 92);
            *((_DWORD *)v54 + 33) = *((_DWORD *)v50 + 27);
            *(_OWORD *)(v54 + 116) = v60;
            *(_OWORD *)(v54 + 100) = v59;
            *((_WORD *)v54 + 68) = v56;
            *((_QWORD *)v54 + 18) = v53;
            *((_QWORD *)v54 + 3) = &off_24C083958;
            v89 = (std::__shared_weak_count *)(v54 + 24);
            v90 = (std::__shared_weak_count *)v54;
            sub_208083E88(v4, (uint64_t)&v86);
            v18 = v90;
            if (v90)
            {
              p_shared_owners = (unint64_t *)&v90->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              goto LABEL_39;
            }
          }
          else
          {
            if (v7 != 12)
              v47 = 1;
            if ((v47 & 1) != 0)
            {
              if (v5)
                v75 = 0;
              else
                v75 = v6 == 2;
              v76 = !v75;
              if (v75 && v7 == 11)
              {
                *(_DWORD *)a1 = 110;
                v77 = sub_2080841B4(a2);
                sub_20808B304((uint64_t)&v86, (uint64_t)v77);
                sub_208084218(v4, (uint64_t)&v86);
                sub_20808B1A4((uint64_t)&v86);
              }
              else
              {
                if (v7 != 12)
                  v76 = 1;
                if ((v76 & 1) != 0)
                {
                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                  __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
                }
                *(_DWORD *)a1 = 111;
                v79 = sub_20808437C(a2);
                sub_20808B4BC((uint64_t)&v86, (uint64_t)v79);
                sub_2080843E0(v4, (uint64_t)&v86);
                sub_207D86F18((uint64_t)&v86);
              }
            }
            else
            {
              *(_DWORD *)a1 = 101;
              v78 = sub_208083FEC(a2);
              sub_20808B3D4((uint64_t)&v86, (uint64_t)v78);
              sub_208084050(v4, (uint64_t)&v86);
              sub_207D86F18((uint64_t)&v86);
            }
          }
        }
        else
        {
          *(_DWORD *)a1 = 11;
          v62 = *(const void **)(a2 + 8);
          if (!v62
            || (v63 = __dynamic_cast(v62, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083FD8, 0)) == 0)
          {
            v83 = sub_208088CD4();
            sub_20808D430(a2, (const char *)v83, (uint64_t)"trying to cast camera");
          }
          v64 = v63;
          v65 = v63 + 1;
          v66 = v63 + 2;
          v67 = v63[2];
          v86 = v63[1];
          v87 = v67;
          *(_QWORD *)&v88 = *((_QWORD *)v63 + 19);
          v68 = v88;
          v69 = (char *)operator new(0xB8uLL);
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = 0;
          *(_QWORD *)v69 = off_24C0844F8;
          *((_QWORD *)v69 + 4) = &off_24C083EF0;
          *(_OWORD *)(v69 + 40) = *v65;
          *(_OWORD *)(v69 + 56) = *v66;
          v70 = v64[3];
          *(_OWORD *)(v69 + 88) = v64[4];
          *(_OWORD *)(v69 + 72) = v70;
          v71 = v64[6];
          v72 = v64[7];
          v73 = v64[8];
          *((_QWORD *)v69 + 21) = *((_QWORD *)v64 + 18);
          *(_OWORD *)(v69 + 152) = v73;
          *(_OWORD *)(v69 + 136) = v72;
          *(_OWORD *)(v69 + 120) = v71;
          *(_OWORD *)(v69 + 104) = v64[5];
          *((_QWORD *)v69 + 22) = v68;
          *((_QWORD *)v69 + 3) = &off_24C083FA8;
          *((_QWORD *)&v88 + 1) = v69 + 24;
          v89 = (std::__shared_weak_count *)v69;
          sub_208083D24(v4, (uint64_t)&v86);
          v18 = v89;
          if (v89)
          {
            v74 = (unint64_t *)&v89->__shared_owners_;
            do
              v20 = __ldaxr(v74);
            while (__stlxr(v20 - 1, v74));
            goto LABEL_39;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 1;
      v32 = *(const void **)(a2 + 8);
      if (!v32
        || (v33 = __dynamic_cast(v32, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083EC8, 0)) == 0)
      {
        v81 = sub_208087EF4();
        sub_20808D430(a2, (const char *)v81, (uint64_t)"trying to cast camera");
      }
      v34 = v33;
      v35 = v33 + 1;
      v36 = v33 + 2;
      v37 = v33[2];
      v86 = v33[1];
      v87 = v37;
      *(_QWORD *)&v88 = *((_QWORD *)v33 + 19);
      v38 = v88;
      v39 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = off_24C0844A8;
      *((_QWORD *)v39 + 4) = &off_24C083EF0;
      *(_OWORD *)(v39 + 40) = *v35;
      *(_OWORD *)(v39 + 56) = *v36;
      v40 = v34[3];
      *(_OWORD *)(v39 + 88) = v34[4];
      *(_OWORD *)(v39 + 72) = v40;
      v41 = v34[6];
      v42 = v34[7];
      v43 = v34[8];
      *((_QWORD *)v39 + 21) = *((_QWORD *)v34 + 18);
      *(_OWORD *)(v39 + 152) = v43;
      *(_OWORD *)(v39 + 136) = v42;
      *(_OWORD *)(v39 + 120) = v41;
      *(_OWORD *)(v39 + 104) = v34[5];
      *((_QWORD *)v39 + 22) = v38;
      *((_QWORD *)v39 + 3) = &off_24C083E98;
      *((_QWORD *)&v88 + 1) = v39 + 24;
      v89 = (std::__shared_weak_count *)v39;
      sub_208083A5C(v4, (uint64_t)&v86);
      v18 = v89;
      if (v89)
      {
        v44 = (unint64_t *)&v89->__shared_owners_;
        do
          v20 = __ldaxr(v44);
        while (__stlxr(v20 - 1, v44));
        goto LABEL_39;
      }
    }
  }
  return a1;
}

void sub_208085CF0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085D04(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v2;

  __cxa_free_exception(v2);
  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D86F18((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808B1A4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D86F18((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085D74(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085D88(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808B1A4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085DB8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808C110((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085DE8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20806CAB4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085E18(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20808C110((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085E48(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_20806CAB4((uint64_t)&a9);
  sub_207D50BA0(v9);
  _Unwind_Resume(a1);
}

void sub_208085E78(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085E8C(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085EA0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085EB4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085EC8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  sub_207D50BA0(v1);
  _Unwind_Resume(a1);
}

void sub_208085EDC(int *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  int v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, _QWORD, void *, void *);
  float32x2_t *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v68;
  int32x2_t v69;
  int8x16_t v70;
  float32x2_t v71;
  unint64_t *v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;

  v3 = *a1;
  switch(v3)
  {
    case 0:
      v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v4)
        goto LABEL_30;
      v5 = (float32x2_t *)v4(3, (uint64_t)(a1 + 2), 0, &unk_24C077860, &unk_20823BD3C);
      if (!v5)
        goto LABEL_30;
      v6 = v5[2];
      v7 = v5[3];
      v8 = *v5;
      v9 = v5[1];
      __asm { FMOV            V2.2S, #1.0 }
      v15 = vdiv_f32(_D2, *v5);
      v16 = vzip1_s32((int32x2_t)*v5, (int32x2_t)v9);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v5, (int32x2_t)v9), 0x20uLL), v17);
      *(float32x2_t *)(*(_QWORD *)&v7 + 32) = v15;
      *(float32x2_t *)(*(_QWORD *)&v7 + 40) = vmul_f32(v15, vneg_f32(v9));
      *(_DWORD *)(*(_QWORD *)&v7 + 48) = v8.i32[0];
      *(_QWORD *)(*(_QWORD *)&v7 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v7 + 64) = v8.i32[1];
      *(_DWORD *)(*(_QWORD *)&v7 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v7 + 72) = v9;
      *(_DWORD *)(*(_QWORD *)&v7 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v7 + 88) = v6;
      v18 = v5[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C0838B0;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083D30;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v18 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v18 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v18 + 32);
      v21 = *(_DWORD *)(*(_QWORD *)&v18 + 80);
      v22 = *(_OWORD *)(*(_QWORD *)&v18 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v18 + 48);
      LODWORD(v19[4].__shared_owners_) = v21;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v22;
      v23 = *(_QWORD *)(*(_QWORD *)&v18 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083CD8;
      v19[4].__shared_weak_owners_ = v23;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      goto LABEL_28;
    case 1:
      v44 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v44)
        goto LABEL_30;
      v45 = v44(3, (uint64_t)(a1 + 2), 0, &unk_24C0778B0, &unk_20823BE10);
      if (!v45)
        goto LABEL_30;
      v46 = *(double *)v45;
      v47 = *(double *)(v45 + 8);
      v48 = *(double *)(v45 + 16);
      v49 = *(double *)(v45 + 24);
      v50 = 1.0 / *(double *)v45;
      v51 = *(_QWORD *)(v45 + 32);
      v52 = *(_QWORD *)(v45 + 40);
      *(_QWORD *)(v52 + 16) = *(_QWORD *)v45;
      *(double *)(v52 + 24) = v47;
      *(double *)(v52 + 32) = v48;
      *(double *)(v52 + 40) = v49;
      *(double *)(v52 + 48) = v50;
      *(double *)(v52 + 56) = 1.0 / v47;
      *(double *)(v52 + 64) = -(v48 * v50);
      *(double *)(v52 + 72) = -(v49 * (1.0 / v47));
      *(double *)(v52 + 80) = v46;
      *(_QWORD *)(v52 + 96) = 0;
      *(_QWORD *)(v52 + 104) = 0;
      *(_QWORD *)(v52 + 88) = 0;
      *(double *)(v52 + 112) = v47;
      *(_QWORD *)(v52 + 120) = 0;
      *(double *)(v52 + 128) = v48;
      *(double *)(v52 + 136) = v49;
      *(_QWORD *)(v52 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v52 + 152) = v51;
      v53 = *(_QWORD *)(v45 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v54 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C083680;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v53 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v53 + 32);
      v55 = *(_OWORD *)(v53 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v53 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v55;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v53 + 80);
      v57 = *(_OWORD *)(v53 + 112);
      v56 = *(_OWORD *)(v53 + 128);
      v58 = *(std::__shared_weak_count_vtbl **)(v53 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v53 + 96);
      v19[7].__vftable = v58;
      *(_OWORD *)&v19[6].__shared_owners_ = v56;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v57;
      v59 = *(_QWORD *)(v53 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083E98;
      v19[7].__shared_owners_ = v59;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      do
        v25 = __ldaxr(v54);
      while (__stlxr(v25 - 1, v54));
      goto LABEL_28;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      __break(1u);
      return;
    case 10:
      v61 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v61)
        goto LABEL_30;
      v62 = (float32x2_t *)v61(3, (uint64_t)(a1 + 2), 0, &unk_24C077900, &unk_20823BEE4);
      if (!v62)
        goto LABEL_30;
      v63 = v62[2];
      v64 = v62[3];
      v65 = *v62;
      v66 = v62[1];
      __asm { FMOV            V2.2S, #1.0 }
      v68 = vdiv_f32(_D2, *v62);
      v69 = vzip1_s32((int32x2_t)*v62, (int32x2_t)v66);
      v70.i64[0] = v69.u32[0];
      v70.i64[1] = v69.u32[1];
      *(int8x16_t *)(*(_QWORD *)&v64 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*v62, (int32x2_t)v66), 0x20uLL), v70);
      *(float32x2_t *)(*(_QWORD *)&v64 + 32) = v68;
      *(float32x2_t *)(*(_QWORD *)&v64 + 40) = vmul_f32(v68, vneg_f32(v66));
      *(_DWORD *)(*(_QWORD *)&v64 + 48) = v65.i32[0];
      *(_QWORD *)(*(_QWORD *)&v64 + 56) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 52) = 0;
      *(_DWORD *)(*(_QWORD *)&v64 + 64) = v65.i32[1];
      *(_DWORD *)(*(_QWORD *)&v64 + 68) = 0;
      *(float32x2_t *)(*(_QWORD *)&v64 + 72) = v66;
      *(_DWORD *)(*(_QWORD *)&v64 + 80) = 1065353216;
      *(float32x2_t *)(*(_QWORD *)&v64 + 88) = v63;
      v71 = v62[3];
      v19 = (std::__shared_weak_count *)operator new(0x78uLL);
      v19->__shared_owners_ = 0;
      v72 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C0836D0;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083D30;
      v19[1].__shared_weak_owners_ = *(_QWORD *)(*(_QWORD *)&v71 + 16);
      v19[2].__vftable = *(std::__shared_weak_count_vtbl **)(*(_QWORD *)&v71 + 24);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(*(_QWORD *)&v71 + 32);
      v73 = *(_DWORD *)(*(_QWORD *)&v71 + 80);
      v74 = *(_OWORD *)(*(_QWORD *)&v71 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(*(_QWORD *)&v71 + 48);
      LODWORD(v19[4].__shared_owners_) = v73;
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v74;
      v75 = *(_QWORD *)(*(_QWORD *)&v71 + 88);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083DE8;
      v19[4].__shared_weak_owners_ = v75;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v76 = __ldxr(v72);
      while (__stxr(v76 + 1, v72));
      do
        v25 = __ldaxr(v72);
      while (__stlxr(v25 - 1, v72));
LABEL_28:
      if (v25)
        return;
      goto LABEL_16;
    case 11:
      v26 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, void *))*((_QWORD *)a1 + 1);
      if (!v26 || (v27 = v26(3, (uint64_t)(a1 + 2), 0, &unk_24C077950, &unk_20823BFB8)) == 0)
LABEL_30:
        sub_207DCBF24();
      v28 = *(double *)v27;
      v29 = *(double *)(v27 + 8);
      v30 = *(double *)(v27 + 16);
      v31 = *(double *)(v27 + 24);
      v32 = 1.0 / *(double *)v27;
      v33 = *(_QWORD *)(v27 + 32);
      v34 = *(_QWORD *)(v27 + 40);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)v27;
      *(double *)(v34 + 24) = v29;
      *(double *)(v34 + 32) = v30;
      *(double *)(v34 + 40) = v31;
      *(double *)(v34 + 48) = v32;
      *(double *)(v34 + 56) = 1.0 / v29;
      *(double *)(v34 + 64) = -(v30 * v32);
      *(double *)(v34 + 72) = -(v31 * (1.0 / v29));
      *(double *)(v34 + 80) = v28;
      *(_QWORD *)(v34 + 96) = 0;
      *(_QWORD *)(v34 + 104) = 0;
      *(_QWORD *)(v34 + 88) = 0;
      *(double *)(v34 + 112) = v29;
      *(_QWORD *)(v34 + 120) = 0;
      *(double *)(v34 + 128) = v30;
      *(double *)(v34 + 136) = v31;
      *(_QWORD *)(v34 + 144) = 0x3FF0000000000000;
      *(_QWORD *)(v34 + 152) = v33;
      v35 = *(_QWORD *)(v27 + 40);
      v19 = (std::__shared_weak_count *)operator new(0xB8uLL);
      v19->__shared_owners_ = 0;
      v36 = (unint64_t *)&v19->__shared_owners_;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)off_24C083720;
      v19[1].__shared_owners_ = (uint64_t)&off_24C083EF0;
      *(_OWORD *)&v19[1].__shared_weak_owners_ = *(_OWORD *)(v35 + 16);
      *(_OWORD *)&v19[2].__shared_owners_ = *(_OWORD *)(v35 + 32);
      v37 = *(_OWORD *)(v35 + 64);
      v19[3].std::__shared_count = *(std::__shared_count *)(v35 + 48);
      *(_OWORD *)&v19[3].__shared_weak_owners_ = v37;
      *(_OWORD *)&v19[4].__shared_owners_ = *(_OWORD *)(v35 + 80);
      v39 = *(_OWORD *)(v35 + 112);
      v38 = *(_OWORD *)(v35 + 128);
      v40 = *(std::__shared_weak_count_vtbl **)(v35 + 144);
      v19[5].std::__shared_count = *(std::__shared_count *)(v35 + 96);
      v19[7].__vftable = v40;
      *(_OWORD *)&v19[6].__shared_owners_ = v38;
      *(_OWORD *)&v19[5].__shared_weak_owners_ = v39;
      v41 = *(_QWORD *)(v35 + 152);
      v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C083FA8;
      v19[7].__shared_owners_ = v41;
      *a2 = &off_24C084548;
      a2[1] = v19 + 1;
      a2[2] = v19;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldaxr(v36);
      while (__stlxr(v43 - 1, v36));
      if (!v43)
      {
LABEL_16:
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      return;
    default:
      __asm { BR              X10 }
      return;
  }
}

BOOL sub_208086898(int *a1, int *a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];
  std::__shared_weak_count *v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;

  if (*a1 != *a2)
    return 0;
  sub_208085EDC(a1, v13);
  sub_208085EDC(a2, v11);
  v3 = sub_20808CB2C((uint64_t)v13, (uint64_t)v11);
  v11[0] = &off_24C084548;
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v13[0] = &off_24C084548;
  v7 = v14;
  if (!v14)
    return v3;
  v8 = (unint64_t *)&v14->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return v3;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return v3;
}

void sub_2080869B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_20808CA44(&a9);
  sub_20808CA44(&a12);
  _Unwind_Resume(a1);
}

void sub_2080869CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20808CA44((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080869E0(void (**a1)(int a1))
{
  int v2;
  char *v3;
  int32x4_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  int32x4_t v9;
  unint64_t *v10;
  char *v11;
  int64x2_t v12;
  unint64_t *v13;
  char *v14;
  int32x4_t v15;
  unint64_t *v16;
  char *v17;
  int64x2_t v18;
  unint64_t *v19;
  char *v20;
  int32x4_t v21;
  unint64_t *v22;
  char *v23;
  int64x2_t v24;
  unint64_t *v25;
  char *v26;
  int64x2_t v27;
  unint64_t *p_shared_owners;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  char *v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v2 = *(_DWORD *)a1;
  switch(v2)
  {
    case 0:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v8 = (char *)operator new(0x78uLL);
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *(_QWORD *)v8 = off_24C084408;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      *((_QWORD *)v8 + 4) = &off_24C083D30;
      v9 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v8 + 56) = v9;
      *(int32x4_t *)(v8 + 72) = v9;
      *(int32x4_t *)(v8 + 88) = v9;
      *((_DWORD *)v8 + 26) = 2143289344;
      *((_QWORD *)v8 + 14) = 0;
      *(_QWORD *)&v30[1] = v8;
      *((_QWORD *)v8 + 3) = &off_24C083CD8;
      *((_QWORD *)&v30[0] + 1) = v8 + 24;
      sub_2080838F8(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v10 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v10);
        while (__stlxr(v7 - 1, v10));
        goto LABEL_35;
      }
      break;
    case 1:
      v29 = 0u;
      memset(v30, 0, 24);
      v11 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = off_24C0844A8;
      v36 = 0u;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *((_QWORD *)v11 + 4) = &off_24C083EF0;
      *(_OWORD *)(v11 + 56) = v36;
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v11 + 72) = v12;
      *(int64x2_t *)(v11 + 88) = v12;
      *(int64x2_t *)(v11 + 104) = v12;
      *(int64x2_t *)(v11 + 120) = v12;
      *(int64x2_t *)(v11 + 136) = v12;
      *(int64x2_t *)(v11 + 152) = v12;
      *((_QWORD *)v11 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v11 + 22) = 0;
      *(_QWORD *)&v31 = v11;
      *((_QWORD *)v11 + 3) = &off_24C083E98;
      *((_QWORD *)&v30[1] + 1) = v11 + 24;
      sub_208083A5C(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v13 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v13);
        while (__stlxr(v7 - 1, v13));
        goto LABEL_35;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v29 = 0uLL;
      *(_QWORD *)&v30[0] = 0;
      v14 = (char *)operator new(0x78uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = off_24C084458;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = &off_24C083D30;
      v15 = vdupq_n_s32(0x7FC00000u);
      *(int32x4_t *)(v14 + 56) = v15;
      *(int32x4_t *)(v14 + 72) = v15;
      *(int32x4_t *)(v14 + 88) = v15;
      *((_DWORD *)v14 + 26) = 2143289344;
      *((_QWORD *)v14 + 14) = 0;
      *(_QWORD *)&v30[1] = v14;
      *((_QWORD *)v14 + 3) = &off_24C083DE8;
      *((_QWORD *)&v30[0] + 1) = v14 + 24;
      sub_208083BC0(a1 + 1, (uint64_t)&v29);
      v5 = *(std::__shared_weak_count **)&v30[1];
      if (*(_QWORD *)&v30[1])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v30[1] + 8);
        do
          v7 = __ldaxr(v16);
        while (__stlxr(v7 - 1, v16));
        goto LABEL_35;
      }
      break;
    case 11:
      v29 = 0u;
      memset(v30, 0, 24);
      v17 = (char *)operator new(0xB8uLL);
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = off_24C0844F8;
      v36 = 0u;
      *((_QWORD *)v17 + 5) = 0;
      *((_QWORD *)v17 + 6) = 0;
      *((_QWORD *)v17 + 4) = &off_24C083EF0;
      *(_OWORD *)(v17 + 56) = v36;
      v18 = vdupq_n_s64(0x7FF8000000000000uLL);
      *(int64x2_t *)(v17 + 72) = v18;
      *(int64x2_t *)(v17 + 88) = v18;
      *(int64x2_t *)(v17 + 104) = v18;
      *(int64x2_t *)(v17 + 120) = v18;
      *(int64x2_t *)(v17 + 136) = v18;
      *(int64x2_t *)(v17 + 152) = v18;
      *((_QWORD *)v17 + 21) = 0x7FF8000000000000;
      *((_QWORD *)v17 + 22) = 0;
      *(_QWORD *)&v31 = v17;
      *((_QWORD *)v17 + 3) = &off_24C083FA8;
      *((_QWORD *)&v30[1] + 1) = v17 + 24;
      sub_208083D24(a1 + 1, (uint64_t)&v29);
      v5 = (std::__shared_weak_count *)v31;
      if ((_QWORD)v31)
      {
        v19 = (unint64_t *)(v31 + 8);
        do
          v7 = __ldaxr(v19);
        while (__stlxr(v7 - 1, v19));
LABEL_35:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      break;
    default:
      switch(v2)
      {
        case 'd':
          v29 = 0u;
          memset(v30, 0, 28);
          v3 = (char *)operator new(0x98uLL);
          *((_QWORD *)v3 + 1) = 0;
          *((_QWORD *)v3 + 2) = 0;
          *(_QWORD *)v3 = off_24C084140;
          v36 = 0u;
          *((_QWORD *)v3 + 5) = 0;
          *((_QWORD *)v3 + 6) = 0;
          *((_QWORD *)v3 + 4) = &off_24C0839B0;
          *((_DWORD *)v3 + 18) = 0;
          *(_OWORD *)(v3 + 56) = v36;
          *(_QWORD *)(v3 + 76) = 0xA3727C5ACLL;
          v4 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v3 + 84) = v4;
          *(int32x4_t *)(v3 + 100) = v4;
          *(int32x4_t *)(v3 + 116) = v4;
          *((_DWORD *)v3 + 33) = 2143289344;
          *((_WORD *)v3 + 68) = 257;
          *((_QWORD *)v3 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v3;
          *((_QWORD *)v3 + 3) = &off_24C083958;
          *(_QWORD *)&v31 = v3 + 24;
          sub_208083E88(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v6 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v6);
            while (__stlxr(v7 - 1, v6));
            goto LABEL_35;
          }
          break;
        case 'e':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v26 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v26 + 56) = 0u;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = 0;
          *(_QWORD *)v26 = off_24C0841E0;
          v39 = 0;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 4) = &off_24C083B70;
          *(_OWORD *)(v26 + 72) = 0u;
          *(_OWORD *)(v26 + 88) = v38;
          *((_QWORD *)v26 + 13) = 0;
          *((_QWORD *)v26 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v26 + 30) = 10;
          v27 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v26 + 8) = v27;
          *((int64x2_t *)v26 + 9) = v27;
          *((int64x2_t *)v26 + 10) = v27;
          *((int64x2_t *)v26 + 11) = v27;
          *((int64x2_t *)v26 + 12) = v27;
          *((int64x2_t *)v26 + 13) = v27;
          *((_QWORD *)v26 + 28) = 0x7FF8000000000000;
          *((_WORD *)v26 + 116) = 257;
          *((_QWORD *)v26 + 30) = 0;
          v34 = (std::__shared_weak_count *)v26;
          *((_QWORD *)v26 + 3) = &off_24C083B18;
          v33 = v26 + 24;
          sub_208084050(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            goto LABEL_35;
          }
          break;
        case 'n':
          v29 = 0u;
          memset(v30, 0, 28);
          v20 = (char *)operator new(0x98uLL);
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = off_24C084190;
          v36 = 0u;
          *((_QWORD *)v20 + 5) = 0;
          *((_QWORD *)v20 + 6) = 0;
          *((_QWORD *)v20 + 4) = &off_24C0839B0;
          *((_DWORD *)v20 + 18) = 0;
          *(_OWORD *)(v20 + 56) = v36;
          *(_QWORD *)(v20 + 76) = 0xA3727C5ACLL;
          v21 = vdupq_n_s32(0x7FC00000u);
          *(int32x4_t *)(v20 + 84) = v21;
          *(int32x4_t *)(v20 + 100) = v21;
          *(int32x4_t *)(v20 + 116) = v21;
          *((_DWORD *)v20 + 33) = 2143289344;
          *((_WORD *)v20 + 68) = 257;
          *((_QWORD *)v20 + 18) = 0;
          *((_QWORD *)&v31 + 1) = v20;
          *((_QWORD *)v20 + 3) = &off_24C083A68;
          *(_QWORD *)&v31 = v20 + 24;
          sub_208084218(a1 + 1, (uint64_t)&v29);
          v5 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          if (*((_QWORD *)&v31 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
            do
              v7 = __ldaxr(v22);
            while (__stlxr(v7 - 1, v22));
            goto LABEL_35;
          }
          break;
        case 'o':
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          v29 = 0u;
          v23 = (char *)operator new(0xF8uLL);
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *((_QWORD *)v23 + 1) = 0;
          *((_QWORD *)v23 + 2) = 0;
          *(_QWORD *)v23 = off_24C084230;
          v39 = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 4) = &off_24C083B70;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 88) = v38;
          *((_QWORD *)v23 + 13) = 0;
          *((_QWORD *)v23 + 14) = 0x3EE4F8B588E368F1;
          *((_DWORD *)v23 + 30) = 10;
          v24 = vdupq_n_s64(0x7FF8000000000000uLL);
          *((int64x2_t *)v23 + 8) = v24;
          *((int64x2_t *)v23 + 9) = v24;
          *((int64x2_t *)v23 + 10) = v24;
          *((int64x2_t *)v23 + 11) = v24;
          *((int64x2_t *)v23 + 12) = v24;
          *((int64x2_t *)v23 + 13) = v24;
          *((_QWORD *)v23 + 28) = 0x7FF8000000000000;
          *((_WORD *)v23 + 116) = 257;
          *((_QWORD *)v23 + 30) = 0;
          v34 = (std::__shared_weak_count *)v23;
          *((_QWORD *)v23 + 3) = &off_24C083C28;
          v33 = v23 + 24;
          sub_2080843E0(a1 + 1, (uint64_t)&v29);
          v5 = v34;
          if (v34)
          {
            v25 = (unint64_t *)&v34->__shared_owners_;
            do
              v7 = __ldaxr(v25);
            while (__stlxr(v7 - 1, v25));
            goto LABEL_35;
          }
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20808700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208087020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D86F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208087034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808B1A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208087048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808705C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20806CAB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208087070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808C110((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208087084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20806CAB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208087098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20808B1A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080870AC(_QWORD *a1, int *a2)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v2 = *a2;
  switch(v2)
  {
    case 0:
      v3 = "CenterPinholeF";
      v4 = 14;
      break;
    case 1:
      v3 = "CenterPinholeD";
      v4 = 14;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
LABEL_10:
      v3 = "invalid camera type";
      v4 = 19;
      break;
    case 10:
      v3 = "CornerPinholeF";
      v4 = 14;
      break;
    case 11:
      v3 = "CornerPinholeD";
      v4 = 14;
      break;
    default:
      switch(v2)
      {
        case 'd':
          v3 = "CenterHeikkilaF";
          v4 = 15;
          break;
        case 'e':
          v3 = "CenterHeikkilaD";
          v4 = 15;
          break;
        case 'n':
          v3 = "CornerHeikkilaF";
          v4 = 15;
          break;
        case 'o':
          v3 = "CornerHeikkilaD";
          v4 = 15;
          break;
        default:
          goto LABEL_10;
      }
      break;
  }
  return sub_207CBAB98(a1, (uint64_t)v3, v4);
}

uint64_t *sub_208087184(uint64_t *a1, _DWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  size_t v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  std::logic_error *exception;
  std::string v23;
  std::string v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  v4 = atomic_load((unsigned __int8 *)&qword_253E51428);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51428))
  {
    sub_208087424();
    __cxa_atexit((void (*)(void *))sub_2080877DC, &qword_253E51430, &dword_207C77000);
    __cxa_guard_release(&qword_253E51428);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  sub_207EFCDF4(a1, (uint64_t)&v25);
  v5 = qword_253E51438;
  if (!qword_253E51438)
    goto LABEL_41;
  v6 = SHIBYTE(v27);
  v7 = v25;
  if (v27 >= 0)
    v8 = &v25;
  else
    v8 = (void **)v25;
  if (v27 >= 0)
    v9 = HIBYTE(v27);
  else
    v9 = v26;
  v10 = &qword_253E51438;
  do
  {
    while (1)
    {
      v11 = *(char *)(v5 + 55);
      v12 = v11 >= 0 ? (const void *)(v5 + 32) : *(const void **)(v5 + 32);
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v5 + 55) : *(_QWORD *)(v5 + 40);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_24;
LABEL_10:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_25;
    }
    if (v15 < 0)
      goto LABEL_10;
LABEL_24:
    v10 = (uint64_t *)v5;
    v5 = *(_QWORD *)v5;
  }
  while (v5);
LABEL_25:
  if (v10 == &qword_253E51438)
    goto LABEL_41;
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= v9)
    v19 = v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_37;
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_207C96E30(", expected [Center|Corner][Pinhole|Heikkila][F|D]", &v23, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  if (v9 < v18)
    goto LABEL_41;
LABEL_37:
  *a2 = *((_DWORD *)v10 + 14);
  if (v6 < 0)
    operator delete(v7);
  return a1;
}

void sub_208087394(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51428);
  _Unwind_Resume(a1);
}

void sub_2080873AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0)
        operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_208087424()
{
  uint64_t v0;
  void *v1;
  void *v2;
  size_t v3;
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  int v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  uint64_t *v19;
  size_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  _OWORD v27[2];
  void *v28;
  _BYTE v29[15];
  unsigned __int8 v30;
  _BYTE v31[24];
  int v32;
  char v33;
  _QWORD v34[2];
  _QWORD v35[4];

  v0 = 0;
  v35[2] = *MEMORY[0x24BDAC8D0];
  qword_253E51438 = 0;
  v27[0] = xmmword_2082656C0;
  v27[1] = unk_2082656D0;
  qword_253E51440 = 0;
  qword_253E51430 = (uint64_t)&qword_253E51438;
  v1 = &unk_253E51000;
  do
  {
    while (1)
    {
      v32 = 0;
      sub_207E7F9EC((uint64_t)v34, (uint64_t)v31, (int *)v27 + v0);
      if (v32 == -1)
        sub_207CA9F48();
      v34[0] = &v33;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C083658[v32])(&v28, v34, v31);
      if (v32 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C083640[v32])(v34, v31);
      v2 = v28;
      v35[0] = *(_QWORD *)v29;
      *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)&v29[7];
      v3 = v30;
      v4 = (char)v30;
      v5 = operator new(0x40uLL);
      v5[4] = v2;
      v5[5] = v35[0];
      *(_QWORD *)((char *)v5 + 47) = *(_QWORD *)((char *)v35 + 7);
      *((_BYTE *)v5 + 55) = v4;
      v35[0] = 0;
      *(_QWORD *)((char *)v35 + 7) = 0;
      *((_DWORD *)v5 + 14) = *((_DWORD *)v27 + v0);
      v6 = (uint64_t *)*((_QWORD *)v1 + 134);
      v8 = &qword_253E51438;
      v7 = qword_253E51438;
      if (v6 == &qword_253E51438)
        goto LABEL_52;
      v9 = qword_253E51438;
      if (qword_253E51438)
      {
        do
        {
          v8 = (uint64_t *)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        v10 = &qword_253E51438;
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *((char *)v8 + 55);
      if (v12 >= 0)
        v13 = v8 + 4;
      else
        v13 = (const void *)v8[4];
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)v8 + 55);
      else
        v14 = v8[5];
      if (v4 >= 0)
        v15 = v5 + 4;
      else
        v15 = v2;
      if (v4 >= 0)
        v16 = v3;
      else
        v16 = v5[5];
      if (v16 >= v14)
        v17 = v14;
      else
        v17 = v16;
      v18 = memcmp(v13, v15, v17);
      if (!v18)
      {
        if (v14 < v16)
          goto LABEL_52;
LABEL_29:
        if (!v7)
        {
LABEL_58:
          v8 = &qword_253E51438;
          v19 = &qword_253E51438;
          goto LABEL_59;
        }
        while (1)
        {
          v8 = (uint64_t *)v7;
          v20 = *(unsigned __int8 *)(v7 + 55);
          v21 = *(_QWORD *)(v7 + 40);
          if ((v20 & 0x80u) == 0)
            v22 = (const void *)(v7 + 32);
          else
            v22 = *(const void **)(v7 + 32);
          if ((v20 & 0x80u) == 0)
            v23 = v20;
          else
            v23 = v21;
          if (v23 >= v16)
            v24 = v16;
          else
            v24 = v23;
          v25 = memcmp(v15, v22, v24);
          if (v25)
          {
            if (v25 < 0)
              goto LABEL_31;
LABEL_45:
            v26 = memcmp(v22, v15, v24);
            if (v26)
            {
              if ((v26 & 0x80000000) == 0)
                goto LABEL_54;
            }
            else if (v23 >= v16)
            {
              goto LABEL_54;
            }
            v7 = v8[1];
            if (!v7)
            {
              v19 = v8 + 1;
              goto LABEL_59;
            }
          }
          else
          {
            if (v16 >= v23)
              goto LABEL_45;
LABEL_31:
            v7 = *v8;
            v19 = v8;
            if (!*v8)
              goto LABEL_59;
          }
        }
      }
      if ((v18 & 0x80000000) == 0)
        goto LABEL_29;
LABEL_52:
      if (!v7)
        goto LABEL_58;
      v19 = v8 + 1;
      if (v8[1])
        break;
LABEL_59:
      *v5 = 0;
      v5[1] = 0;
      v5[2] = v8;
      *v19 = (uint64_t)v5;
      v1 = &unk_253E51000;
      if (*(_QWORD *)qword_253E51430)
      {
        qword_253E51430 = *(_QWORD *)qword_253E51430;
        v5 = (_QWORD *)*v19;
      }
      sub_207CC24B4((uint64_t *)qword_253E51438, v5);
      ++qword_253E51440;
      if (++v0 == 8)
        return;
    }
LABEL_54:
    if (v4 < 0)
      operator delete(v2);
    operator delete(v5);
    v1 = &unk_253E51000;
    ++v0;
  }
  while (v0 != 8);
}

void sub_208087770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,int a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080877DC(uint64_t a1)
{
  sub_207DC9BDC(*(char **)(a1 + 8));
  return a1;
}

__int128 *sub_208087804()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F1D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F1D0))
    return &xmmword_25452F1B8;
  v2 = sub_2080878E0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F1B8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F1C8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F1B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F1B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F1D0);
  return &xmmword_25452F1B8;
}

void sub_2080878C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F1D0);
  _Unwind_Resume(a1);
}

std::string *sub_2080878E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F1F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F1F0))
    return &stru_25452F1D8;
  sub_208087B74((uint64_t)__p);
  sub_2080879D0((char *)__p, &stru_25452F1D8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F1D8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F1F0);
  return &stru_25452F1D8;
}

void sub_208087990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F1F0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F1F0);
  _Unwind_Resume(a1);
}

void sub_2080879D0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float32";
  v14 = 0x700000000000000;
  v4 = sub_207E962CC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_207CAA110(&__p, (uint64_t)v13, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_208087B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_208087B74(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F210);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F210))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452F1F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F1F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F210);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F230);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F230))
  {
    v5 = sub_207D49434(qword_25452F1F8, "<", 0);
    sub_207D49330(qword_25452F1F8, 0, v5, qword_25452F218);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F218, &dword_207C77000);
    __cxa_guard_release(&qword_25452F230);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F250);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F250))
  {
    sub_208215C6C((uint64_t)qword_25452F218, (uint64_t)&xmmword_25452F238);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F238, &dword_207C77000);
    __cxa_guard_release(&qword_25452F250);
  }
  if (byte_25452F24F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F238, *((unint64_t *)&xmmword_25452F238 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F238;
    *(_QWORD *)(a1 + 16) = unk_25452F248;
  }
}

void sub_208087D10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F250);
  _Unwind_Resume(a1);
}

void sub_208087D28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F230);
  _Unwind_Resume(a1);
}

void sub_208087D40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F210);
  _Unwind_Resume(a1);
}

void sub_208087D58(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208087D94()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208087DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823BD3C)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_208087EE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_208087EF4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F270);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F270))
    return &xmmword_25452F258;
  v2 = sub_208087FD0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F258, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F268 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F258 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F258, &dword_207C77000);
  __cxa_guard_release(&qword_25452F270);
  return &xmmword_25452F258;
}

void sub_208087FB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F270);
  _Unwind_Resume(a1);
}

std::string *sub_208087FD0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F290);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F290))
    return &stru_25452F278;
  sub_208088264((uint64_t)__p);
  sub_2080880C0((char *)__p, &stru_25452F278);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F278, &dword_207C77000);
  __cxa_guard_release(&qword_25452F290);
  return &stru_25452F278;
}

void sub_208088080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F290);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F290);
  _Unwind_Resume(a1);
}

void sub_2080880C0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float64";
  v14 = 0x700000000000000;
  v4 = sub_207E962CC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_207CAA110(&__p, (uint64_t)v13, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_208088208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_208088264(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F2B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F2B0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452F298);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F298, &dword_207C77000);
    __cxa_guard_release(&qword_25452F2B0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F2D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F2D0))
  {
    v5 = sub_207D49434(qword_25452F298, "<", 0);
    sub_207D49330(qword_25452F298, 0, v5, qword_25452F2B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F2B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F2D0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F2F0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F2F0))
  {
    sub_208215C6C((uint64_t)qword_25452F2B8, (uint64_t)&xmmword_25452F2D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F2D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F2F0);
  }
  if (byte_25452F2EF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F2D8, *((unint64_t *)&xmmword_25452F2D8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F2D8;
    *(_QWORD *)(a1 + 16) = unk_25452F2E8;
  }
}

void sub_208088400(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F2F0);
  _Unwind_Resume(a1);
}

void sub_208088418(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F2D0);
  _Unwind_Resume(a1);
}

void sub_208088430(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F2B0);
  _Unwind_Resume(a1);
}

void sub_208088448(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208088484()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_2080884E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823BE10)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_2080885D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_2080885E4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F310);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F310))
    return &xmmword_25452F2F8;
  v2 = sub_2080886C0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F2F8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F308 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F2F8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F2F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F310);
  return &xmmword_25452F2F8;
}

void sub_2080886A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F310);
  _Unwind_Resume(a1);
}

std::string *sub_2080886C0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F330);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F330))
    return &stru_25452F318;
  sub_208088954((uint64_t)__p);
  sub_2080887B0((char *)__p, &stru_25452F318);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F318, &dword_207C77000);
  __cxa_guard_release(&qword_25452F330);
  return &stru_25452F318;
}

void sub_208088770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F330);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F330);
  _Unwind_Resume(a1);
}

void sub_2080887B0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float32";
  v14 = 0x700000000000000;
  v4 = sub_207E97A28();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_207CAA110(&__p, (uint64_t)v13, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_2080888F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_208088954(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F350);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F350))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452F338);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F338, &dword_207C77000);
    __cxa_guard_release(&qword_25452F350);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F370);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F370))
  {
    v5 = sub_207D49434(qword_25452F338, "<", 0);
    sub_207D49330(qword_25452F338, 0, v5, qword_25452F358);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F358, &dword_207C77000);
    __cxa_guard_release(&qword_25452F370);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F390);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F390))
  {
    sub_208215C6C((uint64_t)qword_25452F358, (uint64_t)&xmmword_25452F378);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F378, &dword_207C77000);
    __cxa_guard_release(&qword_25452F390);
  }
  if (byte_25452F38F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F378, *((unint64_t *)&xmmword_25452F378 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F378;
    *(_QWORD *)(a1 + 16) = unk_25452F388;
  }
}

void sub_208088AF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F390);
  _Unwind_Resume(a1);
}

void sub_208088B08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F370);
  _Unwind_Resume(a1);
}

void sub_208088B20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F350);
  _Unwind_Resume(a1);
}

void sub_208088B38(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208088B74()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_208088BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823BEE4)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_208088CC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_208088CD4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F3B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F3B0))
    return &xmmword_25452F398;
  v2 = sub_208088DB0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F398, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F3A8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F398 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F398, &dword_207C77000);
  __cxa_guard_release(&qword_25452F3B0);
  return &xmmword_25452F398;
}

void sub_208088D98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F3B0);
  _Unwind_Resume(a1);
}

std::string *sub_208088DB0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F3D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F3D0))
    return &stru_25452F3B8;
  sub_208089044((uint64_t)__p);
  sub_208088EA0((char *)__p, &stru_25452F3B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F3B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F3D0);
  return &stru_25452F3B8;
}

void sub_208088E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F3D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F3D0);
  _Unwind_Resume(a1);
}

void sub_208088EA0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v13 = *(_OWORD *)"float64";
  v14 = 0x700000000000000;
  v4 = sub_207E97A28();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    v15 = v5;
  }
  sub_207CAA110(&__p, (uint64_t)v13, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return;
LABEL_16:
    operator delete(v13[0]);
    return;
  }
  operator delete((void *)v15);
  if (SHIBYTE(v14) < 0)
    goto LABEL_16;
}

void sub_208088FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0(&a10);
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_208089044(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F3F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F3F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PinholeCamera<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452F3D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F3D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F3F0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F410);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F410))
  {
    v5 = sub_207D49434(qword_25452F3D8, "<", 0);
    sub_207D49330(qword_25452F3D8, 0, v5, qword_25452F3F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F3F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F410);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F430);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F430))
  {
    sub_208215C6C((uint64_t)qword_25452F3F8, (uint64_t)&xmmword_25452F418);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F418, &dword_207C77000);
    __cxa_guard_release(&qword_25452F430);
  }
  if (byte_25452F42F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F418, *((unint64_t *)&xmmword_25452F418 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F418;
    *(_QWORD *)(a1 + 16) = unk_25452F428;
  }
}

void sub_2080891E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F430);
  _Unwind_Resume(a1);
}

void sub_2080891F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F410);
  _Unwind_Resume(a1);
}

void sub_208089210(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F3F0);
  _Unwind_Resume(a1);
}

void sub_208089228(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208089264()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_2080892C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio19PinholeCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823BFB8)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_2080893B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_2080893C4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F450);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F450))
    return &xmmword_25452F438;
  v2 = sub_2080894A0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F438, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F448 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F438 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F438, &dword_207C77000);
  __cxa_guard_release(&qword_25452F450);
  return &xmmword_25452F438;
}

void sub_208089488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F450);
  _Unwind_Resume(a1);
}

std::string *sub_2080894A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F470);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F470))
    return &stru_25452F458;
  sub_208089590((uint64_t)__p);
  sub_2080879D0((char *)__p, &stru_25452F458);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F458, &dword_207C77000);
  __cxa_guard_release(&qword_25452F470);
  return &stru_25452F458;
}

void sub_208089550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F470);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F470);
  _Unwind_Resume(a1);
}

void sub_208089590(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F490);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F490))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452F478);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F478, &dword_207C77000);
    __cxa_guard_release(&qword_25452F490);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F4B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F4B0))
  {
    v5 = sub_207D49434(qword_25452F478, "<", 0);
    sub_207D49330(qword_25452F478, 0, v5, qword_25452F498);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F498, &dword_207C77000);
    __cxa_guard_release(&qword_25452F4B0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F4D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F4D0))
  {
    sub_208215C6C((uint64_t)qword_25452F498, (uint64_t)&xmmword_25452F4B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F4B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F4D0);
  }
  if (byte_25452F4CF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F4B8, *((unint64_t *)&xmmword_25452F4B8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F4B8;
    *(_QWORD *)(a1 + 16) = unk_25452F4C8;
  }
}

void sub_20808972C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F4D0);
  _Unwind_Resume(a1);
}

void sub_208089744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F4B0);
  _Unwind_Resume(a1);
}

void sub_20808975C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F490);
  _Unwind_Resume(a1);
}

void sub_208089774(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2080897B0()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_20808980C()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = (char *)operator new(0x40uLL);
  v4 = sub_20808B0E4(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v3 + 36) = v6;
  v7 = (char *)operator new(0x98uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_24C084140;
  v8 = *(_QWORD *)(v4 + 52);
  v9 = *(_WORD *)(v4 + 112);
  v10 = *(_OWORD *)(v4 + 16);
  *((_QWORD *)v7 + 4) = &off_24C0839B0;
  *(_OWORD *)(v7 + 40) = v10;
  v11 = *(_OWORD *)(v4 + 32);
  *((_DWORD *)v7 + 18) = *(_DWORD *)(v4 + 48);
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 76) = v8;
  *(_OWORD *)(v7 + 84) = *(_OWORD *)(v4 + 60);
  result = *(__n128 *)(v4 + 76);
  v13 = *(_OWORD *)(v4 + 92);
  *((_DWORD *)v7 + 33) = *(_DWORD *)(v4 + 108);
  *(_OWORD *)(v7 + 116) = v13;
  *(__n128 *)(v7 + 100) = result;
  *((_WORD *)v7 + 68) = v9;
  *((_QWORD *)v7 + 18) = v6;
  *((_QWORD *)v7 + 3) = &off_24C083958;
  *((_QWORD *)v3 + 6) = v7 + 24;
  *((_QWORD *)v3 + 7) = v7;
  *v0 = sub_208089774;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_2080898EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823C090)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_2080899A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_2080899B8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F4F0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F4F0))
    return &xmmword_25452F4D8;
  v2 = sub_208089A94();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F4D8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F4E8 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F4D8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F4D8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F4F0);
  return &xmmword_25452F4D8;
}

void sub_208089A7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F4F0);
  _Unwind_Resume(a1);
}

std::string *sub_208089A94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F510);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F510))
    return &stru_25452F4F8;
  sub_208089B84((uint64_t)__p);
  sub_2080880C0((char *)__p, &stru_25452F4F8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F4F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452F510);
  return &stru_25452F4F8;
}

void sub_208089B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F510);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F510);
  _Unwind_Resume(a1);
}

void sub_208089B84(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F530);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F530))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_25452F518);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F518, &dword_207C77000);
    __cxa_guard_release(&qword_25452F530);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F550);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F550))
  {
    v5 = sub_207D49434(qword_25452F518, "<", 0);
    sub_207D49330(qword_25452F518, 0, v5, qword_25452F538);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F538, &dword_207C77000);
    __cxa_guard_release(&qword_25452F550);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F570);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F570))
  {
    sub_208215C6C((uint64_t)qword_25452F538, (uint64_t)&xmmword_25452F558);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F558, &dword_207C77000);
    __cxa_guard_release(&qword_25452F570);
  }
  if (byte_25452F56F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F558, *((unint64_t *)&xmmword_25452F558 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F558;
    *(_QWORD *)(a1 + 16) = unk_25452F568;
  }
}

void sub_208089D20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F570);
  _Unwind_Resume(a1);
}

void sub_208089D38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F550);
  _Unwind_Resume(a1);
}

void sub_208089D50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F530);
  _Unwind_Resume(a1);
}

void sub_208089D68(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_208089DA8()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[11];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_208089E08()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = operator new(0x60uLL);
  v4 = sub_20808B20C(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *v3 = *(_OWORD *)(v4 + 16);
  v3[1] = v5;
  v6 = *(_OWORD *)(v4 + 64);
  v3[2] = *(_OWORD *)(v4 + 48);
  v3[3] = v6;
  v7 = *(_QWORD *)(v4 + 216);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(v4 + 80);
  *((_QWORD *)v3 + 9) = v7;
  v8 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = off_24C0841E0;
  v9 = *(_WORD *)(v4 + 208);
  *((_QWORD *)v8 + 4) = &off_24C083B70;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v4 + 32);
  v10 = *(_OWORD *)(v4 + 48);
  v11 = *(_OWORD *)(v4 + 64);
  *((_QWORD *)v8 + 13) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  v12 = *(_QWORD *)(v4 + 88);
  *((_DWORD *)v8 + 30) = *(_DWORD *)(v4 + 96);
  *((_QWORD *)v8 + 14) = v12;
  v13 = *(_OWORD *)(v4 + 120);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(v4 + 104);
  *((_OWORD *)v8 + 9) = v13;
  v14 = *(_OWORD *)(v4 + 152);
  v15 = *(_OWORD *)(v4 + 168);
  v16 = *(_OWORD *)(v4 + 184);
  *((_QWORD *)v8 + 28) = *(_QWORD *)(v4 + 200);
  *((_OWORD *)v8 + 12) = v15;
  *((_OWORD *)v8 + 13) = v16;
  *((_OWORD *)v8 + 11) = v14;
  result = *(__n128 *)(v4 + 136);
  *((__n128 *)v8 + 10) = result;
  *((_WORD *)v8 + 116) = v9;
  *((_QWORD *)v8 + 30) = v7;
  *((_QWORD *)v8 + 3) = &off_24C083B18;
  *((_QWORD *)v3 + 10) = v8 + 24;
  *((_QWORD *)v3 + 11) = v8;
  *v0 = sub_208089D68;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_208089F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE1ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823C168)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_208089FEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_20808A000()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F590);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F590))
    return &xmmword_25452F578;
  v2 = sub_20808A0DC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F578, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F588 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F578 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F578, &dword_207C77000);
  __cxa_guard_release(&qword_25452F590);
  return &xmmword_25452F578;
}

void sub_20808A0C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F590);
  _Unwind_Resume(a1);
}

std::string *sub_20808A0DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F5B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F5B0))
    return &stru_25452F598;
  sub_20808A1CC((uint64_t)__p);
  sub_2080887B0((char *)__p, &stru_25452F598);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F598, &dword_207C77000);
  __cxa_guard_release(&qword_25452F5B0);
  return &stru_25452F598;
}

void sub_20808A18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F5B0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F5B0);
  _Unwind_Resume(a1);
}

void sub_20808A1CC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F5D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F5D0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452F5B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F5B8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F5D0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F5F0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F5F0))
  {
    v5 = sub_207D49434(qword_25452F5B8, "<", 0);
    sub_207D49330(qword_25452F5B8, 0, v5, qword_25452F5D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F5D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F5F0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F610);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F610))
  {
    sub_208215C6C((uint64_t)qword_25452F5D8, (uint64_t)&xmmword_25452F5F8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F5F8, &dword_207C77000);
    __cxa_guard_release(&qword_25452F610);
  }
  if (byte_25452F60F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F5F8, *((unint64_t *)&xmmword_25452F5F8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F5F8;
    *(_QWORD *)(a1 + 16) = unk_25452F608;
  }
}

void sub_20808A368(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F610);
  _Unwind_Resume(a1);
}

void sub_20808A380(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F5F0);
  _Unwind_Resume(a1);
}

void sub_20808A398(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F5D0);
  _Unwind_Resume(a1);
}

void sub_20808A3B0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20808A3EC()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_20808A448()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = (char *)operator new(0x40uLL);
  v4 = sub_20808B0E4(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)v3 = *(_OWORD *)(v4 + 16);
  *((_OWORD *)v3 + 1) = v5;
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v4 + 48);
  v6 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v3 + 36) = v6;
  v7 = (char *)operator new(0x98uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_24C084190;
  v8 = *(_QWORD *)(v4 + 52);
  v9 = *(_WORD *)(v4 + 112);
  v10 = *(_OWORD *)(v4 + 16);
  *((_QWORD *)v7 + 4) = &off_24C0839B0;
  *(_OWORD *)(v7 + 40) = v10;
  v11 = *(_OWORD *)(v4 + 32);
  *((_DWORD *)v7 + 18) = *(_DWORD *)(v4 + 48);
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 76) = v8;
  *(_OWORD *)(v7 + 84) = *(_OWORD *)(v4 + 60);
  result = *(__n128 *)(v4 + 76);
  v13 = *(_OWORD *)(v4 + 92);
  *((_DWORD *)v7 + 33) = *(_DWORD *)(v4 + 108);
  *(_OWORD *)(v7 + 116) = v13;
  *(__n128 *)(v7 + 100) = result;
  *((_WORD *)v7 + 68) = v9;
  *((_QWORD *)v7 + 18) = v6;
  *((_QWORD *)v7 + 3) = &off_24C083A68;
  *((_QWORD *)v3 + 6) = v7 + 24;
  *((_QWORD *)v3 + 7) = v7;
  *v0 = sub_20808A3B0;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_20808A528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIfLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823C240)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20808A5E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__int128 *sub_20808A5F4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F630);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F630))
    return &xmmword_25452F618;
  v2 = sub_20808A6D0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452F618, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452F628 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452F618 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F618, &dword_207C77000);
  __cxa_guard_release(&qword_25452F630);
  return &xmmword_25452F618;
}

void sub_20808A6B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F630);
  _Unwind_Resume(a1);
}

std::string *sub_20808A6D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452F650);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452F650))
    return &stru_25452F638;
  sub_20808A7C0((uint64_t)__p);
  sub_208088EA0((char *)__p, &stru_25452F638);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452F638, &dword_207C77000);
  __cxa_guard_release(&qword_25452F650);
  return &stru_25452F638;
}

void sub_20808A780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452F650);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452F650);
  _Unwind_Resume(a1);
}

void sub_20808A7C0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452F670);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452F670))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::HeikkilaCamera<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_25452F658);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F658, &dword_207C77000);
    __cxa_guard_release(&qword_25452F670);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452F690);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452F690))
  {
    v5 = sub_207D49434(qword_25452F658, "<", 0);
    sub_207D49330(qword_25452F658, 0, v5, qword_25452F678);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452F678, &dword_207C77000);
    __cxa_guard_release(&qword_25452F690);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452F6B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452F6B0))
  {
    sub_208215C6C((uint64_t)qword_25452F678, (uint64_t)&xmmword_25452F698);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452F698, &dword_207C77000);
    __cxa_guard_release(&qword_25452F6B0);
  }
  if (byte_25452F6AF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452F698, *((unint64_t *)&xmmword_25452F698 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452F698;
    *(_QWORD *)(a1 + 16) = unk_25452F6A8;
  }
}

void sub_20808A95C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F6B0);
  _Unwind_Resume(a1);
}

void sub_20808A974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F690);
  _Unwind_Resume(a1);
}

void sub_20808A98C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452F670);
  _Unwind_Resume(a1);
}

void sub_20808A9A4(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20808A9E4()
{
  _QWORD *v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;

  v1 = (_QWORD *)v0[1];
  v2 = (std::__shared_weak_count *)v1[11];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(v1);
  result = 0;
  *v0 = 0;
  return result;
}

__n128 sub_20808AA44()
{
  void (**v0)(int);
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = operator new(0x60uLL);
  v4 = sub_20808B20C(v2);
  v5 = *(_OWORD *)(v4 + 32);
  *v3 = *(_OWORD *)(v4 + 16);
  v3[1] = v5;
  v6 = *(_OWORD *)(v4 + 64);
  v3[2] = *(_OWORD *)(v4 + 48);
  v3[3] = v6;
  v7 = *(_QWORD *)(v4 + 216);
  *((_QWORD *)v3 + 8) = *(_QWORD *)(v4 + 80);
  *((_QWORD *)v3 + 9) = v7;
  v8 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = off_24C084230;
  v9 = *(_WORD *)(v4 + 208);
  *((_QWORD *)v8 + 4) = &off_24C083B70;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v4 + 32);
  v10 = *(_OWORD *)(v4 + 48);
  v11 = *(_OWORD *)(v4 + 64);
  *((_QWORD *)v8 + 13) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  v12 = *(_QWORD *)(v4 + 88);
  *((_DWORD *)v8 + 30) = *(_DWORD *)(v4 + 96);
  *((_QWORD *)v8 + 14) = v12;
  v13 = *(_OWORD *)(v4 + 120);
  *((_OWORD *)v8 + 8) = *(_OWORD *)(v4 + 104);
  *((_OWORD *)v8 + 9) = v13;
  v14 = *(_OWORD *)(v4 + 152);
  v15 = *(_OWORD *)(v4 + 168);
  v16 = *(_OWORD *)(v4 + 184);
  *((_QWORD *)v8 + 28) = *(_QWORD *)(v4 + 200);
  *((_OWORD *)v8 + 12) = v15;
  *((_OWORD *)v8 + 13) = v16;
  *((_OWORD *)v8 + 11) = v14;
  result = *(__n128 *)(v4 + 136);
  *((__n128 *)v8 + 10) = result;
  *((_WORD *)v8 + 116) = v9;
  *((_QWORD *)v8 + 30) = v7;
  *((_QWORD *)v8 + 3) = &off_24C083C28;
  *((_QWORD *)v3 + 10) = v8 + 24;
  *((_QWORD *)v3 + 11) = v8;
  *v0 = sub_20808A9A4;
  v0[1] = (void (*)(int))v3;
  return result;
}

uint64_t sub_20808AB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE"
      && (((v6 & (unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE")
       || strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5camio20HeikkilaCameraSampleIdLNS0_3cam11PixelOriginE0ELj2EEE" & 0x7FFFFFFFFFFFFFFFLL))))
    {
      return 0;
    }
  }
  else if (a5 != &unk_20823C318)
  {
    return 0;
  }
  return *(_QWORD *)(v5 + 8);
}

void sub_20808AC28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20808AC3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0838B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808AC4C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0838B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808AC6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808AC7C(_QWORD *result)
{
  *result = &off_24C083C80;
  return result;
}

uint64_t sub_20808AC90()
{
  return 1;
}

uint64_t sub_20808AC98()
{
  return 1;
}

uint64_t sub_20808ACA0()
{
  return 11;
}

uint64_t sub_20808ACA8(uint64_t a1)
{
  return a1 + 88;
}

_QWORD *sub_20808ACB0(_QWORD *result)
{
  *result = &off_24C083C80;
  return result;
}

uint64_t sub_20808ACC4()
{
  return 0;
}

uint64_t sub_20808ACD4()
{
  return 1;
}

uint64_t sub_20808ACDC()
{
  return 11;
}

void sub_20808ACE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C083680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808ACF4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C083680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808AD14(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808AD24(_QWORD *result)
{
  *result = &off_24C083E40;
  return result;
}

uint64_t sub_20808AD38()
{
  return 1;
}

uint64_t sub_20808AD40()
{
  return 1;
}

uint64_t sub_20808AD48()
{
  return 12;
}

uint64_t sub_20808AD50(uint64_t a1)
{
  return a1 + 152;
}

_QWORD *sub_20808AD58(_QWORD *result)
{
  *result = &off_24C083E40;
  return result;
}

uint64_t sub_20808AD74()
{
  return 1;
}

uint64_t sub_20808AD7C()
{
  return 12;
}

void sub_20808AD84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0836D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808AD94(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0836D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808ADB4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808ADC4(_QWORD *result)
{
  *result = &off_24C083D90;
  return result;
}

uint64_t sub_20808ADD8()
{
  return 0;
}

uint64_t sub_20808ADE0()
{
  return 1;
}

uint64_t sub_20808ADE8()
{
  return 11;
}

uint64_t sub_20808ADF0(uint64_t a1)
{
  return a1 + 88;
}

_QWORD *sub_20808ADF8(_QWORD *result)
{
  *result = &off_24C083D90;
  return result;
}

void sub_20808AE0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C083720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808AE1C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C083720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808AE3C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808AE4C(_QWORD *result)
{
  *result = &off_24C083F50;
  return result;
}

uint64_t sub_20808AE60()
{
  return 0;
}

uint64_t sub_20808AE68()
{
  return 1;
}

uint64_t sub_20808AE70()
{
  return 12;
}

uint64_t sub_20808AE78(uint64_t a1)
{
  return a1 + 152;
}

_QWORD *sub_20808AE80(_QWORD *result)
{
  *result = &off_24C083F50;
  return result;
}

void sub_20808AE94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C083770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808AEA4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C083770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808AEC4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808AED4(_QWORD *result)
{
  *result = &off_24C083900;
  return result;
}

uint64_t sub_20808AEE8()
{
  return 1;
}

uint64_t sub_20808AEF0()
{
  return 2;
}

uint64_t sub_20808AEF8()
{
  return 11;
}

uint64_t sub_20808AF00(uint64_t a1)
{
  return a1 + 120;
}

_QWORD *sub_20808AF08(_QWORD *result)
{
  *result = &off_24C083900;
  return result;
}

uint64_t sub_20808AF24()
{
  return 2;
}

uint64_t sub_20808AF2C()
{
  return 11;
}

void sub_20808AF34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0837C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808AF44(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0837C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808AF64(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808AF74(_QWORD *result)
{
  *result = &off_24C083AC0;
  return result;
}

uint64_t sub_20808AF88()
{
  return 1;
}

uint64_t sub_20808AF90()
{
  return 2;
}

uint64_t sub_20808AF98()
{
  return 12;
}

uint64_t sub_20808AFA0(uint64_t a1)
{
  return a1 + 216;
}

_QWORD *sub_20808AFA8(_QWORD *result)
{
  *result = &off_24C083AC0;
  return result;
}

uint64_t sub_20808AFC4()
{
  return 2;
}

uint64_t sub_20808AFCC()
{
  return 12;
}

void sub_20808AFD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C083810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808AFE4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C083810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B004(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808B014(_QWORD *result)
{
  *result = &off_24C083A10;
  return result;
}

uint64_t sub_20808B028()
{
  return 0;
}

uint64_t sub_20808B030()
{
  return 2;
}

uint64_t sub_20808B038()
{
  return 11;
}

uint64_t sub_20808B040(uint64_t a1)
{
  return a1 + 120;
}

_QWORD *sub_20808B048(_QWORD *result)
{
  *result = &off_24C083A10;
  return result;
}

void sub_20808B05C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C083860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B06C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C083860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B08C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20808B09C(_QWORD *result)
{
  *result = &off_24C083BD0;
  return result;
}

uint64_t sub_20808B0B0()
{
  return 0;
}

uint64_t sub_20808B0B8()
{
  return 2;
}

uint64_t sub_20808B0C0()
{
  return 12;
}

uint64_t sub_20808B0C8(uint64_t a1)
{
  return a1 + 216;
}

_QWORD *sub_20808B0D0(_QWORD *result)
{
  *result = &off_24C083BD0;
  return result;
}

uint64_t sub_20808B0E4(uint64_t a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(float *)(a1 + 24);
  v3 = *(float *)(a1 + 28);
  v4 = *(float *)(a1 + 32);
  v5 = v2 == 0.0;
  if (v3 != 0.0)
    v5 = 0;
  if (v4 != 0.0)
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 36);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(float32x2_t *)a1;
  v9 = *(float32x2_t *)(a1 + 8);
  __asm { FMOV            V5.2S, #1.0 }
  v15 = vdiv_f32(_D5, *(float32x2_t *)a1);
  v16 = vzip1_s32(*(int32x2_t *)a1, (int32x2_t)v9);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  *(int8x16_t *)(v7 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)a1, (int32x2_t)v9), 0x20uLL), v17);
  *(_QWORD *)(v7 + 32) = v1;
  *(float *)(v7 + 40) = v2;
  *(float *)(v7 + 44) = v3;
  *(float *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 52) = 0xA3727C5ACLL;
  *(float32x2_t *)(v7 + 60) = v15;
  *(float32x2_t *)(v7 + 68) = vmul_f32(v15, vneg_f32(v9));
  *(_DWORD *)(v7 + 76) = v8.i32[0];
  *(_QWORD *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 88) = 0;
  *(_DWORD *)(v7 + 92) = v8.i32[1];
  *(_DWORD *)(v7 + 96) = 0;
  *(float32x2_t *)(v7 + 100) = v9;
  *(_DWORD *)(v7 + 108) = 1065353216;
  *(_WORD *)(v7 + 112) = v5 | ((v4 == 0.0) << 8);
  *(_QWORD *)(v7 + 120) = v6;
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_20808B1A4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20808B20C(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v5 = *(_OWORD *)(a1 + 32);
  v6 = *(double *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v8 = *(double *)(a1 + 64);
  v9 = v6 == 0.0;
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  if (v7 != 0.0)
    v9 = 0;
  *(double *)(v11 + 16) = v1;
  *(double *)(v11 + 24) = v2;
  *(double *)(v11 + 32) = v3;
  *(double *)(v11 + 40) = v4;
  *(_OWORD *)(v11 + 48) = v5;
  *(double *)(v11 + 64) = v6;
  *(double *)(v11 + 72) = v7;
  *(_QWORD *)(v11 + 88) = 0x3EE4F8B588E368F1;
  *(_DWORD *)(v11 + 96) = 10;
  *(double *)(v11 + 80) = v8;
  if (v8 != 0.0)
    v9 = 0;
  *(double *)(v11 + 104) = 1.0 / v1;
  *(double *)(v11 + 112) = 1.0 / v2;
  *(double *)(v11 + 120) = -(v3 * (1.0 / v1));
  *(double *)(v11 + 128) = -(v4 * (1.0 / v2));
  *(double *)(v11 + 136) = v1;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 144) = 0;
  *(double *)(v11 + 168) = v2;
  *(_QWORD *)(v11 + 176) = 0;
  *(double *)(v11 + 184) = v3;
  *(double *)(v11 + 192) = v4;
  *(_QWORD *)(v11 + 200) = 0x3FF0000000000000;
  *(_WORD *)(v11 + 208) = v9 | ((v8 == 0.0) << 8);
  *(_QWORD *)(v11 + 216) = v10;
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_20808B304(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 120);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_24C084190;
  v6 = *(_QWORD *)(a2 + 52);
  v7 = *(_WORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  *((_QWORD *)v5 + 4) = &off_24C0839B0;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 56) = v9;
  *((_DWORD *)v5 + 18) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 76) = v6;
  *(_OWORD *)(v5 + 84) = *(_OWORD *)(a2 + 60);
  v10 = *(_OWORD *)(a2 + 76);
  v11 = *(_OWORD *)(a2 + 92);
  *((_DWORD *)v5 + 33) = *(_DWORD *)(a2 + 108);
  *(_OWORD *)(v5 + 116) = v11;
  *(_OWORD *)(v5 + 100) = v10;
  *((_WORD *)v5 + 68) = v7;
  *((_QWORD *)v5 + 18) = v8;
  *(_QWORD *)(a1 + 56) = v5;
  *((_QWORD *)v5 + 3) = &off_24C083A68;
  *(_QWORD *)(a1 + 48) = v5 + 24;
  return a1;
}

uint64_t sub_20808B3D4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 216);
  v6 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C0841E0;
  v7 = *(_WORD *)(a2 + 208);
  v8 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v6 + 4) = &off_24C083B70;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 30) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v6 + 13) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v6 + 14) = v11;
  v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((_QWORD *)v6 + 28) = *(_QWORD *)(a2 + 200);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((_QWORD *)v6 + 30) = v8;
  *(_QWORD *)(a1 + 88) = v6;
  *((_QWORD *)v6 + 3) = &off_24C083B18;
  *(_QWORD *)(a1 + 80) = v6 + 24;
  return a1;
}

uint64_t sub_20808B4BC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  __int16 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 216);
  v6 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_24C084230;
  v7 = *(_WORD *)(a2 + 208);
  v8 = *(_QWORD *)(a2 + 216);
  *((_QWORD *)v6 + 4) = &off_24C083B70;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 56) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 88) = v10;
  *((_DWORD *)v6 + 30) = *(_DWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)v6 + 13) = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v6 + 14) = v11;
  v12 = *(_OWORD *)(a2 + 120);
  *((_OWORD *)v6 + 8) = *(_OWORD *)(a2 + 104);
  *((_OWORD *)v6 + 9) = v12;
  v13 = *(_OWORD *)(a2 + 152);
  v14 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v6 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v6 + 13) = v14;
  *((_QWORD *)v6 + 28) = *(_QWORD *)(a2 + 200);
  *((_OWORD *)v6 + 10) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v6 + 11) = v13;
  *((_WORD *)v6 + 116) = v7;
  *((_QWORD *)v6 + 30) = v8;
  *(_QWORD *)(a1 + 88) = v6;
  *((_QWORD *)v6 + 3) = &off_24C083C28;
  *(_QWORD *)(a1 + 80) = v6 + 24;
  return a1;
}

_QWORD *sub_20808B5A4(_QWORD *a1, uint64_t a2)
{
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  sub_207CBAB98(a1, (uint64_t)"{Model: ", 8);
  sub_207CBAB98(a1, (uint64_t)"{fx,fy: ", 8);
  v8 = *(_QWORD *)(a2 + 16);
  sub_20807A7B0(a1, (float *)&v8);
  sub_207CBAB98(a1, (uint64_t)", cx,cy: ", 9);
  v7 = *(_QWORD *)(a2 + 24);
  sub_20807A7B0(a1, (float *)&v7);
  sub_207CBAB98(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 48);
  sub_20808B9DC(a1, (float *)&v5);
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  sub_207CBAB98(a1, (uint64_t)", Size: ", 8);
  sub_20808BCE0(a1, (unsigned int *)(a2 + 120));
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_20808B6B0(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  sub_207CBAB98(a1, (uint64_t)"{Model: ", 8);
  sub_207CBAB98(a1, (uint64_t)"{fx,fy: ", 8);
  v9 = *(_OWORD *)(a2 + 16);
  sub_20807A8DC(a1, (double *)&v9);
  sub_207CBAB98(a1, (uint64_t)", cx,cy: ", 9);
  v8 = *(_OWORD *)(a2 + 32);
  sub_20807A8DC(a1, (double *)&v8);
  sub_207CBAB98(a1, (uint64_t)", k1,k2,p1,p2,k3: ", 18);
  v4 = *(_OWORD *)(a2 + 64);
  v6[0] = *(_OWORD *)(a2 + 48);
  v6[1] = v4;
  v7 = *(_QWORD *)(a2 + 80);
  sub_20808BE0C(a1, (double *)v6);
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  sub_207CBAB98(a1, (uint64_t)", Size: ", 8);
  sub_20808BCE0(a1, (unsigned int *)(a2 + 216));
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_20808B7BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B7CC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B7EC(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083900;
  return result;
}

void sub_20808B800(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B810(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B830(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083A10;
  return result;
}

void sub_20808B844(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0840A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B854(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0840A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B874(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083AC0;
  return result;
}

void sub_20808B888(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0840F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B898(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0840F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B8B8(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083BD0;
  return result;
}

void sub_20808B8CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B8DC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B8FC(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083900;
  return result;
}

void sub_20808B910(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B920(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B940(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083A10;
  return result;
}

void sub_20808B954(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0841E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B964(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0841E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B984(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083AC0;
  return result;
}

void sub_20808B998(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808B9A8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808B9C8(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083BD0;
  return result;
}

_QWORD *sub_20808B9DC(_QWORD *a1, float *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20808BB08((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0842A0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C084270[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20808BAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20808BAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20808BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20808BB08(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24C084288[v3])(&v17);
  sub_207E36388((uint64_t)&v12, a2, a3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v6])(&v17, a2);
  sub_207E36388((uint64_t)&v12, a2, a3 + 1);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v7])(&v17, a2);
  sub_207E36388((uint64_t)&v12, a2, a3 + 2);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v8])(&v17, a2);
  sub_207E36388((uint64_t)&v12, a2, a3 + 3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v9])(&v17, a2);
  sub_207E36388((uint64_t)&v12, a2, a3 + 4);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_8:
    sub_207CA9F48();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C084288[v10])(&v17, a2);
}

_QWORD *sub_20808BCE0(_QWORD *a1, unsigned int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_207E368AC((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0842A0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C084270[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20808BDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20808BDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20808BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20808BE0C(_QWORD *a1, double *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20808BF38((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_207CA9F48();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0842A0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C084270[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_207CBAB98(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20808BEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20808BF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20808BF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20808BF38(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = "{";
  v14 = a2;
  v15 = "{";
  v16 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **))off_24C084288[v3])(&v17);
  sub_207DF6804((uint64_t)&v12, a2, a3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v6])(&v17, a2);
  sub_207DF6804((uint64_t)&v12, a2, a3 + 1);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v7])(&v17, a2);
  sub_207DF6804((uint64_t)&v12, a2, a3 + 2);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v8])(&v17, a2);
  sub_207DF6804((uint64_t)&v12, a2, a3 + 3);
  v12 = a2;
  v13 = ",";
  v14 = a2;
  v15 = ",";
  v16 = ",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_8;
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C084288[v9])(&v17, a2);
  sub_207DF6804((uint64_t)&v12, a2, a3 + 4);
  v12 = a2;
  v13 = "}";
  v14 = a2;
  v15 = "}";
  v16 = "}";
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_8:
    sub_207CA9F48();
  v17 = &v12;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C084288[v10])(&v17, a2);
}

uint64_t sub_20808C110(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_20808C178(_QWORD *a1, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v12;
  int32x2_t v13;
  int8x16_t v14;
  float32x2_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vdiv_f32(_D2, *a2);
  v13 = vzip1_s32((int32x2_t)*a2, (int32x2_t)v6);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(*(_QWORD *)&v4 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*a2, (int32x2_t)v6), 0x20uLL), v14);
  *(float32x2_t *)(*(_QWORD *)&v4 + 32) = v12;
  *(float32x2_t *)(*(_QWORD *)&v4 + 40) = vmul_f32(v12, vneg_f32(v6));
  *(_DWORD *)(*(_QWORD *)&v4 + 48) = v5.i32[0];
  *(_QWORD *)(*(_QWORD *)&v4 + 56) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 52) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 64) = v5.i32[1];
  *(_DWORD *)(*(_QWORD *)&v4 + 68) = 0;
  *(float32x2_t *)(*(_QWORD *)&v4 + 72) = v6;
  *(_DWORD *)(*(_QWORD *)&v4 + 80) = 1065353216;
  *(float32x2_t *)(*(_QWORD *)&v4 + 88) = v3;
  v15 = a2[3];
  *a1 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
  a1[1] = *(_QWORD *)(*(_QWORD *)&v15 + 24);
  a1[2] = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v16 = (char *)operator new(0x78uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = off_24C084408;
  v17 = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v18 = *(_OWORD *)(*(_QWORD *)&v15 + 16);
  *((_QWORD *)v16 + 4) = &off_24C083D30;
  *(_OWORD *)(v16 + 40) = v18;
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(*(_QWORD *)&v15 + 32);
  v19 = *(_DWORD *)(*(_QWORD *)&v15 + 80);
  v20 = *(_OWORD *)(*(_QWORD *)&v15 + 64);
  *(_OWORD *)(v16 + 72) = *(_OWORD *)(*(_QWORD *)&v15 + 48);
  *((_DWORD *)v16 + 26) = v19;
  *(_OWORD *)(v16 + 88) = v20;
  *((_QWORD *)v16 + 14) = v17;
  a1[4] = v16;
  *((_QWORD *)v16 + 3) = &off_24C083CD8;
  a1[3] = v16 + 24;
  return a1;
}

_QWORD *sub_20808C27C(_QWORD *a1, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v12;
  int32x2_t v13;
  int8x16_t v14;
  float32x2_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;

  v3 = a2[2];
  v4 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  __asm { FMOV            V2.2S, #1.0 }
  v12 = vdiv_f32(_D2, *a2);
  v13 = vzip1_s32((int32x2_t)*a2, (int32x2_t)v6);
  v14.i64[0] = v13.u32[0];
  v14.i64[1] = v13.u32[1];
  *(int8x16_t *)(*(_QWORD *)&v4 + 16) = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)*a2, (int32x2_t)v6), 0x20uLL), v14);
  *(float32x2_t *)(*(_QWORD *)&v4 + 32) = v12;
  *(float32x2_t *)(*(_QWORD *)&v4 + 40) = vmul_f32(v12, vneg_f32(v6));
  *(_DWORD *)(*(_QWORD *)&v4 + 48) = v5.i32[0];
  *(_QWORD *)(*(_QWORD *)&v4 + 56) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 52) = 0;
  *(_DWORD *)(*(_QWORD *)&v4 + 64) = v5.i32[1];
  *(_DWORD *)(*(_QWORD *)&v4 + 68) = 0;
  *(float32x2_t *)(*(_QWORD *)&v4 + 72) = v6;
  *(_DWORD *)(*(_QWORD *)&v4 + 80) = 1065353216;
  *(float32x2_t *)(*(_QWORD *)&v4 + 88) = v3;
  v15 = a2[3];
  *a1 = *(_QWORD *)(*(_QWORD *)&v15 + 16);
  a1[1] = *(_QWORD *)(*(_QWORD *)&v15 + 24);
  a1[2] = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v16 = (char *)operator new(0x78uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = off_24C084458;
  v17 = *(_QWORD *)(*(_QWORD *)&v15 + 88);
  v18 = *(_OWORD *)(*(_QWORD *)&v15 + 16);
  *((_QWORD *)v16 + 4) = &off_24C083D30;
  *(_OWORD *)(v16 + 40) = v18;
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(*(_QWORD *)&v15 + 32);
  v19 = *(_DWORD *)(*(_QWORD *)&v15 + 80);
  v20 = *(_OWORD *)(*(_QWORD *)&v15 + 64);
  *(_OWORD *)(v16 + 72) = *(_OWORD *)(*(_QWORD *)&v15 + 48);
  *((_DWORD *)v16 + 26) = v19;
  *(_OWORD *)(v16 + 88) = v20;
  *((_QWORD *)v16 + 14) = v17;
  a1[4] = v16;
  *((_QWORD *)v16 + 3) = &off_24C083DE8;
  a1[3] = v16 + 24;
  return a1;
}

uint64_t sub_20808C380(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v7 = 1.0 / *(double *)a2;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 40) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 80) = v3;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(double *)(v9 + 112) = v4;
  *(_QWORD *)(v9 + 120) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(_QWORD *)(v9 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 152) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 152);
  v11 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = off_24C0844A8;
  v12 = *(_QWORD *)(v10 + 152);
  *((_QWORD *)v11 + 4) = &off_24C083EF0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 96);
  v15 = *(_OWORD *)(v10 + 112);
  v16 = *(_QWORD *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 120) = v14;
  *((_QWORD *)v11 + 21) = v16;
  *((_QWORD *)v11 + 22) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *((_QWORD *)v11 + 3) = &off_24C083E98;
  *(_QWORD *)(a1 + 40) = v11 + 24;
  return a1;
}

uint64_t sub_20808C488(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v3 = *(double *)a2;
  v4 = *(double *)(a2 + 8);
  v5 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v7 = 1.0 / *(double *)a2;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)a2;
  *(double *)(v9 + 24) = v4;
  *(double *)(v9 + 32) = v5;
  *(double *)(v9 + 40) = v6;
  *(double *)(v9 + 48) = v7;
  *(double *)(v9 + 56) = 1.0 / v4;
  *(double *)(v9 + 64) = -(v5 * v7);
  *(double *)(v9 + 72) = -(v6 * (1.0 / v4));
  *(double *)(v9 + 80) = v3;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(double *)(v9 + 112) = v4;
  *(_QWORD *)(v9 + 120) = 0;
  *(double *)(v9 + 128) = v5;
  *(double *)(v9 + 136) = v6;
  *(_QWORD *)(v9 + 144) = 0x3FF0000000000000;
  *(_QWORD *)(v9 + 152) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 152);
  v11 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = off_24C0844F8;
  v12 = *(_QWORD *)(v10 + 152);
  *((_QWORD *)v11 + 4) = &off_24C083EF0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v11 + 88) = v13;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v10 + 80);
  v14 = *(_OWORD *)(v10 + 96);
  v15 = *(_OWORD *)(v10 + 112);
  v16 = *(_QWORD *)(v10 + 144);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v11 + 136) = v15;
  *(_OWORD *)(v11 + 120) = v14;
  *((_QWORD *)v11 + 21) = v16;
  *((_QWORD *)v11 + 22) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *((_QWORD *)v11 + 3) = &off_24C083FA8;
  *(_QWORD *)(a1 + 40) = v11 + 24;
  return a1;
}

_QWORD *sub_20808C590(_QWORD *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  sub_207CBAB98(a1, (uint64_t)"{Model: ", 8);
  sub_207CBAB98(a1, (uint64_t)"{fx,fy: ", 8);
  v6 = *(_QWORD *)(a2 + 16);
  sub_20807A7B0(a1, (float *)&v6);
  sub_207CBAB98(a1, (uint64_t)", cx,cy: ", 9);
  v5 = *(_QWORD *)(a2 + 24);
  sub_20807A7B0(a1, (float *)&v5);
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  sub_207CBAB98(a1, (uint64_t)", Size: ", 8);
  sub_20808BCE0(a1, (unsigned int *)(a2 + 88));
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  return a1;
}

_QWORD *sub_20808C66C(_QWORD *a1, uint64_t a2)
{
  __int128 v5;
  __int128 v6;

  sub_207CBAB98(a1, (uint64_t)"{Model: ", 8);
  sub_207CBAB98(a1, (uint64_t)"{fx,fy: ", 8);
  v6 = *(_OWORD *)(a2 + 16);
  sub_20807A8DC(a1, (double *)&v6);
  sub_207CBAB98(a1, (uint64_t)", cx,cy: ", 9);
  v5 = *(_OWORD *)(a2 + 32);
  sub_20807A8DC(a1, (double *)&v5);
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  sub_207CBAB98(a1, (uint64_t)", Size: ", 8);
  sub_20808BCE0(a1, (unsigned int *)(a2 + 152));
  sub_207CBAB98(a1, (uint64_t)"}", 1);
  return a1;
}

void sub_20808C748(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0842C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C758(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0842C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C778(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083C80;
  return result;
}

void sub_20808C78C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C79C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C7BC(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083D90;
  return result;
}

void sub_20808C7D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C7E0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C800(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083E40;
  return result;
}

void sub_20808C814(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0843B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C824(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0843B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C844(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083F50;
  return result;
}

void sub_20808C858(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C868(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C888(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083C80;
  return result;
}

void sub_20808C89C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C8AC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C8CC(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083D90;
  return result;
}

void sub_20808C8E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0844A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C8F0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0844A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C910(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083E40;
  return result;
}

void sub_20808C924(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0844F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20808C934(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0844F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20808C954(uint64_t result)
{
  *(_QWORD *)(result + 24) = &off_24C083F50;
  return result;
}

_QWORD *sub_20808C968(_QWORD *a1)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  int32x4_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (char *)operator new(0x78uLL);
  v3 = (std::__shared_weak_count *)v2;
  *((_QWORD *)v2 + 1) = 0;
  v4 = (unint64_t *)(v2 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = off_24C0838B0;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *((_QWORD *)v2 + 4) = &off_24C083D30;
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v2 + 56) = v5;
  *(int32x4_t *)(v2 + 72) = v5;
  *(int32x4_t *)(v2 + 88) = v5;
  *((_DWORD *)v2 + 26) = 2143289344;
  *((_QWORD *)v2 + 3) = &off_24C083CD8;
  *((_QWORD *)v2 + 14) = 0;
  *a1 = &off_24C084548;
  a1[1] = v2 + 24;
  a1[2] = v2;
  do
    v6 = __ldxr(v4);
  while (__stxr(v6 + 1, v4));
  do
    v7 = __ldaxr(v4);
  while (__stlxr(v7 - 1, v4));
  if (!v7)
  {
    (*(void (**)(char *))(*(_QWORD *)v2 + 16))(v2);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

_QWORD *sub_20808CA44(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C084548;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20808CAB8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_24C084548;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

BOOL sub_20808CB2C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v11;
  const void *v13;
  double *v14;
  double *v15;
  const void *v16;
  double *v17;
  const void *v19;
  float *v20;
  float *v21;
  const void *v22;
  float *v23;
  BOOL v24;
  int v25;
  const void *v27;
  double *v28;
  const void *v29;
  __int128 *v30;
  const void *v31;
  float *v32;
  const void *v33;
  _BOOL4 v35;
  unint64_t v37;
  char v38;
  const void *v39;
  float *v40;
  float *v41;
  const void *v42;
  float *v43;
  BOOL v44;
  int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  __int128 *v50;
  __int128 *v51;
  __int128 *v52;
  __int128 *v53;
  BOOL v54;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if (v4 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (v5 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8)))
    return 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if (v6 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8)))
    return 0;
  v54 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  v11 = v7 == 1 && v8 == 1;
  if (v11 && v9 == 11)
  {
    v19 = *(const void **)(a1 + 8);
    if (!v19)
      return v54;
    v20 = (float *)__dynamic_cast(v19, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083D08, 0);
    if (!v20)
      return v54;
    v21 = v20;
    v22 = *(const void **)(a2 + 8);
    if (!v22
      || (v23 = (float *)__dynamic_cast(v22, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083D08, 0)) == 0)
    {
      v50 = sub_208087804();
      sub_20808D430(a2, (const char *)v50, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12)
    v11 = 0;
  if (v11)
  {
    v13 = *(const void **)(a1 + 8);
    if (!v13)
      return v54;
    v14 = (double *)__dynamic_cast(v13, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083EC8, 0);
    if (!v14)
      return v54;
    v15 = v14;
    v16 = *(const void **)(a2 + 8);
    if (!v16
      || (v17 = (double *)__dynamic_cast(v16, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083EC8, 0)) == 0)
    {
      v51 = sub_208087EF4();
      sub_20808D430(a2, (const char *)v51, (uint64_t)"trying to cast camera");
    }
LABEL_21:
    if (v15[2] == v17[2]
      && v15[3] == v17[3]
      && v15[4] == v17[4]
      && v15[5] == v17[5]
      && *((_DWORD *)v15 + 38) == *((_DWORD *)v17 + 38))
    {
      return *((_DWORD *)v15 + 39) == *((_DWORD *)v17 + 39);
    }
    return 0;
  }
  if (v7)
    v24 = 0;
  else
    v24 = v8 == 1;
  v25 = v24;
  if (v25 == 1 && v9 == 11)
  {
    v31 = *(const void **)(a1 + 8);
    if (!v31)
      return v54;
    v32 = (float *)__dynamic_cast(v31, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083E18, 0);
    if (!v32)
      return v54;
    v21 = v32;
    v33 = *(const void **)(a2 + 8);
    if (!v33
      || (v23 = (float *)__dynamic_cast(v33, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083E18, 0)) == 0)
    {
      v52 = sub_2080885E4();
      sub_20808D430(a2, (const char *)v52, (uint64_t)"trying to cast camera");
    }
    if (v21[4] != v23[4]
      || v21[5] != v23[5]
      || v21[6] != v23[6]
      || v21[7] != v23[7]
      || *((_DWORD *)v21 + 22) != *((_DWORD *)v23 + 22))
    {
      return 0;
    }
    return *((_DWORD *)v21 + 23) == *((_DWORD *)v23 + 23);
  }
  if (v9 != 12)
    v25 = 0;
  if (v25 == 1)
  {
    v27 = *(const void **)(a1 + 8);
    if (!v27)
      return v54;
    v28 = (double *)__dynamic_cast(v27, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083FD8, 0);
    if (!v28)
      return v54;
    v15 = v28;
    v29 = *(const void **)(a2 + 8);
    if (!v29
      || (v17 = (double *)__dynamic_cast(v29, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083FD8, 0)) == 0)
    {
      v30 = sub_208088CD4();
      sub_20808D430(a2, (const char *)v30, (uint64_t)"trying to cast camera");
    }
    goto LABEL_21;
  }
  v35 = v7 == 1 && v8 == 2;
  if (!v35 || v9 != 11)
  {
    if (v9 != 12)
      v35 = 0;
    if (v35)
    {
      v37 = sub_20808E3A0(*(const void **)(a1 + 8));
      sub_20808E248(&v54, a2, v37, v38);
    }
    else
    {
      if (v7)
        v44 = 0;
      else
        v44 = v8 == 2;
      v45 = v44;
      if (v44 && v9 == 11)
      {
        v46 = sub_20808E550(*(const void **)(a1 + 8));
        sub_20808E3F8(&v54, a2, v46, v47);
      }
      else
      {
        if (v9 != 12)
          v45 = 0;
        if (v45 == 1)
        {
          v48 = sub_20808E700(*(const void **)(a1 + 8));
          sub_20808E5A8(&v54, a2, v48, v49);
        }
      }
    }
    return v54;
  }
  v39 = *(const void **)(a1 + 8);
  if (v39)
  {
    v40 = (float *)__dynamic_cast(v39, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083988, 0);
    if (v40)
    {
      v41 = v40;
      v42 = *(const void **)(a2 + 8);
      if (!v42
        || (v43 = (float *)__dynamic_cast(v42, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083988, 0)) == 0)
      {
        v53 = sub_2080893C4();
        sub_20808D430(a2, (const char *)v53, (uint64_t)"trying to cast camera");
      }
      if (v41[4] == v43[4]
        && v41[5] == v43[5]
        && v41[6] == v43[6]
        && v41[7] == v43[7]
        && v41[8] == v43[8]
        && v41[9] == v43[9]
        && v41[10] == v43[10]
        && v41[11] == v43[11]
        && v41[12] == v43[12]
        && v41[13] == v43[13]
        && *((_DWORD *)v41 + 14) == *((_DWORD *)v43 + 14)
        && *((_DWORD *)v41 + 30) == *((_DWORD *)v43 + 30))
      {
        return *((_DWORD *)v41 + 31) == *((_DWORD *)v43 + 31);
      }
      return 0;
    }
  }
  return v54;
}

uint64_t sub_20808D14C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20808D15C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20808D16C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20808D17C(char *__s, const char *a2, const char *a3, const char *a4, const char *a5, uint64_t a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  const char *v15;
  _DWORD *v16;
  const char *v17;
  const char *v18;
  _QWORD *v19;

  v13 = 0;
  sub_20805A898(v12, __s);
  v14 = (_QWORD **)v12;
  v15 = a2;
  v16 = v12;
  v17 = a2;
  v18 = a2;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C0845C0[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C0845D8[v13])(&v19, v12);
  if (*(_QWORD *)a4)
  {
    v14 = (_QWORD **)v12;
    v15 = a4;
    v16 = v12;
    v17 = a4;
    v18 = a4;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24C0845F0[v13])(&v19, v12);
      goto LABEL_8;
    }
LABEL_15:
    sub_207CA9F48();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_15;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C0845A8[v13])(&v19, v12);
LABEL_8:
  v14 = (_QWORD **)v12;
  v15 = a5;
  v16 = v12;
  v17 = a5;
  v18 = a5;
  if (v13 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24C0845D8[v13])(&v19, v12);
  sub_207E7E38C((uint64_t)&v14, (uint64_t)v12, a6);
  if (v13 == -1)
    sub_207CA9F48();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C084620[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C084590[v13])(&v14, v12);
  return result;
}

void sub_20808D3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808D3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808D3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808D3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808D3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808D408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808D41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20808D430(uint64_t a1, const char *a2, uint64_t a3)
{
  std::logic_error *exception;
  std::string v7;
  uint64_t v8;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  v8 = a3;
  sub_20808D17C("Invalid argument ", a2, " ", (const char *)&v8, " ", a1);
  std::logic_error::logic_error(exception, &v7);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
}

void sub_20808D4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
      goto LABEL_3;
  }
  else if (!v15)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_20808D4FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20808D510(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  _BOOL4 v8;
  const void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  std::string::size_type v15;
  std::string::value_type v16;
  std::string *v17;
  unsigned __int8 v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  std::string::size_type v24;
  std::string::value_type v25;
  std::string *v26;
  unsigned __int8 v27;
  BOOL v28;
  int v29;
  const void *v31;
  void *v32;
  int v33;
  unsigned __int8 *v34;
  std::string::size_type v35;
  std::string::value_type v36;
  std::string *v37;
  unsigned __int8 v38;
  const void *v39;
  void *v40;
  int v41;
  unsigned __int8 *v42;
  std::string::size_type v43;
  std::string::value_type v44;
  std::string *v45;
  unsigned __int8 v46;
  _BOOL4 v48;
  unint64_t v50;
  unsigned __int8 v51;
  const void *v52;
  void *v53;
  uint64_t v54;
  unsigned __int8 *v55;
  std::string::size_type v56;
  std::string *v57;
  unsigned __int8 v58;
  BOOL v59;
  int v60;
  unint64_t v62;
  unsigned __int8 v63;
  unint64_t v64;
  unsigned __int8 v65;
  const char *v66;
  unsigned int v67;
  const char *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  char v76;
  void *v77;
  std::string::size_type v78;
  unsigned __int8 v79;
  std::string v80;
  void *__p[2];
  char v82;
  int v83;
  char v84;
  _QWORD v85[2];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8));
  v8 = v4 == 1 && v5 == 1;
  if (v8 && v6 == 11)
  {
    v19 = *(const void **)(a2 + 8);
    if (!v19)
      goto LABEL_148;
    v20 = __dynamic_cast(v19, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083D08, 0);
    if (!v20)
      goto LABEL_148;
    v21 = (uint64_t)v20;
    sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
    sub_207CBAB98(a1, (uint64_t)"Center", 6);
    sub_207CBAB98(a1, (uint64_t)"Pinhole", 7);
    v76 = 11;
    v83 = 0;
    sub_20808EF14((uint64_t)__p, &v76);
    if (v83 == -1)
      sub_207CA9F48();
    v85[0] = &v84;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v83])(&v77, v85, __p);
    if (v83 != -1)
      ((void (*)(_QWORD *, void **))off_24C084590[v83])(v85, __p);
    v22 = (char)v79;
    v23 = (unsigned __int8 *)v77;
    if ((v79 & 0x80u) == 0)
      v24 = v79;
    else
      v24 = v78;
    memset(&v80, 0, sizeof(v80));
    std::string::reserve(&v80, v24);
    if (v22 >= 0)
      v23 = (unsigned __int8 *)&v77;
    for (; v24; --v24)
    {
      v25 = __toupper(*v23);
      std::string::push_back(&v80, v25);
      ++v23;
    }
    v26 = &v80;
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)v80.__r_.__value_.__r.__words[0];
    v27 = v26->__r_.__value_.__s.__data_[0];
    v82 = 1;
    LOWORD(__p[0]) = v27;
    sub_207CBAB98(a1, (uint64_t)__p, 1);
    if (v82 < 0)
      operator delete(__p[0]);
    goto LABEL_47;
  }
  if (v6 != 12)
    v8 = 0;
  if (v8)
  {
    v10 = *(const void **)(a2 + 8);
    if (v10)
    {
      v11 = __dynamic_cast(v10, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083EC8, 0);
      if (v11)
      {
        v12 = (uint64_t)v11;
        sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
        sub_207CBAB98(a1, (uint64_t)"Center", 6);
        sub_207CBAB98(a1, (uint64_t)"Pinhole", 7);
        v76 = 12;
        v83 = 0;
        sub_20808EF14((uint64_t)__p, &v76);
        if (v83 == -1)
          sub_207CA9F48();
        v85[0] = &v84;
        ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v83])(&v77, v85, __p);
        if (v83 != -1)
          ((void (*)(_QWORD *, void **))off_24C084590[v83])(v85, __p);
        v13 = (char)v79;
        v14 = (unsigned __int8 *)v77;
        if ((v79 & 0x80u) == 0)
          v15 = v79;
        else
          v15 = v78;
        memset(&v80, 0, sizeof(v80));
        std::string::reserve(&v80, v15);
        if (v13 >= 0)
          v14 = (unsigned __int8 *)&v77;
        for (; v15; --v15)
        {
          v16 = __toupper(*v14);
          std::string::push_back(&v80, v16);
          ++v14;
        }
        v17 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v17 = (std::string *)v80.__r_.__value_.__r.__words[0];
        v18 = v17->__r_.__value_.__s.__data_[0];
        v82 = 1;
        LOWORD(__p[0]) = v18;
        sub_207CBAB98(a1, (uint64_t)__p, 1);
        if (v82 < 0)
          operator delete(__p[0]);
LABEL_30:
        sub_207CBAB98(a1, (uint64_t)",", 1);
        sub_20808C66C(a1, v12);
        sub_207CBAB98(a1, (uint64_t)"}", 1);
        goto LABEL_48;
      }
    }
    goto LABEL_148;
  }
  if (v4)
    v28 = 0;
  else
    v28 = v5 == 1;
  v29 = v28;
  if (v29 == 1 && v6 == 11)
  {
    v39 = *(const void **)(a2 + 8);
    if (!v39)
      goto LABEL_148;
    v40 = __dynamic_cast(v39, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083E18, 0);
    if (!v40)
      goto LABEL_148;
    v21 = (uint64_t)v40;
    sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
    sub_207CBAB98(a1, (uint64_t)"Corner", 6);
    sub_207CBAB98(a1, (uint64_t)"Pinhole", 7);
    v76 = 11;
    v83 = 0;
    sub_20808EF14((uint64_t)__p, &v76);
    if (v83 == -1)
      sub_207CA9F48();
    v85[0] = &v84;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v83])(&v77, v85, __p);
    if (v83 != -1)
      ((void (*)(_QWORD *, void **))off_24C084590[v83])(v85, __p);
    v41 = (char)v79;
    v42 = (unsigned __int8 *)v77;
    if ((v79 & 0x80u) == 0)
      v43 = v79;
    else
      v43 = v78;
    memset(&v80, 0, sizeof(v80));
    std::string::reserve(&v80, v43);
    if (v41 >= 0)
      v42 = (unsigned __int8 *)&v77;
    for (; v43; --v43)
    {
      v44 = __toupper(*v42);
      std::string::push_back(&v80, v44);
      ++v42;
    }
    v45 = &v80;
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)v80.__r_.__value_.__r.__words[0];
    v46 = v45->__r_.__value_.__s.__data_[0];
    v82 = 1;
    LOWORD(__p[0]) = v46;
    sub_207CBAB98(a1, (uint64_t)__p, 1);
    if (v82 < 0)
      operator delete(__p[0]);
LABEL_47:
    sub_207CBAB98(a1, (uint64_t)",", 1);
    sub_20808C590(a1, v21);
    sub_207CBAB98(a1, (uint64_t)"}", 1);
    goto LABEL_48;
  }
  if (v6 != 12)
    v29 = 0;
  if (v29 == 1)
  {
    v31 = *(const void **)(a2 + 8);
    if (v31)
    {
      v32 = __dynamic_cast(v31, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083FD8, 0);
      if (v32)
      {
        v12 = (uint64_t)v32;
        sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
        sub_207CBAB98(a1, (uint64_t)"Corner", 6);
        sub_207CBAB98(a1, (uint64_t)"Pinhole", 7);
        v76 = 12;
        v83 = 0;
        sub_20808EF14((uint64_t)__p, &v76);
        if (v83 == -1)
          sub_207CA9F48();
        v85[0] = &v84;
        ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v83])(&v77, v85, __p);
        if (v83 != -1)
          ((void (*)(_QWORD *, void **))off_24C084590[v83])(v85, __p);
        v33 = (char)v79;
        v34 = (unsigned __int8 *)v77;
        if ((v79 & 0x80u) == 0)
          v35 = v79;
        else
          v35 = v78;
        memset(&v80, 0, sizeof(v80));
        std::string::reserve(&v80, v35);
        if (v33 >= 0)
          v34 = (unsigned __int8 *)&v77;
        for (; v35; --v35)
        {
          v36 = __toupper(*v34);
          std::string::push_back(&v80, v36);
          ++v34;
        }
        v37 = &v80;
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v37 = (std::string *)v80.__r_.__value_.__r.__words[0];
        v38 = v37->__r_.__value_.__s.__data_[0];
        v82 = 1;
        LOWORD(__p[0]) = v38;
        sub_207CBAB98(a1, (uint64_t)__p, 1);
        if (v82 < 0)
          operator delete(__p[0]);
        goto LABEL_30;
      }
    }
LABEL_148:
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8)) == 1)
      v66 = "Center";
    else
      v66 = "Corner";
    sub_207CBAB98(a1, (uint64_t)v66, 6);
    sub_207CBAB98(a1, (uint64_t)",", 1);
    v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
    sub_207CBAB98(a1, (uint64_t)(&off_24C084638)[2 * v67], (uint64_t)(&off_24C084638)[2 * v67 + 1]);
    sub_207CBAB98(a1, (uint64_t)",", 1);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 32))(*(_QWORD *)(a2 + 8)) == 11)
      v68 = "f32";
    else
      v68 = "f64";
    sub_207CBAB98(a1, (uint64_t)v68, 3);
    sub_207CBAB98(a1, (uint64_t)",", 1);
    v69 = *(void **)(a2 + 8);
    v70 = *(std::__shared_weak_count **)(a2 + 16);
    __p[0] = v69;
    __p[1] = v70;
    if (v70)
    {
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(p_shared_owners);
      while (__stxr(v72 + 1, p_shared_owners));
    }
    v77 = v69;
    sub_20808F19C((uint64_t)v85, &v80, &v77);
    sub_207CBAB98(v80.__r_.__value_.__l.__data_, (uint64_t)"}", 1);
    if (v70)
    {
      v73 = (unint64_t *)&v70->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    return a1;
  }
  v48 = v4 == 1 && v5 == 2;
  if (!v48 || v6 != 11)
  {
    if (v6 != 12)
      v48 = 0;
    if (v48)
    {
      v50 = sub_20808E3A0(*(const void **)(a2 + 8));
      if (sub_20808E758(a1, v50, v51))
        return a1;
    }
    else
    {
      if (v4)
        v59 = 0;
      else
        v59 = v5 == 2;
      v60 = v59;
      if (v60 == 1 && v6 == 11)
      {
        v64 = sub_20808E550(*(const void **)(a2 + 8));
        if (sub_20808E9EC(a1, v64, v65))
          return a1;
      }
      else
      {
        if (v6 != 12)
          v60 = 0;
        if (v60 == 1)
        {
          v62 = sub_20808E700(*(const void **)(a2 + 8));
          if (sub_20808EC80(a1, v62, v63))
            return a1;
        }
      }
    }
    goto LABEL_148;
  }
  v52 = *(const void **)(a2 + 8);
  if (!v52)
    goto LABEL_148;
  v53 = __dynamic_cast(v52, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083988, 0);
  if (!v53)
    goto LABEL_148;
  v54 = (uint64_t)v53;
  sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
  sub_207CBAB98(a1, (uint64_t)"Center", 6);
  sub_207CBAB98(a1, (uint64_t)"Heikkila", 8);
  v76 = 11;
  v83 = 0;
  sub_20808EF14((uint64_t)__p, &v76);
  if (v83 == -1)
    sub_207CA9F48();
  v85[0] = &v84;
  ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v83])(&v77, v85, __p);
  if (v83 != -1)
    ((void (*)(_QWORD *, void **))off_24C084590[v83])(v85, __p);
  if ((v79 & 0x80u) == 0)
    v55 = (unsigned __int8 *)&v77;
  else
    v55 = (unsigned __int8 *)v77;
  if ((v79 & 0x80u) == 0)
    v56 = v79;
  else
    v56 = v78;
  sub_208214458(v55, v56, &v80);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = &v80;
  else
    v57 = (std::string *)v80.__r_.__value_.__r.__words[0];
  v58 = v57->__r_.__value_.__s.__data_[0];
  v82 = 1;
  LOWORD(__p[0]) = v58;
  sub_207CBAB98(a1, (uint64_t)__p, 1);
  if (v82 < 0)
    operator delete(__p[0]);
  sub_207CBAB98(a1, (uint64_t)",", 1);
  sub_20808B5A4(a1, v54);
  sub_207CBAB98(a1, (uint64_t)"}", 1);
LABEL_48:
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((char)v79 < 0)
LABEL_82:
      operator delete(v77);
  }
  else if ((char)v79 < 0)
  {
    goto LABEL_82;
  }
  return a1;
}

void sub_20808E060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_20808E238(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

BOOL *sub_20808E248(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083B48, 0)) == 0)
    {
      v9 = sub_2080899B8();
      sub_20808D430(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_20808E3A0(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083B48, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_20808E3F8(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083A98, 0)) == 0)
    {
      v9 = sub_20808A000();
      sub_20808D430(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(float *)(a3 + 16) == *((float *)result + 4)
      && *(float *)(a3 + 20) == *((float *)result + 5)
      && *(float *)(a3 + 24) == *((float *)result + 6)
      && *(float *)(a3 + 28) == *((float *)result + 7)
      && *(float *)(a3 + 32) == *((float *)result + 8)
      && *(float *)(a3 + 36) == *((float *)result + 9)
      && *(float *)(a3 + 40) == *((float *)result + 10)
      && *(float *)(a3 + 44) == *((float *)result + 11)
      && *(float *)(a3 + 48) == *((float *)result + 12)
      && *(float *)(a3 + 52) == *((float *)result + 13)
      && *(_DWORD *)(a3 + 56) == *((_DWORD *)result + 14)
      && *(_DWORD *)(a3 + 120) == *((_DWORD *)result + 30)
      && *(_DWORD *)(a3 + 124) == *((_DWORD *)result + 31);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_20808E550(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083A98, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL *sub_20808E5A8(BOOL *result, uint64_t a2, uint64_t a3, char a4)
{
  BOOL *v5;
  const void *v6;
  BOOL v8;
  __int128 *v9;

  if (a4)
  {
    v5 = result;
    v6 = *(const void **)(a2 + 8);
    if (!v6
      || (result = (BOOL *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083C58, 0)) == 0)
    {
      v9 = sub_20808A5F4();
      sub_20808D430(a2, (const char *)v9, (uint64_t)"trying to cast camera");
    }
    v8 = *(double *)(a3 + 16) == *((double *)result + 2)
      && *(double *)(a3 + 24) == *((double *)result + 3)
      && *(double *)(a3 + 32) == *((double *)result + 4)
      && *(double *)(a3 + 40) == *((double *)result + 5)
      && *(double *)(a3 + 48) == *((double *)result + 6)
      && *(double *)(a3 + 56) == *((double *)result + 7)
      && *(double *)(a3 + 64) == *((double *)result + 8)
      && *(double *)(a3 + 72) == *((double *)result + 9)
      && *(double *)(a3 + 80) == *((double *)result + 10)
      && *(double *)(a3 + 88) == *((double *)result + 11)
      && *(_DWORD *)(a3 + 96) == *((_DWORD *)result + 24)
      && *(_DWORD *)(a3 + 216) == *((_DWORD *)result + 54)
      && *(_DWORD *)(a3 + 220) == *((_DWORD *)result + 55);
    *v5 = v8;
  }
  return result;
}

unint64_t sub_20808E700(const void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (unint64_t)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C084668, (const struct __class_type_info *)&unk_24C083C58, 0);
  v2 = v1 & 0xFFFFFFFFFFFFFF00;
  v3 = v1;
  if (!v1)
  {
    v2 = 0;
    v3 = 0;
  }
  return v3 | v2;
}

BOOL sub_20808E758(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
    sub_207CBAB98(a1, (uint64_t)"Center", 6);
    sub_207CBAB98(a1, (uint64_t)"Heikkila", 8);
    v13 = 12;
    v19 = 0;
    sub_20808EF14((uint64_t)__p, &v13);
    if (v19 == -1)
      sub_207CA9F48();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24C084590[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_207CBAB98(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_207CBAB98(a1, (uint64_t)",", 1);
    sub_20808B6B0(a1, a2);
    sub_207CBAB98(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_20808E950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20808E9EC(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
    sub_207CBAB98(a1, (uint64_t)"Corner", 6);
    sub_207CBAB98(a1, (uint64_t)"Heikkila", 8);
    v13 = 11;
    v19 = 0;
    sub_20808EF14((uint64_t)__p, &v13);
    if (v19 == -1)
      sub_207CA9F48();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24C084590[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_207CBAB98(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_207CBAB98(a1, (uint64_t)",", 1);
    sub_20808B5A4(a1, a2);
    sub_207CBAB98(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_20808EBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20808EC80(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  int v6;
  void **v7;
  std::string::size_type v8;
  std::string::value_type v9;
  std::string *v10;
  unsigned __int8 v11;
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *__p[2];
  char v18;
  int v19;
  char v20;
  _QWORD v21[2];

  v3 = a3;
  if (a3)
  {
    sub_207CBAB98(a1, (uint64_t)"Camera{Type: ", 13);
    sub_207CBAB98(a1, (uint64_t)"Corner", 6);
    sub_207CBAB98(a1, (uint64_t)"Heikkila", 8);
    v13 = 12;
    v19 = 0;
    sub_20808EF14((uint64_t)__p, &v13);
    if (v19 == -1)
      sub_207CA9F48();
    v21[0] = &v20;
    ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C084620[v19])(v14, v21, __p);
    if (v19 != -1)
      ((void (*)(_QWORD *, void **))off_24C084590[v19])(v21, __p);
    v6 = (char)v15;
    v7 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (std::string::size_type)v14[1];
    memset(&v16, 0, sizeof(v16));
    std::string::reserve(&v16, v8);
    if (v6 >= 0)
      v7 = v14;
    for (; v8; --v8)
    {
      v9 = __toupper(*(unsigned __int8 *)v7);
      std::string::push_back(&v16, v9);
      v7 = (void **)((char *)v7 + 1);
    }
    v10 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[0];
    v18 = 1;
    LOWORD(__p[0]) = v11;
    sub_207CBAB98(a1, (uint64_t)__p, 1);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_207CBAB98(a1, (uint64_t)",", 1);
    sub_20808B6B0(a1, a2);
    sub_207CBAB98(a1, (uint64_t)"}", 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (((char)v15 & 0x80000000) == 0)
        return v3 != 0;
    }
    else if (((char)v15 & 0x80000000) == 0)
    {
      return v3 != 0;
    }
    operator delete(v14[0]);
  }
  return v3 != 0;
}

void sub_20808EE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20808EF14(uint64_t a1, _BYTE *a2)
{
  _OWORD *v4;
  const char *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v4 = operator new(0x118uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  *((_QWORD *)v4 + 34) = 0;
  sub_207CA2878((uint64_t)v4);
  v21[0] = v4;
  if (*a2 == 11)
    v5 = "f32";
  else
    v5 = "f64";
  sub_207CBAB98((_QWORD *)v4 + 2, (uint64_t)v5, 3);
  v6 = *((_DWORD *)v4 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v4 + 14);
    v10 = *((_QWORD *)v4 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v4 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v4 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_17;
    }
    v11 = (const void *)*((_QWORD *)v4 + 5);
    v7 = *((_QWORD *)v4 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_16;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_16:
    memmove(v8, v11, v7);
LABEL_17:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a1;
  v21[1] = __dst;
  v21[2] = a1;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C084608[v18])(&v22, a1);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20808F160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_20808F188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_20808F19C(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  _OWORD *v4;
  int v5;
  size_t v6;
  void *p_p;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *__p;
  size_t v20;
  int64_t v21;
  _QWORD *v22;

  if (!*a3)
  {
    sub_207CBAB98(*a2, (uint64_t)"nullptr", 7);
    return;
  }
  v4 = operator new(0x118uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  *((_QWORD *)v4 + 34) = 0;
  sub_207CA2878((uint64_t)v4);
  v22 = v4;
  std::ostream::operator<<();
  v5 = *((_DWORD *)v4 + 30);
  if ((v5 & 0x10) != 0)
  {
    v8 = *((_QWORD *)v4 + 14);
    v9 = *((_QWORD *)v4 + 9);
    if (v8 < v9)
    {
      *((_QWORD *)v4 + 14) = v9;
      v8 = v9;
    }
    v10 = (const void *)*((_QWORD *)v4 + 8);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_29;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v21) = 0;
      p_p = &__p;
      goto LABEL_16;
    }
    v10 = (const void *)*((_QWORD *)v4 + 5);
    v6 = *((_QWORD *)v4 + 7) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
      sub_207C95C50();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    p_p = operator new(v11 + 1);
    v20 = v6;
    v21 = v12 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v21) = v6;
    p_p = &__p;
    if (!v6)
      goto LABEL_16;
  }
  memmove(p_p, v10, v6);
LABEL_16:
  *((_BYTE *)p_p + v6) = 0;
  v13 = v22;
  if (v22)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *v22 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)((char *)v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    v13[3] = MEMORY[0x24BEDB848] + 16;
    v13[2] = v16;
    if (*((char *)v13 + 111) < 0)
      operator delete((void *)v13[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v13 + 16);
    operator delete(v13);
  }
  if (v21 >= 0)
    v17 = &__p;
  else
    v17 = __p;
  if (v21 >= 0)
    v18 = HIBYTE(v21);
  else
    v18 = v20;
  sub_207CBAB98(*a2, (uint64_t)v17, v18);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_20808F3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20808F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_20808F418(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  const void **v12;
  std::__shared_weak_count_vtbl **v13;
  int data_low;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  CFTypeID TypeID;
  CFTypeRef v20;
  CFTypeID v21;
  std::__shared_weak_count_vtbl *v22;
  CFTypeRef v23;
  CFTypeID v24;
  _BOOL8 v25;
  CFTypeRef v26;
  CFTypeID v27;
  const __CFArray *v28;
  std::string *v29;
  uint64_t **v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t **v39;
  int v40;
  uint64_t v41;
  CFIndex Count;
  std::__shared_weak_count_vtbl *i;
  uint64_t **v44;
  const void *ValueAtIndex;
  std::string::size_type v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *size;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count_vtbl **v58;
  std::string::size_type v59;
  uint64_t **v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t **v66;
  int v67;
  uint64_t v68;
  unint64_t *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string::size_type v75;
  std::string::size_type v76;
  std::string::size_type v77;
  std::string::size_type v78;
  int v79;
  std::string::size_type v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  std::logic_error *exception;
  CFTypeID v114;
  CFTypeRef cf;
  std::__shared_weak_count *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  std::string __p;
  _BYTE v142[8];
  uint64_t *v143;
  char v144;
  uint64_t *v145;
  char v146;
  uint64_t *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::string v154;
  char v155;
  char v156;

  sub_207CFA8E8(a2, (uint64_t)&v129);
  v123 = v129;
  v124 = v130;
  v125 = v131;
  v126 = v132;
  if (v132)
  {
    p_shared_owners = (unint64_t *)&v132->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v127 = v133;
  v128 = v134;
  if (v134)
  {
    v5 = (unint64_t *)&v134->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v117 = v135;
  v118 = v136;
  v119 = v137;
  v120 = v138;
  if (v138)
  {
    v7 = (unint64_t *)&v138->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v121 = v139;
  v122 = v140;
  if (v140)
  {
    v9 = (unint64_t *)&v140->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  while (1)
  {
    if ((_QWORD)v123)
      v11 = (_QWORD)v117 == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (((_QWORD)v123 != 0) != ((_QWORD)v117 == 0))
        break;
      goto LABEL_23;
    }
    if (*((_QWORD *)&v123 + 1) == *((_QWORD *)&v117 + 1))
      break;
LABEL_23:
    v12 = (const void **)sub_207CFA4E4((uint64_t)&v123);
    sub_207CFBA9C((std::__shared_weak_count_vtbl **)&cf, (uint64_t)(v12 + 3));
    v13 = sub_207CFBA9C(&v152, (uint64_t)&cf);
    sub_208092BEC((const void **)v13, (uint64_t)&v154);
    if (!v156)
    {
      v112 = sub_207E0E368((uint64_t)&v154);
      sub_207F09168(v112);
    }
    data_low = LOWORD(v154.__r_.__value_.__l.__data_);
    v15 = v153;
    if (v153)
    {
      v16 = (unint64_t *)&v153->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    switch(data_low)
    {
      case 0:
        v18 = cf;
        if (cf && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v18) == TypeID))
        {
          sub_207E9D1F4(&v148, (std::__shared_weak_count_vtbl *)cf, 1);
        }
        else
        {
          v148 = 0;
          v149 = 0;
        }
        v58 = sub_207E9D308(&v150, (uint64_t)&v148);
        sub_207D01AA0((CFNumberRef *)v58);
        switch(v154.__r_.__value_.__s.__data_[0])
        {
          case 0:
            v59 = *(unsigned __int8 *)sub_2082062F0((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v59;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 1:
            v73 = *(unsigned __int16 *)sub_2082065D0((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v73;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 2:
            v75 = *(unsigned int *)sub_2082066B8((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v75;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 3:
            v77 = *(_QWORD *)sub_2082067A0((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v77;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 5:
            v72 = *(char *)sub_208206888((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v72;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 6:
            v74 = *(__int16 *)sub_208206970((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v74;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 7:
            v78 = *(int *)sub_208206A58((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v78;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 8:
            v76 = *(_QWORD *)sub_208206B40((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v76;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 0xB:
            *(double *)&v71 = *(float *)sub_208206C28((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 7;
            __p.__r_.__value_.__l.__size_ = v71;
            v60 = sub_208094DF0(a1, v12);
            break;
          case 0xC:
            v70 = *(_QWORD *)sub_208206D10((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 7;
            __p.__r_.__value_.__l.__size_ = v70;
            v60 = sub_208094DF0(a1, v12);
            break;
          default:
            sub_2082056D4(v154.__r_.__value_.__s.__data_[0]);
        }
        v79 = *(unsigned __int8 *)v60;
        *(_BYTE *)v60 = __p.__r_.__value_.__s.__data_[0];
        __p.__r_.__value_.__s.__data_[0] = v79;
        v80 = (std::string::size_type)v60[1];
        v60[1] = (uint64_t *)__p.__r_.__value_.__l.__size_;
        __p.__r_.__value_.__l.__size_ = v80;
        sub_207D20660((uint64_t *)&__p.__r_.__value_.__l.__size_, v79);
        if (v154.__r_.__value_.__l.__size_)
        {
          v154.__r_.__value_.__r.__words[2] = v154.__r_.__value_.__l.__size_;
          operator delete((void *)v154.__r_.__value_.__l.__size_);
        }
        v81 = v151;
        if (!v151)
          goto LABEL_110;
        v82 = (unint64_t *)&v151->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
          v55 = v149;
          if (!v149)
            goto LABEL_115;
        }
        else
        {
LABEL_110:
          v55 = v149;
          if (!v149)
            goto LABEL_115;
        }
        v84 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v84);
        while (__stlxr(v57 - 1, v84));
        goto LABEL_113;
      case 1:
        sub_207CF9014((CFIndex)cf, &v154);
        v147 = 0;
        v146 = 3;
        v29 = (std::string *)operator new(0x18uLL);
        *v29 = v154;
        memset(&v154, 0, sizeof(v154));
        v147 = (uint64_t *)v29;
        v30 = sub_208094DF0(a1, v12);
        v31 = *(unsigned __int8 *)v30;
        *(_BYTE *)v30 = v146;
        v146 = v31;
        v32 = (uint64_t)v30[1];
        v30[1] = v147;
        v147 = (uint64_t *)v32;
        sub_207D20660((uint64_t *)&v147, v31);
        if (v155 && SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        goto LABEL_115;
      case 2:
        v23 = cf;
        v25 = cf && (v24 = CFBooleanGetTypeID(), CFGetTypeID(v23) == v24) && CFBooleanGetValue((CFBooleanRef)v23) != 0;
        v144 = 4;
        v145 = (uint64_t *)v25;
        v39 = sub_208094DF0(a1, v12);
        v40 = *(unsigned __int8 *)v39;
        *(_BYTE *)v39 = v144;
        v144 = v40;
        v41 = (uint64_t)v39[1];
        v39[1] = v145;
        v145 = (uint64_t *)v41;
        sub_207D20660((uint64_t *)&v145, v40);
        goto LABEL_115;
      case 3:
        v26 = cf;
        if (cf && (v27 = CFArrayGetTypeID(), CFGetTypeID(v26) == v27))
        {
          sub_207CB7A4C((std::__shared_weak_count_vtbl **)&v154, (std::__shared_weak_count_vtbl *)cf, 1);
          v28 = (const __CFArray *)v154.__r_.__value_.__r.__words[0];
        }
        else
        {
          v28 = 0;
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = 0uLL;
        }
        Count = CFArrayGetCount(v28);
        if (Count)
        {
          for (i = 0; i != (std::__shared_weak_count_vtbl *)Count; i = (std::__shared_weak_count_vtbl *)((char *)i + 1))
          {
            v44 = sub_208094DF0(a1, v12);
            v150 = i;
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v154.__r_.__value_.__l.__data_, (CFIndex)i);
            v46 = (std::string::size_type)ValueAtIndex;
            if (ValueAtIndex)
              CFRetain(ValueAtIndex);
            v47 = (std::__shared_weak_count *)operator new(0x20uLL);
            v48 = v47;
            v47->__shared_owners_ = 0;
            v49 = (unint64_t *)&v47->__shared_owners_;
            v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
            v47->__shared_weak_owners_ = 0;
            v47[1].__vftable = (std::__shared_weak_count_vtbl *)v46;
            __p.__r_.__value_.__r.__words[0] = v46;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
            do
              v51 = __ldaxr(v49);
            while (__stlxr(v51 - 1, v49));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v48);
            }
            sub_208094F44((uint64_t)v44, (unint64_t *)&v150, (std::__shared_weak_count_vtbl **)&__p);
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v53 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
        }
        v55 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
        if (!v154.__r_.__value_.__l.__size_)
          goto LABEL_115;
        v56 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_113;
      case 4:
        v20 = cf;
        if (cf && (v21 = CFDictionaryGetTypeID(), CFGetTypeID(v20) == v21))
        {
          sub_207CF9D84(&v150, (std::__shared_weak_count_vtbl *)cf, 1);
          v22 = v150;
        }
        else
        {
          v22 = 0;
          v150 = 0;
          v151 = 0;
        }
        v142[0] = 0;
        v143 = 0;
        sub_207CF9D84((std::__shared_weak_count_vtbl **)&v154, v22, 1);
        v33 = *(_OWORD *)&v154.__r_.__value_.__l.__data_;
        if (!v154.__r_.__value_.__l.__size_)
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v154.__r_.__value_.__r.__words[0];
          goto LABEL_86;
        }
        v34 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
        do
          v36 = __ldxr(v34);
        while (__stxr(v36 + 1, v34));
        do
          v37 = __ldaxr(v34);
        while (__stlxr(v37 - 1, v34));
        if (v37)
        {
          v38 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
          if (!v154.__r_.__value_.__l.__size_)
            goto LABEL_86;
        }
        else
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v33 + 1) + 16))(*((_QWORD *)&v33 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
          v38 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
          if (!v154.__r_.__value_.__l.__size_)
            goto LABEL_86;
        }
        v61 = (unint64_t *)&v38->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
LABEL_86:
        sub_20808F418(v142, &__p);
        v63 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v64 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v66 = sub_208094DF0(a1, v12);
        v67 = *(unsigned __int8 *)v66;
        *(_BYTE *)v66 = v142[0];
        v142[0] = v67;
        v68 = (uint64_t)v66[1];
        v66[1] = v143;
        v143 = (uint64_t *)v68;
        sub_207D20660((uint64_t *)&v143, v67);
        v55 = v151;
        if (v151)
        {
          v69 = (unint64_t *)&v151->__shared_owners_;
          do
            v57 = __ldaxr(v69);
          while (__stlxr(v57 - 1, v69));
LABEL_113:
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
LABEL_115:
        v85 = v116;
        if (!v116)
          goto LABEL_119;
        v86 = (unint64_t *)&v116->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
          ++*((_QWORD *)&v123 + 1);
          if (*((uint64_t *)&v123 + 1) >= v124)
          {
LABEL_14:
            *(_QWORD *)&v123 = 0;
            continue;
          }
        }
        else
        {
LABEL_119:
          ++*((_QWORD *)&v123 + 1);
          if (*((uint64_t *)&v123 + 1) >= v124)
            goto LABEL_14;
        }
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        v114 = CFGetTypeID(cf);
        sub_207D020C4(v114, &__p);
        sub_207C96E8C("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &__p, &v154);
        std::logic_error::logic_error(exception, &v154);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
    }
  }
  v88 = v122;
  if (v122)
  {
    v89 = (unint64_t *)&v122->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v120;
  if (v120)
  {
    v92 = (unint64_t *)&v120->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v128;
  if (v128)
  {
    v95 = (unint64_t *)&v128->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v140;
  if (v140)
  {
    v101 = (unint64_t *)&v140->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v138;
  if (v138)
  {
    v104 = (unint64_t *)&v138->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v134;
  if (v134)
  {
    v107 = (unint64_t *)&v134->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v132;
  if (v132)
  {
    v110 = (unint64_t *)&v132->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
}

void sub_20809011C()
{
  __cxa_end_catch();
  JUMPOUT(0x208090134);
}

void sub_20809012C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_207C99D78(v1 - 224);
  sub_207C99D78(&v3);
  sub_207CFA438(&v4);
  sub_207CFA438(&v5);
  sub_208090164(&v6);
  _Unwind_Resume(a1);
}

_QWORD *sub_208090164(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[4];
      if (v11)
        goto LABEL_16;
      return a1;
    }
  }
  v11 = (std::__shared_weak_count *)a1[4];
  if (!v11)
    return a1;
LABEL_16:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20809028C(uint64_t a1, uint64_t a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count_vtbl **v13;
  int data_low;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  CFTypeID TypeID;
  CFTypeRef v20;
  CFTypeID v21;
  std::__shared_weak_count_vtbl *v22;
  const __CFBoolean *v23;
  CFTypeID v24;
  void **v25;
  CFTypeRef v26;
  CFTypeID v27;
  const __CFArray *v28;
  void **v29;
  char *v30;
  int v31;
  void **v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  char *v39;
  int v40;
  void **v41;
  CFIndex Count;
  std::__shared_weak_count_vtbl *i;
  char *v44;
  const void *ValueAtIndex;
  std::string::size_type v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *size;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count_vtbl **v58;
  std::string::size_type v59;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  int v67;
  void **v68;
  unint64_t *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string::size_type v75;
  std::string::size_type v76;
  std::string::size_type v77;
  std::string::size_type v78;
  int v79;
  std::string::size_type v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  std::logic_error *exception;
  CFTypeID v114;
  CFTypeRef cf;
  std::__shared_weak_count *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  std::string __p;
  char v142[8];
  void **v143;
  char v144;
  void **v145;
  char v146;
  void **v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::string v154;
  char v155;
  char v156;

  sub_207CFA8E8(a2, (uint64_t)&v129);
  v123 = v129;
  v124 = v130;
  v125 = v131;
  v126 = v132;
  if (v132)
  {
    p_shared_owners = (unint64_t *)&v132->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v127 = v133;
  v128 = v134;
  if (v134)
  {
    v5 = (unint64_t *)&v134->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v117 = v135;
  v118 = v136;
  v119 = v137;
  v120 = v138;
  if (v138)
  {
    v7 = (unint64_t *)&v138->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v121 = v139;
  v122 = v140;
  if (v140)
  {
    v9 = (unint64_t *)&v140->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  while (1)
  {
    if ((_QWORD)v123)
      v11 = (_QWORD)v117 == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (((_QWORD)v123 != 0) != ((_QWORD)v117 == 0))
        break;
      goto LABEL_23;
    }
    if (*((_QWORD *)&v123 + 1) == *((_QWORD *)&v117 + 1))
      break;
LABEL_23:
    v12 = sub_207CFA4E4((uint64_t)&v123);
    sub_207CFBA9C((std::__shared_weak_count_vtbl **)&cf, v12 + 24);
    v13 = sub_207CFBA9C(&v152, (uint64_t)&cf);
    sub_208092BEC((const void **)v13, (uint64_t)&v154);
    if (!v156)
    {
      v112 = sub_207E0E368((uint64_t)&v154);
      sub_207F09168(v112);
    }
    data_low = LOWORD(v154.__r_.__value_.__l.__data_);
    v15 = v153;
    if (v153)
    {
      v16 = (unint64_t *)&v153->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    switch(data_low)
    {
      case 0:
        v18 = cf;
        if (cf && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v18) == TypeID))
        {
          sub_207E9D1F4(&v148, (std::__shared_weak_count_vtbl *)cf, 1);
        }
        else
        {
          v148 = 0;
          v149 = 0;
        }
        v58 = sub_207E9D308(&v150, (uint64_t)&v148);
        sub_207D01AA0((CFNumberRef *)v58);
        switch(v154.__r_.__value_.__s.__data_[0])
        {
          case 0:
            v59 = *(unsigned __int8 *)sub_2082062F0((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v59;
            v60 = sub_20809598C(a1, v12);
            break;
          case 1:
            v73 = *(unsigned __int16 *)sub_2082065D0((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v73;
            v60 = sub_20809598C(a1, v12);
            break;
          case 2:
            v75 = *(unsigned int *)sub_2082066B8((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v75;
            v60 = sub_20809598C(a1, v12);
            break;
          case 3:
            v77 = *(_QWORD *)sub_2082067A0((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 6;
            __p.__r_.__value_.__l.__size_ = v77;
            v60 = sub_20809598C(a1, v12);
            break;
          case 5:
            v72 = *(char *)sub_208206888((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v72;
            v60 = sub_20809598C(a1, v12);
            break;
          case 6:
            v74 = *(__int16 *)sub_208206970((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v74;
            v60 = sub_20809598C(a1, v12);
            break;
          case 7:
            v78 = *(int *)sub_208206A58((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v78;
            v60 = sub_20809598C(a1, v12);
            break;
          case 8:
            v76 = *(_QWORD *)sub_208206B40((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 5;
            __p.__r_.__value_.__l.__size_ = v76;
            v60 = sub_20809598C(a1, v12);
            break;
          case 0xB:
            *(double *)&v71 = *(float *)sub_208206C28((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 7;
            __p.__r_.__value_.__l.__size_ = v71;
            v60 = sub_20809598C(a1, v12);
            break;
          case 0xC:
            v70 = *(_QWORD *)sub_208206D10((uint64_t)&v154);
            __p.__r_.__value_.__s.__data_[0] = 7;
            __p.__r_.__value_.__l.__size_ = v70;
            v60 = sub_20809598C(a1, v12);
            break;
          default:
            sub_2082056D4(v154.__r_.__value_.__s.__data_[0]);
        }
        v79 = *v60;
        *v60 = __p.__r_.__value_.__s.__data_[0];
        __p.__r_.__value_.__s.__data_[0] = v79;
        v80 = *((_QWORD *)v60 + 1);
        *((_QWORD *)v60 + 1) = __p.__r_.__value_.__l.__size_;
        __p.__r_.__value_.__l.__size_ = v80;
        sub_20806DC2C((void ***)&__p.__r_.__value_.__l.__size_, v79);
        if (v154.__r_.__value_.__l.__size_)
        {
          v154.__r_.__value_.__r.__words[2] = v154.__r_.__value_.__l.__size_;
          operator delete((void *)v154.__r_.__value_.__l.__size_);
        }
        v81 = v151;
        if (!v151)
          goto LABEL_110;
        v82 = (unint64_t *)&v151->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
          v55 = v149;
          if (!v149)
            goto LABEL_115;
        }
        else
        {
LABEL_110:
          v55 = v149;
          if (!v149)
            goto LABEL_115;
        }
        v84 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v84);
        while (__stlxr(v57 - 1, v84));
        goto LABEL_113;
      case 1:
        sub_207CF9014((CFIndex)cf, &v154);
        v147 = 0;
        v146 = 3;
        v29 = (void **)operator new(0x18uLL);
        *(std::string *)v29 = v154;
        memset(&v154, 0, sizeof(v154));
        v147 = v29;
        v30 = sub_20809598C(a1, v12);
        v31 = *v30;
        *v30 = v146;
        v146 = v31;
        v32 = (void **)*((_QWORD *)v30 + 1);
        *((_QWORD *)v30 + 1) = v147;
        v147 = v32;
        sub_20806DC2C(&v147, v31);
        if (v155 && SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v154.__r_.__value_.__l.__data_);
        goto LABEL_115;
      case 2:
        v23 = (const __CFBoolean *)cf;
        if (cf && (v24 = CFBooleanGetTypeID(), CFGetTypeID(v23) == v24))
          v25 = (void **)(CFBooleanGetValue(v23) != 0);
        else
          v25 = 0;
        v144 = 4;
        v145 = v25;
        v39 = sub_20809598C(a1, v12);
        v40 = *v39;
        *v39 = v144;
        v144 = v40;
        v41 = (void **)*((_QWORD *)v39 + 1);
        *((_QWORD *)v39 + 1) = v145;
        v145 = v41;
        sub_20806DC2C(&v145, v40);
        goto LABEL_115;
      case 3:
        v26 = cf;
        if (cf && (v27 = CFArrayGetTypeID(), CFGetTypeID(v26) == v27))
        {
          sub_207CB7A4C((std::__shared_weak_count_vtbl **)&v154, (std::__shared_weak_count_vtbl *)cf, 1);
          v28 = (const __CFArray *)v154.__r_.__value_.__r.__words[0];
        }
        else
        {
          v28 = 0;
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = 0uLL;
        }
        Count = CFArrayGetCount(v28);
        if (Count)
        {
          for (i = 0; i != (std::__shared_weak_count_vtbl *)Count; i = (std::__shared_weak_count_vtbl *)((char *)i + 1))
          {
            v44 = sub_20809598C(a1, v12);
            v150 = i;
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v154.__r_.__value_.__l.__data_, (CFIndex)i);
            v46 = (std::string::size_type)ValueAtIndex;
            if (ValueAtIndex)
              CFRetain(ValueAtIndex);
            v47 = (std::__shared_weak_count *)operator new(0x20uLL);
            v48 = v47;
            v47->__shared_owners_ = 0;
            v49 = (unint64_t *)&v47->__shared_owners_;
            v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
            v47->__shared_weak_owners_ = 0;
            v47[1].__vftable = (std::__shared_weak_count_vtbl *)v46;
            __p.__r_.__value_.__r.__words[0] = v46;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
            do
              v51 = __ldaxr(v49);
            while (__stlxr(v51 - 1, v49));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v48);
            }
            sub_208095B14((uint64_t)v44, (unint64_t *)&v150, (std::__shared_weak_count_vtbl **)&__p);
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v53 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
        }
        v55 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
        if (!v154.__r_.__value_.__l.__size_)
          goto LABEL_115;
        v56 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_113;
      case 4:
        v20 = cf;
        if (cf && (v21 = CFDictionaryGetTypeID(), CFGetTypeID(v20) == v21))
        {
          sub_207CF9D84(&v150, (std::__shared_weak_count_vtbl *)cf, 1);
          v22 = v150;
        }
        else
        {
          v22 = 0;
          v150 = 0;
          v151 = 0;
        }
        v142[0] = 0;
        v143 = 0;
        sub_207CF9D84((std::__shared_weak_count_vtbl **)&v154, v22, 1);
        v33 = *(_OWORD *)&v154.__r_.__value_.__l.__data_;
        if (!v154.__r_.__value_.__l.__size_)
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v154.__r_.__value_.__r.__words[0];
          goto LABEL_86;
        }
        v34 = (unint64_t *)(v154.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
        do
          v36 = __ldxr(v34);
        while (__stxr(v36 + 1, v34));
        do
          v37 = __ldaxr(v34);
        while (__stlxr(v37 - 1, v34));
        if (v37)
        {
          v38 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
          if (!v154.__r_.__value_.__l.__size_)
            goto LABEL_86;
        }
        else
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v33 + 1) + 16))(*((_QWORD *)&v33 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
          v38 = (std::__shared_weak_count *)v154.__r_.__value_.__l.__size_;
          if (!v154.__r_.__value_.__l.__size_)
            goto LABEL_86;
        }
        v61 = (unint64_t *)&v38->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
LABEL_86:
        sub_20809028C(v142, &__p);
        v63 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v64 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v66 = sub_20809598C(a1, v12);
        v67 = *v66;
        *v66 = v142[0];
        v142[0] = v67;
        v68 = (void **)*((_QWORD *)v66 + 1);
        *((_QWORD *)v66 + 1) = v143;
        v143 = v68;
        sub_20806DC2C(&v143, v67);
        v55 = v151;
        if (v151)
        {
          v69 = (unint64_t *)&v151->__shared_owners_;
          do
            v57 = __ldaxr(v69);
          while (__stlxr(v57 - 1, v69));
LABEL_113:
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
LABEL_115:
        v85 = v116;
        if (!v116)
          goto LABEL_119;
        v86 = (unint64_t *)&v116->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
          ++*((_QWORD *)&v123 + 1);
          if (*((uint64_t *)&v123 + 1) >= v124)
          {
LABEL_14:
            *(_QWORD *)&v123 = 0;
            continue;
          }
        }
        else
        {
LABEL_119:
          ++*((_QWORD *)&v123 + 1);
          if (*((uint64_t *)&v123 + 1) >= v124)
            goto LABEL_14;
        }
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        v114 = CFGetTypeID(cf);
        sub_207D020C4(v114, &__p);
        sub_207C96E8C("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &__p, &v154);
        std::logic_error::logic_error(exception, &v154);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
    }
  }
  v88 = v122;
  if (v122)
  {
    v89 = (unint64_t *)&v122->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v120;
  if (v120)
  {
    v92 = (unint64_t *)&v120->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v128;
  if (v128)
  {
    v95 = (unint64_t *)&v128->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v140;
  if (v140)
  {
    v101 = (unint64_t *)&v140->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v138;
  if (v138)
  {
    v104 = (unint64_t *)&v138->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v134;
  if (v134)
  {
    v107 = (unint64_t *)&v134->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v132;
  if (v132)
  {
    v110 = (unint64_t *)&v132->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
}

void sub_208090F90()
{
  __cxa_end_catch();
  JUMPOUT(0x208090FA8);
}

void sub_208090FA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_207C99D78(v1 - 224);
  sub_207C99D78(&v3);
  sub_207CFA438(&v4);
  sub_207CFA438(&v5);
  sub_208090164(&v6);
  _Unwind_Resume(a1);
}

void sub_208090FD8(char *a1, uint64_t a2)
{
  int v2;
  void *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *Mutable;
  int v39;
  uint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59;
  _QWORD *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  uint64_t i;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *__p[2];
  void *v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  void *value[2];

  v2 = *a1;
  if (!*a1)
    return;
  if (v2 == 6)
  {
    value[0] = 0;
    sub_208097288(a1, value);
    v5 = value[0];
    LOBYTE(__p[0]) = 3;
    v6 = operator new(8uLL);
    __p[1] = v6;
    *v6 = v5;
    v83 = v6 + 1;
    v84 = v6 + 1;
    sub_207D01DD8((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_207EA2588((std::__shared_weak_count_vtbl **)&v86, (uint64_t)&v85);
    v7 = v86;
    v86 = 0uLL;
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_31:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  if ((v2 - 5) <= 1)
  {
    value[0] = 0;
    sub_2080973D0(a1, value);
    v17 = value[0];
    LOBYTE(__p[0]) = 8;
    v18 = operator new(8uLL);
    __p[1] = v18;
    *v18 = v17;
    v83 = v18 + 1;
    v84 = v18 + 1;
    sub_207D01DD8((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_207EA2588((std::__shared_weak_count_vtbl **)&v86, (uint64_t)&v85);
    v19 = v86;
    v86 = 0uLL;
    v20 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
      goto LABEL_31;
    }
LABEL_33:
    v27 = __p[1];
    if (__p[1])
    {
      v83 = __p[1];
LABEL_35:
      operator delete(v27);
    }
    return;
  }
  switch(*a1)
  {
    case 1:
      __p[1] = 0;
      v83 = 0;
      __p[0] = &__p[1];
      sub_207D006CC(__p, (std::__shared_weak_count_vtbl **)value);
      v85 = *(_OWORD *)value;
      sub_207CFF9E4((uint64_t)__p, (char *)__p[1]);
      sub_208092144(a1, &v85);
      sub_208097130((std::__shared_weak_count_vtbl **)&v86, (std::__shared_weak_count_vtbl *)v85, *((std::__shared_weak_count **)&v85 + 1));
      v28 = v86;
      v86 = 0uLL;
      v29 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        return;
      v36 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_116;
    case 2:
      Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      sub_207CF94CC((std::__shared_weak_count_vtbl **)__p, Mutable, 0);
      v39 = *a1;
      if (!*a1)
        goto LABEL_103;
      if (v39 == 1)
      {
        v40 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
      }
      else
      {
        if (v39 != 2)
        {
          v40 = 1;
          goto LABEL_119;
        }
        v40 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
      }
      if (!v40)
        goto LABEL_103;
LABEL_119:
      for (i = 0; i != v40; ++i)
      {
        v78 = sub_208097024((uint64_t)a1, i);
        value[0] = 0;
        value[1] = 0;
        sub_208090FD8(v78, value);
        CFArrayAppendValue((CFMutableArrayRef)__p[0], value[0]);
        v79 = (std::__shared_weak_count *)value[1];
        if (value[1])
        {
          v80 = (unint64_t *)((char *)value[1] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
LABEL_103:
      sub_207EA2990((std::__shared_weak_count_vtbl **)value, (uint64_t)__p);
      v69 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v70 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v69;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v74 = (unint64_t *)((char *)value[1] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v35 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v76 = (unint64_t *)((char *)__p[1] + 8);
        do
          v37 = __ldaxr(v76);
        while (__stlxr(v37 - 1, v76));
LABEL_116:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      break;
    case 3:
      __p[0] = 0;
      __p[1] = 0;
      v83 = 0;
      sub_207D21A34((void **)a1, (uint64_t)__p);
      sub_207CF8F18((uint64_t)__p, (CFStringRef *)&v86);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)value, (uint64_t)&v86);
      v41 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v42 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v41;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v46 = (unint64_t *)((char *)value[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if ((SHIBYTE(v83) & 0x80000000) == 0)
        return;
      v27 = __p[0];
      goto LABEL_35;
    case 4:
      LOBYTE(v86) = 0;
      sub_207D20D64(a1, &v86);
      LOBYTE(v85) = v86;
      sub_207CF8E38(&v85, (std::__shared_weak_count_vtbl **)value);
      sub_207EA2838((std::__shared_weak_count_vtbl **)__p, (uint64_t)value);
      v51 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v52 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v51;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v56 = (unint64_t *)((char *)__p[1] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v35 = (std::__shared_weak_count *)value[1];
      if (!value[1])
        return;
      v58 = (unint64_t *)((char *)value[1] + 8);
      do
        v37 = __ldaxr(v58);
      while (__stlxr(v37 - 1, v58));
      goto LABEL_116;
    case 7:
      value[0] = 0;
      sub_208097518((uint64_t *)a1, (double *)value);
      v59 = value[0];
      LOBYTE(__p[0]) = 12;
      v60 = operator new(8uLL);
      __p[1] = v60;
      *v60 = v59;
      v83 = v60 + 1;
      v84 = v60 + 1;
      sub_207D01DD8((uint64_t)value, (uint64_t)__p);
      v85 = *(_OWORD *)value;
      sub_207EA2588((std::__shared_weak_count_vtbl **)&v86, (uint64_t)&v85);
      v61 = v86;
      v86 = 0uLL;
      v62 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        goto LABEL_33;
      v68 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v68);
      while (__stlxr(v16 - 1, v68));
      goto LABEL_31;
    default:
      return;
  }
}

void sub_208091784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208091798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  sub_207C99D78((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208091850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_207C99D78((uint64_t)&a17);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208091870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208091884(char *a1, uint64_t a2)
{
  int v2;
  void *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count_vtbl *Mutable;
  int v39;
  uint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59;
  _QWORD *v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  uint64_t i;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *__p[2];
  void *v83;
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  void *value[2];

  v2 = *a1;
  if (!*a1)
    return;
  if (v2 == 6)
  {
    value[0] = 0;
    sub_20809778C(a1, value);
    v5 = value[0];
    LOBYTE(__p[0]) = 3;
    v6 = operator new(8uLL);
    __p[1] = v6;
    *v6 = v5;
    v83 = v6 + 1;
    v84 = v6 + 1;
    sub_207D01DD8((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_207EA2588((std::__shared_weak_count_vtbl **)&v86, (uint64_t)&v85);
    v7 = v86;
    v86 = 0uLL;
    v8 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
LABEL_31:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  if ((v2 - 5) <= 1)
  {
    value[0] = 0;
    sub_2080978D4(a1, value);
    v17 = value[0];
    LOBYTE(__p[0]) = 8;
    v18 = operator new(8uLL);
    __p[1] = v18;
    *v18 = v17;
    v83 = v18 + 1;
    v84 = v18 + 1;
    sub_207D01DD8((uint64_t)value, (uint64_t)__p);
    v85 = *(_OWORD *)value;
    sub_207EA2588((std::__shared_weak_count_vtbl **)&v86, (uint64_t)&v85);
    v19 = v86;
    v86 = 0uLL;
    v20 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
      goto LABEL_31;
    }
LABEL_33:
    v27 = __p[1];
    if (__p[1])
    {
      v83 = __p[1];
LABEL_35:
      operator delete(v27);
    }
    return;
  }
  switch(*a1)
  {
    case 1:
      __p[1] = 0;
      v83 = 0;
      __p[0] = &__p[1];
      sub_207D006CC(__p, (std::__shared_weak_count_vtbl **)value);
      v85 = *(_OWORD *)value;
      sub_207CFF9E4((uint64_t)__p, (char *)__p[1]);
      sub_20809234C(a1, &v85);
      sub_208097130((std::__shared_weak_count_vtbl **)&v86, (std::__shared_weak_count_vtbl *)v85, *((std::__shared_weak_count **)&v85 + 1));
      v28 = v86;
      v86 = 0uLL;
      v29 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        return;
      v36 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      goto LABEL_116;
    case 2:
      Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
      sub_207CF94CC((std::__shared_weak_count_vtbl **)__p, Mutable, 0);
      v39 = *a1;
      if (!*a1)
        goto LABEL_103;
      if (v39 == 1)
      {
        v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 3);
      }
      else
      {
        if (v39 != 2)
        {
          v40 = 1;
          goto LABEL_119;
        }
        v40 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
      }
      if (!v40)
        goto LABEL_103;
LABEL_119:
      for (i = 0; i != v40; ++i)
      {
        v78 = sub_208097680((uint64_t)a1, i);
        value[0] = 0;
        value[1] = 0;
        sub_208091884(v78, value);
        CFArrayAppendValue((CFMutableArrayRef)__p[0], value[0]);
        v79 = (std::__shared_weak_count *)value[1];
        if (value[1])
        {
          v80 = (unint64_t *)((char *)value[1] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
LABEL_103:
      sub_207EA2990((std::__shared_weak_count_vtbl **)value, (uint64_t)__p);
      v69 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v70 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v69;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v73 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v74 = (unint64_t *)((char *)value[1] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v35 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v76 = (unint64_t *)((char *)__p[1] + 8);
        do
          v37 = __ldaxr(v76);
        while (__stlxr(v37 - 1, v76));
LABEL_116:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      break;
    case 3:
      __p[0] = 0;
      __p[1] = 0;
      v83 = 0;
      sub_208097C8C((void **)a1, (uint64_t)__p);
      sub_207CF8F18((uint64_t)__p, (CFStringRef *)&v86);
      sub_207EA26E0((std::__shared_weak_count_vtbl **)value, (uint64_t)&v86);
      v41 = *(_OWORD *)value;
      value[0] = 0;
      value[1] = 0;
      v42 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v41;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v46 = (unint64_t *)((char *)value[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if ((SHIBYTE(v83) & 0x80000000) == 0)
        return;
      v27 = __p[0];
      goto LABEL_35;
    case 4:
      LOBYTE(v86) = 0;
      sub_208097B84(a1, &v86);
      LOBYTE(v85) = v86;
      sub_207CF8E38(&v85, (std::__shared_weak_count_vtbl **)value);
      sub_207EA2838((std::__shared_weak_count_vtbl **)__p, (uint64_t)value);
      v51 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v52 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v51;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v56 = (unint64_t *)((char *)__p[1] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v35 = (std::__shared_weak_count *)value[1];
      if (!value[1])
        return;
      v58 = (unint64_t *)((char *)value[1] + 8);
      do
        v37 = __ldaxr(v58);
      while (__stlxr(v37 - 1, v58));
      goto LABEL_116;
    case 7:
      value[0] = 0;
      sub_208097A1C((uint64_t *)a1, (double *)value);
      v59 = value[0];
      LOBYTE(__p[0]) = 12;
      v60 = operator new(8uLL);
      __p[1] = v60;
      *v60 = v59;
      v83 = v60 + 1;
      v84 = v60 + 1;
      sub_207D01DD8((uint64_t)value, (uint64_t)__p);
      v85 = *(_OWORD *)value;
      sub_207EA2588((std::__shared_weak_count_vtbl **)&v86, (uint64_t)&v85);
      v61 = v86;
      v86 = 0uLL;
      v62 = *(std::__shared_weak_count **)(a2 + 8);
      *(_OWORD *)a2 = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        goto LABEL_33;
      v68 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
      do
        v16 = __ldaxr(v68);
      while (__stlxr(v16 - 1, v68));
      goto LABEL_31;
    default:
      return;
  }
}

void sub_208092044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208092058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  sub_207C99D78((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_208092110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_207C99D78((uint64_t)&a17);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208092130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208092144(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  void *key;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  uint64_t v23;
  unsigned __int8 *v24[2];
  __int128 v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  __int128 v28;

  if (*(_BYTE *)result == 1)
  {
    v2 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)(v2 + 16))
    {
      v26 = (unsigned __int8 *)result;
      v28 = xmmword_208233370;
      v27 = *(_QWORD **)v2;
      v25 = xmmword_208233370;
      v24[0] = (unsigned __int8 *)result;
      v24[1] = (unsigned __int8 *)(v2 + 8);
      while (1)
      {
        result = sub_207D23444(&v26, v24);
        if ((result & 1) != 0)
          return result;
        v4 = sub_207D152E4((uint64_t)&v26);
        if (*(char *)(v4 + 23) < 0)
        {
          sub_207CA40D8(__p, *(void **)v4, *(_QWORD *)(v4 + 8));
        }
        else
        {
          v5 = *(_OWORD *)v4;
          v23 = *(_QWORD *)(v4 + 16);
          *(_OWORD *)__p = v5;
        }
        v6 = sub_207D21398((uint64_t)&v26);
        v20 = 0;
        v21 = 0;
        sub_208090FD8(v6, (uint64_t)&v20);
        sub_207CF8F18((uint64_t)__p, (CFStringRef *)&key);
        sub_208097E18(a2, key, (uint64_t)&v20);
        v7 = v19;
        if (!v19)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          v10 = v21;
          if (!v21)
            goto LABEL_19;
        }
        else
        {
LABEL_13:
          v10 = v21;
          if (!v21)
            goto LABEL_19;
        }
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
LABEL_19:
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        v13 = *v26;
        if (v13 == 2)
        {
          *(_QWORD *)&v28 = v28 + 16;
        }
        else if (v13 == 1)
        {
          v14 = v27;
          v15 = (_QWORD *)v27[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v14[2];
              v17 = *v16 == (_QWORD)v14;
              v14 = v16;
            }
            while (!v17);
          }
          v27 = v16;
        }
        else
        {
          ++*((_QWORD *)&v28 + 1);
        }
      }
    }
  }
  return result;
}

void sub_20809230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20809234C(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  void *key;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 *v22[2];
  __int128 v23;
  unsigned __int8 *v24;
  uint64_t v25;
  __int128 v26;

  if (*(_BYTE *)result == 1)
  {
    v2 = *(uint64_t **)(result + 8);
    v3 = *v2;
    if (*v2 != v2[1])
    {
      v26 = xmmword_208233370;
      v24 = (unsigned __int8 *)result;
      v25 = v3;
      v23 = xmmword_208233370;
      v5 = (unsigned __int8 *)v2[1];
      v22[0] = (unsigned __int8 *)result;
      v22[1] = v5;
      while (1)
      {
        result = sub_208098050(&v24, v22);
        if ((result & 1) != 0)
          return result;
        v6 = sub_208097F8C((uint64_t)&v24);
        if (*(char *)(v6 + 23) < 0)
        {
          sub_207CA40D8(__p, *(void **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v7 = *(_OWORD *)v6;
          v21 = *(_QWORD *)(v6 + 16);
          *(_OWORD *)__p = v7;
        }
        v8 = sub_208098150((uint64_t)&v24);
        v18 = 0;
        v19 = 0;
        sub_208091884(v8, (uint64_t)&v18);
        sub_207CF8F18((uint64_t)__p, (CFStringRef *)&key);
        sub_208097E18(a2, key, (uint64_t)&v18);
        v9 = v17;
        if (!v17)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v12 = v19;
          if (!v19)
            goto LABEL_19;
        }
        else
        {
LABEL_13:
          v12 = v19;
          if (!v19)
            goto LABEL_19;
        }
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_19:
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
        v15 = *v24;
        if (v15 == 2)
        {
          *(_QWORD *)&v26 = v26 + 16;
        }
        else if (v15 == 1)
        {
          v25 += 40;
        }
        else
        {
          ++*((_QWORD *)&v26 + 1);
        }
      }
    }
  }
  return result;
}

void sub_2080924EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99D78((uint64_t)&a9);
  sub_207C99D78((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20809252C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE v8[8];
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  _BYTE v12[8];
  uint64_t v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12[0] = 0;
  v13[0] = 0;
  sub_207E01D24(&v10, a1);
  sub_20808F418((uint64_t)v12, (uint64_t)&v10);
  v3 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v13[1] = (uint64_t)v12;
  v14 = 1;
  sub_2080982B8((uint64_t)v8, (uint64_t)v12, 1, 1, 2);
  sub_207D20660(v13, v12[0]);
  v6 = sub_2080926D0((uint64_t)v8, 0);
  v7 = operator new(0x10uLL);
  *(_BYTE *)v7 = *(_BYTE *)v6;
  v7[1] = *(_QWORD *)(v6 + 8);
  *(_BYTE *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *a2 = v7;
  sub_207D20660(&v9, v8[0]);
}

void sub_208092660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_2080926D0(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *exception;
  char *v10;
  std::string v11;
  std::string v12;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v10 = (char *)sub_207D1E770((char *)a1);
      sub_207C96EE8(&v11, v10);
      sub_207C96E8C("cannot use operator[] with a numeric argument with ", &v11, &v12);
      sub_207D1E5F8(305, (uint64_t)&v12, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v4 = *(uint64_t **)(a1 + 8);
    v5 = *v4;
    v6 = v4[1];
    v7 = (v6 - *v4) >> 4;
    if (v7 > a2)
      return v5 + 16 * a2;
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (uint64_t *)operator new(0x18uLL);
    v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = v4[1];
    v7 = v6 >> 4;
    if (v6 >> 4 > a2)
      return v5 + 16 * a2;
  }
  v12.__r_.__value_.__s.__data_[0] = 0;
  v12.__r_.__value_.__l.__size_ = 0;
  sub_208098AE4(v4, (unsigned __int8 *)v6, a2 - v7 + 1, (unsigned __int8 *)&v12);
  sub_207D20660((uint64_t *)&v12.__r_.__value_.__l.__size_, v12.__r_.__value_.__s.__data_[0]);
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_208092814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t *v12;

  sub_207D20660(v12, a12);
  _Unwind_Resume(a1);
}

void sub_20809282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_20809288C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE v8[8];
  void **v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  _BYTE v12[8];
  void **v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12[0] = 0;
  v13[0] = 0;
  sub_207E01D24(&v10, a1);
  sub_20809028C((uint64_t)v12, (uint64_t)&v10);
  v3 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v13[1] = (void **)v12;
  v14 = 1;
  sub_20809879C((uint64_t)v8, (uint64_t)v12, 1, 1, 2);
  sub_20806DC2C(v13, v12[0]);
  v6 = sub_208092A30((uint64_t)v8, 0);
  v7 = operator new(0x10uLL);
  *(_BYTE *)v7 = *(_BYTE *)v6;
  v7[1] = *(_QWORD *)(v6 + 8);
  *(_BYTE *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *a2 = v7;
  sub_20806DC2C(&v9, v8[0]);
}

void sub_2080929C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  void ***v14;

  sub_20806DC2C(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_208092A30(uint64_t a1, unint64_t a2)
{
  void ***v4;
  void **v5;
  unsigned __int8 *v6;
  unint64_t v7;
  void *exception;
  char *v10;
  std::string v11;
  std::string v12;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v10 = (char *)sub_20809655C((char *)a1);
      sub_207C96EE8(&v11, v10);
      sub_207C96E8C("cannot use operator[] with a numeric argument with ", &v11, &v12);
      sub_207D1E5F8(305, (uint64_t)&v12, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v4 = *(void ****)(a1 + 8);
    v5 = *v4;
    v6 = (unsigned __int8 *)v4[1];
    v7 = (v6 - (unsigned __int8 *)*v4) >> 4;
    if (v7 > a2)
      return (uint64_t)&v5[2 * a2];
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v4 = (void ***)operator new(0x18uLL);
    v5 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = (unsigned __int8 *)v4[1];
    v7 = (uint64_t)v6 >> 4;
    if ((uint64_t)v6 >> 4 > a2)
      return (uint64_t)&v5[2 * a2];
  }
  v12.__r_.__value_.__s.__data_[0] = 0;
  v12.__r_.__value_.__l.__size_ = 0;
  sub_208098E30(v4, v6, a2 - v7 + 1, (unsigned __int8 *)&v12);
  sub_20806DC2C((void ***)&v12.__r_.__value_.__l.__size_, v12.__r_.__value_.__s.__data_[0]);
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_208092B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;

  sub_20806DC2C(v12, a12);
  _Unwind_Resume(a1);
}

void sub_208092B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_208092BEC(const void **a1@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  CFTypeID TypeID;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;
  __int16 v10;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  CFTypeID v14;
  const void *v15;
  CFTypeID v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string *v21;
  unint64_t size;
  void *v23;
  int v24;
  int v25;
  uint64_t v26;
  std::string v27;
  _DWORD v28[2];
  __int128 __dst;
  _BYTE v30[7];
  char v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  __int128 v39;
  __int128 __p;
  uint64_t v41;
  unsigned __int8 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  char v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  std::string v52;

  v3 = *a1;
  if (!*a1)
    goto LABEL_18;
  TypeID = CFNumberGetTypeID();
  if (CFGetTypeID(v3) == TypeID)
  {
    *(_WORD *)a2 = 0;
LABEL_7:
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  v6 = *a1;
  if (!*a1)
    goto LABEL_18;
  v7 = CFStringGetTypeID();
  if (CFGetTypeID(v6) == v7)
  {
    *(_WORD *)a2 = 1;
    goto LABEL_7;
  }
  v8 = *a1;
  if (!*a1)
    goto LABEL_18;
  v9 = CFBooleanGetTypeID();
  if (CFGetTypeID(v8) == v9)
  {
    v10 = 2;
LABEL_17:
    *(_WORD *)a2 = v10;
    goto LABEL_7;
  }
  v11 = *a1;
  if (!*a1)
    goto LABEL_18;
  v12 = CFArrayGetTypeID();
  if (CFGetTypeID(v11) == v12)
  {
    v10 = 3;
    goto LABEL_17;
  }
  v13 = *a1;
  if (*a1)
  {
    v14 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v13) == v14)
    {
      v10 = 4;
      goto LABEL_17;
    }
    v15 = *a1;
  }
  else
  {
LABEL_18:
    v15 = 0;
  }
  v16 = CFGetTypeID(v15);
  v17 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(v16);
  sub_207D0217C(&v50, v17, 0);
  sub_207CF9014((CFIndex)v50, &v52);
  v27 = v52;
  memset(&v52, 0, sizeof(v52));
  v18 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = (void *)v21->__r_.__value_.__r.__words[0];
  size = v21->__r_.__value_.__l.__size_;
  v28[0] = v21->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v21->__r_.__value_.__r.__words[2] + 3);
  v24 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v24 < 0)
  {
    sub_207CA40D8(&__dst, v23, size);
  }
  else
  {
    *(_QWORD *)&__dst = v23;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v30 = v28[0];
    *(_DWORD *)&v30[3] = *(_DWORD *)((char *)v28 + 3);
    v31 = v24;
  }
  v32 = 1;
  LOBYTE(v33) = 0;
  v37 = 0;
  v38 = 1;
  sub_207CCAFD0(0x16u, &__dst, (uint64_t)&v39);
  *(_OWORD *)a2 = v39;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v49)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v38)
      goto LABEL_44;
LABEL_38:
    if (!v37)
      goto LABEL_41;
    if (v36 < 0)
    {
      operator delete(v35);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_41:
        if (!v32)
          goto LABEL_44;
LABEL_42:
        if (v31 < 0)
          operator delete((void *)__dst);
        goto LABEL_44;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v33);
    if (!v32)
      goto LABEL_44;
    goto LABEL_42;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v25 = v42;
  if (v42)
  {
    *(_OWORD *)(a2 + 16) = __p;
    *(_QWORD *)(a2 + 32) = v41;
    v41 = 0;
    __p = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v48)
  {
    v26 = v45;
    *(_QWORD *)(a2 + 64) = v44;
    *(_OWORD *)(a2 + 48) = v43;
    v43 = 0uLL;
    *(_QWORD *)(a2 + 72) = v26;
    *(_OWORD *)(a2 + 80) = v46;
    *(_QWORD *)(a2 + 96) = v47;
    v44 = 0;
    v46 = 0uLL;
    v47 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v25 && SHIBYTE(v41) < 0)
    operator delete((void *)__p);
  if (v38)
    goto LABEL_38;
LABEL_44:
  if ((v24 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_48:
    operator delete(v27.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v23);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_48;
}

void sub_208092F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;

  operator delete(v16);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_208092FD8(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  _WORD v12[60];
  char v13;

  sub_207CFBA9C(&v10, a2);
  sub_208092BEC((const void **)&v10, (uint64_t)v12);
  if (!v13)
  {
    v9 = sub_207E0E368((uint64_t)v12);
    sub_207F09168(v9);
  }
  v4 = v12[0];
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a1 = v4;
  sub_207CFBA9C((std::__shared_weak_count_vtbl **)(a1 + 8), a2);
  return a1;
}

void sub_208093084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_207D04458((uint64_t)&a11);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080930A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080930B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530990);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530990))
    return 5;
  qword_254530968 = CFBooleanGetTypeID();
  qword_254530970 = CFStringGetTypeID();
  qword_254530978 = CFNumberGetTypeID();
  qword_254530980 = CFArrayGetTypeID();
  qword_254530988 = CFDictionaryGetTypeID();
  __cxa_guard_release(&qword_254530990);
  return 5;
}

void sub_208093158(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530990);
  _Unwind_Resume(a1);
}

uint64_t sub_208093170(const char *a1, CFTypeRef *a2)
{
  size_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD __dst[2];
  unint64_t v25;
  int v26;
  void *__p[2];
  unint64_t v28;
  _QWORD v29[5];
  _QWORD *v30;

  v26 = -1;
  v4 = strlen(a1);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = v5;
    v25 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v25) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, a1, v5);
  *((_BYTE *)v6 + v5) = 0;
  v26 = 1;
  v9 = operator new(0x118uLL);
  v9[34] = 0;
  *((_OWORD *)v9 + 15) = 0u;
  *((_OWORD *)v9 + 16) = 0u;
  *((_OWORD *)v9 + 13) = 0u;
  *((_OWORD *)v9 + 14) = 0u;
  *((_OWORD *)v9 + 11) = 0u;
  *((_OWORD *)v9 + 12) = 0u;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)v9 = 0u;
  sub_207CA2878((uint64_t)v9);
  v29[0] = v9;
  sub_207D02290(v9 + 2, *a2);
  v10 = *((_DWORD *)v9 + 30);
  if ((v10 & 0x10) != 0)
  {
    v13 = v9[14];
    v14 = v9[9];
    if (v13 < v14)
    {
      v9[14] = v14;
      v13 = v14;
    }
    v15 = (const void *)v9[8];
    v11 = v13 - (_QWORD)v15;
    if (v13 - (unint64_t)v15 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
  else
  {
    if ((v10 & 8) == 0)
    {
      v11 = 0;
      HIBYTE(v28) = 0;
      v12 = __p;
      goto LABEL_22;
    }
    v23 = v9[7];
    v15 = (const void *)v9[5];
    v11 = v23 - (_QWORD)v15;
    if ((unint64_t)(v23 - (_QWORD)v15) > 0x7FFFFFFFFFFFFFF7)
LABEL_34:
      sub_207C95C50();
  }
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    v12 = operator new(v16 + 1);
    __p[1] = (void *)v11;
    v28 = v17 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_21;
  }
  HIBYTE(v28) = v11;
  v12 = __p;
  if (v11)
LABEL_21:
    memmove(v12, v15, v11);
LABEL_22:
  *((_BYTE *)v12 + v11) = 0;
  v18 = v29[0];
  if (v29[0])
  {
    v19 = MEMORY[0x24BEDB7F0];
    v20 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v29[0] = *MEMORY[0x24BEDB7F0];
    v21 = *(_QWORD *)(v19 + 72);
    *(_QWORD *)(v18 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(v19 + 64);
    *(_QWORD *)(v18 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v18 + 16) = v21;
    if (*(char *)(v18 + 111) < 0)
      operator delete(*(void **)(v18 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v18 + 128);
    operator delete((void *)v18);
  }
  v29[0] = __dst;
  v29[1] = __p;
  v29[2] = __dst;
  v29[3] = __p;
  v29[4] = __p;
  if (v26 == -1)
    sub_207CA9F48();
  v30 = v29;
  ((void (*)(_QWORD **, _QWORD *))off_24C0846F0[v26])(&v30, __dst);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (v26 == -1)
    sub_207CA9F48();
  v29[0] = __p;
  result = ((uint64_t (*)(_QWORD *, _QWORD *))off_24C084708[v26])(v29, __dst);
  if (v26 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_24C0846D8[v26])(v29, __dst);
  return result;
}

void sub_208093480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20809349C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080934B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_207CA9EF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_207CA9EF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2080934F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_208093578(uint64_t *a1@<X0>, void ***a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  CFStringRef v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const __CFString *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  char *v47;
  char *__p;
  uint64_t *v49;
  __int128 v50;
  char *v51;
  __int128 v52;
  CFStringRef v53;
  std::__shared_weak_count *v54;

  v4 = (a1[1] - *a1) >> 3;
  v52 = 0uLL;
  v51 = 0;
  sub_207CFED24((uint64_t)&v51, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      sub_207CF8F18(v5, &v53);
      v8 = v53;
      v7 = v54;
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v8)
        CFRetain(v8);
      *(_QWORD *)&v50 = v8;
      v11 = operator new(0x20uLL);
      *v11 = &off_24C072660;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v8;
      *((_QWORD *)&v50 + 1) = v11;
      if (!v7)
        goto LABEL_14;
      v12 = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v14 = v54;
        if (v54)
        {
LABEL_15:
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
LABEL_14:
        v14 = v54;
        if (v54)
          goto LABEL_15;
      }
      v17 = v52;
      if ((unint64_t)v52 < *((_QWORD *)&v52 + 1))
      {
        *(_OWORD *)v52 = v50;
        *(_QWORD *)&v52 = v17 + 16;
      }
      else
      {
        v18 = sub_207CFEE1C(&v51, (uint64_t)&v50);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        *(_QWORD *)&v52 = v18;
        if (*((_QWORD *)&v50 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  v22 = (uint64_t *)v51;
  __p = v51;
  v46 = (uint64_t *)v52;
  v49 = (uint64_t *)v52;
  v23 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 3);
  v52 = 0uLL;
  v51 = 0;
  sub_207CFED24((uint64_t)&v51, v23);
  v24 = a1[3];
  v25 = a1[4];
  if (v24 == v25)
  {
    v26 = v46;
  }
  else
  {
    do
    {
      v27 = *(const __CFString **)(v24 + 8);
      v28 = *(std::__shared_weak_count **)(v24 + 16);
      v53 = v27;
      v54 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v52;
      if ((unint64_t)v52 < *((_QWORD *)&v52 + 1))
      {
        *(_QWORD *)v52 = v27;
        *(_QWORD *)(v31 + 8) = v54;
        *(_QWORD *)&v52 = v31 + 16;
      }
      else
      {
        v32 = sub_207CFEE1C(&v51, (uint64_t)&v53);
        v33 = v54;
        *(_QWORD *)&v52 = v32;
        if (v54)
        {
          v34 = (unint64_t *)&v54->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      v24 += 24;
    }
    while (v24 != v25);
    v22 = (uint64_t *)__p;
    v26 = v49;
  }
  v36 = v51;
  v47 = v51;
  v37 = (char *)v52;
  sub_207CF9A1C((void **)(((char *)v26 - (char *)v22) >> 4), v22, (void **)((uint64_t)(v52 - (_QWORD)v51) >> 4), (uint64_t *)v51, (const __CFAllocator *)*MEMORY[0x24BDBD240], MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0], a2);
  if (v36)
  {
    if (v37 != v36)
    {
      do
      {
        v38 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v37 -= 16;
      }
      while (v37 != v36);
      v36 = v47;
      v22 = (uint64_t *)__p;
    }
    operator delete(v36);
  }
  if (v22)
  {
    v41 = v49;
    v42 = v22;
    if (v49 != v22)
    {
      do
      {
        v43 = (std::__shared_weak_count *)*(v41 - 1);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v41 -= 2;
      }
      while (v41 != v22);
      v42 = __p;
    }
    operator delete(v42);
  }
}

void sub_208093944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_207CBE108((void **)va);
  sub_207CBE108((void **)va1);
  _Unwind_Resume(a1);
}

void sub_208093960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_207CBE108((void **)va1);
  sub_207CBE108((void **)va);
  _Unwind_Resume(a1);
}

void sub_20809397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_207CBE108((void **)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_208093A80(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  CFTypeID v4;
  CFTypeID v6;
  std::logic_error *exception;
  std::__shared_weak_count_vtbl *v8;
  CFTypeRef v9[2];
  std::string v10;

  sub_207E01D24(a1, a2);
  sub_2080930B4();
  if (!sub_207CFA79C(a2, 5, (uint64_t)&qword_254530968))
  {
    v6 = v4;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v8 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(v6);
    sub_207D0217C((std::__shared_weak_count_vtbl **)v9, v8, 0);
    sub_208093170("Dictionary cannot be serialized. It must only hold Boolean, Number, String, Array or Dictionary values, but contains ", v9);
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_208093B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    sub_207C99D78((uint64_t)&a10);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      sub_207C99D78(v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_207C99D78((uint64_t)&a10);
    if (!v19)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  sub_207C99D78(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_208093BC8(uint64_t a1, uint64_t a2)
{
  char **v4;
  std::__shared_weak_count *v5;
  CFDictionaryRef v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  CFIndex Count;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  __int16 v64;
  __int128 v65;
  void *__p[2];
  uint64_t v67;
  std::__shared_weak_count_vtbl *v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;

  v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v6 = *(CFDictionaryRef *)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_7;
LABEL_9:
      Count = 0;
      goto LABEL_10;
    }
  }
  if (!v6)
    goto LABEL_9;
LABEL_7:
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)a2);
LABEL_10:
  sub_207CA44DC((char **)a1, Count);
  sub_207E9CE58(v4, Count);
  sub_207CFA8E8(a2, (uint64_t)&v82);
  v76 = v82;
  v77 = v83;
  v78 = v84;
  v79 = v85;
  if (v85)
  {
    v11 = (unint64_t *)&v85->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v80 = v86;
  v81 = v87;
  if (v87)
  {
    v13 = (unint64_t *)&v87->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v70 = v88;
  v71 = v89;
  v72 = v90;
  v73 = v91;
  if (v91)
  {
    v15 = (unint64_t *)&v91->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v74 = v92;
  v75 = v93;
  if (v93)
  {
    v17 = (unint64_t *)&v93->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  while (!(_QWORD)v76 || (_QWORD)v70 == 0)
  {
    if (((_QWORD)v76 != 0) != ((_QWORD)v70 == 0))
      goto LABEL_65;
LABEL_32:
    v20 = sub_207CFA4E4((uint64_t)&v76);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
    {
      sub_207CA40D8(__p, *(void **)v20, *(_QWORD *)(v20 + 8));
    }
    else
    {
      v22 = *(_OWORD *)v20;
      v67 = *(_QWORD *)(v20 + 16);
      *(_OWORD *)__p = v22;
    }
    sub_207CFBA9C(&v68, v21 + 24);
    v23 = *(_QWORD *)(a1 + 8);
    if (v23 >= *(_QWORD *)(a1 + 16))
    {
      v25 = sub_207CC08D4((char **)a1, (uint64_t)__p);
    }
    else
    {
      if (SHIBYTE(v67) < 0)
      {
        sub_207CA40D8(*(_BYTE **)(a1 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v23 + 16) = v67;
        *(_OWORD *)v23 = v24;
      }
      v25 = (char *)(v23 + 24);
      *(_QWORD *)(a1 + 8) = v23 + 24;
    }
    *(_QWORD *)(a1 + 8) = v25;
    sub_207CFBA9C(&v62, (uint64_t)&v68);
    sub_208092FD8((uint64_t)&v64, (uint64_t)&v62);
    v26 = *(_QWORD *)(a1 + 32);
    if (v26 >= *(_QWORD *)(a1 + 40))
    {
      v28 = sub_207E9D460(v4, (uint64_t)&v64);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      *(_QWORD *)(a1 + 32) = v28;
      if (!v29)
        goto LABEL_48;
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        v27 = v63;
        if (v63)
        {
LABEL_49:
          v32 = (unint64_t *)&v27->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      else
      {
LABEL_48:
        v27 = v63;
        if (v63)
          goto LABEL_49;
      }
    }
    else
    {
      *(_WORD *)v26 = v64;
      *(_OWORD *)(v26 + 8) = v65;
      v65 = 0uLL;
      *(_QWORD *)(a1 + 32) = v26 + 24;
      v27 = v63;
      if (v63)
        goto LABEL_49;
    }
    v34 = v69;
    if (!v69)
      goto LABEL_57;
    v35 = (unint64_t *)&v69->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if ((SHIBYTE(v67) & 0x80000000) == 0)
        goto LABEL_58;
LABEL_61:
      operator delete(__p[0]);
      ++*((_QWORD *)&v76 + 1);
      if (*((uint64_t *)&v76 + 1) >= v77)
LABEL_23:
        *(_QWORD *)&v76 = 0;
    }
    else
    {
LABEL_57:
      if (SHIBYTE(v67) < 0)
        goto LABEL_61;
LABEL_58:
      ++*((_QWORD *)&v76 + 1);
      if (*((uint64_t *)&v76 + 1) >= v77)
        goto LABEL_23;
    }
  }
  if (*((_QWORD *)&v76 + 1) != *((_QWORD *)&v70 + 1))
    goto LABEL_32;
LABEL_65:
  v37 = v75;
  if (v75)
  {
    v38 = (unint64_t *)&v75->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v73;
  if (v73)
  {
    v41 = (unint64_t *)&v73->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v81;
  if (v81)
  {
    v44 = (unint64_t *)&v81->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v79;
  if (v79)
  {
    v47 = (unint64_t *)&v79->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v93;
  if (v93)
  {
    v50 = (unint64_t *)&v93->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v91;
  if (v91)
  {
    v53 = (unint64_t *)&v91->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v87;
  if (v87)
  {
    v56 = (unint64_t *)&v87->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v85;
  if (v85)
  {
    v59 = (unint64_t *)&v85->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return a1;
}

void sub_208094140(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  sub_207E9C208(v2);
  sub_207C99DE0(v1);
  _Unwind_Resume(a1);
}

void sub_208094160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v32 + 8) = v34;
  sub_2080934F8((uint64_t)&__p);
  sub_207CFA438((uint64_t)&a24);
  sub_207CFA438((uint64_t)&a32);
  sub_208090164((_QWORD *)(v35 - 160));
  sub_207E9C208(v33);
  sub_207C99DE0((void **)v32);
  _Unwind_Resume(a1);
}

void sub_2080941EC(uint64_t *a1@<X0>, void ***a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  CFStringRef v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  const __CFString *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  char *v47;
  char *__p;
  uint64_t *v49;
  __int128 v50;
  char *v51;
  __int128 v52;
  CFStringRef v53;
  std::__shared_weak_count *v54;

  v4 = (a1[1] - *a1) >> 3;
  v52 = 0uLL;
  v51 = 0;
  sub_207CFED24((uint64_t)&v51, 0xAAAAAAAAAAAAAAABLL * v4);
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      sub_207CF8F18(v5, &v53);
      v8 = v53;
      v7 = v54;
      if (v54)
      {
        p_shared_owners = (unint64_t *)&v54->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (v8)
        CFRetain(v8);
      *(_QWORD *)&v50 = v8;
      v11 = operator new(0x20uLL);
      *v11 = &off_24C072660;
      v11[1] = 0;
      v11[2] = 0;
      v11[3] = v8;
      *((_QWORD *)&v50 + 1) = v11;
      if (!v7)
        goto LABEL_14;
      v12 = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v14 = v54;
        if (v54)
        {
LABEL_15:
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
LABEL_14:
        v14 = v54;
        if (v54)
          goto LABEL_15;
      }
      v17 = v52;
      if ((unint64_t)v52 < *((_QWORD *)&v52 + 1))
      {
        *(_OWORD *)v52 = v50;
        *(_QWORD *)&v52 = v17 + 16;
      }
      else
      {
        v18 = sub_207CFEE1C(&v51, (uint64_t)&v50);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        *(_QWORD *)&v52 = v18;
        if (*((_QWORD *)&v50 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  v22 = (uint64_t *)v51;
  __p = v51;
  v46 = (uint64_t *)v52;
  v49 = (uint64_t *)v52;
  v23 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 3);
  v52 = 0uLL;
  v51 = 0;
  sub_207CFED24((uint64_t)&v51, v23);
  v24 = a1[3];
  v25 = a1[4];
  if (v24 == v25)
  {
    v26 = v46;
  }
  else
  {
    do
    {
      v27 = *(const __CFString **)(v24 + 8);
      v28 = *(std::__shared_weak_count **)(v24 + 16);
      v53 = v27;
      v54 = v28;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v52;
      if ((unint64_t)v52 < *((_QWORD *)&v52 + 1))
      {
        *(_QWORD *)v52 = v27;
        *(_QWORD *)(v31 + 8) = v54;
        *(_QWORD *)&v52 = v31 + 16;
      }
      else
      {
        v32 = sub_207CFEE1C(&v51, (uint64_t)&v53);
        v33 = v54;
        *(_QWORD *)&v52 = v32;
        if (v54)
        {
          v34 = (unint64_t *)&v54->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      v24 += 24;
    }
    while (v24 != v25);
    v22 = (uint64_t *)__p;
    v26 = v49;
  }
  v36 = v51;
  v47 = v51;
  v37 = (char *)v52;
  sub_207CF9A1C((void **)(((char *)v26 - (char *)v22) >> 4), v22, (void **)((uint64_t)(v52 - (_QWORD)v51) >> 4), (uint64_t *)v51, (const __CFAllocator *)*MEMORY[0x24BDBD240], MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0], a2);
  if (v36)
  {
    if (v37 != v36)
    {
      do
      {
        v38 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v37 -= 16;
      }
      while (v37 != v36);
      v36 = v47;
      v22 = (uint64_t *)__p;
    }
    operator delete(v36);
  }
  if (v22)
  {
    v41 = v49;
    v42 = v22;
    if (v49 != v22)
    {
      do
      {
        v43 = (std::__shared_weak_count *)*(v41 - 1);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v41 -= 2;
      }
      while (v41 != v22);
      v42 = __p;
    }
    operator delete(v42);
  }
}

void sub_2080945B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_207CBE108((void **)va);
  sub_207CBE108((void **)va1);
  _Unwind_Resume(a1);
}

void sub_2080945D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_207CBE108((void **)va1);
  sub_207CBE108((void **)va);
  _Unwind_Resume(a1);
}

void sub_2080945F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_207CBE108((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080946F4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, char a4@<W3>, unint64_t a5@<X8>)
{
  unint64_t v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[3];
  _QWORD *v22;
  _BYTE v23[24];
  _BYTE *v24;
  void *v25;
  void *v26;
  void *__p;
  char v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v7 = a5;
  v31 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a5 = 0;
  LODWORD(a5) = *((char *)a1 + 23);
  v8 = (a5 & 0x80000000) != 0;
  v9 = (_BYTE *)a1[1];
  if ((a5 & 0x80000000) == 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  *(_QWORD *)(v7 + 8) = 0;
  a5 = a5;
  if (v8)
    a5 = (unint64_t)v9;
  v11 = (char *)v10 + a5;
  v12 = (_QWORD *)a2[3];
  if (!v12)
  {
    v22 = 0;
    *(_QWORD *)&v20 = v10;
    *((_QWORD *)&v20 + 1) = (char *)v10 + a5;
    goto LABEL_11;
  }
  if (v12 == a2)
  {
    v22 = v21;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v21);
    v13 = v22;
    *(_QWORD *)&v20 = v10;
    *((_QWORD *)&v20 + 1) = v11;
    if (v22)
      goto LABEL_13;
LABEL_11:
    v30 = 0;
    goto LABEL_16;
  }
  v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
  v22 = v13;
  *(_QWORD *)&v20 = v10;
  *((_QWORD *)&v20 + 1) = v11;
  if (!v13)
    goto LABEL_11;
LABEL_13:
  if (v13 == v21)
  {
    v30 = v29;
    (*(void (**)(_QWORD *, _BYTE *))(v21[0] + 24))(v21, v29);
  }
  else
  {
    v30 = v13;
    v22 = 0;
  }
LABEL_16:
  sub_208099880((uint64_t)v23, &v20, (uint64_t)v29, a3, a4);
  v14 = v30;
  if (v30 == v29)
  {
    v15 = 4;
    v14 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_21;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_21:
  sub_20809917C((uint64_t)v23, 1, (unsigned __int8 *)v7);
  if (v28 < 0)
    operator delete(__p);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  v16 = v24;
  if (v24 == v23)
  {
    v17 = 4;
    v16 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_30;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_30:
  result = v22;
  if (v22 == v21)
  {
    v19 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v19 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v19))();
}

void sub_208094904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2080949A0(uint64_t *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v3 = *a1;
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_207D006CC(&v8, (std::__shared_weak_count_vtbl **)&v10);
  v7 = v10;
  sub_207CFF9E4((uint64_t)&v8, v9[0]);
  sub_208092144(v3, (uint64_t)&v7);
  sub_207D0178C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_208094A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208094A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208094A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_208094A98(uint64_t *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v3 = *a1;
  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_207D006CC(&v8, (std::__shared_weak_count_vtbl **)&v10);
  v7 = v10;
  sub_207CFF9E4((uint64_t)&v8, v9[0]);
  sub_20809234C(v3, (uint64_t)&v7);
  sub_207D0178C(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_208094B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208094B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208094B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_208094B90(uint64_t *a1, _WORD *a2)
{
  uint64_t (**v4)();
  std::logic_error *exception;
  std::string v7;
  void *__p[2];
  uint64_t v9;

  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  sub_207EFCDF4(a1, (uint64_t)__p);
  v4 = (uint64_t (**)())sub_208094CE4((uint64_t)&off_24C084688, (const void **)__p);
  if (v4 == off_24C0846D8)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  *a2 = (v4 - &off_24C084688) >> 4;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_208094C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t sub_208094CE4(uint64_t a1, const void **a2)
{
  uint64_t v2;
  char v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  v2 = a1;
  v3 = *((_BYTE *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (*(_QWORD *)(a1 + 8) == v4 && !memcmp(*(const void **)a1, v5, v4))
    return v2;
  if (*(_QWORD *)(v2 + 24) != v4 || (v6 = v2 + 16, memcmp(*(const void **)(v2 + 16), v5, v4)))
  {
    if (*(_QWORD *)(v2 + 40) != v4 || (v6 = v2 + 32, memcmp(*(const void **)(v2 + 32), v5, v4)))
    {
      if (*(_QWORD *)(v2 + 56) != v4 || (v6 = v2 + 48, memcmp(*(const void **)(v2 + 48), v5, v4)))
      {
        if (*(_QWORD *)(v2 + 72) != v4 || (v6 = v2 + 64, memcmp(*(const void **)(v2 + 64), v5, v4)))
        {
          v2 += 80;
          return v2;
        }
      }
    }
  }
  return v6;
}

uint64_t **sub_208094DF0(uint64_t a1, const void **a2)
{
  uint64_t **v4;
  void *exception;
  char *v7;
  std::string v8;
  std::string v9;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v7 = (char *)sub_207D1E770((char *)a1);
      sub_207C96EE8(&v8, v7);
      sub_207C96E8C("cannot use operator[] with a string argument with ", &v8, &v9);
      sub_207D1E5F8(305, (uint64_t)&v9, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v4 = *(uint64_t ***)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *(_QWORD *)(a1 + 8) = v4;
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  return sub_207D1E7FC(v4, a2, (uint64_t)&unk_20822AD51, (__int128 **)&v9) + 7;
}

void sub_208094EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void sub_208094F44(uint64_t a1, unint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  int data_low;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  CFTypeID TypeID;
  std::__shared_weak_count_vtbl *v12;
  CFTypeID v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count_vtbl *v15;
  CFTypeID v16;
  _BOOL8 v17;
  std::__shared_weak_count_vtbl *v18;
  CFTypeID v19;
  const __CFArray *v20;
  std::string *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  CFIndex Count;
  CFIndex i;
  uint64_t v35;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *size;
  unint64_t *v41;
  unint64_t v42;
  std::string::size_type v43;
  unsigned __int8 *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  unint64_t *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  int v64;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  std::logic_error *exception;
  CFTypeID v72;
  std::string v73;
  _BYTE v74[8];
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::string __p;
  char v89;
  char v90;

  sub_207CFBA9C(&v86, (uint64_t)a3);
  sub_208092BEC((const void **)&v86, (uint64_t)&__p);
  if (!v90)
  {
    v70 = sub_207E0E368((uint64_t)&__p);
    sub_207F09168(v70);
  }
  data_low = LOWORD(__p.__r_.__value_.__l.__data_);
  v7 = v87;
  if (v87)
  {
    p_shared_owners = (unint64_t *)&v87->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  switch(data_low)
  {
    case 0:
      v10 = *a3;
      if (*a3 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v10) == TypeID))
      {
        sub_207E9D1F4(&v82, *a3, 1);
      }
      else
      {
        v82 = 0;
        v83 = 0;
      }
      sub_207E9D308(&v84, (uint64_t)&v82);
      sub_207D01AA0((CFNumberRef *)&v84);
      switch(__p.__r_.__value_.__s.__data_[0])
      {
        case 0:
          v43 = *(unsigned __int8 *)sub_2082062F0((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v43;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 1:
          v58 = *(unsigned __int16 *)sub_2082065D0((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v58;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 2:
          v60 = *(unsigned int *)sub_2082066B8((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v60;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 3:
          v62 = *(_QWORD *)sub_2082067A0((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v62;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 5:
          v57 = *(char *)sub_208206888((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v57;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 6:
          v59 = *(__int16 *)sub_208206970((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v59;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 7:
          v63 = *(int *)sub_208206A58((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v63;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 8:
          v61 = *(_QWORD *)sub_208206B40((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v61;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 0xB:
          *(double *)&v56 = *(float *)sub_208206C28((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 7;
          v73.__r_.__value_.__l.__size_ = v56;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        case 0xC:
          v55 = *(_QWORD *)sub_208206D10((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 7;
          v73.__r_.__value_.__l.__size_ = v55;
          v44 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
          break;
        default:
          sub_2082056D4(__p.__r_.__value_.__s.__data_[0]);
      }
      v64 = *v44;
      *v44 = v73.__r_.__value_.__s.__data_[0];
      v73.__r_.__value_.__s.__data_[0] = v64;
      v65 = *((_QWORD *)v44 + 1);
      *((_QWORD *)v44 + 1) = v73.__r_.__value_.__l.__size_;
      v73.__r_.__value_.__l.__size_ = v65;
      sub_207D20660((uint64_t *)&v73.__r_.__value_.__l.__size_, v64);
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v66 = v85;
      if (v85)
      {
        v67 = (unint64_t *)&v85->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      size = v83;
      if (!v83)
        return;
      v69 = (unint64_t *)&v83->__shared_owners_;
      do
        v42 = __ldaxr(v69);
      while (__stlxr(v42 - 1, v69));
      break;
    case 1:
      sub_207CF9014((CFIndex)*a3, &__p);
      v80 = 3;
      v21 = (std::string *)operator new(0x18uLL);
      *v21 = __p;
      memset(&__p, 0, sizeof(__p));
      v81 = (uint64_t)v21;
      v22 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
      v23 = *v22;
      *v22 = v80;
      v80 = v23;
      v24 = *((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = v81;
      v81 = v24;
      sub_207D20660(&v81, v23);
      if (v89 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v15 = *a3;
      v17 = v15 && (v16 = CFBooleanGetTypeID(), CFGetTypeID(v15) == v16) && CFBooleanGetValue((CFBooleanRef)v15) != 0;
      v78 = 4;
      v79 = v17;
      v30 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
      v31 = *v30;
      *v30 = 4;
      v78 = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v79;
      v79 = v32;
      sub_207D20660(&v79, v31);
      return;
    case 3:
      v18 = *a3;
      if (*a3 && (v19 = CFArrayGetTypeID(), CFGetTypeID(v18) == v19))
      {
        sub_207CB7A4C((std::__shared_weak_count_vtbl **)&__p, *a3, 1);
        v20 = (const __CFArray *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v20 = 0;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      }
      Count = CFArrayGetCount(v20);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          v35 = sub_2080926D0(a1, *a2);
          v73.__r_.__value_.__r.__words[0] = i;
          ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)__p.__r_.__value_.__l.__data_, i);
          sub_207CF871C(&v76, ValueAtIndex, 1);
          sub_208094F44(v35, &v73, &v76);
          v37 = v77;
          if (v77)
          {
            v38 = (unint64_t *)&v77->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        return;
      v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      break;
    case 4:
      v12 = *a3;
      if (*a3 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_207CF9D84(&v84, *a3, 1);
        v14 = v84;
      }
      else
      {
        v14 = 0;
        v84 = 0;
        v85 = 0;
      }
      v74[0] = 0;
      v75 = 0;
      sub_207CF9D84((std::__shared_weak_count_vtbl **)&__p, v14, 1);
      v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v25;
        do
          v28 = __ldxr(v26);
        while (__stxr(v28 + 1, v26));
        do
          v29 = __ldaxr(v26);
        while (__stlxr(v29 - 1, v26));
        if (!v29)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
        }
      }
      else
      {
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = __p.__r_.__value_.__r.__words[0];
      }
      v45 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v46 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      sub_20808F418(v74, &v73);
      v48 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      if (v73.__r_.__value_.__l.__size_)
      {
        v49 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (unsigned __int8 *)sub_2080926D0(a1, *a2);
      v52 = *v51;
      *v51 = v74[0];
      v74[0] = v52;
      v53 = *((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = v75;
      v75 = v53;
      sub_207D20660(&v75, v52);
      size = v85;
      if (!v85)
        return;
      v54 = (unint64_t *)&v85->__shared_owners_;
      do
        v42 = __ldaxr(v54);
      while (__stlxr(v42 - 1, v54));
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v72 = CFGetTypeID(*a3);
      sub_207D020C4(v72, &v73);
      sub_207C96E8C("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &v73, &__p);
      std::logic_error::logic_error(exception, &__p);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
}

void sub_208095764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32,char a33)
{
  uint64_t *v33;

  sub_207D20660(v33, a10);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_207C99D78((uint64_t)&a26);
  sub_207C99D78((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_208095918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  sub_207D04458((uint64_t)&a27);
  sub_207C99D78((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_208095934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208095948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_207C99D78((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20809595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_207C99D78((uint64_t)&a15);
  sub_207C99D78((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_208095978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_207C99D78((uint64_t)&a27);
  _Unwind_Resume(a1);
}

char *sub_20809598C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  char *v5;
  void *exception;
  char *v8;
  std::string v9;
  std::string v10;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v8 = (char *)sub_20809655C((char *)a1);
      sub_207C96EE8(&v9, v8);
      sub_207C96E8C("cannot use operator[] with a string argument with ", &v9, &v10);
      sub_207D1E5F8(305, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    v4 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v4 = (uint64_t *)operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v10.__r_.__value_.__s.__data_[0] = 0;
  v10.__r_.__value_.__l.__size_ = 0;
  v5 = sub_208096584(v4, a2, (unsigned __int8 *)&v10) + 24;
  sub_20806DC2C((void ***)&v10.__r_.__value_.__l.__size_, v10.__r_.__value_.__s.__data_[0]);
  return v5;
}

void sub_208095A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  void ***v12;
  void ***v13;

  v13 = v12;
  sub_20806DC2C(v13, a12);
  _Unwind_Resume(a1);
}

void sub_208095AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_208095B14(uint64_t a1, unint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  int data_low;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  CFTypeID TypeID;
  std::__shared_weak_count_vtbl *v12;
  CFTypeID v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count_vtbl *v15;
  CFTypeID v16;
  void **v17;
  std::__shared_weak_count_vtbl *v18;
  CFTypeID v19;
  const __CFArray *v20;
  void **v21;
  unsigned __int8 *v22;
  int v23;
  void **v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  CFIndex Count;
  CFIndex i;
  uint64_t v35;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *size;
  unint64_t *v41;
  unint64_t v42;
  std::string::size_type v43;
  unsigned __int8 *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  int v52;
  void **v53;
  unint64_t *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  int v64;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  std::logic_error *exception;
  CFTypeID v72;
  std::string v73;
  _BYTE v74[8];
  void **v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  char v78;
  void **v79;
  char v80;
  void **v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::string __p;
  char v89;
  char v90;

  sub_207CFBA9C(&v86, (uint64_t)a3);
  sub_208092BEC((const void **)&v86, (uint64_t)&__p);
  if (!v90)
  {
    v70 = sub_207E0E368((uint64_t)&__p);
    sub_207F09168(v70);
  }
  data_low = LOWORD(__p.__r_.__value_.__l.__data_);
  v7 = v87;
  if (v87)
  {
    p_shared_owners = (unint64_t *)&v87->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  switch(data_low)
  {
    case 0:
      v10 = *a3;
      if (*a3 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v10) == TypeID))
      {
        sub_207E9D1F4(&v82, *a3, 1);
      }
      else
      {
        v82 = 0;
        v83 = 0;
      }
      sub_207E9D308(&v84, (uint64_t)&v82);
      sub_207D01AA0((CFNumberRef *)&v84);
      switch(__p.__r_.__value_.__s.__data_[0])
      {
        case 0:
          v43 = *(unsigned __int8 *)sub_2082062F0((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v43;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 1:
          v58 = *(unsigned __int16 *)sub_2082065D0((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v58;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 2:
          v60 = *(unsigned int *)sub_2082066B8((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v60;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 3:
          v62 = *(_QWORD *)sub_2082067A0((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 6;
          v73.__r_.__value_.__l.__size_ = v62;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 5:
          v57 = *(char *)sub_208206888((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v57;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 6:
          v59 = *(__int16 *)sub_208206970((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v59;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 7:
          v63 = *(int *)sub_208206A58((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v63;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 8:
          v61 = *(_QWORD *)sub_208206B40((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 5;
          v73.__r_.__value_.__l.__size_ = v61;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 0xB:
          *(double *)&v56 = *(float *)sub_208206C28((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 7;
          v73.__r_.__value_.__l.__size_ = v56;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        case 0xC:
          v55 = *(_QWORD *)sub_208206D10((uint64_t)&__p);
          v73.__r_.__value_.__s.__data_[0] = 7;
          v73.__r_.__value_.__l.__size_ = v55;
          v44 = (unsigned __int8 *)sub_208092A30(a1, *a2);
          break;
        default:
          sub_2082056D4(__p.__r_.__value_.__s.__data_[0]);
      }
      v64 = *v44;
      *v44 = v73.__r_.__value_.__s.__data_[0];
      v73.__r_.__value_.__s.__data_[0] = v64;
      v65 = *((_QWORD *)v44 + 1);
      *((_QWORD *)v44 + 1) = v73.__r_.__value_.__l.__size_;
      v73.__r_.__value_.__l.__size_ = v65;
      sub_20806DC2C((void ***)&v73.__r_.__value_.__l.__size_, v64);
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v66 = v85;
      if (v85)
      {
        v67 = (unint64_t *)&v85->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      size = v83;
      if (!v83)
        return;
      v69 = (unint64_t *)&v83->__shared_owners_;
      do
        v42 = __ldaxr(v69);
      while (__stlxr(v42 - 1, v69));
      break;
    case 1:
      sub_207CF9014((CFIndex)*a3, &__p);
      v80 = 3;
      v21 = (void **)operator new(0x18uLL);
      *(std::string *)v21 = __p;
      memset(&__p, 0, sizeof(__p));
      v81 = v21;
      v22 = (unsigned __int8 *)sub_208092A30(a1, *a2);
      v23 = *v22;
      *v22 = v80;
      v80 = v23;
      v24 = (void **)*((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = v81;
      v81 = v24;
      sub_20806DC2C(&v81, v23);
      if (v89 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v15 = *a3;
      if (v15 && (v16 = CFBooleanGetTypeID(), CFGetTypeID(v15) == v16))
        v17 = (void **)(CFBooleanGetValue((CFBooleanRef)v15) != 0);
      else
        v17 = 0;
      v78 = 4;
      v79 = v17;
      v30 = (unsigned __int8 *)sub_208092A30(a1, *a2);
      v31 = *v30;
      *v30 = 4;
      v78 = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v79;
      v79 = v32;
      sub_20806DC2C(&v79, v31);
      return;
    case 3:
      v18 = *a3;
      if (*a3 && (v19 = CFArrayGetTypeID(), CFGetTypeID(v18) == v19))
      {
        sub_207CB7A4C((std::__shared_weak_count_vtbl **)&__p, *a3, 1);
        v20 = (const __CFArray *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        v20 = 0;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      }
      Count = CFArrayGetCount(v20);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          v35 = sub_208092A30(a1, *a2);
          v73.__r_.__value_.__r.__words[0] = i;
          ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)__p.__r_.__value_.__l.__data_, i);
          sub_207CF871C(&v76, ValueAtIndex, 1);
          sub_208095B14(v35, &v73, &v76);
          v37 = v77;
          if (v77)
          {
            v38 = (unint64_t *)&v77->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        return;
      v41 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      break;
    case 4:
      v12 = *a3;
      if (*a3 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_207CF9D84(&v84, *a3, 1);
        v14 = v84;
      }
      else
      {
        v14 = 0;
        v84 = 0;
        v85 = 0;
      }
      v74[0] = 0;
      v75 = 0;
      sub_207CF9D84((std::__shared_weak_count_vtbl **)&__p, v14, 1);
      v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v25;
        do
          v28 = __ldxr(v26);
        while (__stxr(v28 + 1, v26));
        do
          v29 = __ldaxr(v26);
        while (__stlxr(v29 - 1, v26));
        if (!v29)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
        }
      }
      else
      {
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = __p.__r_.__value_.__r.__words[0];
      }
      v45 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v46 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      sub_20809028C(v74, &v73);
      v48 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      if (v73.__r_.__value_.__l.__size_)
      {
        v49 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (unsigned __int8 *)sub_208092A30(a1, *a2);
      v52 = *v51;
      *v51 = v74[0];
      v74[0] = v52;
      v53 = (void **)*((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = v75;
      v75 = v53;
      sub_20806DC2C(&v75, v52);
      size = v85;
      if (!v85)
        return;
      v54 = (unint64_t *)&v85->__shared_owners_;
      do
        v42 = __ldaxr(v54);
      while (__stlxr(v42 - 1, v54));
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v72 = CFGetTypeID(*a3);
      sub_207D020C4(v72, &v73);
      sub_207C96E8C("Dictionary to convert to json must only contain Number, String, Bool, Array or Dictionary, but has ", &v73, &__p);
      std::logic_error::logic_error(exception, &__p);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
}

void sub_208096334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *__p,uint64_t a32,char a33)
{
  void ***v33;

  sub_20806DC2C(v33, a10);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_207C99D78((uint64_t)&a26);
  sub_207C99D78((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_2080964E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  sub_207D04458((uint64_t)&a27);
  sub_207C99D78((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_208096504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_208096518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_207C99D78((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20809652C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_207C99D78((uint64_t)&a15);
  sub_207C99D78((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_208096548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_207C99D78((uint64_t)&a27);
  _Unwind_Resume(a1);
}

const char *sub_20809655C(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_24C084720[v1];
}

char *sub_208096584(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char *v15;

  v7 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v8 = *(_BYTE *)(a2 + 23);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    if (v8 >= 0)
      v10 = (unsigned __int8 *)a2;
    else
      v10 = *(unsigned __int8 **)a2;
    do
    {
      v11 = *(unsigned __int8 *)(v7 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v7 + 23);
      else
        v12 = *(_QWORD *)(v7 + 8);
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v10, *(_QWORD *)(v7 + 8)))
            return (char *)v7;
        }
        else
        {
          if (!*(_BYTE *)(v7 + 23))
            return (char *)v7;
          v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == v10[v13])
          {
            if (v11 == ++v13)
              return (char *)v7;
          }
        }
      }
      v7 += 40;
    }
    while (v7 != v6);
  }
  if (v6 >= a1[2])
  {
    v15 = sub_2080966E4(a1, a2, a3);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_207CA40D8((_BYTE *)v6, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v14 = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v6 = v14;
    }
    sub_2080968B4(v6 + 24, a3);
    v15 = (char *)(v6 + 40);
    a1[1] = v6 + 40;
  }
  a1[1] = (uint64_t)v15;
  return v15 - 40;
}

void sub_2080966BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2080966C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_2080966E4(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  void ***v11;
  void ***v12;
  uint64_t v13;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_20806DC18();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_207CA3AB8();
    v9 = operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(&v9[40 * v4], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  sub_2080968B4((uint64_t)&v9[40 * v4 + 24], a3);
  sub_208096EBC((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, (uint64_t)&v9[40 * v4], (uint64_t)&v9[40 * v4]);
  v11 = (void ***)*a1;
  v12 = (void ***)a1[1];
  *a1 = v13;
  a1[1] = (uint64_t)(v10 + 40);
  a1[2] = (uint64_t)&v9[40 * v8];
  while (v12 != v11)
  {
    sub_20806DC2C(v12 - 1, *((unsigned __int8 *)v12 - 16));
    if (*((char *)v12 - 17) < 0)
      operator delete(*(v12 - 5));
    v12 -= 5;
  }
  if (v11)
    operator delete(v11);
  return v10 + 40;
}

void sub_20809687C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_208096E4C((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_208096E4C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080968B4(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  __int128 **v14;
  uint64_t *v15;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (__int128 **)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_208096A88(v4, *v14, v14[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v14[1] - (char *)*v14) >> 3));
      goto LABEL_13;
    case 2:
      v15 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_208096C4C(v4, *v15, v15[1], (v15[1] - *v15) >> 4);
      goto LABEL_13;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_207CA40D8(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_13;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_13;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_13;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_207CF94B8();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_13:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_208096A28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208096A3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208096A50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_208096A64(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_208096A88(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_20806DC18();
    result = operator new(40 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[5 * a4];
    v10 = result;
    if (a2 == a3)
    {
      v8 = result;
    }
    else
    {
      v8 = result;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          sub_207CA40D8(v8, *(void **)a2, *((_QWORD *)a2 + 1));
        }
        else
        {
          v9 = *a2;
          v8[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)v8 = v9;
        }
        result = (_QWORD *)sub_2080968B4(v8 + 3, (char *)a2 + 24);
        a2 = (__int128 *)((char *)a2 + 40);
        v8 = v10 + 5;
        v10 += 5;
      }
      while (a2 != a3);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_208096B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20806DB78(&a9);
  _Unwind_Resume(a1);
}

void sub_208096BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_208096BE0((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_20806DB78(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208096BE0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      sub_20806DC2C((void ***)(v3 - 8), *(unsigned __int8 *)(v3 - 16));
      if (*(char *)(v3 - 17) < 0)
        operator delete(*(void **)(v3 - 40));
      v3 -= 40;
    }
  }
  return a1;
}

_QWORD *sub_208096C4C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_20806DC18();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_2080968B4(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_208096D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_208096D4C(&a9);
  _Unwind_Resume(a1);
}

void sub_208096D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_208096DE8((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_208096D4C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_208096D4C(void ***result)
{
  void ***v1;
  void **v2;
  void ***v3;
  void ***v4;
  void *v5;
  void ***v6;
  void ***v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void ***)**result;
    if (v3)
    {
      v4 = (void ***)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_20806DC2C(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_208096DE8(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void ***v4;
  void ***v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(void *****)(a1 + 16);
    v3 = **(void *****)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_20806DC2C(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

uint64_t sub_208096E4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_20806DC2C((void ***)(i - 8), *(unsigned __int8 *)(i - 16));
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_208096EBC(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void **v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;

  v7 = a7;
  v13 = a6;
  v14 = a7;
  if (a3 != a5)
  {
    v9 = (void **)a3;
    do
    {
      v10 = (__int128 *)(v9 - 5);
      if (*((char *)v9 - 17) < 0)
      {
        sub_207CA40D8((_BYTE *)(v7 - 40), *(v9 - 5), (unint64_t)*(v9 - 4));
      }
      else
      {
        v11 = *v10;
        *(_QWORD *)(v7 - 24) = *(v9 - 3);
        *(_OWORD *)(v7 - 40) = v11;
      }
      sub_2080968B4(v7 - 16, (unsigned __int8 *)v9 - 16);
      v7 = v14 - 40;
      v14 -= 40;
      v9 -= 5;
    }
    while (v10 != a5);
    return v13;
  }
  return a6;
}

void sub_208096F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_208096FB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208096F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;

  if (*(char *)(v9 - 17) < 0)
    operator delete(*v10);
  sub_208096FB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208096FB8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_20806DC2C((void ***)(v3 + 32), *(unsigned __int8 *)(v3 + 24));
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 40;
    }
  }
  return a1;
}

uint64_t sub_208097024(uint64_t a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770((char *)a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("cannot use operator[] with a numeric argument with ", &v6, &v7);
    sub_207D1E5F8(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_2080970D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

std::__shared_weak_count_vtbl **sub_208097130(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (cf)
    CFRetain(cf);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!a3)
    return a1;
  v12 = (unint64_t *)&a3->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
  std::__shared_weak_count::__release_weak(a3);
  return a1;
}

void sub_208097240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_208097254(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20809726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_208097288(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_207D1E770(a1);
      sub_207C96EE8(&v7, v6);
      sub_207C96E8C("type must be number, but is ", &v7, &v8);
      sub_207D1E5F8(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (unint64_t)result;
  return result;
}

void sub_208097360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_2080973D0(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_207D1E770(a1);
      sub_207C96EE8(&v7, v6);
      sub_207C96E8C("type must be number, but is ", &v7, &v8);
      sub_207D1E5F8(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (uint64_t)result;
  return result;
}

void sub_2080974A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_208097518(uint64_t *a1, double *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *(unsigned __int8 *)a1;
  switch(v3)
  {
    case 5:
      result = (double)a1[1];
      *a2 = result;
      break;
    case 7:
      result = *((double *)a1 + 1);
      *a2 = result;
      break;
    case 6:
      result = (double)(unint64_t)a1[1];
      *a2 = result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_207D1E770((char *)a1);
      sub_207C96EE8(&v7, v6);
      sub_207C96E8C("type must be number, but is ", &v7, &v8);
      sub_207D1E5F8(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return result;
}

void sub_208097610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_208097680(uint64_t a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_20809655C((char *)a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("cannot use operator[] with a numeric argument with ", &v6, &v7);
    sub_207D1E5F8(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_20809772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_20809778C(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20809655C(a1);
      sub_207C96EE8(&v7, v6);
      sub_207C96E8C("type must be number, but is ", &v7, &v8);
      sub_207D1E5F8(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (unint64_t)result;
  return result;
}

void sub_208097864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_2080978D4(char *a1, _QWORD *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *a1;
  if (v3 == 5)
    goto LABEL_4;
  if (v3 != 7)
  {
    if (v3 != 6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20809655C(a1);
      sub_207C96EE8(&v7, v6);
      sub_207C96E8C("type must be number, but is ", &v7, &v8);
      sub_207D1E5F8(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
LABEL_4:
    *a2 = *((_QWORD *)a1 + 1);
    return result;
  }
  result = *((double *)a1 + 1);
  *a2 = (uint64_t)result;
  return result;
}

void sub_2080979AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_208097A1C(uint64_t *a1, double *a2)
{
  int v3;
  double result;
  void *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v3 = *(unsigned __int8 *)a1;
  switch(v3)
  {
    case 5:
      result = (double)a1[1];
      *a2 = result;
      break;
    case 7:
      result = *((double *)a1 + 1);
      *a2 = result;
      break;
    case 6:
      result = (double)(unint64_t)a1[1];
      *a2 = result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v6 = (char *)sub_20809655C((char *)a1);
      sub_207C96EE8(&v7, v6);
      sub_207C96E8C("type must be number, but is ", &v7, &v8);
      sub_207D1E5F8(302, (uint64_t)&v8, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return result;
}

void sub_208097B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

char *sub_208097B84(char *result, _BYTE *a2)
{
  char *v2;
  void *exception;
  char *v4;
  std::string v5;
  std::string v6;

  v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (char *)sub_20809655C(v2);
    sub_207C96EE8(&v5, v4);
    sub_207C96E8C("type must be BOOLean, but is ", &v5, &v6);
    sub_207D1E5F8(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  *a2 = result[8];
  return result;
}

void sub_208097C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void **sub_208097C8C(void **result, uint64_t a2)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  __int128 v5;
  void *v6;
  size_t v7;
  void *exception;
  char *v9;
  std::string v10;
  std::string v11;

  v2 = (char *)result;
  if (*(_BYTE *)result != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = (char *)sub_20809655C(v2);
    sub_207C96EE8(&v10, v9);
    sub_207C96E8C("type must be string, but is ", &v10, &v11);
    sub_207D1E5F8(302, (uint64_t)&v11, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  v3 = (unsigned __int8 *)result[1];
  if (v3 != (unsigned __int8 *)a2)
  {
    v4 = v3[23];
    if (*(char *)(a2 + 23) < 0)
    {
      if ((v4 & 0x80u) == 0)
        v6 = result[1];
      else
        v6 = *(void **)v3;
      if ((v4 & 0x80u) == 0)
        v7 = v3[23];
      else
        v7 = *((_QWORD *)v3 + 1);
      return sub_207CC2244((void **)a2, v6, v7);
    }
    else if ((v3[23] & 0x80) != 0)
    {
      return (void **)sub_207CC2180((_QWORD *)a2, *(void **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

void sub_208097DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_208097E18(uint64_t a1, void *key, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *value;
  std::__shared_weak_count *v20;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  sub_207CFBA9C((std::__shared_weak_count_vtbl **)&value, a3);
  v12 = value;
  v11 = v20;
  if (!v20)
    goto LABEL_16;
  v13 = (unint64_t *)&v20->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (v15)
  {
LABEL_16:
    if (!v12)
      goto LABEL_18;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (v12)
LABEL_17:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, value);
LABEL_18:
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_208097F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_208097F8C(uint64_t a1)
{
  void *exception;
  _QWORD v3[3];

  if (**(_BYTE **)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v3, "cannot use key() for non-object iterators");
    sub_207D1E424(207, (uint64_t)v3, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_208098018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL sub_208098050(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v7, "cannot compare iterators of different containers");
    sub_207D1E424(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_208098114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

_BYTE *sub_208098150(uint64_t a1)
{
  _BYTE *result;
  int v3;
  void *v4;
  void *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 24);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v6, "cannot get value");
    sub_207D1E424(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v6, "cannot get value");
    sub_207D1E424(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  return result;
}

void sub_208098274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080982B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v8;
  _BYTE **v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  const void **v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  const void *v23;
  size_t v24;
  uint64_t *v25;
  _QWORD *v26;
  const void *v27;
  const void *v28;
  int v29;
  const void *v30;
  size_t v31;
  size_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  __int128 v36;
  uint64_t *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned __int8 v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  void *exception;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54[3];
  char v55;

  v8 = a2;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v9 = (_BYTE **)(a2 + 16);
    v10 = 32 * a3;
    while (1)
    {
      v11 = *v9;
      if (**v9 != 2
        || *(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1) != 32
        || *(_BYTE *)sub_208097024((uint64_t)v11, 0) != 3)
      {
        break;
      }
      v9 += 4;
      v10 -= 32;
      if (!v10)
        goto LABEL_7;
    }
    v12 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_47:
      if (a5 == 2)
        v38 = 0;
      else
        v38 = v12;
      if (a5 != 1)
        LOBYTE(v12) = 1;
      if ((v12 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_207C96EE8(&v53, "cannot create object from initializer list");
        sub_207D1E5F8(301, (uint64_t)&v53, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
      }
      v13 = v8 + 32 * a3;
      if (!v38)
        goto LABEL_54;
      goto LABEL_9;
    }
  }
  else
  {
LABEL_7:
    v12 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_47;
  }
  v13 = v8 + 32 * a3;
  if (v12)
  {
LABEL_9:
    *(_BYTE *)a1 = 1;
    v14 = operator new(0x18uLL);
    v14[2] = 0;
    v14[1] = 0;
    *v14 = v14 + 1;
    *(_QWORD *)(a1 + 8) = v14;
    if (!a3)
      return a1;
    v51 = v13;
LABEL_13:
    v15 = *(_QWORD *)(v8 + 16);
    if (*(_BYTE *)(v8 + 24))
    {
      LOBYTE(v53) = *(_BYTE *)v15;
      v16 = *(_QWORD *)(v15 + 8);
      v54[0] = v16;
      *(_BYTE *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
    }
    else
    {
      sub_207D1D968((uint64_t)&v53, (unsigned __int8 *)v15);
      v16 = v54[0];
    }
    v17 = *(uint64_t ***)(a1 + 8);
    v18 = *(_QWORD *)v16;
    v19 = *(const void ***)(*(_QWORD *)v16 + 8);
    v21 = (uint64_t *)(v17 + 1);
    v20 = v17[1];
    if (!v20)
    {
      v25 = (uint64_t *)(v17 + 1);
      goto LABEL_44;
    }
    v22 = *((char *)v19 + 23);
    if (v22 >= 0)
      v23 = v19;
    else
      v23 = *v19;
    if (v22 >= 0)
      v24 = *((unsigned __int8 *)v19 + 23);
    else
      v24 = (size_t)v19[1];
    while (1)
    {
      v25 = v20;
      v28 = (const void *)v20[4];
      v26 = v20 + 4;
      v27 = v28;
      v29 = *((char *)v26 + 23);
      if (v29 >= 0)
        v30 = v26;
      else
        v30 = v27;
      if (v29 >= 0)
        v31 = *((unsigned __int8 *)v26 + 23);
      else
        v31 = v26[1];
      if (v31 >= v24)
        v32 = v24;
      else
        v32 = v31;
      v33 = memcmp(v23, v30, v32);
      if (v33)
      {
        if (v33 < 0)
          goto LABEL_23;
LABEL_37:
        v34 = memcmp(v30, v23, v32);
        if (v34)
        {
          if ((v34 & 0x80000000) == 0)
            goto LABEL_12;
        }
        else if (v31 >= v24)
        {
          goto LABEL_12;
        }
        v20 = (uint64_t *)v25[1];
        if (!v20)
        {
          v21 = v25 + 1;
LABEL_44:
          v35 = operator new(0x48uLL);
          v36 = *(_OWORD *)v19;
          v35[6] = v19[2];
          *((_OWORD *)v35 + 2) = v36;
          v19[1] = 0;
          v19[2] = 0;
          *v19 = 0;
          *((_BYTE *)v35 + 56) = *(_BYTE *)(v18 + 16);
          v35[8] = *(_QWORD *)(v18 + 24);
          *(_BYTE *)(v18 + 16) = 0;
          *(_QWORD *)(v18 + 24) = 0;
          *v35 = 0;
          v35[1] = 0;
          v35[2] = v25;
          *v21 = (uint64_t)v35;
          v37 = (uint64_t *)**v17;
          if (v37)
          {
            *v17 = v37;
            v35 = (_QWORD *)*v21;
          }
          sub_207CC24B4(v17[1], v35);
          v17[2] = (uint64_t *)((char *)v17[2] + 1);
LABEL_12:
          sub_207D20660(v54, v53);
          v8 += 32;
          if (v8 == v51)
            return a1;
          goto LABEL_13;
        }
      }
      else
      {
        if (v24 >= v31)
          goto LABEL_37;
LABEL_23:
        v20 = (uint64_t *)*v25;
        v21 = v25;
        if (!*v25)
          goto LABEL_44;
      }
    }
  }
LABEL_54:
  *(_BYTE *)a1 = 2;
  v39 = operator new(0x18uLL);
  v39[1] = 0;
  v39[2] = 0;
  *v39 = 0;
  v54[2] = (uint64_t)v39;
  v55 = 0;
  v40 = v13 - v8;
  if (v13 != v8)
  {
    if (v40 < 0)
      sub_207D159B0();
    v41 = (char *)operator new((unint64_t)v40 >> 1);
    *v39 = v41;
    v39[1] = v41;
    v39[2] = &v41[16 * (v40 >> 5)];
    if (a3)
    {
      v42 = 0;
      v43 = 32 * a3;
      v44 = (_BYTE *)(v8 + 24);
      do
      {
        v48 = *((_QWORD *)v44 - 1);
        if (*v44)
        {
          v45 = *(_BYTE *)v48;
          v46 = *(_QWORD *)(v48 + 8);
          *(_BYTE *)v48 = 0;
          *(_QWORD *)(v48 + 8) = 0;
        }
        else
        {
          sub_207D1D968((uint64_t)&v53, (unsigned __int8 *)v48);
          v45 = v53;
          v46 = v54[0];
        }
        v47 = (unsigned __int8 *)&v41[v42];
        *v47 = v45;
        *((_QWORD *)v47 + 1) = v46;
        LOBYTE(v53) = 0;
        v54[0] = 0;
        sub_207D20660(v54, 0);
        v42 += 16;
        v44 += 32;
        v43 -= 32;
      }
      while (v43);
      v41 += v42;
    }
    v39[1] = v41;
  }
  *(_QWORD *)(a1 + 8) = v39;
  return a1;
}

void sub_2080986A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_207D1E224((void ***)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_2080986BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  for (; v9; v9 -= 16)
    sub_207D20660((uint64_t *)(v8 + v9 - 8), *(unsigned __int8 *)(v8 + v9 - 16));
  v7[1] = v8;
  sub_207D1E224((void ***)va);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_2080986F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, unsigned __int8 a12)
{
  sub_207D20660(a10, a12);
  _Unwind_Resume(a1);
}

void sub_208098710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_208098748(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    sub_20806DC2C((void ***)(v4 + 8), v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20809879C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  _BYTE **v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void **v18;
  int v19;
  void **v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned __int8 v26;
  void **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  void *exception;
  uint64_t v32;
  void **v33[3];
  char v34;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v10 = (_BYTE **)(a2 + 16);
    v11 = 32 * a3;
    while (1)
    {
      v12 = *v10;
      if (**v10 != 2
        || *(_QWORD *)(*((_QWORD *)v12 + 1) + 8) - **((_QWORD **)v12 + 1) != 32
        || *(_BYTE *)sub_208097680((uint64_t)v12, 0) != 3)
      {
        break;
      }
      v10 += 4;
      v11 -= 32;
      if (!v11)
        goto LABEL_7;
    }
    v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2)
        v19 = 0;
      else
        v19 = v13;
      if (a5 != 1)
        LOBYTE(v13) = 1;
      if ((v13 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_207C96EE8(&v32, "cannot create object from initializer list");
        sub_207D1E5F8(301, (uint64_t)&v32, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
      }
      if (!v19)
        goto LABEL_24;
LABEL_9:
      *(_BYTE *)a1 = 1;
      v14 = operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      *(_QWORD *)(a1 + 8) = v14;
      if (a3)
      {
        v15 = 32 * a3;
        v16 = (_BYTE *)(a2 + 24);
        do
        {
          v17 = *((_QWORD *)v16 - 1);
          if (*v16)
          {
            LOBYTE(v32) = *(_BYTE *)v17;
            v18 = *(void ***)(v17 + 8);
            v33[0] = v18;
            *(_BYTE *)v17 = 0;
            *(_QWORD *)(v17 + 8) = 0;
          }
          else
          {
            sub_2080968B4((uint64_t)&v32, (unsigned __int8 *)v17);
            v18 = v33[0];
          }
          sub_208096584(*(uint64_t **)(a1 + 8), *((_QWORD *)*v18 + 1), (unsigned __int8 *)*v18 + 16);
          sub_20806DC2C(v33, v32);
          v16 += 32;
          v15 -= 32;
        }
        while (v15);
      }
      return a1;
    }
  }
  else
  {
LABEL_7:
    v13 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_17;
  }
  if (v13)
    goto LABEL_9;
LABEL_24:
  *(_BYTE *)a1 = 2;
  v20 = (void **)operator new(0x18uLL);
  v20[1] = 0;
  v20[2] = 0;
  *v20 = 0;
  v33[2] = v20;
  v34 = 0;
  v21 = 32 * a3;
  if (a2 + 32 * a3 != a2)
  {
    if (v21 < 0)
      sub_20806DC18();
    v22 = (char *)operator new((unint64_t)v21 >> 1);
    *v20 = v22;
    v20[1] = v22;
    v20[2] = &v22[16 * (v21 >> 5)];
    if (a3)
    {
      v23 = 0;
      v24 = 32 * a3;
      v25 = (_BYTE *)(a2 + 24);
      do
      {
        v29 = *((_QWORD *)v25 - 1);
        if (*v25)
        {
          v26 = *(_BYTE *)v29;
          v27 = *(void ***)(v29 + 8);
          *(_BYTE *)v29 = 0;
          *(_QWORD *)(v29 + 8) = 0;
        }
        else
        {
          sub_2080968B4((uint64_t)&v32, (unsigned __int8 *)v29);
          v26 = v32;
          v27 = v33[0];
        }
        v28 = (unsigned __int8 *)&v22[v23];
        *v28 = v26;
        *((_QWORD *)v28 + 1) = v27;
        LOBYTE(v32) = 0;
        v33[0] = 0;
        sub_20806DC2C(v33, 0);
        v23 += 16;
        v25 += 32;
        v24 -= 32;
      }
      while (v24);
      v22 += v23;
    }
    v20[1] = v22;
  }
  *(_QWORD *)(a1 + 8) = v20;
  return a1;
}

void sub_208098A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_208096D4C((void ***)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_208098A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  for (; v7; v7 -= 16)
    sub_20806DC2C((void ***)(v6 + v7 - 8), *(unsigned __int8 *)(v6 + v7 - 16));
  v5[1] = v6;
  sub_208096D4C((void ***)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_208098A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_208098AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_208098AE4(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v48;
  char *v49;
  uint64_t v50[2];
  char *v51;
  _QWORD *v52;

  v4 = a2;
  if (!a3)
    return (uint64_t)v4;
  v8 = a1[2];
  v9 = a1[1];
  if (a3 <= (uint64_t)(v8 - v9) >> 4)
  {
    v15 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v16 = 16 * a3;
    v17 = a1[1];
    v18 = a3;
    if (a3 <= v15)
    {
LABEL_17:
      v21 = &v4[v16];
      v22 = v17 - v16;
      v23 = v17;
      if (v17 - v16 < v9)
      {
        v23 = v17;
        do
        {
          *(_BYTE *)v23 = *(_BYTE *)v22;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)(v22 + 8);
          *(_BYTE *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          v23 += 16;
          v22 += 16;
        }
        while (v22 < v9);
      }
      a1[1] = v23;
      if ((unsigned __int8 *)v17 != v21)
      {
        v24 = (_QWORD *)(v17 - 8);
        v25 = 16 * ((uint64_t)(v17 - (_QWORD)v21) >> 4);
        do
        {
          v26 = &v4[v25];
          v27 = v4[v25 - 16];
          v28 = *(_QWORD *)&v4[v25 - 8];
          *(v26 - 16) = 0;
          *((_QWORD *)v26 - 1) = 0;
          v29 = *((unsigned __int8 *)v24 - 8);
          *((_BYTE *)v24 - 8) = v27;
          LOBYTE(v49) = v29;
          v30 = *v24;
          *v24 = v28;
          v24 -= 2;
          v50[0] = v30;
          sub_207D20660(v50, v29);
          v25 -= 16;
        }
        while (v25);
      }
      if (v4 <= a4)
      {
        if (a1[1] <= (unint64_t)a4)
          v31 = 0;
        else
          v31 = a3;
        a4 += 16 * v31;
      }
      v32 = v4;
      do
      {
        sub_207D1D968((uint64_t)&v49, a4);
        v33 = *v32;
        *v32 = v49;
        LOBYTE(v49) = v33;
        v34 = *((_QWORD *)v32 + 1);
        *((_QWORD *)v32 + 1) = v50[0];
        v50[0] = v34;
        sub_207D20660(v50, v33);
        v32 += 16;
        --v18;
      }
      while (v18);
      return (uint64_t)v4;
    }
    v19 = 0;
    v17 = v9 + 16 * (a3 - v15);
    v48 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v20 = v16 - 16 * v15;
    do
    {
      sub_207D1D968(v9 + v19, a4);
      v19 += 16;
    }
    while (v20 != v19);
    a1[1] = v17;
    if ((unsigned __int8 *)v9 != v4)
    {
      v18 = v48;
      goto LABEL_17;
    }
    return (uint64_t)v4;
  }
  v10 = (_BYTE *)*a1;
  v11 = a3 + ((uint64_t)(v9 - *a1) >> 4);
  if (v11 >> 60)
    sub_207D159B0();
  v12 = v8 - (_QWORD)v10;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  v52 = a1 + 2;
  if (v13)
  {
    if (v13 >> 60)
      sub_207CA3AB8();
    v14 = (char *)operator new(16 * v13);
  }
  else
  {
    v14 = 0;
  }
  v36 = (uint64_t)&v14[16 * ((v4 - v10) >> 4)];
  v49 = v14;
  v50[0] = v36;
  v50[1] = v36;
  v51 = &v14[16 * v13];
  v37 = 16 * a3;
  v38 = v36 + v37;
  do
  {
    sub_207D1D968(v36, a4);
    v36 += 16;
    v37 -= 16;
  }
  while (v37);
  v35 = v50[0];
  v39 = *a1;
  v40 = v50[0];
  if ((unsigned __int8 *)*a1 != v4)
  {
    v41 = v4;
    v40 = v50[0];
    do
    {
      v42 = *(v41 - 16);
      v41 -= 16;
      *(_BYTE *)(v40 - 16) = v42;
      v40 -= 16;
      *(_QWORD *)(v40 + 8) = *((_QWORD *)v41 + 1);
      *v41 = 0;
      *((_QWORD *)v41 + 1) = 0;
    }
    while (v41 != (unsigned __int8 *)v39);
  }
  v50[0] = v40;
  v43 = (unsigned __int8 *)a1[1];
  if (v43 != v4)
  {
    do
    {
      *(_BYTE *)v38 = *v4;
      *(_QWORD *)(v38 + 8) = *((_QWORD *)v4 + 1);
      *v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      v38 += 16;
      v4 += 16;
    }
    while (v4 != v43);
    v40 = v50[0];
    v4 = (unsigned __int8 *)a1[1];
  }
  v44 = (uint64_t *)*a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = (uint64_t)v51;
  if (v4 != (unsigned __int8 *)v44)
  {
    v45 = (uint64_t *)(v4 - 8);
    do
    {
      v46 = v45 - 1;
      sub_207D20660(v45, *((unsigned __int8 *)v45 - 8));
      v45 -= 2;
    }
    while (v46 != v44);
  }
  if (v44)
    operator delete(v44);
  return v35;
}

void sub_208098E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_208098E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D1D450((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_208098E30(void ***a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  void **v8;
  unint64_t v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  void **v23;
  void ***v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  void **v28;
  int v29;
  void **v30;
  unint64_t v31;
  unsigned __int8 *v32;
  int v33;
  void **v34;
  void **v35;
  void **v36;
  uint64_t v37;
  void **v38;
  void **v39;
  void **v40;
  unsigned __int8 *v41;
  char v42;
  unsigned __int8 *v43;
  void **v44;
  void ***v45;
  void ***v46;
  uint64_t v48;
  char *v49;
  void **v50[2];
  void **v51;
  _QWORD *v52;

  v4 = a2;
  if (!a3)
    return (void **)v4;
  v8 = a1[2];
  v9 = (unint64_t)a1[1];
  if (a3 <= (uint64_t)((uint64_t)v8 - v9) >> 4)
  {
    v15 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v16 = 16 * a3;
    v17 = a1[1];
    v18 = a3;
    if (a3 <= v15)
    {
LABEL_17:
      v21 = &v4[v16];
      v22 = (unint64_t)&v17[v16 / 0xFFFFFFFFFFFFFFF8];
      v23 = v17;
      if ((unint64_t)&v17[v16 / 0xFFFFFFFFFFFFFFF8] < v9)
      {
        v23 = v17;
        do
        {
          *(_BYTE *)v23 = *(_BYTE *)v22;
          v23[1] = *(void **)(v22 + 8);
          *(_BYTE *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          v23 += 2;
          v22 += 16;
        }
        while (v22 < v9);
      }
      a1[1] = v23;
      if (v17 != (void **)v21)
      {
        v24 = (void ***)(v17 - 1);
        v25 = 16 * (((char *)v17 - (char *)v21) >> 4);
        do
        {
          v26 = &v4[v25];
          v27 = v4[v25 - 16];
          v28 = *(void ***)&v4[v25 - 8];
          *(v26 - 16) = 0;
          *((_QWORD *)v26 - 1) = 0;
          v29 = *((unsigned __int8 *)v24 - 8);
          *((_BYTE *)v24 - 8) = v27;
          LOBYTE(v49) = v29;
          v30 = *v24;
          *v24 = v28;
          v24 -= 2;
          v50[0] = v30;
          sub_20806DC2C(v50, v29);
          v25 -= 16;
        }
        while (v25);
      }
      if (v4 <= a4)
      {
        if (a1[1] <= (void **)a4)
          v31 = 0;
        else
          v31 = a3;
        a4 += 16 * v31;
      }
      v32 = v4;
      do
      {
        sub_2080968B4((uint64_t)&v49, a4);
        v33 = *v32;
        *v32 = v49;
        LOBYTE(v49) = v33;
        v34 = (void **)*((_QWORD *)v32 + 1);
        *((void ***)v32 + 1) = v50[0];
        v50[0] = v34;
        sub_20806DC2C(v50, v33);
        v32 += 16;
        --v18;
      }
      while (v18);
      return (void **)v4;
    }
    v19 = 0;
    v17 = (void **)(v9 + 16 * (a3 - v15));
    v48 = (uint64_t)(v9 - (_QWORD)a2) >> 4;
    v20 = v16 - 16 * v15;
    do
    {
      sub_2080968B4(v9 + v19, a4);
      v19 += 16;
    }
    while (v20 != v19);
    a1[1] = v17;
    if ((unsigned __int8 *)v9 != v4)
    {
      v18 = v48;
      goto LABEL_17;
    }
    return (void **)v4;
  }
  v10 = *a1;
  v11 = a3 + ((uint64_t)(v9 - (_QWORD)*a1) >> 4);
  if (v11 >> 60)
    sub_20806DC18();
  v12 = (char *)v8 - (char *)v10;
  if (v12 >> 3 > v11)
    v11 = v12 >> 3;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v13 = 0xFFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  v52 = a1 + 2;
  if (v13)
  {
    if (v13 >> 60)
      sub_207CA3AB8();
    v14 = (char *)operator new(16 * v13);
  }
  else
  {
    v14 = 0;
  }
  v36 = (void **)&v14[16 * ((v4 - (unsigned __int8 *)v10) >> 4)];
  v49 = v14;
  v50[0] = v36;
  v50[1] = v36;
  v51 = (void **)&v14[16 * v13];
  v37 = 2 * a3;
  v38 = &v36[v37];
  do
  {
    sub_2080968B4((uint64_t)v36, a4);
    v36 += 2;
    v37 -= 2;
  }
  while (v37 * 8);
  v35 = v50[0];
  v39 = *a1;
  v40 = v50[0];
  if (*a1 != (void **)v4)
  {
    v41 = v4;
    v40 = v50[0];
    do
    {
      v42 = *(v41 - 16);
      v41 -= 16;
      *((_BYTE *)v40 - 16) = v42;
      v40 -= 2;
      v40[1] = (void *)*((_QWORD *)v41 + 1);
      *v41 = 0;
      *((_QWORD *)v41 + 1) = 0;
    }
    while (v41 != (unsigned __int8 *)v39);
  }
  v50[0] = v40;
  v43 = (unsigned __int8 *)a1[1];
  if (v43 != v4)
  {
    do
    {
      *(_BYTE *)v38 = *v4;
      v38[1] = (void *)*((_QWORD *)v4 + 1);
      *v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      v38 += 2;
      v4 += 16;
    }
    while (v4 != v43);
    v40 = v50[0];
    v4 = (unsigned __int8 *)a1[1];
  }
  v44 = *a1;
  *a1 = v40;
  a1[1] = v38;
  a1[2] = v51;
  if (v4 != (unsigned __int8 *)v44)
  {
    v45 = (void ***)(v4 - 8);
    do
    {
      v46 = v45 - 1;
      sub_20806DC2C(v45, *((unsigned __int8 *)v45 - 8));
      v45 -= 2;
    }
    while (v46 != (void ***)v44);
  }
  if (v44)
    operator delete(v44);
  return v35;
}

void sub_20809915C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_208099164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_208098748((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20809917C(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  void *exception;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  __int128 v31;
  uint64_t v32;
  std::exception v33;
  int v34;
  std::runtime_error v35;
  uint64_t v36;
  std::string v37;
  _BYTE v38[24];
  _BYTE *v39;
  unsigned __int8 *v40;
  __int128 v41;
  __int128 v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  _BYTE v47[24];
  _BYTE *v48;
  char v49;
  unsigned __int8 v50;
  uint64_t v51[2];

  v51[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
  {
    v7 = *(_BYTE *)(a1 + 184);
    v40 = a3;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = v7;
    sub_20809CF78(a1, &v40);
    if (a2)
    {
      v8 = sub_208099A00(a1 + 40);
      *(_DWORD *)(a1 + 32) = v8;
      if (v8 != 15)
      {
        sub_20809C79C(a1 + 40, &v37);
        v31 = *(_OWORD *)(a1 + 72);
        v32 = *(_QWORD *)(a1 + 88);
        v28 = 5;
        strcpy((char *)v27, "value");
        sub_20809C88C(a1, 0xFu, (const void **)v27, (uint64_t)__p);
        sub_207D1B330(101, (uint64_t *)&v31, (uint64_t)__p, (uint64_t)&v33);
        v43 = 1;
        if (v44)
        {
          exception = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)exception = off_24C072CF8;
          *((_DWORD *)exception + 2) = v34;
          std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v35);
          *(_QWORD *)exception = off_24C072DF8;
          *((_QWORD *)exception + 4) = v36;
          __cxa_throw(exception, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
        }
        v33.__vftable = (std::exception_vtbl *)off_24C072CF8;
        std::runtime_error::~runtime_error(&v35);
        std::exception::~exception(&v33);
        if (v30 < 0)
        {
          operator delete(__p[0]);
          if ((v28 & 0x80000000) == 0)
          {
LABEL_9:
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_10;
LABEL_46:
            operator delete(v37.__r_.__value_.__l.__data_);
            if (!v43)
              goto LABEL_41;
LABEL_11:
            v9 = *a3;
            *a3 = 9;
            v10 = *((_QWORD *)a3 + 1);
            *((_QWORD *)a3 + 1) = 0;
            v22 = v10;
            sub_207D20660(&v22, v9);
            goto LABEL_41;
          }
        }
        else if ((v28 & 0x80000000) == 0)
        {
          goto LABEL_9;
        }
        operator delete(v27[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_46;
      }
    }
LABEL_10:
    if (!v43)
      goto LABEL_41;
    goto LABEL_11;
  }
  if (v6 == a1)
  {
    v39 = v38;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v38);
  }
  else
  {
    v39 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  sub_207D1BF3C((uint64_t)&v40, (uint64_t)a3, (uint64_t)v38, *(_BYTE *)(a1 + 184));
  v11 = v39;
  if (v39 == v38)
  {
    v12 = 4;
    v11 = v38;
    goto LABEL_17;
  }
  if (v39)
  {
    v12 = 5;
LABEL_17:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  sub_20809BA84(a1, (uint64_t)&v40);
  if (a2)
  {
    v13 = sub_208099A00(a1 + 40);
    *(_DWORD *)(a1 + 32) = v13;
    if (v13 != 15)
    {
      sub_20809C79C(a1 + 40, &v37);
      v31 = *(_OWORD *)(a1 + 72);
      v32 = *(_QWORD *)(a1 + 88);
      v28 = 5;
      strcpy((char *)v27, "value");
      sub_20809C88C(a1, 0xFu, (const void **)v27, (uint64_t)__p);
      sub_207D1B330(101, (uint64_t *)&v31, (uint64_t)__p, (uint64_t)&v33);
      v46 = 1;
      if (v49)
      {
        v20 = __cxa_allocate_exception(0x28uLL);
        *(_QWORD *)v20 = off_24C072CF8;
        *((_DWORD *)v20 + 2) = v34;
        std::runtime_error::runtime_error((std::runtime_error *)v20 + 1, &v35);
        *(_QWORD *)v20 = off_24C072DF8;
        *((_QWORD *)v20 + 4) = v36;
        __cxa_throw(v20, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
      }
      v33.__vftable = (std::exception_vtbl *)off_24C072CF8;
      std::runtime_error::~runtime_error(&v35);
      std::exception::~exception(&v33);
      if (v30 < 0)
      {
        operator delete(__p[0]);
        if ((v28 & 0x80000000) == 0)
        {
LABEL_23:
          if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_24;
LABEL_28:
          operator delete(v37.__r_.__value_.__l.__data_);
          if (v46)
            goto LABEL_25;
          goto LABEL_29;
        }
      }
      else if ((v28 & 0x80000000) == 0)
      {
        goto LABEL_23;
      }
      operator delete(v27[0]);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_28;
    }
  }
LABEL_24:
  if (v46)
  {
LABEL_25:
    v14 = &v26;
    v15 = *a3;
    *a3 = 9;
    v25 = v15;
    v16 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    v26 = v16;
    goto LABEL_31;
  }
LABEL_29:
  if (*a3 != 9)
    goto LABEL_32;
  v14 = &v24;
  *a3 = 0;
  v23 = 9;
  v17 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  v24 = v17;
  v15 = 9;
LABEL_31:
  sub_207D20660(v14, v15);
LABEL_32:
  sub_207D20660(v51, v50);
  v18 = v48;
  if (v48 == v47)
  {
    v19 = 4;
    v18 = v47;
    goto LABEL_36;
  }
  if (v48)
  {
    v19 = 5;
LABEL_36:
    (*(void (**)(void))(*v18 + 8 * v19))();
  }
  if (v45)
    operator delete(v45);
  if (*((_QWORD *)&v42 + 1))
    operator delete(*((void **)&v42 + 1));
LABEL_41:
  if ((_QWORD)v41)
  {
    *((_QWORD *)&v41 + 1) = v41;
    operator delete((void *)v41);
  }
}

void sub_208099654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  std::runtime_error *v45;
  uint64_t v46;
  void *v48;

  std::runtime_error::~runtime_error(v45);
  std::exception::~exception(&a31);
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a41 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a41 & 0x80000000) == 0)
  {
LABEL_4:
    v48 = *(void **)(v46 - 200);
    if (!v48)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    *(_QWORD *)(v46 - 192) = v48;
    operator delete(v48);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a36);
  v48 = *(void **)(v46 - 200);
  if (!v48)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_2080997F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D1BE64(v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_208099808(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 96);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(_QWORD **)(a1 + 24);
  if (v3 == (_QWORD *)a1)
  {
    v4 = 4;
    v3 = (_QWORD *)a1;
    goto LABEL_10;
  }
  if (v3)
  {
    v4 = 5;
LABEL_10:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_208099880(uint64_t a1, _OWORD *a2, uint64_t a3, char a4, char a5)
{
  uint64_t v9;
  lconv *v10;
  int v11;

  v9 = *(_QWORD *)(a3 + 24);
  if (v9)
  {
    if (v9 == a3)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *a2;
  *(_BYTE *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = -1;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = "";
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v10 = localeconv();
  if (v10->decimal_point)
    v11 = *v10->decimal_point;
  else
    v11 = 46;
  *(_DWORD *)(a1 + 176) = v11;
  *(_BYTE *)(a1 + 184) = a4;
  *(_DWORD *)(a1 + 32) = sub_208099A00(a1 + 40);
  return a1;
}

void sub_20809996C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  sub_2080999B4(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_2080999B4(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    v2 = *(void **)(a1 + 56);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_208099A00(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (*(_QWORD *)(a1 + 32))
    goto LABEL_12;
  if (sub_20809B688(a1) == 239)
  {
    if (sub_20809B688(a1) == 187 && sub_20809B688(a1) == 191)
      goto LABEL_12;
    v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
LABEL_6:
    *(_QWORD *)(a1 + 104) = v2;
    return 14;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 24) = 1;
    --*(_QWORD *)(a1 + 32);
    if (v4 || (v3 = (_QWORD *)(a1 + 48), (v4 = *(_QWORD *)(a1 + 48)) != 0))
      *v3 = v4 - 1;
    if (*(_DWORD *)(a1 + 20) != -1)
      --*(_QWORD *)(a1 + 64);
LABEL_12:
    while (1)
    {
      sub_208099C8C(a1);
      if (!*(_BYTE *)(a1 + 16) || *(_DWORD *)(a1 + 20) != 47)
        break;
      if (!sub_208099EF8(a1))
        return 14;
    }
    result = 8;
    switch(*(_DWORD *)(a1 + 20))
    {
      case 0xFFFFFFFF:
      case 0:
        result = 15;
        break;
      case 0x22:
        result = sub_20809A018(a1);
        break;
      case 0x2C:
        result = 13;
        break;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        result = sub_20809AFB4(a1);
        break;
      case 0x3A:
        result = 12;
        break;
      case 0x5B:
        return result;
      case 0x5D:
        result = 10;
        break;
      case 0x66:
        if (sub_20809B688(a1) != 97
          || sub_20809B688(a1) != 108
          || sub_20809B688(a1) != 115
          || sub_20809B688(a1) != 101)
        {
          goto LABEL_38;
        }
        result = 2;
        break;
      case 0x6E:
        if (sub_20809B688(a1) != 117
          || sub_20809B688(a1) != 108
          || sub_20809B688(a1) != 108)
        {
          goto LABEL_38;
        }
        result = 3;
        break;
      case 0x74:
        if (sub_20809B688(a1) != 114
          || sub_20809B688(a1) != 117
          || sub_20809B688(a1) != 101)
        {
          goto LABEL_38;
        }
        result = 1;
        break;
      case 0x7B:
        result = 9;
        break;
      case 0x7D:
        result = 11;
        break;
      default:
LABEL_38:
        v2 = "invalid literal";
        goto LABEL_6;
    }
  }
  return result;
}

void sub_208099C8C(uint64_t a1)
{
  _QWORD *v2;
  int64x2_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  int64x2_t v30;

  v2 = (_QWORD *)(a1 + 56);
  v3 = vdupq_n_s64(1uLL);
  v30 = v3;
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v3);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v5 = *(_DWORD *)(a1 + 20);
      if (v5 == -1)
        return;
LABEL_8:
      v9 = *(_BYTE **)(a1 + 64);
      v8 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v9 < v8)
      {
        *v9 = v5;
        *(_QWORD *)(a1 + 64) = v9 + 1;
        v10 = *(_DWORD *)(a1 + 20) - 9;
        if (v10 > 0x17)
          return;
LABEL_40:
        switch(v10)
        {
          case 0u:
          case 4u:
          case 0x17u:
            continue;
          case 1u:
            v4 = *(_QWORD *)(a1 + 48) + 1;
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = v4;
            continue;
          default:
            return;
        }
      }
      v11 = (_BYTE *)*v2;
      v12 = (unint64_t)&v9[-*v2];
      v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0)
        sub_207CA420C();
      v14 = v8 - (_QWORD)v11;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)operator new(v15);
        v17 = &v16[v12];
        v16[v12] = v5;
        v18 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11)
          goto LABEL_37;
      }
      else
      {
        v16 = 0;
        v17 = &v9[-*v2];
        *(_BYTE *)v12 = v5;
        v18 = v12 + 1;
        if (v9 == v11)
        {
LABEL_37:
          *(_QWORD *)(a1 + 56) = v17;
          *(_QWORD *)(a1 + 64) = v18;
          *(_QWORD *)(a1 + 72) = &v16[v15];
          if (v9)
            operator delete(v9);
          v3 = v30;
          *(_QWORD *)(a1 + 64) = v18;
          v10 = *(_DWORD *)(a1 + 20) - 9;
          goto LABEL_40;
        }
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v19 = 0;
          goto LABEL_29;
        }
        v19 = v12 & 0xFFFFFFFFFFFFFFE0;
        v20 = &v16[v12 - 16];
        v21 = (__int128 *)(v9 - 16);
        v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 32;
        }
        while (v22);
        if (v12 == v19)
          goto LABEL_36;
        if ((v12 & 0x18) != 0)
        {
LABEL_29:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v16[&v9[-v19] - v11 - 8];
          v25 = (uint64_t *)&v9[-v19 - 8];
          v26 = v19 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *v25--;
            *(_QWORD *)v24 = v27;
            v24 -= 8;
            v26 += 8;
          }
          while (v26);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_36;
          goto LABEL_34;
        }
        v17 -= v19;
        v9 -= v19;
      }
LABEL_34:
      v28 = v17 - 1;
      do
      {
        v29 = *--v9;
        *v28-- = v29;
      }
      while (v9 != v11);
LABEL_36:
      v9 = (_BYTE *)*v2;
      v17 = v16;
      goto LABEL_37;
    }
    break;
  }
  v6 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
  }
  else
  {
    v7 = *v6;
    LOBYTE(v5) = *v6;
    *(_QWORD *)a1 = v6 + 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (v7 != -1)
      goto LABEL_8;
  }
}

uint64_t sub_208099EF8(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = sub_20809B688(a1);
  if (v2 == 42)
  {
    v5 = (uint64_t *)(a1 + 48);
    do
    {
      while (1)
      {
        v6 = sub_20809B688(a1);
        if (v6 != 42)
          break;
        if (sub_20809B688(a1) == 47)
          return 1;
        *(_BYTE *)(a1 + 24) = 1;
        v7 = *(_QWORD *)(a1 + 40);
        --*(_QWORD *)(a1 + 32);
        v8 = (_QWORD *)(a1 + 40);
        if (v7 || (v7 = *v5, v8 = (_QWORD *)(a1 + 48), *v5))
          *v8 = v7 - 1;
        if (*(_DWORD *)(a1 + 20) != -1)
          --*(_QWORD *)(a1 + 64);
      }
    }
    while ((v6 + 1) >= 2);
    result = 0;
    *(_QWORD *)(a1 + 104) = "invalid comment; missing closing '*/'";
  }
  else if (v2 == 47)
  {
    do
    {
      do
        v3 = sub_20809B688(a1) + 1;
      while (v3 >= 0xF);
    }
    while (((0x4803u >> v3) & 1) == 0);
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a1 + 104) = "invalid comment; expecting '/' or '*' after '/'";
  }
  return result;
}

uint64_t sub_20809A018(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  void **v11;
  size_t v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  unint64_t v31;
  __int128 v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  int v39;
  const char *v40;
  int v41;
  int v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  _BYTE *v56;
  int v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  char *v70;
  __int128 *v71;
  unint64_t v72;
  __int128 v73;
  char *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  std::string::value_type v79;
  int v80;
  char *v81;
  __int128 *v82;
  unint64_t v83;
  __int128 v84;
  char *v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  char *v94;
  char v95;
  int v96;
  int v97;
  size_t v98;
  void *v99;
  uint64_t v100;
  size_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int v107;
  _BYTE *v108;
  int v109;
  unint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  size_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  __int128 *v122;
  unint64_t v123;
  __int128 v124;
  char *v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char v130;
  int v131;
  void *v132;
  uint64_t v133;
  size_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int64x2_t v141;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v3 >= v5)
  {
    v7 = v5 - (_QWORD)v3;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10 + 1;
    *(_QWORD *)(a1 + 72) = &v10[v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *v3 = v4;
    v6 = v3 + 1;
  }
  v11 = (void **)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v6;
  v141 = vdupq_n_s64(1uLL);
  while (2)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v141);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v15 = *(_DWORD *)(a1 + 20);
      if (v15 == -1)
        goto LABEL_253;
    }
    else
    {
      v16 = *(_BYTE **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_253:
        v40 = "invalid string: missing closing quote";
        goto LABEL_251;
      }
      v17 = *v16;
      LOBYTE(v15) = *v16;
      *(_QWORD *)a1 = v16 + 1;
      *(_DWORD *)(a1 + 20) = v17;
      if (v17 == -1)
        goto LABEL_253;
    }
    v19 = *(_BYTE **)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v19 >= v18)
    {
      v21 = (_BYTE *)*v2;
      v22 = (unint64_t)&v19[-*v2];
      v23 = v22 + 1;
      if ((uint64_t)(v22 + 1) < 0)
        goto LABEL_286;
      v24 = v18 - (_QWORD)v21;
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x3FFFFFFFFFFFFFFFLL)
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)operator new(v25);
        v27 = &v26[v22];
        v26[v22] = v15;
        v20 = (uint64_t)&v26[v22 + 1];
        if (v19 == v21)
        {
LABEL_49:
          *(_QWORD *)(a1 + 56) = v27;
          *(_QWORD *)(a1 + 64) = v20;
          *(_QWORD *)(a1 + 72) = &v26[v25];
          if (v19)
            operator delete(v19);
          goto LABEL_51;
        }
      }
      else
      {
        v26 = 0;
        v27 = &v19[-*v2];
        *(_BYTE *)v22 = v15;
        v20 = v22 + 1;
        if (v19 == v21)
          goto LABEL_49;
      }
      if (v22 >= 8 && (unint64_t)(v21 - v26) >= 0x20)
      {
        if (v22 < 0x20)
        {
          v28 = 0;
          goto LABEL_41;
        }
        v28 = v22 & 0xFFFFFFFFFFFFFFE0;
        v29 = &v26[v22 - 16];
        v30 = (__int128 *)(v19 - 16);
        v31 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v32 = *v30;
          *((_OWORD *)v29 - 1) = *(v30 - 1);
          *(_OWORD *)v29 = v32;
          v29 -= 32;
          v30 -= 2;
          v31 -= 32;
        }
        while (v31);
        if (v22 == v28)
          goto LABEL_48;
        if ((v22 & 0x18) != 0)
        {
LABEL_41:
          v27 -= v22 & 0xFFFFFFFFFFFFFFF8;
          v33 = &v26[&v19[-v28] - v21 - 8];
          v34 = (uint64_t *)&v19[-v28 - 8];
          v35 = v28 - (v22 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v36 = *v34--;
            *(_QWORD *)v33 = v36;
            v33 -= 8;
            v35 += 8;
          }
          while (v35);
          v19 -= v22 & 0xFFFFFFFFFFFFFFF8;
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_48;
          goto LABEL_46;
        }
        v27 -= v28;
        v19 -= v28;
      }
LABEL_46:
      v37 = v27 - 1;
      do
      {
        v38 = *--v19;
        *v37-- = v38;
      }
      while (v19 != v21);
LABEL_48:
      v19 = (_BYTE *)*v2;
      v27 = v26;
      goto LABEL_49;
    }
    *v19 = v15;
    v20 = (uint64_t)(v19 + 1);
LABEL_51:
    *(_QWORD *)(a1 + 64) = v20;
    v39 = *(_DWORD *)(a1 + 20);
    if (v39 == 10)
    {
      v138 = *(_QWORD *)(a1 + 48) + 1;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = v138;
      v40 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
      goto LABEL_251;
    }
    v40 = "invalid string: missing closing quote";
    switch(v39)
    {
      case -1:
        goto LABEL_251;
      case 0:
        v40 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_251;
      case 1:
        v40 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_251;
      case 2:
        v40 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_251;
      case 3:
        v40 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_251;
      case 4:
        v40 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_251;
      case 5:
        v40 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_251;
      case 6:
        v40 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_251;
      case 7:
        v40 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_251;
      case 8:
        v40 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_251;
      case 9:
        v40 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_251;
      case 11:
        v40 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_251;
      case 12:
        v40 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_251;
      case 13:
        v40 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_251;
      case 14:
        v40 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_251;
      case 15:
        v40 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_251;
      case 16:
        v40 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_251;
      case 17:
        v40 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_251;
      case 18:
        v40 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_251;
      case 19:
        v40 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_251;
      case 20:
        v40 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_251;
      case 21:
        v40 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_251;
      case 22:
        v40 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_251;
      case 23:
        v40 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_251;
      case 24:
        v40 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_251;
      case 25:
        v40 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_251;
      case 26:
        v40 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_251;
      case 27:
        v40 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_251;
      case 28:
        v40 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_251;
      case 29:
        v40 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_251;
      case 30:
        v40 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_251;
      case 31:
        v40 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_251;
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_217;
      case 34:
        return 4;
      case 92:
        v80 = sub_20809B688(a1);
        v40 = "invalid string: forbidden character after backslash";
        switch(v80)
        {
          case '"':
            std::string::push_back((std::string *)(a1 + 80), 34);
            continue;
          case '/':
            std::string::push_back((std::string *)(a1 + 80), 47);
            continue;
          case '\\':
            std::string::push_back((std::string *)(a1 + 80), 92);
            continue;
          case 'b':
            std::string::push_back((std::string *)(a1 + 80), 8);
            continue;
          case 'f':
            std::string::push_back((std::string *)(a1 + 80), 12);
            continue;
          case 'n':
            std::string::push_back((std::string *)(a1 + 80), 10);
            continue;
          case 'r':
            std::string::push_back((std::string *)(a1 + 80), 13);
            continue;
          case 't':
            std::string::push_back((std::string *)(a1 + 80), 9);
            continue;
          case 'u':
            v91 = sub_20809B8D8(a1);
            if (v91 == -1)
              goto LABEL_287;
            v92 = v91;
            if ((v91 & 0xFFFFFC00) == 0xD800)
            {
              if (sub_20809B688(a1) != 92 || sub_20809B688(a1) != 117)
              {
LABEL_288:
                v40 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                goto LABEL_251;
              }
              v93 = sub_20809B8D8(a1);
              if (v93 == -1)
              {
LABEL_287:
                v40 = "invalid string: '\\u' must be followed by 4 hex digits";
                goto LABEL_251;
              }
              if (v93 >> 10 != 55)
                goto LABEL_288;
              v92 = v93 + (v92 << 10) - 56613888;
LABEL_147:
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 18) | 0xF0);
              std::string::push_back((std::string *)(a1 + 80), (v92 >> 12) & 0x3F | 0x80);
              goto LABEL_148;
            }
            if ((v91 & 0xFFFFFC00) == 0xDC00)
            {
              v40 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_251;
            }
            if ((int)v91 <= 127)
            {
              v79 = v91;
LABEL_111:
              std::string::push_back((std::string *)(a1 + 80), v79);
              continue;
            }
            if (v91 <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (v91 >> 6) | 0xC0);
              v79 = v92 & 0x3F | 0x80;
              goto LABEL_111;
            }
            if (HIWORD(v91))
              goto LABEL_147;
            std::string::push_back((std::string *)(a1 + 80), (v91 >> 12) | 0xE0);
LABEL_148:
            std::string::push_back((std::string *)(a1 + 80), (v92 >> 6) & 0x3F | 0x80);
            std::string::push_back((std::string *)(a1 + 80), v92 & 0x3F | 0x80);
            break;
          default:
            goto LABEL_251;
        }
        continue;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v41 = *(_DWORD *)(a1 + 20);
          if (v41 == -1)
            goto LABEL_250;
        }
        else
        {
          v43 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v44 = *v43;
          LOBYTE(v41) = *v43;
          *(_QWORD *)a1 = v43 + 1;
          *(_DWORD *)(a1 + 20) = v44;
          if (v44 == -1)
            goto LABEL_250;
        }
        v46 = *(_BYTE **)(a1 + 64);
        v45 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v46 < v45)
        {
          *v46 = v41;
          v47 = (uint64_t)(v46 + 1);
          goto LABEL_132;
        }
        v48 = (_BYTE *)*v2;
        v49 = (unint64_t)&v46[-*v2];
        v50 = v49 + 1;
        if ((uint64_t)(v49 + 1) < 0)
          goto LABEL_286;
        v51 = v45 - (_QWORD)v48;
        if (2 * v51 > v50)
          v50 = 2 * v51;
        if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
          v52 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)operator new(v52);
          v54 = &v53[v49];
          v53[v49] = v41;
          v47 = (uint64_t)&v53[v49 + 1];
          if (v46 == v48)
            goto LABEL_130;
        }
        else
        {
          v53 = 0;
          v54 = &v46[-*v2];
          *(_BYTE *)v49 = v41;
          v47 = v49 + 1;
          if (v46 == v48)
            goto LABEL_130;
        }
        if (v49 < 8 || (unint64_t)(v48 - v53) < 0x20)
          goto LABEL_127;
        if (v49 >= 0x20)
        {
          v55 = v49 & 0xFFFFFFFFFFFFFFE0;
          v70 = &v53[v49 - 16];
          v71 = (__int128 *)(v46 - 16);
          v72 = v49 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v73 = *v71;
            *((_OWORD *)v70 - 1) = *(v71 - 1);
            *(_OWORD *)v70 = v73;
            v70 -= 32;
            v71 -= 2;
            v72 -= 32;
          }
          while (v72);
          if (v49 == v55)
            goto LABEL_129;
          if ((v49 & 0x18) == 0)
          {
            v54 -= v55;
            v46 -= v55;
LABEL_127:
            v89 = v54 - 1;
            do
            {
              v90 = *--v46;
              *v89-- = v90;
            }
            while (v46 != v48);
            goto LABEL_129;
          }
        }
        else
        {
          v55 = 0;
        }
        v54 -= v49 & 0xFFFFFFFFFFFFFFF8;
        v74 = &v53[&v46[-v55] - v48 - 8];
        v75 = (uint64_t *)&v46[-v55 - 8];
        v76 = v55 - (v49 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v77 = *v75--;
          *(_QWORD *)v74 = v77;
          v74 -= 8;
          v76 += 8;
        }
        while (v76);
        v46 -= v49 & 0xFFFFFFFFFFFFFFF8;
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_127;
LABEL_129:
        v46 = (_BYTE *)*v2;
        v54 = v53;
LABEL_130:
        *(_QWORD *)(a1 + 56) = v54;
        *(_QWORD *)(a1 + 64) = v47;
        *(_QWORD *)(a1 + 72) = &v53[v52];
        if (v46)
          operator delete(v46);
LABEL_132:
        *(_QWORD *)(a1 + 64) = v47;
        v39 = *(_DWORD *)(a1 + 20);
        if (v39 == 10)
          goto LABEL_249;
        goto LABEL_216;
      case 224:
        std::string::push_back((std::string *)(a1 + 80), -32);
        sub_20809B688(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFE0)
          goto LABEL_250;
        goto LABEL_109;
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 238:
      case 239:
        std::string::push_back((std::string *)(a1 + 80), v39);
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v42 = *(_DWORD *)(a1 + 20);
          if (v42 == -1)
            goto LABEL_250;
        }
        else
        {
          v56 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v57 = *v56;
          LOBYTE(v42) = *v56;
          *(_QWORD *)a1 = v56 + 1;
          *(_DWORD *)(a1 + 20) = v57;
          if (v57 == -1)
            goto LABEL_250;
        }
        v59 = *(_BYTE **)(a1 + 64);
        v58 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v59 < v58)
        {
          *v59 = v42;
          v60 = (uint64_t)(v59 + 1);
          goto LABEL_156;
        }
        v61 = (_BYTE *)*v2;
        v62 = (unint64_t)&v59[-*v2];
        v63 = v62 + 1;
        if ((uint64_t)(v62 + 1) < 0)
          goto LABEL_286;
        v64 = v58 - (_QWORD)v61;
        if (2 * v64 > v63)
          v63 = 2 * v64;
        if (v64 >= 0x3FFFFFFFFFFFFFFFLL)
          v65 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          v66 = (char *)operator new(v65);
          v67 = &v66[v62];
          v66[v62] = v42;
          v60 = (uint64_t)&v66[v62 + 1];
          if (v59 == v61)
            goto LABEL_154;
        }
        else
        {
          v66 = 0;
          v67 = &v59[-*v2];
          *(_BYTE *)v62 = v42;
          v60 = v62 + 1;
          if (v59 == v61)
            goto LABEL_154;
        }
        if (v62 < 8 || (unint64_t)(v61 - v66) < 0x20)
          goto LABEL_151;
        if (v62 >= 0x20)
        {
          v69 = v62 & 0xFFFFFFFFFFFFFFE0;
          v81 = &v66[v62 - 16];
          v82 = (__int128 *)(v59 - 16);
          v83 = v62 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v84 = *v82;
            *((_OWORD *)v81 - 1) = *(v82 - 1);
            *(_OWORD *)v81 = v84;
            v81 -= 32;
            v82 -= 2;
            v83 -= 32;
          }
          while (v83);
          if (v62 == v69)
            goto LABEL_153;
          if ((v62 & 0x18) == 0)
          {
            v67 -= v69;
            v59 -= v69;
LABEL_151:
            v94 = v67 - 1;
            do
            {
              v95 = *--v59;
              *v94-- = v95;
            }
            while (v59 != v61);
            goto LABEL_153;
          }
        }
        else
        {
          v69 = 0;
        }
        v67 -= v62 & 0xFFFFFFFFFFFFFFF8;
        v85 = &v66[&v59[-v69] - v61 - 8];
        v86 = (uint64_t *)&v59[-v69 - 8];
        v87 = v69 - (v62 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v88 = *v86--;
          *(_QWORD *)v85 = v88;
          v85 -= 8;
          v87 += 8;
        }
        while (v87);
        v59 -= v62 & 0xFFFFFFFFFFFFFFF8;
        if (v62 != (v62 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_151;
LABEL_153:
        v59 = (_BYTE *)*v2;
        v67 = v66;
LABEL_154:
        *(_QWORD *)(a1 + 56) = v67;
        *(_QWORD *)(a1 + 64) = v60;
        *(_QWORD *)(a1 + 72) = &v66[v65];
        if (v59)
          operator delete(v59);
LABEL_156:
        *(_QWORD *)(a1 + 64) = v60;
        v96 = *(_DWORD *)(a1 + 20);
        if (v96 == 10)
          goto LABEL_249;
        if ((v96 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        v97 = *(char *)(a1 + 103);
        if ((v97 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a1 + 103) != 22)
          {
            v98 = *(unsigned __int8 *)(a1 + 103);
            *(_BYTE *)(a1 + 103) = (v97 + 1) & 0x7F;
            v103 = (char *)(a1 + 80);
            goto LABEL_180;
          }
          v98 = 22;
          v99 = (void *)(a1 + 80);
LABEL_164:
          if (v98 + 1 > 2 * v98)
            v102 = v98 + 1;
          else
            v102 = 2 * v98;
          if (v102 < 0x17)
          {
            v101 = 23;
            goto LABEL_169;
          }
          v104 = (v102 & 0x7FFFFFFFFFFFFFF8) + 8;
          v105 = v102 | 7;
          if (v105 == 23)
            v105 = v104;
          v101 = v105 + 1;
          v103 = (char *)operator new(v105 + 1);
          if (v98)
          {
LABEL_175:
            memmove(v103, v99, v98);
            if (v98 != 22)
              goto LABEL_176;
LABEL_177:
            *(_QWORD *)(a1 + 80) = v103;
            *(_QWORD *)(a1 + 96) = v101 | 0x8000000000000000;
            goto LABEL_179;
          }
LABEL_176:
          operator delete(v99);
          goto LABEL_177;
        }
        v100 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        v98 = v100 - 1;
        if (*(_QWORD *)(a1 + 88) == v100 - 1)
        {
          if (v100 == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_290;
          v99 = *v11;
          v101 = 0x7FFFFFFFFFFFFFF7;
          if (v98 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_164;
LABEL_169:
          v103 = (char *)operator new(v101);
          if (v98)
            goto LABEL_175;
          goto LABEL_176;
        }
        v103 = (char *)*v11;
        v98 = *(_QWORD *)(a1 + 88);
LABEL_179:
        *(_QWORD *)(a1 + 88) = v98 + 1;
LABEL_180:
        v106 = &v103[v98];
        *v106 = v96;
        v106[1] = 0;
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v107 = *(_DWORD *)(a1 + 20);
          if (v107 == -1)
            goto LABEL_250;
        }
        else
        {
          v108 = *(_BYTE **)a1;
          if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
          {
            *(_DWORD *)(a1 + 20) = -1;
            goto LABEL_250;
          }
          v109 = *v108;
          LOBYTE(v107) = *v108;
          *(_QWORD *)a1 = v108 + 1;
          *(_DWORD *)(a1 + 20) = v109;
          if (v109 == -1)
            goto LABEL_250;
        }
        v111 = *(_BYTE **)(a1 + 64);
        v110 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v111 < v110)
        {
          *v111 = v107;
          v112 = (uint64_t)(v111 + 1);
          goto LABEL_215;
        }
        v113 = (_BYTE *)*v2;
        v114 = (unint64_t)&v111[-*v2];
        v115 = v114 + 1;
        if ((uint64_t)(v114 + 1) < 0)
LABEL_286:
          sub_207CA420C();
        v116 = v110 - (_QWORD)v113;
        if (2 * v116 > v115)
          v115 = 2 * v116;
        if (v116 >= 0x3FFFFFFFFFFFFFFFLL)
          v117 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
        {
          v118 = (char *)operator new(v117);
          v119 = &v118[v114];
          v118[v114] = v107;
          v112 = (uint64_t)&v118[v114 + 1];
          if (v111 == v113)
            goto LABEL_213;
        }
        else
        {
          v118 = 0;
          v119 = &v111[-*v2];
          *(_BYTE *)v114 = v107;
          v112 = v114 + 1;
          if (v111 == v113)
            goto LABEL_213;
        }
        if (v114 < 8 || (unint64_t)(v113 - v118) < 0x20)
          goto LABEL_210;
        if (v114 >= 0x20)
        {
          v120 = v114 & 0xFFFFFFFFFFFFFFE0;
          v121 = &v118[v114 - 16];
          v122 = (__int128 *)(v111 - 16);
          v123 = v114 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v124 = *v122;
            *((_OWORD *)v121 - 1) = *(v122 - 1);
            *(_OWORD *)v121 = v124;
            v121 -= 32;
            v122 -= 2;
            v123 -= 32;
          }
          while (v123);
          if (v114 == v120)
            goto LABEL_212;
          if ((v114 & 0x18) == 0)
          {
            v119 -= v120;
            v111 -= v120;
LABEL_210:
            v129 = v119 - 1;
            do
            {
              v130 = *--v111;
              *v129-- = v130;
            }
            while (v111 != v113);
            goto LABEL_212;
          }
        }
        else
        {
          v120 = 0;
        }
        v119 -= v114 & 0xFFFFFFFFFFFFFFF8;
        v125 = &v118[&v111[-v120] - v113 - 8];
        v126 = (uint64_t *)&v111[-v120 - 8];
        v127 = v120 - (v114 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v128 = *v126--;
          *(_QWORD *)v125 = v128;
          v125 -= 8;
          v127 += 8;
        }
        while (v127);
        v111 -= v114 & 0xFFFFFFFFFFFFFFF8;
        if (v114 != (v114 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_210;
LABEL_212:
        v111 = (_BYTE *)*v2;
        v119 = v118;
LABEL_213:
        *(_QWORD *)(a1 + 56) = v119;
        *(_QWORD *)(a1 + 64) = v112;
        *(_QWORD *)(a1 + 72) = &v118[v117];
        if (v111)
          operator delete(v111);
LABEL_215:
        *(_QWORD *)(a1 + 64) = v112;
        v39 = *(_DWORD *)(a1 + 20);
        if (v39 != 10)
        {
LABEL_216:
          if ((v39 - 192) < 0xFFFFFFC0)
            goto LABEL_250;
LABEL_217:
          v131 = *(char *)(a1 + 103);
          if ((v131 & 0x80000000) == 0)
          {
            if (*(_BYTE *)(a1 + 103) != 22)
            {
              v12 = *(unsigned __int8 *)(a1 + 103);
              *(_BYTE *)(a1 + 103) = (v131 + 1) & 0x7F;
              v13 = (char *)(a1 + 80);
              goto LABEL_15;
            }
            v12 = 22;
            v132 = (void *)(a1 + 80);
LABEL_223:
            if (v12 + 1 > 2 * v12)
              v135 = v12 + 1;
            else
              v135 = 2 * v12;
            v136 = (v135 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v135 | 7) != 0x17)
              v136 = v135 | 7;
            if (v135 >= 0x17)
              v134 = v136 + 1;
            else
              v134 = 23;
LABEL_231:
            v137 = (char *)operator new(v134);
            v13 = v137;
            if (!v12 || (memmove(v137, v132, v12), v12 != 22))
              operator delete(v132);
            *(_QWORD *)(a1 + 80) = v13;
            *(_QWORD *)(a1 + 96) = v134 | 0x8000000000000000;
            goto LABEL_236;
          }
          v133 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
          v12 = v133 - 1;
          if (*(_QWORD *)(a1 + 88) == v133 - 1)
          {
            if (v133 == 0x7FFFFFFFFFFFFFF8)
LABEL_290:
              sub_207C95C50();
            v132 = *v11;
            v134 = 0x7FFFFFFFFFFFFFF7;
            if (v12 >= 0x3FFFFFFFFFFFFFF3)
              goto LABEL_231;
            goto LABEL_223;
          }
          v13 = (char *)*v11;
          v12 = *(_QWORD *)(a1 + 88);
LABEL_236:
          *(_QWORD *)(a1 + 88) = v12 + 1;
LABEL_15:
          v14 = &v13[v12];
          *v14 = v39;
          v14[1] = 0;
          continue;
        }
LABEL_249:
        v139 = *(_QWORD *)(a1 + 48) + 1;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = v139;
LABEL_250:
        v40 = "invalid string: ill-formed UTF-8 byte";
LABEL_251:
        *(_QWORD *)(a1 + 104) = v40;
        return 14;
      case 237:
        std::string::push_back((std::string *)(a1 + 80), -19);
        sub_20809B688(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 160) < 0xFFFFFFE0)
          goto LABEL_250;
        goto LABEL_109;
      case 240:
        std::string::push_back((std::string *)(a1 + 80), -16);
        sub_20809B688(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFD0)
          goto LABEL_250;
        goto LABEL_108;
      case 241:
      case 242:
      case 243:
        std::string::push_back((std::string *)(a1 + 80), v39);
        sub_20809B688(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        goto LABEL_108;
      case 244:
        std::string::push_back((std::string *)(a1 + 80), -12);
        sub_20809B688(a1);
        v68 = *(_DWORD *)(a1 + 20);
        if ((v68 - 144) < 0xFFFFFFF0)
          goto LABEL_250;
LABEL_108:
        std::string::push_back((std::string *)(a1 + 80), v68);
        sub_20809B688(a1);
        v78 = *(_DWORD *)(a1 + 20);
        if ((v78 - 192) < 0xFFFFFFC0)
          goto LABEL_250;
LABEL_109:
        std::string::push_back((std::string *)(a1 + 80), v78);
        sub_20809B688(a1);
        if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0)
          goto LABEL_250;
        v79 = *(_DWORD *)(a1 + 20);
        goto LABEL_111;
      default:
        goto LABEL_250;
    }
  }
}

uint64_t sub_20809AFB4(uint64_t a1)
{
  _BYTE *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  int v49;
  int v50;
  uint64_t v51;
  const char *v52;
  int v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  unint64_t v58;
  const char *v60;
  uint64_t v61;
  int v62;
  int64x2_t v63;
  char *__endptr;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v3 = (_QWORD *)(a1 + 56);
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v5)
  {
    v7 = v5 - (_QWORD)v2;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10 + 1;
    *(_QWORD *)(a1 + 72) = &v10[v9];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v4;
    v6 = v2 + 1;
  }
  v11 = (const char *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v6;
  v12 = *(_DWORD *)(a1 + 20);
  v13 = 5;
  if ((v12 - 49) >= 9)
  {
    if (v12 != 48)
    {
      if (v12 == 45)
        std::string::push_back((std::string *)(a1 + 80), 45);
      v50 = sub_20809B688(a1);
      if ((v50 - 49) < 9)
      {
        v12 = *(_DWORD *)(a1 + 20);
        v14 = 6;
        goto LABEL_15;
      }
      if (v50 != 48)
      {
        v52 = "invalid number; expected digit after '-'";
        goto LABEL_128;
      }
      v12 = *(_DWORD *)(a1 + 20);
      v13 = 6;
    }
    std::string::push_back((std::string *)(a1 + 80), v12);
    v53 = sub_20809B688(a1);
    if (v53 == 46)
    {
LABEL_80:
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 136));
      if (sub_20809B688(a1) - 48 > 9)
      {
        v52 = "invalid number; expected digit after '.'";
        goto LABEL_128;
      }
      do
      {
        std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        v49 = sub_20809B688(a1);
      }
      while ((v49 - 48) < 0xA);
      if (v49 != 101 && v49 != 69)
        goto LABEL_103;
    }
    else if (v53 != 69 && v53 != 101)
    {
      goto LABEL_104;
    }
    v42 = *(_DWORD *)(a1 + 20);
LABEL_101:
    std::string::push_back((std::string *)(a1 + 80), v42);
    v54 = sub_20809B688(a1);
    if ((v54 - 48) < 0xA)
      goto LABEL_102;
    if (v54 == 43 || v54 == 45)
    {
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      if (sub_20809B688(a1) - 48 < 0xA)
      {
        do
LABEL_102:
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        while (sub_20809B688(a1) - 48 < 0xA);
LABEL_103:
        v13 = 7;
        goto LABEL_104;
      }
      v52 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v52 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_128:
    *(_QWORD *)(a1 + 104) = v52;
    return 14;
  }
  v14 = 5;
LABEL_15:
  v62 = v14;
  std::string::push_back((std::string *)(a1 + 80), v12);
  v63 = vdupq_n_s64(1uLL);
  while (1)
  {
    *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v63);
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      v18 = *(_DWORD *)(a1 + 20);
      if (v18 == -1)
        goto LABEL_76;
    }
    else
    {
      v19 = *(_BYTE **)a1;
      if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = -1;
LABEL_76:
        v13 = v62;
        goto LABEL_104;
      }
      v20 = *v19;
      LOBYTE(v18) = *v19;
      *(_QWORD *)a1 = v19 + 1;
      *(_DWORD *)(a1 + 20) = v20;
      if (v20 == -1)
        goto LABEL_76;
    }
    v22 = *(_BYTE **)(a1 + 64);
    v21 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v22 < v21)
    {
      *v22 = v18;
      v23 = (uint64_t)(v22 + 1);
      goto LABEL_53;
    }
    v24 = (_BYTE *)*v3;
    v25 = (unint64_t)&v22[-*v3];
    v26 = v25 + 1;
    if ((uint64_t)(v25 + 1) < 0)
      sub_207CA420C();
    v27 = v21 - (_QWORD)v24;
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (!v28)
    {
      v29 = 0;
      v30 = &v22[-*v3];
      *(_BYTE *)v25 = v18;
      v23 = v25 + 1;
      if (v22 == v24)
        goto LABEL_51;
LABEL_35:
      if (v25 >= 8 && (unint64_t)(v24 - v29) >= 0x20)
      {
        if (v25 < 0x20)
        {
          v31 = 0;
          goto LABEL_43;
        }
        v31 = v25 & 0xFFFFFFFFFFFFFFE0;
        v32 = &v29[v25 - 16];
        v33 = (__int128 *)(v22 - 16);
        v34 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *v33;
          *((_OWORD *)v32 - 1) = *(v33 - 1);
          *(_OWORD *)v32 = v35;
          v32 -= 32;
          v33 -= 2;
          v34 -= 32;
        }
        while (v34);
        if (v25 == v31)
          goto LABEL_50;
        if ((v25 & 0x18) != 0)
        {
LABEL_43:
          v30 -= v25 & 0xFFFFFFFFFFFFFFF8;
          v36 = &v29[&v22[-v31] - v24 - 8];
          v37 = (uint64_t *)&v22[-v31 - 8];
          v38 = v31 - (v25 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v39 = *v37--;
            *(_QWORD *)v36 = v39;
            v36 -= 8;
            v38 += 8;
          }
          while (v38);
          v22 -= v25 & 0xFFFFFFFFFFFFFFF8;
          if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_50;
          goto LABEL_48;
        }
        v30 -= v31;
        v22 -= v31;
      }
LABEL_48:
      v40 = v30 - 1;
      do
      {
        v41 = *--v22;
        *v40-- = v41;
      }
      while (v22 != v24);
LABEL_50:
      v22 = (_BYTE *)*v3;
      v30 = v29;
      goto LABEL_51;
    }
    v29 = (char *)operator new(v28);
    v30 = &v29[v25];
    v29[v25] = v18;
    v23 = (uint64_t)&v29[v25 + 1];
    if (v22 != v24)
      goto LABEL_35;
LABEL_51:
    *(_QWORD *)(a1 + 56) = v30;
    *(_QWORD *)(a1 + 64) = v23;
    *(_QWORD *)(a1 + 72) = &v29[v28];
    if (v22)
      operator delete(v22);
LABEL_53:
    *(_QWORD *)(a1 + 64) = v23;
    v42 = *(_DWORD *)(a1 + 20);
    if ((v42 - 48) >= 0xA)
      break;
    v43 = *(char *)(a1 + 103);
    if (v43 < 0)
    {
      v45 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
      v15 = v45 - 1;
      if (*(_QWORD *)(a1 + 88) != v45 - 1)
      {
        v16 = *(char **)v11;
        v15 = *(_QWORD *)(a1 + 88);
        goto LABEL_73;
      }
      if (v45 == 0x7FFFFFFFFFFFFFF8)
        sub_207C95C50();
      v44 = *(char **)v11;
      if (v15 > 0x3FFFFFFFFFFFFFF2)
      {
        v48 = 0x7FFFFFFFFFFFFFF7;
        v16 = (char *)operator new(0x7FFFFFFFFFFFFFF7uLL);
        goto LABEL_69;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 103) != 22)
      {
        v15 = *(unsigned __int8 *)(a1 + 103);
        *(_BYTE *)(a1 + 103) = (v43 + 1) & 0x7F;
        v16 = (char *)(a1 + 80);
        goto LABEL_17;
      }
      v44 = (char *)(a1 + 80);
      v15 = 22;
    }
    if (v15 + 1 > 2 * v15)
      v46 = v15 + 1;
    else
      v46 = 2 * v15;
    v47 = (v46 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v47 = v46 | 7;
    if (v46 >= 0x17)
      v48 = v47 + 1;
    else
      v48 = 23;
    v16 = (char *)operator new(v48);
    if (!v15)
    {
LABEL_70:
      operator delete(v44);
      goto LABEL_71;
    }
LABEL_69:
    memmove(v16, v44, v15);
    if (v15 != 22)
      goto LABEL_70;
LABEL_71:
    *(_QWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 96) = v48 | 0x8000000000000000;
LABEL_73:
    *(_QWORD *)(a1 + 88) = v15 + 1;
LABEL_17:
    v17 = &v16[v15];
    *v17 = v42;
    v17[1] = 0;
  }
  if (v42 > 68)
  {
    v13 = v62;
    if (v42 != 69 && v42 != 101)
      goto LABEL_104;
    goto LABEL_101;
  }
  v13 = v62;
  if (v42 == 10)
  {
    v51 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v51;
  }
  else if (v42 == 46)
  {
    goto LABEL_80;
  }
LABEL_104:
  v55 = (_QWORD *)(a1 + 40);
  v56 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 24) = 1;
  --*(_QWORD *)(a1 + 32);
  if (v56 || (v55 = (_QWORD *)(a1 + 48), (v56 = *(_QWORD *)(a1 + 48)) != 0))
    *v55 = v56 - 1;
  if (*(_DWORD *)(a1 + 20) != -1)
    --*(_QWORD *)(a1 + 64);
  __endptr = 0;
  *__error() = 0;
  if (v13 == 6)
  {
    v60 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v60 = *(const char **)v11;
    v61 = strtoll(v60, &__endptr, 10);
    if (*__error())
      goto LABEL_118;
    *(_QWORD *)(a1 + 112) = v61;
    return 6;
  }
  else
  {
    if (v13 == 5)
    {
      v57 = (const char *)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        v57 = *(const char **)v11;
      v58 = strtoull(v57, &__endptr, 10);
      if (!*__error())
      {
        *(_QWORD *)(a1 + 120) = v58;
        return 5;
      }
    }
LABEL_118:
    if (*(char *)(a1 + 103) < 0)
      v11 = *(const char **)v11;
    *(double *)(a1 + 128) = strtod(v11, &__endptr);
    return 7;
  }
}

uint64_t sub_20809B688(uint64_t a1)
{
  int v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE **v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t result;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;

  *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
  if (*(_BYTE *)(a1 + 24))
  {
    *(_BYTE *)(a1 + 24) = 0;
    v2 = *(_DWORD *)(a1 + 20);
    if (v2 != -1)
      goto LABEL_3;
    return 0xFFFFFFFFLL;
  }
  v16 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = -1;
    return 0xFFFFFFFFLL;
  }
  v17 = *v16;
  LOBYTE(v2) = *v16;
  *(_QWORD *)a1 = v16 + 1;
  *(_DWORD *)(a1 + 20) = v17;
  if (v17 == -1)
    return 0xFFFFFFFFLL;
LABEL_3:
  v4 = *(_BYTE **)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v4 < v3)
  {
    *v4 = v2;
    v5 = (uint64_t)(v4 + 1);
    goto LABEL_36;
  }
  v6 = (_BYTE **)(a1 + 56);
  v7 = *(_BYTE **)(a1 + 56);
  v8 = v4 - v7;
  v9 = v4 - v7 + 1;
  if (v9 < 0)
    sub_207CA420C();
  v10 = v3 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v5 = (uint64_t)&v12[v8 + 1];
    if (v4 != v7)
    {
LABEL_13:
      if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
        goto LABEL_32;
      if (v8 >= 0x20)
      {
        v15 = v8 & 0xFFFFFFFFFFFFFFE0;
        v19 = (__int128 *)(v4 - 16);
        v20 = &v12[v4 - 16 - v7];
        v21 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v8 == v15)
        {
LABEL_34:
          v4 = *v6;
          *(_QWORD *)(a1 + 56) = v12;
          *(_QWORD *)(a1 + 64) = v5;
          *(_QWORD *)(a1 + 72) = v14;
          if (!v4)
            goto LABEL_36;
          goto LABEL_35;
        }
        if ((v8 & 0x18) == 0)
        {
          v13 -= v15;
          v4 -= v15;
          goto LABEL_32;
        }
      }
      else
      {
        v15 = 0;
      }
      v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
      v23 = &v4[-v15 - 8];
      v24 = &v12[v23 - v7];
      v25 = v15 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v26 = *(_QWORD *)v23;
        v23 -= 8;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      v4 -= v8 & 0xFFFFFFFFFFFFFFF8;
      if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_34;
LABEL_32:
      v27 = v13 - 1;
      do
      {
        v28 = *--v4;
        *v27-- = v28;
      }
      while (v4 != v7);
      goto LABEL_34;
    }
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v4 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v5 = v8 + 1;
    if (v4 != v7)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v14;
  if (v4)
LABEL_35:
    operator delete(v4);
LABEL_36:
  *(_QWORD *)(a1 + 64) = v5;
  result = *(unsigned int *)(a1 + 20);
  if ((_DWORD)result == 10)
  {
    v29 = *(_QWORD *)(a1 + 48) + 1;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v29;
  }
  return result;
}

uint64_t sub_20809B8D8(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  sub_20809B688(a1);
  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_20809B688(a1);
    v4 = *(_DWORD *)(a1 + 20);
    v5 = v4 - 48;
    if ((v4 - 48) < 0xA)
      goto LABEL_5;
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5)
    return 0xFFFFFFFFLL;
  v3 = v2 - 87;
  sub_20809B688(a1);
  v4 = *(_DWORD *)(a1 + 20);
  v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_20809B688(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) < 0xA)
      goto LABEL_6;
LABEL_12:
    if ((v6 - 65) < 6)
    {
      v7 = v6 - 55;
      sub_20809B688(a1);
      v8 = *(_DWORD *)(a1 + 20);
      v9 = v8 - 48;
      if ((v8 - 48) < 0xA)
        return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
      goto LABEL_20;
    }
    if ((v6 - 97) > 5)
      return 0xFFFFFFFFLL;
    v7 = v6 - 87;
    sub_20809B688(a1);
    v8 = *(_DWORD *)(a1 + 20);
    v9 = v8 - 48;
    if ((v8 - 48) >= 0xA)
      goto LABEL_20;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5)
      return 0xFFFFFFFFLL;
    v5 = v4 - 87;
    sub_20809B688(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
  else
  {
    v5 = v4 - 55;
    sub_20809B688(a1);
    v6 = *(_DWORD *)(a1 + 20);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
LABEL_6:
  sub_20809B688(a1);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = v8 - 48;
  if ((v8 - 48) < 0xA)
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
LABEL_20:
  if ((v8 - 65) < 6)
  {
    v9 = v8 - 55;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  if ((v8 - 97) <= 5)
  {
    v9 = v8 - 87;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_20809BA84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *exception;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::string v44;
  std::string __p;
  std::string v46;
  std::exception v47;
  uint64_t v48;
  std::runtime_error v49;
  uint64_t v50;
  std::string v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;

  v4 = a1 + 120;
  v5 = a1 + 40;
  v52 = 0;
  v53 = 0;
  v6 = (unsigned __int8 *)(a2 + 136);
  v54 = 0;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v47.__vftable) = 1;
        sub_207D1EC10((unsigned __int8 **)a2, (unsigned __int8 *)&v47, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v47.__vftable) = 0;
        sub_207D1EC10((unsigned __int8 **)a2, (unsigned __int8 *)&v47, 0);
        goto LABEL_19;
      case 3:
        v47.__vftable = 0;
        sub_207D1EE14((unsigned __int8 **)a2, (uint64_t)&v47, 0);
        goto LABEL_19;
      case 4:
        sub_207D1F210((unsigned __int8 **)a2, v4, 0);
        goto LABEL_19;
      case 5:
        v47.__vftable = *(std::exception_vtbl **)(a1 + 160);
        sub_207D1F460((unsigned __int8 **)a2, (uint64_t *)&v47, 0);
        goto LABEL_19;
      case 6:
        v47.__vftable = *(std::exception_vtbl **)(a1 + 152);
        sub_207D1F010((unsigned __int8 **)a2, (uint64_t *)&v47, 0);
        goto LABEL_19;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v47.__vftable = *(std::exception_vtbl **)(a1 + 168);
          sub_207D1EA0C((unsigned __int8 **)a2, (uint64_t *)&v47, 0);
          goto LABEL_19;
        }
        v42 = *(_QWORD *)(a1 + 72);
        sub_20809C79C(v5, &v51);
        sub_20809C79C(v5, &v44);
        sub_207C96E8C("number overflow parsing '", &v44, &__p);
        sub_207C96E30("'", &__p, &v46);
        sub_207D1CEE4(406, (uint64_t)&v46, (uint64_t)&v47);
        v34 = sub_207D1CE90(a2, v42, (uint64_t)&v51, (uint64_t)&v47);
        v47.__vftable = (std::exception_vtbl *)off_24C072CF8;
        std::runtime_error::~runtime_error(&v49);
        std::exception::~exception(&v47);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        goto LABEL_83;
      case 8:
        if (!sub_207D1CA00(a2, 0xFFFFFFFFFFFFFFFFLL))
          goto LABEL_74;
        v7 = sub_208099A00(v5);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
        {
          v8 = sub_207D1CD5C(a2);
          goto LABEL_13;
        }
        v28 = v53;
        if (v53 == v54 << 6)
        {
          if ((uint64_t)(v53 + 1) < 0)
            sub_207D159B0();
          v29 = v54 << 7;
          if (v54 << 7 <= (v53 & 0xFFFFFFFFFFFFFFC0) + 64)
            v29 = (v53 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v53 <= 0x3FFFFFFFFFFFFFFELL)
            v30 = v29;
          else
            v30 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v52, v30);
          v28 = v53;
        }
        v53 = v28 + 1;
        *(_QWORD *)&v52[(v28 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v28;
        continue;
      case 9:
        if ((sub_207D1C204(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
          goto LABEL_74;
        v9 = sub_208099A00(v5);
        *(_DWORD *)(a1 + 32) = v9;
        if (v9 != 11)
        {
          if (v9 != 4)
            goto LABEL_80;
          if (!sub_207D1C7E4(a2, v4))
            goto LABEL_74;
          v31 = sub_208099A00(v5);
          *(_DWORD *)(a1 + 32) = v31;
          if (v31 != 12)
            goto LABEL_81;
          v32 = v53;
          if (v53 == v54 << 6)
          {
            if ((uint64_t)(v53 + 1) < 0)
              sub_207D159B0();
            if (v53 > 0x3FFFFFFFFFFFFFFELL)
            {
              v33 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v54 << 7 <= (v53 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              v33 = (v53 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              v33 = v54 << 7;
            }
            sub_207D1C104((uint64_t)&v52, v33);
            v32 = v53;
          }
          v53 = v32 + 1;
          *(_QWORD *)&v52[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v32);
          *(_DWORD *)(a1 + 32) = sub_208099A00(v5);
          continue;
        }
        v8 = sub_207D1C55C(a2);
LABEL_13:
        if ((v8 & 1) == 0)
        {
LABEL_74:
          v34 = 0;
          goto LABEL_65;
        }
LABEL_19:
        v10 = v53;
        if (!v53)
        {
LABEL_64:
          v34 = 1;
          goto LABEL_65;
        }
        while (2)
        {
          if (((*(_QWORD *)&v52[((v10 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v10 - 1)) & 1) != 0)
          {
            v11 = sub_208099A00(v5);
            *(_DWORD *)(a1 + 32) = v11;
            if (v11 == 13)
              goto LABEL_42;
            if (v11 != 10)
            {
              v37 = *(_QWORD *)(a1 + 72);
              sub_20809C79C(v5, &v51);
              v46 = *(std::string *)(a1 + 72);
              sub_207C96EE8(&v44, "array");
              sub_20809C88C(a1, 0xAu, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
              sub_207D1B330(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
              v38 = sub_207D1B1E8(a2, v37, (uint64_t)&v51, (uint64_t)&v47);
              goto LABEL_82;
            }
            v12 = *(_QWORD *)(a2 + 16);
            v14 = *(_QWORD *)(v12 - 8);
            v13 = v12 - 8;
            if (v14)
            {
              LODWORD(v51.__r_.__value_.__l.__data_) = ((*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3) - 1;
              v46.__r_.__value_.__s.__data_[0] = 3;
              v15 = *(_QWORD *)(a2 + 120);
              if (!v15)
                sub_207CA408C();
              if (((*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v15 + 48))(v15, &v51, &v46) & 1) != 0)
              {
                *(_QWORD *)(a2 + 16) -= 8;
                goto LABEL_32;
              }
              sub_207D1D968((uint64_t)&v47, v6);
              v17 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 16) - 8);
              v18 = *v17;
              *v17 = v47.__vftable;
              LOBYTE(v47.__vftable) = v18;
              v19 = *((_QWORD *)v17 + 1);
              *((_QWORD *)v17 + 1) = v48;
              v48 = v19;
              sub_207D20660(&v48, v18);
              v21 = *(_QWORD *)(a2 + 8);
              v20 = *(_QWORD *)(a2 + 16);
              *(_QWORD *)(a2 + 16) = v20 - 8;
              --*(_QWORD *)(a2 + 40);
              if (v21 != v20 - 8)
              {
                v22 = *(_QWORD *)(v20 - 16);
                if (*(_BYTE *)v22 == 2)
                {
                  v23 = *(_QWORD *)(v22 + 8);
                  v24 = *(_QWORD *)(v23 + 8);
                  v25 = *(unsigned __int8 *)(v24 - 16);
                  v24 -= 16;
                  sub_207D20660((uint64_t *)(v24 + 8), v25);
                  *(_QWORD *)(v23 + 8) = v24;
                }
              }
            }
            else
            {
              *(_QWORD *)(a2 + 16) = v13;
LABEL_32:
              --*(_QWORD *)(a2 + 40);
            }
LABEL_33:
            v10 = v53 - 1;
            v53 = v10;
            if (!v10)
              goto LABEL_64;
            continue;
          }
          break;
        }
        v16 = sub_208099A00(v5);
        *(_DWORD *)(a1 + 32) = v16;
        if (v16 != 13)
        {
          if (v16 != 11)
          {
            v39 = *(_QWORD *)(a1 + 72);
            sub_20809C79C(v5, &v51);
            v46 = *(std::string *)(a1 + 72);
            sub_207C96EE8(&v44, "object");
            sub_20809C88C(a1, 0xBu, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
            sub_207D1B330(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
            v38 = sub_207D1B1E8(a2, v39, (uint64_t)&v51, (uint64_t)&v47);
            goto LABEL_82;
          }
          if ((sub_207D1C55C(a2) & 1) == 0)
            goto LABEL_74;
          goto LABEL_33;
        }
        v26 = sub_208099A00(v5);
        *(_DWORD *)(a1 + 32) = v26;
        if (v26 != 4)
        {
LABEL_80:
          v40 = *(_QWORD *)(a1 + 72);
          sub_20809C79C(v5, &v51);
          v46 = *(std::string *)(a1 + 72);
          sub_207C96EE8(&v44, "object key");
          sub_20809C88C(a1, 4u, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
          sub_207D1B330(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
          v38 = sub_207D1B1E8(a2, v40, (uint64_t)&v51, (uint64_t)&v47);
          goto LABEL_82;
        }
        if (!sub_207D1C7E4(a2, v4))
          goto LABEL_74;
        v27 = sub_208099A00(v5);
        *(_DWORD *)(a1 + 32) = v27;
        if (v27 == 12)
        {
LABEL_42:
          *(_DWORD *)(a1 + 32) = sub_208099A00(v5);
          continue;
        }
LABEL_81:
        v41 = *(_QWORD *)(a1 + 72);
        sub_20809C79C(v5, &v51);
        v46 = *(std::string *)(a1 + 72);
        sub_207C96EE8(&v44, "object separator");
        sub_20809C88C(a1, 0xCu, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_207D1B330(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
        v38 = sub_207D1B1E8(a2, v41, (uint64_t)&v51, (uint64_t)&v47);
LABEL_82:
        v34 = v38;
        v47.__vftable = (std::exception_vtbl *)off_24C072CF8;
        std::runtime_error::~runtime_error(&v49);
        std::exception::~exception(&v47);
LABEL_83:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_88;
LABEL_85:
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
LABEL_89:
            operator delete(v51.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_85;
LABEL_88:
          operator delete(v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_89;
        }
LABEL_65:
        if (v52)
          operator delete(v52);
        return v34;
      case 0xE:
        sub_20809C79C(v5, &v51);
        v46 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v44.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v44, "value");
        sub_20809C88C(a1, 0, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_207D1B330(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
        *(_BYTE *)(a2 + 88) = 1;
        if (*(_BYTE *)(a2 + 128))
        {
          exception = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)exception = off_24C072CF8;
          *((_DWORD *)exception + 2) = v48;
          std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v49);
          *(_QWORD *)exception = off_24C072DF8;
          *((_QWORD *)exception + 4) = v50;
          __cxa_throw(exception, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
        }
        goto LABEL_71;
      default:
        sub_20809C79C(v5, &v51);
        v46 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v44.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v44, "value");
        sub_20809C88C(a1, 0x10u, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_207D1B330(101, (uint64_t *)&v46, (uint64_t)&__p, (uint64_t)&v47);
        *(_BYTE *)(a2 + 88) = 1;
        if (*(_BYTE *)(a2 + 128))
        {
          v43 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v43 = off_24C072CF8;
          *((_DWORD *)v43 + 2) = v48;
          std::runtime_error::runtime_error((std::runtime_error *)v43 + 1, &v49);
          *(_QWORD *)v43 = off_24C072DF8;
          *((_QWORD *)v43 + 4) = v50;
          __cxa_throw(v43, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
        }
LABEL_71:
        v47.__vftable = (std::exception_vtbl *)off_24C072CF8;
        std::runtime_error::~runtime_error(&v49);
        std::exception::~exception(&v47);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_73:
            if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_74;
            goto LABEL_77;
          }
        }
        else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_73;
        }
        operator delete(v44.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_74;
LABEL_77:
        operator delete(v51.__r_.__value_.__l.__data_);
        goto LABEL_74;
    }
  }
}

void sub_20809C53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::exception a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::runtime_error *v38;
  uint64_t v39;
  void *v41;

  a28.__vftable = (std::exception_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(v38 + 1);
  std::exception::~exception(&a28);
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    if (a38 < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete(a9);
  if (a38 < 0)
  {
LABEL_4:
    operator delete(a33);
    v41 = *(void **)(v39 - 112);
    if (v41)
    {
LABEL_10:
      operator delete(v41);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  v41 = *(void **)(v39 - 112);
  if (v41)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20809C79C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  size_t v6;
  char __str[8];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 56);
  for (i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v8 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      v6 = strlen(__str);
      std::string::append(a2, __str, v6);
    }
  }
}

void sub_20809C86C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20809C88C(uint64_t a1@<X0>, unsigned int a2@<W1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  size_t v8;
  unint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  const char *v25;
  size_t v26;
  std::string::size_type v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  __int128 v44;
  void **v45;
  std::string::size_type v46;
  void *v47;
  const char *v48;
  size_t v49;
  std::string::size_type v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  std::string v58;
  std::string __dst;
  std::string v60;
  std::string v61;
  void *__p[2];
  int64_t v63;

  *(_BYTE *)(a4 + 23) = 13;
  strcpy((char *)a4, "syntax error ");
  v7 = *((char *)a3 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  if (v8)
  {
    v9 = v8 + 14;
    if (v8 + 14 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v9 > 0x16)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (char *)operator new(v12 + 1);
      v61.__r_.__value_.__l.__size_ = v8 + 14;
      v61.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      memset(&v61, 0, sizeof(v61));
      v11 = (char *)&v61;
      *((_BYTE *)&v61.__r_.__value_.__s + 23) = v8 + 14;
    }
    qmemcpy(v11, "while parsing ", 14);
    v14 = v11 + 14;
    if (v7 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(v11 + 14, v15, v8);
    v14[v8] = 0;
    v16 = std::string::append(&v61, " ", 1uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v63 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v63 >= 0)
      v19 = HIBYTE(v63);
    else
      v19 = (std::string::size_type)__p[1];
    std::string::append((std::string *)a4, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v63) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
  }
LABEL_22:
  std::string::append((std::string *)a4, "- ", 2uLL);
  v20 = *(int *)(a1 + 32);
  if ((_DWORD)v20 != 14)
  {
    if (v20 > 0x10)
      v25 = "unknown token";
    else
      v25 = off_24C084770[v20];
    v26 = strlen(v25);
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v27 = v26;
    if (v26 >= 0x17)
    {
      v41 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v41 = v26 | 7;
      v42 = v41 + 1;
      v28 = operator new(v41 + 1);
      v61.__r_.__value_.__l.__size_ = v27;
      v61.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((_BYTE *)&v61.__r_.__value_.__s + 23) = v26;
      v28 = &v61;
      if (!v26)
        goto LABEL_60;
    }
    memcpy(v28, v25, v27);
LABEL_60:
    *((_BYTE *)v28 + v27) = 0;
    v43 = std::string::insert(&v61, 0, "unexpected ", 0xBuLL);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v63 = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if (v63 >= 0)
      v46 = HIBYTE(v63);
    else
      v46 = (std::string::size_type)__p[1];
    std::string::append((std::string *)a4, (const std::string::value_type *)v45, v46);
    if (SHIBYTE(v63) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_79;
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
    v47 = (void *)v61.__r_.__value_.__r.__words[0];
    goto LABEL_78;
  }
  v21 = *(const char **)(a1 + 144);
  v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v29 = v22 | 7;
    v30 = v29 + 1;
    p_dst = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_37;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_37:
    memmove(p_dst, v21, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v31 = std::string::append(&__dst, "; last read: '", 0xEuLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  sub_20809C79C(a1 + 40, &v58);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v58;
  else
    v33 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v60, (const std::string::value_type *)v33, size);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v61, "'", 1uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v63 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v39 = __p;
  else
    v39 = (void **)__p[0];
  if (v63 >= 0)
    v40 = HIBYTE(v63);
  else
    v40 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a4, (const std::string::value_type *)v39, v40);
  if (SHIBYTE(v63) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_75;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_54;
LABEL_76:
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_77;
  }
LABEL_75:
  operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_76;
LABEL_54:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_79;
LABEL_77:
  v47 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_78:
  operator delete(v47);
LABEL_79:
  if (!a2)
    return;
  if (a2 > 0x10)
    v48 = "unknown token";
  else
    v48 = off_24C0847F8[a2 - 1];
  v49 = strlen(v48);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v50 = v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    v61.__r_.__value_.__l.__size_ = v50;
    v61.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    goto LABEL_90;
  }
  *((_BYTE *)&v61.__r_.__value_.__s + 23) = v49;
  v51 = &v61;
  if (v49)
LABEL_90:
    memcpy(v51, v48, v50);
  *((_BYTE *)v51 + v50) = 0;
  v54 = std::string::insert(&v61, 0, "; expected ", 0xBuLL);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v63 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v56 = __p;
  else
    v56 = (void **)__p[0];
  if (v63 >= 0)
    v57 = HIBYTE(v63);
  else
    v57 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a4, (const std::string::value_type *)v56, v57);
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_101:
    operator delete(v61.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_101;
}

void sub_20809CE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      if (a14 < 0)
      {
LABEL_8:
        operator delete(a9);
        if ((a26 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a26 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v40 + 23) < 0)
            operator delete(*(void **)v40);
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a15);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a21);
      if ((a20 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  if (a14 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

uint64_t sub_20809CF78(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unsigned int v4;
  void *exception;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string::size_type v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  unsigned __int8 *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  _OWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int8 *v78;
  int v79;
  char v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *p_size;
  unsigned __int8 *v86;
  char *v87;
  char v88;
  unsigned __int8 *v89;
  std::string::size_type v90;
  unsigned __int8 *v91;
  std::string::size_type v92;
  unsigned __int8 *v93;
  unint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t **v99;
  uint64_t *v100;
  char **v101;
  char **v102;
  uint64_t *v103;
  char v104;
  const void *v105;
  size_t v106;
  _QWORD *v107;
  const void *v108;
  const void *v109;
  int v110;
  const void *v111;
  size_t v112;
  size_t v113;
  int v114;
  int v115;
  char *v116;
  _BYTE *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  BOOL v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  _BYTE *v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  int v133;
  int v134;
  uint64_t **v135;
  uint64_t *v136;
  char **v137;
  char **v138;
  uint64_t *v139;
  char v140;
  const void *v141;
  size_t v142;
  _QWORD *v143;
  const void *v144;
  const void *v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int v151;
  char *v152;
  _BYTE *v153;
  uint64_t v154;
  char *v155;
  uint64_t *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  _BYTE *v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t **v184;
  uint64_t v185;
  std::string v187;
  std::string __p;
  std::string v189;
  std::exception v190;
  uint64_t v191;
  std::runtime_error v192;
  uint64_t v193;
  std::string v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;

  v185 = a1 + 120;
  v3 = a1 + 40;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v184 = (uint64_t **)(a2 + 1);
  v4 = *(_DWORD *)(a1 + 32) - 1;
  if (v4 > 0xD)
  {
LABEL_2:
    sub_20809C79C(v3, &v194);
    v189 = *(std::string *)(a1 + 72);
    *((_BYTE *)&v187.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v187, "value");
    sub_20809C88C(a1, 0x10u, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
    sub_207D1B330(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
    *((_BYTE *)a2 + 40) = 1;
    if (*((_BYTE *)a2 + 41))
    {
      exception = __cxa_allocate_exception(0x28uLL);
      *(_QWORD *)exception = off_24C072CF8;
      *((_DWORD *)exception + 2) = v191;
      std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v192);
      *(_QWORD *)exception = off_24C072DF8;
      *((_QWORD *)exception + 4) = v193;
      __cxa_throw(exception, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
    }
LABEL_269:
    v190.__vftable = (std::exception_vtbl *)off_24C072CF8;
    std::runtime_error::~runtime_error(&v192);
    std::exception::~exception(&v190);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_271:
        if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_272:
          v175 = 0;
          goto LABEL_265;
        }
LABEL_275:
        operator delete(v194.__r_.__value_.__l.__data_);
        goto LABEL_272;
      }
    }
    else if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_271;
    }
    operator delete(v187.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_272;
    goto LABEL_275;
  }
  while (2)
  {
    switch(v4)
    {
      case 0u:
        v189.__r_.__value_.__s.__data_[0] = 1;
        v39 = a2[2];
        if (a2[1] == v39)
        {
          v81 = *a2;
          v79 = **a2;
          *v81 = 4;
          LOBYTE(v190.__vftable) = v79;
          v82 = *((_QWORD *)v81 + 1);
          *((_QWORD *)v81 + 1) = 1;
          goto LABEL_93;
        }
        v40 = *((_QWORD *)v39 - 1);
        if (*(_BYTE *)v40 != 2)
        {
          v89 = a2[4];
          v79 = *v89;
          *v89 = 4;
          v194.__r_.__value_.__s.__data_[0] = v79;
          v90 = *((_QWORD *)v89 + 1);
          *((_QWORD *)v89 + 1) = 1;
          goto LABEL_102;
        }
        v37 = *(_QWORD *)(v40 + 8);
        v41 = *(_QWORD *)(v37 + 8);
        if (v41 >= *(_QWORD *)(v37 + 16))
          goto LABEL_213;
        *(_BYTE *)v41 = 4;
        *(_QWORD *)(v41 + 8) = 1;
        *(_QWORD *)(v37 + 8) = v41 + 16;
        goto LABEL_105;
      case 1u:
        v189.__r_.__value_.__s.__data_[0] = 0;
        v42 = a2[2];
        if (a2[1] == v42)
        {
          v83 = (uint64_t)*a2;
          v79 = **a2;
          **a2 = 4;
          goto LABEL_89;
        }
        v43 = *((_QWORD *)v42 - 1);
        if (*(_BYTE *)v43 != 2)
        {
          v91 = a2[4];
          v79 = *v91;
          *v91 = 4;
          goto LABEL_98;
        }
        v37 = *(_QWORD *)(v43 + 8);
        v44 = *(_QWORD *)(v37 + 8);
        if (v44 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v44 = 4;
          *(_QWORD *)(v44 + 8) = 0;
          *(_QWORD *)(v37 + 8) = v44 + 16;
          goto LABEL_105;
        }
LABEL_213:
        v155 = sub_207D1FDEC((void **)v37, (unsigned __int8 *)&v189);
        goto LABEL_218;
      case 2u:
        v189.__r_.__value_.__r.__words[0] = 0;
        v50 = a2[2];
        if (a2[1] == v50)
        {
          v83 = (uint64_t)*a2;
          v79 = **a2;
          **a2 = 0;
LABEL_89:
          LOBYTE(v190.__vftable) = v79;
          v82 = *(_QWORD *)(v83 + 8);
          *(_QWORD *)(v83 + 8) = 0;
          goto LABEL_93;
        }
        v51 = *((_QWORD *)v50 - 1);
        if (*(_BYTE *)v51 != 2)
        {
          v91 = a2[4];
          v79 = *v91;
          *v91 = 0;
LABEL_98:
          v194.__r_.__value_.__s.__data_[0] = v79;
          v90 = *((_QWORD *)v91 + 1);
          *((_QWORD *)v91 + 1) = 0;
          goto LABEL_102;
        }
        v37 = *(_QWORD *)(v51 + 8);
        v52 = *(_QWORD *)(v37 + 8);
        if (v52 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v52 = 0;
          *(_QWORD *)(v52 + 8) = 0;
          *(_QWORD *)(v37 + 8) = v52 + 16;
          goto LABEL_105;
        }
        v155 = sub_207D1FF10((void **)v37);
        goto LABEL_218;
      case 3u:
        sub_207D2014C(a2, v185);
        goto LABEL_105;
      case 4u:
        v34 = *(_QWORD *)(a1 + 160);
        v189.__r_.__value_.__r.__words[0] = v34;
        v57 = a2[2];
        if (a2[1] == v57)
        {
          v78 = *a2;
          v79 = **a2;
          v80 = 6;
          goto LABEL_91;
        }
        v58 = *((_QWORD *)v57 - 1);
        if (*(_BYTE *)v58 != 2)
        {
          v87 = (char *)a2[4];
          v79 = *v87;
          v88 = 6;
          goto LABEL_100;
        }
        v37 = *(_QWORD *)(v58 + 8);
        v59 = *(_QWORD *)(v37 + 8);
        if (v59 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v59 = 6;
          *(_QWORD *)(v59 + 8) = v34;
          *(_QWORD *)(v37 + 8) = v59 + 16;
          goto LABEL_105;
        }
        v155 = sub_207D2053C((void **)v37, (uint64_t *)&v189);
        goto LABEL_218;
      case 5u:
        v34 = *(_QWORD *)(a1 + 152);
        v189.__r_.__value_.__r.__words[0] = v34;
        v35 = a2[2];
        if (a2[1] == v35)
        {
          v78 = *a2;
          v79 = **a2;
          v80 = 5;
LABEL_91:
          *v78 = v80;
          LOBYTE(v190.__vftable) = v79;
          v84 = *((_QWORD *)v78 + 1);
          *((_QWORD *)v78 + 1) = v34;
          v191 = v84;
          p_size = &v191;
          goto LABEL_104;
        }
        v36 = *((_QWORD *)v35 - 1);
        if (*(_BYTE *)v36 != 2)
        {
          v87 = (char *)a2[4];
          v79 = *v87;
          v88 = 5;
LABEL_100:
          *v87 = v88;
          v194.__r_.__value_.__s.__data_[0] = v79;
          v92 = *((_QWORD *)v87 + 1);
          *((_QWORD *)v87 + 1) = v34;
          v194.__r_.__value_.__l.__size_ = v92;
          goto LABEL_103;
        }
        v37 = *(_QWORD *)(v36 + 8);
        v38 = *(_QWORD *)(v37 + 8);
        if (v38 < *(_QWORD *)(v37 + 16))
        {
          *(_BYTE *)v38 = 5;
          *(_QWORD *)(v38 + 8) = v34;
          *(_QWORD *)(v37 + 8) = v38 + 16;
          goto LABEL_105;
        }
        v155 = sub_207D20028((void **)v37, (uint64_t *)&v189);
        goto LABEL_218;
      case 6u:
        v53 = *(_QWORD *)(a1 + 168);
        if ((v53 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v182 = *(_QWORD *)(a1 + 72);
          sub_20809C79C(v3, &v194);
          sub_20809C79C(v3, &v187);
          sub_207C96E8C("number overflow parsing '", &v187, &__p);
          sub_207C96E30("'", &__p, &v189);
          sub_207D1CEE4(406, (uint64_t)&v189, (uint64_t)&v190);
          v175 = sub_207D1F8D0((uint64_t)a2, v182, (uint64_t)&v194, (uint64_t)&v190);
          v190.__vftable = (std::exception_vtbl *)off_24C072CF8;
          std::runtime_error::~runtime_error(&v192);
          std::exception::~exception(&v190);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v189.__r_.__value_.__l.__data_);
          goto LABEL_280;
        }
        v189.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 168);
        v54 = a2[2];
        if (a2[1] == v54)
        {
          v86 = *a2;
          v79 = **a2;
          *v86 = 7;
          LOBYTE(v190.__vftable) = v79;
          v82 = *((_QWORD *)v86 + 1);
          *((_QWORD *)v86 + 1) = v53;
LABEL_93:
          v191 = v82;
          p_size = &v191;
        }
        else
        {
          v55 = *((_QWORD *)v54 - 1);
          if (*(_BYTE *)v55 == 2)
          {
            v37 = *(_QWORD *)(v55 + 8);
            v56 = *(_QWORD *)(v37 + 8);
            if (v56 >= *(_QWORD *)(v37 + 16))
            {
              v155 = sub_207D1FCC8((void **)v37, (uint64_t *)&v189);
LABEL_218:
              *(_QWORD *)(v37 + 8) = v155;
            }
            else
            {
              *(_BYTE *)v56 = 7;
              *(_QWORD *)(v56 + 8) = v53;
              *(_QWORD *)(v37 + 8) = v56 + 16;
            }
            goto LABEL_105;
          }
          v93 = a2[4];
          v79 = *v93;
          *v93 = 7;
          v194.__r_.__value_.__s.__data_[0] = v79;
          v90 = *((_QWORD *)v93 + 1);
          *((_QWORD *)v93 + 1) = v53;
LABEL_102:
          v194.__r_.__value_.__l.__size_ = v90;
LABEL_103:
          p_size = (uint64_t *)&v194.__r_.__value_.__l.__size_;
        }
LABEL_104:
        sub_207D20660(p_size, v79);
LABEL_105:
        v94 = v196;
        if (!v196)
        {
LABEL_264:
          v175 = 1;
          goto LABEL_265;
        }
        while (1)
        {
          if (((*(_QWORD *)&v195[((v94 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v94 - 1)) & 1) != 0)
          {
            v95 = sub_208099A00(v3);
            *(_DWORD *)(a1 + 32) = v95;
            if (v95 == 13)
              goto LABEL_4;
            if (v95 != 10)
            {
              v177 = *(_QWORD *)(a1 + 72);
              sub_20809C79C(v3, &v194);
              v189 = *(std::string *)(a1 + 72);
              sub_207C96EE8(&v187, "array");
              sub_20809C88C(a1, 0xAu, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
              sub_207D1B330(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
              v178 = sub_207D1BEE8((uint64_t)a2, v177, (uint64_t)&v194, (uint64_t)&v190);
              goto LABEL_279;
            }
            goto LABEL_112;
          }
          v96 = sub_208099A00(v3);
          *(_DWORD *)(a1 + 32) = v96;
          if (v96 == 13)
            break;
          if (v96 != 11)
          {
            v179 = *(_QWORD *)(a1 + 72);
            sub_20809C79C(v3, &v194);
            v189 = *(std::string *)(a1 + 72);
            sub_207C96EE8(&v187, "object");
            sub_20809C88C(a1, 0xBu, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
            sub_207D1B330(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
            v178 = sub_207D1BEE8((uint64_t)a2, v179, (uint64_t)&v194, (uint64_t)&v190);
            goto LABEL_279;
          }
LABEL_112:
          a2[2] -= 8;
          v94 = v196 - 1;
          v196 = v94;
          if (!v94)
            goto LABEL_264;
        }
        v97 = sub_208099A00(v3);
        v98 = v3;
        *(_DWORD *)(a1 + 32) = v97;
        if (v97 != 4)
          goto LABEL_277;
        v99 = *(uint64_t ***)(*((_QWORD *)a2[2] - 1) + 8);
        v101 = (char **)(v99 + 1);
        v100 = v99[1];
        v102 = (char **)(v99 + 1);
        v103 = (uint64_t *)(v99 + 1);
        if (v100)
        {
          v104 = *(_BYTE *)(a1 + 143);
          if (v104 >= 0)
            v105 = (const void *)v185;
          else
            v105 = *(const void **)(a1 + 120);
          if (v104 >= 0)
            v106 = *(unsigned __int8 *)(a1 + 143);
          else
            v106 = *(_QWORD *)(a1 + 128);
          while (1)
          {
            v103 = v100;
            v109 = (const void *)v100[4];
            v107 = v100 + 4;
            v108 = v109;
            v110 = *((char *)v107 + 23);
            if (v110 >= 0)
              v111 = v107;
            else
              v111 = v108;
            if (v110 >= 0)
              v112 = *((unsigned __int8 *)v107 + 23);
            else
              v112 = v107[1];
            if (v112 >= v106)
              v113 = v106;
            else
              v113 = v112;
            v114 = memcmp(v105, v111, v113);
            if (v114)
            {
              if (v114 < 0)
                goto LABEL_122;
LABEL_136:
              v115 = memcmp(v111, v105, v113);
              if (v115)
              {
                if ((v115 & 0x80000000) == 0)
                  goto LABEL_164;
              }
              else if (v112 >= v106)
              {
LABEL_164:
                v116 = (char *)v103;
                v3 = v98;
                goto LABEL_171;
              }
              v100 = (uint64_t *)v103[1];
              if (!v100)
              {
                v102 = (char **)(v103 + 1);
                break;
              }
            }
            else
            {
              if (v106 >= v112)
                goto LABEL_136;
LABEL_122:
              v100 = (uint64_t *)*v103;
              v102 = (char **)v103;
              if (!*v103)
                break;
            }
          }
        }
        v116 = (char *)operator new(0x48uLL);
        v3 = v98;
        v117 = v116 + 32;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_207CA40D8(v117, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v117 = *(_OWORD *)v185;
          *((_QWORD *)v116 + 6) = *(_QWORD *)(v185 + 16);
        }
        v116[56] = 0;
        *((_QWORD *)v116 + 8) = 0;
        *(_QWORD *)v116 = 0;
        *((_QWORD *)v116 + 1) = 0;
        *((_QWORD *)v116 + 2) = v103;
        *v102 = v116;
        v118 = (uint64_t *)**v99;
        v119 = v116;
        if (v118)
        {
          *v99 = v118;
          v119 = *v102;
        }
        v120 = *v101;
        v121 = v119 == *v101;
        v119[24] = v121;
        if (!v121)
        {
          do
          {
            v122 = *((_QWORD *)v119 + 2);
            if (*(_BYTE *)(v122 + 24))
              break;
            v123 = *(char **)(v122 + 16);
            v124 = *(_QWORD *)v123;
            if (*(_QWORD *)v123 == v122)
            {
              v127 = *((_QWORD *)v123 + 1);
              if (!v127 || (v128 = *(unsigned __int8 *)(v127 + 24), v125 = (_BYTE *)(v127 + 24), v128))
              {
                if (*(char **)v122 == v119)
                {
                  *(_BYTE *)(v122 + 24) = 1;
                  v123[24] = 0;
                  v131 = *(_QWORD *)(v122 + 8);
                  *(_QWORD *)v123 = v131;
                  if (v131)
                    goto LABEL_162;
                }
                else
                {
                  v129 = *(uint64_t **)(v122 + 8);
                  v130 = *v129;
                  *(_QWORD *)(v122 + 8) = *v129;
                  if (v130)
                  {
                    *(_QWORD *)(v130 + 16) = v122;
                    v123 = *(char **)(v122 + 16);
                  }
                  v129[2] = (uint64_t)v123;
                  *(_QWORD *)(*(_QWORD *)(v122 + 16) + 8 * (**(_QWORD **)(v122 + 16) != v122)) = v129;
                  *v129 = v122;
                  *(_QWORD *)(v122 + 16) = v129;
                  v123 = (char *)v129[2];
                  v122 = *(_QWORD *)v123;
                  *((_BYTE *)v129 + 24) = 1;
                  v123[24] = 0;
                  v131 = *(_QWORD *)(v122 + 8);
                  *(_QWORD *)v123 = v131;
                  if (v131)
LABEL_162:
                    *(_QWORD *)(v131 + 16) = v123;
                }
                *(_QWORD *)(v122 + 16) = *((_QWORD *)v123 + 2);
                *(_QWORD *)(*((_QWORD *)v123 + 2) + 8 * (**((_QWORD **)v123 + 2) != (_QWORD)v123)) = v122;
                *(_QWORD *)(v122 + 8) = v123;
LABEL_169:
                *((_QWORD *)v123 + 2) = v122;
                break;
              }
            }
            else if (!v124 || (v126 = *(unsigned __int8 *)(v124 + 24), v125 = (_BYTE *)(v124 + 24), v126))
            {
              if (*(char **)v122 == v119)
              {
                v154 = *((_QWORD *)v119 + 1);
                *(_QWORD *)v122 = v154;
                if (v154)
                {
                  *(_QWORD *)(v154 + 16) = v122;
                  v123 = *(char **)(v122 + 16);
                }
                *((_QWORD *)v119 + 2) = v123;
                *(_QWORD *)(*(_QWORD *)(v122 + 16) + 8 * (**(_QWORD **)(v122 + 16) != v122)) = v119;
                *((_QWORD *)v119 + 1) = v122;
                *(_QWORD *)(v122 + 16) = v119;
                v123 = (char *)*((_QWORD *)v119 + 2);
                v119[24] = 1;
                v123[24] = 0;
                v122 = *((_QWORD *)v123 + 1);
                v132 = *(char **)v122;
                *((_QWORD *)v123 + 1) = *(_QWORD *)v122;
                if (v132)
LABEL_167:
                  *((_QWORD *)v132 + 2) = v123;
              }
              else
              {
                *(_BYTE *)(v122 + 24) = 1;
                v123[24] = 0;
                v122 = *((_QWORD *)v123 + 1);
                v132 = *(char **)v122;
                *((_QWORD *)v123 + 1) = *(_QWORD *)v122;
                if (v132)
                  goto LABEL_167;
              }
              *(_QWORD *)(v122 + 16) = *((_QWORD *)v123 + 2);
              *(_QWORD *)(*((_QWORD *)v123 + 2) + 8 * (**((_QWORD **)v123 + 2) != (_QWORD)v123)) = v122;
              *(_QWORD *)v122 = v123;
              goto LABEL_169;
            }
            *(_BYTE *)(v122 + 24) = 1;
            v119 = v123;
            v123[24] = v123 == v120;
            *v125 = 1;
          }
          while (v123 != v120);
        }
        v99[2] = (uint64_t *)((char *)v99[2] + 1);
LABEL_171:
        a2[4] = (unsigned __int8 *)(v116 + 56);
        v133 = sub_208099A00(v3);
        *(_DWORD *)(a1 + 32) = v133;
        if (v133 != 12)
          goto LABEL_278;
LABEL_4:
        v6 = sub_208099A00(v3);
LABEL_5:
        *(_DWORD *)(a1 + 32) = v6;
        v4 = v6 - 1;
        continue;
      case 7u:
        LOBYTE(v190.__vftable) = 2;
        v7 = sub_207D1F924(a2, (unsigned __int8 *)&v190);
        v8 = v7;
        v10 = (uint64_t *)a2[2];
        v9 = a2[3];
        if (v10 < (uint64_t *)v9)
        {
          *v10 = v7;
          v11 = (uint64_t)(v10 + 1);
          goto LABEL_29;
        }
        v12 = *v184;
        v13 = (char *)v10 - (char *)*v184;
        v14 = v13 >> 3;
        v15 = (v13 >> 3) + 1;
        if (v15 >> 61)
          goto LABEL_291;
        v16 = v9 - (unsigned __int8 *)v12;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            goto LABEL_292;
          v18 = operator new(8 * v17);
          v19 = &v18[8 * v14];
          *(_QWORD *)v19 = v8;
          v11 = (uint64_t)(v19 + 8);
          v20 = (char *)((char *)v10 - (char *)v12);
          if (v10 == v12)
          {
LABEL_27:
            a2[1] = v19;
            a2[2] = (unsigned __int8 *)v11;
            a2[3] = &v18[8 * v17];
            if (!v10)
              goto LABEL_29;
LABEL_28:
            operator delete(v10);
            goto LABEL_29;
          }
        }
        else
        {
          v18 = 0;
          v19 = (unsigned __int8 *)(8 * v14);
          *(_QWORD *)(8 * v14) = v8;
          v11 = 8 * v14 + 8;
          v20 = (char *)((char *)v10 - (char *)v12);
          if (v10 == v12)
            goto LABEL_27;
        }
        v21 = (unint64_t)(v20 - 8);
        if (v21 < 0x58)
          goto LABEL_298;
        if ((unint64_t)((char *)v10 - v18 - v13) < 0x20)
          goto LABEL_298;
        v22 = (v21 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v10[v23 / 0xFFFFFFFFFFFFFFF8];
        v19 -= v23;
        v25 = &v18[8 * v14 - 16];
        v26 = v10 - 2;
        v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 4;
          v27 -= 4;
        }
        while (v27);
        v10 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_298:
          do
          {
            v29 = *--v10;
            *((_QWORD *)v19 - 1) = v29;
            v19 -= 8;
          }
          while (v10 != v12);
        }
        v10 = *v184;
        a2[1] = v19;
        a2[2] = (unsigned __int8 *)v11;
        a2[3] = &v18[8 * v17];
        if (v10)
          goto LABEL_28;
LABEL_29:
        a2[2] = (unsigned __int8 *)v11;
        v30 = sub_208099A00(v3);
        *(_DWORD *)(a1 + 32) = v30;
        if (v30 == 10)
          goto LABEL_177;
        v31 = v196;
        if (v196 == v197 << 6)
        {
          if ((uint64_t)(v196 + 1) < 0)
            sub_207D159B0();
          v32 = v197 << 7;
          if (v197 << 7 <= (v196 & 0xFFFFFFFFFFFFFFC0) + 64)
            v32 = (v196 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v196 <= 0x3FFFFFFFFFFFFFFELL)
            v33 = v32;
          else
            v33 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v195, v33);
          v31 = v196;
        }
        v196 = v31 + 1;
        *(_QWORD *)&v195[(v31 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v31;
        v4 = *(_DWORD *)(a1 + 32) - 1;
        if (v4 > 0xD)
          goto LABEL_2;
        continue;
      case 8u:
        LOBYTE(v190.__vftable) = 1;
        v45 = sub_207D1F924(a2, (unsigned __int8 *)&v190);
        v46 = v45;
        v48 = (uint64_t *)a2[2];
        v47 = a2[3];
        if (v48 < (uint64_t *)v47)
        {
          *v48 = v45;
          v49 = (uint64_t)(v48 + 1);
          goto LABEL_176;
        }
        v60 = *v184;
        v61 = (char *)v48 - (char *)*v184;
        v62 = v61 >> 3;
        v63 = (v61 >> 3) + 1;
        if (v63 >> 61)
LABEL_291:
          sub_207D159B0();
        v64 = v47 - (unsigned __int8 *)v60;
        if (v64 >> 2 > v63)
          v63 = v64 >> 2;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          if (v65 >> 61)
LABEL_292:
            sub_207CA3AB8();
          v66 = operator new(8 * v65);
          v67 = &v66[8 * v62];
          *(_QWORD *)v67 = v46;
          v49 = (uint64_t)(v67 + 8);
          v68 = (char *)((char *)v48 - (char *)v60);
          if (v48 == v60)
          {
LABEL_174:
            a2[1] = v67;
            a2[2] = (unsigned __int8 *)v49;
            a2[3] = &v66[8 * v65];
            if (!v48)
              goto LABEL_176;
LABEL_175:
            operator delete(v48);
            goto LABEL_176;
          }
        }
        else
        {
          v66 = 0;
          v67 = (unsigned __int8 *)(8 * v62);
          *(_QWORD *)(8 * v62) = v46;
          v49 = 8 * v62 + 8;
          v68 = (char *)((char *)v48 - (char *)v60);
          if (v48 == v60)
            goto LABEL_174;
        }
        v69 = (unint64_t)(v68 - 8);
        if (v69 < 0x58)
          goto LABEL_299;
        if ((unint64_t)((char *)v48 - v66 - v61) < 0x20)
          goto LABEL_299;
        v70 = (v69 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v72 = &v48[v71 / 0xFFFFFFFFFFFFFFF8];
        v67 -= v71;
        v73 = &v66[8 * v62 - 16];
        v74 = v48 - 2;
        v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v76 = *(_OWORD *)v74;
          *(v73 - 1) = *((_OWORD *)v74 - 1);
          *v73 = v76;
          v73 -= 2;
          v74 -= 4;
          v75 -= 4;
        }
        while (v75);
        v48 = v72;
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_299:
          do
          {
            v77 = *--v48;
            *((_QWORD *)v67 - 1) = v77;
            v67 -= 8;
          }
          while (v48 != v60);
        }
        v48 = *v184;
        a2[1] = v67;
        a2[2] = (unsigned __int8 *)v49;
        a2[3] = &v66[8 * v65];
        if (v48)
          goto LABEL_175;
LABEL_176:
        a2[2] = (unsigned __int8 *)v49;
        v134 = sub_208099A00(v3);
        *(_DWORD *)(a1 + 32) = v134;
        if (v134 == 11)
        {
LABEL_177:
          a2[2] -= 8;
          goto LABEL_105;
        }
        if (v134 != 4)
        {
LABEL_277:
          v180 = *(_QWORD *)(a1 + 72);
          sub_20809C79C(v3, &v194);
          v189 = *(std::string *)(a1 + 72);
          sub_207C96EE8(&v187, "object key");
          sub_20809C88C(a1, 4u, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
          sub_207D1B330(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
          v178 = sub_207D1BEE8((uint64_t)a2, v180, (uint64_t)&v194, (uint64_t)&v190);
          goto LABEL_279;
        }
        v135 = *(uint64_t ***)(*((_QWORD *)a2[2] - 1) + 8);
        v137 = (char **)(v135 + 1);
        v136 = v135[1];
        v138 = (char **)(v135 + 1);
        v139 = (uint64_t *)(v135 + 1);
        if (v136)
        {
          v140 = *(_BYTE *)(a1 + 143);
          if (v140 >= 0)
            v141 = (const void *)v185;
          else
            v141 = *(const void **)(a1 + 120);
          if (v140 >= 0)
            v142 = *(unsigned __int8 *)(a1 + 143);
          else
            v142 = *(_QWORD *)(a1 + 128);
          while (1)
          {
            v139 = v136;
            v145 = (const void *)v136[4];
            v143 = v136 + 4;
            v144 = v145;
            v146 = *((char *)v143 + 23);
            if (v146 >= 0)
              v147 = v143;
            else
              v147 = v144;
            if (v146 >= 0)
              v148 = *((unsigned __int8 *)v143 + 23);
            else
              v148 = v143[1];
            if (v148 >= v142)
              v149 = v142;
            else
              v149 = v148;
            v150 = memcmp(v141, v147, v149);
            if (v150)
            {
              if (v150 < 0)
                goto LABEL_186;
LABEL_200:
              v151 = memcmp(v147, v141, v149);
              if (v151)
              {
                if ((v151 & 0x80000000) == 0)
                  goto LABEL_239;
              }
              else if (v148 >= v142)
              {
LABEL_239:
                v152 = (char *)v139;
                goto LABEL_248;
              }
              v136 = (uint64_t *)v139[1];
              if (!v136)
              {
                v138 = (char **)(v139 + 1);
                break;
              }
            }
            else
            {
              if (v142 >= v148)
                goto LABEL_200;
LABEL_186:
              v136 = (uint64_t *)*v139;
              v138 = (char **)v139;
              if (!*v139)
                break;
            }
          }
        }
        v152 = (char *)operator new(0x48uLL);
        v153 = v152 + 32;
        if (*(char *)(a1 + 143) < 0)
        {
          sub_207CA40D8(v153, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
        }
        else
        {
          *(_OWORD *)v153 = *(_OWORD *)v185;
          *((_QWORD *)v152 + 6) = *(_QWORD *)(v185 + 16);
        }
        v152[56] = 0;
        *((_QWORD *)v152 + 8) = 0;
        *(_QWORD *)v152 = 0;
        *((_QWORD *)v152 + 1) = 0;
        *((_QWORD *)v152 + 2) = v139;
        *v138 = v152;
        v156 = (uint64_t *)**v135;
        v157 = v152;
        if (v156)
        {
          *v135 = v156;
          v157 = *v138;
        }
        v158 = *v137;
        v121 = v157 == *v137;
        v157[24] = v121;
        if (!v121)
        {
          do
          {
            v159 = *((_QWORD *)v157 + 2);
            if (*(_BYTE *)(v159 + 24))
              break;
            v160 = *(char **)(v159 + 16);
            v161 = *(_QWORD *)v160;
            if (*(_QWORD *)v160 == v159)
            {
              v164 = *((_QWORD *)v160 + 1);
              if (!v164 || (v165 = *(unsigned __int8 *)(v164 + 24), v162 = (_BYTE *)(v164 + 24), v165))
              {
                if (*(char **)v159 == v157)
                {
                  *(_BYTE *)(v159 + 24) = 1;
                  v160[24] = 0;
                  v168 = *(_QWORD *)(v159 + 8);
                  *(_QWORD *)v160 = v168;
                  if (v168)
                    goto LABEL_237;
                }
                else
                {
                  v166 = *(uint64_t **)(v159 + 8);
                  v167 = *v166;
                  *(_QWORD *)(v159 + 8) = *v166;
                  if (v167)
                  {
                    *(_QWORD *)(v167 + 16) = v159;
                    v160 = *(char **)(v159 + 16);
                  }
                  v166[2] = (uint64_t)v160;
                  *(_QWORD *)(*(_QWORD *)(v159 + 16) + 8 * (**(_QWORD **)(v159 + 16) != v159)) = v166;
                  *v166 = v159;
                  *(_QWORD *)(v159 + 16) = v166;
                  v160 = (char *)v166[2];
                  v159 = *(_QWORD *)v160;
                  *((_BYTE *)v166 + 24) = 1;
                  v160[24] = 0;
                  v168 = *(_QWORD *)(v159 + 8);
                  *(_QWORD *)v160 = v168;
                  if (v168)
LABEL_237:
                    *(_QWORD *)(v168 + 16) = v160;
                }
                *(_QWORD *)(v159 + 16) = *((_QWORD *)v160 + 2);
                *(_QWORD *)(*((_QWORD *)v160 + 2) + 8 * (**((_QWORD **)v160 + 2) != (_QWORD)v160)) = v159;
                *(_QWORD *)(v159 + 8) = v160;
LABEL_246:
                *((_QWORD *)v160 + 2) = v159;
                break;
              }
            }
            else if (!v161 || (v163 = *(unsigned __int8 *)(v161 + 24), v162 = (_BYTE *)(v161 + 24), v163))
            {
              if (*(char **)v159 == v157)
              {
                v174 = *((_QWORD *)v157 + 1);
                *(_QWORD *)v159 = v174;
                if (v174)
                {
                  *(_QWORD *)(v174 + 16) = v159;
                  v160 = *(char **)(v159 + 16);
                }
                *((_QWORD *)v157 + 2) = v160;
                *(_QWORD *)(*(_QWORD *)(v159 + 16) + 8 * (**(_QWORD **)(v159 + 16) != v159)) = v157;
                *((_QWORD *)v157 + 1) = v159;
                *(_QWORD *)(v159 + 16) = v157;
                v160 = (char *)*((_QWORD *)v157 + 2);
                v157[24] = 1;
                v160[24] = 0;
                v159 = *((_QWORD *)v160 + 1);
                v169 = *(char **)v159;
                *((_QWORD *)v160 + 1) = *(_QWORD *)v159;
                if (v169)
LABEL_244:
                  *((_QWORD *)v169 + 2) = v160;
              }
              else
              {
                *(_BYTE *)(v159 + 24) = 1;
                v160[24] = 0;
                v159 = *((_QWORD *)v160 + 1);
                v169 = *(char **)v159;
                *((_QWORD *)v160 + 1) = *(_QWORD *)v159;
                if (v169)
                  goto LABEL_244;
              }
              *(_QWORD *)(v159 + 16) = *((_QWORD *)v160 + 2);
              *(_QWORD *)(*((_QWORD *)v160 + 2) + 8 * (**((_QWORD **)v160 + 2) != (_QWORD)v160)) = v159;
              *(_QWORD *)v159 = v160;
              goto LABEL_246;
            }
            *(_BYTE *)(v159 + 24) = 1;
            v157 = v160;
            v160[24] = v160 == v158;
            *v162 = 1;
          }
          while (v160 != v158);
        }
        v135[2] = (uint64_t *)((char *)v135[2] + 1);
LABEL_248:
        a2[4] = (unsigned __int8 *)(v152 + 56);
        v170 = sub_208099A00(v3);
        *(_DWORD *)(a1 + 32) = v170;
        if (v170 == 12)
        {
          v171 = v196;
          if (v196 == v197 << 6)
          {
            if ((uint64_t)(v196 + 1) < 0)
              sub_207D159B0();
            v172 = v197 << 7;
            if (v197 << 7 <= (v196 & 0xFFFFFFFFFFFFFFC0) + 64)
              v172 = (v196 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v196 <= 0x3FFFFFFFFFFFFFFELL)
              v173 = v172;
            else
              v173 = 0x7FFFFFFFFFFFFFFFLL;
            sub_207D1C104((uint64_t)&v195, v173);
            v171 = v196;
          }
          v196 = v171 + 1;
          *(_QWORD *)&v195[(v171 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v171);
          v6 = sub_208099A00(v3);
          goto LABEL_5;
        }
LABEL_278:
        v181 = *(_QWORD *)(a1 + 72);
        sub_20809C79C(v3, &v194);
        v189 = *(std::string *)(a1 + 72);
        sub_207C96EE8(&v187, "object separator");
        sub_20809C88C(a1, 0xCu, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_207D1B330(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
        v178 = sub_207D1BEE8((uint64_t)a2, v181, (uint64_t)&v194, (uint64_t)&v190);
LABEL_279:
        v175 = v178;
        v190.__vftable = (std::exception_vtbl *)off_24C072CF8;
        std::runtime_error::~runtime_error(&v192);
        std::exception::~exception(&v190);
LABEL_280:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_282:
            if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_265;
            goto LABEL_286;
          }
        }
        else if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_282;
        }
        operator delete(v187.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_265;
LABEL_286:
        operator delete(v194.__r_.__value_.__l.__data_);
LABEL_265:
        if (v195)
          operator delete(v195);
        return v175;
      case 0xDu:
        sub_20809C79C(v3, &v194);
        v189 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v187.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v187, "value");
        sub_20809C88C(a1, 0, (const void **)&v187.__r_.__value_.__l.__data_, (uint64_t)&__p);
        sub_207D1B330(101, (uint64_t *)&v189, (uint64_t)&__p, (uint64_t)&v190);
        *((_BYTE *)a2 + 40) = 1;
        if (*((_BYTE *)a2 + 41))
        {
          v183 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v183 = off_24C072CF8;
          *((_DWORD *)v183 + 2) = v191;
          std::runtime_error::runtime_error((std::runtime_error *)v183 + 1, &v192);
          *(_QWORD *)v183 = off_24C072DF8;
          *((_QWORD *)v183 + 4) = v193;
          __cxa_throw(v183, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
        }
        goto LABEL_269;
      default:
        goto LABEL_2;
    }
  }
}

void sub_20809E530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::exception a34)
{
  std::runtime_error *v34;
  uint64_t v35;
  void *v37;

  a34.__vftable = (std::exception_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(v34 + 1);
  std::exception::~exception(&a34);
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v35 - 113) < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete(a15);
  if (*(char *)(v35 - 113) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v35 - 136));
    v37 = *(void **)(v35 - 112);
    if (v37)
    {
LABEL_10:
      operator delete(v37);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  v37 = *(void **)(v35 - 112);
  if (v37)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_20809E7AC(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _DWORD *a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int8x8_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((_BYTE *)a4 + 20))
  {
    v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    v9 = *(_DWORD *)a3;
    v10 = *((_DWORD *)a3 + 1);
    if (v10)
      v11 = *(_DWORD *)a3;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    v12 = v10 * v9;
    v13 = *((_DWORD *)a3 + 2);
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(_QWORD *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = *a5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a6 + 56))
  {
    *(_QWORD *)(a1 + 56) = off_24C06F140;
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(std::__shared_weak_count **)(a6 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    else
    {
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
    }
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    v24 = *(_QWORD *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 96) = v20;
    *(_DWORD *)(a1 + 104) = v21;
    *(_WORD *)(a1 + 108) = v22;
    if (v17)
    {
      v25 = (unint64_t *)&v17->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_20809E918(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  __int128 v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int16 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE v96[24];
  uint64_t v97;
  _BYTE v98[12];
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x10) != 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
      {
        v25 = *(_QWORD *)(a1 + 64);
        v26 = *(std::__shared_weak_count **)(a1 + 72);
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v25 + 88))(v25, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
      v30 = (uint64_t *)(a1 + 96);
    }
    else
    {
      v30 = (uint64_t *)(a1 + 40);
    }
    v31 = 0;
    v32 = *v30;
    v33 = *(unsigned int *)(a1 + 28);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
      v31 = *(_QWORD *)(a1 + 4);
    v34 = (2 * *(_DWORD *)(a1 + 24)) | ((unint64_t)v33 << 33);
    v35 = v32 + (2 * (*(_DWORD *)(a1 + 32) * a2 + *(_DWORD *)(a1 + 36) * a3));
    if ((_DWORD)v31)
      v36 = HIDWORD(v31) == 0;
    else
      v36 = 1;
    if (v36)
      v31 = 0;
    v92 = v31;
    v93 = v34;
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0x10:
      case 0x11:
        v95 = v35;
        *(_QWORD *)v96 = off_24C06EB30;
        if (HIDWORD(v31))
          v37 = (_DWORD)v31 == 0;
        else
          v37 = 1;
        if (v37)
          v38 = 0;
        else
          v38 = v33 << 33;
        v94 = v38 | ((_DWORD)v31 != 0);
        sub_20805B514(&v95, &v92, (uint64_t *)&v94, (uint64_t)&v96[8]);
        *(_QWORD *)a4 = off_24C06E878;
        v39 = *(_OWORD *)&v96[8];
        if (*(_QWORD *)&v96[16])
        {
          v40 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
          v42 = v99;
          v44 = v97;
          v43 = *(_QWORD *)v98;
          v45 = v100;
          do
            v46 = __ldxr(v40);
          while (__stxr(v46 + 1, v40));
          do
            v47 = __ldxr(v40);
          while (__stxr(v47 + 1, v40));
        }
        else
        {
          v42 = v99;
          v44 = v97;
          v43 = *(_QWORD *)v98;
          v45 = v100;
        }
        *(_OWORD *)(a4 + 8) = v39;
        *(_QWORD *)(a4 + 24) = v43;
        *(_DWORD *)(a4 + 32) = v42;
        *(_QWORD *)(a4 + 40) = v44;
        *(_DWORD *)(a4 + 48) = 1;
        *(_WORD *)(a4 + 52) = v45;
        if (*((_QWORD *)&v39 + 1))
        {
          v80 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
          }
          do
            v82 = __ldaxr(v80);
          while (__stlxr(v82 - 1, v80));
          if (!v82)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
          }
        }
        v51 = *(std::__shared_weak_count **)&v96[16];
        if (!*(_QWORD *)&v96[16])
          return;
        v83 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
        do
          v53 = __ldaxr(v83);
        while (__stlxr(v53 - 1, v83));
        break;
      case 0x12:
        v65 = 2 * v33;
        if ((_DWORD)v31)
          v66 = HIDWORD(v31) == 0;
        else
          v66 = 1;
        if (v66)
          v31 = 0;
        *(_DWORD *)v96 = 2;
        *(_QWORD *)&v96[4] = v31;
        v67 = HIDWORD(v31);
        if (v66)
          v65 = 0;
        *(_DWORD *)&v96[8] = v67;
        v68 = *(_QWORD *)&v96[4];
        *(_QWORD *)a4 = off_24C06E878;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = v68;
        *(_DWORD *)(a4 + 32) = v65;
        *(_QWORD *)(a4 + 40) = v35;
        *(_DWORD *)(a4 + 48) = 5;
        *(_WORD *)(a4 + 52) = 0;
        return;
      case 0x14:
        v95 = v35;
        *(_QWORD *)v96 = &off_24C07CF28;
        if (HIDWORD(v31))
          v69 = (_DWORD)v31 == 0;
        else
          v69 = 1;
        if (v69)
          v70 = 0;
        else
          v70 = v33 << 33;
        v94 = v70 | (4 * ((_DWORD)v31 != 0));
        sub_20805DEE8(&v95, &v92, &v94, (uint64_t)&v96[8]);
        *(_QWORD *)a4 = off_24C06E878;
        v71 = *(_OWORD *)&v96[8];
        if (*(_QWORD *)&v96[16])
        {
          v72 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
          v74 = *(_QWORD *)&v98[4];
          v75 = v101;
          v76 = v97;
          v77 = v102;
          do
            v78 = __ldxr(v72);
          while (__stxr(v78 + 1, v72));
          do
            v79 = __ldxr(v72);
          while (__stxr(v79 + 1, v72));
        }
        else
        {
          v74 = *(_QWORD *)&v98[4];
          v75 = v101;
          v76 = v97;
          v77 = v102;
        }
        *(_OWORD *)(a4 + 8) = v71;
        *(_QWORD *)(a4 + 24) = v74;
        *(_DWORD *)(a4 + 32) = v75;
        *(_QWORD *)(a4 + 40) = v76;
        *(_DWORD *)(a4 + 48) = 25;
        *(_WORD *)(a4 + 52) = v77;
        if (*((_QWORD *)&v71 + 1))
        {
          v88 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v71 + 1) + 16))(*((_QWORD *)&v71 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v71 + 1));
          }
          do
            v90 = __ldaxr(v88);
          while (__stlxr(v90 - 1, v88));
          if (!v90)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v71 + 1) + 16))(*((_QWORD *)&v71 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v71 + 1));
          }
        }
        v51 = *(std::__shared_weak_count **)&v96[16];
        if (!*(_QWORD *)&v96[16])
          return;
        v91 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
        do
          v53 = __ldaxr(v91);
        while (__stlxr(v53 - 1, v91));
        break;
      case 0x18:
        v95 = v35;
        *(_QWORD *)v96 = &off_24C07D308;
        if (HIDWORD(v31))
          v54 = (_DWORD)v31 == 0;
        else
          v54 = 1;
        if (v54)
          v55 = 0;
        else
          v55 = v33 << 33;
        v94 = v55 | (4 * ((_DWORD)v31 != 0));
        sub_20805E7EC(&v95, &v92, &v94, (uint64_t)&v96[8]);
        *(_QWORD *)a4 = off_24C06E878;
        v56 = *(_OWORD *)&v96[8];
        if (*(_QWORD *)&v96[16])
        {
          v57 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
          v59 = *(_QWORD *)&v98[4];
          v60 = v101;
          v61 = v97;
          v62 = v102;
          do
            v63 = __ldxr(v57);
          while (__stxr(v63 + 1, v57));
          do
            v64 = __ldxr(v57);
          while (__stxr(v64 + 1, v57));
        }
        else
        {
          v59 = *(_QWORD *)&v98[4];
          v60 = v101;
          v61 = v97;
          v62 = v102;
        }
        *(_OWORD *)(a4 + 8) = v56;
        *(_QWORD *)(a4 + 24) = v59;
        *(_DWORD *)(a4 + 32) = v60;
        *(_QWORD *)(a4 + 40) = v61;
        *(_DWORD *)(a4 + 48) = 29;
        *(_WORD *)(a4 + 52) = v62;
        if (*((_QWORD *)&v56 + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v56 + 1) + 16))(*((_QWORD *)&v56 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v56 + 1));
          }
          do
            v86 = __ldaxr(v84);
          while (__stlxr(v86 - 1, v84));
          if (!v86)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v56 + 1) + 16))(*((_QWORD *)&v56 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v56 + 1));
          }
        }
        v51 = *(std::__shared_weak_count **)&v96[16];
        if (!*(_QWORD *)&v96[16])
          return;
        v87 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
        do
          v53 = __ldaxr(v87);
        while (__stlxr(v53 - 1, v87));
        break;
      default:
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 138, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
        abort();
    }
    goto LABEL_143;
  }
  if ((v8 & 0x20) == 0)
  {
    if ((v8 & 0x40) == 0)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 164, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
      abort();
    }
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 162, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
    abort();
  }
  sub_207DC9E60(a1, (uint64_t)v96);
  v9 = *(_DWORD *)&v98[8] * a2;
  v10 = *(_QWORD *)v98;
  v11 = *(_QWORD *)v96 + 2 * (v9 + v99 * a3);
  if (*(_DWORD *)&v96[12])
    v12 = HIDWORD(*(_QWORD *)&v96[12]) == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = *(_QWORD *)&v96[12];
  v92 = v13;
  v93 = *(_QWORD *)v98;
  if (HIDWORD(v13) * *(_DWORD *)&v98[4] == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if ((*(_DWORD *)(a1 + 48) & 0xFFFFFFFE) != 0x20)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 148, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
    abort();
  }
  v95 = v11;
  *(_QWORD *)v96 = &off_24C074A58;
  if (HIDWORD(v13))
    v14 = v13 == 0;
  else
    v14 = 1;
  v15 = v10 & 0xFFFFFFFF00000000;
  if (v14)
    v15 = 0;
  v94 = v15 | (v13 != 0);
  sub_20805BC0C(&v95, &v92, (uint64_t *)&v94, (uint64_t)&v96[8]);
  *(_QWORD *)a4 = off_24C06E878;
  v16 = *(_OWORD *)&v96[8];
  if (*(_QWORD *)&v96[16])
  {
    v17 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = v99;
    v21 = v97;
    v20 = *(_QWORD *)v98;
    v22 = v100;
    do
      v23 = __ldxr(v17);
    while (__stxr(v23 + 1, v17));
    do
      v24 = __ldxr(v17);
    while (__stxr(v24 + 1, v17));
  }
  else
  {
    v19 = v99;
    v21 = v97;
    v20 = *(_QWORD *)v98;
    v22 = v100;
  }
  *(_OWORD *)(a4 + 8) = v16;
  *(_QWORD *)(a4 + 24) = v20;
  *(_DWORD *)(a4 + 32) = 2 * v19;
  *(_QWORD *)(a4 + 40) = v21;
  *(_DWORD *)(a4 + 48) = 3;
  *(_WORD *)(a4 + 52) = v22;
  if (*((_QWORD *)&v16 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
    }
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  v51 = *(std::__shared_weak_count **)&v96[16];
  if (*(_QWORD *)&v96[16])
  {
    v52 = (unint64_t *)(*(_QWORD *)&v96[16] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
LABEL_143:
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

uint64_t sub_20809F1D0(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, _DWORD *a5, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int8x8_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v7 = *a3;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a1 = v7;
  if (*((_BYTE *)a4 + 20))
  {
    v8 = *a4;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a4 + 4);
    *(_OWORD *)(a1 + 20) = v8;
  }
  else
  {
    v9 = *(_DWORD *)a3;
    v10 = *((_DWORD *)a3 + 1);
    if (v10)
      v11 = *(_DWORD *)a3;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)a3 != 0;
    *(_DWORD *)(a1 + 24) = v11;
    v12 = v10 * v9;
    v13 = *((_DWORD *)a3 + 2);
    if (v13)
      v14 = v12;
    else
      v14 = 0;
    *(_DWORD *)(a1 + 28) = v14;
    v15.i32[0] = v13 * v12;
    v15.i32[1] = *(_QWORD *)((char *)a3 + 12) * v13 * v12;
    *(int8x8_t *)(a1 + 32) = vbic_s8(v15, (int8x8_t)vceqz_s32(*(int32x2_t *)((char *)a3 + 12)));
  }
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = *a5;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a6 + 56))
  {
    *(_QWORD *)(a1 + 56) = off_24C06E878;
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(std::__shared_weak_count **)(a6 + 16);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    else
    {
      v20 = *(_QWORD *)(a6 + 40);
      v21 = *(_DWORD *)(a6 + 48);
      v22 = *(_WORD *)(a6 + 52);
    }
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v17;
    v24 = *(_QWORD *)(a6 + 24);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a6 + 32);
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 96) = v20;
    *(_DWORD *)(a1 + 104) = v21;
    *(_WORD *)(a1 + 108) = v22;
    if (v17)
    {
      v25 = (unint64_t *)&v17->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  return a1;
}

void sub_20809F344(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  BOOL v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  __int128 v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  __int16 v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  BOOL v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  __int16 v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _BYTE v119[24];
  uint64_t v120;
  _BYTE v121[12];
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  _BYTE v126[12];
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x10) != 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = *(std::__shared_weak_count **)(a1 + 72);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v26 + 88))(v26, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
      v31 = (uint64_t *)(a1 + 96);
    }
    else
    {
      v31 = (uint64_t *)(a1 + 40);
    }
    v43 = 0;
    v44 = *v31;
    v45 = *(unsigned int *)(a1 + 28);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
      v43 = *(_QWORD *)(a1 + 4);
    v46 = (4 * *(_DWORD *)(a1 + 24)) | ((unint64_t)v45 << 34);
    v47 = v44 + (4 * (*(_DWORD *)(a1 + 32) * a2 + *(_DWORD *)(a1 + 36) * a3));
    if ((_DWORD)v43)
      v48 = HIDWORD(v43) == 0;
    else
      v48 = 1;
    if (v48)
      v43 = 0;
    v116 = v43;
    v117 = v46;
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0x10:
      case 0x11:
        *(_QWORD *)v126 = v47;
        *(_QWORD *)v119 = off_24C06EB30;
        if (HIDWORD(v43))
          v49 = (_DWORD)v43 == 0;
        else
          v49 = 1;
        if (v49)
          v50 = 0;
        else
          v50 = v45 << 34;
        v118 = v50 | ((_DWORD)v43 != 0);
        sub_20805B514(v126, &v116, (uint64_t *)&v118, (uint64_t)&v119[8]);
        *(_QWORD *)a4 = off_24C06E878;
        v51 = *(_OWORD *)&v119[8];
        if (*(_QWORD *)&v119[16])
        {
          v52 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
          v54 = v122;
          v56 = v120;
          v55 = *(_QWORD *)v121;
          v57 = v123;
          do
            v58 = __ldxr(v52);
          while (__stxr(v58 + 1, v52));
          do
            v59 = __ldxr(v52);
          while (__stxr(v59 + 1, v52));
        }
        else
        {
          v54 = v122;
          v56 = v120;
          v55 = *(_QWORD *)v121;
          v57 = v123;
        }
        *(_OWORD *)(a4 + 8) = v51;
        *(_QWORD *)(a4 + 24) = v55;
        *(_DWORD *)(a4 + 32) = v54;
        *(_QWORD *)(a4 + 40) = v56;
        *(_DWORD *)(a4 + 48) = 1;
        *(_WORD *)(a4 + 52) = v57;
        if (*((_QWORD *)&v51 + 1))
        {
          v100 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
          }
          do
            v102 = __ldaxr(v100);
          while (__stlxr(v102 - 1, v100));
          if (!v102)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
          }
        }
        v97 = *(std::__shared_weak_count **)&v119[16];
        if (!*(_QWORD *)&v119[16])
          return;
        v103 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
        do
          v99 = __ldaxr(v103);
        while (__stlxr(v99 - 1, v103));
        break;
      case 0x12:
        v79 = 4 * v45;
        if ((_DWORD)v43)
          v80 = HIDWORD(v43) == 0;
        else
          v80 = 1;
        if (v80)
          v43 = 0;
        *(_DWORD *)v119 = 2;
        *(_QWORD *)&v119[4] = v43;
        v81 = HIDWORD(v43);
        if (v80)
          v79 = 0;
        *(_DWORD *)&v119[8] = v81;
        v82 = *(_QWORD *)&v119[4];
        *(_QWORD *)a4 = off_24C06E878;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = v82;
        *(_DWORD *)(a4 + 32) = v79;
        *(_QWORD *)(a4 + 40) = v47;
        v67 = 5;
        goto LABEL_108;
      case 0x14:
        *(_QWORD *)v126 = v47;
        *(_QWORD *)v119 = &off_24C07CF28;
        if (HIDWORD(v43))
          v83 = (_DWORD)v43 == 0;
        else
          v83 = 1;
        if (v83)
          v84 = 0;
        else
          v84 = v45 << 34;
        v118 = v84 | (4 * ((_DWORD)v43 != 0));
        sub_20805DEE8((uint64_t *)v126, &v116, &v118, (uint64_t)&v119[8]);
        *(_QWORD *)a4 = off_24C06E878;
        v85 = *(_OWORD *)&v119[8];
        if (*(_QWORD *)&v119[16])
        {
          v86 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
          v88 = *(_QWORD *)&v121[4];
          v89 = v124;
          v90 = v120;
          v91 = v125;
          do
            v92 = __ldxr(v86);
          while (__stxr(v92 + 1, v86));
          do
            v93 = __ldxr(v86);
          while (__stxr(v93 + 1, v86));
        }
        else
        {
          v88 = *(_QWORD *)&v121[4];
          v89 = v124;
          v90 = v120;
          v91 = v125;
        }
        *(_OWORD *)(a4 + 8) = v85;
        *(_QWORD *)(a4 + 24) = v88;
        *(_DWORD *)(a4 + 32) = v89;
        *(_QWORD *)(a4 + 40) = v90;
        *(_DWORD *)(a4 + 48) = 25;
        *(_WORD *)(a4 + 52) = v91;
        if (*((_QWORD *)&v85 + 1))
        {
          v112 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
          }
          do
            v114 = __ldaxr(v112);
          while (__stlxr(v114 - 1, v112));
          if (!v114)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
          }
        }
        v97 = *(std::__shared_weak_count **)&v119[16];
        if (!*(_QWORD *)&v119[16])
          return;
        v115 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
        do
          v99 = __ldaxr(v115);
        while (__stlxr(v99 - 1, v115));
        break;
      case 0x18:
        *(_QWORD *)v126 = v47;
        *(_QWORD *)v119 = &off_24C07D308;
        if (HIDWORD(v43))
          v68 = (_DWORD)v43 == 0;
        else
          v68 = 1;
        if (v68)
          v69 = 0;
        else
          v69 = v45 << 34;
        v118 = v69 | (4 * ((_DWORD)v43 != 0));
        sub_20805E7EC((uint64_t *)v126, &v116, &v118, (uint64_t)&v119[8]);
        *(_QWORD *)a4 = off_24C06E878;
        v70 = *(_OWORD *)&v119[8];
        if (*(_QWORD *)&v119[16])
        {
          v71 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
          v73 = *(_QWORD *)&v121[4];
          v74 = v124;
          v75 = v120;
          v76 = v125;
          do
            v77 = __ldxr(v71);
          while (__stxr(v77 + 1, v71));
          do
            v78 = __ldxr(v71);
          while (__stxr(v78 + 1, v71));
        }
        else
        {
          v73 = *(_QWORD *)&v121[4];
          v74 = v124;
          v75 = v120;
          v76 = v125;
        }
        *(_OWORD *)(a4 + 8) = v70;
        *(_QWORD *)(a4 + 24) = v73;
        *(_DWORD *)(a4 + 32) = v74;
        *(_QWORD *)(a4 + 40) = v75;
        *(_DWORD *)(a4 + 48) = 29;
        *(_WORD *)(a4 + 52) = v76;
        if (*((_QWORD *)&v70 + 1))
        {
          v108 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
          }
          do
            v110 = __ldaxr(v108);
          while (__stlxr(v110 - 1, v108));
          if (!v110)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 16))(*((_QWORD *)&v70 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v70 + 1));
          }
        }
        v97 = *(std::__shared_weak_count **)&v119[16];
        if (!*(_QWORD *)&v119[16])
          return;
        v111 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
        do
          v99 = __ldaxr(v111);
        while (__stlxr(v99 - 1, v111));
        break;
      default:
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 138, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
        abort();
    }
    goto LABEL_186;
  }
  if ((v8 & 0x20) != 0)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 148, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
    abort();
  }
  if ((v8 & 0x40) == 0)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 164, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
    abort();
  }
  sub_207CB36E8(a1, (uint64_t)v119);
  v9 = *(_QWORD *)v121;
  v10 = *(_QWORD *)v119 + 4 * (*(_DWORD *)&v121[8] * a2 + v122 * a3);
  if (*(_DWORD *)&v119[12])
    v11 = HIDWORD(*(_QWORD *)&v119[12]) == 0;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = *(_QWORD *)&v119[12];
  v116 = v12;
  v117 = *(_QWORD *)v121;
  v13 = HIDWORD(*(_QWORD *)v121);
  if (HIDWORD(v12) * *(_DWORD *)&v121[4] == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = *(_DWORD *)(a1 + 48);
  if ((v14 - 64) < 2)
  {
    *(_QWORD *)v126 = v10;
    if (HIDWORD(v12))
      v32 = (_DWORD)v12 == 0;
    else
      v32 = 1;
    v33 = v9 & 0xFFFFFFFF00000000;
    if (v32)
      v33 = 0;
    v118 = v33 | ((_DWORD)v12 != 0);
    *(_QWORD *)v119 = &off_24C073A50;
    sub_207D5A53C(v126, &v116, (uint64_t *)&v118, (uint64_t)&v119[8]);
    *(_QWORD *)a4 = off_24C06E878;
    v34 = *(_OWORD *)&v119[8];
    if (*(_QWORD *)&v119[16])
    {
      v35 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v37 = v122;
      v39 = v120;
      v38 = *(_QWORD *)v121;
      v40 = v123;
      do
        v41 = __ldxr(v35);
      while (__stxr(v41 + 1, v35));
      do
        v42 = __ldxr(v35);
      while (__stxr(v42 + 1, v35));
    }
    else
    {
      v37 = v122;
      v39 = v120;
      v38 = *(_QWORD *)v121;
      v40 = v123;
    }
    *(_OWORD *)(a4 + 8) = v34;
    *(_QWORD *)(a4 + 24) = v38;
    *(_DWORD *)(a4 + 32) = 4 * v37;
    *(_QWORD *)(a4 + 40) = v39;
    *(_DWORD *)(a4 + 48) = 4;
    *(_WORD *)(a4 + 52) = v40;
    if (*((_QWORD *)&v34 + 1))
    {
      v94 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
      }
      do
        v96 = __ldaxr(v94);
      while (__stlxr(v96 - 1, v94));
      if (!v96)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
      }
    }
    v97 = *(std::__shared_weak_count **)&v119[16];
    if (*(_QWORD *)&v119[16])
    {
      v98 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      goto LABEL_186;
    }
  }
  else if (v14 == 68)
  {
    if (HIDWORD(v116))
      v60 = (_DWORD)v116 == 0;
    else
      v60 = 1;
    v61 = v116;
    if (v60)
      v61 = 0;
    if (HIDWORD(v12))
      v62 = (_DWORD)v12 == 0;
    else
      v62 = 1;
    *(_QWORD *)v119 = 0;
    *(_QWORD *)&v119[8] = 0;
    *(_QWORD *)&v126[4] = v61;
    *(_DWORD *)v126 = 4;
    v63 = *(_QWORD *)v126;
    v64 = HIDWORD(v61);
    if (v62)
      v65 = 0;
    else
      v65 = v13;
    if (v65 * HIDWORD(v61) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)v126 = v63;
    *(_DWORD *)&v126[8] = v64;
    v66 = *(_QWORD *)&v126[4];
    *(_QWORD *)a4 = off_24C06E878;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = v66;
    *(_DWORD *)(a4 + 32) = 4 * v65;
    *(_QWORD *)(a4 + 40) = v10;
    v67 = 28;
LABEL_108:
    *(_DWORD *)(a4 + 48) = v67;
    *(_WORD *)(a4 + 52) = 0;
  }
  else
  {
    if (v14 != 72)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 162, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
      abort();
    }
    *(_QWORD *)v126 = v10;
    if (HIDWORD(v12))
      v15 = (_DWORD)v12 == 0;
    else
      v15 = 1;
    v16 = v9 & 0xFFFFFFFF00000000;
    if (v15)
      v16 = 0;
    v118 = v16 | (4 * ((_DWORD)v12 != 0));
    *(_QWORD *)v119 = &off_24C07D5F0;
    sub_20805FE68((uint64_t *)v126, &v116, &v118, (uint64_t)&v119[8]);
    *(_QWORD *)a4 = off_24C06E878;
    v17 = *(_OWORD *)&v119[8];
    if (*(_QWORD *)&v119[16])
    {
      v18 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = *(_QWORD *)&v121[4];
      v21 = v124;
      v22 = v120;
      v23 = v125;
      do
        v24 = __ldxr(v18);
      while (__stxr(v24 + 1, v18));
      do
        v25 = __ldxr(v18);
      while (__stxr(v25 + 1, v18));
    }
    else
    {
      v20 = *(_QWORD *)&v121[4];
      v21 = v124;
      v22 = v120;
      v23 = v125;
    }
    *(_OWORD *)(a4 + 8) = v17;
    *(_QWORD *)(a4 + 24) = v20;
    *(_DWORD *)(a4 + 32) = 4 * v21;
    *(_QWORD *)(a4 + 40) = v22;
    *(_DWORD *)(a4 + 48) = 32;
    *(_WORD *)(a4 + 52) = v23;
    if (*((_QWORD *)&v17 + 1))
    {
      v104 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
      do
        v106 = __ldaxr(v104);
      while (__stlxr(v106 - 1, v104));
      if (!v106)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    v97 = *(std::__shared_weak_count **)&v119[16];
    if (*(_QWORD *)&v119[16])
    {
      v107 = (unint64_t *)(*(_QWORD *)&v119[16] + 8);
      do
        v99 = __ldaxr(v107);
      while (__stlxr(v99 - 1, v107));
LABEL_186:
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
  }
}

void sub_20809FE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20809FE74(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  BOOL v37;
  uint64_t v38;
  __int128 v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  BOOL v77;
  uint64_t v78;
  BOOL v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  __int128 v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  __int16 v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  __int128 v115;
  unint64_t *v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  BOOL v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  uint64_t (**v155)();
  __int128 v156;
  uint64_t v157;
  _BYTE v158[12];
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _BYTE v167[12];
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x10) != 0)
  {
    sub_207CB13F8(a1, (uint64_t)&v155);
    v15 = *(_QWORD *)((char *)&v156 + 4);
    v16 = (char *)v155 + (*(_DWORD *)&v158[8] * a2 + v159 * a3);
    if (DWORD1(v156))
      v17 = HIDWORD(*(_QWORD *)((char *)&v156 + 4)) == 0;
    else
      v17 = 1;
    if (v17)
      v15 = 0;
    v18 = HIDWORD(v15);
    v163 = v16;
    v164 = v15;
    v165 = *(_QWORD *)v158;
    v19 = HIDWORD(*(_QWORD *)v158);
    if ((_DWORD)v18 * *(_DWORD *)&v158[4] == -1)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v16 = v163;
      v19 = HIDWORD(v165);
    }
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0x10:
      case 0x11:
        *(_QWORD *)v167 = v16;
        v155 = off_24C06EB30;
        if (HIDWORD(v164))
          v20 = (_DWORD)v164 == 0;
        else
          v20 = 1;
        v21 = v19 << 32;
        if (v20)
          v21 = 0;
        v166 = v21 | ((_DWORD)v164 != 0);
        sub_20805B514(v167, &v164, &v166, (uint64_t)&v156);
        *(_QWORD *)a4 = off_24C06E878;
        v22 = v156;
        if (*((_QWORD *)&v156 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          v25 = v159;
          v27 = v157;
          v26 = *(_QWORD *)v158;
          v28 = v160;
          do
            v29 = __ldxr(v23);
          while (__stxr(v29 + 1, v23));
          do
            v30 = __ldxr(v23);
          while (__stxr(v30 + 1, v23));
        }
        else
        {
          v25 = v159;
          v27 = v157;
          v26 = *(_QWORD *)v158;
          v28 = v160;
        }
        *(_OWORD *)(a4 + 8) = v22;
        *(_QWORD *)(a4 + 24) = v26;
        *(_DWORD *)(a4 + 32) = v25;
        *(_QWORD *)(a4 + 40) = v27;
        *(_DWORD *)(a4 + 48) = 1;
        *(_WORD *)(a4 + 52) = v28;
        if (*((_QWORD *)&v22 + 1))
        {
          v130 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
          }
          do
            v132 = __ldaxr(v130);
          while (__stlxr(v132 - 1, v130));
          if (!v132)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
          }
        }
        v127 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
        if (!*((_QWORD *)&v156 + 1))
          return;
        v133 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
        do
          v129 = __ldaxr(v133);
        while (__stlxr(v129 - 1, v133));
        break;
      case 0x12:
        if ((_DWORD)v164)
          v48 = HIDWORD(v164) == 0;
        else
          v48 = 1;
        v155 = 0;
        *(_QWORD *)&v156 = 0;
        v49 = v164;
        if (v48)
          v49 = 0;
        *(_QWORD *)&v167[4] = v49;
        *(_DWORD *)v167 = 2;
        v50 = *(_QWORD *)v167;
        v51 = HIDWORD(v49);
        if (v48)
          v52 = 0;
        else
          v52 = v19;
        if (v52 * HIDWORD(v49) == -1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        *(_QWORD *)v167 = v50;
        *(_DWORD *)&v167[8] = v51;
        v53 = *(_QWORD *)&v167[4];
        *(_QWORD *)a4 = off_24C06E878;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = v53;
        *(_DWORD *)(a4 + 32) = v52;
        *(_QWORD *)(a4 + 40) = v16;
        v54 = 5;
        goto LABEL_187;
      case 0x14:
        *(_QWORD *)v167 = v16;
        v155 = &off_24C07CF28;
        if (HIDWORD(v164))
          v55 = (_DWORD)v164 == 0;
        else
          v55 = 1;
        v56 = v19 << 32;
        if (v55)
          v56 = 0;
        v166 = v56 | (4 * ((_DWORD)v164 != 0));
        sub_20805DEE8((uint64_t *)v167, &v164, &v166, (uint64_t)&v156);
        *(_QWORD *)a4 = off_24C06E878;
        v57 = v156;
        if (*((_QWORD *)&v156 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
          v60 = *(_QWORD *)&v158[4];
          v61 = v161;
          v62 = v157;
          v63 = v162;
          do
            v64 = __ldxr(v58);
          while (__stxr(v64 + 1, v58));
          do
            v65 = __ldxr(v58);
          while (__stxr(v65 + 1, v58));
        }
        else
        {
          v60 = *(_QWORD *)&v158[4];
          v61 = v161;
          v62 = v157;
          v63 = v162;
        }
        *(_OWORD *)(a4 + 8) = v57;
        *(_QWORD *)(a4 + 24) = v60;
        *(_DWORD *)(a4 + 32) = v61;
        *(_QWORD *)(a4 + 40) = v62;
        *(_DWORD *)(a4 + 48) = 25;
        *(_WORD *)(a4 + 52) = v63;
        if (*((_QWORD *)&v57 + 1))
        {
          v147 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v57 + 1) + 16))(*((_QWORD *)&v57 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v57 + 1));
          }
          do
            v149 = __ldaxr(v147);
          while (__stlxr(v149 - 1, v147));
          if (!v149)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v57 + 1) + 16))(*((_QWORD *)&v57 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v57 + 1));
          }
        }
        v127 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
        if (!*((_QWORD *)&v156 + 1))
          return;
        v150 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
        do
          v129 = __ldaxr(v150);
        while (__stlxr(v129 - 1, v150));
        break;
      case 0x18:
        *(_QWORD *)v167 = v16;
        v155 = &off_24C07D308;
        if (HIDWORD(v164))
          v37 = (_DWORD)v164 == 0;
        else
          v37 = 1;
        v38 = v19 << 32;
        if (v37)
          v38 = 0;
        v166 = v38 | (4 * ((_DWORD)v164 != 0));
        sub_20805E7EC((uint64_t *)v167, &v164, &v166, (uint64_t)&v156);
        *(_QWORD *)a4 = off_24C06E878;
        v39 = v156;
        if (*((_QWORD *)&v156 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
          v42 = *(_QWORD *)&v158[4];
          v43 = v161;
          v44 = v157;
          v45 = v162;
          do
            v46 = __ldxr(v40);
          while (__stxr(v46 + 1, v40));
          do
            v47 = __ldxr(v40);
          while (__stxr(v47 + 1, v40));
        }
        else
        {
          v42 = *(_QWORD *)&v158[4];
          v43 = v161;
          v44 = v157;
          v45 = v162;
        }
        *(_OWORD *)(a4 + 8) = v39;
        *(_QWORD *)(a4 + 24) = v42;
        *(_DWORD *)(a4 + 32) = v43;
        *(_QWORD *)(a4 + 40) = v44;
        *(_DWORD *)(a4 + 48) = 29;
        *(_WORD *)(a4 + 52) = v45;
        if (*((_QWORD *)&v39 + 1))
        {
          v143 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
          }
          do
            v145 = __ldaxr(v143);
          while (__stlxr(v145 - 1, v143));
          if (!v145)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 16))(*((_QWORD *)&v39 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v39 + 1));
          }
        }
        v127 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
        if (!*((_QWORD *)&v156 + 1))
          return;
        v146 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
        do
          v129 = __ldaxr(v146);
        while (__stlxr(v129 - 1, v146));
        break;
      default:
        sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 138, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
        abort();
    }
    goto LABEL_239;
  }
  if ((v8 & 0x20) != 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
      {
        v31 = *(_QWORD *)(a1 + 64);
        v32 = *(std::__shared_weak_count **)(a1 + 72);
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v31 + 88))(v31, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
      v36 = (uint64_t *)(a1 + 96);
    }
    else
    {
      v36 = (uint64_t *)(a1 + 40);
    }
    v66 = 0;
    v67 = 0;
    v68 = *(_DWORD *)(a1 + 36) >> 1;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
    {
      v67 = *(_QWORD *)(a1 + 4);
      v66 = *(_DWORD *)(a1 + 16);
    }
    v69 = *(unsigned int *)(a1 + 24);
    v70 = *(unsigned int *)(a1 + 28);
    v71 = *(_DWORD *)(a1 + 32);
    v72 = *v36;
    if (v66 * v68 != -1
      || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      v73 = v69 >> 1;
      v74 = v70 >> 1;
      v75 = v73 & 0x80000000FFFFFFFFLL | ((unint64_t)(v70 >> 1) << 32);
      v76 = (char *)(v72 + 2 * ((v71 >> 1) * a2 + v68 * a3));
      if ((_DWORD)v67)
        v77 = HIDWORD(v67) == 0;
      else
        v77 = 1;
      if (v77)
        v67 = 0;
      v163 = v76;
      v164 = v67;
      v165 = v75;
      if ((_DWORD)v74 * HIDWORD(v67) != -1
        || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
      {
        if ((*(_DWORD *)(a1 + 48) & 0xFFFFFFFE) != 0x20)
        {
          sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 148, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
          abort();
        }
        v78 = v74 << 32;
        *(_QWORD *)v167 = v76;
        v155 = &off_24C074A58;
        if (HIDWORD(v67))
          v79 = v67 == 0;
        else
          v79 = 1;
        if (v79)
          v78 = 0;
        v166 = v78 | (v67 != 0);
        sub_20805BC0C(v167, &v164, &v166, (uint64_t)&v156);
        *(_QWORD *)a4 = off_24C06E878;
        v80 = v156;
        if (*((_QWORD *)&v156 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
          v83 = v159;
          v85 = v157;
          v84 = *(_QWORD *)v158;
          v86 = v160;
          do
            v87 = __ldxr(v81);
          while (__stxr(v87 + 1, v81));
          do
            v88 = __ldxr(v81);
          while (__stxr(v88 + 1, v81));
        }
        else
        {
          v83 = v159;
          v85 = v157;
          v84 = *(_QWORD *)v158;
          v86 = v160;
        }
        *(_OWORD *)(a4 + 8) = v80;
        *(_QWORD *)(a4 + 24) = v84;
        *(_DWORD *)(a4 + 32) = 2 * v83;
        *(_QWORD *)(a4 + 40) = v85;
        *(_DWORD *)(a4 + 48) = 3;
        *(_WORD *)(a4 + 52) = v86;
        if (*((_QWORD *)&v80 + 1))
        {
          v124 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
          }
          do
            v126 = __ldaxr(v124);
          while (__stlxr(v126 - 1, v124));
          if (!v126)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
          }
        }
        v127 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
        if (*((_QWORD *)&v156 + 1))
        {
          v128 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          goto LABEL_239;
        }
        return;
      }
    }
LABEL_242:
    abort();
  }
  if ((v8 & 0x40) == 0)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 164, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
    abort();
  }
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
    {
      v9 = *(_QWORD *)(a1 + 64);
      v10 = *(std::__shared_weak_count **)(a1 + 72);
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        do
          v13 = __ldaxr(v11);
        while (__stlxr(v13 - 1, v11));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v9 + 88))(v9, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
    v14 = (uint64_t *)(a1 + 96);
  }
  else
  {
    v14 = (uint64_t *)(a1 + 40);
  }
  v89 = 0;
  v90 = 0;
  v91 = *(_DWORD *)(a1 + 36) >> 2;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)a1))) & 1) == 0 && *(_DWORD *)(a1 + 16))
  {
    v90 = *(_QWORD *)(a1 + 4);
    v89 = *(_DWORD *)(a1 + 16);
  }
  v92 = *(unsigned int *)(a1 + 24);
  v93 = *(unsigned int *)(a1 + 28);
  v94 = *(_DWORD *)(a1 + 32);
  v95 = *v14;
  if (v89 * v91 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_242;
  }
  v96 = v92 >> 2;
  v97 = v93 >> 2;
  v98 = v96 & 0xC0000000FFFFFFFFLL | ((unint64_t)(v93 >> 2) << 32);
  v99 = (char *)(v95 + 4 * ((v94 >> 2) * a2 + v91 * a3));
  v100 = !(_DWORD)v90 || HIDWORD(v90) == 0;
  v101 = v100 ? 0 : v90;
  v163 = v99;
  v164 = v101;
  v165 = v98;
  if ((_DWORD)v97 * HIDWORD(v101) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_242;
  }
  v102 = v97 << 32;
  v103 = *(_DWORD *)(a1 + 48);
  if ((v103 - 64) < 2)
  {
    *(_QWORD *)v167 = v99;
    v155 = &off_24C073A50;
    if (HIDWORD(v101))
      v114 = (_DWORD)v101 == 0;
    else
      v114 = 1;
    if (v114)
      v102 = 0;
    v166 = v102 | ((_DWORD)v101 != 0);
    sub_207D5A53C(v167, &v164, &v166, (uint64_t)&v156);
    *(_QWORD *)a4 = off_24C06E878;
    v115 = v156;
    if (*((_QWORD *)&v156 + 1))
    {
      v116 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
      v118 = v159;
      v120 = v157;
      v119 = *(_QWORD *)v158;
      v121 = v160;
      do
        v122 = __ldxr(v116);
      while (__stxr(v122 + 1, v116));
      do
        v123 = __ldxr(v116);
      while (__stxr(v123 + 1, v116));
    }
    else
    {
      v118 = v159;
      v120 = v157;
      v119 = *(_QWORD *)v158;
      v121 = v160;
    }
    *(_OWORD *)(a4 + 8) = v115;
    *(_QWORD *)(a4 + 24) = v119;
    *(_DWORD *)(a4 + 32) = 4 * v118;
    *(_QWORD *)(a4 + 40) = v120;
    *(_DWORD *)(a4 + 48) = 4;
    *(_WORD *)(a4 + 52) = v121;
    if (*((_QWORD *)&v115 + 1))
    {
      v139 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
      }
      do
        v141 = __ldaxr(v139);
      while (__stlxr(v141 - 1, v139));
      if (!v141)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v115 + 1) + 16))(*((_QWORD *)&v115 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v115 + 1));
      }
    }
    v127 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
    if (*((_QWORD *)&v156 + 1))
    {
      v142 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v129 = __ldaxr(v142);
      while (__stlxr(v129 - 1, v142));
      goto LABEL_239;
    }
  }
  else if (v103 == 68)
  {
    if ((_DWORD)v101)
      v134 = HIDWORD(v101) == 0;
    else
      v134 = 1;
    v155 = 0;
    *(_QWORD *)&v156 = 0;
    if (v134)
      v135 = 0;
    else
      v135 = v101;
    *(_QWORD *)&v167[4] = v135;
    *(_DWORD *)v167 = 4;
    v136 = HIDWORD(v135);
    if (v134)
      v137 = 0;
    else
      v137 = v93 >> 2;
    if (v137 * HIDWORD(v135) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_DWORD *)&v167[8] = v136;
    v138 = *(_QWORD *)&v167[4];
    *(_QWORD *)a4 = off_24C06E878;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = v138;
    *(_DWORD *)(a4 + 32) = 4 * v137;
    *(_QWORD *)(a4 + 40) = v99;
    v54 = 28;
LABEL_187:
    *(_DWORD *)(a4 + 48) = v54;
    *(_WORD *)(a4 + 52) = 0;
  }
  else
  {
    if (v103 != 72)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 162, (uint64_t)"", 0, (uint64_t)"Unsupported image format", 24, (void (*)(void **))sub_208216974);
      abort();
    }
    *(_QWORD *)v167 = v99;
    v155 = &off_24C07D5F0;
    if (HIDWORD(v101))
      v104 = (_DWORD)v101 == 0;
    else
      v104 = 1;
    if (v104)
      v102 = 0;
    v166 = v102 | (4 * ((_DWORD)v101 != 0));
    sub_20805FE68((uint64_t *)v167, &v164, &v166, (uint64_t)&v156);
    *(_QWORD *)a4 = off_24C06E878;
    v105 = v156;
    if (*((_QWORD *)&v156 + 1))
    {
      v106 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      v108 = *(_QWORD *)&v158[4];
      v109 = v161;
      v110 = v157;
      v111 = v162;
      do
        v112 = __ldxr(v106);
      while (__stxr(v112 + 1, v106));
      do
        v113 = __ldxr(v106);
      while (__stxr(v113 + 1, v106));
    }
    else
    {
      v108 = *(_QWORD *)&v158[4];
      v109 = v161;
      v110 = v157;
      v111 = v162;
    }
    *(_OWORD *)(a4 + 8) = v105;
    *(_QWORD *)(a4 + 24) = v108;
    *(_DWORD *)(a4 + 32) = 4 * v109;
    *(_QWORD *)(a4 + 40) = v110;
    *(_DWORD *)(a4 + 48) = 32;
    *(_WORD *)(a4 + 52) = v111;
    if (*((_QWORD *)&v105 + 1))
    {
      v151 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v105 + 1) + 16))(*((_QWORD *)&v105 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v105 + 1));
      }
      do
        v153 = __ldaxr(v151);
      while (__stlxr(v153 - 1, v151));
      if (!v153)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v105 + 1) + 16))(*((_QWORD *)&v105 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v105 + 1));
      }
    }
    v127 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
    if (*((_QWORD *)&v156 + 1))
    {
      v154 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
      do
        v129 = __ldaxr(v154);
      while (__stlxr(v129 - 1, v154));
LABEL_239:
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
  }
}

void sub_2080A0D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A0D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080A0DA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t (**v22)();
  uint64_t *v23;
  std::__shared_weak_count *v24;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    return v1;
  if (!*(_BYTE *)(a1 + 112)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 171, (uint64_t)"buffer.image", 12, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_38;
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 56) + 40))(a1 + 56);
  if (v4)
  {
    v23 = 0;
    v24 = 0;
    v22 = &off_24C08D790;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v3 + 56))(v3, &v22);
    if (v23)
    {
      v6 = *v23;
      v5 = (std::__shared_weak_count *)v23[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      if (v6)
      {
        v1 = sub_2081DF4D4((uint64_t)&v22, 0);
        v22 = &off_24C08D790;
        v10 = v24;
        if (v24)
        {
          v11 = (unint64_t *)&v24->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        return v1;
      }
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v22 = &off_24C08D790;
  v13 = v24;
  if (!v24)
    goto LABEL_23;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_23:
    if (!sub_208174AE8(a1 + 56))
      goto LABEL_25;
LABEL_24:
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/DataView.cpp", 179, (uint64_t)"!img::HasIOSurface(*buffer.image)", 33, (uint64_t)"", 0, (void (*)(void **))sub_208216974))goto LABEL_25;
LABEL_38:
    abort();
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (sub_208174AE8(a1 + 56))
    goto LABEL_24;
LABEL_25:
  if (*(_BYTE *)(a1 + 108) && *(_QWORD *)(a1 + 96))
  {
    v16 = *(_QWORD *)(a1 + 64);
    v17 = *(std::__shared_weak_count **)(a1 + 72);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v16 + 88))(v16, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
  }
  return *(_QWORD *)(a1 + 96);
}

void sub_2080A1010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080A1024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2080A1038(_DWORD *result, int a2, int a3, int a4, int a5, int a6)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  return result;
}

BOOL sub_2080A1048(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL4 v4;
  BOOL v5;
  int v6;
  int v7;
  _BOOL8 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v1 = a1[3];
  v2 = a1[4];
  v4 = v2 < 2 && v1 < 2;
  if (!v4)
  {
    v5 = 0;
    v6 = a1[6];
    if (v6)
      goto LABEL_9;
    return 0;
  }
  v5 = a1[2] < 2u;
  v6 = a1[6];
  if (!v6)
    return 0;
LABEL_9:
  v7 = a1[1];
  v8 = v7 != 0;
  if (!v7)
    v5 = 1;
  if (!v5)
  {
    v9 = a1[7];
    v8 = v9 >= v7 * v6;
    if (v9 < v7 * v6)
      LOBYTE(v4) = 1;
    if (!v4)
    {
      v10 = a1[2] * v9;
      v11 = a1[8];
      v8 = v11 >= v10;
      if (v2 >= 2 && v11 >= v10)
        return a1[9] >= v11 * v1;
    }
  }
  return v8;
}

BOOL sub_2080A10F0(_DWORD *a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v2 = a1[10];
  if (((v2 >> 1) & 1) + (v2 & 1) + ((v2 >> 2) & 1) + ((v2 >> 3) & 1) > 1
    || ((v2 >> 4) & 1) + ((v2 >> 5) & 1) + ((v2 >> 6) & 1) > 1)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    v3 = 1;
    v4 = 1;
    if (a2 != 16)
      goto LABEL_8;
LABEL_15:
    v7 = 1;
    v8 = 2;
    v9 = (v2 & 0x40) >> 4;
    if ((v2 & 0x40) == 0)
      v9 = 1;
    if ((v2 & 0x20) == 0)
      v8 = v9;
    if ((v2 & 0x10) == 0)
      v7 = v8;
    if (!v4)
      LODWORD(v3) = 1;
    v3 = v7 * (unint64_t)v3;
    v6 = a1 + 6;
    if (v3 == 1)
      return v3 <= *v6;
LABEL_24:
    v10 = a1[4];
    v11 = a1[6] % v3;
    if (v10 > 1 || a1[3] > 1u)
    {
      if (!v11
        && !(a1[7] % v3)
        && !(a1[8] % v3)
        && (v10 < 2 || !(a1[9] % v3)))
      {
        return v3 <= *v6;
      }
    }
    else if (!v11 && (a1[2] <= 1u || !(a1[7] % v3)))
    {
      return v3 <= *v6;
    }
    return 0;
  }
  v3 = 2;
  v4 = (v2 & 0xC) != 0;
  if ((v2 & 2) != 0)
    v4 = 1;
  else
    v3 = 4 * ((v2 & 0xC) != 0);
  if (a2 == 16)
    goto LABEL_15;
LABEL_8:
  if ((v2 & 0x70) != 0)
  {
    v5 = 0;
    if ((v2 & 0x10) != 0 || (v2 & 0x70) != a2)
      return v5;
  }
  if (v4)
  {
    v6 = a1 + 6;
    if (v3 == 1)
      return v3 <= *v6;
    goto LABEL_24;
  }
  v6 = a1 + 6;
  v3 = 1;
  return v3 <= *v6;
}

_QWORD *sub_2080A1284(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2080A132C(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_2080A1380(uint64_t a1, uint64_t a2, __int16 *a3)
{
  std::string *v12;
  std::string *v13;
  std::string::size_type size;
  char *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v29;
  std::string *v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  unint64_t v39;
  std::string v40;
  double v41;
  std::string *v42;
  uint64_t v43;
  std::string *v44;
  std::string *v45;
  double *v46;

  _H0 = *a3;
  __asm { FCVT            S0, H0; __val }
  std::to_string(&v40, _S0);
  v12 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v40;
  else
    v13 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v15 = (char *)&v13[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v40.__r_.__value_.__r.__words[2]) - 1)
      {
        v12 = &v40;
        goto LABEL_17;
      }
LABEL_15:
      v41 = *(double *)&a2;
      v42 = &v40;
      v43 = a2;
      v44 = &v40;
      v45 = &v40;
      v17 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v17 == -1)
        sub_207CA9F48();
LABEL_16:
      __p[0] = &v41;
      ((void (*)(void **, uint64_t))off_24C084890[v17])(__p, a2);
LABEL_44:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_45:
      operator delete(v40.__r_.__value_.__l.__data_);
      return;
    }
    v16 = v15[size--];
  }
  while (v16 == 48);
  if ((*((_BYTE *)&v40.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v40.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  v18 = operator new(0x118uLL);
  sub_208215780((uint64_t)v18, (char *)v12);
  __p[0] = v18;
  v41 = 0.0;
  v19 = (_QWORD *)MEMORY[0x20BD02224](v18, &v41);
  v20 = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5;
  _S0 = v41;
  __asm { FCVT            H8, S0 }
  v22 = MEMORY[0x24BEDB7F0];
  v23 = *MEMORY[0x24BEDB7F0];
  *v18 = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(v22 + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v23 - 24)) = *(_QWORD *)(v22 + 64);
  v18[3] = MEMORY[0x24BEDB848] + 16;
  v18[2] = v24;
  if (*((char *)v18 + 111) < 0)
    operator delete((void *)v18[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v18 + 16);
  operator delete(v18);
  LOWORD(_S0) = 0;
  if (!v20)
    _S0 = _S8;
  _H1 = *a3;
  __asm
  {
    FCVT            S0, H0
    FCVT            S1, H1
  }
  if (_S0 != _S1)
  {
    v41 = *(double *)&a2;
    v42 = &v40;
    v43 = a2;
    v44 = &v40;
    v45 = &v40;
    v17 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v17 == -1)
      sub_207CA9F48();
    goto LABEL_16;
  }
  v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v40;
  else
    v30 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = v40.__r_.__value_.__l.__size_;
  v31 = 1;
  if (v30->__r_.__value_.__s.__data_[size] == 46)
    v31 = 2;
  v32 = v31 + size;
  if (v29 >= v32)
    v33 = v32;
  else
    v33 = v29;
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v33 >= 0x17)
  {
    v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v35 = v33 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    __p[1] = (void *)v33;
    v39 = v36 | 0x8000000000000000;
    __p[0] = v34;
    goto LABEL_41;
  }
  HIBYTE(v39) = v33;
  v34 = __p;
  if (v33)
LABEL_41:
    memmove(v34, v30, v33);
  *((_BYTE *)v34 + v33) = 0;
  v41 = *(double *)&a2;
  v42 = (std::string *)__p;
  v43 = a2;
  v44 = (std::string *)__p;
  v45 = (std::string *)__p;
  v37 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v37 == -1)
    sub_207CA9F48();
  v46 = &v41;
  ((void (*)(double **, uint64_t))off_24C084878[v37])(&v46, a2);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_44;
  operator delete(__p[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_45;
}

void sub_2080A16B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2080A1748(uint64_t *a1, __int128 *a2, unsigned int a3)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;
  __int128 __dst;
  uint64_t v11;
  int v12;

  v12 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v11 = *((_QWORD *)a2 + 2);
  }
  v9 = v11;
  *(_OWORD *)__p = __dst;
  v5 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = a3;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x20;
  if (v9 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v9 >= 0)
    v7 = HIBYTE(v9);
  else
    v7 = (uint64_t)__p[1];
  sub_207CBAB98(a1, (uint64_t)v6, v7);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_2080A1828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080A1858(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &off_24C0848B8;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_2080A18A4(void **__p)
{
  void **v1;

  v1 = __p;
  *__p = &off_24C0848B8;
  if (*((char *)__p + 31) < 0)
  {
    operator delete(__p[1]);
    __p = v1;
  }
  operator delete(__p);
}

uint64_t sub_2080A18F0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C084918;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

uint64_t sub_2080A1948(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C084918;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

void sub_2080A19A0(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C084918;
  if (*((_BYTE *)a1 + 152))
  {
    v2 = (void *)a1[16];
    if (v2)
    {
      a1[17] = v2;
      operator delete(v2);
    }
  }
  *a1 = off_24C084A40;
  sub_207CA6534((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_2080A19F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  void *__p[3];
  char v13;
  uint64_t v14;
  __int16 v15;
  _BYTE v16[120];
  uint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  sub_207CA4F70((uint64_t)v16, (uint64_t *)(a1 + 8));
  sub_207D4EC30((uint64_t)__p, a1 + 128);
  v14 = *(_QWORD *)(a1 + 160);
  v15 = *(_WORD *)(a1 + 168);
  sub_2080A9008((uint64_t)v16, (uint64_t)__p, (uint64_t)&v17);
  if (v13 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_207CA6534((uint64_t)v16);
  v4 = v17;
  v17 = 0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = off_24C06E9E8;
  *(_BYTE *)(a2 + 16) = v19;
  v5 = v21;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v21;
    v18 = off_24C06E9E8;
    if (v21)
    {
      v9 = (unint64_t *)&v21->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v18 = off_24C06E9E8;
  }
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2080A1B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a12)
  {
    if (__p)
    {
      operator delete(__p);
      sub_207CA6534((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  sub_207CA6534((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2080A1B50(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA4F70(a1 + 8, a2);
  *(_QWORD *)a1 = off_24C084970;
  sub_207D4EAF0((_BYTE *)(a1 + 128), a3);
  return a1;
}

void sub_2080A1BAC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_207CA6534(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2080A1BC4(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C084970;
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

uint64_t sub_2080A1C40(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C084970;
  if (*(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
  {
    operator delete(*(void **)(a1 + 176));
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 152))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(_QWORD *)a1 = off_24C084A40;
  sub_207CA6534(a1 + 8);
  return a1;
}

void sub_2080A1CBC(void **a1)
{
  *a1 = off_24C084970;
  if (*((_BYTE *)a1 + 200) && *((char *)a1 + 199) < 0)
  {
    operator delete(a1[22]);
    if (!*((_BYTE *)a1 + 152))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)a1 + 152))
  {
    goto LABEL_7;
  }
  if (*((char *)a1 + 151) < 0)
    operator delete(a1[16]);
LABEL_7:
  *a1 = off_24C084A40;
  sub_207CA6534((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_2080A1D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  void *v12[2];
  char v13;
  char v14;
  void *__p;
  char v16;
  char v17;
  _BYTE v18[120];
  uint64_t v19;
  uint64_t (**v20)();
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  sub_207CA4F70((uint64_t)v18, (uint64_t *)(a1 + 8));
  sub_207D4EAF0(v12, (__int128 *)(a1 + 128));
  sub_207C97F30((uint64_t)v18, (uint64_t)v12, (uint64_t)&v19);
  if (v17 && v16 < 0)
    operator delete(__p);
  if (v14 && v13 < 0)
    operator delete(v12[0]);
  sub_207CA6534((uint64_t)v18);
  v4 = v19;
  v19 = 0;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = off_24C06E9E8;
  *(_BYTE *)(a2 + 16) = v21;
  v5 = v23;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v23;
    v20 = off_24C06E9E8;
    if (v23)
    {
      v9 = (unint64_t *)&v23->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v20 = off_24C06E9E8;
  }
  result = v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2080A1E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207DE41EC((uint64_t)&a9);
  sub_207CA6534((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2080A1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207CA6534((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A1E90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int32x4_t v37;
  int v38;
  char v39;
  __int128 v40;
  int v41;
  __int128 v42;
  _BYTE v43[32];
  int v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;

  v2 = a1;
  v4 = *(_DWORD *)(a1 + 120);
  if (v4 == 2)
  {
    sub_2080A2238(a2, a1);
  }
  else if (v4 == 1)
  {
    v14 = *(_OWORD *)(a1 + 16);
    v42 = *(_OWORD *)a1;
    *(_OWORD *)v43 = v14;
    *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 32);
    v44 = *(_DWORD *)(a1 + 48);
    LOBYTE(v45) = 0;
    v53 = 0;
    if (*(_BYTE *)(a1 + 112))
    {
      v45 = off_24C06E878;
      v15 = *(_QWORD *)(a1 + 64);
      v16 = *(std::__shared_weak_count **)(a1 + 72);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = *(_QWORD *)(a1 + 96);
        v20 = *(_DWORD *)(a1 + 104);
        v21 = *(_WORD *)(a1 + 108);
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 96);
        v20 = *(_DWORD *)(a1 + 104);
        v21 = *(_WORD *)(a1 + 108);
      }
      v46 = v15;
      v47 = v16;
      v48 = *(_QWORD *)(a1 + 80);
      v24 = *(_DWORD *)(a1 + 88);
      v23 = &v50;
      v50 = v19;
      v49 = v24;
      v51 = v20;
      v52 = v21;
      if (v16)
      {
        v25 = (unint64_t *)&v16->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, a1);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v53 = 1;
      if ((_BYTE)v52 && v50)
      {
        if (v47)
        {
          v27 = &v47->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
          do
            v29 = __ldaxr((unint64_t *)v27);
          while (__stlxr(v29 - 1, (unint64_t *)v27));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v47->__on_zero_shared)(v47, v2);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v46 + 88))(v46, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      }
    }
    else
    {
      v23 = (uint64_t *)&v43[24];
    }
    v41 = *(_DWORD *)v43;
    v38 = 4 * *(_DWORD *)&v43[20];
    v39 = 1;
    v30 = *v23;
    v40 = v42;
    v37 = vshlq_n_s32(*(int32x4_t *)&v43[4], 2uLL);
    v36 = v44;
    sub_20809F1D0(a2, v30, &v40, (__int128 *)v37.i8, &v36, (uint64_t)&v45);
    if (v53)
    {
      v31 = v47;
      if (v47)
      {
        v32 = &v47->__shared_owners_;
        do
          v33 = __ldaxr((unint64_t *)v32);
        while (__stlxr(v33 - 1, (unint64_t *)v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
  }
  else
  {
    if (v4)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Execution.cpp", 104, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_208216974);
      abort();
    }
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 48);
    *(_BYTE *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (*(_BYTE *)(a1 + 112))
    {
      *(_QWORD *)(a2 + 56) = off_24C06E878;
      v6 = *(_QWORD *)(a1 + 64);
      v7 = *(std::__shared_weak_count **)(a1 + 72);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_DWORD *)(a1 + 104);
        v12 = *(_WORD *)(a1 + 108);
        do
          v13 = __ldxr(v8);
        while (__stxr(v13 + 1, v8));
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_DWORD *)(a1 + 104);
        v12 = *(_WORD *)(a1 + 108);
      }
      *(_QWORD *)(a2 + 64) = v6;
      *(_QWORD *)(a2 + 72) = v7;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 88);
      *(_QWORD *)(a2 + 96) = v10;
      *(_DWORD *)(a2 + 104) = v11;
      *(_WORD *)(a2 + 108) = v12;
      if (v7)
      {
        v34 = (unint64_t *)&v7->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, a1);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      *(_BYTE *)(a2 + 112) = 1;
    }
  }
}

void sub_2080A2210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207CA140C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A2224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207CA140C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A2238(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t (**v41)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  char v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char v59;
  int v60;
  __int128 v61;
  int v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;

  switch(*(_DWORD *)(a2 + 48))
  {
    case 1:
      v50 = off_24C06EB30;
      sub_207CA98A4(a2, (uint64_t)&v51);
      sub_2080A4A90(a1, (uint64_t)&v50);
      v3 = v52;
      if (!v52)
        return;
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      break;
    case 3:
      v41 = &off_24C074A58;
      sub_207FBD778(a2, (uint64_t)&v42);
      sub_2080A4C5C((uint64_t)&v50, (uint64_t)&v41);
      sub_2080A4E30(a1, (uint64_t)&v50);
      if (v59)
      {
        v6 = v58;
        if (v58)
        {
          v7 = (unint64_t *)&v58->__shared_owners_;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v9 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v9);
      while (__stlxr(v5 - 1, v9));
      break;
    case 4:
      v41 = &off_24C073A50;
      sub_207FBDD2C(a2, (uint64_t)&v42);
      sub_2080A4F38((uint64_t)&v50, (uint64_t)&v41);
      sub_2080A5894(a1, (uint64_t)&v50);
      if (v59)
      {
        v10 = v58;
        if (v58)
        {
          v11 = (unint64_t *)&v58->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v13 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v13);
      while (__stlxr(v5 - 1, v13));
      break;
    case 5:
      v50 = off_24C06EE50;
      sub_207CAD328(a2, (uint64_t)&v51);
      v14 = v56;
      v64 = 2;
      v65 = v57;
      v66 = 0x100000001;
      *(_QWORD *)&v61 = v55;
      DWORD2(v61) = v56;
      HIDWORD(v61) = v56 * HIDWORD(v57);
      v62 = v56 * HIDWORD(v57);
      v63 = 1;
      v60 = 18;
      v41 = off_24C06E878;
      v15 = v51;
      v16 = v52;
      if (v52)
      {
        v17 = (unint64_t *)&v52->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v19 = v54;
        v14 = v56;
        v20 = v53;
        v21 = (__int16)v58;
        do
          v22 = __ldxr(v17);
        while (__stxr(v22 + 1, v17));
        do
          v23 = __ldxr(v17);
        while (__stxr(v23 + 1, v17));
      }
      else
      {
        v19 = v54;
        v20 = v53;
        v21 = (__int16)v58;
      }
      v42 = v15;
      v43 = v16;
      v44 = v19;
      v45 = v14;
      v46 = v20;
      v47 = 5;
      v48 = v21;
      if (v16)
      {
        v34 = (unint64_t *)&v16->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        do
          v36 = __ldaxr(v34);
        while (__stlxr(v36 - 1, v34));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v49 = 1;
      sub_20809F1D0(a1, 0, (__int128 *)&v64, &v61, &v60, (uint64_t)&v41);
      if (v49)
      {
        v37 = v43;
        if (v43)
        {
          v38 = (unint64_t *)&v43->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      v3 = v52;
      if (!v52)
        return;
      v40 = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(v40);
      while (__stlxr(v5 - 1, v40));
      break;
    case 0x19:
      v50 = &off_24C07CF28;
      sub_207FC6EE8(a2, (uint64_t)&v51);
      sub_2080A510C(a1, (uint64_t)&v50);
      v3 = v52;
      if (!v52)
        return;
      v24 = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(v24);
      while (__stlxr(v5 - 1, v24));
      break;
    case 0x1C:
      v41 = &off_24C07D210;
      sub_207FC8600(a2, (uint64_t)&v42);
      sub_2080A52EC((uint64_t)&v50, (uint64_t)&v41);
      sub_2080A5894(a1, (uint64_t)&v50);
      if (v59)
      {
        v25 = v58;
        if (v58)
        {
          v26 = (unint64_t *)&v58->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v28 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v28);
      while (__stlxr(v5 - 1, v28));
      break;
    case 0x1D:
      v50 = &off_24C07D308;
      sub_207FC8DB0(a2, (uint64_t)&v51);
      sub_2080A54D0(a1, (uint64_t)&v50);
      v3 = v52;
      if (!v52)
        return;
      v33 = (unint64_t *)&v52->__shared_owners_;
      do
        v5 = __ldaxr(v33);
      while (__stlxr(v5 - 1, v33));
      break;
    case 0x20:
      v41 = &off_24C07D5F0;
      sub_207FCA4C8(a2, (uint64_t)&v42);
      sub_2080A56B0((uint64_t)&v50, (uint64_t)&v41);
      sub_2080A5894(a1, (uint64_t)&v50);
      if (v59)
      {
        v29 = v58;
        if (v58)
        {
          v30 = (unint64_t *)&v58->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      v3 = v43;
      if (!v43)
        return;
      v32 = (unint64_t *)&v43->__shared_owners_;
      do
        v5 = __ldaxr(v32);
      while (__stlxr(v5 - 1, v32));
      break;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Execution.cpp", 87, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_208216974);
      abort();
  }
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2080A27DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207CA2C18((uint64_t)&a9);
  sub_207CAD1A0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2080A27F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC8C38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A280C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207CA140C((uint64_t)&a19);
  sub_207FCA34C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A2828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207FCA34C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A283C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207CA140C((uint64_t)&a19);
  sub_207FC8484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A2858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207FC8484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207FC6D70((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A2880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207CA140C((uint64_t)&a19);
  sub_207D59154((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D59154((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A28B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_207DC3CDC((uint64_t)&a19);
  sub_207D79BA4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A28CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D79BA4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A28E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_207CA971C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A28F4(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  BOOL v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  const char *v68;
  const char *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  const char *v97;
  unint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  BOOL v102;
  uint64_t v103;
  std::string *v104;
  __int128 v105;
  std::string *v106;
  __int128 v107;
  int v108;
  const std::string::value_type *v109;
  std::string::size_type v110;
  std::string *v111;
  unint64_t v112;
  void *v113;
  int v114;
  char *v115;
  char *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  BOOL v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  __int16 v131;
  unint64_t v132;
  uint64_t (**v133)();
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  __int16 v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  int v148;
  const std::string::value_type *v149;
  std::string::size_type v150;
  std::string *v151;
  unint64_t v152;
  void *v153;
  int v154;
  char *v155;
  char *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  char v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  __int128 v180;
  void **v181;
  std::string::size_type v182;
  std::string *v183;
  __int128 v184;
  std::string *v185;
  __int128 v186;
  void **v187;
  std::string::size_type v188;
  std::string *v189;
  __int128 v190;
  std::string *v191;
  __int128 v192;
  int v193;
  const std::string::value_type *v194;
  std::string::size_type v195;
  std::string *v196;
  unint64_t v197;
  void *v198;
  int v199;
  char *v200;
  char *v201;
  _QWORD *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  _QWORD *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  _BYTE *v217;
  _QWORD *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  _BYTE *v222;
  _QWORD *v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  std::string *v231;
  __int128 v232;
  std::string *v233;
  __int128 v234;
  void **v235;
  std::string::size_type v236;
  std::string *v237;
  void *v238;
  unint64_t size;
  int v240;
  char *v241;
  char *v242;
  _BYTE *v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  std::string::size_type v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  int v254;
  __int16 v255;
  uint64_t (**v256)();
  std::__shared_weak_count *v257;
  std::__shared_weak_count *v258;
  int v259;
  uint64_t v260;
  int v261;
  __int16 v262;
  char v263;
  int v264;
  void *__p[2];
  unsigned __int8 v266;
  void *v267[2];
  unsigned __int8 v268;
  std::string v269;
  std::string v270;
  std::string v271;
  std::string v272;
  std::string v273;
  _DWORD v274[2];
  unint64_t v275;
  unint64_t v276;
  void *v277[2];
  __int128 v278;
  __int128 v279;
  int v280;
  __int16 v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  __int16 v288;
  unsigned __int8 v289;
  unsigned int v290;
  std::string v291;
  __int128 v292;
  __int128 v293;
  int v294;
  uint64_t (**v295)();
  uint64_t v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  int v301;
  __int16 v302;
  char v303;
  _BYTE v304[32];
  __int128 v305;
  int v306;
  uint64_t v307;
  std::__shared_weak_count *v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  int v312;
  __int16 v313;
  unsigned __int8 v314;
  std::string v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  int v319;
  __int16 v320;
  std::string v321;
  __int128 v322;
  __int128 v323;
  int v324;
  uint64_t (**v325)();
  std::__shared_weak_count *v326;
  std::__shared_weak_count *v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  __int16 v332;
  char v333;
  _BYTE v334[56];
  uint64_t (**v335)();
  uint64_t (**v336)();
  std::__shared_weak_count *v337;
  std::__shared_weak_count *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  __int16 v343;
  char v344;

  v5 = a2[1];
  v247 = (v5 - *a2) >> 7;
  if (v247 != 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3))
  {
    *(_QWORD *)v304 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
    sub_207C9F428((unint64_t *)v304);
    v231 = std::string::insert(&v291, 0, "Expected ", 9uLL);
    v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
    v321.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v232;
    v231->__r_.__value_.__l.__size_ = 0;
    v231->__r_.__value_.__r.__words[2] = 0;
    v231->__r_.__value_.__r.__words[0] = 0;
    v233 = std::string::append(&v321, " model inputs but received ", 0x1BuLL);
    v234 = *(_OWORD *)&v233->__r_.__value_.__l.__data_;
    *(_QWORD *)&v334[16] = *((_QWORD *)&v233->__r_.__value_.__l + 2);
    *(_OWORD *)v334 = v234;
    v233->__r_.__value_.__l.__size_ = 0;
    v233->__r_.__value_.__r.__words[2] = 0;
    v233->__r_.__value_.__r.__words[0] = 0;
    v315.__r_.__value_.__r.__words[0] = (uint64_t)(a2[1] - *a2) >> 7;
    sub_207C9F428((unint64_t *)&v315);
    if ((SBYTE7(v278) & 0x80u) == 0)
      v235 = v277;
    else
      v235 = (void **)v277[0];
    if ((SBYTE7(v278) & 0x80u) == 0)
      v236 = BYTE7(v278);
    else
      v236 = (std::string::size_type)v277[1];
    v237 = std::string::append((std::string *)v334, (const std::string::value_type *)v235, v236);
    v238 = (void *)v237->__r_.__value_.__r.__words[0];
    size = v237->__r_.__value_.__l.__size_;
    LODWORD(v273.__r_.__value_.__l.__data_) = v237->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v237->__r_.__value_.__r.__words[2] + 3);
    v240 = SHIBYTE(v237->__r_.__value_.__r.__words[2]);
    v237->__r_.__value_.__l.__size_ = 0;
    v237->__r_.__value_.__r.__words[2] = 0;
    v237->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = 3;
    v241 = (char *)operator new(0x18uLL);
    v242 = v241;
    if (v240 < 0)
    {
      sub_207CA40D8(v241, v238, size);
    }
    else
    {
      *(_QWORD *)v241 = v238;
      *((_QWORD *)v241 + 1) = size;
      *((_DWORD *)v241 + 4) = v273.__r_.__value_.__l.__data_;
      *(_DWORD *)(v241 + 19) = *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3);
      v241[23] = v240;
    }
    *(_QWORD *)(a3 + 16) = v242;
    v245 = operator new(0x20uLL);
    *v245 = &unk_24C06F1C0;
    v245[1] = 0;
    v245[2] = 0;
    v245[3] = v242;
    *(_QWORD *)(a3 + 24) = v245;
    if (v240 < 0)
    {
      operator delete(v238);
      if ((SBYTE7(v278) & 0x80000000) == 0)
      {
LABEL_407:
        if ((v334[23] & 0x80000000) == 0)
          goto LABEL_408;
        goto LABEL_413;
      }
    }
    else if ((SBYTE7(v278) & 0x80000000) == 0)
    {
      goto LABEL_407;
    }
    operator delete(v277[0]);
    if ((v334[23] & 0x80000000) == 0)
    {
LABEL_408:
      if ((SHIBYTE(v321.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_409;
      goto LABEL_414;
    }
LABEL_413:
    operator delete(*(void **)v334);
    if ((SHIBYTE(v321.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_409:
      if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_415;
    }
LABEL_414:
    operator delete(v321.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_415:
    operator delete(v291.__r_.__value_.__l.__data_);
    return;
  }
  if (v5 != *a2)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *a2 + (v6 << 7);
      v250 = v6;
      LOBYTE(v251) = 0;
      v264 = -1;
      v9 = *(unsigned int *)(v8 + 120);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(std::string *, __int128 *))off_24C084A18[v9])(&v321, &v251);
        v264 = v9;
      }
      v10 = v7 + 168 * v6;
      if (!*(_BYTE *)(v10 + 80))
      {
        if (*(_BYTE *)(v7 + 168 * v6 + 120))
          v22 = (_DWORD)v9 == 0;
        else
          v22 = 0;
        if (!v22)
          goto LABEL_200;
        goto LABEL_166;
      }
      v11 = v250;
      LOBYTE(v277[0]) = 0;
      v290 = -1;
      if ((_DWORD)v9 == -1)
      {
LABEL_24:
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = 0;
        v23 = operator new(0x18uLL);
        v23[23] = 0;
        *v23 = 0;
        *(_QWORD *)(a3 + 16) = v23;
        v24 = operator new(0x20uLL);
        *v24 = &unk_24C06F1C0;
        v24[1] = 0;
        v24[2] = 0;
        v24[3] = v23;
        *(_QWORD *)(a3 + 24) = v24;
        v25 = v290;
        if (v290 != -1)
          goto LABEL_155;
        goto LABEL_156;
      }
      ((void (*)(std::string *, void **, __int128 *))off_24C084A18[v9])(&v321, v277, &v251);
      v12 = v7 + 168 * v6;
      v290 = v9;
      if ((_DWORD)v9 == 2)
      {
        v315.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E878;
        v35 = v277[1];
        v36 = (std::__shared_weak_count *)v278;
        if ((_QWORD)v278)
        {
          v37 = (unint64_t *)(v278 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v39 = *((_QWORD *)&v279 + 1);
          v40 = v280;
          v41 = v281;
          do
            v42 = __ldxr(v37);
          while (__stxr(v42 + 1, v37));
        }
        else
        {
          v39 = *((_QWORD *)&v279 + 1);
          v40 = v280;
          v41 = v281;
        }
        v315.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
        v315.__r_.__value_.__r.__words[2] = (std::string::size_type)v36;
        v316 = *((_QWORD *)&v278 + 1);
        v317 = v279;
        v318 = v39;
        v319 = v40;
        v320 = v41;
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        sub_2080A2238((uint64_t)v304, (uint64_t)&v315);
        v291.__r_.__value_.__r.__words[0] = v11;
        *(_OWORD *)&v291.__r_.__value_.__r.__words[1] = *(_OWORD *)v304;
        v292 = *(_OWORD *)&v304[16];
        v293 = v305;
        v294 = v306;
        LOBYTE(v295) = 0;
        v303 = 0;
        v45 = v314;
        if (v314)
        {
          v295 = off_24C06E878;
          v46 = v307;
          v47 = v308;
          if (v308)
          {
            v48 = (unint64_t *)&v308->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            v50 = v311;
            v51 = v312;
            v52 = v313;
            do
              v53 = __ldxr(v48);
            while (__stxr(v53 + 1, v48));
          }
          else
          {
            v50 = v311;
            v51 = v312;
            v52 = v313;
          }
          v296 = v46;
          v297 = v47;
          v298 = v309;
          v299 = v310;
          v300 = v50;
          v301 = v51;
          v302 = v52;
          if (v47)
          {
            v75 = (unint64_t *)&v47->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v303 = 1;
        }
        sub_2080A599C(a3, v12, (uint64_t)&v291);
        if (v45)
        {
          v77 = v297;
          if (v297)
          {
            v78 = (unint64_t *)&v297->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
        }
        if (v314)
        {
          v80 = v308;
          if (v308)
          {
            v81 = (unint64_t *)&v308->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        v72 = (std::__shared_weak_count *)v315.__r_.__value_.__r.__words[2];
        if (!v315.__r_.__value_.__r.__words[2])
        {
LABEL_154:
          v25 = v290;
          if (v290 == -1)
            goto LABEL_156;
LABEL_155:
          ((void (*)(_BYTE *, void **))off_24C084A00[v25])(v334, v277);
          goto LABEL_156;
        }
        v83 = (unint64_t *)(v315.__r_.__value_.__r.__words[2] + 8);
        do
          v74 = __ldaxr(v83);
        while (__stlxr(v74 - 1, v83));
        goto LABEL_153;
      }
      if ((_DWORD)v9 == 1)
        break;
      if ((_DWORD)v9)
        goto LABEL_24;
      *(_QWORD *)v334 = v11;
      *(_OWORD *)&v334[8] = *(_OWORD *)v277;
      *(_OWORD *)&v334[24] = v278;
      *(_OWORD *)&v334[40] = v279;
      LODWORD(v335) = v280;
      LOBYTE(v336) = 0;
      v344 = 0;
      v13 = v289;
      if (v289)
      {
        v336 = off_24C06E878;
        v14 = v282;
        v15 = v283;
        if (v283)
        {
          v16 = (unint64_t *)&v283->__shared_owners_;
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          v18 = v286;
          v19 = v287;
          v20 = v288;
          do
            v21 = __ldxr(v16);
          while (__stxr(v21 + 1, v16));
        }
        else
        {
          v18 = v286;
          v19 = v287;
          v20 = v288;
        }
        v337 = v14;
        v338 = v15;
        v339 = v284;
        LODWORD(v340) = v285;
        v341 = v18;
        v342 = v19;
        v343 = v20;
        if (v15)
        {
          v70 = (unint64_t *)&v15->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v344 = 1;
      }
      sub_2080A599C(a3, v12, (uint64_t)v334);
      if (!v13)
        goto LABEL_154;
      v72 = v338;
      if (!v338)
        goto LABEL_154;
      v73 = (unint64_t *)&v338->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
LABEL_153:
      if (v74)
        goto LABEL_154;
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
      v25 = v290;
      if (v290 != -1)
        goto LABEL_155;
LABEL_156:
      v290 = -1;
      if (*(_BYTE *)(a3 + 8))
        goto LABEL_357;
      *(_QWORD *)a3 = off_24C06E9E8;
      v99 = *(std::__shared_weak_count **)(a3 + 24);
      if (!v99)
        goto LABEL_421;
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
        if (*(_BYTE *)(v7 + 168 * v6 + 120))
          v124 = v264 == 0;
        else
          v124 = 0;
        if (!v124)
          goto LABEL_200;
      }
      else
      {
LABEL_421:
        if (*(_BYTE *)(v7 + 168 * v6 + 120))
          v102 = v264 == 0;
        else
          v102 = 0;
        if (!v102)
          goto LABEL_200;
      }
LABEL_166:
      v103 = *(_QWORD *)(v7 + 168 * v6 + 112);
      if (!v103)
        sub_207CA408C();
      (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v103 + 48))(v334, v103, &v251);
      if (v334[8])
      {
        sub_207C9F428(&v250);
        v104 = std::string::insert((std::string *)v304, 0, "Failure verifying model input ", 0x1EuLL);
        v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        v106 = std::string::append(&v291, ": ", 2uLL);
        v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v321.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        v108 = *(char *)(*(_QWORD *)&v334[16] + 23);
        if (v108 >= 0)
          v109 = *(const std::string::value_type **)&v334[16];
        else
          v109 = **(const std::string::value_type ***)&v334[16];
        if (v108 >= 0)
          v110 = *(unsigned __int8 *)(*(_QWORD *)&v334[16] + 23);
        else
          v110 = *(_QWORD *)(*(_QWORD *)&v334[16] + 8);
        v111 = std::string::append(&v321, v109, v110);
        v113 = (void *)v111->__r_.__value_.__r.__words[0];
        v112 = v111->__r_.__value_.__l.__size_;
        LODWORD(v315.__r_.__value_.__l.__data_) = v111->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v315.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v111->__r_.__value_.__r.__words[2]
                                                                            + 3);
        v114 = SHIBYTE(v111->__r_.__value_.__r.__words[2]);
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = v334[8];
        v115 = (char *)operator new(0x18uLL);
        v116 = v115;
        if (v114 < 0)
        {
          sub_207CA40D8(v115, v113, v112);
        }
        else
        {
          *(_QWORD *)v115 = v113;
          *((_QWORD *)v115 + 1) = v112;
          *((_DWORD *)v115 + 4) = v315.__r_.__value_.__l.__data_;
          *(_DWORD *)(v115 + 19) = *(_DWORD *)((char *)v315.__r_.__value_.__r.__words + 3);
          v115[23] = v114;
        }
        *(_QWORD *)(a3 + 16) = v116;
        v120 = operator new(0x20uLL);
        *v120 = &unk_24C06F1C0;
        v120[1] = 0;
        v120[2] = 0;
        v120[3] = v116;
        *(_QWORD *)(a3 + 24) = v120;
        if (v114 < 0)
        {
          operator delete(v113);
          if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_190;
LABEL_185:
          if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_186;
LABEL_191:
          operator delete(v291.__r_.__value_.__l.__data_);
          if ((v304[23] & 0x80000000) != 0)
            goto LABEL_192;
LABEL_187:
          *(_QWORD *)v334 = off_24C06E9E8;
          v121 = *(std::__shared_weak_count **)&v334[24];
          if (!*(_QWORD *)&v334[24])
            goto LABEL_357;
        }
        else
        {
          if ((SHIBYTE(v321.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_185;
LABEL_190:
          operator delete(v321.__r_.__value_.__l.__data_);
          if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_191;
LABEL_186:
          if ((v304[23] & 0x80000000) == 0)
            goto LABEL_187;
LABEL_192:
          operator delete(*(void **)v304);
          *(_QWORD *)v334 = off_24C06E9E8;
          v121 = *(std::__shared_weak_count **)&v334[24];
          if (!*(_QWORD *)&v334[24])
            goto LABEL_357;
        }
        v122 = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
LABEL_316:
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
        goto LABEL_357;
      }
      *(_QWORD *)v334 = off_24C06E9E8;
      v117 = *(std::__shared_weak_count **)&v334[24];
      if (*(_QWORD *)&v334[24])
      {
        v118 = (unint64_t *)(*(_QWORD *)&v334[24] + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
          if (!*(_BYTE *)(v7 + 168 * v6 + 160))
            goto LABEL_356;
          goto LABEL_201;
        }
      }
LABEL_200:
      if (!*(_BYTE *)(v7 + 168 * v6 + 160))
        goto LABEL_356;
LABEL_201:
      if (v264)
      {
        if (v264 != 2)
        {
          if (v264 == 1)
          {
            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Execution.cpp", 286, (uint64_t)"", 0, (uint64_t)"DataView32f verification not yet implemented", 44, (void (*)(void **))sub_208216974);
            abort();
          }
          goto LABEL_356;
        }
        *(_QWORD *)v334 = off_24C06E878;
        v125 = *((_QWORD *)&v251 + 1);
        v126 = (std::__shared_weak_count *)v252;
        if ((_QWORD)v252)
        {
          v127 = (unint64_t *)(v252 + 8);
          do
            v128 = __ldxr(v127);
          while (__stxr(v128 + 1, v127));
          v129 = *((_QWORD *)&v253 + 1);
          v130 = v254;
          v131 = v255;
          do
            v132 = __ldxr(v127);
          while (__stxr(v132 + 1, v127));
        }
        else
        {
          v129 = *((_QWORD *)&v253 + 1);
          v130 = v254;
          v131 = v255;
        }
        *(_QWORD *)&v334[8] = v125;
        *(_QWORD *)&v334[16] = v126;
        *(_QWORD *)&v334[24] = *((_QWORD *)&v252 + 1);
        *(_DWORD *)&v334[32] = v253;
        *(_QWORD *)&v334[40] = v129;
        *(_DWORD *)&v334[48] = v130;
        *(_WORD *)&v334[52] = v131;
        if (v126)
        {
          v141 = (unint64_t *)&v126->__shared_owners_;
          do
            v142 = __ldaxr(v141);
          while (__stlxr(v142 - 1, v141));
          if (!v142)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v143 = *(_QWORD *)(v7 + 168 * v6 + 152);
        if (!v143)
          sub_207CA408C();
        (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v143 + 48))(&v321, v143, v334);
        if (!v321.__r_.__value_.__s.__data_[8])
        {
          v321.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E9E8;
          v157 = (std::__shared_weak_count *)v322;
          if ((_QWORD)v322)
          {
            v158 = (unint64_t *)(v322 + 8);
            do
              v159 = __ldaxr(v158);
            while (__stlxr(v159 - 1, v158));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
              std::__shared_weak_count::__release_weak(v157);
            }
          }
          v160 = *(std::__shared_weak_count **)&v334[16];
          if (*(_QWORD *)&v334[16])
          {
            v161 = (unint64_t *)(*(_QWORD *)&v334[16] + 8);
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          goto LABEL_356;
        }
        sub_207C9F428(&v250);
        v144 = std::string::insert(&v315, 0, "Failure verifying model input ", 0x1EuLL);
        v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
        *(_QWORD *)&v304[16] = *((_QWORD *)&v144->__r_.__value_.__l + 2);
        *(_OWORD *)v304 = v145;
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        v146 = std::string::append((std::string *)v304, ", image: ", 9uLL);
        v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
        v291.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v291.__r_.__value_.__l.__data_ = v147;
        v146->__r_.__value_.__l.__size_ = 0;
        v146->__r_.__value_.__r.__words[2] = 0;
        v146->__r_.__value_.__r.__words[0] = 0;
        v148 = *(char *)(v321.__r_.__value_.__r.__words[2] + 23);
        if (v148 >= 0)
          v149 = (const std::string::value_type *)v321.__r_.__value_.__r.__words[2];
        else
          v149 = *(const std::string::value_type **)v321.__r_.__value_.__r.__words[2];
        if (v148 >= 0)
          v150 = *(unsigned __int8 *)(v321.__r_.__value_.__r.__words[2] + 23);
        else
          v150 = *(_QWORD *)(v321.__r_.__value_.__r.__words[2] + 8);
        v151 = std::string::append(&v291, v149, v150);
        v153 = (void *)v151->__r_.__value_.__r.__words[0];
        v152 = v151->__r_.__value_.__l.__size_;
        LODWORD(v273.__r_.__value_.__l.__data_) = v151->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v151->__r_.__value_.__r.__words[2]
                                                                            + 3);
        v154 = SHIBYTE(v151->__r_.__value_.__r.__words[2]);
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = v321.__r_.__value_.__s.__data_[8];
        v155 = (char *)operator new(0x18uLL);
        v156 = v155;
        if (v154 < 0)
        {
          sub_207CA40D8(v155, v153, v152);
        }
        else
        {
          *(_QWORD *)v155 = v153;
          *((_QWORD *)v155 + 1) = v152;
          *((_DWORD *)v155 + 4) = v273.__r_.__value_.__l.__data_;
          *(_DWORD *)(v155 + 19) = *(_DWORD *)((char *)v273.__r_.__value_.__r.__words + 3);
          v155[23] = v154;
        }
        *(_QWORD *)(a3 + 16) = v156;
        v202 = operator new(0x20uLL);
        *v202 = &unk_24C06F1C0;
        v202[1] = 0;
        v202[2] = 0;
        v202[3] = v156;
        *(_QWORD *)(a3 + 24) = v202;
        if (v154 < 0)
        {
          operator delete(v153);
          if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_306;
LABEL_301:
          if ((v304[23] & 0x80000000) == 0)
            goto LABEL_302;
LABEL_307:
          operator delete(*(void **)v304);
          if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_308;
LABEL_303:
          v321.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E9E8;
          v203 = (std::__shared_weak_count *)v322;
          if ((_QWORD)v322)
          {
LABEL_309:
            v204 = (unint64_t *)&v203->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
        }
        else
        {
          if ((SHIBYTE(v291.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_301;
LABEL_306:
          operator delete(v291.__r_.__value_.__l.__data_);
          if ((v304[23] & 0x80000000) != 0)
            goto LABEL_307;
LABEL_302:
          if ((SHIBYTE(v315.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_303;
LABEL_308:
          operator delete(v315.__r_.__value_.__l.__data_);
          v321.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E9E8;
          v203 = (std::__shared_weak_count *)v322;
          if ((_QWORD)v322)
            goto LABEL_309;
        }
        v121 = *(std::__shared_weak_count **)&v334[16];
        if (!*(_QWORD *)&v334[16])
          goto LABEL_357;
        v206 = (unint64_t *)(*(_QWORD *)&v334[16] + 8);
        do
          v123 = __ldaxr(v206);
        while (__stlxr(v123 - 1, v206));
        goto LABEL_316;
      }
      *(_OWORD *)v334 = v251;
      *(_OWORD *)&v334[16] = v252;
      *(_OWORD *)&v334[32] = v253;
      *(_DWORD *)&v334[48] = v254;
      LOBYTE(v335) = 0;
      LOBYTE(v342) = 0;
      if (v263)
      {
        v335 = off_24C06E878;
        v133 = v256;
        v134 = v257;
        if (v257)
        {
          v135 = (unint64_t *)&v257->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
          v137 = v260;
          v138 = v261;
          v139 = v262;
          do
            v140 = __ldxr(v135);
          while (__stxr(v140 + 1, v135));
        }
        else
        {
          v137 = v260;
          v138 = v261;
          v139 = v262;
        }
        v336 = v133;
        v337 = v134;
        v338 = v258;
        LODWORD(v339) = v259;
        v340 = v137;
        LODWORD(v341) = v138;
        WORD2(v341) = v139;
        if (v134)
        {
          v163 = (unint64_t *)&v134->__shared_owners_;
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
            std::__shared_weak_count::__release_weak(v134);
          }
        }
        LOBYTE(v342) = 1;
      }
      v165 = *(unsigned int *)&v334[12];
      if (!*(_DWORD *)&v334[12])
      {
        v176 = 1;
        if ((_BYTE)v342)
          goto LABEL_351;
        goto LABEL_355;
      }
      v166 = *(unsigned int *)&v334[16];
      if (!*(_DWORD *)&v334[16])
      {
LABEL_296:
        v176 = 1;
        if ((_BYTE)v342)
          goto LABEL_351;
        goto LABEL_355;
      }
      v167 = 0;
      v168 = (_QWORD *)(v7 + 168 * v6 + 152);
      v276 = 0;
LABEL_256:
      v169 = 0;
      while (1)
      {
        v275 = v169;
        sub_20809FE74((uint64_t)v334, v276, v169, (uint64_t)&v321);
        if (!*v168)
          sub_207CA408C();
        (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(*(_QWORD *)*v168 + 48))(&v291, *v168, &v321);
        if (v291.__r_.__value_.__s.__data_[8])
          break;
        v291.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E9E8;
        v170 = (std::__shared_weak_count *)v292;
        if (!(_QWORD)v292)
          goto LABEL_264;
        v171 = (unint64_t *)(v292 + 8);
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
          v173 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
          if (v321.__r_.__value_.__r.__words[2])
          {
LABEL_265:
            v174 = (unint64_t *)&v173->__shared_owners_;
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
        }
        else
        {
LABEL_264:
          v173 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
          if (v321.__r_.__value_.__r.__words[2])
            goto LABEL_265;
        }
        if (++v169 == v166)
        {
          while (++v167 != v165)
          {
            v166 = *(unsigned int *)&v334[16];
            v276 = v167;
            if (*(_DWORD *)&v334[16])
              goto LABEL_256;
          }
          goto LABEL_296;
        }
      }
      sub_207C9F428(&v250);
      v177 = std::string::insert(&v269, 0, "Failure verifying model input ", 0x1EuLL);
      v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
      v270.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v178;
      v177->__r_.__value_.__l.__size_ = 0;
      v177->__r_.__value_.__r.__words[2] = 0;
      v177->__r_.__value_.__r.__words[0] = 0;
      v179 = std::string::append(&v270, ", image ", 8uLL);
      v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
      v271.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v180;
      v179->__r_.__value_.__l.__size_ = 0;
      v179->__r_.__value_.__r.__words[2] = 0;
      v179->__r_.__value_.__r.__words[0] = 0;
      sub_207C9F428(&v276);
      if ((v268 & 0x80u) == 0)
        v181 = v267;
      else
        v181 = (void **)v267[0];
      if ((v268 & 0x80u) == 0)
        v182 = v268;
      else
        v182 = (std::string::size_type)v267[1];
      v183 = std::string::append(&v271, (const std::string::value_type *)v181, v182);
      v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
      v272.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v184;
      v183->__r_.__value_.__l.__size_ = 0;
      v183->__r_.__value_.__r.__words[2] = 0;
      v183->__r_.__value_.__r.__words[0] = 0;
      v185 = std::string::append(&v272, " of batch ", 0xAuLL);
      v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
      v273.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v186;
      v185->__r_.__value_.__l.__size_ = 0;
      v185->__r_.__value_.__r.__words[2] = 0;
      v185->__r_.__value_.__r.__words[0] = 0;
      sub_207C9F428(&v275);
      if ((v266 & 0x80u) == 0)
        v187 = __p;
      else
        v187 = (void **)__p[0];
      if ((v266 & 0x80u) == 0)
        v188 = v266;
      else
        v188 = (std::string::size_type)__p[1];
      v189 = std::string::append(&v273, (const std::string::value_type *)v187, v188);
      v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
      v315.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v190;
      v189->__r_.__value_.__l.__size_ = 0;
      v189->__r_.__value_.__r.__words[2] = 0;
      v189->__r_.__value_.__r.__words[0] = 0;
      v191 = std::string::append(&v315, ": ", 2uLL);
      v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
      *(_QWORD *)&v304[16] = *((_QWORD *)&v191->__r_.__value_.__l + 2);
      *(_OWORD *)v304 = v192;
      v191->__r_.__value_.__l.__size_ = 0;
      v191->__r_.__value_.__r.__words[2] = 0;
      v191->__r_.__value_.__r.__words[0] = 0;
      v193 = *(char *)(v291.__r_.__value_.__r.__words[2] + 23);
      if (v193 >= 0)
        v194 = (const std::string::value_type *)v291.__r_.__value_.__r.__words[2];
      else
        v194 = *(const std::string::value_type **)v291.__r_.__value_.__r.__words[2];
      if (v193 >= 0)
        v195 = *(unsigned __int8 *)(v291.__r_.__value_.__r.__words[2] + 23);
      else
        v195 = *(_QWORD *)(v291.__r_.__value_.__r.__words[2] + 8);
      v196 = std::string::append((std::string *)v304, v194, v195);
      v198 = (void *)v196->__r_.__value_.__r.__words[0];
      v197 = v196->__r_.__value_.__l.__size_;
      v274[0] = v196->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v274 + 3) = *(_DWORD *)((char *)&v196->__r_.__value_.__r.__words[2] + 3);
      v199 = SHIBYTE(v196->__r_.__value_.__r.__words[2]);
      v196->__r_.__value_.__l.__size_ = 0;
      v196->__r_.__value_.__r.__words[2] = 0;
      v196->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = v291.__r_.__value_.__s.__data_[8];
      v200 = (char *)operator new(0x18uLL);
      v201 = v200;
      if (v199 < 0)
      {
        sub_207CA40D8(v200, v198, v197);
      }
      else
      {
        *(_QWORD *)v200 = v198;
        *((_QWORD *)v200 + 1) = v197;
        *((_DWORD *)v200 + 4) = v274[0];
        *(_DWORD *)(v200 + 19) = *(_DWORD *)((char *)v274 + 3);
        v200[23] = v199;
      }
      *(_QWORD *)(a3 + 16) = v201;
      v207 = operator new(0x20uLL);
      *v207 = &unk_24C06F1C0;
      v207[1] = 0;
      v207[2] = 0;
      v207[3] = v201;
      *(_QWORD *)(a3 + 24) = v207;
      if (v199 < 0)
      {
        operator delete(v198);
        if ((v304[23] & 0x80000000) != 0)
          goto LABEL_332;
LABEL_321:
        if ((SHIBYTE(v315.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_322;
LABEL_333:
        operator delete(v315.__r_.__value_.__l.__data_);
        if ((char)v266 < 0)
          goto LABEL_334;
LABEL_323:
        if ((SHIBYTE(v273.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_324;
LABEL_335:
        operator delete(v273.__r_.__value_.__l.__data_);
        if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_336;
LABEL_325:
        if (((char)v268 & 0x80000000) == 0)
          goto LABEL_326;
LABEL_337:
        operator delete(v267[0]);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_338;
LABEL_327:
        if ((SHIBYTE(v270.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_328;
LABEL_339:
        operator delete(v270.__r_.__value_.__l.__data_);
        if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_340;
LABEL_329:
        v291.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E9E8;
        v208 = (std::__shared_weak_count *)v292;
        if ((_QWORD)v292)
        {
LABEL_341:
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
      }
      else
      {
        if ((v304[23] & 0x80000000) == 0)
          goto LABEL_321;
LABEL_332:
        operator delete(*(void **)v304);
        if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_333;
LABEL_322:
        if (((char)v266 & 0x80000000) == 0)
          goto LABEL_323;
LABEL_334:
        operator delete(__p[0]);
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_335;
LABEL_324:
        if ((SHIBYTE(v272.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_325;
LABEL_336:
        operator delete(v272.__r_.__value_.__l.__data_);
        if ((char)v268 < 0)
          goto LABEL_337;
LABEL_326:
        if ((SHIBYTE(v271.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_327;
LABEL_338:
        operator delete(v271.__r_.__value_.__l.__data_);
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_339;
LABEL_328:
        if ((SHIBYTE(v269.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_329;
LABEL_340:
        operator delete(v269.__r_.__value_.__l.__data_);
        v291.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06E9E8;
        v208 = (std::__shared_weak_count *)v292;
        if ((_QWORD)v292)
          goto LABEL_341;
      }
      v211 = (std::__shared_weak_count *)v321.__r_.__value_.__r.__words[2];
      if (v321.__r_.__value_.__r.__words[2])
      {
        v212 = (unint64_t *)(v321.__r_.__value_.__r.__words[2] + 8);
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      v176 = 0;
      if (!(_BYTE)v342)
        goto LABEL_355;
LABEL_351:
      v214 = v337;
      if (v337)
      {
        v215 = (unint64_t *)&v337->__shared_owners_;
        do
          v216 = __ldaxr(v215);
        while (__stlxr(v216 - 1, v215));
        if (!v216)
        {
          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
          std::__shared_weak_count::__release_weak(v214);
          if ((v176 & 1) == 0)
            goto LABEL_357;
LABEL_356:
          *(_QWORD *)a3 = off_24C06E9E8;
          *(_BYTE *)(a3 + 8) = 0;
          v217 = operator new(0x18uLL);
          v3 &= 0xFFFFFFFFFFFFFF00;
          *(_QWORD *)v217 = v3;
          v217[23] = 0;
          *(_QWORD *)(a3 + 16) = v217;
          v218 = operator new(0x20uLL);
          *v218 = &unk_24C06F1C0;
          v218[1] = 0;
          v218[2] = 0;
          v218[3] = v217;
          *(_QWORD *)(a3 + 24) = v218;
          goto LABEL_357;
        }
      }
LABEL_355:
      if ((v176 & 1) != 0)
        goto LABEL_356;
LABEL_357:
      if (v264 != -1)
        ((void (*)(_BYTE *, __int128 *))off_24C084A00[v264])(v334, &v251);
      v264 = -1;
      if (*(_BYTE *)(a3 + 8))
        return;
      *(_QWORD *)a3 = off_24C06E9E8;
      v219 = *(std::__shared_weak_count **)(a3 + 24);
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      if (++v6 == v247)
        goto LABEL_403;
    }
    v321.__r_.__value_.__r.__words[0] = v11;
    *(_OWORD *)&v321.__r_.__value_.__r.__words[1] = *(_OWORD *)v277;
    v322 = v278;
    v323 = v279;
    v324 = v280;
    LOBYTE(v325) = 0;
    v333 = 0;
    v26 = v289;
    if (v289)
    {
      v325 = off_24C06E878;
      v27 = v282;
      v28 = v283;
      if (v283)
      {
        v29 = (unint64_t *)&v283->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v31 = v286;
        v32 = v287;
        v33 = v288;
        do
          v34 = __ldxr(v29);
        while (__stxr(v34 + 1, v29));
      }
      else
      {
        v31 = v286;
        v32 = v287;
        v33 = v288;
      }
      v326 = v27;
      v327 = v28;
      v328 = v284;
      v329 = v285;
      v330 = v31;
      v331 = v32;
      v332 = v33;
      if (v28)
      {
        v54 = (unint64_t *)&v28->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v333 = 1;
    }
    v56 = v7 + 168 * v6;
    v57 = *(unsigned __int8 *)(v56 + 36);
    if (*(_BYTE *)(v56 + 76))
    {
      v58 = v7 + 168 * v6;
      v60 = *(_DWORD *)(v58 + 72);
      v59 = (uint64_t *)(v58 + 72);
      v61 = v322;
      if (v60 != (_DWORD)v322)
      {
        v68 = " is expected to have a batch-size of ";
        v69 = " but has ";
        goto LABEL_148;
      }
    }
    if (*(_BYTE *)(v7 + 168 * v6 + 68))
    {
      v62 = v7 + 168 * v6;
      v63 = *(_DWORD *)(v62 + 64);
      v59 = (uint64_t *)(v62 + 64);
      v61 = HIDWORD(v321.__r_.__value_.__r.__words[2]);
      if (v63 != HIDWORD(v321.__r_.__value_.__r.__words[2]))
      {
        v68 = " is expected to have ";
        v69 = " planes but has ";
        goto LABEL_148;
      }
    }
    v64 = (int *)(v10 + 32);
    v65 = v7 + 168 * v6;
    if (!*(_BYTE *)(v65 + 44))
      goto LABEL_133;
    v59 = (uint64_t *)(v65 + 40);
    if (!v57)
    {
      v61 = 4 * DWORD2(v322);
      if (*(_DWORD *)v59 != 4 * DWORD2(v322))
      {
        v68 = " of unspecified format (assumed to be Gray8) is expected to have ";
        v69 = " color components but has an incompatible pixel byte stride of ";
        goto LABEL_148;
      }
      goto LABEL_133;
    }
    v66 = *v64;
    if ((*v64 & 0xF) != 0 && (v66 & 0x70) != 0)
    {
      if ((v66 & 1) != 0)
      {
        v67 = 1;
        if ((v66 & 0x10) != 0)
          goto LABEL_123;
      }
      else
      {
        if ((v66 & 2) == 0)
        {
          if ((v66 & 0xC) == 0)
          {
            if ((DWORD2(v322) & 0x3FFFFFFF) != 0)
              goto LABEL_373;
            goto LABEL_133;
          }
          v67 = 4;
          if ((v66 & 0x10) != 0)
            goto LABEL_123;
          goto LABEL_118;
        }
        v67 = 2;
        if ((v66 & 0x10) != 0)
        {
LABEL_123:
          if (v67 != (unint64_t)(4 * DWORD2(v322)))
            goto LABEL_371;
          goto LABEL_133;
        }
      }
LABEL_118:
      if ((v66 & 0x20) == 0)
      {
        if ((v66 & 0x40) != 0)
        {
          if (((unint64_t)(v66 & 0x40) >> 4) * v67 == 4 * DWORD2(v322))
            goto LABEL_133;
        }
        else if (!(4 * DWORD2(v322)))
        {
          goto LABEL_133;
        }
LABEL_371:
        if ((v66 & 1) != 0)
        {
          v226 = 1;
          goto LABEL_382;
        }
        if ((v66 & 2) != 0)
        {
          v226 = 2;
          goto LABEL_382;
        }
LABEL_373:
        if ((v66 & 0xC) == 0)
          goto LABEL_389;
        v226 = 4;
LABEL_382:
        if ((v66 & 0x10) != 0)
        {
          LODWORD(v230) = 1;
          goto LABEL_388;
        }
        if ((v66 & 0x20) != 0)
        {
          LODWORD(v230) = 2;
          goto LABEL_388;
        }
        v229 = v66 & 0x40;
        if ((_DWORD)v229)
        {
          v230 = v229 >> 4;
LABEL_388:
          v84 = v230 * (unint64_t)v226;
          v86 = " is expected to have ";
          LOBYTE(v85) = 1;
LABEL_390:
          v87 = " bytes per pixel but has an incompatible pixel byte stride of ";
          goto LABEL_391;
        }
LABEL_389:
        v84 = 0;
        LOBYTE(v85) = 0;
        v86 = " is expected to have ";
        goto LABEL_390;
      }
      if (2 * v67 != 4 * DWORD2(v322))
        goto LABEL_371;
LABEL_133:
      if (*(_BYTE *)(v7 + 168 * v6 + 52)
        && (v88 = v7 + 168 * v6,
            v89 = *(_DWORD *)(v88 + 48),
            v59 = (uint64_t *)(v88 + 48),
            v61 = HIDWORD(v321.__r_.__value_.__r.__words[1]),
            v89 != HIDWORD(v321.__r_.__value_.__r.__words[1])))
      {
        v68 = " is expected to have a width of ";
        v69 = " but has width ";
      }
      else
      {
        if (!*(_BYTE *)(v7 + 168 * v6 + 60)
          || (v90 = v7 + 168 * v6,
              v91 = *(_DWORD *)(v90 + 56),
              v59 = (uint64_t *)(v90 + 56),
              v61 = v321.__r_.__value_.__r.__words[2],
              v91 == LODWORD(v321.__r_.__value_.__r.__words[2])))
        {
          if (!v57)
          {
            *(_QWORD *)a3 = off_24C06E9E8;
            *(_BYTE *)(a3 + 8) = 0;
            v222 = operator new(0x18uLL);
            v246 &= 0xFFFFFFFFFFFFFF00;
            *(_QWORD *)v222 = v246;
            v222[23] = 0;
            *(_QWORD *)(a3 + 16) = v222;
            v223 = operator new(0x20uLL);
            *v223 = &unk_24C06F1C0;
            v223[1] = 0;
            v223[2] = 0;
            v223[3] = v222;
            *(_QWORD *)(a3 + 24) = v223;
            goto LABEL_149;
          }
          v92 = *v64;
          if ((*v64 & 1) != 0)
          {
            v224 = sub_2080A727C(v64);
            if (!v225)
            {
              LODWORD(v96) = 4 * DWORD2(v322);
              v95 = 1;
              goto LABEL_394;
            }
            v95 = v224;
            v96 = (4 * DWORD2(v322));
            if (v224 != v96)
            {
              goto LABEL_394;
            }
          }
          else if ((v92 & 2) != 0)
          {
            v227 = sub_2080A727C(v64);
            v96 = (4 * DWORD2(v322));
            if (!v228)
            {
              v95 = 2;
              goto LABEL_394;
            }
            v95 = v227;
            if (v227 != v96)
            {
              goto LABEL_394;
            }
          }
          else if ((v92 & 4) != 0)
          {
            v93 = sub_2080A727C(v64);
            v95 = v94 ? v93 : 4;
            v96 = (4 * DWORD2(v322));
            if (v95 != v96)
            {
LABEL_394:
              sub_2080A6BE0(a3, v321.__r_.__value_.__r.__words[0], v97, v95, v96);
LABEL_149:
              if (!v26)
                goto LABEL_154;
              v72 = v327;
              if (!v327)
                goto LABEL_154;
              v98 = (unint64_t *)&v327->__shared_owners_;
              do
                v74 = __ldaxr(v98);
              while (__stlxr(v74 - 1, v98));
              goto LABEL_153;
            }
          }
          v315.__r_.__value_.__s.__data_[0] = 0;
          v304[23] = 0;
          v304[0] = 0;
          sub_207CB5A6C(a3, &v315, (uint64_t)v304);
          if ((v304[23] & 0x80000000) != 0)
            operator delete(*(void **)v304);
          goto LABEL_149;
        }
        v68 = " is expected to have a height of ";
        v69 = " but has height ";
      }
LABEL_148:
      sub_2080A5EFC(a3, v321.__r_.__value_.__r.__words[0], v68, *v59, v69, v61);
      goto LABEL_149;
    }
    if ((v66 & 0x10) != 0)
    {
      v86 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
      v84 = 1;
    }
    else
    {
      if ((v66 & 0x60) == 0)
        goto LABEL_133;
      if ((v66 & 0x20) == 0)
      {
        if (((v66 >> 4) & 4) == 4 * DWORD2(v322))
          goto LABEL_133;
        v84 = (unint64_t)(v66 & 0x40) >> 4;
        v85 = (*v64 & 0x40u) >> 6;
        v86 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
LABEL_129:
        v87 = " bytes per value but has an incompatible pixel byte stride of ";
LABEL_391:
        sub_2080A6468(a3, v321.__r_.__value_.__r.__words[0], v86, *v59, v84, v85, v87, 4 * DWORD2(v322));
        goto LABEL_149;
      }
      v86 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
      v84 = 2;
    }
    LOBYTE(v85) = 1;
    goto LABEL_129;
  }
LABEL_403:
  *(_QWORD *)a3 = off_24C06E9E8;
  *(_BYTE *)(a3 + 8) = 0;
  v243 = operator new(0x18uLL);
  *(_QWORD *)v243 = 0;
  v243[23] = 0;
  *(_QWORD *)(a3 + 16) = v243;
  v244 = operator new(0x20uLL);
  *v244 = &unk_24C06F1C0;
  v244[1] = 0;
  v244[2] = 0;
  v244[3] = v243;
  *(_QWORD *)(a3 + 24) = v244;
}

void sub_2080A43C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  sub_2080A5E8C((uint64_t)&STACK[0x3C0]);
  sub_207D526E8((uint64_t)&STACK[0x200]);
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A46E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2080A5E8C((uint64_t)&STACK[0x280]);
  sub_207CA140C((uint64_t)&STACK[0x300]);
  sub_207CA2C88((uint64_t)&STACK[0x380]);
  sub_207D526E8((uint64_t)&STACK[0x200]);
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A4724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_2080A5E8C(v29 - 224);
  sub_207D526E8((uint64_t)&STACK[0x200]);
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A4748()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  operator delete((void *)v0);
  JUMPOUT(0x2080A476CLL);
}

void sub_2080A47D8()
{
  if (SLOBYTE(STACK[0x217]) < 0)
    JUMPOUT(0x2080A47ACLL);
  JUMPOUT(0x2080A4780);
}

void sub_2080A47E8()
{
  uint64_t v0;

  if (*(char *)(v0 - 201) < 0)
    JUMPOUT(0x2080A4788);
  JUMPOUT(0x2080A47BCLL);
}

void sub_2080A47F8()
{
  if (SLOBYTE(STACK[0x3D7]) < 0)
    JUMPOUT(0x2080A47C4);
  JUMPOUT(0x2080A4798);
}

void sub_2080A4808(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x2080A4814);
  _Unwind_Resume(a1);
}

void sub_2080A4824()
{
  if (SLOBYTE(STACK[0x3D7]) < 0)
    JUMPOUT(0x2080A48CCLL);
  JUMPOUT(0x2080A48A8);
}

void sub_2080A4834()
{
  if (SLOBYTE(STACK[0x297]) < 0)
    JUMPOUT(0x2080A48B0);
  JUMPOUT(0x2080A48DCLL);
}

void sub_2080A4844()
{
  if ((SLOBYTE(STACK[0x317]) & 0x80000000) == 0)
    JUMPOUT(0x2080A48ECLL);
  JUMPOUT(0x2080A48E4);
}

void sub_2080A4854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_207C9C674((_QWORD *)(v29 - 224));
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A4870()
{
  uint64_t v0;

  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
  operator delete((void *)v0);
  JUMPOUT(0x2080A4894);
}

void sub_2080A4904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A4918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  operator delete(v29);
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A4934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A4948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  operator delete(v29);
  sub_207D526E8((uint64_t)&STACK[0x200]);
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A496C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_207D526E8((uint64_t)&STACK[0x200]);
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A4988()
{
  uint64_t v0;
  uint64_t v1;

  v1 = LODWORD(STACK[0x278]);
  if ((_DWORD)v1 != -1)
    ((void (*)(uint64_t, unint64_t *))off_24C084A00[v1])(v0 - 224, &STACK[0x200]);
  JUMPOUT(0x2080A4A28);
}

void sub_2080A49BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_2080A4A38((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_2080A49D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45)
{
  uint64_t v45;
  uint64_t v46;

  if (a45 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C084A00[a45])(v46 - 224, v45);
  _Unwind_Resume(a1);
}

void sub_2080A4A08()
{
  JUMPOUT(0x2080A4A10);
}

uint64_t sub_2080A4A38(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C084A00[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 128) = -1;
  return a1;
}

void sub_2080A4A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = HIDWORD(v4);
  v32 = 1;
  v33 = v3;
  v34 = 0x100000001;
  LODWORD(v29) = 1;
  *(_QWORD *)((char *)&v29 + 4) = v4;
  HIDWORD(v29) = HIDWORD(v4) * HIDWORD(v3);
  v30 = HIDWORD(v4) * HIDWORD(v3);
  v31 = 1;
  v28 = 17;
  v20[0] = off_24C06E878;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    v10 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a2 + 32);
    v11 = *(_WORD *)(a2 + 48);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 48);
  }
  v20[1] = v6;
  v21 = v7;
  v22 = v3;
  v23 = v5;
  v24 = v10;
  v25 = 1;
  v26 = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = 1;
  sub_20809F1D0(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2080A4C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA2C18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A4C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = HIDWORD(v4);
  v32 = 1;
  v33 = v3;
  v34 = 0x100000001;
  LODWORD(v29) = 1;
  *(_QWORD *)((char *)&v29 + 4) = v4;
  HIDWORD(v29) = HIDWORD(v4) * HIDWORD(v3);
  v30 = HIDWORD(v4) * HIDWORD(v3);
  v31 = 1;
  v28 = 33;
  v20[0] = off_24C06E878;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    v10 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a2 + 32);
    v11 = *(_WORD *)(a2 + 48);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 48);
  }
  v20[1] = v6;
  v21 = v7;
  v22 = v3;
  v23 = 2 * v5;
  v24 = v10;
  v25 = 3;
  v26 = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = 1;
  sub_20809F1D0(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2080A4E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA2C18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080A4E30(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  int32x4_t v15;
  int v16;
  char v17;

  if (*(_BYTE *)(a2 + 112))
  {
    v4 = (uint64_t *)(a2 + 96);
    if (*(_BYTE *)(a2 + 108))
      v5 = *(_QWORD *)(a2 + 96) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = *(_QWORD *)(a2 + 64);
      v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v6 + 88))(v6, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
  }
  else
  {
    v4 = (uint64_t *)(a2 + 40);
  }
  v11 = *v4;
  v12 = 2 * *(_DWORD *)(a2 + 36);
  v15 = vaddq_s32(*(int32x4_t *)(a2 + 20), *(int32x4_t *)(a2 + 20));
  v16 = v12;
  v17 = 1;
  v14 = *(_DWORD *)(a2 + 48);
  return sub_20809F1D0(a1, v11, (__int128 *)a2, (__int128 *)v15.i8, &v14, a2 + 56);
}

void sub_2080A4F38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = HIDWORD(v4);
  v32 = 1;
  v33 = v3;
  v34 = 0x100000001;
  LODWORD(v29) = 1;
  *(_QWORD *)((char *)&v29 + 4) = v4;
  HIDWORD(v29) = HIDWORD(v4) * HIDWORD(v3);
  v30 = HIDWORD(v4) * HIDWORD(v3);
  v31 = 1;
  v28 = 65;
  v20[0] = off_24C06E878;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    LODWORD(v5) = *(_DWORD *)(a2 + 44);
    v10 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a2 + 32);
    v11 = *(_WORD *)(a2 + 48);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 48);
  }
  v20[1] = v6;
  v21 = v7;
  v22 = v3;
  v23 = 4 * v5;
  v24 = v10;
  v25 = 4;
  v26 = v11;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v27 = 1;
  sub_20809F1D0(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2080A50F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA2C18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A510C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 20;
  v20[0] = off_24C06E878;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = v4;
  v24 = v10;
  v25 = 25;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_20809F1D0(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2080A52D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA2C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A52EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 68;
  v20[0] = off_24C06E878;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = 4 * v4;
  v24 = v10;
  v25 = 28;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_20809F1D0(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2080A54BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA2C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A54D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 24;
  v20[0] = off_24C06E878;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = v4;
  v24 = v10;
  v25 = 29;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_20809F1D0(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2080A569C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA2C18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A56B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  std::__shared_weak_count *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_DWORD *)(a2 + 52);
  v32 = 4;
  v33 = v3;
  v34 = 0x100000001;
  *(_QWORD *)&v29 = *(_QWORD *)(a2 + 44);
  DWORD2(v29) = v4;
  HIDWORD(v29) = v4 * HIDWORD(v3);
  v30 = v4 * HIDWORD(v3);
  v31 = 1;
  v28 = 72;
  v20[0] = off_24C06E878;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 36);
    v4 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_WORD *)(a2 + 72);
  }
  v20[1] = v5;
  v21 = v6;
  v22 = v9;
  v23 = 4 * v4;
  v24 = v10;
  v25 = 32;
  v26 = v11;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v27 = 1;
  sub_20809F1D0(a1, 0, (__int128 *)&v32, &v29, &v28, (uint64_t)v20);
  if (v27)
  {
    v17 = v21;
    if (v21)
    {
      v18 = (unint64_t *)&v21->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_2080A5880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA2C18((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080A5894(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  int32x4_t v15;
  int v16;
  char v17;

  if (*(_BYTE *)(a2 + 112))
  {
    v4 = (uint64_t *)(a2 + 96);
    if (*(_BYTE *)(a2 + 108))
      v5 = *(_QWORD *)(a2 + 96) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = *(_QWORD *)(a2 + 64);
      v7 = *(std::__shared_weak_count **)(a2 + 72);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v6 + 88))(v6, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    }
  }
  else
  {
    v4 = (uint64_t *)(a2 + 40);
  }
  v11 = *v4;
  v12 = 4 * *(_DWORD *)(a2 + 36);
  v15 = vshlq_n_s32(*(int32x4_t *)(a2 + 20), 2uLL);
  v16 = v12;
  v17 = 1;
  v14 = *(_DWORD *)(a2 + 48);
  return sub_20809F1D0(a1, v11, (__int128 *)a2, (__int128 *)v15.i8, &v14, a2 + 56);
}

void sub_2080A599C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;

  v4 = a1;
  if (*(_BYTE *)(a2 + 76))
  {
    v5 = *(_DWORD *)(a3 + 24);
    if (*(_DWORD *)(a2 + 72) != v5)
    {
      v15 = *(_QWORD *)(a2 + 72);
      v16 = " is expected to have a batch-size of ";
      v17 = " but has ";
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  if (*(_BYTE *)(a2 + 68))
  {
    v5 = *(_DWORD *)(a3 + 20);
    if (*(_DWORD *)(a2 + 64) != v5)
    {
      v15 = *(_QWORD *)(a2 + 64);
      v16 = " is expected to have ";
      v17 = " planes but has ";
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  v6 = (int *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 44))
    goto LABEL_50;
  if (!*(_BYTE *)(a2 + 36))
  {
    v5 = *(_DWORD *)(a3 + 32);
    if (*(_DWORD *)(a2 + 40) == v5)
      goto LABEL_50;
    v15 = *(_QWORD *)(a2 + 40);
    v16 = " of unspecified format (assumed to be Gray8) is expected to have ";
    v17 = " color components but has an incompatible pixel byte stride of ";
    a1 = v4;
    v18 = *(_QWORD *)a3;
LABEL_24:
    sub_2080A5EFC(a1, v18, v16, v15, v17, v5);
    return;
  }
  v7 = *v6;
  if ((*v6 & 0xF) == 0 || (*v6 & 0x70) == 0)
  {
    if ((v7 & 0x10) != 0)
    {
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
      if ((_DWORD)v10 == 1)
        goto LABEL_50;
      v11 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      v13 = 1;
      LOBYTE(v14) = 1;
    }
    else
    {
      if ((v7 & 0x60) == 0)
        goto LABEL_50;
      v9 = (v7 >> 4) & 4;
      if ((v7 & 0x20) != 0)
        v9 = 2;
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
      if (v9 == (_DWORD)v10)
        goto LABEL_50;
      v11 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      if ((v7 & 0x20) != 0)
        v13 = 2;
      else
        v13 = (unint64_t)(v7 & 0x40) >> 4;
      if ((v7 & 0x20) != 0)
        LOBYTE(v14) = 1;
      else
        v14 = (*v6 & 0x40u) >> 6;
    }
    v20 = " of unspecified pixel structure (assumed to be Gray) is expected to have ";
    v21 = " bytes per value but has an incompatible pixel byte stride of ";
    v22 = v4;
    v23 = v11;
LABEL_36:
    sub_2080A6468(v22, v23, v20, v12, v13, v14, v21, v10);
    return;
  }
  if ((v7 & 1) != 0)
  {
    v19 = 1;
    if ((v7 & 0x10) == 0)
      goto LABEL_38;
    goto LABEL_43;
  }
  if ((v7 & 2) != 0)
  {
    v19 = 2;
    if ((v7 & 0x10) == 0)
      goto LABEL_38;
LABEL_43:
    v10 = *(unsigned int *)(a3 + 32);
    if (v19 != v10)
      goto LABEL_72;
    goto LABEL_50;
  }
  if ((v7 & 0xC) == 0)
  {
    LODWORD(v10) = *(_DWORD *)(a3 + 32);
    if ((_DWORD)v10)
    {
      v24 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
LABEL_74:
      if ((v7 & 0xC) == 0)
        goto LABEL_95;
      v34 = 4;
      if ((v7 & 0x10) != 0)
        goto LABEL_92;
LABEL_85:
      if ((v7 & 0x20) != 0)
      {
        LODWORD(v38) = 2;
        goto LABEL_94;
      }
      v37 = v7 & 0x40;
      if ((_DWORD)v37)
      {
        v38 = v37 >> 4;
LABEL_94:
        v13 = v38 * (unint64_t)v34;
        LOBYTE(v14) = 1;
LABEL_96:
        v20 = " is expected to have ";
        v21 = " bytes per pixel but has an incompatible pixel byte stride of ";
        v22 = v4;
        v23 = v24;
        goto LABEL_36;
      }
LABEL_95:
      v13 = 0;
      LOBYTE(v14) = 0;
      goto LABEL_96;
    }
    goto LABEL_50;
  }
  v19 = 4;
  if ((v7 & 0x10) != 0)
    goto LABEL_43;
LABEL_38:
  if ((v7 & 0x20) != 0)
  {
    v10 = *(unsigned int *)(a3 + 32);
    if (2 * v19 != v10)
    {
LABEL_72:
      v24 = *(_QWORD *)a3;
      v12 = *(_QWORD *)(a2 + 40);
      if ((v7 & 1) != 0)
      {
        v34 = 1;
        if ((v7 & 0x10) == 0)
          goto LABEL_85;
      }
      else
      {
        if ((v7 & 2) == 0)
          goto LABEL_74;
        v34 = 2;
        if ((v7 & 0x10) == 0)
          goto LABEL_85;
      }
LABEL_92:
      LODWORD(v38) = 1;
      goto LABEL_94;
    }
  }
  else if ((v7 & 0x40) != 0)
  {
    v10 = *(unsigned int *)(a3 + 32);
    if (((unint64_t)(v7 & 0x40) >> 4) * v19 != v10)
      goto LABEL_72;
  }
  else
  {
    LODWORD(v10) = *(_DWORD *)(a3 + 32);
    if ((_DWORD)v10)
      goto LABEL_72;
  }
LABEL_50:
  if (*(_BYTE *)(a2 + 52))
  {
    v5 = *(_DWORD *)(a3 + 12);
    if (*(_DWORD *)(a2 + 48) != v5)
    {
      v15 = *(_QWORD *)(a2 + 48);
      v16 = " is expected to have a width of ";
      v17 = " but has width ";
      a1 = v4;
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  if (*(_BYTE *)(a2 + 60))
  {
    v5 = *(_DWORD *)(a3 + 16);
    if (*(_DWORD *)(a2 + 56) != v5)
    {
      v15 = *(_QWORD *)(a2 + 56);
      v16 = " is expected to have a height of ";
      v17 = " but has height ";
      a1 = v4;
      v18 = *(_QWORD *)a3;
      goto LABEL_24;
    }
  }
  if (!*(_BYTE *)(a2 + 36))
    goto LABEL_89;
  v25 = *v6;
  if ((*v6 & 1) != 0)
  {
    if ((v25 & 0x10) == 0)
    {
      if ((v25 & 0x20) != 0)
      {
        v28 = 2;
        v29 = *(unsigned int *)(a3 + 32);
        if (v29 == 2)
          goto LABEL_89;
LABEL_90:
        v31 = *(_QWORD *)a3;
        v32 = v4;
        goto LABEL_63;
      }
      v33 = v25 & 0x40;
      if ((_DWORD)v33)
      {
        v28 = v33 >> 4;
        v29 = *(unsigned int *)(a3 + 32);
        if (v33 >> 4 == v29)
          goto LABEL_89;
        goto LABEL_90;
      }
    }
    v28 = 1;
    v29 = *(unsigned int *)(a3 + 32);
    if (v29 == 1)
      goto LABEL_89;
    goto LABEL_90;
  }
  if ((v25 & 2) != 0)
  {
    v35 = sub_2080A727C(v6);
    if (v36)
      v28 = v35;
    else
      v28 = 2;
    v29 = *(unsigned int *)(a3 + 32);
    if (v28 != v29)
    {
      v31 = *(_QWORD *)a3;
      v32 = v4;
      goto LABEL_63;
    }
  }
  else if ((v25 & 4) != 0)
  {
    v26 = sub_2080A727C(v6);
    v28 = v27 ? v26 : 4;
    v29 = *(unsigned int *)(a3 + 32);
    if (v28 != v29)
    {
      v31 = *(_QWORD *)a3;
      v32 = v4;
LABEL_63:
      sub_2080A6BE0(v32, v31, v30, v28, v29);
      return;
    }
  }
LABEL_89:
  *(_QWORD *)v4 = off_24C06E9E8;
  *(_BYTE *)(v4 + 8) = 0;
  v39 = operator new(0x18uLL);
  *(_QWORD *)v39 = 0;
  v39[23] = 0;
  *(_QWORD *)(v4 + 16) = v39;
  v40 = operator new(0x20uLL);
  *v40 = &unk_24C06F1C0;
  v40[1] = 0;
  v40[2] = 0;
  v40[3] = v39;
  *(_QWORD *)(v4 + 24) = v40;
}

void sub_2080A5E64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2080A5E78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080A5E8C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 120))
  {
    v2 = *(std::__shared_weak_count **)(result + 80);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2080A5EFC(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, const char *a5, unsigned int a6)
{
  int64x2_t v8;
  int8x16_t v9;
  std::string *v10;
  std::string *v11;
  _QWORD *v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  void **v17;
  std::string v18;
  unsigned int v19;
  const char *v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  _DWORD v24[6];
  int v25;
  char v26;
  char *v27;
  void *v28[2];
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *__p;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  v23 = "Input ";
  v20 = a5;
  v21 = a3;
  v19 = a6;
  v25 = 0;
  sub_207CB7878(v24, &v23);
  if (v25 == -1)
    sub_207CA9F48();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0849E8[v25])(v28, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24C0849A0[v25])(&v27, v24);
  sub_207C9F428(&v22);
  v25 = 0;
  if (v21)
    sub_207CB7878(v24, &v21);
  else
    sub_207CAA238(v24, "nullptr");
  if (v25 == -1)
    sub_207CA9F48();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0849E8[v25])(&v32, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24C0849A0[v25])(&v27, v24);
  v25 = 0;
  sub_2080A70E8((uint64_t)v24, a4, SBYTE4(a4));
  if (v25 == -1)
    sub_207CA9F48();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0849E8[v25])(&v34, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24C0849A0[v25])(&v27, v24);
  v25 = 0;
  if (v20)
    sub_207CB7878(v24, &v20);
  else
    sub_207CAA238(v24, "nullptr");
  if (v25 == -1)
    sub_207CA9F48();
  v27 = &v26;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0849E8[v25])(&v36, &v27, v24);
  if (v25 != -1)
    ((void (*)(char **, _DWORD *))off_24C0849A0[v25])(&v27, v24);
  sub_207D58724(&v19);
  sub_207CAA110(&v16, (uint64_t)v28, 6uLL);
  if (v39 < 0)
  {
    operator delete(__p);
    if ((v37 & 0x80000000) == 0)
    {
LABEL_21:
      if ((v35 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_29;
    }
  }
  else if ((v37 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v36);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v34);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_31:
    operator delete(v30);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_32;
  }
LABEL_30:
  operator delete(v32);
  if (v31 < 0)
    goto LABEL_31;
LABEL_24:
  if ((v29 & 0x80000000) == 0)
    goto LABEL_25;
LABEL_32:
  operator delete(v28[0]);
LABEL_25:
  sub_207CAB69C((uint64_t)v16, (uint64_t)v17, 0, 0, &v18, v8, v9);
  *(_QWORD *)a1 = off_24C06E9E8;
  *(_BYTE *)(a1 + 8) = 3;
  v10 = (std::string *)operator new(0x18uLL);
  v11 = v10;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    sub_207CA40D8(v10, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    *v10 = v18;
  *(_QWORD *)(a1 + 16) = v11;
  v12 = operator new(0x20uLL);
  *v12 = &unk_24C06F1C0;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  *(_QWORD *)(a1 + 24) = v12;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v13 = (void **)v16;
  if (v16)
  {
    v14 = v17;
    v15 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v14 - 1) < 0)
          operator delete(*(v14 - 3));
        v14 -= 3;
      }
      while (v14 != v13);
      v15 = v16;
    }
    v17 = v13;
    operator delete(v15);
  }
}

void sub_2080A62E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  if (a17 < 0)
    operator delete(__p);
  sub_207C99DE0((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A6358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
  {
    operator delete(__p);
    if ((a55 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a49 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a55 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a50);
  if ((a49 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a43 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a44);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a37 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a38);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_6:
    if (a31 < 0)
    {
LABEL_13:
      operator delete(a26);
      _Unwind_Resume(a1);
    }
LABEL_14:
    JUMPOUT(0x2080A6350);
  }
LABEL_12:
  operator delete(a32);
  if (a31 < 0)
    goto LABEL_13;
  goto LABEL_14;
}

void sub_2080A63F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void **v26;

  sub_207CA9EF0((uint64_t)&a20);
  while (1)
  {
    if (*((char *)v26 - 1) < 0)
      operator delete(*(v26 - 3));
    v26 -= 3;
    if (v26 == (void **)&a26)
      JUMPOUT(0x2080A6350);
  }
}

void sub_2080A6454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080A6468(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, unint64_t a5, char a6, const char *a7, unsigned int a8)
{
  int64x2_t v12;
  int8x16_t v13;
  std::string *v14;
  std::string *v15;
  _QWORD *v16;
  void **v17;
  void **v18;
  void *v19;
  void *v20;
  void **v21;
  std::string v22;
  unsigned int v23;
  const char *v24;
  const char *v25;
  const char *v26;
  unint64_t v27;
  const char *v28;
  _QWORD v29[3];
  int v30;
  std::string v31;
  _QWORD v32[3];
  std::string *v33;
  std::string *v34;
  _QWORD *v35;
  void *v36[2];
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *__p;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v27 = a2;
  v28 = "Input ";
  v25 = " color components with ";
  v26 = a3;
  v24 = a7;
  v23 = a8;
  LODWORD(v33) = 0;
  sub_207CB7878(v32, &v28);
  if ((_DWORD)v33 == -1)
    sub_207CA9F48();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24C0849E8[v33])(v36, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24C0849A0[v33])(v29, v32);
  sub_207C9F428(&v27);
  LODWORD(v33) = 0;
  if (v26)
    sub_207CB7878(v32, &v26);
  else
    sub_207CAA238(v32, "nullptr");
  if ((_DWORD)v33 == -1)
    sub_207CA9F48();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24C0849E8[v33])(&v40, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24C0849A0[v33])(v29, v32);
  LODWORD(v33) = 0;
  sub_2080A70E8((uint64_t)v32, a4, SBYTE4(a4));
  if ((_DWORD)v33 == -1)
    sub_207CA9F48();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24C0849E8[v33])(&v42, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24C0849A0[v33])(v29, v32);
  LODWORD(v33) = 0;
  if (v25)
    sub_207CB7878(v32, &v25);
  else
    sub_207CAA238(v32, "nullptr");
  if ((_DWORD)v33 == -1)
    sub_207CA9F48();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24C0849E8[v33])(&v44, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24C0849A0[v33])(v29, v32);
  v30 = 0;
  if (a6)
  {
    std::to_string(&v31, a5);
    v32[0] = v29;
    v32[1] = &v31;
    v32[2] = v29;
    v33 = &v31;
    v34 = &v31;
    if (v30 == -1)
      sub_207CA9F48();
    v35 = v32;
    ((void (*)(_QWORD **, _QWORD *))off_24C0849D0[v30])(&v35, v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_207CAA238(v29, "nullopt");
  }
  if (v30 == -1)
    sub_207CA9F48();
  v32[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24C0849E8[v30])(&v46, v32, v29);
  if (v30 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24C0849A0[v30])(v32, v29);
  LODWORD(v33) = 0;
  if (v24)
    sub_207CB7878(v32, &v24);
  else
    sub_207CAA238(v32, "nullptr");
  if ((_DWORD)v33 == -1)
    sub_207CA9F48();
  v29[0] = &v31;
  ((void (*)(void **__return_ptr, _QWORD *, _QWORD *))off_24C0849E8[v33])(&v48, v29, v32);
  if ((_DWORD)v33 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_24C0849A0[v33])(v29, v32);
  sub_207D58724(&v23);
  sub_207CAA110(&v20, (uint64_t)v36, 8uLL);
  if (v51 < 0)
  {
    operator delete(__p);
    if ((v49 & 0x80000000) == 0)
    {
LABEL_35:
      if ((v47 & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_45;
    }
  }
  else if ((v49 & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v48);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v45 & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v46);
  if ((v45 & 0x80000000) == 0)
  {
LABEL_37:
    if ((v43 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v42);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v39 & 0x80000000) == 0)
      goto LABEL_40;
LABEL_49:
    operator delete(v38);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_50;
  }
LABEL_48:
  operator delete(v40);
  if (v39 < 0)
    goto LABEL_49;
LABEL_40:
  if ((v37 & 0x80000000) == 0)
    goto LABEL_41;
LABEL_50:
  operator delete(v36[0]);
LABEL_41:
  sub_207CAB69C((uint64_t)v20, (uint64_t)v21, 0, 0, &v22, v12, v13);
  *(_QWORD *)a1 = off_24C06E9E8;
  *(_BYTE *)(a1 + 8) = 3;
  v14 = (std::string *)operator new(0x18uLL);
  v15 = v14;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    sub_207CA40D8(v14, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    *v14 = v22;
  *(_QWORD *)(a1 + 16) = v15;
  v16 = operator new(0x20uLL);
  *v16 = &unk_24C06F1C0;
  v16[1] = 0;
  v16[2] = 0;
  v16[3] = v15;
  *(_QWORD *)(a1 + 24) = v16;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v17 = (void **)v20;
  if (v20)
  {
    v18 = v21;
    v19 = v20;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
      while (v18 != v17);
      v19 = v20;
    }
    v21 = v17;
    operator delete(v19);
  }
}

void sub_2080A69F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  if (a17 < 0)
    operator delete(__p);
  sub_207C99DE0((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2080A6A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *a70;
  char a72;
  void *__p;
  char a74;

  if (a74 < 0)
  {
    operator delete(__p);
    if ((a72 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a72 & 0x80000000) == 0)
  {
LABEL_3:
    if (a69 < 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  operator delete(a70);
  if (a69 < 0)
  {
LABEL_4:
    operator delete(a64);
    if ((a63 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  if ((a63 & 0x80000000) == 0)
  {
LABEL_5:
    if (a57 < 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a58);
  if (a57 < 0)
  {
LABEL_6:
    operator delete(a52);
    if ((a51 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  if ((a51 & 0x80000000) == 0)
  {
LABEL_7:
    if (a45 < 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a46);
  if (a45 < 0)
  {
LABEL_8:
    operator delete(a40);
    if (a39 < 0)
    {
LABEL_17:
      operator delete(a34);
      _Unwind_Resume(a1);
    }
LABEL_18:
    JUMPOUT(0x2080A6A68);
  }
LABEL_16:
  if (a39 < 0)
    goto LABEL_17;
  goto LABEL_18;
}

void sub_2080A6B38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  char *v37;

  sub_207CA9EF0((uint64_t)&a31);
  while (1)
  {
    if (*(v37 - 1) < 0)
      operator delete(*((void **)v37 - 3));
    v37 -= 24;
    if (v37 == &a37)
      JUMPOUT(0x2080A6A68);
  }
}

void sub_2080A6BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_207CA9EF0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_2080A6BE0(uint64_t a1, unint64_t a2, const char *a3, unint64_t a4, unsigned int a5)
{
  int64x2_t v6;
  int8x16_t v7;
  std::string *v8;
  std::string *v9;
  _QWORD *v10;
  void **v11;
  void **v12;
  void *v13;
  void *v14;
  void **v15;
  std::string v16;
  unsigned int v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  const char *v22;
  _DWORD v23[6];
  int v24;
  char v25;
  char *v26;
  void *v27[2];
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v21 = a2;
  v22 = "Input ";
  v19 = a4;
  v20 = a3;
  v18 = " bytes per pixel but has incompatible pixel byte stride of ";
  v17 = a5;
  v24 = 0;
  sub_207CB7878(v23, &v22);
  if (v24 == -1)
    sub_207CA9F48();
  v26 = &v25;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0849E8[v24])(v27, &v26, v23);
  if (v24 != -1)
    ((void (*)(char **, _DWORD *))off_24C0849A0[v24])(&v26, v23);
  sub_207C9F428(&v21);
  v24 = 0;
  if (v20)
    sub_207CB7878(v23, &v20);
  else
    sub_207CAA238(v23, "nullptr");
  if (v24 == -1)
    sub_207CA9F48();
  v26 = &v25;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0849E8[v24])(&v31, &v26, v23);
  if (v24 != -1)
    ((void (*)(char **, _DWORD *))off_24C0849A0[v24])(&v26, v23);
  sub_207C9F428(&v19);
  v24 = 0;
  if (v18)
    sub_207CB7878(v23, &v18);
  else
    sub_207CAA238(v23, "nullptr");
  if (v24 == -1)
    sub_207CA9F48();
  v26 = &v25;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0849E8[v24])(&v35, &v26, v23);
  if (v24 != -1)
    ((void (*)(char **, _DWORD *))off_24C0849A0[v24])(&v26, v23);
  sub_207D58724(&v17);
  sub_207CAA110(&v14, (uint64_t)v27, 6uLL);
  if (v38 < 0)
  {
    operator delete(__p);
    if ((v36 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v34 & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_26;
    }
  }
  else if ((v36 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v35);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v32 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v33);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v30 & 0x80000000) == 0)
      goto LABEL_21;
LABEL_28:
    operator delete(v29);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v31);
  if (v30 < 0)
    goto LABEL_28;
LABEL_21:
  if ((v28 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_29:
  operator delete(v27[0]);
LABEL_22:
  sub_207CAB69C((uint64_t)v14, (uint64_t)v15, 0, 0, &v16, v6, v7);
  *(_QWORD *)a1 = off_24C06E9E8;
  *(_BYTE *)(a1 + 8) = 3;
  v8 = (std::string *)operator new(0x18uLL);
  v9 = v8;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    sub_207CA40D8(v8, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    *v8 = v16;
  *(_QWORD *)(a1 + 16) = v9;
  v10 = operator new(0x20uLL);
  *v10 = &unk_24C06F1C0;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v9;
  *(_QWORD *)(a1 + 24) = v10;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v11 = (void **)v14;
  if (v14)
  {
    v12 = v15;
    v13 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = v14;
    }
    v15 = v11;
    operator delete(v13);
  }
}

void sub_2080A6F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a18 < 0)
    operator delete(__p);
  sub_207C99DE0(&a10);
  _Unwind_Resume(a1);
}

void sub_2080A6FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0)
  {
    operator delete(__p);
    if ((a57 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a51 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a57 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a52);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a46);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a40);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if (a33 < 0)
    {
LABEL_13:
      operator delete(a28);
      _Unwind_Resume(a1);
    }
LABEL_14:
    JUMPOUT(0x2080A6FD8);
  }
LABEL_12:
  operator delete(a34);
  if (a33 < 0)
    goto LABEL_13;
  goto LABEL_14;
}

void sub_2080A7078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void **v28;

  sub_207CA9EF0((uint64_t)&a22);
  while (1)
  {
    if (*((char *)v28 - 1) < 0)
      operator delete(*(v28 - 3));
    v28 -= 3;
    if (v28 == (void **)&a28)
      JUMPOUT(0x2080A6FD8);
  }
}

void sub_2080A70E8(uint64_t a1, unsigned int __val, char a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (a3)
  {
    std::to_string(&v6, __val);
    v8 = a1;
    v9 = &v6;
    v10 = a1;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24C0849D0[v4])(&v7, a1);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a1;
    v9 = (std::string *)"nullopt";
    v10 = a1;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v5 == -1)
      sub_207CA9F48();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24C0849B8[v5])(&v6, a1);
  }
}

void sub_2080A71D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2080A71F4(_DWORD *a1)
{
  return ((*a1 >> 1) & 1) + (*a1 & 1) + ((*a1 >> 2) & 1) + ((*a1 >> 3) & 1u) <= 1
      && ((*a1 >> 4) & 1) + ((*a1 >> 5) & 1) + ((*a1 >> 6) & 1u) < 2;
}

uint64_t sub_2080A7244(_DWORD *a1)
{
  if ((*a1 & 1) != 0)
    return 1;
  if ((*a1 & 2) != 0)
    return 2;
  return 4 * ((*a1 & 0xC) != 0);
}

uint64_t sub_2080A727C(int *a1)
{
  int v1;
  unsigned int v2;
  unint64_t v3;

  v1 = *a1;
  if ((*a1 & 1) != 0)
  {
    v2 = 1;
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    return v2;
  }
  if ((v1 & 2) != 0)
  {
    v2 = 2;
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    return v2;
  }
  if ((v1 & 0xC) == 0)
    return 0;
  v2 = 4;
  if ((v1 & 0x10) != 0)
    return v2;
LABEL_7:
  if ((v1 & 0x20) != 0)
    return 2 * v2;
  v3 = v1 & 0x40;
  if ((_DWORD)v3)
    return (v3 >> 4) * (unint64_t)v2;
  return 0;
}

_QWORD *sub_2080A72FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_24C084A68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_2080A7344(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  std::__assoc_sub_state *v14;
  unint64_t *v15;
  _QWORD *v16;
  std::__thread_struct *v17;
  char *v18;
  int v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::future<void> v35;
  void *v36;
  char *v37;
  uint64_t v38;
  pthread_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[3];
  _QWORD *v48;
  void *__p;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v40 = a1;
  v5 = v41;
  v6 = (_QWORD *)a3[3];
  if (!v6)
  {
    v42 = 0;
    v43 = a1;
    v7 = v44;
    goto LABEL_9;
  }
  if (v6 == a3)
  {
    v42 = v41;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v41);
    v6 = v42;
    v43 = v40;
    v7 = v44;
    if (v42)
      goto LABEL_7;
LABEL_9:
    v45 = v6;
    goto LABEL_10;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v42 = v6;
  v43 = a1;
  v7 = v44;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  if (v6 != v41)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_9;
  }
  v45 = v44;
  (*(void (**)(_QWORD *, _QWORD *))(v41[0] + 24))(v41, v44);
LABEL_10:
  sub_2080A83EC(&v36, a2);
  v46 = v43;
  v8 = &v46;
  v9 = v47;
  if (!v45)
  {
LABEL_13:
    v8[4] = 0;
    goto LABEL_15;
  }
  if (v45 != v44)
  {
    v8 = &v43;
    v48 = v45;
    goto LABEL_13;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _QWORD *))(v44[0] + 24))(v44, v47);
LABEL_15:
  v10 = v36;
  v11 = v37;
  __p = v36;
  v50 = v37;
  v12 = v38;
  v51 = v38;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v13 = (char *)operator new(0xD0uLL);
  v14 = (std::__assoc_sub_state *)v13;
  *((_QWORD *)v13 + 1) = 0;
  v15 = (unint64_t *)(v13 + 8);
  *(_QWORD *)v13 = off_24C084AF0;
  v16 = v48;
  *((_QWORD *)v13 + 18) = v46;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 850045863;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_QWORD *)v13 + 10) = 0;
  *((_QWORD *)v13 + 11) = 1018212795;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *(_OWORD *)(v13 + 124) = 0u;
  if (v16)
  {
    if (v16 == v47)
    {
      *((_QWORD *)v13 + 22) = v13 + 152;
      (*(void (**)(_QWORD *))(v47[0] + 24))(v47);
      v10 = __p;
      v11 = v50;
      v12 = v51;
    }
    else
    {
      *((_QWORD *)v13 + 22) = v16;
      v48 = 0;
    }
  }
  else
  {
    *((_QWORD *)v13 + 22) = 0;
  }
  *(_QWORD *)&v14[1].__mut_.__m_.__opaque[8] = v10;
  *(_QWORD *)&v14[1].__mut_.__m_.__opaque[16] = v11;
  *(_QWORD *)&v14[1].__mut_.__m_.__opaque[24] = v12;
  v50 = 0;
  v51 = 0;
  __p = 0;
  v17 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v17);
  v18 = (char *)operator new(0x20uLL);
  *(_QWORD *)v18 = v17;
  *(_OWORD *)(v18 + 8) = xmmword_208266E10;
  *((_QWORD *)v18 + 3) = v14;
  v19 = pthread_create(&v39, 0, (void *(__cdecl *)(void *))sub_2080A8318, v18);
  if (v19)
  {
    std::__throw_system_error(v19, "thread constructor failed");
    __break(1u);
  }
  std::thread::detach((std::thread *)&v39);
  std::thread::~thread((std::thread *)&v39);
  std::future<void>::future(&v35, v14);
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (v20)
  {
    v21 = (char *)__p;
    if (__p)
      goto LABEL_25;
  }
  else
  {
    ((void (*)(std::__assoc_sub_state *))v14->__on_zero_shared)(v14);
    v21 = (char *)__p;
    if (__p)
    {
LABEL_25:
      v22 = v50;
      v23 = v21;
      if (v50 != v21)
      {
        do
        {
          v24 = v22 - 128;
          v25 = *((unsigned int *)v22 - 2);
          if ((_DWORD)v25 != -1)
            ((void (*)(pthread_t *, char *))off_24C084B28[v25])(&v39, v22 - 128);
          *((_DWORD *)v22 - 2) = -1;
          v22 -= 128;
        }
        while (v24 != v21);
        v23 = __p;
      }
      v50 = v21;
      operator delete(v23);
      v26 = v48;
      if (v48 == v47)
        goto LABEL_32;
      goto LABEL_35;
    }
  }
  v26 = v48;
  if (v48 == v47)
  {
LABEL_32:
    v27 = 4;
    goto LABEL_37;
  }
LABEL_35:
  if (!v26)
    goto LABEL_38;
  v27 = 5;
  v9 = v26;
LABEL_37:
  (*(void (**)(_QWORD *))(*v9 + 8 * v27))(v9);
LABEL_38:
  v28 = (char *)v36;
  if (v36)
  {
    v29 = v37;
    v30 = v36;
    if (v37 != v36)
    {
      do
      {
        v31 = v29 - 128;
        v32 = *((unsigned int *)v29 - 2);
        if ((_DWORD)v32 != -1)
          ((void (*)(pthread_t *, char *))off_24C084B28[v32])(&v39, v29 - 128);
        *((_DWORD *)v29 - 2) = -1;
        v29 -= 128;
      }
      while (v31 != v28);
      v30 = v36;
    }
    v37 = v28;
    operator delete(v30);
  }
  if (v45 == v44)
  {
    v33 = 4;
  }
  else
  {
    if (!v45)
      goto LABEL_51;
    v33 = 5;
    v7 = v45;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v33))(v7);
LABEL_51:
  std::future<void>::~future(&v35);
  if (v42 == v41)
  {
    v34 = 4;
  }
  else
  {
    if (!v42)
      return;
    v34 = 5;
    v5 = v42;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v34))(v5);
}

void sub_2080A77A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::future<void> a10, void *a11, uint64_t a12, uint64_t a13, std::thread a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

void sub_2080A7E78()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Instance does not support view returns");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_2080A7EB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2080A7EC8()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Model does not support runtime configurations");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_2080A7F04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2080A7F18()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Model does not support runtime configurations");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_2080A7F54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2080A7F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = off_24C084AF0;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_24C084B28[v6])(&v9, v3 - 128);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 176);
  if (v7 == (_QWORD *)(a1 + 152))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 152);
    goto LABEL_13;
  }
  if (v7)
  {
    v8 = 5;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2080A8078(uint64_t a1)
{
  void *v1;

  sub_2080A7F68(a1);
  operator delete(v1);
}

void sub_2080A808C(std::__assoc_sub_state *a1)
{
  std::__assoc_sub_state::wait(a1);
  std::__assoc_sub_state::__on_zero_shared(a1);
}

void sub_2080A80B4(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  std::__shared_weak_count *v13;
  void *__p;
  char *v15;
  char v16;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(v12, *(_QWORD *)(a1 + 144), a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2)
    sub_207CA408C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v12);
  if (v16)
  {
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v15;
      v5 = __p;
      if (v15 != __p)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 6);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v15 = v3;
      operator delete(v5);
    }
  }
  v12[0] = off_24C06E9E8;
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__assoc_sub_state::set_value((std::__assoc_sub_state *)a1);
}

void sub_2080A81EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__assoc_sub_state *v26;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  std::exception_ptr v35;
  std::exception_ptr v36[4];
  std::__shared_weak_count *v37;
  char *v38;
  char *v39;
  char v40;

  if (v40 && v38)
  {
    v28 = v39;
    v29 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*(v28 - 8))
        {
          v30 = (std::__shared_weak_count *)*((_QWORD *)v28 - 6);
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v28 -= 120;
      }
      while (v28 != v38);
      v29 = v38;
    }
    v39 = v38;
    operator delete(v29);
  }
  v36[1].__ptr_ = off_24C06E9E8;
  if (v37)
  {
    v33 = &v37->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v26, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_2080A82FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2080A8318(const void **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  void (*v4)(_QWORD *);
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  void *v8;

  v2 = std::__thread_local_data();
  v3 = *a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = (void (*)(_QWORD *))a1[1];
  v5 = (uint64_t)a1[2];
  v6 = (char *)a1[3] + (v5 >> 1);
  if ((v5 & 1) != 0)
    v4 = *(void (**)(_QWORD *))(*v6 + v4);
  v4(v6);
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    v8 = (void *)MEMORY[0x20BD023A4]();
    operator delete(v8);
  }
  operator delete(a1);
  return 0;
}

void sub_2080A8390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2080A83A4((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_2080A83A4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = (void *)MEMORY[0x20BD023A4]();
      operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_2080A83EC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v11[3];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      sub_207CA420C();
    v6 = (char *)operator new(v4 - *a2);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[128 * (v5 >> 7)];
    do
    {
      v8 = &v6[v7];
      *v8 = 0;
      *((_DWORD *)v8 + 30) = -1;
      v9 = *(unsigned int *)(v3 + v7 + 120);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char *, char *))off_24C084B40[v9])(v11, &v6[v7]);
        *((_DWORD *)v8 + 30) = v9;
      }
      v7 += 128;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_2080A84D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14)
{
  void **v14;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v20;

  v16 = (char *)*v14;
  if (*v14)
  {
    v17 = (char *)v14[1];
    v18 = *v14;
    if (v17 != v16)
    {
      do
      {
        v19 = v17 - 128;
        v20 = *((unsigned int *)v17 - 2);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, char *))off_24C084B28[v20])(&a11, v17 - 128);
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 128;
      }
      while (v19 != v16);
      v18 = *v14;
    }
    v14[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_2080A85D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = off_24C084B68;
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 192);
    v4 = *(void **)(a1 + 184);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_24C084B28[v6])(&v9, v3 - 128);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 176);
  if (v7 == (_QWORD *)(a1 + 152))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 152);
    goto LABEL_13;
  }
  if (v7)
  {
    v8 = 5;
LABEL_13:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2080A86E8(uint64_t a1)
{
  void *v1;

  sub_2080A85D8(a1);
  operator delete(v1);
}

void sub_2080A86FC(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[3];
  std::__shared_weak_count *v13;
  void *__p;
  char *v15;
  char v16;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 24))(v12, *(_QWORD *)(a1 + 144), a1 + 184);
  v2 = *(_QWORD *)(a1 + 176);
  if (!v2)
    sub_207CA408C();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 48))(v2, v12);
  if (v16)
  {
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v15;
      v5 = __p;
      if (v15 != __p)
      {
        do
        {
          if (*(v4 - 8))
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 6);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
          }
          v4 -= 120;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v15 = v3;
      operator delete(v5);
    }
  }
  v12[0] = off_24C06E9E8;
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::__assoc_sub_state::set_value((std::__assoc_sub_state *)a1);
}

void sub_2080A8834(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::__assoc_sub_state *v26;
  char *v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  std::exception_ptr v35;
  std::exception_ptr v36[4];
  std::__shared_weak_count *v37;
  char *v38;
  char *v39;
  char v40;

  if (v40 && v38)
  {
    v28 = v39;
    v29 = v38;
    if (v39 != v38)
    {
      do
      {
        if (*(v28 - 8))
        {
          v30 = (std::__shared_weak_count *)*((_QWORD *)v28 - 6);
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
        }
        v28 -= 120;
      }
      while (v28 != v38);
      v29 = v38;
    }
    v39 = v38;
    operator delete(v29);
  }
  v36[1].__ptr_ = off_24C06E9E8;
  if (v37)
  {
    v33 = &v37->__shared_owners_;
    do
      v34 = __ldaxr((unint64_t *)v33);
    while (__stlxr(v34 - 1, (unint64_t *)v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __cxa_begin_catch(a1);
  std::current_exception();
  v35.__ptr_ = v36;
  std::__assoc_sub_state::set_exception(v26, v35);
  std::exception_ptr::~exception_ptr(v36);
  __cxa_end_catch();
}

void sub_2080A8944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL sub_2080A8960(unsigned int a1)
{
  _BOOL8 v2;
  void *__p[2];
  char v5;
  char v6;

  sub_207C95F10(__p);
  v2 = sub_2080A89DC((uint64_t)__p, a1);
  if (v6 && v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_2080A89B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2080A89DC(uint64_t a1, unsigned int a2)
{
  _BOOL8 v3;
  uint64_t v4;
  void **v5;
  char *v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  std::string __dst;
  void *__p[2];
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_207CA40D8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a1 + 16);
  }
  if (v16 >= 0)
    v4 = HIBYTE(v16);
  else
    v4 = (uint64_t)__p[1];
  if (v4 >= 1)
  {
    v5 = __p;
    if (v16 < 0)
      v5 = (void **)__p[0];
    if (*(_BYTE *)v5 == 104)
    {
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1])
        {
          v6 = (char *)__p[0] + 1;
          v7 = (std::string::size_type)__p[1] - 1;
          if ((unint64_t)__p[1] - 1 < 0x7FFFFFFFFFFFFFF8)
          {
LABEL_16:
            if (v7 >= 0x17)
            {
              v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v7 | 7) != 0x17)
                v10 = v7 | 7;
              v11 = v10 + 1;
              p_dst = (std::string *)operator new(v10 + 1);
              __dst.__r_.__value_.__l.__size_ = v7;
              __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
              p_dst = &__dst;
              if (!v7)
              {
LABEL_26:
                p_dst->__r_.__value_.__s.__data_[v7] = 0;
                v12 = std::stoi(&__dst, 0, 10);
                v13 = v12;
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                  v3 = v13 >= a2;
                  if ((v16 & 0x8000000000000000) == 0)
                    return v3;
                }
                else
                {
                  v3 = v12 >= a2;
                  if ((v16 & 0x8000000000000000) == 0)
                    return v3;
                }
                goto LABEL_20;
              }
            }
            memmove(p_dst, v6, v7);
            goto LABEL_26;
          }
LABEL_31:
          sub_207C95C50();
        }
      }
      else if (HIBYTE(v16))
      {
        v6 = (char *)__p + 1;
        v7 = HIBYTE(v16) - 1;
        if (v7 < 0x7FFFFFFFFFFFFFF8)
          goto LABEL_16;
        goto LABEL_31;
      }
      sub_207CA4004();
    }
  }
  v3 = 0;
  if (v16 < 0)
LABEL_20:
    operator delete(__p[0]);
  return v3;
}

void sub_2080A8B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (a21 < 0)
    {
LABEL_5:
      operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_2080A8BDC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string *v6;
  __int128 *v7;
  void *v8;
  int v9;
  __int128 v10;
  std::string v11;
  _OWORD __dst[2];
  unint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  if (0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(a1 + 48) - v4) >> 3) <= a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_207C9F428(&v13);
  v6 = std::string::insert(&v11, 0, "input__", 7uLL);
  v7 = (__int128 *)(v4 + 168 * a2);
  v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((_BYTE *)v7 + 24))
  {
    *(_QWORD *)&__dst[0] = v8;
    *((_QWORD *)&__dst[0] + 1) = v14[0];
    *(_QWORD *)((char *)__dst + 15) = *(_QWORD *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
    memset(__dst, 0, 24);
    *(_BYTE *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)&__dst[1] = *((_QWORD *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  *(_BYTE *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_2080A8D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (v16 < 0)
    operator delete(v15);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2080A8DD8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string *v6;
  __int128 *v7;
  void *v8;
  int v9;
  __int128 v10;
  std::string v11;
  _OWORD __dst[2];
  unint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v4 = *(_QWORD *)(a1 + 64);
  if (a2 >= (*(_QWORD *)(a1 + 72) - v4) >> 5)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return;
  }
  sub_207C9F428(&v13);
  v6 = std::string::insert(&v11, 0, "output__", 8uLL);
  v7 = (__int128 *)(v4 + 32 * a2);
  v8 = (void *)v6->__r_.__value_.__r.__words[0];
  v14[0] = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  v9 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (!*((_BYTE *)v7 + 24))
  {
    *(_QWORD *)&__dst[0] = v8;
    *((_QWORD *)&__dst[0] + 1) = v14[0];
    *(_QWORD *)((char *)__dst + 15) = *(_QWORD *)((char *)v14 + 7);
    BYTE7(__dst[1]) = v9;
    *(_OWORD *)a3 = __dst[0];
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
    memset(__dst, 0, 24);
    *(_BYTE *)(a3 + 24) = 1;
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_13;
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v10 = *v7;
    *(_QWORD *)&__dst[1] = *((_QWORD *)v7 + 2);
    __dst[0] = v10;
  }
  *(_OWORD *)a3 = __dst[0];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&__dst[1];
  memset(__dst, 0, 24);
  *(_BYTE *)(a3 + 24) = 1;
  if ((v9 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_2080A8F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (v16 < 0)
    operator delete(v15);
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080A8FB8()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v0, (uint64_t)".", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_207CBAB98(v1, (uint64_t)".", 1);
  return std::ostream::operator<<();
}

void sub_2080A9008(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  uint64_t context;
  int v13;
  _QWORD *v14;
  int v15;
  size_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t plan;
  uint64_t v21;
  unsigned int v22;
  int v23;
  size_t v24;
  unint64_t v25;
  _BYTE *v26;
  int v27;
  size_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  uint64_t v54;
  const void *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type size;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  const void *v65;
  std::string *v66;
  __int128 v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  float v91;
  int v92;
  BOOL v93;
  unsigned int v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  int v109;
  __int128 v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  __int128 v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  __int128 v128;
  const std::string::value_type *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  std::string::size_type v136;
  unsigned int v137;
  std::string *v138;
  __int128 v139;
  void *v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  const std::string::value_type *v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  __int128 v152;
  unsigned int blob_dimensions;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _BYTE v160[48];
  int v161;
  unint64_t v162;
  std::string v163;
  std::string v164;
  std::string v165;
  __int128 v166;
  std::string v167;
  std::string v168;
  void *v169[2];
  uint64_t v170;
  void *v171;
  char v172;
  _BYTE __p[32];
  _BYTE *v174;
  _QWORD v175[7];
  _QWORD v176[2];
  _BYTE v177[48];
  unint64_t v178;
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  uint64_t v182;

  v182 = *MEMORY[0x24BDAC8D0];
  v6 = (_OWORD *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_207CA40D8(v169, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)v169 = *v6;
    v170 = *(_QWORD *)(a1 + 32);
  }
  *(_DWORD *)&__p[24] = 0;
  sub_207CB5ED4((uint64_t)v180, (unsigned int *)__p);
  if (*(_DWORD *)&__p[24] == -1)
    sub_207CA9F48();
  v180[0] = &v177[32];
  ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C084C40[*(unsigned int *)&__p[24]])(&v171, v180, __p);
  if (*(_DWORD *)&__p[24] != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C084C28[*(unsigned int *)&__p[24]])(v180, __p);
  v7 = *(unsigned __int8 *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 36);
  v10 = (unsigned __int16)sub_207CF7368();
  if (v10 <= 0x100)
    LOBYTE(v10) = 0;
  if (v9 <= 1 && (_BYTE)v10 && (v8 < 2 || &__p[4] - __p != 4))
    goto LABEL_31;
  if (v7)
  {
LABEL_16:
    *(_QWORD *)__p = operator new(0x38uLL);
    *(_OWORD *)&__p[8] = xmmword_20822C9D0;
    strcpy(*(char **)__p, "Either requested device or storage type not supported");
    sub_2080AB0C8(a3, (const void **)v169, (uint64_t)__p);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_331;
    v11 = *(void **)__p;
    goto LABEL_111;
  }
  if ((v9 | 2) == 2)
  {
    if (v8 < 2)
      goto LABEL_31;
    if (v8 == 2)
    {
      if (&__p[4] - __p != 8)
        goto LABEL_31;
    }
    else if (&__p[8] - __p != 8)
    {
      goto LABEL_31;
    }
  }
  if (v9 != 3 && v9)
    goto LABEL_16;
  if (v8 >= 2)
  {
    if (v8 == 2)
    {
      if (&__p[4] - __p == 8)
        goto LABEL_16;
    }
    else if (&__p[8] - __p == 8)
    {
      goto LABEL_16;
    }
  }
LABEL_31:
  switch(*(_DWORD *)(a2 + 32))
  {
    case 0:
      context = sub_2080B8CAC(v7 != 0);
      *(_DWORD *)(a2 + 32) = v13;
      if (!context)
        goto LABEL_33;
      goto LABEL_37;
    case 1:
    case 2:
    case 3:
      context = espresso_create_context();
      if (!context)
      {
LABEL_33:
        LODWORD(v181) = 0;
        v14 = operator new(0x118uLL);
        v14[34] = 0;
        *((_OWORD *)v14 + 15) = 0u;
        *((_OWORD *)v14 + 16) = 0u;
        *((_OWORD *)v14 + 13) = 0u;
        *((_OWORD *)v14 + 14) = 0u;
        *((_OWORD *)v14 + 11) = 0u;
        *((_OWORD *)v14 + 12) = 0u;
        *((_OWORD *)v14 + 9) = 0u;
        *((_OWORD *)v14 + 10) = 0u;
        *((_OWORD *)v14 + 7) = 0u;
        *((_OWORD *)v14 + 8) = 0u;
        *((_OWORD *)v14 + 5) = 0u;
        *((_OWORD *)v14 + 6) = 0u;
        *((_OWORD *)v14 + 3) = 0u;
        *((_OWORD *)v14 + 4) = 0u;
        *((_OWORD *)v14 + 1) = 0u;
        *((_OWORD *)v14 + 2) = 0u;
        *(_OWORD *)v14 = 0u;
        sub_207CA2878((uint64_t)v14);
        *(_QWORD *)__p = v14;
        sub_207CBAB98(v14 + 2, (uint64_t)(&off_24C0848C8)[2 * *(int *)(a2 + 32)], 3);
        v15 = *((_DWORD *)v14 + 30);
        if ((v15 & 0x10) != 0)
        {
          v31 = v14[14];
          v32 = v14[9];
          if (v31 < v32)
          {
            v14[14] = v32;
            v31 = v32;
          }
          v33 = (const void *)v14[8];
          v16 = v31 - (_QWORD)v33;
          if (v31 - (unint64_t)v33 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_158;
        }
        else
        {
          if ((v15 & 8) == 0)
          {
            v16 = 0;
            HIBYTE(v178) = 0;
            v17 = &v177[32];
            goto LABEL_84;
          }
          v78 = v14[7];
          v33 = (const void *)v14[5];
          v16 = v78 - (_QWORD)v33;
          if ((unint64_t)(v78 - (_QWORD)v33) > 0x7FFFFFFFFFFFFFF7)
LABEL_158:
            sub_207C95C50();
        }
        if (v16 >= 0x17)
        {
          v40 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v40 = v16 | 7;
          v41 = v40 + 1;
          v17 = operator new(v40 + 1);
          *(_QWORD *)&v177[40] = v16;
          v178 = v41 | 0x8000000000000000;
          *(_QWORD *)&v177[32] = v17;
        }
        else
        {
          HIBYTE(v178) = v16;
          v17 = &v177[32];
          if (!v16)
          {
LABEL_84:
            v17[v16] = 0;
            v42 = *(_QWORD *)__p;
            if (*(_QWORD *)__p)
            {
              v43 = MEMORY[0x24BEDB7F0];
              v44 = *MEMORY[0x24BEDB7F0];
              **(_QWORD **)__p = *MEMORY[0x24BEDB7F0];
              v45 = *(_QWORD *)(v43 + 72);
              *(_QWORD *)(v42 + *(_QWORD *)(v44 - 24)) = *(_QWORD *)(v43 + 64);
              *(_QWORD *)(v42 + 24) = MEMORY[0x24BEDB848] + 16;
              *(_QWORD *)(v42 + 16) = v45;
              if (*(char *)(v42 + 111) < 0)
                operator delete(*(void **)(v42 + 88));
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x20BD027B8](v42 + 128);
              operator delete((void *)v42);
            }
            *(_QWORD *)__p = v180;
            *(_QWORD *)&__p[8] = &v177[32];
            *(_QWORD *)&__p[16] = v180;
            *(_QWORD *)&__p[24] = &v177[32];
            v174 = &v177[32];
            if ((_DWORD)v181 == -1)
              sub_207CA9F48();
            v165.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            ((void (*)(std::string *, _QWORD *))off_24C084C10[v181])(&v165, v180);
            if (SHIBYTE(v178) < 0)
              operator delete(*(void **)&v177[32]);
            if ((_DWORD)v181 == -1)
              sub_207CA9F48();
            *(_QWORD *)__p = &v177[32];
            ((void (*)(std::string *__return_ptr, _BYTE *, _QWORD *))off_24C084C40[v181])(&v167, __p, v180);
            if ((_DWORD)v181 != -1)
              ((void (*)(_BYTE *, _QWORD *))off_24C084C28[v181])(__p, v180);
            v46 = std::string::insert(&v167, 0, "Could not create espresso context for ", 0x26uLL);
            v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            v168.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            v48 = std::string::append(&v168, ": ", 2uLL);
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            *(_QWORD *)&v160[16] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
            *(_OWORD *)v160 = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            sub_2080AB450((std::string *)__p, 0);
            if (__p[23] >= 0)
              v50 = __p;
            else
              v50 = *(const std::string::value_type **)__p;
            if (__p[23] >= 0)
              v51 = __p[23];
            else
              v51 = *(_QWORD *)&__p[8];
            v52 = std::string::append((std::string *)v160, v50, v51);
            v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
            *(_QWORD *)&v177[16] = *((_QWORD *)&v52->__r_.__value_.__l + 2);
            *(_OWORD *)v177 = v53;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            sub_2080AB0C8(a3, (const void **)v169, (uint64_t)v177);
            if ((v177[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v177);
              if ((__p[23] & 0x80000000) == 0)
              {
LABEL_102:
                if ((v160[23] & 0x80000000) == 0)
                  goto LABEL_103;
                goto LABEL_108;
              }
            }
            else if ((__p[23] & 0x80000000) == 0)
            {
              goto LABEL_102;
            }
            operator delete(*(void **)__p);
            if ((v160[23] & 0x80000000) == 0)
            {
LABEL_103:
              if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_104;
              goto LABEL_109;
            }
LABEL_108:
            operator delete(*(void **)v160);
            if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_104:
              if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_331;
LABEL_110:
              v11 = (void *)v167.__r_.__value_.__r.__words[0];
LABEL_111:
              operator delete(v11);
              goto LABEL_331;
            }
LABEL_109:
            operator delete(v168.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_331;
            goto LABEL_110;
          }
        }
        memmove(v17, v33, v16);
        goto LABEL_84;
      }
LABEL_37:
      v180[0] = &off_24C084EC8;
      v180[1] = MEMORY[0x24BE2FB00];
      v180[2] = context;
      v181 = v180;
      v18 = *(_DWORD *)(a2 + 32);
      v19 = *(_DWORD *)(a2 + 36);
      if (!v19)
      {
        v19 = 1;
        if (!v7 && (v18 - 1) >= 2)
        {
          if (v18 != 3)
          {
            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoUtil.cpp", 62, (uint64_t)"", 0, (uint64_t)"Unexpected device type", 22, (void (*)(void **))sub_208216974);
            abort();
          }
          v19 = 2;
        }
        goto LABEL_45;
      }
      if (v19 == 2 && v18 == 1)
      {
        v19 = 1;
LABEL_45:
        *(_DWORD *)(a2 + 36) = v19;
      }
      if (v19 == 1
        && v18 == 2
        && *(_BYTE *)(a2 + 41)
        && espresso_context_set_low_precision_accumulation()
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 97, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      plan = espresso_create_plan();
      v21 = plan;
      if (!plan)
      {
        v27 = *(char *)(a1 + 39);
        if (v27 >= 0)
          v28 = *(unsigned __int8 *)(a1 + 39);
        else
          v28 = *(_QWORD *)(a1 + 24);
        v29 = v28 + 44;
        if (v28 + 44 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        if (v29 > 0x16)
        {
          v62 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v29 | 7) != 0x17)
            v62 = v29 | 7;
          v63 = v62 + 1;
          v64 = (char *)operator new(v62 + 1);
          *(_QWORD *)&v177[8] = v28 + 44;
          *(_QWORD *)&v177[16] = v63 | 0x8000000000000000;
          *(_QWORD *)v177 = v64;
          qmemcpy(v64, "Could not create espresso plan for model at ", 44);
          v30 = v64 + 44;
          if (!v28)
          {
LABEL_137:
            v30[v28] = 0;
            v66 = std::string::append((std::string *)v177, ": ", 2uLL);
            v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            v178 = v66->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v177[32] = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            sub_2080AB450((std::string *)v160, 0);
            if (v160[23] >= 0)
              v68 = v160;
            else
              v68 = *(const std::string::value_type **)v160;
            if (v160[23] >= 0)
              v69 = v160[23];
            else
              v69 = *(_QWORD *)&v160[8];
            v70 = std::string::append((std::string *)&v177[32], v68, v69);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v70->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            sub_2080AB0C8(a3, (const void **)v169, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
              if ((v160[23] & 0x80000000) == 0)
              {
LABEL_145:
                if ((SHIBYTE(v178) & 0x80000000) == 0)
                  goto LABEL_146;
                goto LABEL_165;
              }
            }
            else if ((v160[23] & 0x80000000) == 0)
            {
              goto LABEL_145;
            }
            operator delete(*(void **)v160);
            if ((SHIBYTE(v178) & 0x80000000) == 0)
            {
LABEL_146:
              if ((v177[23] & 0x80000000) == 0)
                goto LABEL_325;
LABEL_166:
              operator delete(*(void **)v177);
              goto LABEL_325;
            }
LABEL_165:
            operator delete(*(void **)&v177[32]);
            if ((v177[23] & 0x80000000) == 0)
              goto LABEL_325;
            goto LABEL_166;
          }
        }
        else
        {
          qmemcpy(v177, "Could not create espresso plan for model at ", 44);
          v30 = &v177[44];
        }
        if (v27 >= 0)
          v65 = v6;
        else
          v65 = *(const void **)v6;
        memmove(v30, v65, v28);
        goto LABEL_137;
      }
      *(_QWORD *)&v177[32] = &off_24C084EC8;
      *(_QWORD *)&v177[40] = MEMORY[0x24BE2FC90];
      v178 = plan;
      v179 = &v177[32];
      v22 = espresso_plan_add_network();
      if (v22)
      {
        v23 = *(char *)(a1 + 39);
        if (v23 >= 0)
          v24 = *(unsigned __int8 *)(a1 + 39);
        else
          v24 = *(_QWORD *)(a1 + 24);
        v25 = v24 + 44;
        if (v24 + 44 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        if (v25 > 0x16)
        {
          v54 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v54 = v25 | 7;
          *(_QWORD *)&v160[8] = v24 + 44;
          *(_QWORD *)&v160[16] = (v54 + 1) | 0x8000000000000000;
          *(_QWORD *)v160 = operator new(v54 + 1);
          qmemcpy(*(void **)v160, "Could not add espresso network for model at ", 44);
          v26 = (_BYTE *)(*(_QWORD *)v160 + 44);
          if (!v24)
          {
LABEL_119:
            v26[v24] = 0;
            v56 = std::string::append((std::string *)v160, ". ", 2uLL);
            v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            *(_QWORD *)&v177[16] = *((_QWORD *)&v56->__r_.__value_.__l + 2);
            *(_OWORD *)v177 = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            sub_2080AB450(&v168, v22 | 0x100000000);
            if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = &v168;
            else
              v58 = (std::string *)v168.__r_.__value_.__r.__words[0];
            if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v168.__r_.__value_.__r.__words[2]);
            else
              size = v168.__r_.__value_.__l.__size_;
            v60 = std::string::append((std::string *)v177, (const std::string::value_type *)v58, size);
            v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v60->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            sub_2080AB0C8(a3, (const void **)v169, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
              if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_127:
                if ((v177[23] & 0x80000000) == 0)
                  goto LABEL_128;
                goto LABEL_161;
              }
            }
            else if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_127;
            }
            operator delete(v168.__r_.__value_.__l.__data_);
            if ((v177[23] & 0x80000000) == 0)
            {
LABEL_128:
              if ((v160[23] & 0x80000000) == 0)
                goto LABEL_319;
LABEL_162:
              v79 = *(char **)v160;
              goto LABEL_318;
            }
LABEL_161:
            operator delete(*(void **)v177);
            if ((v160[23] & 0x80000000) == 0)
              goto LABEL_319;
            goto LABEL_162;
          }
        }
        else
        {
          qmemcpy(v160, "Could not add espresso network for model at ", 44);
          v26 = &v160[44];
        }
        if (v23 >= 0)
          v55 = v6;
        else
          v55 = *(const void **)v6;
        memmove(v26, v55, v24);
        goto LABEL_119;
      }
      v35 = *(_QWORD *)(a1 + 40);
      v34 = *(_QWORD *)(a1 + 48);
      if (v34 == v35)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 119, (uint64_t)"params.inputs.size() >= 1", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_347;
        }
        v35 = *(_QWORD *)(a1 + 40);
        v34 = *(_QWORD *)(a1 + 48);
      }
      v36 = v34 - v35;
      if (v36)
      {
        v37 = 0;
        v38 = v36 / 168;
        while (1)
        {
          *(_QWORD *)&v160[32] = v37;
          sub_2080A8BDC(a1, v37, (uint64_t)__p);
          *(_OWORD *)v177 = *(_OWORD *)__p;
          *(_QWORD *)&v177[16] = *(_QWORD *)&__p[16];
          v39 = espresso_network_declare_input();
          if (v39)
            break;
          if ((v177[23] & 0x80000000) != 0)
            operator delete(*(void **)v177);
          if (v38 == ++v37)
            goto LABEL_148;
        }
        sub_207C9F428((unint64_t *)&v160[32]);
        v125 = std::string::insert(&v164, 0, "Unable to declare input #", 0x19uLL);
        v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v126;
        v125->__r_.__value_.__l.__size_ = 0;
        v125->__r_.__value_.__r.__words[2] = 0;
        v125->__r_.__value_.__r.__words[0] = 0;
        v127 = std::string::append(&v165, " with name '", 0xCuLL);
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        v167.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        if (v177[23] >= 0)
          v129 = v177;
        else
          v129 = *(const std::string::value_type **)v177;
        if (v177[23] >= 0)
          v130 = v177[23];
        else
          v130 = *(_QWORD *)&v177[8];
        v131 = std::string::append(&v167, v129, v130);
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v168.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        v133 = std::string::append(&v168, "'. An input with that name does not exist in the network. ", 0x3AuLL);
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        *(_QWORD *)&v160[16] = *((_QWORD *)&v133->__r_.__value_.__l + 2);
        *(_OWORD *)v160 = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        sub_2080AB450(&v163, v39 | 0x100000000);
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = &v163;
        else
          v135 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v136 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        else
          v136 = v163.__r_.__value_.__l.__size_;
LABEL_285:
        v151 = std::string::append((std::string *)v160, (const std::string::value_type *)v135, v136);
        v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v151->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v152;
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        sub_2080AB0C8(a3, (const void **)v169, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_287:
            if ((v160[23] & 0x80000000) == 0)
              goto LABEL_288;
            goto LABEL_296;
          }
        }
        else if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_287;
        }
        operator delete(v163.__r_.__value_.__l.__data_);
        if ((v160[23] & 0x80000000) == 0)
        {
LABEL_288:
          if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_289;
          goto LABEL_297;
        }
LABEL_296:
        operator delete(*(void **)v160);
        if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_289:
          if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_290;
          goto LABEL_298;
        }
LABEL_297:
        operator delete(v168.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_290:
          if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_291;
          goto LABEL_299;
        }
LABEL_298:
        operator delete(v167.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_291:
          if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_292;
          goto LABEL_300;
        }
LABEL_299:
        operator delete(v165.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_292:
          if ((v177[23] & 0x80000000) == 0)
            goto LABEL_319;
LABEL_301:
          v79 = *(char **)v177;
          goto LABEL_318;
        }
LABEL_300:
        operator delete(v164.__r_.__value_.__l.__data_);
        if ((v177[23] & 0x80000000) == 0)
          goto LABEL_319;
        goto LABEL_301;
      }
LABEL_148:
      v73 = *(_QWORD *)(a1 + 64);
      v72 = *(_QWORD *)(a1 + 72);
      if (v72 == v73)
      {
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 130, (uint64_t)"params.outputs.size() >= 1", 26, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          v73 = *(_QWORD *)(a1 + 64);
          v72 = *(_QWORD *)(a1 + 72);
          goto LABEL_151;
        }
LABEL_347:
        abort();
      }
LABEL_151:
      v74 = v72 - v73;
      if (v74)
      {
        v75 = 0;
        v76 = v74 >> 5;
        while (1)
        {
          *(_QWORD *)&v160[32] = v75;
          sub_2080A8DD8(a1, v75, (uint64_t)__p);
          *(_OWORD *)v177 = *(_OWORD *)__p;
          *(_QWORD *)&v177[16] = *(_QWORD *)&__p[16];
          v77 = espresso_network_declare_output();
          if (v77)
            break;
          if ((v177[23] & 0x80000000) != 0)
            operator delete(*(void **)v177);
          if (v76 == ++v75)
            goto LABEL_167;
        }
        sub_207C9F428((unint64_t *)&v160[32]);
        v141 = std::string::insert(&v164, 0, "Unable to declare output #", 0x1AuLL);
        v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v142;
        v141->__r_.__value_.__l.__size_ = 0;
        v141->__r_.__value_.__r.__words[2] = 0;
        v141->__r_.__value_.__r.__words[0] = 0;
        v143 = std::string::append(&v165, " with name '", 0xCuLL);
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        v167.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        if (v177[23] >= 0)
          v145 = v177;
        else
          v145 = *(const std::string::value_type **)v177;
        if (v177[23] >= 0)
          v146 = v177[23];
        else
          v146 = *(_QWORD *)&v177[8];
        v147 = std::string::append(&v167, v145, v146);
        v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
        v168.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v148;
        v147->__r_.__value_.__l.__size_ = 0;
        v147->__r_.__value_.__r.__words[2] = 0;
        v147->__r_.__value_.__r.__words[0] = 0;
        v149 = std::string::append(&v168, "'. An input with that name does not exist in the network. ", 0x3AuLL);
        v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
        *(_QWORD *)&v160[16] = *((_QWORD *)&v149->__r_.__value_.__l + 2);
        *(_OWORD *)v160 = v150;
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        sub_2080AB450(&v163, v77 | 0x100000000);
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = &v163;
        else
          v135 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v136 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
        else
          v136 = v163.__r_.__value_.__l.__size_;
        goto LABEL_285;
      }
LABEL_167:
      v158 = (_QWORD *)a3;
      if (*(_BYTE *)(a2 + 24))
      {
        v80 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v80)
        {
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v159 = 0x6DB6DB6DB6DB6DB7 * (v80 >> 2);
          while (1)
          {
            v162 = v84;
            v85 = *(_QWORD *)a2;
            if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) <= v84)
              sub_207CBA8AC();
            sub_2080A8BDC(a1, v84, (uint64_t)__p);
            v86 = (uint64_t *)(v85 + 28 * v84);
            *(_OWORD *)v177 = *(_OWORD *)__p;
            *(_QWORD *)&v177[16] = *(_QWORD *)&__p[16];
            v87 = *((unsigned __int8 *)v86 + 24);
            if (*((_BYTE *)v86 + 12))
              break;
            v92 = *(unsigned __int8 *)(v85 + 28 * v84 + 20);
            if (*(_BYTE *)(v85 + 28 * v84 + 20))
              v93 = 0;
            else
              v93 = v87 == 0;
            if (!v93)
            {
              *(_QWORD *)&v160[32] = 0;
              *(_DWORD *)&v160[40] = 0;
              LOBYTE(v161) = v87;
              if (!v92)
              {
LABEL_180:
                v91 = 1.0;
                goto LABEL_181;
              }
LABEL_174:
              v91 = *(float *)(v85 + 28 * v84 + 16);
LABEL_181:
              *(float *)&v160[44] = v91;
              v94 = espresso_set_image_preprocessing_params();
              if (v94)
              {
                sub_207C9F428(&v162);
                v95 = std::string::insert(&v164, 0, "Unable to set preprocessing parameters to output #", 0x32uLL);
                v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                v165.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v96;
                v95->__r_.__value_.__l.__size_ = 0;
                v95->__r_.__value_.__r.__words[2] = 0;
                v95->__r_.__value_.__r.__words[0] = 0;
                v97 = std::string::append(&v165, " with name '", 0xCuLL);
                v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v167.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                if (v177[23] >= 0)
                  v99 = v177;
                else
                  v99 = *(const std::string::value_type **)v177;
                if (v177[23] >= 0)
                  v100 = v177[23];
                else
                  v100 = *(_QWORD *)&v177[8];
                v101 = std::string::append(&v167, v99, v100);
                v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                v168.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v102;
                v101->__r_.__value_.__l.__size_ = 0;
                v101->__r_.__value_.__r.__words[2] = 0;
                v101->__r_.__value_.__r.__words[0] = 0;
                v103 = std::string::append(&v168, "'. ", 3uLL);
                v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
                *(_QWORD *)&v160[16] = *((_QWORD *)&v103->__r_.__value_.__l + 2);
                *(_OWORD *)v160 = v104;
                v103->__r_.__value_.__l.__size_ = 0;
                v103->__r_.__value_.__r.__words[2] = 0;
                v103->__r_.__value_.__r.__words[0] = 0;
                sub_2080AB450(&v163, v94 | 0x100000000);
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v105 = &v163;
                else
                  v105 = (std::string *)v163.__r_.__value_.__r.__words[0];
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v106 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
                else
                  v106 = v163.__r_.__value_.__l.__size_;
                v107 = std::string::append((std::string *)v160, (const std::string::value_type *)v105, v106);
                v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                *(_QWORD *)&__p[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                sub_2080AB0C8((uint64_t)v158, (const void **)v169, (uint64_t)__p);
                if ((__p[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)__p);
                  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_205;
LABEL_196:
                  if ((v160[23] & 0x80000000) == 0)
                    goto LABEL_197;
LABEL_206:
                  operator delete(*(void **)v160);
                  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_207;
LABEL_198:
                  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_199;
LABEL_208:
                  operator delete(v167.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_209;
LABEL_200:
                  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
LABEL_210:
                    operator delete(v164.__r_.__value_.__l.__data_);
                }
                else
                {
                  if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_196;
LABEL_205:
                  operator delete(v163.__r_.__value_.__l.__data_);
                  if ((v160[23] & 0x80000000) != 0)
                    goto LABEL_206;
LABEL_197:
                  if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_198;
LABEL_207:
                  operator delete(v168.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_208;
LABEL_199:
                  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_200;
LABEL_209:
                  operator delete(v165.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_210;
                }
                v109 = 1;
                goto LABEL_250;
              }
              if (v82 < v83)
              {
                v109 = 0;
                v110 = *(_OWORD *)&v160[32];
                *((_DWORD *)v82 + 4) = v161;
                *(_OWORD *)v82 = v110;
                v82[20] = 1;
                v82 += 24;
                goto LABEL_250;
              }
              v111 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v81) >> 3) + 1;
              if (v111 > 0xAAAAAAAAAAAAAAALL)
                sub_207CA420C();
              if (0x5555555555555556 * ((v83 - v81) >> 3) > v111)
                v111 = 0x5555555555555556 * ((v83 - v81) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v83 - v81) >> 3) >= 0x555555555555555)
                v112 = 0xAAAAAAAAAAAAAAALL;
              else
                v112 = v111;
              if (v112)
              {
                if (v112 > 0xAAAAAAAAAAAAAAALL)
                  sub_207CA3AB8();
                v113 = (char *)operator new(24 * v112);
              }
              else
              {
                v113 = 0;
              }
              v117 = &v113[8 * ((v82 - v81) >> 3)];
              *(_OWORD *)v117 = *(_OWORD *)&v160[32];
              *((_DWORD *)v117 + 4) = v161;
              v117[20] = 1;
              if (v82 == v81)
              {
                v120 = &v113[8 * ((v82 - v81) >> 3)];
              }
              else
              {
                v118 = &v113[8 * ((v82 - v81) >> 3)];
                do
                {
                  v119 = *(_OWORD *)(v82 - 24);
                  v120 = v118 - 24;
                  *(_QWORD *)(v118 - 11) = *(_QWORD *)(v82 - 11);
                  *(_OWORD *)(v118 - 24) = v119;
                  v82 -= 24;
                  v118 -= 24;
                }
                while (v82 != v81);
              }
              v121 = &v113[24 * v112];
              v82 = v117 + 24;
              if (v81)
                operator delete(v81);
              v109 = 0;
              goto LABEL_249;
            }
            if (v82 < v83)
            {
              *v82 = 0;
              v82[20] = 0;
              v82 += 24;
              v109 = 19;
              goto LABEL_250;
            }
            v114 = 0xAAAAAAAAAAAAAAABLL * ((v82 - v81) >> 3) + 1;
            if (v114 > 0xAAAAAAAAAAAAAAALL)
              sub_207CA420C();
            if (0x5555555555555556 * ((v83 - v81) >> 3) > v114)
              v114 = 0x5555555555555556 * ((v83 - v81) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v83 - v81) >> 3) >= 0x555555555555555)
              v115 = 0xAAAAAAAAAAAAAAALL;
            else
              v115 = v114;
            if (v115)
            {
              if (v115 > 0xAAAAAAAAAAAAAAALL)
                sub_207CA3AB8();
              v116 = (char *)operator new(24 * v115);
            }
            else
            {
              v116 = 0;
            }
            v122 = &v116[8 * ((v82 - v81) >> 3)];
            *v122 = 0;
            v122[20] = 0;
            if (v82 == v81)
            {
              v120 = &v116[8 * ((v82 - v81) >> 3)];
            }
            else
            {
              v123 = &v116[8 * ((v82 - v81) >> 3)];
              do
              {
                v124 = *(_OWORD *)(v82 - 24);
                v120 = v123 - 24;
                *(_QWORD *)(v123 - 11) = *(_QWORD *)(v82 - 11);
                *(_OWORD *)(v123 - 24) = v124;
                v82 -= 24;
                v123 -= 24;
              }
              while (v82 != v81);
            }
            v121 = &v116[24 * v115];
            v82 = v122 + 24;
            if (v81)
              operator delete(v81);
            v109 = 19;
LABEL_249:
            v81 = v120;
            v83 = v121;
LABEL_250:
            if ((v177[23] & 0x80000000) != 0)
              operator delete(*(void **)v177);
            if (v109 != 19 && v109)
              goto LABEL_316;
            if (++v84 == v159)
              goto LABEL_268;
          }
          v88 = *((_DWORD *)v86 + 2);
          v89 = *v86;
          v90 = *(unsigned __int8 *)(v85 + 28 * v84 + 20);
          *(_QWORD *)&v160[32] = v89;
          *(_DWORD *)&v160[40] = v88;
          LOBYTE(v161) = v87;
          if (!v90)
            goto LABEL_180;
          goto LABEL_174;
        }
      }
      v81 = 0;
      v82 = 0;
      v83 = 0;
LABEL_268:
      v137 = espresso_plan_build();
      if (v137)
      {
        sub_2080AB450((std::string *)v177, v137 | 0x100000000);
        v138 = std::string::insert((std::string *)v177, 0, "Failed to build plan. ", 0x16uLL);
        v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v138->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v139;
        v138->__r_.__value_.__l.__size_ = 0;
        v138->__r_.__value_.__r.__words[2] = 0;
        v138->__r_.__value_.__r.__words[0] = 0;
        sub_2080AB0C8((uint64_t)v158, (const void **)v169, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((v177[23] & 0x80000000) == 0)
          goto LABEL_316;
        v140 = *(void **)v177;
      }
      else
      {
        blob_dimensions = espresso_network_query_blob_dimensions();
        if (blob_dimensions)
        {
          sub_2080AB450((std::string *)v160, blob_dimensions | 0x100000000);
          sub_207C96E8C("Unable to determine network data dimension. ", (std::string *)v160, (std::string *)__p);
          sub_2080AB0C8((uint64_t)v158, (const void **)v169, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if ((v160[23] & 0x80000000) == 0)
            goto LABEL_316;
          v140 = *(void **)v160;
        }
        else
        {
          sub_2080AB7B8(&v168, (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5);
          sub_2080AB884((uint64_t)v160, a1);
          if (v160[8])
          {
            std::operator+<char>();
            sub_2080AB0C8((uint64_t)v158, (const void **)v169, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          else
          {
            *(_QWORD *)__p = &unk_24C06EA28;
            *(_QWORD *)&__p[8] = nullsub_3;
            *(_QWORD *)&__p[24] = __p;
            sub_207C9B744(v180, __p);
            sub_207C97D64(__p);
            *(_QWORD *)__p = &unk_24C06EA28;
            *(_QWORD *)&__p[8] = nullsub_3;
            *(_QWORD *)&__p[24] = __p;
            sub_207C9B744(&v177[32], __p);
            sub_207C97D64(__p);
            sub_2080AC4D4(&v167, (uint64_t *)a1, a2);
            *(_QWORD *)__p = context;
            *(_QWORD *)&__p[8] = v21;
            *(_OWORD *)&__p[16] = v166;
            LODWORD(v174) = *(_DWORD *)(a2 + 32);
            sub_2080AC5B4(v175, (uint64_t)&v168);
            v175[3] = v81;
            v175[4] = v82;
            v176[0] = 0;
            v176[1] = 0;
            v175[5] = v83;
            v175[6] = v176;
            sub_2080AC024(&v165, (uint64_t *)&v167, (__int128 *)__p);
            sub_2080AC66C((uint64_t)__p);
            sub_207C99D78((uint64_t)&v167);
            *v158 = v165.__r_.__value_.__r.__words[0];
            v167.__r_.__value_.__s.__data_[0] = 0;
            sub_207C96EE8(__p, "");
            sub_207CB5A6C((uint64_t)(v158 + 1), &v167, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v81 = 0;
          }
          sub_207C9C674(v160);
          v140 = (void *)v168.__r_.__value_.__r.__words[0];
          if (!v168.__r_.__value_.__r.__words[0])
            goto LABEL_316;
          v168.__r_.__value_.__l.__size_ = v168.__r_.__value_.__r.__words[0];
        }
      }
      operator delete(v140);
LABEL_316:
      if (!v81)
        goto LABEL_319;
      v79 = v81;
LABEL_318:
      operator delete(v79);
LABEL_319:
      if (!v179)
        sub_207CA408C();
      (*(void (**)(_BYTE *))(*(_QWORD *)v179 + 48))(v179);
      v154 = v179;
      if (v179 == &v177[32])
      {
        v155 = 4;
        v154 = &v177[32];
      }
      else
      {
        if (!v179)
          goto LABEL_325;
        v155 = 5;
      }
      (*(void (**)(void))(*v154 + 8 * v155))();
LABEL_325:
      if (!v181)
        sub_207CA408C();
      (*(void (**)(_QWORD *))(*v181 + 48))(v181);
      v156 = v181;
      if (v181 == v180)
      {
        v157 = 4;
        v156 = v180;
      }
      else
      {
        if (!v181)
          goto LABEL_331;
        v157 = 5;
      }
      (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_331:
      if ((v172 & 0x80000000) == 0)
      {
        if ((SHIBYTE(v170) & 0x80000000) == 0)
          return;
LABEL_335:
        operator delete(v169[0]);
        return;
      }
      operator delete(v171);
      if (SHIBYTE(v170) < 0)
        goto LABEL_335;
      return;
    default:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoUtil.cpp", 81, (uint64_t)"", 0, (uint64_t)"Unexpected device", 17, (void (*)(void **))sub_208216974);
      abort();
  }
}

void sub_2080AA944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  uint64_t v52;

  if (a50 < 0)
    operator delete(__p);
  v52 = *a9;
  *a9 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  sub_207C9C674(&a11);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  sub_207C97D64((_QWORD *)(v50 - 176));
  sub_207C97D64((_QWORD *)(v50 - 136));
  sub_207C9C7D0((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_2080AB0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_207CA9EF0((uint64_t)&a48);
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2080AB0C8(uint64_t a1, const void **a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  _BYTE *v9;
  uint64_t v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  const void **v15;
  const std::string::value_type *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  void *v28;
  unint64_t size;
  int v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _BYTE __p[48];
  std::string::size_type v35;
  std::string v36;
  std::string v37;
  _DWORD v38[2];

  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v4 + 35;
  if (v4 + 35 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v5 <= 0x16)
  {
    v9 = &__p[35];
    qmemcpy(__p, "Error during creation of model at '", 35);
LABEL_10:
    if (v3 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v9, v11, v4);
    goto LABEL_14;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  *(_QWORD *)&__p[8] = v4 + 35;
  *(_QWORD *)&__p[16] = (v10 + 1) | 0x8000000000000000;
  *(_QWORD *)__p = operator new(v10 + 1);
  v9 = (_BYTE *)(*(_QWORD *)__p + 35);
  qmemcpy(*(void **)__p, "Error during creation of model at '", 35);
  if (v4)
    goto LABEL_10;
LABEL_14:
  v9[v4] = 0;
  v12 = std::string::append((std::string *)__p, "', version: ", 0xCuLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v35 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[32] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v16 = (const std::string::value_type *)a2[3];
  v15 = a2 + 3;
  v14 = v16;
  v17 = *((char *)v15 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)v15;
  else
    v18 = v14;
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v15 + 23);
  else
    v19 = (std::string::size_type)v15[1];
  v20 = std::string::append((std::string *)&__p[32], v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v36, ". ", 2uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = *(char *)(a3 + 23);
  if (v24 >= 0)
    v25 = (const std::string::value_type *)a3;
  else
    v25 = *(const std::string::value_type **)a3;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a3 + 23);
  else
    v26 = *(_QWORD *)(a3 + 8);
  v27 = std::string::append(&v37, v25, v26);
  v28 = (void *)v27->__r_.__value_.__r.__words[0];
  size = v27->__r_.__value_.__l.__size_;
  v38[0] = v27->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)&v27->__r_.__value_.__r.__words[2] + 3);
  v30 = SHIBYTE(v27->__r_.__value_.__r.__words[2]);
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v35) & 0x80000000) == 0)
        goto LABEL_29;
LABEL_34:
      operator delete(*(void **)&__p[32]);
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    goto LABEL_34;
LABEL_29:
  if ((__p[23] & 0x80000000) == 0)
    goto LABEL_30;
LABEL_35:
  operator delete(*(void **)__p);
LABEL_30:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = off_24C06E9E8;
  *(_BYTE *)(a1 + 16) = 5;
  v31 = (char *)operator new(0x18uLL);
  v32 = v31;
  if (v30 < 0)
  {
    sub_207CA40D8(v31, v28, size);
  }
  else
  {
    *(_QWORD *)v31 = v28;
    *((_QWORD *)v31 + 1) = size;
    *((_DWORD *)v31 + 4) = v38[0];
    *(_DWORD *)(v31 + 19) = *(_DWORD *)((char *)v38 + 3);
    v31[23] = v30;
  }
  *(_QWORD *)(a1 + 24) = v32;
  v33 = operator new(0x20uLL);
  *v33 = &unk_24C06F1C0;
  v33[1] = 0;
  v33[2] = 0;
  v33[3] = v32;
  *(_QWORD *)(a1 + 32) = v33;
  if (v30 < 0)
    operator delete(v28);
}

void sub_2080AB37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _QWORD *v35;
  void *v36;
  void *v37;
  int v38;

  operator delete(v37);
  *v35 = 0;
  if (v38 < 0)
    operator delete(v36);
  _Unwind_Resume(a1);
}

void sub_2080AB450(std::string *a1, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  const char *last_error;
  void *__p[2];
  unsigned __int8 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  uint64_t v20;
  _DWORD v21[6];
  int v22;
  char v23;
  char *v24;

  v20 = a2;
  v3 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0)
  {
    v22 = 0;
    sub_2080B7020((uint64_t)v21);
    if (v22 == -1)
      sub_207CA9F48();
    __p[0] = &v24;
    ((void (*)(std::string *__return_ptr, void **, _DWORD *))off_24C084C40[v22])(&v16, __p, v21);
    if (v22 != -1)
      ((void (*)(void **, _DWORD *))off_24C084C28[v22])(__p, v21);
    v4 = std::string::insert(&v16, 0, "Status code: ", 0xDuLL);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v17, ". ", 2uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    *((_BYTE *)&v18.__r_.__value_.__s + 23) = 0;
    v18.__r_.__value_.__s.__data_[0] = 0;
  }
  v8 = std::string::append(&v18, "Last Error: ", 0xCuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  last_error = (const char *)espresso_get_last_error();
  v22 = 0;
  if (last_error)
    sub_207CB7878(v21, &last_error);
  else
    sub_207CAA238(v21, "nullptr");
  if (v22 == -1)
    sub_207CA9F48();
  v24 = &v23;
  ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C084C40[v22])(__p, &v24, v21);
  if (v22 != -1)
    ((void (*)(char **, _DWORD *))off_24C084C28[v22])(&v24, v21);
  if ((v15 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v11 = v15;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  *a1 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v15 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if (!v3)
      return;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v18.__r_.__value_.__l.__data_);
  if (!v3)
    return;
LABEL_27:
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
}

void sub_2080AB6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2080AB7B8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x186186186186187)
      sub_207CA420C();
    v4 = (char *)operator new(168 * a2);
    *a1 = v4;
    a1[2] = &v4[168 * a2];
    v5 = 168 * ((168 * a2 - 168) / 0xA8) + 168;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2080AB868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2080AB884(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  void *v30;
  unint64_t size;
  int v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  const char *last_error;
  void *__p[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  _DWORD v49[3];
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  char v57;
  char *v58;

  v3 = *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64);
  if (!v3)
  {
LABEL_7:
    *(_QWORD *)a1 = off_24C06E9E8;
    *(_BYTE *)(a1 + 8) = 0;
    v7 = operator new(0x18uLL);
    *(_QWORD *)v7 = 0;
    v7[23] = 0;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = operator new(0x20uLL);
    *v8 = &unk_24C06F1C0;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    *(_QWORD *)(a1 + 24) = v8;
    return;
  }
  v5 = 0;
  v6 = v3 >> 5;
  while (1)
  {
    v53 = v5;
    sub_2080A8DD8(a2, v5, (uint64_t)&v54);
    v51 = v54;
    v52 = v55;
    if (espresso_network_bind_buffer())
      break;
    if (SHIBYTE(v52) < 0)
      operator delete((void *)v51);
    if (v6 == ++v5)
      goto LABEL_7;
  }
  sub_207C9F428(&v53);
  v9 = std::string::insert(&v41, 0, "Unable to bind buffer #", 0x17uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v42, " (named '", 9uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v52 >= 0)
    v13 = (const std::string::value_type *)&v51;
  else
    v13 = (const std::string::value_type *)v51;
  if (v52 >= 0)
    v14 = HIBYTE(v52);
  else
    v14 = *((_QWORD *)&v51 + 1);
  v15 = std::string::append(&v43, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v44, "'). ", 4uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v45, "Status code: ", 0xDuLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v56 = 0;
  sub_2080B7020((uint64_t)&v54);
  if (v56 == -1)
    sub_207CA9F48();
  __p[0] = &v58;
  ((void (*)(void **__return_ptr, void **, __int128 *))off_24C084C40[v56])(v39, __p, &v54);
  if (v56 != -1)
    ((void (*)(void **, __int128 *))off_24C084C28[v56])(__p, &v54);
  if ((v40 & 0x80u) == 0)
    v21 = v39;
  else
    v21 = (void **)v39[0];
  if ((v40 & 0x80u) == 0)
    v22 = v40;
  else
    v22 = (std::string::size_type)v39[1];
  v23 = std::string::append(&v46, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v47, ". Last Error: ", 0xEuLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  last_error = (const char *)espresso_get_last_error();
  v56 = 0;
  if (last_error)
    sub_207CB7878(&v54, &last_error);
  else
    sub_207CAA238(&v54, "nullptr");
  if (v56 == -1)
    sub_207CA9F48();
  v58 = &v57;
  ((void (*)(void **__return_ptr, char **, __int128 *))off_24C084C40[v56])(__p, &v58, &v54);
  if (v56 != -1)
    ((void (*)(char **, __int128 *))off_24C084C28[v56])(&v58, &v54);
  if ((v38 & 0x80u) == 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if ((v38 & 0x80u) == 0)
    v28 = v38;
  else
    v28 = (std::string::size_type)__p[1];
  v29 = std::string::append(&v48, (const std::string::value_type *)v27, v28);
  v30 = (void *)v29->__r_.__value_.__r.__words[0];
  size = v29->__r_.__value_.__l.__size_;
  v49[0] = v29->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&v29->__r_.__value_.__r.__words[2] + 3);
  v32 = SHIBYTE(v29->__r_.__value_.__r.__words[2]);
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a1 = off_24C06E9E8;
  *(_BYTE *)(a1 + 8) = 5;
  v33 = (char *)operator new(0x18uLL);
  v34 = v33;
  if (v32 < 0)
  {
    sub_207CA40D8(v33, v30, size);
  }
  else
  {
    *(_QWORD *)v33 = v30;
    *((_QWORD *)v33 + 1) = size;
    *((_DWORD *)v33 + 4) = v49[0];
    *(_DWORD *)(v33 + 19) = *(_DWORD *)((char *)v49 + 3);
    v33[23] = v32;
  }
  *(_QWORD *)(a1 + 16) = v34;
  v35 = operator new(0x20uLL);
  *v35 = &unk_24C06F1C0;
  v35[1] = 0;
  v35[2] = 0;
  v35[3] = v34;
  *(_QWORD *)(a1 + 24) = v35;
  if (v32 < 0)
  {
    operator delete(v30);
    if (((char)v38 & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_53;
    }
  }
  else if (((char)v38 & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v48.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_42:
    if (((char)v40 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v47.__r_.__value_.__l.__data_);
  if (((char)v40 & 0x80000000) == 0)
  {
LABEL_43:
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v39[0]);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v46.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v45.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v44.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v43.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_48:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v42.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SHIBYTE(v52) & 0x80000000) == 0)
      return;
LABEL_62:
    operator delete((void *)v51);
    return;
  }
LABEL_61:
  operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52) < 0)
    goto LABEL_62;
}

void sub_2080ABDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  char a68;
  void *v68;
  void *v69;
  int v70;
  uint64_t v71;

  operator delete(v69);
  if (v70 < 0)
  {
    operator delete(v68);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v71 - 185) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v71 - 185) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a68 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v71 - 208));
  if ((a68 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a63);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a61 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a61 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a54 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a56);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_12:
    if ((*(char *)(v71 - 137) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a22);
  if ((*(char *)(v71 - 137) & 0x80000000) == 0)
LABEL_13:
    _Unwind_Resume(a1);
LABEL_25:
  operator delete(*(void **)(v71 - 160));
  _Unwind_Resume(a1);
}

void sub_2080AC024(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  int64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD **v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  void *v53;
  void *__p;
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v6 = operator new(0x90uLL);
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v58 = *a2;
  v59 = v8;
  *a2 = 0;
  a2[1] = 0;
  v50 = *a3;
  v51 = a3[1];
  v52 = *((_DWORD *)a3 + 8);
  v10 = (void *)*((_QWORD *)a3 + 5);
  v53 = v10;
  v11 = a3[3];
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  v12 = (void *)*((_QWORD *)a3 + 8);
  __p = v12;
  v49 = *(__int128 *)((char *)a3 + 72);
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  v13 = a3 + 6;
  v14 = (_QWORD *)*((_QWORD *)a3 + 12);
  v55 = (_QWORD **)*((_QWORD *)a3 + 11);
  v56 = v14;
  if (*((_QWORD *)a3 + 13))
  {
    v14[2] = &v56;
    *((_QWORD *)a3 + 11) = v13;
    *v13 = 0;
    *((_QWORD *)a3 + 13) = 0;
  }
  else
  {
    v55 = &v56;
  }
  *v6 = off_24C084BB0;
  v6[1] = 0;
  *((_OWORD *)v6 + 1) = v50;
  *((_OWORD *)v6 + 2) = v51;
  *((_DWORD *)v6 + 12) = v52;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  v15 = v11 - (_QWORD)v10;
  if ((void *)v11 != v10)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v15 >> 3) >= 0x186186186186187)
      sub_207CA420C();
    v16 = (char *)operator new(v11 - (_QWORD)v10);
    v7[7] = v16;
    v17 = &v16[8 * (v15 >> 3)];
    v7[9] = v17;
    memcpy(v16, v10, v15);
    v7[8] = v17;
  }
  v48 = a1;
  v7[10] = 0;
  v7[11] = 0;
  v7[12] = 0;
  v18 = v49 - (_QWORD)v12;
  if ((void *)v49 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v18 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_207CA420C();
    v19 = (char *)operator new(v49 - (_QWORD)v12);
    v7[10] = v19;
    v20 = &v19[8 * (v18 >> 3)];
    v7[12] = v20;
    memcpy(v19, v12, v18 - 3);
    v7[11] = v20;
  }
  v7[14] = 0;
  v7[15] = 0;
  v7[13] = v7 + 14;
  v21 = v55;
  if (v55 != &v56)
  {
    while (1)
    {
      v22 = v7[14];
      v23 = v7 + 14;
      if ((_QWORD *)v7[13] != v7 + 14)
      {
        v24 = (_QWORD *)v7[14];
        v25 = v7 + 14;
        if (v22)
        {
          do
          {
            v23 = v24;
            v24 = (_QWORD *)v24[1];
          }
          while (v24);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v25[2];
            v26 = *v23 == (_QWORD)v25;
            v25 = v23;
          }
          while (v26);
        }
        v27 = v21[4];
        if (v23[4] >= (unint64_t)v27)
          break;
      }
      if (v22)
        v28 = (uint64_t **)v23;
      else
        v28 = (uint64_t **)(v7 + 14);
      if (v22)
        v29 = (uint64_t **)(v23 + 1);
      else
        v29 = (uint64_t **)(v7 + 14);
      if (!*v29)
        goto LABEL_34;
LABEL_44:
      v42 = v21[1];
      if (v42)
      {
        do
        {
          v43 = (_QWORD **)v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD **)v21[2];
          v26 = *v43 == v21;
          v21 = v43;
        }
        while (!v26);
      }
      v21 = v43;
      if (v43 == &v56)
        goto LABEL_50;
    }
    v29 = (uint64_t **)(v7 + 14);
    v28 = (uint64_t **)(v7 + 14);
    if (v22)
    {
      v30 = (uint64_t *)v7[14];
      while (1)
      {
        while (1)
        {
          v28 = (uint64_t **)v30;
          v31 = v30[4];
          if (v31 <= (unint64_t)v27)
            break;
          v30 = *v28;
          v29 = v28;
          if (!*v28)
            goto LABEL_34;
        }
        if (v31 >= (unint64_t)v27)
          goto LABEL_44;
        v30 = v28[1];
        if (!v30)
        {
          v29 = v28 + 1;
          break;
        }
      }
    }
LABEL_34:
    v32 = (char *)operator new(0x78uLL);
    v33 = (uint64_t *)v32;
    v34 = v21[4];
    v32[40] = 0;
    *((_QWORD *)v32 + 4) = v34;
    v32[112] = 0;
    if (*((_BYTE *)v21 + 112))
    {
      v35 = *(_OWORD *)(v21 + 5);
      v36 = *(_OWORD *)(v21 + 7);
      *((_QWORD *)v32 + 9) = v21[9];
      *(_OWORD *)(v32 + 40) = v35;
      *(_OWORD *)(v32 + 56) = v36;
      v32[80] = 0;
      v32[104] = 0;
      if (*((_BYTE *)v21 + 104))
      {
        v38 = v21[11];
        v37 = v21[12];
        *((_QWORD *)v32 + 10) = &off_24C08A5D8;
        *((_QWORD *)v32 + 11) = v38;
        *((_QWORD *)v32 + 12) = v37;
        if (v37)
        {
          v39 = v37 + 1;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v32[104] = 1;
      }
      v32[112] = 1;
    }
    *(_QWORD *)v32 = 0;
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = v28;
    *v29 = (uint64_t *)v32;
    v41 = *(_QWORD *)v7[13];
    if (v41)
    {
      v7[13] = v41;
      v33 = *v29;
    }
    sub_207CC24B4((uint64_t *)v7[14], v33);
    ++v7[15];
    goto LABEL_44;
  }
LABEL_50:
  v7[16] = v9;
  v7[17] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v45 = __ldxr(p_shared_owners);
    while (__stxr(v45 + 1, p_shared_owners));
  }
  *v48 = v7;
  sub_2080B728C(v56);
  if (__p)
    operator delete(__p);
  if (v53)
    operator delete(v53);
  if (v8)
  {
    v46 = (unint64_t *)&v8->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2080AC44C(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a7);
  v11 = *v8;
  if (*v8)
  {
    v7[11] = v11;
    operator delete(v11);
  }
  v12 = *a3;
  if (*a3)
  {
    v7[8] = v12;
    operator delete(v12);
  }
  v13 = v7[1];
  *v7 = off_24C084A68;
  v7[1] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_2080AC66C((uint64_t)va);
  sub_207C99D78(v9 - 104);
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_2080AC4D4(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0xC8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_24C084F48;
  v6[3] = off_24C084A40;
  sub_207CA4F70((uint64_t)(v6 + 4), a2);
  v6[3] = off_24C084918;
  result = sub_207D4EC30((uint64_t)(v6 + 19), a3);
  v6[23] = *(_QWORD *)(a3 + 32);
  *((_WORD *)v6 + 96) = *(_WORD *)(a3 + 40);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_2080AC578(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v6;

  *v3 = v4;
  sub_207CA6534(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_2080AC59C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080AC5B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (0xCF3CF3CF3CF3CF3DLL * (v5 >> 3) >= 0x186186186186187)
      sub_207CA420C();
    v6 = (char *)operator new(v5);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2080AC650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080AC66C(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_2080B728C(*(_QWORD **)(a1 + 96));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2080AC6B4(void *lpsrc@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t v6;
  const void *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  __int16 *v27;
  char *v28;
  _BYTE *v29;
  _QWORD *v30;
  int v31;
  size_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  const void *v36;
  std::string *v37;
  void *v38;
  unint64_t size;
  int v40;
  char *v41;
  char *v42;
  int v43;
  size_t v44;
  unint64_t v45;
  _BYTE *v46;
  int v47;
  size_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  const void *v52;
  std::string *v53;
  _QWORD *v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  char v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  const void *v63;
  std::string *v64;
  uint64_t v65;
  void *__p[2];
  char v67;
  char v68;
  _BYTE v69[54];
  __int16 v70;
  _BYTE v71[88];
  uint64_t v72;
  uint64_t v73;
  char v74;

  v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C084AB0, (const struct __class_type_info *)&unk_24C084930, 0);
  if (!v5)
    goto LABEL_123;
  v6 = (uint64_t)v5;
  v7 = *(const void **)(a2 + 8);
  if (!v7)
    goto LABEL_19;
  v8 = (unsigned __int8 *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_24C084AB0, (const struct __class_type_info *)&unk_24C084930, 0);
  if (!v8)
LABEL_123:
    __cxa_bad_cast();
  v9 = v8[31];
  if ((v9 & 0x80u) == 0)
    v10 = v8[31];
  else
    v10 = *((_QWORD *)v8 + 2);
  v11 = *(unsigned __int8 *)(v6 + 31);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v6 + 16);
  if (v10 != v11)
    goto LABEL_19;
  v13 = (const void **)(v8 + 8);
  if (v12 >= 0)
    v14 = (unsigned __int8 *)(v6 + 8);
  else
    v14 = *(unsigned __int8 **)(v6 + 8);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)v8 + 2)))
      goto LABEL_19;
LABEL_46:
    v28 = (char *)operator new(0x38uLL);
    strcpy(v28, "The model is already running in this configuration");
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = 0;
    v29 = operator new(0x18uLL);
    sub_207CA40D8(v29, v28, 0x32uLL);
    *(_QWORD *)(a3 + 16) = v29;
    v30 = operator new(0x20uLL);
    *v30 = &unk_24C06F1C0;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v29;
    *(_QWORD *)(a3 + 24) = v30;
    operator delete(v28);
    return;
  }
  if (!v8[31])
    goto LABEL_46;
  while (*(unsigned __int8 *)v13 == *v14)
  {
    v13 = (const void **)((char *)v13 + 1);
    ++v14;
    if (!--v9)
      goto LABEL_46;
  }
LABEL_19:
  v15 = (const void **)(v6 + 8);
  sub_207CA4F70((uint64_t)v71, (uint64_t *)(*(_QWORD *)(a2 + 128) + 8));
  if (!v74)
    goto LABEL_71;
  v16 = v72;
  v17 = v73;
  if (v72 != v73)
  {
    v18 = *(_BYTE *)(v6 + 31);
    if (v18 >= 0)
      v19 = *(unsigned __int8 *)(v6 + 31);
    else
      v19 = *(_QWORD *)(v6 + 16);
    if (v18 >= 0)
      v20 = (unsigned __int8 *)(v6 + 8);
    else
      v20 = *(unsigned __int8 **)(v6 + 8);
    while (1)
    {
      v21 = *(unsigned __int8 *)(v16 + 23);
      if ((v21 & 0x80u) == 0)
        v22 = *(unsigned __int8 *)(v16 + 23);
      else
        v22 = *(_QWORD *)(v16 + 8);
      if (v22 == v19)
      {
        if ((v21 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v16, v20, *(_QWORD *)(v16 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v16 + 23))
            break;
          v23 = 0;
          while (*(unsigned __int8 *)(v16 + v23) == v20[v23])
          {
            if (v21 == ++v23)
              goto LABEL_38;
          }
        }
      }
      v16 += 24;
      if (v16 == v17)
        goto LABEL_71;
    }
  }
LABEL_38:
  if (v16 == v17)
  {
LABEL_71:
    v47 = *(char *)(v6 + 31);
    if (v47 >= 0)
      v48 = *(unsigned __int8 *)(v6 + 31);
    else
      v48 = *(_QWORD *)(v6 + 16);
    v49 = v48 + 46;
    if (v48 + 46 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v49 > 0x16)
    {
      v51 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v51 = v49 | 7;
      *(_QWORD *)&v69[8] = v48 + 46;
      *(_QWORD *)&v69[16] = (v51 + 1) | 0x8000000000000000;
      *(_QWORD *)v69 = operator new(v51 + 1);
      qmemcpy(*(void **)v69, "Unable to find the name of the configuration '", 46);
      v50 = (_BYTE *)(*(_QWORD *)v69 + 46);
      if (!v48)
      {
LABEL_84:
        v50[v48] = 0;
        v53 = std::string::append((std::string *)v69, "'.", 2uLL);
        v38 = (void *)v53->__r_.__value_.__r.__words[0];
        size = v53->__r_.__value_.__l.__size_;
        LODWORD(__p[0]) = v53->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v53->__r_.__value_.__r.__words[2] + 3);
        v40 = SHIBYTE(v53->__r_.__value_.__r.__words[2]);
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = 3;
        v41 = (char *)operator new(0x18uLL);
        v42 = v41;
        if ((v40 & 0x80000000) == 0)
        {
          *(_QWORD *)v41 = v38;
          *((_QWORD *)v41 + 1) = size;
          *((_DWORD *)v41 + 4) = __p[0];
          *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
          v41[23] = v40;
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
    else
    {
      qmemcpy(v69, "Unable to find the name of the configuration '", 46);
      v50 = &v69[46];
    }
    if (v47 >= 0)
      v52 = v15;
    else
      v52 = *v15;
    memmove(v50, v52, v48);
    goto LABEL_84;
  }
  if (espresso_plan_build_clean())
  {
    v24 = *(char *)(v6 + 31);
    if (v24 >= 0)
      v25 = *(unsigned __int8 *)(v6 + 31);
    else
      v25 = *(_QWORD *)(v6 + 16);
    v26 = v25 + 54;
    if (v25 + 54 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v26 > 0x16)
    {
      v35 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v35 = v26 | 7;
      *(_QWORD *)&v69[8] = v25 + 54;
      *(_QWORD *)&v69[16] = (v35 + 1) | 0x8000000000000000;
      *(_QWORD *)v69 = operator new(v35 + 1);
      qmemcpy(*(void **)v69, "Unable to build clean the plan for the configuration '", 54);
      v27 = (__int16 *)(*(_QWORD *)v69 + 54);
      if (!v25)
      {
LABEL_61:
        *((_BYTE *)v27 + v25) = 0;
        v37 = std::string::append((std::string *)v69, "'.", 2uLL);
        v38 = (void *)v37->__r_.__value_.__r.__words[0];
        size = v37->__r_.__value_.__l.__size_;
        LODWORD(__p[0]) = v37->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v37->__r_.__value_.__r.__words[2] + 3);
        v40 = SHIBYTE(v37->__r_.__value_.__r.__words[2]);
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = 5;
        v41 = (char *)operator new(0x18uLL);
        v42 = v41;
        if ((v40 & 0x80000000) == 0)
        {
          *(_QWORD *)v41 = v38;
          *((_QWORD *)v41 + 1) = size;
          *((_DWORD *)v41 + 4) = __p[0];
          *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
          v41[23] = v40;
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
    else
    {
      qmemcpy(v69, "Unable to build clean the plan for the configuration '", sizeof(v69));
      v27 = &v70;
    }
    if (v24 >= 0)
      v36 = v15;
    else
      v36 = *v15;
    memmove(v27, v36, v25);
    goto LABEL_61;
  }
  if (espresso_network_select_configuration())
  {
    v31 = *(char *)(v6 + 31);
    if (v31 >= 0)
      v32 = *(unsigned __int8 *)(v6 + 31);
    else
      v32 = *(_QWORD *)(v6 + 16);
    v33 = v32 + 43;
    if (v32 + 43 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v33 > 0x16)
    {
      v55 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v55 = v33 | 7;
      *(_QWORD *)&v69[8] = v32 + 43;
      *(_QWORD *)&v69[16] = (v55 + 1) | 0x8000000000000000;
      *(_QWORD *)v69 = operator new(v55 + 1);
      qmemcpy(*(void **)v69, "Unable to change network configuration to '", 43);
      v34 = (_BYTE *)(*(_QWORD *)v69 + 43);
      if (!v32)
      {
LABEL_100:
        v34[v32] = 0;
        v57 = std::string::append((std::string *)v69, "'.", 2uLL);
        v38 = (void *)v57->__r_.__value_.__r.__words[0];
        size = v57->__r_.__value_.__l.__size_;
        LODWORD(__p[0]) = v57->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v57->__r_.__value_.__r.__words[2] + 3);
        v40 = SHIBYTE(v57->__r_.__value_.__r.__words[2]);
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)a3 = off_24C06E9E8;
        *(_BYTE *)(a3 + 8) = 5;
        v41 = (char *)operator new(0x18uLL);
        v42 = v41;
        if ((v40 & 0x80000000) == 0)
        {
          *(_QWORD *)v41 = v38;
          *((_QWORD *)v41 + 1) = size;
          *((_DWORD *)v41 + 4) = __p[0];
          *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
          v41[23] = v40;
          goto LABEL_87;
        }
LABEL_86:
        sub_207CA40D8(v41, v38, size);
        goto LABEL_87;
      }
    }
    else
    {
      qmemcpy(v69, "Unable to change network configuration to '", 43);
      v34 = &v69[43];
    }
    if (v31 >= 0)
      v56 = v15;
    else
      v56 = *v15;
    memmove(v34, v56, v32);
    goto LABEL_100;
  }
  if (!espresso_plan_build())
  {
    sub_2080B88EC((uint64_t *)(a2 + 104));
    *(_OWORD *)&v69[32] = *(_OWORD *)(a2 + 32);
    sub_2080AB884((uint64_t)v69, (uint64_t)v71);
    v58 = v69[8];
    if (v69[8])
    {
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = v58;
      v59 = *(_QWORD *)&v69[24];
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&v69[16];
      *(_QWORD *)(a3 + 24) = v59;
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
    }
    else
    {
      sub_2080AD1A4(__p, v6);
      v65 = *(_QWORD *)(a2 + 8);
      *(void **)(a2 + 8) = __p[0];
      if (v65)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      v68 = 0;
      sub_207C96EE8(__p, "");
      sub_207CB5A6C(a3, &v68, (uint64_t)__p);
      if (v67 < 0)
        operator delete(__p[0]);
    }
    sub_207C9C674(v69);
    goto LABEL_92;
  }
  v43 = *(char *)(v6 + 31);
  if (v43 >= 0)
    v44 = *(unsigned __int8 *)(v6 + 31);
  else
    v44 = *(_QWORD *)(v6 + 16);
  v45 = v44 + 44;
  if (v44 + 44 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v45 <= 0x16)
  {
    qmemcpy(v69, "Unable to build plan for the configuration '", 44);
    v46 = &v69[44];
LABEL_111:
    if (v43 >= 0)
      v63 = v15;
    else
      v63 = *v15;
    memmove(v46, v63, v44);
    goto LABEL_115;
  }
  v62 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v45 | 7) != 0x17)
    v62 = v45 | 7;
  *(_QWORD *)&v69[8] = v44 + 44;
  *(_QWORD *)&v69[16] = (v62 + 1) | 0x8000000000000000;
  *(_QWORD *)v69 = operator new(v62 + 1);
  qmemcpy(*(void **)v69, "Unable to build plan for the configuration '", 44);
  v46 = (_BYTE *)(*(_QWORD *)v69 + 44);
  if (v44)
    goto LABEL_111;
LABEL_115:
  v46[v44] = 0;
  v64 = std::string::append((std::string *)v69, "'.", 2uLL);
  v38 = (void *)v64->__r_.__value_.__r.__words[0];
  size = v64->__r_.__value_.__l.__size_;
  LODWORD(__p[0]) = v64->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v64->__r_.__value_.__r.__words[2] + 3);
  v40 = SHIBYTE(v64->__r_.__value_.__r.__words[2]);
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a3 = off_24C06E9E8;
  *(_BYTE *)(a3 + 8) = 5;
  v41 = (char *)operator new(0x18uLL);
  v42 = v41;
  if (v40 < 0)
    goto LABEL_86;
  *(_QWORD *)v41 = v38;
  *((_QWORD *)v41 + 1) = size;
  *((_DWORD *)v41 + 4) = __p[0];
  *(_DWORD *)(v41 + 19) = *(_DWORD *)((char *)__p + 3);
  v41[23] = v40;
LABEL_87:
  *(_QWORD *)(a3 + 16) = v42;
  v54 = operator new(0x20uLL);
  *v54 = &unk_24C06F1C0;
  v54[1] = 0;
  v54[2] = 0;
  v54[3] = v42;
  *(_QWORD *)(a3 + 24) = v54;
  if (v40 < 0)
  {
    operator delete(v38);
    if ((v69[23] & 0x80000000) != 0)
LABEL_91:
      operator delete(*(void **)v69);
  }
  else if ((v69[23] & 0x80000000) != 0)
  {
    goto LABEL_91;
  }
LABEL_92:
  sub_207CA6534((uint64_t)v71);
}

void sub_2080ACFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_207C9C674(&a16);
    sub_207CA6534((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_207C9C674(&a16);
  sub_207CA6534((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_2080AD02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  int v25;

  operator delete(v24);
  if (v25 < 0)
    operator delete(v23);
  if (a18 < 0)
  {
    operator delete(__p);
    sub_207CA6534((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_207CA6534((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_2080AD19C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

_BYTE *sub_2080AD1A4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *result;

  v4 = operator new(0x20uLL);
  *v4 = &off_24C0848B8;
  result = v4 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_207CA40D8(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a2 + 8);
    v4[3] = *(_QWORD *)(a2 + 24);
  }
  *a1 = v4;
  return result;
}

void sub_2080AD220(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080AD234(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_2080AD244(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  *(_QWORD *)a1 = off_24C084BB0;
  espresso_plan_destroy();
  espresso_context_destroy();
  v2 = *(_QWORD **)(a1 + 104);
  if (v2 != (_QWORD *)(a1 + 112))
  {
    do
    {
      if (*((_BYTE *)v2 + 112) && *((_BYTE *)v2 + 72))
        free((void *)v2[5]);
      v10 = (_QWORD *)v2[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v2[2];
          v12 = *v11 == (_QWORD)v2;
          v2 = v11;
        }
        while (!v12);
      }
      v2 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 112));
  }
  v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_2080B728C(*(_QWORD **)(a1 + 112));
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_24C084A68;
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_2080AD374(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_2080AD244(a1);
  operator delete(v1);
}

void sub_2080AD388(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  char v17;
  char v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  char *v25;
  std::__shared_weak_count *v26;
  char v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  unint64_t v42;
  int64x2_t *v43;
  int64x2_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::string *v69;
  unint64_t size;
  void *v71;
  int v72;
  char *v73;
  char *v74;
  _QWORD *v75;
  _QWORD *exception;
  uint64_t v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t (**v80)();
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t (**v84)();
  char v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  char v88;
  __int128 v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  _OWORD v96[2];
  char v97;
  unsigned int v98;
  std::string v99;
  char v100;
  std::__shared_weak_count *v101;
  char v102;
  __int128 v103;
  int v104;
  char v105;
  __int128 v106;
  int v107;

  v6 = a1[16];
  if (!*(_BYTE *)(v6 + 152))
  {
    v84 = off_24C06E9E8;
    v85 = 0;
    v23 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    v23->~__shared_weak_count = 0;
    HIBYTE(v23->__on_zero_shared) = 0;
    v86 = v23;
    v24 = (std::__shared_weak_count *)operator new(0x20uLL);
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
LABEL_31:
    v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
    v24[1].__vftable = v23;
    v87 = v24;
    sub_2080AE02C((uint64_t)&v80, (uint64_t)a1, a2);
    v27 = v81;
    if (v81)
    {
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = v27;
      v28 = v83;
      *(_QWORD *)(a3 + 16) = v82;
      *(_QWORD *)(a3 + 24) = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      goto LABEL_36;
    }
    if (espresso_plan_execute_sync())
    {
      *(_QWORD *)&v103 = espresso_plan_get_error_info();
      *((_QWORD *)&v103 + 1) = v34;
      DWORD2(v92) = 0;
      if (v34)
        sub_207CB7878(&v91, (const char **)&v103 + 1);
      else
        sub_207CAA238(&v91, "nullptr");
      if (DWORD2(v92) == -1)
        sub_207CA9F48();
      *(_QWORD *)&v89 = &v88;
      ((void (*)(std::string *__return_ptr, __int128 *, __int128 *))off_24C084C40[DWORD2(v92)])(&v99, &v89, &v91);
      if (DWORD2(v92) != -1)
        ((void (*)(__int128 *, __int128 *))off_24C084C28[DWORD2(v92)])(&v89, &v91);
      v69 = std::string::insert(&v99, 0, "Inference failed with espresso error: ", 0x26uLL);
      v71 = (void *)v69->__r_.__value_.__r.__words[0];
      size = v69->__r_.__value_.__l.__size_;
      LODWORD(v106) = v69->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)&v106 + 3) = *(_DWORD *)((char *)&v69->__r_.__value_.__r.__words[2] + 3);
      v72 = SHIBYTE(v69->__r_.__value_.__r.__words[2]);
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      *(_QWORD *)a3 = off_24C06E9E8;
      *(_BYTE *)(a3 + 8) = 6;
      v73 = (char *)operator new(0x18uLL);
      v74 = v73;
      if (v72 < 0)
      {
        sub_207CA40D8(v73, v71, size);
      }
      else
      {
        *(_QWORD *)v73 = v71;
        *((_QWORD *)v73 + 1) = size;
        *((_DWORD *)v73 + 4) = v106;
        *(_DWORD *)(v73 + 19) = *(_DWORD *)((char *)&v106 + 3);
        v73[23] = v72;
      }
      *(_QWORD *)(a3 + 16) = v74;
      v75 = operator new(0x20uLL);
      *v75 = &unk_24C06F1C0;
      v75[1] = 0;
      v75[2] = 0;
      v75[3] = v74;
      *(_QWORD *)(a3 + 24) = v75;
      *(_BYTE *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 56) = 0;
      if (v72 < 0)
        operator delete(v71);
      goto LABEL_36;
    }
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = 0;
    v40 = operator new(0x18uLL);
    *(_QWORD *)v40 = 0;
    v40[23] = 0;
    *(_QWORD *)(a3 + 16) = v40;
    v41 = operator new(0x20uLL);
    *v41 = &unk_24C06F1C0;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v40;
    v78 = a3;
    *(_QWORD *)(a3 + 24) = v41;
    v42 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
    v90 = 0;
    v89 = 0uLL;
    sub_207CA82F8((char **)&v89, v42);
    v43 = (int64x2_t *)a1[7];
    v44 = (int64x2_t *)a1[8];
    if (v43 == v44)
    {
LABEL_91:
      v68 = v90;
      *(_OWORD *)(v78 + 32) = v89;
      *(_QWORD *)(v78 + 48) = v68;
      *(_BYTE *)(v78 + 56) = 1;
LABEL_36:
      v80 = off_24C06E9E8;
      v31 = v83;
      if (v83)
      {
        v32 = (unint64_t *)&v83->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      goto LABEL_49;
    }
    while (1)
    {
      v45 = v43->i64[0];
      v46 = v43[5].u64[0];
      v47 = v43[5].u64[1];
      v49 = v43[6].u64[0];
      v48 = v43[6].u64[1];
      v50 = v43[7].u64[1];
      v79 = v43[8];
      v51 = v43[9].i64[0];
      if (v43[10].i32[0] != 65568
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 692, (uint64_t)"results.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32", 53, (uint64_t)"EspressoBufferToConstDataView32f currently expects FLOAT32 storage. Other buffer types not yet implemented.", 107, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if (HIDWORD(v50))
        v52 = 0;
      else
        v52 = HIDWORD(v46) == 0;
      if (!v52 || HIDWORD(v47) != 0 || HIDWORD(v49) != 0 || HIDWORD(v48) != 0)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      *(_QWORD *)&v106 = __PAIR64__(v46, v50);
      *((_QWORD *)&v106 + 1) = __PAIR64__(v49, v47);
      v107 = v48;
      LODWORD(v103) = 1;
      DWORD1(v103) = v50;
      *((int32x2_t *)&v103 + 1) = vmovn_s64(v79);
      v104 = v51;
      v105 = 1;
      v99.__r_.__value_.__s.__data_[0] = 0;
      v100 = 0;
      sub_20809F1D0((uint64_t)&v91, v45, &v106, &v103, &dword_208266D34, (uint64_t)&v99);
      if (!v100)
        goto LABEL_79;
      v56 = (std::__shared_weak_count *)v99.__r_.__value_.__r.__words[2];
      if (!v99.__r_.__value_.__r.__words[2])
        goto LABEL_79;
      v57 = (unint64_t *)(v99.__r_.__value_.__r.__words[2] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        v59 = *((_QWORD *)&v89 + 1);
        if (*((_QWORD *)&v89 + 1) < v90)
        {
LABEL_80:
          v60 = v91;
          v61 = v92;
          v62 = v93;
          *(_DWORD *)(v59 + 48) = v94;
          *(_OWORD *)(v59 + 16) = v61;
          *(_OWORD *)(v59 + 32) = v62;
          *(_OWORD *)v59 = v60;
          *(_BYTE *)(v59 + 56) = 0;
          *(_BYTE *)(v59 + 112) = 0;
          if (v97)
          {
            *(_QWORD *)(v59 + 56) = off_24C06E878;
            *(_OWORD *)(v59 + 64) = v95;
            v95 = 0uLL;
            v63 = *(_OWORD *)((char *)v96 + 14);
            *(_OWORD *)(v59 + 80) = v96[0];
            *(_OWORD *)(v59 + 94) = v63;
            *(_BYTE *)(v59 + 112) = 1;
          }
          v64 = (char *)(v59 + 120);
          goto LABEL_85;
        }
      }
      else
      {
LABEL_79:
        v59 = *((_QWORD *)&v89 + 1);
        if (*((_QWORD *)&v89 + 1) < v90)
          goto LABEL_80;
      }
      v64 = sub_207CA84A8((char **)&v89, (uint64_t)&v91);
LABEL_85:
      *((_QWORD *)&v89 + 1) = v64;
      if (v97)
      {
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        if (*((_QWORD *)&v95 + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
      }
      v43 = (int64x2_t *)((char *)v43 + 168);
      if (v43 == v44)
        goto LABEL_91;
    }
  }
  v7 = *(_BYTE **)(v6 + 128);
  v8 = *(_BYTE **)(v6 + 136);
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 2) == (uint64_t)(a2[1] - *a2) >> 7)
  {
    v77 = a3;
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        if (v7[25] && (v7[12] || v7[20] || v7[24]))
        {
          v25 = (char *)operator new(0x50uLL);
          strcpy(v25, "Espresso inputs cannot have pre processing arguments and use direct bind.");
          v84 = off_24C06E9E8;
          v85 = 3;
          v15 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
          sub_207CA40D8(v15, v25, 0x49uLL);
          a3 = v77;
          v86 = v15;
          v26 = (std::__shared_weak_count *)operator new(0x20uLL);
          goto LABEL_45;
        }
        v10 = *a2 + (v9 << 7);
        *(_QWORD *)&v91 = v9;
        BYTE8(v91) = 0;
        v98 = -1;
        v11 = *(unsigned int *)(v10 + 120);
        if ((_DWORD)v11 != -1)
        {
          ((void (*)(uint64_t (***)(), char *))off_24C084EA0[v11])(&v80, (char *)&v91 + 8);
          v98 = v11;
        }
        if (v7[25])
        {
          sub_2080A1E90((uint64_t)&v91 + 8, (uint64_t)&v99);
          if (!v102)
          {
            v20 = (char *)operator new(0x40uLL);
            strcpy(v20, "Use direct bind requires CVPixelBuffer backed image (CVImage).");
            v84 = off_24C06E9E8;
            v85 = 3;
            v15 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
            sub_207CA40D8(v15, v20, 0x3EuLL);
            v86 = v15;
            v16 = (std::__shared_weak_count *)operator new(0x20uLL);
            v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
            v16->__shared_owners_ = 0;
            v16->__shared_weak_owners_ = 0;
            v16[1].__vftable = v15;
            v87 = v16;
            operator delete(v20);
            v18 = 0;
            v17 = 3;
            v19 = v98;
            if (v98 == -1)
              goto LABEL_23;
LABEL_22:
            ((void (*)(std::string *, char *))off_24C084E88[v19])(&v99, (char *)&v91 + 8);
            goto LABEL_23;
          }
          v12 = v101;
          if (v101)
          {
            v13 = (unint64_t *)&v101->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        v84 = off_24C06E9E8;
        v85 = 0;
        v15 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
        v15->~__shared_weak_count = 0;
        HIBYTE(v15->__on_zero_shared) = 0;
        v86 = v15;
        v16 = (std::__shared_weak_count *)operator new(0x20uLL);
        v17 = 0;
        v16->__shared_owners_ = 0;
        v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
        v16->__shared_weak_owners_ = 0;
        v16[1].__vftable = v15;
        v18 = 1;
        v87 = v16;
        v19 = v98;
        if (v98 != -1)
          goto LABEL_22;
LABEL_23:
        v98 = -1;
        if ((v18 & 1) == 0)
        {
          a3 = v77;
          goto LABEL_46;
        }
        v84 = off_24C06E9E8;
        v21 = (unint64_t *)&v16->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v7 += 28;
        ++v9;
      }
      while (v7 != v8);
    }
    v84 = off_24C06E9E8;
    v85 = 0;
    v23 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    v23->~__shared_weak_count = 0;
    HIBYTE(v23->__on_zero_shared) = 0;
    v86 = v23;
    v24 = (std::__shared_weak_count *)operator new(0x20uLL);
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    a3 = v77;
    goto LABEL_31;
  }
  v25 = (char *)operator new(0x38uLL);
  strcpy(v25, "Num of Espresso inputs do not match data inputs.");
  v84 = off_24C06E9E8;
  v85 = 3;
  v15 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  sub_207CA40D8(v15, v25, 0x30uLL);
  v86 = v15;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
LABEL_45:
  v16 = v26;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v15;
  v87 = v26;
  operator delete(v25);
  v17 = 3;
LABEL_46:
  *(_QWORD *)a3 = off_24C06E9E8;
  *(_BYTE *)(a3 + 8) = v17;
  v35 = (unint64_t *)&v16->__shared_owners_;
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v16;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 56) = 0;
LABEL_49:
  v84 = off_24C06E9E8;
  v37 = v87;
  if (v87)
  {
    v38 = (unint64_t *)&v87->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_2080ADD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;
  void *v52;
  int v53;

  operator delete(v52);
  if (v53 < 0)
  {
    operator delete(v51);
    sub_207C9C674(&a16);
    sub_207C9C674(&a20);
    _Unwind_Resume(a1);
  }
  sub_207C9C674(&a16);
  sub_207C9C674(&a20);
  _Unwind_Resume(a1);
}

void sub_2080AE02C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  _BOOL4 v8;
  BOOL v9;
  int v10;
  _BOOL4 v11;
  unsigned int v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  void *v26;
  unint64_t size;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  std::string *v49;
  unint64_t v50;
  void *v51;
  int v52;
  char *v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  char v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  __int128 v68;
  int v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  __int16 v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  __int16 v91;
  unint64_t v92;
  char *v93;
  _BYTE *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t *v99;
  __int128 v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  __int128 v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  unint64_t v116;
  int v117;
  uint64_t **v118;
  uint64_t *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  int v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  int v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t **v176;
  __int128 v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  __int16 v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  __int128 v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  int v190;
  __int16 v191;
  unint64_t v192;
  __int128 v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  __int16 v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  char v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  int v208;
  __int16 v209;
  unint64_t v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  __int16 v218;
  unint64_t v219;
  char v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const void *v228;
  int32x4_t v229;
  int v230;
  _DWORD *v231;
  _DWORD *v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _DWORD *v249;
  _DWORD *v250;
  _DWORD *v251;
  _DWORD *v252;
  _DWORD *v253;
  _DWORD *v254;
  _DWORD *v255;
  _DWORD *v256;
  int v257;
  _DWORD *v258;
  _DWORD *v259;
  _DWORD *v260;
  _DWORD *v261;
  _DWORD *v262;
  int v263;
  _DWORD *v264;
  _DWORD *v265;
  _DWORD *v266;
  _DWORD *v267;
  _DWORD *v268;
  _DWORD *v269;
  _DWORD *v270;
  _DWORD *v271;
  _DWORD *v272;
  _DWORD *v273;
  _DWORD *v274;
  _DWORD *v275;
  _DWORD *v276;
  _DWORD *v277;
  int v278;
  int v279;
  int v280;
  _DWORD *v281;
  _DWORD *v282;
  _DWORD *v283;
  _DWORD *v284;
  _DWORD *v285;
  _DWORD *v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _DWORD *v295;
  _DWORD *v296;
  int v297;
  int v298;
  _DWORD *v299;
  _DWORD *v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _DWORD *v310;
  _DWORD *v311;
  int v312;
  _DWORD *v313;
  _DWORD *v314;
  _DWORD *v315;
  _DWORD *v316;
  _DWORD *v317;
  _DWORD *v318;
  _DWORD *v319;
  _DWORD *v320;
  int v321;
  int v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _DWORD *v328;
  _DWORD *v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  _DWORD *v333;
  _DWORD *v334;
  _DWORD *v335;
  _DWORD *v336;
  _DWORD *v337;
  _DWORD *v338;
  _DWORD *v339;
  _DWORD *v340;
  int v341;
  int v342;
  _DWORD *v343;
  _DWORD *v344;
  int v345;
  char *v346;
  char *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  unint64_t v352;
  unint64_t v353;
  unsigned __int8 *v354;
  uint64_t v355;
  uint64_t *v356;
  int v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t *v361;
  uint64_t *v362;
  unint64_t v363;
  uint64_t **v364;
  unint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t *v368;
  vImage_Buffer *v369;
  int v370;
  uint64_t *v371;
  unint64_t v372;
  uint64_t *v373;
  uint64_t **v374;
  unint64_t v375;
  char *v376;
  uint64_t v377;
  uint64_t *v378;
  _OWORD *v379;
  __int128 v380;
  int v381;
  __int128 v382;
  uint64_t **v383;
  int v384;
  __int128 v385;
  uint64_t **v386;
  unint64_t v387;
  void *v388;
  uint64_t v389;
  uint64_t *v390;
  unint64_t *v391;
  unint64_t v392;
  uint64_t v393;
  int v394;
  __int16 v395;
  unint64_t v396;
  unsigned int v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  int v401;
  __int16 v402;
  unint64_t v403;
  char v404;
  unint64_t *v405;
  unint64_t v406;
  uint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  unint64_t v415;
  __int128 v416;
  unint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  int v420;
  __int16 v421;
  unint64_t v422;
  int32x4_t v423;
  int v424;
  char *v425;
  char *v426;
  size_t v427;
  int v428;
  int v429;
  char *v430;
  char *v431;
  int v432;
  unsigned __int8 v433;
  BOOL v434;
  uint64_t v435;
  uint64_t j;
  unsigned __int8 v437;
  unsigned __int8 v438;
  uint64_t k;
  uint64_t v440;
  unsigned __int8 v441;
  int v442;
  unint64_t *v443;
  unint64_t v444;
  float v445;
  int32x4_t v446;
  int v447;
  _BYTE *v448;
  float *v449;
  int v450;
  int v451;
  float *v452;
  _BYTE *v453;
  int v454;
  uint64_t v455;
  int v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  float *v466;
  float *v467;
  float *v468;
  float *v469;
  int v470;
  float *v471;
  float *v472;
  float *v473;
  float *v474;
  float *v475;
  _BYTE *v476;
  int v477;
  float *v478;
  float *v479;
  float *v480;
  float *v481;
  float *v482;
  _BYTE *v483;
  float *v484;
  float *v485;
  int v486;
  _BYTE *v487;
  int v488;
  int v489;
  float *v490;
  float *v491;
  float *v492;
  int v493;
  _BYTE *v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _BYTE *v501;
  float *v502;
  int v503;
  int v504;
  float *v505;
  int v506;
  _BYTE *v507;
  int v508;
  int v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  float *v514;
  int v515;
  float *v516;
  float *v517;
  _BYTE *v518;
  float *v519;
  float *v520;
  int v521;
  _BYTE *v522;
  int v523;
  float *v524;
  int v525;
  float *v526;
  float *v527;
  _BYTE *v528;
  float *v529;
  float *v530;
  int v531;
  _BYTE *v532;
  int v533;
  int v534;
  uint64_t v535;
  float *v536;
  int v537;
  _BYTE *v538;
  unsigned int v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  char *v548;
  size_t v549;
  uint64_t v550;
  char *v551;
  size_t v552;
  uint64_t v553;
  uint64_t v554;
  size_t v555;
  const void *v556;
  int32x4_t v557;
  int v558;
  int v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  _BYTE *v568;
  _BYTE *v569;
  int v570;
  int v571;
  _BYTE *v572;
  _BYTE *v573;
  int v574;
  _BYTE *v575;
  _BYTE *v576;
  int v577;
  int v578;
  _BYTE *v579;
  _BYTE *v580;
  int v581;
  _BYTE *v582;
  _BYTE *v583;
  int v584;
  int v585;
  int v586;
  int v587;
  _BYTE *v588;
  _BYTE *v589;
  int v590;
  int m;
  int v592;
  _BYTE *v593;
  _BYTE *v594;
  int v595;
  int v596;
  int n;
  _BYTE *v598;
  _BYTE *v599;
  int v600;
  int v601;
  _BYTE *v602;
  _BYTE *v603;
  int v604;
  int v605;
  int ii;
  int v607;
  _BYTE *v608;
  _BYTE *v609;
  int v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  char *v614;
  char *v615;
  int v616;
  int jj;
  _BYTE *v618;
  _BYTE *v619;
  int v620;
  int v621;
  _BYTE *v622;
  _BYTE *v623;
  int v624;
  _BYTE *v625;
  _BYTE *v626;
  int v627;
  int v628;
  int v629;
  int v630;
  _BYTE *v631;
  _BYTE *v632;
  int v633;
  int kk;
  int v635;
  _BYTE *v636;
  _BYTE *v637;
  int v638;
  int v639;
  int v640;
  int v641;
  _BYTE *v642;
  _BYTE *v643;
  int v644;
  _BYTE *v645;
  _BYTE *v646;
  int v647;
  int v648;
  _BYTE *v649;
  _BYTE *v650;
  unint64_t *v651;
  unint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  uint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  unint64_t *v664;
  unint64_t v665;
  uint64_t v666;
  int v667;
  __int16 v668;
  unint64_t v669;
  unint64_t *v670;
  unint64_t v671;
  unint64_t *v672;
  unint64_t v673;
  __int128 v674;
  unint64_t *v675;
  unint64_t v676;
  _BYTE *v677;
  unint64_t *v678;
  unint64_t v679;
  std::__shared_weak_count *v680;
  unint64_t *v681;
  unint64_t v682;
  uint64_t v683;
  std::__shared_weak_count *v684;
  unint64_t *v685;
  unint64_t v686;
  _BYTE *v687;
  std::__shared_weak_count *v688;
  _BYTE *v689;
  std::__shared_weak_count *v690;
  unint64_t *v691;
  unint64_t v692;
  std::__shared_weak_count *v693;
  unint64_t *v694;
  unint64_t v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  int32x4_t v702;
  int v703;
  char *v704;
  char *v705;
  int v706;
  char *v707;
  int v708;
  char *v709;
  char *v710;
  int v711;
  size_t v712;
  uint64_t v713;
  char *v714;
  unsigned __int8 v715;
  BOOL v716;
  uint64_t i3;
  uint64_t v718;
  unsigned __int8 v719;
  unsigned __int8 v720;
  uint64_t i4;
  uint64_t v722;
  unsigned __int8 v723;
  int v724;
  int v725;
  unsigned __int8 v726;
  BOOL v727;
  uint64_t i5;
  uint64_t v729;
  unsigned __int8 v730;
  int32x4_t v731;
  int v732;
  char *v733;
  char *v734;
  int v735;
  int v736;
  char *v737;
  char *v738;
  unsigned __int8 v739;
  BOOL v740;
  uint64_t v741;
  uint64_t i;
  unsigned __int8 v743;
  int v744;
  char *v745;
  char *v746;
  char *v747;
  char *v748;
  int v749;
  unint64_t *v750;
  unint64_t v751;
  __int128 v752;
  unint64_t *v753;
  unint64_t v754;
  _BYTE *v755;
  int32x4_t v756;
  int v757;
  char *v758;
  char *v759;
  int v760;
  int v761;
  char *v762;
  char *v763;
  unsigned __int8 v764;
  BOOL v765;
  uint64_t v766;
  uint64_t i1;
  unsigned __int8 v768;
  char *v769;
  int v770;
  uint64_t v771;
  uint64_t v772;
  char *v773;
  int v774;
  int v775;
  char *v776;
  char *v777;
  char *v778;
  char *v779;
  unsigned __int8 v780;
  BOOL v781;
  uint64_t v782;
  uint64_t i2;
  unsigned __int8 v784;
  int mm;
  int v786;
  _BYTE *v787;
  _BYTE *v788;
  int nn;
  int v790;
  _BYTE *v791;
  _BYTE *v792;
  unint64_t *v793;
  std::__shared_weak_count *v794;
  unint64_t *v795;
  unint64_t v796;
  std::__shared_weak_count *v797;
  unint64_t *v798;
  unint64_t v799;
  std::__shared_weak_count *v800;
  uint64_t v801;
  unint64_t *v802;
  unint64_t v803;
  __int128 v804;
  unint64_t *v805;
  unint64_t v806;
  unint64_t *v807;
  unint64_t v808;
  unint64_t v809;
  unint64_t v810;
  unint64_t v811;
  unint64_t v812;
  unint64_t v813;
  __CVBuffer *v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  unint64_t v818;
  IOSurfaceRef IOSurface;
  std::__shared_weak_count *v820;
  unint64_t *v821;
  unint64_t v822;
  int v823;
  __int128 v824;
  unint64_t *v825;
  unint64_t v826;
  unint64_t v827;
  unint64_t v828;
  unint64_t v829;
  unint64_t v830;
  int v831;
  char *v832;
  char *v833;
  int v834;
  char *v835;
  size_t v836;
  const void *v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  __int128 v841;
  unint64_t *v842;
  unint64_t v843;
  uint64_t (***v844)();
  std::__shared_weak_count *v845;
  unint64_t *v846;
  unint64_t v847;
  unint64_t *v848;
  unint64_t v849;
  unint64_t v850;
  unint64_t v851;
  unint64_t v852;
  unint64_t v853;
  unint64_t v854;
  __CVBuffer *v855;
  std::__shared_weak_count *v856;
  unint64_t *v857;
  unint64_t v858;
  unint64_t v859;
  IOSurfaceRef v860;
  std::__shared_weak_count *v861;
  unint64_t *v862;
  unint64_t v863;
  int v864;
  void *v865;
  std::__shared_weak_count *v866;
  unint64_t *v867;
  unint64_t v868;
  unint64_t v869;
  unint64_t v870;
  unint64_t v871;
  unint64_t v872;
  char *v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t v876;
  std::__shared_weak_count *v877;
  unint64_t *v878;
  unint64_t v879;
  std::__shared_weak_count *v880;
  unint64_t *v881;
  unint64_t v882;
  uint64_t v883;
  std::__shared_weak_count *v884;
  unint64_t *v885;
  unint64_t v886;
  unint64_t v887;
  unint64_t v888;
  unint64_t v889;
  unint64_t v890;
  std::__shared_weak_count *v891;
  unint64_t *v892;
  unint64_t v893;
  unint64_t v894;
  unint64_t v895;
  std::__shared_weak_count *v896;
  unint64_t *v897;
  unint64_t v898;
  unint64_t v899;
  unint64_t v900;
  std::__shared_weak_count *v901;
  unint64_t *v902;
  unint64_t v903;
  int v904;
  std::__shared_weak_count *v905;
  unint64_t *v906;
  unint64_t v907;
  std::__shared_weak_count *v908;
  unint64_t *v909;
  unint64_t v910;
  unint64_t *v911;
  void *v912;
  const void *v913;
  uint64_t v914;
  uint64_t v915;
  std::__shared_weak_count *v916;
  unint64_t *v917;
  unint64_t v918;
  std::__shared_weak_count *v919;
  unint64_t *v920;
  unint64_t v921;
  unint64_t *v922;
  unint64_t *v923;
  unint64_t v924;
  std::__shared_weak_count *v925;
  unint64_t *v926;
  unint64_t v927;
  unint64_t v928;
  unint64_t *v929;
  _QWORD *v930;
  char v931;
  std::__shared_weak_count *v932;
  unint64_t *v933;
  unint64_t v934;
  std::__shared_weak_count *v935;
  unint64_t *v936;
  unint64_t v937;
  std::__shared_weak_count *v938;
  unint64_t *v939;
  unint64_t v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  unint64_t v943;
  std::__shared_weak_count *v944;
  unint64_t *v945;
  unint64_t v946;
  void *v947;
  std::__shared_weak_count *v948;
  unint64_t *v949;
  unint64_t v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  unint64_t v958;
  uint64_t v959;
  std::__shared_weak_count *v960;
  unint64_t *v961;
  unint64_t v962;
  unint64_t v963;
  unint64_t v964;
  std::__shared_weak_count *v965;
  unint64_t *v966;
  unint64_t v967;
  int v968;
  std::__shared_weak_count *v969;
  unint64_t *v970;
  unint64_t v971;
  std::__shared_weak_count *v972;
  unint64_t *v973;
  unint64_t v974;
  unint64_t *v975;
  unint64_t v976;
  std::__shared_weak_count *v977;
  unint64_t *v978;
  unint64_t v979;
  uint64_t v980;
  _BYTE *v981;
  _QWORD *v982;
  uint64_t v983;
  const char *v984;
  uint64_t v985;
  std::logic_error *exception;
  unsigned __int8 v987;
  std::string *v988;
  uint64_t *v989;
  uint64_t v990;
  std::string::size_type v991;
  std::string *v992;
  uint64_t v993;
  int v994;
  size_t v995;
  unint64_t v996;
  std::logic_error *v997;
  unsigned __int8 v998;
  std::string *v999;
  uint64_t *v1000;
  uint64_t v1001;
  std::string::size_type v1002;
  std::string *v1003;
  uint64_t v1004;
  int v1005;
  size_t v1006;
  unint64_t v1007;
  std::__shared_weak_count *v1008;
  unint64_t *v1009;
  unint64_t v1010;
  unint64_t v1011;
  std::__shared_weak_count *v1012;
  unint64_t *v1013;
  unint64_t v1014;
  unint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  std::string::size_type v1018;
  std::string *v1019;
  std::__shared_weak_count *v1020;
  unint64_t *v1021;
  unint64_t v1022;
  unint64_t v1023;
  std::__shared_weak_count *v1024;
  unint64_t *v1025;
  unint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  std::string::size_type v1030;
  std::string *v1031;
  void *v1032;
  void *v1033;
  uint64_t v1034;
  uint64_t v1035;
  std::string *v1036;
  uint64_t v1037;
  uint64_t v1038;
  std::string *v1039;
  std::string *v1040;
  std::string *v1041;
  __int128 v1042;
  __int128 *v1043;
  __int128 v1044;
  __int128 *v1045;
  __int128 v1046;
  int64x2_t v1047;
  int8x16_t v1048;
  std::string::size_type v1049;
  __int128 v1050;
  int64x2_t v1051;
  int8x16_t v1052;
  std::string::size_type v1053;
  std::string::size_type v1054;
  void *v1055;
  std::string::size_type v1056;
  void *v1057;
  uint64_t v1058;
  const char *v1059;
  void (__cdecl *v1060)(std::__shared_weak_count *__hidden);
  uint64_t **v1061;
  _DWORD *v1062;
  int v1063;
  _DWORD *v1064;
  _DWORD *v1065;
  uint64_t v1066;
  unint64_t v1067;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  int v1072;
  int v1073;
  int v1074;
  uint64_t v1075;
  unint64_t v1077;
  _DWORD *v1078;
  char *v1079;
  uint64_t v1080;
  _DWORD *v1081;
  char *v1082;
  int v1083;
  _DWORD *v1084;
  uint64_t v1085;
  int v1086;
  _DWORD *v1087;
  uint64_t v1088;
  int v1089;
  char *v1090;
  _DWORD *v1091;
  uint64_t v1092;
  float *v1093;
  char *v1094;
  uint64_t v1095;
  _DWORD *v1096;
  int v1097;
  _BYTE *v1098;
  uint64_t v1099;
  uint64_t v1100;
  _DWORD *v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  _DWORD *v1107;
  uint64_t v1108;
  int v1109;
  int v1110;
  int v1111;
  uint64_t v1112;
  int v1114;
  int v1115;
  uint64_t v1116;
  uint64_t v1117;
  int v1118;
  char *v1119;
  uint64_t v1120;
  _DWORD *v1121;
  uint64_t v1122;
  int v1123;
  uint64_t v1124;
  int v1125;
  int v1126;
  int v1127;
  int64x2_t v1128;
  int64x2_t v1129;
  int64x2_t v1130;
  unsigned int v1131;
  __int128 v1132;
  uint64_t v1133;
  int v1134;
  uint64_t v1135;
  int v1136;
  __int16 v1137;
  char v1138;
  int64x2_t width;
  int64x2_t v1140;
  int64x2_t v1141;
  unsigned int v1142;
  __int128 v1143;
  uint64_t v1144;
  int v1145;
  uint64_t v1146;
  int v1147;
  __int16 v1148;
  char v1149;
  uint64_t (**v1150)();
  char v1151;
  _BYTE *v1152;
  std::__shared_weak_count *v1153;
  _BYTE v1154[48];
  unsigned int v1155;
  uint64_t v1156;
  std::__shared_weak_count *v1157;
  uint64_t v1158;
  int v1159;
  uint64_t v1160;
  int v1161;
  __int16 v1162;
  unsigned __int8 v1163;
  unint64_t v1164;
  uint64_t (**v1165)();
  void *v1166;
  std::__shared_weak_count *v1167;
  __int128 v1168;
  uint64_t v1169;
  void *__dst[2];
  _BYTE v1171[24];
  uint64_t v1172;
  char v1173;
  __int128 v1174;
  _BYTE v1175[24];
  uint64_t v1176;
  _BYTE __src[48];
  char v1178;
  char v1179;
  char *v1180;
  _DWORD *v1181;
  uint64_t v1182;
  void **v1183;
  __int128 **v1184;
  unint64_t ***v1185;
  unint64_t **v1186;
  unint64_t *v1187;
  char v1188;
  __int128 *v1189;
  __int128 v1190;
  uint64_t v1191;
  void *__p[2];
  uint64_t v1193;
  unint64_t v1194;
  int64x2_t v1195;
  _BYTE v1196[40];
  _BYTE v1197[24];
  uint64_t v1198;
  int v1199;
  uint64_t v1200;
  int v1201;
  __int16 v1202;
  char v1203;
  int64x2_t v1204;
  _BYTE v1205[40];
  _BYTE v1206[24];
  uint64_t v1207;
  int v1208;
  uint64_t v1209;
  int v1210;
  __int16 v1211;
  char v1212;
  int64x2_t v1213;
  _BYTE v1214[40];
  __int128 v1215;
  std::__shared_weak_count *v1216;
  uint64_t v1217;
  int v1218;
  uint64_t v1219;
  int v1220;
  __int16 v1221;
  char v1222;
  _BYTE pixelBuffer[56];
  __int128 v1224;
  std::__shared_weak_count *v1225;
  uint64_t v1226;
  int v1227;
  uint64_t v1228;
  int v1229;
  __int16 v1230;
  char v1231;
  int64x2_t v1232;
  int64x2_t v1233;
  int64x2_t v1234;
  unsigned int v1235;
  uint64_t (**v1236)();
  __int128 v1237;
  uint64_t v1238;
  int v1239;
  uint64_t v1240;
  int v1241;
  __int16 v1242;
  char v1243;
  int64x2_t v1244;
  int64x2_t v1245;
  int64x2_t v1246;
  unsigned int v1247;
  uint64_t (**v1248)();
  __int128 v1249;
  uint64_t v1250;
  int v1251;
  uint64_t v1252;
  int v1253;
  __int16 v1254;
  char v1255;
  int64x2_t v1256[3];
  unsigned int v1257;
  uint64_t (**v1258)();
  __int128 v1259;
  __int128 v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  int v1269;
  int64x2_t v1270;
  int64x2_t v1271;
  int64x2_t v1272;
  unsigned int v1273;
  uint64_t (**v1274)();
  __int128 v1275;
  uint64_t v1276;
  int v1277;
  uint64_t v1278;
  int v1279;
  __int16 v1280;
  char v1281;
  int v1282;
  int64x2_t v1283;
  int64x2_t v1284;
  int64x2_t v1285;
  unsigned int v1286;
  uint64_t (**v1287)();
  __int128 v1288;
  uint64_t v1289;
  int v1290;
  uint64_t v1291;
  int v1292;
  __int16 v1293;
  char v1294;
  int v1295;
  _BYTE v1296[25];
  std::string v1297;
  std::string v1298;
  std::string v1299;
  std::string v1300;
  std::string __s;
  _BYTE v1302[80];
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  uint64_t v1308;
  _BYTE v1309[80];
  __int128 v1310;
  __int128 v1311;
  __int128 v1312;
  __int128 v1313;
  __int128 v1314;
  uint64_t v1315;
  _BYTE v1316[56];
  std::string::size_type v1317;
  int v1318;
  uint64_t v1319;

  v1319 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 56) - *(_QWORD *)(*(_QWORD *)(a2 + 128) + 48);
  if (!v3)
    goto LABEL_1647;
  v4 = 0;
  v1067 = 0xCF3CF3CF3CF3CF3DLL * (v3 >> 3);
  v1062 = (_DWORD *)(a2 + 48);
  v1061 = (uint64_t **)(a2 + 112);
  v1058 = 98;
  v1059 = "Espresso execution for non-float input for given color format not yet implemented or not supported";
  do
  {
    v1164 = v4;
    sub_2080A1E90(*a3 + (v4 << 7), (uint64_t)v1154);
    v5 = v1155;
    if (((v1155 >> 1) & 1) + (v1155 & 1) + ((v1155 >> 2) & 1) + ((v1155 >> 3) & 1) > 1
      || ((v1155 >> 4) & 1) + ((v1155 >> 5) & 1) + ((v1155 >> 6) & 1) >= 2)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 651, (uint64_t)"input.Format().IsValidFormat()", 30, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_1650;
      }
      v5 = v1155;
    }
    *(_OWORD *)&v1309[20] = *(_OWORD *)&v1154[20];
    *(_DWORD *)&v1309[36] = *(_DWORD *)&v1154[36];
    *(_OWORD *)v1309 = *(_OWORD *)v1154;
    *(_DWORD *)&v1309[16] = *(_DWORD *)&v1154[16];
    *(_DWORD *)&v1309[40] = v5;
    v8 = *(_DWORD *)&v1154[16] < 2u && *(_DWORD *)&v1154[12] < 2u;
    if (v8)
    {
      v9 = *(_DWORD *)&v1309[8] < 2u;
      v10 = *(_DWORD *)&v1309[24];
      if (!*(_DWORD *)&v1309[24])
        goto LABEL_32;
    }
    else
    {
      v9 = 0;
      v10 = *(_DWORD *)&v1309[24];
      if (!*(_DWORD *)&v1309[24])
        goto LABEL_32;
    }
    v11 = *(_DWORD *)&v1309[4] == 0;
    if (!*(_DWORD *)&v1309[4])
      v9 = 1;
    if (v9)
      goto LABEL_26;
    v11 = *(_DWORD *)&v1309[28] < (*(_DWORD *)&v1309[4] * v10);
    if (*(_DWORD *)&v1309[28] < (*(_DWORD *)&v1309[4] * v10))
      LOBYTE(v8) = 1;
    if (v8
      || (v11 = *(_DWORD *)&v1309[32] < (*(_DWORD *)&v1309[8] * *(_DWORD *)&v1309[28]),
          *(_DWORD *)&v1154[16] < 2u)
      || *(_DWORD *)&v1309[32] < (*(_DWORD *)&v1309[8] * *(_DWORD *)&v1309[28]))
    {
LABEL_26:
      if (!v11)
        goto LABEL_27;
    }
    else if (*(_DWORD *)&v1309[36] >= (*(_DWORD *)&v1309[32] * *(_DWORD *)&v1154[12]))
    {
LABEL_27:
      if (sub_2080A10F0(v1309, 16))
        goto LABEL_33;
    }
LABEL_32:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 652, (uint64_t)"ValidViewStructure<uint8_t>(Structure(input))", 45, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_1650:
      abort();
    }
LABEL_33:
    v12 = v1155;
    v1077 = v4;
    if ((v1155 & 0xF) == 0 || (v1155 & 0x70) == 0)
    {
      sub_207C9F428(&v1164);
      v23 = std::string::insert((std::string *)v1302, 0, "Invalid input: The given view for input ", 0x28uLL);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      *(_QWORD *)&v1309[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
      *(_OWORD *)v1309 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append((std::string *)v1309, " requires both a color format and type definition in its format flags.", 0x46uLL);
      v26 = (void *)v25->__r_.__value_.__r.__words[0];
      size = v25->__r_.__value_.__l.__size_;
      v1256[0].i32[0] = v25->__r_.__value_.__r.__words[2];
      *(__int32 *)((char *)v1256[0].i32 + 3) = *(_DWORD *)((char *)&v25->__r_.__value_.__r.__words[2] + 3);
      v28 = SHIBYTE(v25->__r_.__value_.__r.__words[2]);
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)a1 = off_24C06E9E8;
      *(_BYTE *)(a1 + 8) = 3;
      v29 = (char *)operator new(0x18uLL);
      v30 = v29;
      if (v28 < 0)
      {
        sub_207CA40D8(v29, v26, size);
      }
      else
      {
        *(_QWORD *)v29 = v26;
        *((_QWORD *)v29 + 1) = size;
        *((_DWORD *)v29 + 4) = v1256[0].i32[0];
        *(_DWORD *)(v29 + 19) = *(__int32 *)((char *)v1256[0].i32 + 3);
        v29[23] = v28;
      }
      *(_QWORD *)(a1 + 16) = v30;
      v41 = operator new(0x20uLL);
      *v41 = &unk_24C06F1C0;
      v41[1] = 0;
      v41[2] = 0;
      v41[3] = v30;
      *(_QWORD *)(a1 + 24) = v41;
      if (v28 < 0)
      {
        operator delete(v26);
        if ((v1309[23] & 0x80000000) == 0)
        {
LABEL_60:
          if ((v1302[23] & 0x80000000) == 0)
            goto LABEL_1521;
LABEL_64:
          operator delete(*(void **)v1302);
          goto LABEL_1521;
        }
      }
      else if ((v1309[23] & 0x80000000) == 0)
      {
        goto LABEL_60;
      }
      operator delete(*(void **)v1309);
      if ((v1302[23] & 0x80000000) == 0)
        goto LABEL_1521;
      goto LABEL_64;
    }
    *(_QWORD *)a1 = off_24C06E9E8;
    *(_BYTE *)(a1 + 8) = 0;
    v13 = operator new(0x18uLL);
    v13[23] = 0;
    *v13 = 0;
    *(_QWORD *)(a1 + 16) = v13;
    v14 = operator new(0x20uLL);
    *v14 = &unk_24C06F1C0;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v13;
    *(_QWORD *)(a1 + 24) = v14;
    if (*(_QWORD *)&v1154[12] == 0x100000001 && v12 <= 0x21 && ((1 << v12) & 0x201160000) != 0)
    {
      width = *(int64x2_t *)v1154;
      v1140 = *(int64x2_t *)&v1154[16];
      v1141 = *(int64x2_t *)&v1154[32];
      v1142 = v1155;
      v1149 = 0;
      if (v1163)
      {
        v15 = v1156;
        v16 = v1157;
        if (v1157)
        {
          p_shared_owners = (unint64_t *)&v1157->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          v19 = v1160;
          v20 = v1161;
          v21 = v1162;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        else
        {
          v19 = v1160;
          v20 = v1161;
          v21 = v1162;
        }
        *(_QWORD *)&v1143 = v15;
        *((_QWORD *)&v1143 + 1) = v16;
        v1144 = v1158;
        v1145 = v1159;
        v1146 = v19;
        v1147 = v20;
        v1148 = v21;
        if (v16)
        {
          v63 = (unint64_t *)&v16->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v1149 = 1;
      }
      v1194 = v1164;
      if (v1140.i32[0] != 1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 476, (uint64_t)"input.BatchSize() == 1", 22, (uint64_t)"Espresso execution with non-float input of batch size greater than 1 not yet implemented.", 89, (void (*)(void **))sub_208216974)|| !*v1062&& sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 477, (uint64_t)"device != EspressoDevice::Any", 29, (uint64_t)"Invalid runtime device specified.", 33, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if ((v1142 & 1) != 0)
      {
        v65 = 1;
      }
      else if ((v1142 & 2) != 0)
      {
        v65 = 2;
      }
      else
      {
        v65 = 4 * ((v1142 & 0xC) != 0);
      }
      sub_2080A8BDC(*(_QWORD *)(a2 + 128) + 8, v1194, (uint64_t)v1309);
      *(_OWORD *)__p = *(_OWORD *)v1309;
      v1193 = *(_QWORD *)&v1309[16];
      v66 = *(_QWORD *)(a2 + 80);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 88) - v66) >> 3) <= v1194)
      {
        v69 = 0;
        LOBYTE(v1190) = 0;
        BYTE4(v1191) = 0;
      }
      else
      {
        v67 = (__int128 *)(v66 + 24 * v1194);
        v68 = *v67;
        v1191 = *((_QWORD *)v67 + 2);
        v1190 = v68;
        v69 = BYTE4(v1191);
      }
      v70 = &v1190;
      if (!v69)
        v70 = 0;
      v1189 = v70;
      v71 = *(_QWORD *)(a2 + 128);
      v1188 = 0;
      if (*(_BYTE *)(v71 + 152))
      {
        v73 = v71 + 128;
        v72 = *(_QWORD *)(v71 + 128);
        if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v73 + 8) - v72) >> 2) > v1194)
        {
          v74 = *(unsigned __int8 *)(v72 + 28 * v1194 + 25);
          v1188 = *(_BYTE *)(v72 + 28 * v1194 + 25);
          if (v69)
          {
            if (v74
              && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 499, (uint64_t)"!(needs_pp && use_direct_bind)", 30, (uint64_t)" Espresso inputs can't have pre processing with direct bind.", 60, (void (*)(void **))sub_208216974))
            {
              abort();
            }
          }
        }
      }
      v1187 = &v1194;
      v1186 = &v1187;
      v1180 = &v1188;
      v1181 = v1062;
      v1182 = a2;
      v1183 = __p;
      v1184 = &v1189;
      v1185 = &v1186;
      if (v65 != 1)
      {
        if (v65 != 2)
        {
          if (v65 != 4)
          {
            v983 = 623;
            goto LABEL_1665;
          }
          if (width.i32[3] != 1)
          {
            v93 = (char *)operator new(0x58uLL);
            strcpy(v93, "Espresso execution with 4 non-float components but multiple channels not supported");
            v1150 = off_24C06E9E8;
            v1151 = 6;
            v94 = operator new(0x18uLL);
            sub_207CA40D8(v94, v93, 0x52uLL);
            v1152 = v94;
            v95 = (std::__shared_weak_count *)operator new(0x20uLL);
            v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
            v95->__shared_owners_ = 0;
            v95->__shared_weak_owners_ = 0;
            v95[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
            v1153 = v95;
            operator delete(v93);
            goto LABEL_952;
          }
          if ((v1142 & 8) == 0)
          {
            if ((v1142 & 4) == 0)
            {
              v983 = 593;
              v984 = "Espresso execution with 4 non-float color components but format other than RGBA/BGRA not yet implem"
                     "ented or not supported";
              v985 = 121;
              goto LABEL_1664;
            }
            v1256[0] = width;
            v1256[1] = v1140;
            v1256[2] = v1141;
            v1257 = v1142;
            LOBYTE(v1258) = 0;
            LOBYTE(v1263) = 0;
            if (!v1149)
              goto LABEL_1414;
            v1258 = off_24C06E878;
            if (*((_QWORD *)&v1143 + 1))
            {
              v75 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
              do
                v76 = __ldxr(v75);
              while (__stxr(v76 + 1, v75));
              v77 = v1146;
              v78 = v1147;
              v79 = v1148;
              do
                v80 = __ldxr(v75);
              while (__stxr(v80 + 1, v75));
            }
            else
            {
              v77 = v1146;
              v78 = v1147;
              v79 = v1148;
            }
            v1259 = v1143;
            *(_QWORD *)&v1260 = v1144;
            DWORD2(v1260) = v1145;
            v1261 = v77;
            LODWORD(v1262) = v78;
            WORD2(v1262) = v79;
            if (*((_QWORD *)&v1143 + 1))
            {
              v672 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
              do
                v673 = __ldaxr(v672);
              while (__stlxr(v673 - 1, v672));
              if (!v673)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v1143 + 1) + 16))(*((_QWORD *)&v1143 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1143 + 1));
              }
              v78 = v1262;
            }
            LOBYTE(v1263) = 1;
            if (v78 != 25)
            {
              pixelBuffer[0] = 0;
              LOBYTE(v1226) = 0;
              goto LABEL_1388;
            }
            *(_QWORD *)v1302 = &off_24C07CF28;
            sub_207FC6EE8((uint64_t)&v1258, (uint64_t)&v1302[8]);
            v674 = *(_OWORD *)&v1302[8];
            *(_QWORD *)v1309 = &off_24C07CF28;
            *(_OWORD *)&v1309[8] = *(_OWORD *)&v1302[8];
            *(_OWORD *)&v1302[8] = 0uLL;
            *(_OWORD *)&v1309[24] = *(_OWORD *)&v1302[24];
            *(_OWORD *)&v1309[40] = *(_OWORD *)&v1302[40];
            *(_OWORD *)&v1309[56] = *(_OWORD *)&v1302[56];
            *(_WORD *)&v1309[72] = *(_WORD *)&v1302[72];
            LOBYTE(v1310) = 1;
            if ((_QWORD)v674)
            {
              *(_OWORD *)__src = v674;
              if (*((_QWORD *)&v674 + 1))
              {
                v675 = (unint64_t *)(*((_QWORD *)&v674 + 1) + 8);
                do
                  v676 = __ldxr(v675);
                while (__stxr(v676 + 1, v675));
              }
              if (*(uint64_t (***)())v674 == &off_24C088FC8)
              {
                *(_OWORD *)v1316 = v674;
                v677 = __src;
              }
              else
              {
                v677 = v1316;
              }
            }
            else
            {
              *(_QWORD *)&__src[8] = 0;
              *(_QWORD *)__src = 0;
              v677 = v1316;
            }
            *(_QWORD *)v677 = 0;
            *((_QWORD *)v677 + 1) = 0;
            v797 = *(std::__shared_weak_count **)&__src[8];
            if (*(_QWORD *)&__src[8])
            {
              v798 = (unint64_t *)(*(_QWORD *)&__src[8] + 8);
              do
                v799 = __ldaxr(v798);
              while (__stlxr(v799 - 1, v798));
              if (!v799)
              {
                ((void (*)(std::__shared_weak_count *))v797->__on_zero_shared)(v797);
                std::__shared_weak_count::__release_weak(v797);
              }
            }
            v801 = *(_QWORD *)v1316;
            v800 = *(std::__shared_weak_count **)&v1316[8];
            if (*(_QWORD *)&v1316[8])
            {
              v802 = (unint64_t *)(*(_QWORD *)&v1316[8] + 8);
              do
                v803 = __ldaxr(v802);
              while (__stlxr(v803 - 1, v802));
              if (!v803)
              {
                ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
                std::__shared_weak_count::__release_weak(v800);
              }
            }
            if (!v801)
            {
              pixelBuffer[0] = 0;
              LOBYTE(v1226) = 0;
              goto LABEL_1382;
            }
            v804 = *(_OWORD *)&v1309[8];
            if (*(_QWORD *)&v1309[16])
            {
              v805 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
              do
                v806 = __ldxr(v805);
              while (__stxr(v806 + 1, v805));
            }
            if ((_QWORD)v804 && *(uint64_t (***)())v804 == &off_24C088FC8)
            {
              if (*((_QWORD *)&v804 + 1))
              {
                v807 = (unint64_t *)(*((_QWORD *)&v804 + 1) + 8);
                do
                  v808 = __ldxr(v807);
                while (__stxr(v808 + 1, v807));
                *(_OWORD *)__src = *(_OWORD *)&v1309[24];
                *(_OWORD *)&__src[16] = *(_OWORD *)&v1309[40];
                *(_OWORD *)&__src[32] = *(_OWORD *)&v1309[56];
                do
                  v809 = __ldxr(v807);
                while (__stxr(v809 + 1, v807));
                do
                  v810 = __ldaxr(v807);
                while (__stlxr(v810 - 1, v807));
                if (!v810)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v804 + 1) + 16))(*((_QWORD *)&v804 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v804 + 1));
                }
                do
                  v811 = __ldaxr(v807);
                while (__stlxr(v811 - 1, v807));
                if (!v811)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v804 + 1) + 16))(*((_QWORD *)&v804 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v804 + 1));
                }
                *(_QWORD *)v1302 = &off_24C084C98;
                *(_OWORD *)&v1302[8] = v804;
                *(_OWORD *)&v1302[24] = *(_OWORD *)__src;
                *(_OWORD *)&v1302[40] = *(_OWORD *)&__src[16];
                *(_OWORD *)&v1302[56] = *(_OWORD *)&__src[32];
                v1302[72] = v1178;
                LOBYTE(v1303) = 1;
                do
                  v812 = __ldxr(v807);
                while (__stxr(v812 + 1, v807));
                do
                  v813 = __ldaxr(v807);
                while (__stlxr(v813 - 1, v807));
                if (!v813)
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v804 + 1) + 16))(*((_QWORD *)&v804 + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v804 + 1));
                }
              }
              else
              {
                *(_QWORD *)v1302 = &off_24C084C98;
                *(_OWORD *)&v1302[8] = (unint64_t)v804;
                v1302[72] = v1178;
                *(_OWORD *)&v1302[24] = *(_OWORD *)&v1309[24];
                *(_OWORD *)&v1302[40] = *(_OWORD *)&v1309[40];
                *(_OWORD *)&v1302[56] = *(_OWORD *)&v1309[56];
                LOBYTE(v1303) = 1;
              }
              sub_20812D688(v804, v1316);
              if (*(_QWORD *)&v1316[8])
              {
                v814 = **(__CVBuffer ***)&v1316[8];
                v815 = *(std::__shared_weak_count **)(*(_QWORD *)&v1316[8] + 8);
                if (v815)
                {
                  v816 = (unint64_t *)&v815->__shared_owners_;
                  do
                    v817 = __ldxr(v816);
                  while (__stxr(v817 + 1, v816));
                  do
                    v818 = __ldaxr(v816);
                  while (__stlxr(v818 - 1, v816));
                  if (!v818)
                  {
                    ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
                    std::__shared_weak_count::__release_weak(v815);
                  }
                }
              }
              else
              {
                v814 = 0;
              }
              IOSurface = CVPixelBufferGetIOSurface(v814);
              *(_QWORD *)v1316 = &off_24C08A5D8;
              v820 = *(std::__shared_weak_count **)&v1316[16];
              if (*(_QWORD *)&v1316[16])
              {
                v821 = (unint64_t *)(*(_QWORD *)&v1316[16] + 8);
                do
                  v822 = __ldaxr(v821);
                while (__stlxr(v822 - 1, v821));
                if (!v822)
                {
                  ((void (*)(std::__shared_weak_count *))v820->__on_zero_shared)(v820);
                  std::__shared_weak_count::__release_weak(v820);
                }
              }
              pixelBuffer[0] = 0;
              LOBYTE(v1226) = 0;
              v823 = v1303;
              if (!IOSurface)
                goto LABEL_1376;
              if ((_BYTE)v1303)
              {
                *(_QWORD *)pixelBuffer = &off_24C084C98;
                v824 = *(_OWORD *)&v1302[8];
                if (*(_QWORD *)&v1302[16])
                {
                  v825 = (unint64_t *)(*(_QWORD *)&v1302[16] + 8);
                  do
                    v826 = __ldxr(v825);
                  while (__stxr(v826 + 1, v825));
                  do
                    v827 = __ldxr(v825);
                  while (__stxr(v827 + 1, v825));
                  *(_OWORD *)&pixelBuffer[24] = *(_OWORD *)&v1302[24];
                  *(_OWORD *)&pixelBuffer[40] = *(_OWORD *)&v1302[40];
                  v1224 = *(_OWORD *)&v1302[56];
                  do
                    v828 = __ldxr(v825);
                  while (__stxr(v828 + 1, v825));
                  *(_OWORD *)&pixelBuffer[8] = v824;
                  do
                    v829 = __ldaxr(v825);
                  while (__stlxr(v829 - 1, v825));
                  if (!v829)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v824 + 1) + 16))(*((_QWORD *)&v824 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v824 + 1));
                  }
                  do
                    v830 = __ldaxr(v825);
                  while (__stlxr(v830 - 1, v825));
                  if (!v830)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v824 + 1) + 16))(*((_QWORD *)&v824 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v824 + 1));
                  }
                }
                else
                {
                  *(_QWORD *)&pixelBuffer[8] = *(_QWORD *)&v1302[8];
                  *(_QWORD *)&pixelBuffer[16] = 0;
                  *(_OWORD *)&pixelBuffer[24] = *(_OWORD *)&v1302[24];
                  *(_OWORD *)&pixelBuffer[40] = *(_OWORD *)&v1302[40];
                  v1224 = *(_OWORD *)&v1302[56];
                }
                LOBYTE(v1226) = 1;
                v823 = v1303;
LABEL_1376:
                if (v823)
                {
                  v874 = *(std::__shared_weak_count **)&v1302[16];
                  if (*(_QWORD *)&v1302[16])
                  {
                    v875 = (unint64_t *)(*(_QWORD *)&v1302[16] + 8);
                    do
                      v876 = __ldaxr(v875);
                    while (__stlxr(v876 - 1, v875));
                    if (!v876)
                    {
                      ((void (*)(std::__shared_weak_count *))v874->__on_zero_shared)(v874);
                      std::__shared_weak_count::__release_weak(v874);
                    }
                  }
                }
              }
LABEL_1382:
              if ((_BYTE)v1310)
              {
                v877 = *(std::__shared_weak_count **)&v1309[16];
                if (*(_QWORD *)&v1309[16])
                {
                  v878 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
                  do
                    v879 = __ldaxr(v878);
                  while (__stlxr(v879 - 1, v878));
                  if (!v879)
                  {
                    ((void (*)(std::__shared_weak_count *))v877->__on_zero_shared)(v877);
                    std::__shared_weak_count::__release_weak(v877);
                  }
                }
              }
LABEL_1388:
              if ((_BYTE)v1263)
              {
                v880 = (std::__shared_weak_count *)*((_QWORD *)&v1259 + 1);
                if (*((_QWORD *)&v1259 + 1))
                {
                  v881 = (unint64_t *)(*((_QWORD *)&v1259 + 1) + 8);
                  do
                    v882 = __ldaxr(v881);
                  while (__stlxr(v882 - 1, v881));
                  if (!v882)
                  {
                    ((void (*)(std::__shared_weak_count *))v880->__on_zero_shared)(v880);
                    std::__shared_weak_count::__release_weak(v880);
                  }
                }
              }
              if ((_BYTE)v1226)
              {
                v1213.i64[0] = (uint64_t)&off_24C084C98;
                v883 = *(_QWORD *)&pixelBuffer[8];
                v884 = *(std::__shared_weak_count **)&pixelBuffer[16];
                if (*(_QWORD *)&pixelBuffer[16])
                {
                  v885 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
                  do
                    v886 = __ldxr(v885);
                  while (__stxr(v886 + 1, v885));
                  do
                    v887 = __ldxr(v885);
                  while (__stxr(v887 + 1, v885));
                  *(_OWORD *)&v1214[8] = *(_OWORD *)&pixelBuffer[24];
                  *(_OWORD *)&v1214[24] = *(_OWORD *)&pixelBuffer[40];
                  v1215 = v1224;
                  do
                    v888 = __ldxr(v885);
                  while (__stxr(v888 + 1, v885));
                  v1213.i64[1] = v883;
                  *(_QWORD *)v1214 = v884;
                  do
                    v889 = __ldaxr(v885);
                  while (__stlxr(v889 - 1, v885));
                  if (!v889)
                  {
                    ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
                    std::__shared_weak_count::__release_weak(v884);
                  }
                  do
                    v890 = __ldaxr(v885);
                  while (__stlxr(v890 - 1, v885));
                  if (!v890)
                  {
                    ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
                    std::__shared_weak_count::__release_weak(v884);
                  }
                  v891 = *(std::__shared_weak_count **)v1214;
                  v883 = v1213.i64[1];
                  if (*(_QWORD *)v1214)
                  {
                    v892 = (unint64_t *)(*(_QWORD *)v1214 + 8);
                    do
                      v893 = __ldxr(v892);
                    while (__stxr(v893 + 1, v892));
                    do
                      v894 = __ldaxr(v892);
                    while (__stlxr(v894 - 1, v892));
                    if (!v894)
                    {
                      ((void (*)(std::__shared_weak_count *))v891->__on_zero_shared)(v891);
                      std::__shared_weak_count::__release_weak(v891);
                    }
                  }
                }
                else
                {
                  v1213.i64[1] = *(_QWORD *)&pixelBuffer[8];
                  *(_QWORD *)v1214 = 0;
                  *(_OWORD *)&v1214[8] = *(_OWORD *)&pixelBuffer[24];
                  *(_OWORD *)&v1214[24] = *(_OWORD *)&pixelBuffer[40];
                  v1215 = v1224;
                }
                sub_20812D688(v883, v1309);
                if (*(_QWORD *)&v1309[8])
                {
                  v895 = **(_QWORD **)&v1309[8];
                  v896 = *(std::__shared_weak_count **)(*(_QWORD *)&v1309[8] + 8);
                  if (v896)
                  {
                    v897 = (unint64_t *)&v896->__shared_owners_;
                    do
                      v898 = __ldxr(v897);
                    while (__stxr(v898 + 1, v897));
                    *(_QWORD *)v1302 = v895;
                    *(_QWORD *)&v1302[8] = v896;
                    do
                      v899 = __ldxr(v897);
                    while (__stxr(v899 + 1, v897));
                    do
                      v900 = __ldaxr(v897);
                    while (__stlxr(v900 - 1, v897));
                    if (!v900)
                    {
                      ((void (*)(std::__shared_weak_count *))v896->__on_zero_shared)(v896);
                      std::__shared_weak_count::__release_weak(v896);
                    }
                    goto LABEL_1428;
                  }
                }
                else
                {
                  v895 = 0;
                }
                *(_OWORD *)v1302 = v895;
LABEL_1428:
                *(_QWORD *)v1309 = &off_24C08A5D8;
                v901 = *(std::__shared_weak_count **)&v1309[16];
                if (*(_QWORD *)&v1309[16])
                {
                  v902 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
                  do
                    v903 = __ldaxr(v902);
                  while (__stlxr(v903 - 1, v902));
                  if (!v903)
                  {
                    ((void (*)(std::__shared_weak_count *))v901->__on_zero_shared)(v901);
                    std::__shared_weak_count::__release_weak(v901);
                  }
                }
                if (!CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)v1302)
                  && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_208216974))
                {
                  abort();
                }
                if (*v1180 && *v1181 == 1)
                  v904 = espresso_network_bind_direct_cvpixelbuffer();
                else
                  v904 = espresso_network_bind_input_cvpixelbuffer();
                sub_2080B76F0((uint64_t)&v1150, v1185, v904);
                v905 = *(std::__shared_weak_count **)&v1302[8];
                if (*(_QWORD *)&v1302[8])
                {
                  v906 = (unint64_t *)(*(_QWORD *)&v1302[8] + 8);
                  do
                    v907 = __ldaxr(v906);
                  while (__stlxr(v907 - 1, v906));
                  if (!v907)
                  {
                    ((void (*)(std::__shared_weak_count *))v905->__on_zero_shared)(v905);
                    std::__shared_weak_count::__release_weak(v905);
                  }
                }
                v908 = *(std::__shared_weak_count **)v1214;
                if (*(_QWORD *)v1214)
                {
                  v909 = (unint64_t *)(*(_QWORD *)v1214 + 8);
                  do
                    v910 = __ldaxr(v909);
                  while (__stlxr(v910 - 1, v909));
                  if (!v910)
                  {
                    ((void (*)(std::__shared_weak_count *))v908->__on_zero_shared)(v908);
                    std::__shared_weak_count::__release_weak(v908);
                  }
                }
                if (!(_BYTE)v1226)
                  goto LABEL_952;
                v152 = *(std::__shared_weak_count **)&pixelBuffer[16];
                if (!*(_QWORD *)&pixelBuffer[16])
                  goto LABEL_952;
                v911 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
                do
                  v154 = __ldaxr(v911);
                while (__stlxr(v154 - 1, v911));
                goto LABEL_262;
              }
LABEL_1414:
              v117 = 25;
              v118 = v1061;
              v119 = *v1061;
              if (!*v1061)
                goto LABEL_305;
LABEL_460:
              v175 = v1194;
              v351 = v119;
              do
              {
                v352 = v351[4];
                if (v1194 >= v352)
                {
                  if (v352 >= v1194)
                  {
                    v383 = v1061;
                    goto LABEL_516;
                  }
                  ++v351;
                }
                v351 = (uint64_t *)*v351;
              }
              while (v351);
              while (1)
              {
                while (1)
                {
                  v118 = (uint64_t **)v119;
                  v353 = v119[4];
                  if (v1194 >= v353)
                    break;
                  v119 = *v118;
                  if (!*v118)
                    goto LABEL_306;
                }
                if (v353 >= v1194)
                  break;
                v119 = v118[1];
                if (!v119)
                {
                  v176 = v118 + 1;
                  goto LABEL_470;
                }
              }
              v354 = (unsigned __int8 *)v118;
LABEL_473:
              v357 = v354[112];
              v354[40] = 0;
              *(_OWORD *)(v354 + 41) = *(_OWORD *)v1309;
              *(_OWORD *)(v354 + 56) = *(_OWORD *)&v1309[15];
              v354[72] = 0;
              if (v357)
              {
                if (v354[104])
                {
                  *((_QWORD *)v354 + 10) = &off_24C08A5D8;
                  v358 = (std::__shared_weak_count *)*((_QWORD *)v354 + 12);
                  if (v358)
                  {
                    v359 = (unint64_t *)&v358->__shared_owners_;
                    do
                      v360 = __ldaxr(v359);
                    while (__stlxr(v360 - 1, v359));
                    if (!v360)
                    {
                      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                      std::__shared_weak_count::__release_weak(v358);
                    }
                  }
                  v354[104] = 0;
                }
              }
              else
              {
                *(_DWORD *)(v354 + 73) = *(_DWORD *)pixelBuffer;
                *((_DWORD *)v354 + 19) = *(_DWORD *)&pixelBuffer[3];
                v354[80] = 0;
                v354[104] = 0;
                v354[112] = 1;
              }
              v361 = (uint64_t *)v1061;
              v362 = *v1061;
              v363 = v1194;
              while (1)
              {
                v364 = (uint64_t **)v361;
                if (!v362)
                  goto LABEL_489;
                while (1)
                {
                  v361 = v362;
                  v365 = v362[4];
                  if (v1194 < v365)
                    break;
                  if (v365 >= v1194)
                  {
                    v366 = (char *)v361;
                    *(_OWORD *)(v361 + 5) = 0u;
                    v369 = (vImage_Buffer *)(v361 + 5);
                    v384 = *((unsigned __int8 *)v361 + 72);
                    *(_OWORD *)(v361 + 7) = 0u;
                    if (!v384)
                      goto LABEL_492;
                    goto LABEL_493;
                  }
                  v362 = (uint64_t *)v361[1];
                  if (!v362)
                  {
                    v364 = (uint64_t **)(v361 + 1);
LABEL_489:
                    v366 = (char *)operator new(0x78uLL);
                    *((_QWORD *)v366 + 4) = v363;
                    v366[40] = 0;
                    v366[112] = 0;
                    *(_QWORD *)v366 = 0;
                    *((_QWORD *)v366 + 1) = 0;
                    *((_QWORD *)v366 + 2) = v361;
                    *v364 = (uint64_t *)v366;
                    v367 = **(_QWORD **)(a2 + 104);
                    v368 = (uint64_t *)v366;
                    if (v367)
                    {
                      *(_QWORD *)(a2 + 104) = v367;
                      v368 = *v364;
                    }
                    sub_207CC24B4(*(uint64_t **)(a2 + 112), v368);
                    ++*(_QWORD *)(a2 + 120);
                    *(_OWORD *)(v366 + 40) = 0u;
                    v369 = (vImage_Buffer *)(v366 + 40);
                    v370 = v366[72];
                    *(_OWORD *)(v366 + 56) = 0u;
                    if (!v370)
LABEL_492:
                      v366[72] = 1;
LABEL_493:
                    vImageBuffer_Init(v369, width.u32[2], width.u32[1], 8 * v65, 0x100u);
                    v371 = *(uint64_t **)(a2 + 112);
                    v372 = v1194;
                    v373 = (uint64_t *)v1061;
LABEL_495:
                    v374 = (uint64_t **)v373;
                    if (!v371)
                      goto LABEL_500;
                    while (1)
                    {
                      v373 = v371;
                      v375 = v371[4];
                      if (v1194 < v375)
                      {
                        v371 = (uint64_t *)*v373;
                        goto LABEL_495;
                      }
                      if (v375 >= v1194)
                        break;
                      v371 = (uint64_t *)v373[1];
                      if (!v371)
                      {
                        v374 = (uint64_t **)(v373 + 1);
LABEL_500:
                        v376 = (char *)operator new(0x78uLL);
                        *((_QWORD *)v376 + 4) = v372;
                        v376[40] = 0;
                        v376[112] = 0;
                        *(_QWORD *)v376 = 0;
                        *((_QWORD *)v376 + 1) = 0;
                        *((_QWORD *)v376 + 2) = v373;
                        *v374 = (uint64_t *)v376;
                        v377 = **(_QWORD **)(a2 + 104);
                        v378 = (uint64_t *)v376;
                        if (v377)
                        {
                          *(_QWORD *)(a2 + 104) = v377;
                          v378 = *v374;
                        }
                        sub_207CC24B4(*(uint64_t **)(a2 + 112), v378);
                        ++*(_QWORD *)(a2 + 120);
                        v379 = v376 + 40;
                        if (v117 != 1)
                        {
LABEL_503:
                          if (v117 != 25)
                          {
                            if (v117 == 29)
                            {
                              v380 = v379[1];
                              *(_OWORD *)pixelBuffer = *v379;
                              *(_OWORD *)&pixelBuffer[16] = v380;
                              v381 = espresso_network_bind_input_vimagebuffer_rgba8();
                              goto LABEL_512;
                            }
                            v983 = 565;
                            v984 = "not supported";
                            v985 = 13;
LABEL_1664:
                            v1058 = v985;
                            v1059 = v984;
LABEL_1665:
                            sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", v983, (uint64_t)"", 0, (uint64_t)v1059, v1058, (void (*)(void **))sub_208216974);
LABEL_1666:
                            abort();
                          }
                          v382 = v379[1];
                          *(_OWORD *)pixelBuffer = *v379;
                          *(_OWORD *)&pixelBuffer[16] = v382;
                          v381 = espresso_network_bind_input_vimagebuffer_bgra8();
LABEL_512:
                          if (v381)
                          {
                            sub_2080B76F0((uint64_t)&v1150, &v1186, v381);
                            goto LABEL_952;
                          }
                          v383 = v1061;
                          v119 = *v1061;
                          v175 = v1194;
LABEL_516:
                          v386 = v383;
                          if (v119)
                          {
                            while (1)
                            {
                              v383 = (uint64_t **)v119;
                              v387 = v119[4];
                              if (v175 < v387)
                              {
                                v119 = *v383;
                                goto LABEL_516;
                              }
                              if (v387 >= v175)
                                break;
                              v119 = v383[1];
                              if (!v119)
                              {
                                v386 = v383 + 1;
                                goto LABEL_521;
                              }
                            }
                            v388 = v383;
                          }
                          else
                          {
LABEL_521:
                            v388 = operator new(0x78uLL);
                            *((_QWORD *)v388 + 4) = v175;
                            *((_BYTE *)v388 + 40) = 0;
                            *((_BYTE *)v388 + 112) = 0;
                            *(_QWORD *)v388 = 0;
                            *((_QWORD *)v388 + 1) = 0;
                            *((_QWORD *)v388 + 2) = v383;
                            *v386 = (uint64_t *)v388;
                            v389 = **(_QWORD **)(a2 + 104);
                            v390 = (uint64_t *)v388;
                            if (v389)
                            {
                              *(_QWORD *)(a2 + 104) = v389;
                              v390 = *v386;
                            }
                            sub_207CC24B4(*(uint64_t **)(a2 + 112), v390);
                            ++*(_QWORD *)(a2 + 120);
                          }
                          *(int64x2_t *)v1302 = width;
                          *(int64x2_t *)&v1302[16] = v1140;
                          *(int64x2_t *)&v1302[32] = v1141;
                          *(_DWORD *)&v1302[48] = v1142;
                          v1302[56] = 0;
                          LOBYTE(v1305) = 0;
                          if (v1149)
                          {
                            *(_QWORD *)&v1302[56] = off_24C06E878;
                            if (*((_QWORD *)&v1143 + 1))
                            {
                              v398 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
                              do
                                v399 = __ldxr(v398);
                              while (__stxr(v399 + 1, v398));
                              v400 = v1146;
                              v401 = v1147;
                              v402 = v1148;
                              do
                                v403 = __ldxr(v398);
                              while (__stxr(v403 + 1, v398));
                            }
                            else
                            {
                              v400 = v1146;
                              v401 = v1147;
                              v402 = v1148;
                            }
                            *(_OWORD *)&v1302[64] = v1143;
                            *(_QWORD *)&v1303 = v1144;
                            DWORD2(v1303) = v1145;
                            *(_QWORD *)&v1304 = v400;
                            DWORD2(v1304) = v401;
                            WORD6(v1304) = v402;
                            if (*((_QWORD *)&v1143 + 1))
                            {
                              v405 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
                              do
                                v406 = __ldaxr(v405);
                              while (__stlxr(v406 - 1, v405));
                              if (!v406)
                              {
                                (*(void (**)(_QWORD))(**((_QWORD **)&v1143 + 1) + 16))(*((_QWORD *)&v1143 + 1));
                                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1143 + 1));
                                LOBYTE(v1305) = 1;
                                if (*((_BYTE *)v388 + 72))
                                  goto LABEL_556;
                                goto LABEL_946;
                              }
                            }
                            LOBYTE(v1305) = 1;
                            if (!*((_BYTE *)v388 + 72))
                              goto LABEL_946;
LABEL_556:
                            v407 = *(_QWORD *)&v1302[64];
                            if (!*(_QWORD *)&v1302[64])
                              goto LABEL_571;
                            v408 = *(std::__shared_weak_count **)&v1302[72];
                            if (*(_QWORD *)&v1302[72])
                            {
                              v409 = (unint64_t *)(*(_QWORD *)&v1302[72] + 8);
                              do
                                v410 = __ldxr(v409);
                              while (__stxr(v410 + 1, v409));
                              do
                                v411 = __ldaxr(v409);
                              while (__stlxr(v411 - 1, v409));
                              if (!v411)
                              {
                                ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
                                std::__shared_weak_count::__release_weak(v408);
                              }
                              v412 = *(std::__shared_weak_count **)&v1302[72];
                              v407 = *(_QWORD *)&v1302[64];
                              if (*(_QWORD *)&v1302[72])
                              {
                                v413 = (unint64_t *)(*(_QWORD *)&v1302[72] + 8);
                                do
                                  v414 = __ldxr(v413);
                                while (__stxr(v414 + 1, v413));
                                do
                                  v415 = __ldaxr(v413);
                                while (__stlxr(v415 - 1, v413));
                                if (!v415)
                                {
                                  ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
                                  std::__shared_weak_count::__release_weak(v412);
                                }
                              }
                            }
                            if (BYTE13(v1304))
                              (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v407 + 96))(v1316, v407, 0);
                            else
LABEL_571:
                              *(_QWORD *)v1316 = 0;
                            *(_OWORD *)v1309 = *(_OWORD *)v1302;
                            *(_OWORD *)&v1309[16] = *(_OWORD *)&v1302[16];
                            *(_OWORD *)&v1309[32] = *(_OWORD *)&v1302[32];
                            *(_DWORD *)&v1309[48] = *(_DWORD *)&v1302[48];
                            v1309[56] = 0;
                            LOBYTE(v1312) = 0;
                            if ((_BYTE)v1305)
                            {
                              *(_QWORD *)&v1309[56] = off_24C06E878;
                              v416 = *(_OWORD *)&v1302[64];
                              if (*(_QWORD *)&v1302[72])
                              {
                                v417 = (unint64_t *)(*(_QWORD *)&v1302[72] + 8);
                                do
                                  v418 = __ldxr(v417);
                                while (__stxr(v418 + 1, v417));
                                v419 = v1304;
                                v420 = DWORD2(v1304);
                                v421 = WORD6(v1304);
                                do
                                  v422 = __ldxr(v417);
                                while (__stxr(v422 + 1, v417));
                              }
                              else
                              {
                                v419 = v1304;
                                v420 = DWORD2(v1304);
                                v421 = WORD6(v1304);
                              }
                              *(_OWORD *)&v1309[64] = v416;
                              *(_QWORD *)&v1310 = v1303;
                              DWORD2(v1310) = DWORD2(v1303);
                              *(_QWORD *)&v1311 = v419;
                              DWORD2(v1311) = v420;
                              WORD6(v1311) = v421;
                              if (*((_QWORD *)&v416 + 1))
                              {
                                v678 = (unint64_t *)(*((_QWORD *)&v416 + 1) + 8);
                                do
                                  v679 = __ldaxr(v678);
                                while (__stlxr(v679 - 1, v678));
                                if (!v679)
                                {
                                  (*(void (**)(_QWORD))(**((_QWORD **)&v416 + 1) + 16))(*((_QWORD *)&v416 + 1));
                                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v416 + 1));
                                }
                              }
                              v404 = 1;
LABEL_936:
                              LOBYTE(v1312) = v404;
                            }
                            sub_2080BA730((char **)v388 + 5, (uint64_t)v1309);
                            if ((_BYTE)v1312)
                            {
                              v680 = *(std::__shared_weak_count **)&v1309[72];
                              if (*(_QWORD *)&v1309[72])
                              {
                                v681 = (unint64_t *)(*(_QWORD *)&v1309[72] + 8);
                                do
                                  v682 = __ldaxr(v681);
                                while (__stlxr(v682 - 1, v681));
                                if (!v682)
                                {
                                  ((void (*)(std::__shared_weak_count *))v680->__on_zero_shared)(v680);
                                  std::__shared_weak_count::__release_weak(v680);
                                }
                              }
                            }
                            v683 = *(_QWORD *)v1316;
                            *(_QWORD *)v1316 = 0;
                            if (v683)
                              (*(void (**)(uint64_t))(*(_QWORD *)v683 + 8))(v683);
                            if ((_BYTE)v1305)
                            {
LABEL_946:
                              v684 = *(std::__shared_weak_count **)&v1302[72];
                              if (*(_QWORD *)&v1302[72])
                              {
                                v685 = (unint64_t *)(*(_QWORD *)&v1302[72] + 8);
                                do
                                  v686 = __ldaxr(v685);
                                while (__stlxr(v686 - 1, v685));
                                if (!v686)
                                {
                                  ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
                                  std::__shared_weak_count::__release_weak(v684);
                                }
                              }
                            }
                          }
                          else if (*((_BYTE *)v388 + 72))
                          {
                            v404 = 0;
                            *(_QWORD *)v1316 = 0;
                            *(int64x2_t *)v1309 = width;
                            *(int64x2_t *)&v1309[16] = v1140;
                            *(int64x2_t *)&v1309[32] = v1141;
                            *(_DWORD *)&v1309[48] = v1142;
                            v1309[56] = 0;
                            goto LABEL_936;
                          }
                          v1150 = off_24C06E9E8;
                          v1151 = 0;
                          v687 = operator new(0x18uLL);
                          v687[23] = 0;
                          *v687 = 0;
                          v1152 = v687;
                          v688 = (std::__shared_weak_count *)operator new(0x20uLL);
                          v688->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
                          v688->__shared_owners_ = 0;
                          v688->__shared_weak_owners_ = 0;
                          v688[1].__vftable = (std::__shared_weak_count_vtbl *)v687;
                          v1153 = v688;
LABEL_952:
                          if (SHIBYTE(v1193) < 0)
                          {
                            operator delete(__p[0]);
                            *(_BYTE *)(a1 + 8) = v1151;
                            v689 = v1152;
                            v690 = v1153;
                            if (v1153)
                              goto LABEL_956;
                          }
                          else
                          {
                            *(_BYTE *)(a1 + 8) = v1151;
                            v689 = v1152;
                            v690 = v1153;
                            if (!v1153)
                              goto LABEL_958;
LABEL_956:
                            v691 = (unint64_t *)&v690->__shared_owners_;
                            do
                              v692 = __ldxr(v691);
                            while (__stxr(v692 + 1, v691));
                          }
LABEL_958:
                          v693 = *(std::__shared_weak_count **)(a1 + 24);
                          *(_QWORD *)(a1 + 16) = v689;
                          *(_QWORD *)(a1 + 24) = v690;
                          if (!v693)
                            goto LABEL_962;
                          v694 = (unint64_t *)&v693->__shared_owners_;
                          do
                            v695 = __ldaxr(v694);
                          while (__stlxr(v695 - 1, v694));
                          if (!v695)
                          {
                            ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
                            std::__shared_weak_count::__release_weak(v693);
                            v1150 = off_24C06E9E8;
                            v696 = v1153;
                            if (v1153)
                            {
LABEL_963:
                              v697 = (unint64_t *)&v696->__shared_owners_;
                              do
                                v698 = __ldaxr(v697);
                              while (__stlxr(v698 - 1, v697));
                              if (!v698)
                              {
                                ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                                std::__shared_weak_count::__release_weak(v696);
                              }
                            }
                          }
                          else
                          {
LABEL_962:
                            v1150 = off_24C06E9E8;
                            v696 = v1153;
                            if (v1153)
                              goto LABEL_963;
                          }
                          if (v1149)
                          {
                            v699 = (std::__shared_weak_count *)*((_QWORD *)&v1143 + 1);
                            if (*((_QWORD *)&v1143 + 1))
                            {
                              v700 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
                              do
                                v701 = __ldaxr(v700);
                              while (__stlxr(v701 - 1, v700));
                              goto LABEL_1519;
                            }
                          }
                          goto LABEL_1520;
                        }
LABEL_511:
                        v385 = v379[1];
                        *(_OWORD *)pixelBuffer = *v379;
                        *(_OWORD *)&pixelBuffer[16] = v385;
                        v381 = espresso_network_bind_input_vimagebuffer_planar8();
                        goto LABEL_512;
                      }
                    }
                    v379 = v373 + 5;
                    if (v117 != 1)
                      goto LABEL_503;
                    goto LABEL_511;
                  }
                }
                v362 = (uint64_t *)*v361;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            v987 = atomic_load((unsigned __int8 *)&qword_253E51448);
            if ((v987 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51448))
            {
LABEL_1669:
              v988 = sub_207FC7260();
              *(_QWORD *)v1316 = "Attempting to create an ";
              *(_QWORD *)&v1316[8] = 24;
              v989 = &qword_253E51458;
              v990 = byte_253E5146F;
              if (byte_253E5146F < 0)
              {
                v990 = unk_253E51460;
                v989 = (uint64_t *)qword_253E51458;
              }
              *(_QWORD *)&v1316[16] = v989;
              *(_QWORD *)&v1316[24] = v990;
              *(_QWORD *)&v1316[32] = " from an ";
              *(_QWORD *)&v1316[40] = 9;
              v991 = HIBYTE(v988->__r_.__value_.__r.__words[2]);
              if ((v991 & 0x80u) == 0)
                v992 = v988;
              else
                v992 = (std::string *)v988->__r_.__value_.__r.__words[0];
              if ((v991 & 0x80u) != 0)
                v991 = v988->__r_.__value_.__l.__size_;
              *(_QWORD *)&v1316[48] = v992;
              v1317 = v991;
              sub_207CAC8F4((uint64_t)v1316, (uint64_t)&v1318, 0, 0, &v1300);
              v993 = *(_QWORD *)&v1309[8];
              if (*(_QWORD *)&v1309[8])
              {
                v1008 = *(std::__shared_weak_count **)&v1309[16];
                if (*(_QWORD *)&v1309[16])
                {
                  v1009 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
                  do
                    v1010 = __ldxr(v1009);
                  while (__stxr(v1010 + 1, v1009));
                  do
                    v1011 = __ldaxr(v1009);
                  while (__stlxr(v1011 - 1, v1009));
                  if (!v1011)
                  {
                    ((void (*)(std::__shared_weak_count *))v1008->__on_zero_shared)(v1008);
                    std::__shared_weak_count::__release_weak(v1008);
                  }
                  v1012 = *(std::__shared_weak_count **)&v1309[16];
                  v993 = *(_QWORD *)&v1309[8];
                  if (*(_QWORD *)&v1309[16])
                  {
                    v1013 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
                    do
                      v1014 = __ldxr(v1013);
                    while (__stxr(v1014 + 1, v1013));
                    do
                      v1015 = __ldaxr(v1013);
                    while (__stlxr(v1015 - 1, v1013));
                    if (!v1015)
                    {
                      ((void (*)(std::__shared_weak_count *))v1012->__on_zero_shared)(v1012);
                      std::__shared_weak_count::__release_weak(v1012);
                    }
                  }
                }
                v1016 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v993 + 80))(v993);
                v1018 = HIBYTE(v1300.__r_.__value_.__r.__words[2]);
                v1019 = &v1300;
                if ((v1300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                {
                  v1018 = v1300.__r_.__value_.__l.__size_;
                  v1019 = (std::string *)v1300.__r_.__value_.__r.__words[0];
                }
                *(_QWORD *)v1316 = v1019;
                *(_QWORD *)&v1316[8] = v1018;
                *(_QWORD *)&v1316[16] = " but the other image contains an incompatible buffer type ";
                *(_QWORD *)&v1316[24] = 58;
                *(_QWORD *)&v1316[32] = v1016;
                *(_QWORD *)&v1316[40] = v1017;
                sub_207CAC8F4((uint64_t)v1316, (uint64_t)&v1316[48], 0, 0, &v1299);
                LOBYTE(v994) = *((_BYTE *)&v1300.__r_.__value_.__s + 23);
LABEL_1740:
                if ((v994 & 0x80) != 0)
                  operator delete(v1300.__r_.__value_.__l.__data_);
                std::logic_error::logic_error(exception, &v1299);
                exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
                __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
              }
              v994 = SHIBYTE(v1300.__r_.__value_.__r.__words[2]);
              if ((v1300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v995 = HIBYTE(v1300.__r_.__value_.__r.__words[2]);
              else
                v995 = v1300.__r_.__value_.__l.__size_;
              v996 = v995 + 46;
              if (v995 + 46 > 0x7FFFFFFFFFFFFFF7)
                sub_207C95C50();
              if (v996 > 0x16)
              {
                v1034 = (v996 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v996 | 7) != 0x17)
                  v1034 = v996 | 7;
                v1035 = v1034 + 1;
                v1032 = operator new(v1034 + 1);
                v1299.__r_.__value_.__r.__words[2] = v1035 | 0x8000000000000000;
                v1299.__r_.__value_.__r.__words[0] = (std::string::size_type)v1032;
                v1299.__r_.__value_.__l.__size_ = v995 + 46;
                if (!v995)
                  goto LABEL_1739;
              }
              else
              {
                memset(&v1299, 0, sizeof(v1299));
                v1032 = &v1299;
                *((_BYTE *)&v1299.__r_.__value_.__s + 23) = v995 + 46;
              }
              if (v994 >= 0)
                v1036 = &v1300;
              else
                v1036 = (std::string *)v1300.__r_.__value_.__r.__words[0];
              memmove(v1032, v1036, v995);
LABEL_1739:
              strcpy((char *)v1032 + v995, " but the other image does not contain a buffer");
              goto LABEL_1740;
            }
            v1296[23] = 14;
            strcpy(v1296, "ConstImageView");
            v1040 = sub_207F40160();
            if (SHIBYTE(v1040->__r_.__value_.__r.__words[2]) < 0)
            {
              sub_207CA40D8(__dst, v1040->__r_.__value_.__l.__data_, v1040->__r_.__value_.__l.__size_);
            }
            else
            {
              v1042 = *(_OWORD *)&v1040->__r_.__value_.__l.__data_;
              *(_QWORD *)v1171 = *((_QWORD *)&v1040->__r_.__value_.__l + 2);
              *(_OWORD *)__dst = v1042;
            }
            sub_2082144D8((std::string *)__dst, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v1316);
            if ((v1171[7] & 0x80000000) != 0)
              operator delete(__dst[0]);
            v1043 = sub_207CACD14();
            if (*((char *)v1043 + 23) < 0)
            {
              sub_207CA40D8(__dst, *(void **)v1043, *((_QWORD *)v1043 + 1));
            }
            else
            {
              v1046 = *v1043;
              *(_QWORD *)v1171 = *((_QWORD *)v1043 + 2);
              *(_OWORD *)__dst = v1046;
            }
            sub_2082144D8((std::string *)__dst, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v1316[24]);
            if ((v1171[7] & 0x80000000) != 0)
              operator delete(__dst[0]);
            sub_207CAA110(&__s, (uint64_t)v1316, 2uLL);
            sub_208215D20(v1296, (uint64_t *)&__s, (std::string *)&qword_253E51458, v1047, v1048);
            v1049 = __s.__r_.__value_.__r.__words[0];
            if (__s.__r_.__value_.__r.__words[0])
            {
              v1054 = __s.__r_.__value_.__l.__size_;
              v1055 = (void *)__s.__r_.__value_.__r.__words[0];
              if (__s.__r_.__value_.__l.__size_ != __s.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(v1054 - 1) < 0)
                    operator delete(*(void **)(v1054 - 24));
                  v1054 -= 24;
                }
                while (v1054 != v1049);
                v1055 = (void *)__s.__r_.__value_.__r.__words[0];
              }
              __s.__r_.__value_.__l.__size_ = v1049;
              operator delete(v1055);
              if ((v1316[47] & 0x80000000) != 0)
              {
LABEL_1775:
                operator delete(*(void **)&v1316[24]);
                if ((v1316[23] & 0x80000000) == 0)
                  goto LABEL_1776;
                goto LABEL_1801;
              }
            }
            else if ((v1316[47] & 0x80000000) != 0)
            {
              goto LABEL_1775;
            }
            if ((v1316[23] & 0x80000000) == 0)
            {
LABEL_1776:
              if ((v1296[23] & 0x80000000) == 0)
              {
LABEL_1778:
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51458, &dword_207C77000);
                __cxa_guard_release(&qword_253E51448);
                goto LABEL_1669;
              }
LABEL_1777:
              operator delete(*(void **)v1296);
              goto LABEL_1778;
            }
LABEL_1801:
            operator delete(*(void **)v1316);
            if ((v1296[23] & 0x80000000) == 0)
              goto LABEL_1778;
            goto LABEL_1777;
          }
          v117 = 29;
          v118 = v1061;
          v119 = *v1061;
          if (*v1061)
            goto LABEL_460;
LABEL_305:
          v175 = v1194;
LABEL_306:
          v176 = v118;
LABEL_470:
          v354 = (unsigned __int8 *)operator new(0x78uLL);
          *((_QWORD *)v354 + 4) = v175;
          v354[40] = 0;
          v354[112] = 0;
          *(_QWORD *)v354 = 0;
          *((_QWORD *)v354 + 1) = 0;
          *((_QWORD *)v354 + 2) = v118;
          *v176 = (uint64_t *)v354;
          v355 = **(_QWORD **)(a2 + 104);
          v356 = (uint64_t *)v354;
          if (v355)
          {
            *(_QWORD *)(a2 + 104) = v355;
            v356 = *v176;
          }
          sub_207CC24B4(*(uint64_t **)(a2 + 112), v356);
          ++*(_QWORD *)(a2 + 120);
          goto LABEL_473;
        }
        if (width.i32[3] != 1
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 614, (uint64_t)"input.Planes() == 1", 19, (uint64_t)"Espresso execution with 1 non-float color component but multiple channels not yet implemented. Use interleaved (RGBA/BGRA) images instead", 137, (void (*)(void **))sub_208216974))
        {
          goto LABEL_1666;
        }
        v1232 = width;
        v1233 = v1140;
        v1234 = v1141;
        v1235 = v1142;
        LOBYTE(v1236) = 0;
        v1243 = 0;
        if (v1149)
        {
          v1236 = off_24C06E878;
          if (*((_QWORD *)&v1143 + 1))
          {
            v81 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
            v83 = v1146;
            v84 = v1147;
            v85 = v1148;
            do
              v86 = __ldxr(v81);
            while (__stxr(v86 + 1, v81));
          }
          else
          {
            v83 = v1146;
            v84 = v1147;
            v85 = v1148;
          }
          v1237 = v1143;
          v1238 = v1144;
          v1239 = v1145;
          v1240 = v83;
          v1241 = v84;
          v1242 = v85;
          if (*((_QWORD *)&v1143 + 1))
          {
            v120 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v1143 + 1) + 16))(*((_QWORD *)&v1143 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1143 + 1));
            }
          }
          v1243 = 1;
        }
        sub_207CA91B0((uint64_t)&v1232, (uint64_t)v1309);
        if (!v1243)
          goto LABEL_205;
        v122 = (std::__shared_weak_count *)*((_QWORD *)&v1237 + 1);
        if (!*((_QWORD *)&v1237 + 1))
          goto LABEL_205;
        v123 = (unint64_t *)(*((_QWORD *)&v1237 + 1) + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
          if ((_BYTE)v1310)
            goto LABEL_206;
        }
        else
        {
LABEL_205:
          if ((_BYTE)v1310)
          {
LABEL_206:
            v1195.i64[0] = (uint64_t)off_24C06EF48;
            v126 = *(std::__shared_weak_count **)&v1309[16];
            v125 = *(_QWORD *)&v1309[8];
            if (*(_QWORD *)&v1309[16])
            {
              v127 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
              do
                v128 = __ldxr(v127);
              while (__stxr(v128 + 1, v127));
              do
                v129 = __ldxr(v127);
              while (__stxr(v129 + 1, v127));
              *(_OWORD *)&v1196[8] = *(_OWORD *)&v1309[24];
              *(_OWORD *)&v1196[24] = *(_OWORD *)&v1309[40];
              *(_OWORD *)v1197 = *(_OWORD *)&v1309[56];
              do
                v130 = __ldxr(v127);
              while (__stxr(v130 + 1, v127));
              v1195.i64[1] = v125;
              *(_QWORD *)v1196 = v126;
              do
                v131 = __ldaxr(v127);
              while (__stlxr(v131 - 1, v127));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
              do
                v132 = __ldaxr(v127);
              while (__stlxr(v132 - 1, v127));
              if (!v132)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
              v126 = *(std::__shared_weak_count **)v1196;
            }
            else
            {
              v1195.i64[1] = *(_QWORD *)&v1309[8];
              *(_QWORD *)v1196 = 0;
              *(_OWORD *)&v1196[8] = *(_OWORD *)&v1309[24];
              *(_OWORD *)&v1196[24] = *(_OWORD *)&v1309[40];
              *(_OWORD *)v1197 = *(_OWORD *)&v1309[56];
            }
            sub_2080B7390((uint64_t)&v1150, (uint64_t)&v1180, v1195.i64[1], v126);
            if (v126)
            {
              v150 = (unint64_t *)&v126->__shared_owners_;
              do
                v151 = __ldaxr(v150);
              while (__stlxr(v151 - 1, v150));
              if (!v151)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            if (!(_BYTE)v1310)
              goto LABEL_952;
            v152 = *(std::__shared_weak_count **)&v1309[16];
            if (!*(_QWORD *)&v1309[16])
              goto LABEL_952;
            v153 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
LABEL_262:
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
            goto LABEL_952;
          }
        }
        v117 = 5;
        v118 = v1061;
        v119 = *v1061;
        if (*v1061)
          goto LABEL_460;
        goto LABEL_305;
      }
      if (width.i32[3] != 1
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 598, (uint64_t)"input.Planes() == 1", 19, (uint64_t)"Espresso execution with 1 non-float color component but multiple channels not yet implemented. Use interleaved (RGBA/BGRA) images instead", 137, (void (*)(void **))sub_208216974))
      {
        goto LABEL_1666;
      }
      v1283 = width;
      v1284 = v1140;
      v1285 = v1141;
      v1286 = v1142;
      LOBYTE(v1287) = 0;
      v1294 = 0;
      if (v1149)
      {
        v1287 = off_24C06E878;
        if (*((_QWORD *)&v1143 + 1))
        {
          v87 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
          v89 = v1146;
          v90 = v1147;
          v91 = v1148;
          do
            v92 = __ldxr(v87);
          while (__stxr(v92 + 1, v87));
        }
        else
        {
          v89 = v1146;
          v90 = v1147;
          v91 = v1148;
        }
        v1288 = v1143;
        v1289 = v1144;
        v1290 = v1145;
        v1291 = v89;
        v1292 = v90;
        v1293 = v91;
        if (*((_QWORD *)&v1143 + 1))
        {
          v133 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v1143 + 1) + 16))(*((_QWORD *)&v1143 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1143 + 1));
          }
        }
        v1294 = 1;
      }
      sub_207CA8B54((uint64_t)&v1283, (uint64_t)__src);
      if (!v1294)
        goto LABEL_232;
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v1288 + 1);
      if (!*((_QWORD *)&v1288 + 1))
        goto LABEL_232;
      v136 = (unint64_t *)(*((_QWORD *)&v1288 + 1) + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
        if (v1179)
        {
LABEL_233:
          *(_QWORD *)&v1174 = off_24C06ECD8;
          v138 = *(_QWORD *)&__src[8];
          v139 = *(std::__shared_weak_count **)&__src[16];
          if (*(_QWORD *)&__src[16])
          {
            v140 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
            do
              v142 = __ldxr(v140);
            while (__stxr(v142 + 1, v140));
            *(_OWORD *)&v1175[8] = *(_OWORD *)&__src[24];
            v1176 = *(_QWORD *)&__src[40];
            do
              v143 = __ldxr(v140);
            while (__stxr(v143 + 1, v140));
            *((_QWORD *)&v1174 + 1) = v138;
            *(_QWORD *)v1175 = v139;
            do
              v144 = __ldaxr(v140);
            while (__stlxr(v144 - 1, v140));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
            do
              v145 = __ldaxr(v140);
            while (__stlxr(v145 - 1, v140));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
            v146 = *(std::__shared_weak_count **)v1175;
            v138 = *((_QWORD *)&v1174 + 1);
            if (*(_QWORD *)v1175)
            {
              v147 = (unint64_t *)(*(_QWORD *)v1175 + 8);
              do
                v148 = __ldxr(v147);
              while (__stxr(v148 + 1, v147));
              do
                v149 = __ldaxr(v147);
              while (__stlxr(v149 - 1, v147));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
          }
          else
          {
            *((_QWORD *)&v1174 + 1) = *(_QWORD *)&__src[8];
            *(_QWORD *)v1175 = 0;
            *(_OWORD *)&v1175[8] = *(_OWORD *)&__src[24];
            v1176 = *(_QWORD *)&__src[40];
          }
          sub_2081299D4(v138, v1309);
          if (*(_QWORD *)&v1309[8])
          {
            v155 = **(_QWORD **)&v1309[8];
            v156 = *(std::__shared_weak_count **)(*(_QWORD *)&v1309[8] + 8);
            if (v156)
            {
              v157 = (unint64_t *)&v156->__shared_owners_;
              do
                v158 = __ldxr(v157);
              while (__stxr(v158 + 1, v157));
              *(_QWORD *)v1302 = v155;
              *(_QWORD *)&v1302[8] = v156;
              do
                v159 = __ldxr(v157);
              while (__stxr(v159 + 1, v157));
              do
                v160 = __ldaxr(v157);
              while (__stlxr(v160 - 1, v157));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
              goto LABEL_276;
            }
          }
          else
          {
            v155 = 0;
          }
          *(_OWORD *)v1302 = v155;
LABEL_276:
          *(_QWORD *)v1309 = &off_24C08A5D8;
          v161 = *(std::__shared_weak_count **)&v1309[16];
          if (*(_QWORD *)&v1309[16])
          {
            v162 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          if (!CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)v1302)
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          if (*v1180 && *v1181 == 1)
            v164 = espresso_network_bind_direct_cvpixelbuffer();
          else
            v164 = espresso_network_bind_input_cvpixelbuffer();
          sub_2080B76F0((uint64_t)&v1150, v1185, v164);
          v165 = *(std::__shared_weak_count **)&v1302[8];
          if (*(_QWORD *)&v1302[8])
          {
            v166 = (unint64_t *)(*(_QWORD *)&v1302[8] + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          v168 = *(std::__shared_weak_count **)v1175;
          if (*(_QWORD *)v1175)
          {
            v169 = (unint64_t *)(*(_QWORD *)v1175 + 8);
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          v171 = 1;
          goto LABEL_298;
        }
      }
      else
      {
LABEL_232:
        if (v1179)
          goto LABEL_233;
      }
      v1270 = width;
      v1271 = v1140;
      v1272 = v1141;
      v1273 = v1142;
      LOBYTE(v1274) = 0;
      v1281 = 0;
      if (v1149)
      {
        v1274 = off_24C06E878;
        if (*((_QWORD *)&v1143 + 1))
        {
          v391 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
          do
            v392 = __ldxr(v391);
          while (__stxr(v392 + 1, v391));
          v393 = v1146;
          v394 = v1147;
          v395 = v1148;
          do
            v396 = __ldxr(v391);
          while (__stxr(v396 + 1, v391));
        }
        else
        {
          v393 = v1146;
          v394 = v1147;
          v395 = v1148;
        }
        v1275 = v1143;
        v1276 = v1144;
        v1277 = v1145;
        v1278 = v393;
        v1279 = v394;
        v1280 = v395;
        if (*((_QWORD *)&v1143 + 1))
        {
          v651 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
          do
            v652 = __ldaxr(v651);
          while (__stlxr(v652 - 1, v651));
          if (!v652)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v1143 + 1) + 16))(*((_QWORD *)&v1143 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1143 + 1));
          }
        }
        v1281 = 1;
      }
      sub_207CA91B0((uint64_t)&v1270, (uint64_t)v1309);
      if (v1281)
      {
        v653 = (std::__shared_weak_count *)*((_QWORD *)&v1275 + 1);
        if (*((_QWORD *)&v1275 + 1))
        {
          v654 = (unint64_t *)(*((_QWORD *)&v1275 + 1) + 8);
          do
            v655 = __ldaxr(v654);
          while (__stlxr(v655 - 1, v654));
          if (!v655)
          {
            ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
            std::__shared_weak_count::__release_weak(v653);
          }
        }
      }
      if ((_BYTE)v1310)
      {
        v1204.i64[0] = (uint64_t)off_24C06EF48;
        v657 = *(std::__shared_weak_count **)&v1309[16];
        v656 = *(_QWORD *)&v1309[8];
        if (*(_QWORD *)&v1309[16])
        {
          v658 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
          do
            v659 = __ldxr(v658);
          while (__stxr(v659 + 1, v658));
          do
            v660 = __ldxr(v658);
          while (__stxr(v660 + 1, v658));
          *(_OWORD *)&v1205[8] = *(_OWORD *)&v1309[24];
          *(_OWORD *)&v1205[24] = *(_OWORD *)&v1309[40];
          *(_OWORD *)v1206 = *(_OWORD *)&v1309[56];
          do
            v661 = __ldxr(v658);
          while (__stxr(v661 + 1, v658));
          v1204.i64[1] = v656;
          *(_QWORD *)v1205 = v657;
          do
            v662 = __ldaxr(v658);
          while (__stlxr(v662 - 1, v658));
          if (!v662)
          {
            ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
            std::__shared_weak_count::__release_weak(v657);
          }
          do
            v663 = __ldaxr(v658);
          while (__stlxr(v663 - 1, v658));
          if (!v663)
          {
            ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
            std::__shared_weak_count::__release_weak(v657);
          }
          v657 = *(std::__shared_weak_count **)v1205;
        }
        else
        {
          v1204.i64[1] = *(_QWORD *)&v1309[8];
          *(_QWORD *)v1205 = 0;
          *(_OWORD *)&v1205[8] = *(_OWORD *)&v1309[24];
          *(_OWORD *)&v1205[24] = *(_OWORD *)&v1309[40];
          *(_OWORD *)v1206 = *(_OWORD *)&v1309[56];
        }
        sub_2080B7390((uint64_t)&v1150, (uint64_t)&v1180, v1204.i64[1], v657);
        if (v657)
        {
          v670 = (unint64_t *)&v657->__shared_owners_;
          do
            v671 = __ldaxr(v670);
          while (__stlxr(v671 - 1, v670));
          if (!v671)
          {
LABEL_911:
            ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
            std::__shared_weak_count::__release_weak(v657);
          }
        }
LABEL_1630:
        v171 = 1;
        if (!(_BYTE)v1310)
          goto LABEL_298;
        goto LABEL_1631;
      }
      v1244 = width;
      v1245 = v1140;
      v1246 = v1141;
      v1247 = v1142;
      LOBYTE(v1248) = 0;
      v1255 = 0;
      if (!v1149)
        goto LABEL_1590;
      v1248 = off_24C06E878;
      if (*((_QWORD *)&v1143 + 1))
      {
        v664 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
        do
          v665 = __ldxr(v664);
        while (__stxr(v665 + 1, v664));
        v666 = v1146;
        v667 = v1147;
        v668 = v1148;
        do
          v669 = __ldxr(v664);
        while (__stxr(v669 + 1, v664));
      }
      else
      {
        v666 = v1146;
        v667 = v1147;
        v668 = v1148;
      }
      v1249 = v1143;
      v1250 = v1144;
      v1251 = v1145;
      v1252 = v666;
      v1253 = v667;
      v1254 = v668;
      if (*((_QWORD *)&v1143 + 1))
      {
        v750 = (unint64_t *)(*((_QWORD *)&v1143 + 1) + 8);
        do
          v751 = __ldaxr(v750);
        while (__stlxr(v751 - 1, v750));
        if (!v751)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v1143 + 1) + 16))(*((_QWORD *)&v1143 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1143 + 1));
        }
        v667 = v1253;
      }
      v1255 = 1;
      if (v667 != 3)
      {
        LOBYTE(__dst[0]) = 0;
        v1173 = 0;
        goto LABEL_1564;
      }
      *(_QWORD *)v1302 = &off_24C074A58;
      sub_207FBD778((uint64_t)&v1248, (uint64_t)&v1302[8]);
      v752 = *(_OWORD *)&v1302[8];
      *(_QWORD *)pixelBuffer = &off_24C074A58;
      *(_OWORD *)&pixelBuffer[8] = *(_OWORD *)&v1302[8];
      *(_OWORD *)&v1302[8] = 0uLL;
      *(_OWORD *)&pixelBuffer[24] = *(_OWORD *)&v1302[24];
      *(_OWORD *)&pixelBuffer[34] = *(_OWORD *)&v1302[34];
      LOBYTE(v1224) = 1;
      if ((_QWORD)v752)
      {
        *(_OWORD *)v1296 = v752;
        if (*((_QWORD *)&v752 + 1))
        {
          v753 = (unint64_t *)(*((_QWORD *)&v752 + 1) + 8);
          do
            v754 = __ldxr(v753);
          while (__stxr(v754 + 1, v753));
        }
        if (*(uint64_t (***)())v752 == &off_24C088C68)
        {
          *(_OWORD *)v1302 = v752;
          v755 = v1296;
        }
        else
        {
          v755 = v1302;
        }
      }
      else
      {
        *(_QWORD *)&v1296[8] = 0;
        *(_QWORD *)v1296 = 0;
        v755 = v1302;
      }
      *(_QWORD *)v755 = 0;
      *((_QWORD *)v755 + 1) = 0;
      v838 = *(std::__shared_weak_count **)&v1296[8];
      if (*(_QWORD *)&v1296[8])
      {
        v839 = (unint64_t *)(*(_QWORD *)&v1296[8] + 8);
        do
          v840 = __ldaxr(v839);
        while (__stlxr(v840 - 1, v839));
        if (!v840)
        {
          ((void (*)(std::__shared_weak_count *))v838->__on_zero_shared)(v838);
          std::__shared_weak_count::__release_weak(v838);
        }
      }
      v841 = *(_OWORD *)v1302;
      if (*(_QWORD *)&v1302[8])
      {
        v842 = (unint64_t *)(*(_QWORD *)&v1302[8] + 8);
        do
          v843 = __ldaxr(v842);
        while (__stlxr(v843 - 1, v842));
        if (!v843)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v841 + 1) + 16))(*((_QWORD *)&v841 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v841 + 1));
        }
      }
      if (!(_QWORD)v841)
      {
        LOBYTE(__dst[0]) = 0;
        v1173 = 0;
        goto LABEL_1558;
      }
      v844 = *(uint64_t (****)())&pixelBuffer[8];
      v845 = *(std::__shared_weak_count **)&pixelBuffer[16];
      if (*(_QWORD *)&pixelBuffer[16])
      {
        v846 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
        do
          v847 = __ldxr(v846);
        while (__stxr(v847 + 1, v846));
      }
      if (v844 && *v844 == &off_24C088C68)
      {
        if (v845)
        {
          v848 = (unint64_t *)&v845->__shared_owners_;
          do
            v849 = __ldxr(v848);
          while (__stxr(v849 + 1, v848));
          *(_OWORD *)v1296 = *(_OWORD *)&pixelBuffer[24];
          *(_QWORD *)&v1296[16] = *(_QWORD *)&pixelBuffer[40];
          do
            v850 = __ldxr(v848);
          while (__stxr(v850 + 1, v848));
          do
            v851 = __ldaxr(v848);
          while (__stlxr(v851 - 1, v848));
          if (!v851)
          {
            ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
            std::__shared_weak_count::__release_weak(v845);
          }
          do
            v852 = __ldaxr(v848);
          while (__stlxr(v852 - 1, v848));
          if (!v852)
          {
            ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
            std::__shared_weak_count::__release_weak(v845);
          }
          *(_QWORD *)v1316 = &off_24C084D90;
          *(_QWORD *)&v1316[8] = v844;
          *(_QWORD *)&v1316[16] = v845;
          *(_OWORD *)&v1316[24] = *(_OWORD *)v1296;
          *(_OWORD *)&v1316[33] = *(_OWORD *)&v1296[9];
          LOBYTE(v1317) = 1;
          do
            v853 = __ldxr(v848);
          while (__stxr(v853 + 1, v848));
          do
            v854 = __ldaxr(v848);
          while (__stlxr(v854 - 1, v848));
          if (!v854)
          {
            ((void (*)(std::__shared_weak_count *))v845->__on_zero_shared)(v845);
            std::__shared_weak_count::__release_weak(v845);
          }
        }
        else
        {
          *(_OWORD *)v1296 = *(_OWORD *)&pixelBuffer[24];
          *(_QWORD *)&v1296[16] = *(_QWORD *)&pixelBuffer[40];
          *(_QWORD *)v1316 = &off_24C084D90;
          *(_QWORD *)&v1316[8] = v844;
          *(_QWORD *)&v1316[16] = 0;
          *(_OWORD *)&v1316[24] = *(_OWORD *)&pixelBuffer[24];
          *(_OWORD *)&v1316[33] = *(_OWORD *)&v1296[9];
          LOBYTE(v1317) = 1;
        }
        sub_208131A8C((uint64_t)v844, v1302);
        if (*(_QWORD *)&v1302[8])
        {
          v855 = **(__CVBuffer ***)&v1302[8];
          v856 = *(std::__shared_weak_count **)(*(_QWORD *)&v1302[8] + 8);
          if (v856)
          {
            v857 = (unint64_t *)&v856->__shared_owners_;
            do
              v858 = __ldxr(v857);
            while (__stxr(v858 + 1, v857));
            do
              v859 = __ldaxr(v857);
            while (__stlxr(v859 - 1, v857));
            if (!v859)
            {
              ((void (*)(std::__shared_weak_count *))v856->__on_zero_shared)(v856);
              std::__shared_weak_count::__release_weak(v856);
            }
          }
        }
        else
        {
          v855 = 0;
        }
        v860 = CVPixelBufferGetIOSurface(v855);
        *(_QWORD *)v1302 = &off_24C08A5D8;
        v861 = *(std::__shared_weak_count **)&v1302[16];
        if (*(_QWORD *)&v1302[16])
        {
          v862 = (unint64_t *)(*(_QWORD *)&v1302[16] + 8);
          do
            v863 = __ldaxr(v862);
          while (__stlxr(v863 - 1, v862));
          if (!v863)
          {
            ((void (*)(std::__shared_weak_count *))v861->__on_zero_shared)(v861);
            std::__shared_weak_count::__release_weak(v861);
          }
        }
        LOBYTE(__dst[0]) = 0;
        v1173 = 0;
        v864 = v1317;
        if (!v860)
          goto LABEL_1552;
        if ((_BYTE)v1317)
        {
          __dst[0] = &off_24C084D90;
          v865 = *(void **)&v1316[8];
          v866 = *(std::__shared_weak_count **)&v1316[16];
          if (*(_QWORD *)&v1316[16])
          {
            v867 = (unint64_t *)(*(_QWORD *)&v1316[16] + 8);
            do
              v868 = __ldxr(v867);
            while (__stxr(v868 + 1, v867));
            do
              v869 = __ldxr(v867);
            while (__stxr(v869 + 1, v867));
            *(_OWORD *)&v1171[8] = *(_OWORD *)&v1316[24];
            v1172 = *(_QWORD *)&v1316[40];
            do
              v870 = __ldxr(v867);
            while (__stxr(v870 + 1, v867));
            __dst[1] = v865;
            *(_QWORD *)v1171 = v866;
            do
              v871 = __ldaxr(v867);
            while (__stlxr(v871 - 1, v867));
            if (!v871)
            {
              ((void (*)(std::__shared_weak_count *))v866->__on_zero_shared)(v866);
              std::__shared_weak_count::__release_weak(v866);
            }
            do
              v872 = __ldaxr(v867);
            while (__stlxr(v872 - 1, v867));
            if (!v872)
            {
              ((void (*)(std::__shared_weak_count *))v866->__on_zero_shared)(v866);
              std::__shared_weak_count::__release_weak(v866);
            }
          }
          else
          {
            __dst[1] = *(void **)&v1316[8];
            *(_QWORD *)v1171 = 0;
            *(_OWORD *)&v1171[8] = *(_OWORD *)&v1316[24];
            v1172 = *(_QWORD *)&v1316[40];
          }
          v1173 = 1;
          v864 = v1317;
LABEL_1552:
          if (v864)
          {
            v938 = *(std::__shared_weak_count **)&v1316[16];
            if (*(_QWORD *)&v1316[16])
            {
              v939 = (unint64_t *)(*(_QWORD *)&v1316[16] + 8);
              do
                v940 = __ldaxr(v939);
              while (__stlxr(v940 - 1, v939));
              if (!v940)
              {
                ((void (*)(std::__shared_weak_count *))v938->__on_zero_shared)(v938);
                std::__shared_weak_count::__release_weak(v938);
              }
            }
          }
        }
LABEL_1558:
        if ((_BYTE)v1224)
        {
          v941 = *(std::__shared_weak_count **)&pixelBuffer[16];
          if (*(_QWORD *)&pixelBuffer[16])
          {
            v942 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
            do
              v943 = __ldaxr(v942);
            while (__stlxr(v943 - 1, v942));
            if (!v943)
            {
              ((void (*)(std::__shared_weak_count *))v941->__on_zero_shared)(v941);
              std::__shared_weak_count::__release_weak(v941);
            }
          }
        }
LABEL_1564:
        if (v1255)
        {
          v944 = (std::__shared_weak_count *)*((_QWORD *)&v1249 + 1);
          if (*((_QWORD *)&v1249 + 1))
          {
            v945 = (unint64_t *)(*((_QWORD *)&v1249 + 1) + 8);
            do
              v946 = __ldaxr(v945);
            while (__stlxr(v946 - 1, v945));
            if (!v946)
            {
              ((void (*)(std::__shared_weak_count *))v944->__on_zero_shared)(v944);
              std::__shared_weak_count::__release_weak(v944);
            }
          }
        }
        if (v1173)
        {
          v1165 = &off_24C084D90;
          v947 = __dst[1];
          v948 = *(std::__shared_weak_count **)v1171;
          if (*(_QWORD *)v1171)
          {
            v949 = (unint64_t *)(*(_QWORD *)v1171 + 8);
            do
              v950 = __ldxr(v949);
            while (__stxr(v950 + 1, v949));
            do
              v951 = __ldxr(v949);
            while (__stxr(v951 + 1, v949));
            v1168 = *(_OWORD *)&v1171[8];
            v1169 = v1172;
            do
              v952 = __ldxr(v949);
            while (__stxr(v952 + 1, v949));
            v1166 = v947;
            v1167 = v948;
            do
              v953 = __ldaxr(v949);
            while (__stlxr(v953 - 1, v949));
            if (!v953)
            {
              ((void (*)(std::__shared_weak_count *))v948->__on_zero_shared)(v948);
              std::__shared_weak_count::__release_weak(v948);
            }
            do
              v954 = __ldaxr(v949);
            while (__stlxr(v954 - 1, v949));
            if (!v954)
            {
              ((void (*)(std::__shared_weak_count *))v948->__on_zero_shared)(v948);
              std::__shared_weak_count::__release_weak(v948);
            }
            v955 = v1167;
            v947 = v1166;
            if (v1167)
            {
              v956 = (unint64_t *)&v1167->__shared_owners_;
              do
                v957 = __ldxr(v956);
              while (__stxr(v957 + 1, v956));
              do
                v958 = __ldaxr(v956);
              while (__stlxr(v958 - 1, v956));
              if (!v958)
              {
                ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
                std::__shared_weak_count::__release_weak(v955);
              }
            }
          }
          else
          {
            v1166 = __dst[1];
            v1167 = 0;
            v1168 = *(_OWORD *)&v1171[8];
            v1169 = v1172;
          }
          sub_208131A8C((uint64_t)v947, v1302);
          if (*(_QWORD *)&v1302[8])
          {
            v959 = **(_QWORD **)&v1302[8];
            v960 = *(std::__shared_weak_count **)(*(_QWORD *)&v1302[8] + 8);
            if (v960)
            {
              v961 = (unint64_t *)&v960->__shared_owners_;
              do
                v962 = __ldxr(v961);
              while (__stxr(v962 + 1, v961));
              *(_QWORD *)pixelBuffer = v959;
              *(_QWORD *)&pixelBuffer[8] = v960;
              do
                v963 = __ldxr(v961);
              while (__stxr(v963 + 1, v961));
              do
                v964 = __ldaxr(v961);
              while (__stlxr(v964 - 1, v961));
              if (!v964)
              {
                ((void (*)(std::__shared_weak_count *))v960->__on_zero_shared)(v960);
                std::__shared_weak_count::__release_weak(v960);
              }
LABEL_1604:
              *(_QWORD *)v1302 = &off_24C08A5D8;
              v965 = *(std::__shared_weak_count **)&v1302[16];
              if (*(_QWORD *)&v1302[16])
              {
                v966 = (unint64_t *)(*(_QWORD *)&v1302[16] + 8);
                do
                  v967 = __ldaxr(v966);
                while (__stlxr(v967 - 1, v966));
                if (!v967)
                {
                  ((void (*)(std::__shared_weak_count *))v965->__on_zero_shared)(v965);
                  std::__shared_weak_count::__release_weak(v965);
                }
              }
              if (!CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)pixelBuffer)
                && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_208216974))
              {
                abort();
              }
              if (*v1180 && *v1181 == 1)
                v968 = espresso_network_bind_direct_cvpixelbuffer();
              else
                v968 = espresso_network_bind_input_cvpixelbuffer();
              sub_2080B76F0((uint64_t)&v1150, v1185, v968);
              v969 = *(std::__shared_weak_count **)&pixelBuffer[8];
              if (*(_QWORD *)&pixelBuffer[8])
              {
                v970 = (unint64_t *)(*(_QWORD *)&pixelBuffer[8] + 8);
                do
                  v971 = __ldaxr(v970);
                while (__stlxr(v971 - 1, v970));
                if (!v971)
                {
                  ((void (*)(std::__shared_weak_count *))v969->__on_zero_shared)(v969);
                  std::__shared_weak_count::__release_weak(v969);
                }
              }
              v972 = v1167;
              if (v1167)
              {
                v973 = (unint64_t *)&v1167->__shared_owners_;
                do
                  v974 = __ldaxr(v973);
                while (__stlxr(v974 - 1, v973));
                if (!v974)
                {
                  ((void (*)(std::__shared_weak_count *))v972->__on_zero_shared)(v972);
                  std::__shared_weak_count::__release_weak(v972);
                }
              }
              if (v1173)
              {
                v657 = *(std::__shared_weak_count **)v1171;
                if (*(_QWORD *)v1171)
                {
                  v975 = (unint64_t *)(*(_QWORD *)v1171 + 8);
                  do
                    v976 = __ldaxr(v975);
                  while (__stlxr(v976 - 1, v975));
                  if (!v976)
                    goto LABEL_911;
                }
              }
              goto LABEL_1630;
            }
          }
          else
          {
            v959 = 0;
          }
          *(_QWORD *)pixelBuffer = v959;
          *(_QWORD *)&pixelBuffer[8] = 0;
          goto LABEL_1604;
        }
LABEL_1590:
        v171 = 0;
        if (!(_BYTE)v1310)
          goto LABEL_298;
LABEL_1631:
        v977 = *(std::__shared_weak_count **)&v1309[16];
        if (*(_QWORD *)&v1309[16])
        {
          v978 = (unint64_t *)(*(_QWORD *)&v1309[16] + 8);
          do
            v979 = __ldaxr(v978);
          while (__stlxr(v979 - 1, v978));
          if (!v979)
          {
            ((void (*)(std::__shared_weak_count *))v977->__on_zero_shared)(v977);
            std::__shared_weak_count::__release_weak(v977);
          }
        }
        if (!v1179)
          goto LABEL_303;
        v172 = *(std::__shared_weak_count **)&__src[16];
        if (!*(_QWORD *)&__src[16])
          goto LABEL_303;
LABEL_298:
        v173 = (unint64_t *)(*(_QWORD *)&__src[16] + 8);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
          if (v171)
            goto LABEL_952;
        }
        else
        {
LABEL_303:
          if (v171)
            goto LABEL_952;
        }
        v117 = 1;
        v118 = v1061;
        v119 = *v1061;
        if (!*v1061)
          goto LABEL_305;
        goto LABEL_460;
      }
      v997 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v998 = atomic_load((unsigned __int8 *)&qword_253E51450);
      if ((v998 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51450))
      {
LABEL_1683:
        v999 = sub_207FBDA70();
        *(_QWORD *)v1302 = "Attempting to create an ";
        *(_QWORD *)&v1302[8] = 24;
        v1000 = &qword_253E51470;
        v1001 = byte_253E51487;
        if (byte_253E51487 < 0)
        {
          v1001 = unk_253E51478;
          v1000 = (uint64_t *)qword_253E51470;
        }
        *(_QWORD *)&v1302[16] = v1000;
        *(_QWORD *)&v1302[24] = v1001;
        *(_QWORD *)&v1302[32] = " from an ";
        *(_QWORD *)&v1302[40] = 9;
        v1002 = HIBYTE(v999->__r_.__value_.__r.__words[2]);
        if ((v1002 & 0x80u) == 0)
          v1003 = v999;
        else
          v1003 = (std::string *)v999->__r_.__value_.__r.__words[0];
        if ((v1002 & 0x80u) != 0)
          v1002 = v999->__r_.__value_.__l.__size_;
        *(_QWORD *)&v1302[48] = v1003;
        *(_QWORD *)&v1302[56] = v1002;
        sub_207CAC8F4((uint64_t)v1302, (uint64_t)&v1302[64], 0, 0, &v1298);
        v1004 = *(_QWORD *)&pixelBuffer[8];
        if (*(_QWORD *)&pixelBuffer[8])
        {
          v1020 = *(std::__shared_weak_count **)&pixelBuffer[16];
          if (*(_QWORD *)&pixelBuffer[16])
          {
            v1021 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
            do
              v1022 = __ldxr(v1021);
            while (__stxr(v1022 + 1, v1021));
            do
              v1023 = __ldaxr(v1021);
            while (__stlxr(v1023 - 1, v1021));
            if (!v1023)
            {
              ((void (*)(std::__shared_weak_count *))v1020->__on_zero_shared)(v1020);
              std::__shared_weak_count::__release_weak(v1020);
            }
            v1024 = *(std::__shared_weak_count **)&pixelBuffer[16];
            v1004 = *(_QWORD *)&pixelBuffer[8];
            if (*(_QWORD *)&pixelBuffer[16])
            {
              v1025 = (unint64_t *)(*(_QWORD *)&pixelBuffer[16] + 8);
              do
                v1026 = __ldxr(v1025);
              while (__stxr(v1026 + 1, v1025));
              do
                v1027 = __ldaxr(v1025);
              while (__stlxr(v1027 - 1, v1025));
              if (!v1027)
              {
                ((void (*)(std::__shared_weak_count *))v1024->__on_zero_shared)(v1024);
                std::__shared_weak_count::__release_weak(v1024);
              }
            }
          }
          v1028 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1004 + 80))(v1004);
          v1030 = HIBYTE(v1298.__r_.__value_.__r.__words[2]);
          v1031 = &v1298;
          if ((v1298.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            v1030 = v1298.__r_.__value_.__l.__size_;
            v1031 = (std::string *)v1298.__r_.__value_.__r.__words[0];
          }
          *(_QWORD *)v1302 = v1031;
          *(_QWORD *)&v1302[8] = v1030;
          *(_QWORD *)&v1302[16] = " but the other image contains an incompatible buffer type ";
          *(_QWORD *)&v1302[24] = 58;
          *(_QWORD *)&v1302[32] = v1028;
          *(_QWORD *)&v1302[40] = v1029;
          sub_207CAC8F4((uint64_t)v1302, (uint64_t)&v1302[48], 0, 0, &v1297);
          LOBYTE(v1005) = *((_BYTE *)&v1298.__r_.__value_.__s + 23);
LABEL_1751:
          if ((v1005 & 0x80) != 0)
            operator delete(v1298.__r_.__value_.__l.__data_);
          std::logic_error::logic_error(v997, &v1297);
          v997->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(v997, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
        }
        v1005 = SHIBYTE(v1298.__r_.__value_.__r.__words[2]);
        if ((v1298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v1006 = HIBYTE(v1298.__r_.__value_.__r.__words[2]);
        else
          v1006 = v1298.__r_.__value_.__l.__size_;
        v1007 = v1006 + 46;
        if (v1006 + 46 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        if (v1007 > 0x16)
        {
          v1037 = (v1007 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1007 | 7) != 0x17)
            v1037 = v1007 | 7;
          v1038 = v1037 + 1;
          v1033 = operator new(v1037 + 1);
          v1297.__r_.__value_.__r.__words[2] = v1038 | 0x8000000000000000;
          v1297.__r_.__value_.__r.__words[0] = (std::string::size_type)v1033;
          v1297.__r_.__value_.__l.__size_ = v1006 + 46;
          if (!v1006)
            goto LABEL_1750;
        }
        else
        {
          memset(&v1297, 0, sizeof(v1297));
          v1033 = &v1297;
          *((_BYTE *)&v1297.__r_.__value_.__s + 23) = v1006 + 46;
        }
        if (v1005 >= 0)
          v1039 = &v1298;
        else
          v1039 = (std::string *)v1298.__r_.__value_.__r.__words[0];
        memmove(v1033, v1039, v1006);
LABEL_1750:
        strcpy((char *)v1033 + v1006, " but the other image does not contain a buffer");
        goto LABEL_1751;
      }
      *((_BYTE *)&v1300.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v1300, "ConstImageView");
      v1041 = sub_207F355D4();
      if (SHIBYTE(v1041->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_207CA40D8(&__s, v1041->__r_.__value_.__l.__data_, v1041->__r_.__value_.__l.__size_);
      }
      else
      {
        v1044 = *(_OWORD *)&v1041->__r_.__value_.__l.__data_;
        __s.__r_.__value_.__r.__words[2] = v1041->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v1044;
      }
      sub_2082144D8(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)v1302);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v1045 = sub_207CACD14();
      if (*((char *)v1045 + 23) < 0)
      {
        sub_207CA40D8(&__s, *(void **)v1045, *((_QWORD *)v1045 + 1));
      }
      else
      {
        v1050 = *v1045;
        __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v1045 + 2);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v1050;
      }
      sub_2082144D8(&__s, "cv3d::kit::img::", 16, "", 0, 1, 1, (uint64_t)&v1302[24]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      sub_207CAA110(&v1299, (uint64_t)v1302, 2uLL);
      sub_208215D20((char *)&v1300, (uint64_t *)&v1299, (std::string *)&qword_253E51470, v1051, v1052);
      v1053 = v1299.__r_.__value_.__r.__words[0];
      if (v1299.__r_.__value_.__r.__words[0])
      {
        v1056 = v1299.__r_.__value_.__l.__size_;
        v1057 = (void *)v1299.__r_.__value_.__r.__words[0];
        if (v1299.__r_.__value_.__l.__size_ != v1299.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v1056 - 1) < 0)
              operator delete(*(void **)(v1056 - 24));
            v1056 -= 24;
          }
          while (v1056 != v1053);
          v1057 = (void *)v1299.__r_.__value_.__r.__words[0];
        }
        v1299.__r_.__value_.__l.__size_ = v1053;
        operator delete(v1057);
        if ((v1302[47] & 0x80000000) != 0)
        {
LABEL_1784:
          operator delete(*(void **)&v1302[24]);
          if ((v1302[23] & 0x80000000) == 0)
            goto LABEL_1785;
          goto LABEL_1806;
        }
      }
      else if ((v1302[47] & 0x80000000) != 0)
      {
        goto LABEL_1784;
      }
      if ((v1302[23] & 0x80000000) == 0)
      {
LABEL_1785:
        if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_1787:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51470, &dword_207C77000);
          __cxa_guard_release(&qword_253E51450);
          goto LABEL_1683;
        }
LABEL_1786:
        operator delete(v1300.__r_.__value_.__l.__data_);
        goto LABEL_1787;
      }
LABEL_1806:
      operator delete(*(void **)v1302);
      if ((SHIBYTE(v1300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1787;
      goto LABEL_1786;
    }
    v31 = 4;
    if (v12 != 65)
      v31 = 1;
    if (v31 != *(unsigned int *)&v1154[24])
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 668, (uint64_t)"", 0, (uint64_t)"Multiple batch-size is not supported with interleaved format.", 61, (void (*)(void **))sub_208216974);
      abort();
    }
    v1128 = *(int64x2_t *)v1154;
    v1129 = *(int64x2_t *)&v1154[16];
    v1130 = *(int64x2_t *)&v1154[32];
    v1131 = v1155;
    v1138 = 0;
    v32 = v1163;
    if (v1163)
    {
      v33 = v1156;
      v34 = v1157;
      if (v1157)
      {
        v35 = (unint64_t *)&v1157->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v37 = v1160;
        v38 = v1161;
        v39 = v1162;
        do
          v40 = __ldxr(v35);
        while (__stxr(v40 + 1, v35));
      }
      else
      {
        v37 = v1160;
        v38 = v1161;
        v39 = v1162;
      }
      *(_QWORD *)&v1132 = v33;
      *((_QWORD *)&v1132 + 1) = v34;
      v1133 = v1158;
      v1134 = v1159;
      v1135 = v37;
      v1136 = v38;
      v1137 = v39;
      if (v34)
      {
        v42 = (unint64_t *)&v34->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v1138 = 1;
    }
    v44 = v1164;
    v1180 = (char *)v1164;
    v45 = *(_QWORD *)(a2 + 128);
    if (*(_BYTE *)(v45 + 152))
    {
      v46 = *(_QWORD *)(v45 + 128);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v45 + 136) - v46) >> 2) > v1164)
      {
        v47 = (_BYTE *)(v46 + 28 * v1164);
        if ((v47[12] || v47[20] | v47[24])
          && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 406, (uint64_t)"!einput.rgb_bias && !einput.scale_factor && !einput.use_bgr", 59, (uint64_t)"Preprocessing arguments are not yet supported for generic input tensors", 71, (void (*)(void **))sub_208216974))
        {
          abort();
        }
      }
    }
    sub_2080A8BDC(v45 + 8, v44, (uint64_t)v1302);
    v48 = espresso_network_bind_buffer();
    if (v1302[24] && (v1302[23] & 0x80000000) != 0)
      operator delete(*(void **)v1302);
    if (v48)
    {
      sub_207C9F428((unint64_t *)&v1180);
      v49 = std::string::insert((std::string *)v1302, 0, "Failed to bind buffer created for Espresso Model input ", 0x37uLL);
      v51 = (void *)v49->__r_.__value_.__r.__words[0];
      v50 = v49->__r_.__value_.__l.__size_;
      v1256[0].i32[0] = v49->__r_.__value_.__r.__words[2];
      *(__int32 *)((char *)v1256[0].i32 + 3) = *(_DWORD *)((char *)&v49->__r_.__value_.__r.__words[2] + 3);
      v52 = SHIBYTE(v49->__r_.__value_.__r.__words[2]);
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v53 = (char *)operator new(0x18uLL);
      v54 = (std::__shared_weak_count_vtbl *)v53;
      if (v52 < 0)
      {
        sub_207CA40D8(v53, v51, v50);
      }
      else
      {
        *(_QWORD *)v53 = v51;
        *((_QWORD *)v53 + 1) = v50;
        *((_DWORD *)v53 + 4) = v1256[0].i32[0];
        *(_DWORD *)(v53 + 19) = *(__int32 *)((char *)v1256[0].i32 + 3);
        v53[23] = v52;
      }
      v61 = (std::__shared_weak_count *)operator new(0x20uLL);
      v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
      v61->__shared_owners_ = 0;
      v61->__shared_weak_owners_ = 0;
      v61[1].__vftable = v54;
      if (v52 < 0)
      {
        operator delete(v51);
        if ((v1302[23] & 0x80000000) == 0)
          goto LABEL_93;
      }
      else if ((v1302[23] & 0x80000000) == 0)
      {
LABEL_93:
        v62 = 5;
        goto LABEL_1504;
      }
      operator delete(*(void **)v1302);
      goto LABEL_93;
    }
    v1306 = v1313;
    v1307 = v1314;
    v1308 = v1315;
    *(_OWORD *)&v1302[64] = *(_OWORD *)&v1309[64];
    v1303 = v1310;
    v1305 = v1312;
    v1304 = v1311;
    *(_OWORD *)v1302 = *(_OWORD *)v1309;
    *(_OWORD *)&v1302[16] = *(_OWORD *)&v1309[16];
    *(_OWORD *)&v1302[48] = *(_OWORD *)&v1309[48];
    *(_OWORD *)&v1302[32] = *(_OWORD *)&v1309[32];
    sub_2080B6BC8((uint64_t)&v1283, (int64x2_t *)v1302);
    v1244 = v1128;
    v1245 = v1129;
    v1246 = v1130;
    v1247 = v1131;
    LOBYTE(v1248) = 0;
    v1255 = 0;
    if (v32)
    {
      v1248 = off_24C06E878;
      if (*((_QWORD *)&v1132 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v1132 + 1) + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        v57 = v1135;
        v58 = v1136;
        v59 = v1137;
        do
          v60 = __ldxr(v55);
        while (__stxr(v60 + 1, v55));
      }
      else
      {
        v57 = v1135;
        v58 = v1136;
        v59 = v1137;
      }
      v1249 = v1132;
      v1250 = v1133;
      v1251 = v1134;
      v1252 = v57;
      v1253 = v58;
      v1254 = v59;
      if (*((_QWORD *)&v1132 + 1))
      {
        v96 = (unint64_t *)(*((_QWORD *)&v1132 + 1) + 8);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v1132 + 1) + 16))(*((_QWORD *)&v1132 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v1132 + 1));
        }
      }
      v1255 = 1;
    }
    if ((v1247 & 0x40) != 0)
    {
      v98 = 4;
      v1269 = 65568;
      v99 = &v1246.i64[1];
      if (!v32)
        goto LABEL_175;
LABEL_166:
      v99 = &v1252;
      if ((_BYTE)v1254)
      {
        v99 = &v1252;
        if (v1252)
        {
          v100 = v1249;
          if (*((_QWORD *)&v1249 + 1))
          {
            v101 = (unint64_t *)(*((_QWORD *)&v1249 + 1) + 8);
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
            do
              v103 = __ldaxr(v101);
            while (__stlxr(v103 - 1, v101));
            if (!v103)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 16))(*((_QWORD *)&v100 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v100 + 1));
            }
          }
          (*(void (**)(_QWORD, _QWORD, const char *))(*(_QWORD *)v100 + 88))(v100, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v99 = &v1252;
        }
      }
      goto LABEL_175;
    }
    if ((v1247 & 0x10) == 0)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 738, (uint64_t)"", 0, (uint64_t)"Given format flags not supported as espresso buffer. Must be float32 or uint8", 77, (void (*)(void **))sub_208216974);
      abort();
    }
    v98 = 1;
    v1269 = 262152;
    v99 = &v1246.i64[1];
    if (v32)
      goto LABEL_166;
LABEL_175:
    v104 = *v99;
    *(_QWORD *)&v105 = v1244.u32[1];
    *((_QWORD *)&v105 + 1) = v1244.u32[2];
    v1260 = v105;
    v1265 = v1245.i32[3] / v98;
    v1266 = v1246.i32[0] / v98;
    v1261 = v1244.u32[3];
    v1262 = v1245.u32[0];
    v1264 = v1245.i32[2] / v98;
    v1263 = 1;
    v1267 = v1246.i32[1] / v98;
    v1268 = v1245.u32[0] * v1267;
    v1256[0] = (int64x2_t)(unint64_t)v104;
    sub_2080B6BC8((uint64_t)&v1270, v1256);
    if (v1255)
    {
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v1249 + 1);
      if (*((_QWORD *)&v1249 + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v1249 + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
          v109 = v1282;
          if (v1282 != 1)
            goto LABEL_308;
LABEL_181:
          if (v1295 != 1)
          {
            if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 446, (uint64_t)"std::holds_alternative<DataView32f>(buffer_view)", 48, (uint64_t)"Bound espresso buffer is not of storage type float", 50, (void (*)(void **))sub_208216974))
            {
              abort();
            }
            if (v1282 != 1)
              sub_207CA9F48();
          }
          v1232 = v1270;
          v1233 = v1271;
          v1234 = v1272;
          v1235 = v1273;
          LOBYTE(v1236) = 0;
          v1243 = 0;
          if (v1281)
          {
            v1236 = off_24C06F140;
            v110 = v1275;
            if (*((_QWORD *)&v1275 + 1))
            {
              v111 = (unint64_t *)(*((_QWORD *)&v1275 + 1) + 8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
              v113 = v1278;
              v114 = v1279;
              v115 = v1280;
              do
                v116 = __ldxr(v111);
              while (__stxr(v116 + 1, v111));
            }
            else
            {
              v113 = v1278;
              v114 = v1279;
              v115 = v1280;
            }
            v1237 = v110;
            v1238 = v1276;
            v1239 = v1277;
            v1240 = v113;
            v1241 = v114;
            v1242 = v115;
            if (*((_QWORD *)&v110 + 1))
            {
              v200 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
              do
                v201 = __ldaxr(v200);
              while (__stlxr(v201 - 1, v200));
              if (!v201)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)&v110 + 1) + 16))(*((_QWORD *)&v110 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v110 + 1));
              }
            }
            v1243 = 1;
          }
          if (v1295 != 1)
            sub_207CA9F48();
          *(int64x2_t *)pixelBuffer = v1283;
          *(int64x2_t *)&pixelBuffer[16] = v1284;
          *(int64x2_t *)&pixelBuffer[32] = v1285;
          *(_DWORD *)&pixelBuffer[48] = v1286;
          LOBYTE(v1224) = 0;
          v1231 = 0;
          v202 = v1294;
          if (!v1294)
          {
            v1213 = v1283;
            *(int64x2_t *)v1214 = v1284;
            *(int64x2_t *)&v1214[16] = v1285;
            *(_DWORD *)&v1214[32] = v1286;
            LOBYTE(v1215) = 0;
            goto LABEL_375;
          }
          *(_QWORD *)&v1224 = off_24C06F140;
          v204 = (std::__shared_weak_count *)*((_QWORD *)&v1288 + 1);
          v203 = v1288;
          if (*((_QWORD *)&v1288 + 1))
          {
            v205 = (unint64_t *)(*((_QWORD *)&v1288 + 1) + 8);
            do
              v206 = __ldxr(v205);
            while (__stxr(v206 + 1, v205));
            v207 = v1291;
            v208 = v1292;
            v209 = v1293;
            do
              v210 = __ldxr(v205);
            while (__stxr(v210 + 1, v205));
          }
          else
          {
            v207 = v1291;
            v208 = v1292;
            v209 = v1293;
          }
          *((_QWORD *)&v1224 + 1) = v203;
          v1225 = v204;
          v1226 = v1289;
          v1227 = v1290;
          v1228 = v207;
          v1229 = v208;
          v1230 = v209;
          if (v204)
          {
            v211 = (unint64_t *)&v204->__shared_owners_;
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
            v213 = v1225;
            v203 = *((_QWORD *)&v1224 + 1);
            v1231 = 1;
            v1213 = *(int64x2_t *)pixelBuffer;
            *(_OWORD *)v1214 = *(_OWORD *)&pixelBuffer[16];
            *(_OWORD *)&v1214[16] = *(_OWORD *)&pixelBuffer[32];
            *(_DWORD *)&v1214[32] = *(_DWORD *)&pixelBuffer[48];
            v1222 = 0;
            *(_QWORD *)&v1215 = off_24C06F140;
            if (v1225)
            {
              v214 = (unint64_t *)&v1225->__shared_owners_;
              do
                v215 = __ldxr(v214);
              while (__stxr(v215 + 1, v214));
              v216 = v1228;
              v217 = v1229;
              v218 = v1230;
              do
                v219 = __ldxr(v214);
              while (__stxr(v219 + 1, v214));
              v220 = 0;
              goto LABEL_369;
            }
          }
          else
          {
            v1231 = 1;
            v1213 = *(int64x2_t *)pixelBuffer;
            *(_OWORD *)v1214 = *(_OWORD *)&pixelBuffer[16];
            *(_OWORD *)&v1214[16] = *(_OWORD *)&pixelBuffer[32];
            *(_DWORD *)&v1214[32] = *(_DWORD *)&pixelBuffer[48];
            v1222 = 0;
            *(_QWORD *)&v1215 = off_24C06F140;
          }
          v213 = 0;
          v216 = v1228;
          v217 = v1229;
          v220 = 1;
          v218 = v1230;
LABEL_369:
          *((_QWORD *)&v1215 + 1) = v203;
          v1216 = v213;
          v1217 = v1226;
          v1218 = v1227;
          v1219 = v216;
          v1220 = v217;
          v1221 = v218;
          if ((v220 & 1) == 0)
          {
            v221 = (unint64_t *)&v213->__shared_owners_;
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
              std::__shared_weak_count::__release_weak(v213);
            }
          }
          v202 = 1;
LABEL_375:
          v1222 = v202;
          sub_207CB329C((uint64_t)&v1232, (uint64_t)__src);
          sub_207CB329C((uint64_t)&v1213, (uint64_t)__dst);
          if (*(_DWORD *)&__src[28] == 1 && *(_DWORD *)&v1171[12] == 1)
          {
            if (*(_DWORD *)&__src[32] != *(_DWORD *)&v1171[16] || *(_DWORD *)&__src[32] != *(_DWORD *)&__src[8])
            {
              v1165 = (uint64_t (**)())*(unsigned int *)&__src[8];
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)&__src[8]))) & 1) == 0
                && *(_DWORD *)&__src[24])
              {
                *(_QWORD *)v1316 = 0;
                *(_QWORD *)&v1316[12] = 0x100000001;
                *(_DWORD *)&v1316[8] = *(_DWORD *)&__src[8] - 1;
                *(_DWORD *)&v1316[20] = *(_DWORD *)&__src[12] - 1;
                v1316[24] = __src[32];
                v1316[25] = __src[33];
                v1316[26] = __src[34];
                v1316[27] = __src[35];
                v1316[28] = v1171[16];
                v1316[29] = v1171[17];
                v1316[30] = v1171[18];
                v1316[31] = v1171[19];
                v1316[36] = __src[36];
                v1316[37] = __src[37];
                v1316[38] = __src[38];
                v1316[39] = __src[39];
                v1316[40] = v1171[20];
                v1316[41] = v1171[21];
                v1316[42] = v1171[22];
                v1316[43] = v1171[23];
                *(_DWORD *)&v1316[32] = *(_DWORD *)&__src[16] - 1;
                *(_DWORD *)&v1316[44] = *(_DWORD *)&__src[20] - 1;
                v1316[48] = __src[40];
                v1316[49] = __src[41];
                v1316[50] = __src[42];
                v1316[51] = __src[43];
                v1316[52] = v1172;
                v1316[53] = BYTE1(v1172);
                v1316[54] = BYTE2(v1172);
                v1316[55] = BYTE3(v1172);
                BYTE4(v1317) = __src[44];
                BYTE5(v1317) = __src[45];
                BYTE6(v1317) = __src[46];
                HIBYTE(v1317) = __src[47];
                v1318 = HIDWORD(v1172);
                v346 = *(char **)__src;
                v347 = (char *)__dst[0];
                v1174 = 0u;
                *(_OWORD *)v1175 = 0u;
                v348 = *(_DWORD *)&__src[24] - 1;
                LODWORD(v1317) = *(_DWORD *)&__src[24] - 1;
                if (*(_DWORD *)&__src[24] != 1)
                {
                  v349 = 4 * *(unsigned int *)&__src[44];
                  v350 = 4 * HIDWORD(v1172);
                  do
                  {
                    sub_2080B7B14(v1316, (uint64_t)&v1174, (uint64_t *)&v1165, v346, v347);
                    v346 += v349;
                    v347 += v350;
                    --v348;
                  }
                  while (v348);
                }
                sub_2080B7B14(v1316, (uint64_t)&v1174, (uint64_t *)&v1165, v346, v347);
              }
              goto LABEL_1481;
            }
            v223 = *(unsigned int *)&v1171[20];
            if (*(_DWORD *)&__src[36] == *(_DWORD *)&v1171[20]
              && *(_DWORD *)&__src[36] == *(_DWORD *)&__src[12] * *(_DWORD *)&__src[32])
            {
              v224 = v1172;
              v225 = *(unsigned int *)&__src[40];
              if (*(_DWORD *)&__src[40] == (_DWORD)v1172
                && *(_DWORD *)&__src[40] == *(_DWORD *)&__src[16] * *(_DWORD *)&__src[36])
              {
                v226 = (*(_DWORD *)&__src[20] * *(_DWORD *)&__src[40]);
                if (*(_DWORD *)&__src[44] == HIDWORD(v1172) && *(_DWORD *)&__src[44] == (_DWORD)v226)
                {
                  v227 = (*(_DWORD *)&__src[24] * *(_DWORD *)&__src[44]);
                  v228 = *(const void **)__src;
                  if (*(_QWORD *)__src || !(_DWORD)v227)
                  {
                    if (!(_DWORD)v227)
                      goto LABEL_1481;
                  }
                  else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    goto LABEL_1649;
                  }
                  v835 = (char *)__dst[0];
                  v836 = 4 * v227;
                  v837 = v228;
                  goto LABEL_1480;
                }
                if (!*(_DWORD *)&__src[32]
                  || !*(_DWORD *)&__src[12]
                  || !*(_DWORD *)&__src[16]
                  || !*(_DWORD *)&__src[20]
                  || !*(_DWORD *)&__src[24])
                {
                  goto LABEL_1481;
                }
                v769 = (char *)__dst[0];
                v733 = *(char **)__src;
                v427 = 4 * v226;
                v770 = *(_DWORD *)&__src[24] - 1;
                if (*(_DWORD *)&__src[24] != 1)
                {
                  if ((_DWORD)v226)
                  {
                    v771 = 4 * *(unsigned int *)&__src[44];
                    v772 = 4 * HIDWORD(v1172);
                    while (v733
                         || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
                      memmove(v769, v733, 4 * v226);
                      v733 += v771;
                      v769 += v772;
                      if (!--v770)
                        goto LABEL_1358;
                    }
                    goto LABEL_1649;
                  }
                  goto LABEL_1481;
                }
LABEL_1358:
                if (!(_DWORD)v226 || v733)
                {
                  if (!(_DWORD)v226)
                  {
LABEL_1481:
                    if (v1222)
                    {
                      v916 = v1216;
                      if (v1216)
                      {
                        v917 = (unint64_t *)&v1216->__shared_owners_;
                        do
                          v918 = __ldaxr(v917);
                        while (__stlxr(v918 - 1, v917));
                        if (!v918)
                        {
                          ((void (*)(std::__shared_weak_count *))v916->__on_zero_shared)(v916);
                          std::__shared_weak_count::__release_weak(v916);
                        }
                      }
                    }
                    if (v1231)
                    {
                      v919 = v1225;
                      if (v1225)
                      {
                        v920 = (unint64_t *)&v1225->__shared_owners_;
                        do
                          v921 = __ldaxr(v920);
                        while (__stlxr(v921 - 1, v920));
                        if (!v921)
                        {
                          ((void (*)(std::__shared_weak_count *))v919->__on_zero_shared)(v919);
                          std::__shared_weak_count::__release_weak(v919);
                        }
                      }
                    }
                    if (!v1243)
                      goto LABEL_1499;
                    v794 = (std::__shared_weak_count *)*((_QWORD *)&v1237 + 1);
                    if (!*((_QWORD *)&v1237 + 1))
                      goto LABEL_1499;
                    v922 = (unint64_t *)(*((_QWORD *)&v1237 + 1) + 8);
                    do
                      v796 = __ldaxr(v922);
                    while (__stlxr(v796 - 1, v922));
                    goto LABEL_1497;
                  }
                }
                else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_1649;
                }
                v835 = v769;
LABEL_1479:
                v837 = v733;
                v836 = v427;
LABEL_1480:
                memmove(v835, v837, v836);
                goto LABEL_1481;
              }
              v1095 = (*(_DWORD *)&__src[16] * *(_DWORD *)&__src[36]);
              v731.i64[0] = __PAIR64__(*(unsigned int *)&__src[16], *(unsigned int *)&__src[32]);
              v731.i64[1] = *(_QWORD *)&__src[20];
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v731))) & 1) != 0 || !*(_DWORD *)&__src[12])
                goto LABEL_1481;
              v732 = *(_DWORD *)&__src[20] - 1;
              v733 = *(char **)__src;
              v734 = (char *)__dst[0];
              v427 = 4 * v1095;
              v1126 = *(_DWORD *)&__src[24] - 1;
              if (*(_DWORD *)&__src[24] != 1)
              {
                v1105 = HIDWORD(v1172);
                v1100 = *(unsigned int *)&__src[44];
                if (*(_DWORD *)&__src[20] == 1)
                {
                  if ((_DWORD)v1095)
                  {
                    v914 = 4 * *(unsigned int *)&__src[44];
                    v915 = 4 * HIDWORD(v1172);
                    while (v733
                         || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
                      memmove(v734, v733, v427);
                      v733 += v914;
                      v734 += v915;
                      if (!--v1126)
                        goto LABEL_1466;
                    }
                    goto LABEL_1649;
                  }
                }
                else if ((_DWORD)v1095)
                {
                  v735 = 0;
                  while (1)
                  {
                    v1111 = v735;
                    v736 = 0;
                    v737 = v733;
                    v1119 = v734;
                    v738 = v734;
                    do
                    {
                      while (v737)
                      {
                        memmove(v738, v737, v427);
                        v737 += 4 * v225;
                        v738 += 4 * v224;
                        if (++v736 == v732)
                          goto LABEL_1047;
                      }
                      sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                      v739 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v739 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      if (byte_254530A10)
                        v740 = byte_254530A18 == 0;
                      else
                        v740 = 0;
                      if (!v740)
                      {
                        v741 = qword_2545309E8;
                        for (i = qword_2545309F0; v741 != i; v741 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v741)(*(_QWORD *)(v741 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                      }
                      v743 = atomic_load((unsigned __int8 *)&qword_254530A20);
                      if ((v743 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                      {
                        __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                        __cxa_guard_release(&qword_254530A20);
                      }
                      if (!byte_254530A10)
                        goto LABEL_1649;
                      qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                      memcpy(v738, 0, v427);
                      v738 += 4 * v224;
                      ++v736;
                      v737 = (char *)(4 * v225);
                    }
                    while (v736 != v732);
                    v737 = (char *)(4 * v225);
                    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
                      goto LABEL_1649;
                    }
LABEL_1047:
                    memmove(v738, v737, v427);
                    v733 += 4 * v1100;
                    v734 = &v1119[4 * v1105];
                    v735 = v1111 + 1;
                    if (v1111 + 1 == v1126)
                      goto LABEL_1466;
                  }
                }
                goto LABEL_1481;
              }
LABEL_1466:
              if (v732)
              {
                if ((_DWORD)v1095)
                {
                  while (v733
                       || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    memmove(v734, v733, v427);
                    v733 += 4 * v225;
                    v734 += 4 * v224;
                    if (!--v732)
                      goto LABEL_1473;
                  }
                  goto LABEL_1649;
                }
                goto LABEL_1481;
              }
LABEL_1473:
              v831 = v1095;
              if ((_DWORD)v1095 && !v733)
                goto LABEL_1475;
              goto LABEL_1477;
            }
            v1122 = *(unsigned int *)&__src[36];
            v1108 = (*(_DWORD *)&__src[12] * *(_DWORD *)&__src[32]);
            v423.i64[0] = __PAIR64__(*(unsigned int *)&__src[32], *(unsigned int *)&__src[12]);
            v423.i64[1] = *(_QWORD *)&__src[16];
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v423))) & 1) != 0 || !*(_DWORD *)&__src[24])
              goto LABEL_1481;
            v424 = *(_DWORD *)&__src[16] - 1;
            v1097 = *(_DWORD *)&__src[20] - 1;
            v1092 = *(unsigned int *)&__src[40];
            v1088 = v1172;
            v425 = *(char **)__src;
            v426 = (char *)__dst[0];
            v427 = 4 * v1108;
            v1102 = 4 * *(unsigned int *)&v1171[20];
            v1072 = *(_DWORD *)&__src[24] - 1;
            v1115 = *(_DWORD *)&__src[16] - 1;
            if (*(_DWORD *)&__src[24] != 1)
            {
              v428 = 0;
              v1070 = HIDWORD(v1172);
              v1066 = *(unsigned int *)&__src[44];
              v1085 = 4 * *(unsigned int *)&__src[36];
              while (1)
              {
                v1074 = v428;
                v1079 = v426;
                v1082 = v425;
                if (v1097)
                {
                  v429 = 0;
                  while (1)
                  {
                    v430 = v426;
                    v431 = v425;
                    if (v424)
                    {
                      if (!(_DWORD)v1108)
                        goto LABEL_590;
                      v432 = 0;
                      v431 = v425;
                      v430 = v426;
                      do
                      {
                        if (!v431)
                        {
                          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                          v433 = atomic_load((unsigned __int8 *)&qword_254530A20);
                          if ((v433 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                          {
                            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                            __cxa_guard_release(&qword_254530A20);
                          }
                          if (byte_254530A10)
                            v434 = byte_254530A18 == 0;
                          else
                            v434 = 0;
                          if (!v434)
                          {
                            v435 = qword_2545309E8;
                            for (j = qword_2545309F0; v435 != j; v435 += 16)
                              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v435)(*(_QWORD *)(v435 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                          }
                          v437 = atomic_load((unsigned __int8 *)&qword_254530A20);
                          if ((v437 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                          {
                            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                            __cxa_guard_release(&qword_254530A20);
                          }
                          if (!byte_254530A10)
                            goto LABEL_1649;
                          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                          v424 = v1115;
                        }
                        memmove(v430, v431, v427);
                        v431 += 4 * v1122;
                        v430 += 4 * v223;
                        ++v432;
                      }
                      while (v432 != v424);
                    }
                    if ((_DWORD)v1108 && !v431)
                      break;
                    if ((_DWORD)v1108)
                      goto LABEL_589;
LABEL_590:
                    v425 += 4 * v1092;
                    v426 += 4 * v1088;
                    if (++v429 == v1097)
                      goto LABEL_624;
                  }
                  sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                  v438 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v438 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10 || byte_254530A18)
                  {
                    v440 = qword_2545309E8;
                    for (k = qword_2545309F0; v440 != k; v440 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v440)(*(_QWORD *)(v440 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                  }
                  v441 = atomic_load((unsigned __int8 *)&qword_254530A20);
                  if ((v441 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                  {
                    __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                    __cxa_guard_release(&qword_254530A20);
                  }
                  if (!byte_254530A10)
                    goto LABEL_1649;
                  qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                  v424 = v1115;
LABEL_589:
                  memmove(v430, v431, v427);
                  goto LABEL_590;
                }
LABEL_624:
                if (v424)
                {
                  v442 = v424;
                  if (!(_DWORD)v1108)
                    goto LABEL_585;
                  do
                  {
                    if (!v425
                      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                    {
                      goto LABEL_1649;
                    }
                    memmove(v426, v425, v427);
                    v425 += v1085;
                    v426 += v1102;
                    --v442;
                  }
                  while (v442);
                }
                if ((_DWORD)v1108 && !v425)
                  break;
                if ((_DWORD)v1108)
                  goto LABEL_584;
LABEL_585:
                v425 = &v1082[4 * v1066];
                v426 = &v1079[4 * v1070];
                v428 = v1074 + 1;
                v424 = v1115;
                if (v1074 + 1 == v1072)
                  goto LABEL_1068;
              }
              if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_1649;
              }
LABEL_584:
              memmove(v426, v425, v427);
              goto LABEL_585;
            }
LABEL_1068:
            if (!v1097)
            {
              v745 = v425;
              v746 = v426;
LABEL_1264:
              v734 = v746;
              if (v1115)
              {
                if ((_DWORD)v1108)
                {
                  v733 = v745;
                  while (v733
                       || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    memmove(v734, v733, v427);
                    v733 += 4 * v1122;
                    v734 += v1102;
                    if (!--v1115)
                      goto LABEL_1272;
                  }
                  goto LABEL_1649;
                }
                goto LABEL_1481;
              }
              v733 = v745;
LABEL_1272:
              v831 = v1108;
              if ((_DWORD)v1108 && !v733)
              {
LABEL_1475:
                if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                {
                  goto LABEL_1649;
                }
LABEL_1478:
                v835 = v734;
                goto LABEL_1479;
              }
LABEL_1477:
              if (!v831)
                goto LABEL_1481;
              goto LABEL_1478;
            }
            v744 = 0;
            v745 = v425;
            v746 = v426;
            while (1)
            {
              v747 = v746;
              v748 = v745;
              if (v1115)
              {
                v749 = v1115;
                if ((_DWORD)v1108)
                {
                  while (v745
                       || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    memmove(v746, v745, v427);
                    v745 += 4 * v1122;
                    v746 += v1102;
                    if (!--v749)
                      goto LABEL_1080;
                  }
LABEL_1649:
                  abort();
                }
              }
              else
              {
LABEL_1080:
                if ((_DWORD)v1108 && !v745)
                {
                  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
                  {
                    goto LABEL_1649;
                  }
LABEL_1071:
                  memmove(v746, v745, v427);
                  goto LABEL_1072;
                }
                if ((_DWORD)v1108)
                  goto LABEL_1071;
              }
LABEL_1072:
              v745 = &v748[4 * v1092];
              v746 = &v747[4 * v1088];
              if (++v744 == v1097)
                goto LABEL_1264;
            }
          }
          v229.i64[0] = __PAIR64__(*(unsigned int *)&__src[16], *(unsigned int *)&__src[8]);
          v229.i64[1] = *(_QWORD *)&__src[20];
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v229))) & 1) != 0 || !*(_DWORD *)&__src[12])
            goto LABEL_1481;
          *(_QWORD *)v1316 = 0;
          v1316[12] = __src[28];
          v1316[13] = __src[29];
          v1316[14] = __src[30];
          v1316[15] = __src[31];
          v1316[16] = v1171[12];
          v1316[17] = v1171[13];
          v1316[18] = v1171[14];
          v1316[19] = v1171[15];
          *(_DWORD *)&v1316[8] = *(_DWORD *)&__src[8] - 1;
          *(_DWORD *)&v1316[20] = *(_DWORD *)&__src[12] - 1;
          v1316[24] = __src[32];
          v1316[25] = __src[33];
          v1316[26] = __src[34];
          v1316[27] = __src[35];
          v1316[28] = v1171[16];
          v1316[29] = v1171[17];
          v1316[30] = v1171[18];
          v1316[31] = v1171[19];
          v1316[36] = __src[36];
          v1316[37] = __src[37];
          v1316[38] = __src[38];
          v1316[39] = __src[39];
          v1316[40] = v1171[20];
          v1316[41] = v1171[21];
          v1316[42] = v1171[22];
          v1316[43] = v1171[23];
          v230 = *(_DWORD *)&__src[20] - 1;
          *(_DWORD *)&v1316[32] = *(_DWORD *)&__src[16] - 1;
          *(_DWORD *)&v1316[44] = *(_DWORD *)&__src[20] - 1;
          v1316[48] = __src[40];
          v1316[49] = __src[41];
          v1316[50] = __src[42];
          v1316[51] = __src[43];
          v1316[52] = v1172;
          v1316[53] = BYTE1(v1172);
          v1316[54] = BYTE2(v1172);
          v1316[55] = BYTE3(v1172);
          BYTE4(v1317) = __src[44];
          BYTE5(v1317) = __src[45];
          BYTE6(v1317) = __src[46];
          HIBYTE(v1317) = __src[47];
          v1318 = HIDWORD(v1172);
          v231 = *(_DWORD **)__src;
          v232 = __dst[0];
          LODWORD(v1317) = *(_DWORD *)&__src[24] - 1;
          if (*(_DWORD *)&__src[24] == 1)
          {
LABEL_536:
            if (v230)
            {
              v397 = 0;
              do
              {
                sub_207D6BCF4(v1316, v231, v232);
                v231 += *(unsigned int *)&v1316[48];
                v232 += *(unsigned int *)&v1316[52];
                ++v397;
              }
              while (v397 < *(_DWORD *)&v1316[44]);
            }
            sub_207D6BCF4(v1316, v231, v232);
            goto LABEL_1481;
          }
          v233 = 0;
          while (1)
          {
            v1063 = v233;
            v234 = *(_DWORD *)&v1316[44];
            v1064 = v232;
            v1065 = v231;
            if (*(_DWORD *)&v1316[44])
              break;
LABEL_393:
            sub_207D6BCF4(v1316, v231, v232);
            v231 = &v1065[HIDWORD(v1317)];
            v232 = &v1064[v1318];
            v233 = v1063 + 1;
            if (v1063 + 1 >= v1317)
            {
              v230 = *(_DWORD *)&v1316[44];
              goto LABEL_536;
            }
          }
          v235 = *(_DWORD *)&v1316[32];
          v236 = *(unsigned int *)&v1316[48];
          v237 = *(unsigned int *)&v1316[52];
          v238 = *(_DWORD *)&v1316[20];
          v239 = *(_DWORD *)&v1316[8];
          if (*(_DWORD *)&v1316[32])
          {
            v241 = *(unsigned int *)&v1316[36];
            v240 = *(unsigned int *)&v1316[40];
            if (*(_DWORD *)&v1316[20])
            {
              if (*(_DWORD *)&v1316[8])
              {
                v242 = 0;
                v1071 = *(unsigned int *)&v1316[48];
                v243 = *(unsigned int *)&v1316[36];
                v244 = 4 * *(unsigned int *)&v1316[24];
                v245 = 4 * *(unsigned int *)&v1316[12];
                v1069 = *(unsigned int *)&v1316[52];
                v246 = *(unsigned int *)&v1316[40];
                v247 = *(unsigned int *)&v1316[28];
                v248 = 4 * *(unsigned int *)&v1316[16];
                v249 = &v231[(unint64_t)v244 / 4];
                v250 = &v232[v247];
                v251 = &v231[v243];
                v252 = &v232[v246];
                v253 = &v231[(unint64_t)v244 / 4 + v243];
                v254 = &v232[v247 + v246];
                v255 = &v231[*(unsigned int *)&v1316[36] + (unint64_t)*(unsigned int *)&v1316[24]];
                v256 = &v232[*(unsigned int *)&v1316[40] + (unint64_t)*(unsigned int *)&v1316[28]];
                v1073 = *(_DWORD *)&v1316[44];
                do
                {
                  v1114 = v242;
                  v257 = 0;
                  v1084 = v254;
                  v1087 = v253;
                  v1078 = v256;
                  v1081 = v255;
                  v258 = v253;
                  v1091 = v252;
                  v1096 = v251;
                  v1101 = v250;
                  v1107 = v249;
                  v259 = v250;
                  v260 = v249;
                  v1121 = v232;
                  v261 = v232;
                  v262 = v231;
                  do
                  {
                    v263 = 0;
                    v264 = v251;
                    v265 = v252;
                    v266 = v255;
                    v267 = v258;
                    v268 = v256;
                    v269 = v254;
                    v270 = v259;
                    v271 = v260;
                    v272 = v261;
                    v273 = v262;
                    do
                    {
                      v274 = v271;
                      v275 = v270;
                      v276 = v272;
                      v277 = v273;
                      v278 = v239;
                      do
                      {
                        *v276 = *v277;
                        v277 = (_DWORD *)((char *)v277 + v245);
                        v276 = (_DWORD *)((char *)v276 + v248);
                        --v278;
                      }
                      while (v278);
                      *v276 = *v277;
                      v273 = (_DWORD *)((char *)v273 + v244);
                      v272 = (_DWORD *)((char *)v272 + v247 * 4);
                      ++v263;
                      v271 = &v274[(unint64_t)v244 / 4];
                      v270 = &v275[v247];
                    }
                    while (v263 != v238);
                    v279 = v239;
                    do
                    {
                      *v275 = *v274;
                      v274 = (_DWORD *)((char *)v274 + v245);
                      v275 = (_DWORD *)((char *)v275 + v248);
                      --v279;
                    }
                    while (v279);
                    v262 = (_DWORD *)((char *)v262 + v243 * 4);
                    v261 = (_DWORD *)((char *)v261 + v246 * 4);
                    ++v257;
                    v260 = (_DWORD *)((char *)v260 + v243 * 4);
                    *v275 = *v274;
                    v259 = (_DWORD *)((char *)v259 + v246 * 4);
                    v251 = &v264[v243];
                    v252 = &v265[v246];
                    v255 = &v266[v243];
                    v258 = &v267[v243];
                    v256 = &v268[v246];
                    v254 = &v269[v246];
                  }
                  while (v257 != v235);
                  v280 = 0;
                  do
                  {
                    v281 = v266;
                    v282 = v267;
                    v283 = v268;
                    v284 = v269;
                    v285 = v265;
                    v286 = v264;
                    v287 = v239;
                    do
                    {
                      *v285 = *v286;
                      v286 = (_DWORD *)((char *)v286 + v245);
                      v285 = (_DWORD *)((char *)v285 + v248);
                      --v287;
                    }
                    while (v287);
                    v264 = (_DWORD *)((char *)v264 + v244);
                    v265 = (_DWORD *)((char *)v265 + v247 * 4);
                    ++v280;
                    v266 = (_DWORD *)((char *)v266 + v244);
                    *v285 = *v286;
                    v267 = (_DWORD *)((char *)v267 + v244);
                    v268 = (_DWORD *)((char *)v268 + v247 * 4);
                    v269 = &v284[v247];
                  }
                  while (v280 != v238);
                  v288 = v239;
                  do
                  {
                    v281 = (_DWORD *)((char *)v281 + v245);
                    *v284 = *v282;
                    v282 = (_DWORD *)((char *)v282 + v245);
                    v283 = (_DWORD *)((char *)v283 + v248);
                    v284 = (_DWORD *)((char *)v284 + v248);
                    --v288;
                  }
                  while (v288);
                  v231 = (_DWORD *)((char *)v231 + v1071 * 4);
                  v232 = &v1121[v1069];
                  v242 = v1114 + 1;
                  v249 = &v1107[v1071];
                  *v283 = *v281;
                  v250 = &v1101[v1069];
                  v251 = &v1096[v1071];
                  v252 = &v1091[v1069];
                  v255 = &v1081[v1071];
                  v253 = &v1087[v1071];
                  v256 = &v1078[v1069];
                  v254 = &v1084[v1069];
                }
                while (v1114 + 1 != v1073);
              }
              else
              {
                v323 = 0;
                v324 = 4 * *(unsigned int *)&v1316[48];
                v325 = *(unsigned int *)&v1316[36];
                v326 = 4 * *(unsigned int *)&v1316[24];
                v327 = *(unsigned int *)&v1316[40];
                v328 = &v231[v325];
                v329 = &v232[v327];
                v330 = 4 * *(unsigned int *)&v1316[52];
                v331 = 4 * *(unsigned int *)&v1316[28];
                do
                {
                  v332 = 0;
                  v333 = v329;
                  v334 = v328;
                  v335 = v232;
                  v336 = v231;
                  do
                  {
                    v337 = v334;
                    v338 = v333;
                    v339 = v335;
                    v340 = v336;
                    v341 = v238;
                    do
                    {
                      *v339 = *v340;
                      v340 = (_DWORD *)((char *)v340 + v326);
                      v339 = (_DWORD *)((char *)v339 + v331);
                      --v341;
                    }
                    while (v341);
                    *v339 = *v340;
                    v336 = (_DWORD *)((char *)v336 + v325 * 4);
                    v335 = (_DWORD *)((char *)v335 + v327 * 4);
                    ++v332;
                    v334 = &v337[v325];
                    v333 = &v338[v327];
                  }
                  while (v332 != v235);
                  v342 = v238;
                  do
                  {
                    *v338 = *v337;
                    v337 = (_DWORD *)((char *)v337 + v326);
                    v338 = (_DWORD *)((char *)v338 + v331);
                    --v342;
                  }
                  while (v342);
                  *v338 = *v337;
                  v231 = (_DWORD *)((char *)v231 + v324);
                  v232 = (_DWORD *)((char *)v232 + v330);
                  ++v323;
                  v328 = (_DWORD *)((char *)v328 + v324);
                  v329 = (_DWORD *)((char *)v329 + v330);
                }
                while (v323 != v234);
              }
            }
            else
            {
              v303 = 0;
              if (*(_DWORD *)&v1316[8])
              {
                v304 = 4 * *(unsigned int *)&v1316[48];
                v305 = *(unsigned int *)&v1316[36];
                v306 = 4 * *(unsigned int *)&v1316[12];
                v307 = 4 * *(unsigned int *)&v1316[52];
                v308 = *(unsigned int *)&v1316[40];
                v309 = 4 * *(unsigned int *)&v1316[16];
                v310 = &v231[v305];
                v311 = &v232[v308];
                do
                {
                  v312 = 0;
                  v313 = v311;
                  v314 = v310;
                  v315 = v232;
                  v316 = v231;
                  do
                  {
                    v317 = v314;
                    v318 = v313;
                    v319 = v315;
                    v320 = v316;
                    v321 = v239;
                    do
                    {
                      *v319 = *v320;
                      v320 = (_DWORD *)((char *)v320 + v306);
                      v319 = (_DWORD *)((char *)v319 + v309);
                      --v321;
                    }
                    while (v321);
                    *v319 = *v320;
                    v316 = (_DWORD *)((char *)v316 + v305 * 4);
                    v315 = (_DWORD *)((char *)v315 + v308 * 4);
                    ++v312;
                    v314 = &v317[v305];
                    v313 = &v318[v308];
                  }
                  while (v312 != v235);
                  v322 = v239;
                  do
                  {
                    *v318 = *v317;
                    v317 = (_DWORD *)((char *)v317 + v306);
                    v318 = (_DWORD *)((char *)v318 + v309);
                    --v322;
                  }
                  while (v322);
                  *v318 = *v317;
                  v231 = (_DWORD *)((char *)v231 + v304);
                  v232 = (_DWORD *)((char *)v232 + v307);
                  ++v303;
                  v310 = (_DWORD *)((char *)v310 + v304);
                  v311 = (_DWORD *)((char *)v311 + v307);
                }
                while (v303 != v234);
              }
              else
              {
                do
                {
                  v343 = v232;
                  v344 = v231;
                  v345 = v235;
                  do
                  {
                    *v343 = *v344;
                    v344 += v241;
                    v343 += v240;
                    --v345;
                  }
                  while (v345);
                  *v343 = *v344;
                  v231 += v236;
                  v232 += v237;
                  ++v303;
                }
                while (v303 != v234);
              }
            }
            goto LABEL_393;
          }
          v289 = 4 * *(unsigned int *)&v1316[48];
          v290 = 4 * *(unsigned int *)&v1316[24];
          v291 = 4 * *(unsigned int *)&v1316[12];
          v292 = 4 * *(unsigned int *)&v1316[52];
          v293 = 4 * *(unsigned int *)&v1316[28];
          v294 = 4 * *(unsigned int *)&v1316[16];
          while (1)
          {
            v295 = v232;
            v296 = v231;
            if (!v238)
              goto LABEL_423;
            v295 = v232;
            v296 = v231;
            v297 = v238;
            if (v239)
              break;
            do
            {
              *v295 = *v296;
              v296 = (_DWORD *)((char *)v296 + v290);
              v295 = (_DWORD *)((char *)v295 + v293);
              --v297;
            }
            while (v297);
LABEL_416:
            *v295 = *v296;
            v231 = (_DWORD *)((char *)v231 + v289);
            v232 = (_DWORD *)((char *)v232 + v292);
            if (++v235 == v234)
              goto LABEL_393;
          }
          v298 = 0;
          v295 = v232;
          v296 = v231;
          do
          {
            v299 = v295;
            v300 = v296;
            v301 = v239;
            do
            {
              *v299 = *v300;
              v300 = (_DWORD *)((char *)v300 + v291);
              v299 = (_DWORD *)((char *)v299 + v294);
              --v301;
            }
            while (v301);
            *v299 = *v300;
            v296 = (_DWORD *)((char *)v296 + v290);
            v295 = (_DWORD *)((char *)v295 + v293);
            ++v298;
          }
          while (v298 != v238);
LABEL_423:
          if (v239)
          {
            v302 = v239;
            do
            {
              *v295 = *v296;
              v296 = (_DWORD *)((char *)v296 + v291);
              v295 = (_DWORD *)((char *)v295 + v294);
              --v302;
            }
            while (v302);
          }
          goto LABEL_416;
        }
      }
    }
    v109 = v1282;
    if (v1282 == 1)
      goto LABEL_181;
LABEL_308:
    if (v109)
      sub_207CA9F48();
    v1232 = v1270;
    v1233 = v1271;
    v1234 = v1272;
    v1235 = v1273;
    LOBYTE(v1236) = 0;
    v1243 = 0;
    if (v1281)
    {
      v1236 = off_24C06F140;
      v177 = v1275;
      if (*((_QWORD *)&v1275 + 1))
      {
        v178 = (unint64_t *)(*((_QWORD *)&v1275 + 1) + 8);
        do
          v179 = __ldxr(v178);
        while (__stxr(v179 + 1, v178));
        v180 = v1278;
        v181 = v1279;
        v182 = v1280;
        do
          v183 = __ldxr(v178);
        while (__stxr(v183 + 1, v178));
      }
      else
      {
        v180 = v1278;
        v181 = v1279;
        v182 = v1280;
      }
      v1237 = v177;
      v1238 = v1276;
      v1239 = v1277;
      v1240 = v180;
      v1241 = v181;
      v1242 = v182;
      if (*((_QWORD *)&v177 + 1))
      {
        v184 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
        do
          v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v177 + 1) + 16))(*((_QWORD *)&v177 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v177 + 1));
        }
      }
      v1243 = 1;
    }
    if (v1295 != 1)
    {
      if (v1295)
        sub_207CA9F48();
      v1204 = v1283;
      *(int64x2_t *)v1205 = v1284;
      *(int64x2_t *)&v1205[16] = v1285;
      *(_DWORD *)&v1205[32] = v1286;
      v1206[0] = 0;
      v1212 = 0;
      if (v1294)
      {
        *(_QWORD *)v1206 = off_24C06F140;
        v186 = v1288;
        if (*((_QWORD *)&v1288 + 1))
        {
          v187 = (unint64_t *)(*((_QWORD *)&v1288 + 1) + 8);
          do
            v188 = __ldxr(v187);
          while (__stxr(v188 + 1, v187));
          v189 = v1291;
          v190 = v1292;
          v191 = v1293;
          do
            v192 = __ldxr(v187);
          while (__stxr(v192 + 1, v187));
        }
        else
        {
          v189 = v1291;
          v190 = v1292;
          v191 = v1293;
        }
        *(_OWORD *)&v1206[8] = v186;
        v1207 = v1289;
        v1208 = v1290;
        v1209 = v189;
        v1210 = v190;
        v1211 = v191;
        if (*((_QWORD *)&v186 + 1))
        {
          v543 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
          do
            v544 = __ldaxr(v543);
          while (__stlxr(v544 - 1, v543));
          if (!v544)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v186 + 1) + 16))(*((_QWORD *)&v186 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v186 + 1));
          }
        }
        v1212 = 1;
      }
      sub_207CB15B8((uint64_t)&v1232, (uint64_t)v1316);
      sub_207CB15B8((uint64_t)&v1204, (uint64_t)__src);
      v545 = *(unsigned int *)&v1316[28];
      v546 = *(unsigned int *)&__src[28];
      if (*(_DWORD *)&v1316[28] != 1 || *(_DWORD *)&__src[28] != 1)
      {
        v557.i64[0] = __PAIR64__(*(unsigned int *)&v1316[16], *(unsigned int *)&v1316[8]);
        v557.i64[1] = *(_QWORD *)&v1316[20];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v557))) & 1) == 0 && *(_DWORD *)&v1316[12])
        {
          v558 = *(_DWORD *)&v1316[8] - 1;
          v559 = *(_DWORD *)&v1316[12] - 1;
          v560 = *(_DWORD *)&v1316[16] - 1;
          v561 = *(unsigned int *)&v1316[32];
          v562 = *(unsigned int *)&v1316[36];
          v563 = *(unsigned int *)&__src[32];
          v564 = *(unsigned int *)&__src[36];
          v565 = *(_DWORD *)&v1316[20] - 1;
          v566 = *(unsigned int *)&v1316[40];
          v567 = *(unsigned int *)&__src[40];
          v568 = *(_BYTE **)v1316;
          v569 = *(_BYTE **)__src;
          v570 = *(_DWORD *)&v1316[24] - 1;
          if (*(_DWORD *)&v1316[24] != 1)
          {
            v571 = 0;
            v1124 = *(unsigned int *)&__src[44];
            v1117 = *(unsigned int *)&v1316[44];
            do
            {
              v572 = v569;
              v573 = v568;
              if (v565)
              {
                v574 = 0;
                v573 = v568;
                v572 = v569;
                do
                {
                  v575 = v573;
                  v576 = v572;
                  if (v560)
                  {
                    if (v559)
                    {
                      v577 = 0;
                      v575 = v573;
                      v576 = v572;
                      do
                      {
                        if (v558)
                        {
                          v578 = 0;
                          v579 = v575;
                          v580 = v576;
                          do
                          {
                            v581 = v558;
                            v582 = v579;
                            v583 = v580;
                            do
                            {
                              *v583 = *v582;
                              v582 += v545;
                              v583 += v546;
                              --v581;
                            }
                            while (v581);
                            *v583 = *v582;
                            v579 += v561;
                            v580 += v563;
                            ++v578;
                          }
                          while (v578 != v559);
                        }
                        else
                        {
                          v584 = v559;
                          v579 = v575;
                          v580 = v576;
                          do
                          {
                            *v580 = *v579;
                            v579 += v561;
                            v580 += v563;
                            --v584;
                          }
                          while (v584);
                        }
                        if (v558)
                        {
                          v585 = v558;
                          do
                          {
                            *v580 = *v579;
                            v579 += v545;
                            v580 += v546;
                            --v585;
                          }
                          while (v585);
                        }
                        *v580 = *v579;
                        v575 += v562;
                        v576 += v564;
                        ++v577;
                      }
                      while (v577 != v560);
                    }
                    else if (v558)
                    {
                      v586 = 0;
                      v575 = v573;
                      v576 = v572;
                      do
                      {
                        v587 = v558;
                        v588 = v575;
                        v589 = v576;
                        do
                        {
                          *v589 = *v588;
                          v588 += v545;
                          v589 += v546;
                          --v587;
                        }
                        while (v587);
                        *v589 = *v588;
                        v575 += v562;
                        v576 += v564;
                        ++v586;
                      }
                      while (v586 != v560);
                    }
                    else
                    {
                      v590 = v560;
                      v575 = v573;
                      v576 = v572;
                      do
                      {
                        *v576 = *v575;
                        v575 += v562;
                        v576 += v564;
                        --v590;
                      }
                      while (v590);
                    }
                  }
                  if (v559)
                  {
                    if (v558)
                    {
                      for (m = 0; m != v559; ++m)
                      {
                        v592 = v558;
                        v593 = v575;
                        v594 = v576;
                        do
                        {
                          *v594 = *v593;
                          v593 += v545;
                          v594 += v546;
                          --v592;
                        }
                        while (v592);
                        *v594 = *v593;
                        v575 += v561;
                        v576 += v563;
                      }
                    }
                    else
                    {
                      v595 = v559;
                      do
                      {
                        *v576 = *v575;
                        v575 += v561;
                        v576 += v563;
                        --v595;
                      }
                      while (v595);
                    }
                  }
                  if (v558)
                  {
                    v596 = v558;
                    do
                    {
                      *v576 = *v575;
                      v575 += v545;
                      v576 += v546;
                      --v596;
                    }
                    while (v596);
                  }
                  *v576 = *v575;
                  v573 += v566;
                  v572 += v567;
                  ++v574;
                }
                while (v574 != v565);
              }
              if (v560)
              {
                for (n = 0; n != v560; ++n)
                {
                  v598 = v573;
                  v599 = v572;
                  if (v559)
                  {
                    if (v558)
                    {
                      v600 = 0;
                      v598 = v573;
                      v599 = v572;
                      do
                      {
                        v601 = v558;
                        v602 = v598;
                        v603 = v599;
                        do
                        {
                          *v603 = *v602;
                          v602 += v545;
                          v603 += v546;
                          --v601;
                        }
                        while (v601);
                        *v603 = *v602;
                        v598 += v561;
                        v599 += v563;
                        ++v600;
                      }
                      while (v600 != v559);
                    }
                    else
                    {
                      v604 = v559;
                      v598 = v573;
                      v599 = v572;
                      do
                      {
                        *v599 = *v598;
                        v598 += v561;
                        v599 += v563;
                        --v604;
                      }
                      while (v604);
                    }
                  }
                  if (v558)
                  {
                    v605 = v558;
                    do
                    {
                      *v599 = *v598;
                      v598 += v545;
                      v599 += v546;
                      --v605;
                    }
                    while (v605);
                  }
                  *v599 = *v598;
                  v573 += v562;
                  v572 += v564;
                }
              }
              if (v559)
              {
                if (v558)
                {
                  for (ii = 0; ii != v559; ++ii)
                  {
                    v607 = v558;
                    v608 = v573;
                    v609 = v572;
                    do
                    {
                      *v609 = *v608;
                      v608 += v545;
                      v609 += v546;
                      --v607;
                    }
                    while (v607);
                    *v609 = *v608;
                    v573 += v561;
                    v572 += v563;
                  }
                }
                else
                {
                  v610 = v559;
                  do
                  {
                    *v572 = *v573;
                    v573 += v561;
                    v572 += v563;
                    --v610;
                  }
                  while (v610);
                }
              }
              if (v558)
              {
                v611 = v558;
                do
                {
                  *v572 = *v573;
                  v573 += v545;
                  v572 += v546;
                  --v611;
                }
                while (v611);
              }
              *v572 = *v573;
              v568 += v1117;
              v569 += v1124;
              ++v571;
            }
            while (v571 != v570);
          }
          if (v565)
          {
            for (jj = 0; jj != v565; ++jj)
            {
              v618 = v568;
              v619 = v569;
              if (v560)
              {
                if (v559)
                {
                  v620 = 0;
                  v618 = v568;
                  v619 = v569;
                  do
                  {
                    if (v558)
                    {
                      v621 = 0;
                      v622 = v618;
                      v623 = v619;
                      do
                      {
                        v624 = v558;
                        v625 = v622;
                        v626 = v623;
                        do
                        {
                          *v626 = *v625;
                          v625 += v545;
                          v626 += v546;
                          --v624;
                        }
                        while (v624);
                        *v626 = *v625;
                        v622 += v561;
                        v623 += v563;
                        ++v621;
                      }
                      while (v621 != v559);
                    }
                    else
                    {
                      v627 = v559;
                      v622 = v618;
                      v623 = v619;
                      do
                      {
                        *v623 = *v622;
                        v622 += v561;
                        v623 += v563;
                        --v627;
                      }
                      while (v627);
                    }
                    if (v558)
                    {
                      v628 = v558;
                      do
                      {
                        *v623 = *v622;
                        v622 += v545;
                        v623 += v546;
                        --v628;
                      }
                      while (v628);
                    }
                    *v623 = *v622;
                    v618 += v562;
                    v619 += v564;
                    ++v620;
                  }
                  while (v620 != v560);
                }
                else if (v558)
                {
                  v629 = 0;
                  v618 = v568;
                  v619 = v569;
                  do
                  {
                    v630 = v558;
                    v631 = v618;
                    v632 = v619;
                    do
                    {
                      *v632 = *v631;
                      v631 += v545;
                      v632 += v546;
                      --v630;
                    }
                    while (v630);
                    *v632 = *v631;
                    v618 += v562;
                    v619 += v564;
                    ++v629;
                  }
                  while (v629 != v560);
                }
                else
                {
                  v633 = v560;
                  v618 = v568;
                  v619 = v569;
                  do
                  {
                    *v619 = *v618;
                    v618 += v562;
                    v619 += v564;
                    --v633;
                  }
                  while (v633);
                }
              }
              if (v559)
              {
                if (v558)
                {
                  for (kk = 0; kk != v559; ++kk)
                  {
                    v635 = v558;
                    v636 = v618;
                    v637 = v619;
                    do
                    {
                      *v637 = *v636;
                      v636 += v545;
                      v637 += v546;
                      --v635;
                    }
                    while (v635);
                    *v637 = *v636;
                    v618 += v561;
                    v619 += v563;
                  }
                }
                else
                {
                  v638 = v559;
                  do
                  {
                    *v619 = *v618;
                    v618 += v561;
                    v619 += v563;
                    --v638;
                  }
                  while (v638);
                }
              }
              if (v558)
              {
                v639 = v558;
                do
                {
                  *v619 = *v618;
                  v618 += v545;
                  v619 += v546;
                  --v639;
                }
                while (v639);
              }
              *v619 = *v618;
              v568 += v566;
              v569 += v567;
            }
          }
          if (v560)
          {
            if (v559)
            {
              v640 = 0;
              if (v558)
              {
                do
                {
                  v641 = 0;
                  v642 = v568;
                  v643 = v569;
                  do
                  {
                    v644 = v558;
                    v645 = v642;
                    v646 = v643;
                    do
                    {
                      *v646 = *v645;
                      v645 += v545;
                      v646 += v546;
                      --v644;
                    }
                    while (v644);
                    *v646 = *v645;
                    v642 += v561;
                    v643 += v563;
                    ++v641;
                  }
                  while (v641 != v559);
                  v647 = v558;
                  do
                  {
                    *v643 = *v642;
                    v642 += v545;
                    v643 += v546;
                    --v647;
                  }
                  while (v647);
                  *v643 = *v642;
                  v568 += v562;
                  v569 += v564;
                  ++v640;
                }
                while (v640 != v560);
              }
              else
              {
                do
                {
                  v648 = v559;
                  v649 = v568;
                  v650 = v569;
                  do
                  {
                    *v650 = *v649;
                    v649 += v561;
                    v650 += v563;
                    --v648;
                  }
                  while (v648);
                  *v650 = *v649;
                  v568 += v562;
                  v569 += v564;
                  ++v640;
                }
                while (v640 != v560);
              }
            }
            else if (v558)
            {
              for (mm = 0; mm != v560; ++mm)
              {
                v786 = v558;
                v787 = v568;
                v788 = v569;
                do
                {
                  *v788 = *v787;
                  v787 += v545;
                  v788 += v546;
                  --v786;
                }
                while (v786);
                *v788 = *v787;
                v568 += v562;
                v569 += v564;
              }
            }
            else
            {
              do
              {
                *v569 = *v568;
                v568 += v562;
                v569 += v564;
                --v560;
              }
              while (v560);
            }
          }
          if (v559)
          {
            if (v558)
            {
              for (nn = 0; nn != v559; ++nn)
              {
                v790 = v558;
                v791 = v568;
                v792 = v569;
                do
                {
                  *v792 = *v791;
                  v791 += v545;
                  v792 += v546;
                  --v790;
                }
                while (v790);
                *v792 = *v791;
                v568 += v561;
                v569 += v563;
              }
            }
            else
            {
              do
              {
                *v569 = *v568;
                v568 += v561;
                v569 += v563;
                --v559;
              }
              while (v559);
            }
          }
          for (; v558; --v558)
          {
            *v569 = *v568;
            v568 += v545;
            v569 += v546;
          }
          *v569 = *v568;
        }
        goto LABEL_1189;
      }
      if (*(_DWORD *)&v1316[32] != *(_DWORD *)&__src[32] || *(_DWORD *)&v1316[32] != *(_DWORD *)&v1316[8])
      {
        *(_QWORD *)&v1174 = *(unsigned int *)&v1316[8];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*(int32x4_t *)&v1316[8]))) & 1) == 0 && *(_DWORD *)&v1316[24])
        {
          *(_QWORD *)pixelBuffer = 0;
          *(_QWORD *)&pixelBuffer[12] = 0x100000001;
          *(_DWORD *)&pixelBuffer[8] = *(_DWORD *)&v1316[8] - 1;
          *(_DWORD *)&pixelBuffer[20] = *(_DWORD *)&v1316[12] - 1;
          pixelBuffer[24] = v1316[32];
          pixelBuffer[25] = v1316[33];
          pixelBuffer[26] = v1316[34];
          pixelBuffer[27] = v1316[35];
          pixelBuffer[28] = __src[32];
          pixelBuffer[29] = __src[33];
          pixelBuffer[30] = __src[34];
          pixelBuffer[31] = __src[35];
          pixelBuffer[36] = v1316[36];
          pixelBuffer[37] = v1316[37];
          pixelBuffer[38] = v1316[38];
          pixelBuffer[39] = v1316[39];
          pixelBuffer[40] = __src[36];
          pixelBuffer[41] = __src[37];
          pixelBuffer[42] = __src[38];
          pixelBuffer[43] = __src[39];
          *(_DWORD *)&pixelBuffer[32] = *(_DWORD *)&v1316[16] - 1;
          *(_DWORD *)&pixelBuffer[44] = *(_DWORD *)&v1316[20] - 1;
          pixelBuffer[48] = v1316[40];
          pixelBuffer[49] = v1316[41];
          pixelBuffer[50] = v1316[42];
          pixelBuffer[51] = v1316[43];
          pixelBuffer[52] = __src[40];
          pixelBuffer[53] = __src[41];
          pixelBuffer[54] = __src[42];
          pixelBuffer[55] = __src[43];
          v612 = *(unsigned int *)&v1316[44];
          v613 = *(unsigned int *)&__src[44];
          *(_QWORD *)((char *)&v1224 + 4) = *(unsigned int *)&v1316[44] | ((unint64_t)*(unsigned int *)&__src[44] << 32);
          v614 = *(char **)v1316;
          v615 = *(char **)__src;
          *(_OWORD *)__dst = 0u;
          *(_OWORD *)v1171 = 0u;
          v616 = *(_DWORD *)&v1316[24] - 1;
          LODWORD(v1224) = *(_DWORD *)&v1316[24] - 1;
          if (*(_DWORD *)&v1316[24] != 1)
          {
            do
            {
              sub_2080B80FC(pixelBuffer, (uint64_t)__dst, (size_t *)&v1174, v614, v615);
              v614 += v612;
              v615 += v613;
              --v616;
            }
            while (v616);
          }
          sub_2080B80FC(pixelBuffer, (uint64_t)__dst, (size_t *)&v1174, v614, v615);
        }
        goto LABEL_1189;
      }
      v547 = *(unsigned int *)&__src[36];
      v548 = (char *)*(unsigned int *)&v1316[36];
      v549 = (*(_DWORD *)&v1316[12] * *(_DWORD *)&v1316[32]);
      if (*(_DWORD *)&v1316[36] == *(_DWORD *)&__src[36] && *(_DWORD *)&v1316[36] == (_DWORD)v549)
      {
        v550 = *(unsigned int *)&__src[40];
        v551 = (char *)*(unsigned int *)&v1316[40];
        v552 = (*(_DWORD *)&v1316[16] * *(_DWORD *)&v1316[36]);
        if (*(_DWORD *)&v1316[40] == *(_DWORD *)&__src[40] && *(_DWORD *)&v1316[40] == (_DWORD)v552)
        {
          v553 = *(unsigned int *)&__src[44];
          v554 = *(unsigned int *)&v1316[44];
          v555 = (*(_DWORD *)&v1316[20] * *(_DWORD *)&v1316[40]);
          if (*(_DWORD *)&v1316[44] == *(_DWORD *)&__src[44] && *(_DWORD *)&v1316[44] == (_DWORD)v555)
          {
            v555 = (*(_DWORD *)&v1316[24] * *(_DWORD *)&v1316[44]);
            v556 = *(const void **)v1316;
            if (*(_QWORD *)v1316 || !(_DWORD)v555)
            {
              if (!(_DWORD)v555)
                goto LABEL_1189;
            }
            else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_1646;
            }
            v912 = *(void **)__src;
            v913 = v556;
            goto LABEL_1638;
          }
          if (!*(_DWORD *)&v1316[32]
            || !*(_DWORD *)&v1316[12]
            || !*(_DWORD *)&v1316[16]
            || !*(_DWORD *)&v1316[20]
            || !*(_DWORD *)&v1316[24])
          {
            goto LABEL_1189;
          }
          v832 = *(char **)__src;
          v833 = *(char **)v1316;
          v834 = *(_DWORD *)&v1316[24] - 1;
          if (*(_DWORD *)&v1316[24] == 1)
          {
LABEL_1544:
            if (!(_DWORD)v555 || v833)
            {
              if (!(_DWORD)v555)
                goto LABEL_1189;
            }
            else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_1646;
            }
            v912 = v832;
            v913 = v833;
LABEL_1638:
            memmove(v912, v913, v555);
            goto LABEL_1189;
          }
          if (!(_DWORD)v555)
            goto LABEL_1189;
          while (v833
               || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            memmove(v832, v833, v555);
            v833 += v554;
            v832 += v553;
            if (!--v834)
              goto LABEL_1544;
          }
LABEL_1646:
          abort();
        }
        v756.i64[0] = __PAIR64__(*(unsigned int *)&v1316[16], *(unsigned int *)&v1316[32]);
        v756.i64[1] = *(_QWORD *)&v1316[20];
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v756))) & 1) != 0 || !*(_DWORD *)&v1316[12])
          goto LABEL_1189;
        v757 = *(_DWORD *)&v1316[20] - 1;
        v758 = *(char **)v1316;
        v759 = *(char **)__src;
        v1127 = *(_DWORD *)&v1316[24] - 1;
        if (*(_DWORD *)&v1316[24] != 1)
        {
          v1120 = *(unsigned int *)&__src[44];
          v1112 = *(unsigned int *)&v1316[44];
          if (*(_DWORD *)&v1316[20] != 1)
          {
            if (!(_DWORD)v552)
            {
              v980 = (*(_DWORD *)&v1316[24] - 2) + 1;
              v758 = (char *)(*(_QWORD *)v1316 + v980 * *(unsigned int *)&v1316[44]);
              v759 = (char *)(*(_QWORD *)__src + v980 * *(unsigned int *)&__src[44]);
              goto LABEL_1643;
            }
            v760 = 0;
            while (1)
            {
              v1106 = v760;
              v761 = 0;
              v762 = v758;
              v763 = v759;
              do
              {
                while (v762)
                {
                  memmove(v763, v762, v552);
                  v762 = &v551[(_QWORD)v762];
                  v763 += v550;
                  if (++v761 == v757)
                    goto LABEL_1106;
                }
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                v764 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v764 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (byte_254530A10)
                  v765 = byte_254530A18 == 0;
                else
                  v765 = 0;
                if (!v765)
                {
                  v766 = qword_2545309E8;
                  for (i1 = qword_2545309F0; v766 != i1; v766 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v766)(*(_QWORD *)(v766 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v768 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v768 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10)
                  goto LABEL_1646;
                qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                memcpy(v763, 0, v552);
                v763 += v550;
                ++v761;
                v762 = v551;
              }
              while (v761 != v757);
              v762 = v551;
              if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_1646;
              }
LABEL_1106:
              memmove(v763, v762, v552);
              v758 += v1112;
              v759 += v1120;
              v760 = v1106 + 1;
              if (v1106 + 1 == v1127)
                goto LABEL_1290;
            }
          }
          while (!(_DWORD)v552 || v758)
          {
            if ((_DWORD)v552)
              goto LABEL_1128;
LABEL_1129:
            v758 += v1112;
            v759 += v1120;
            if (!--v1127)
              goto LABEL_1290;
          }
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_1646;
          }
LABEL_1128:
          memmove(v759, v758, v552);
          goto LABEL_1129;
        }
LABEL_1290:
        if (!v757)
        {
LABEL_1291:
          if (!(_DWORD)v552 || v758)
          {
            if (!(_DWORD)v552)
              goto LABEL_1189;
          }
          else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_1646;
          }
          memmove(v759, v758, v552);
          goto LABEL_1189;
        }
LABEL_1643:
        while (!(_DWORD)v552 || v758)
        {
          if ((_DWORD)v552)
            goto LABEL_1641;
LABEL_1642:
          v758 = &v551[(_QWORD)v758];
          v759 += v550;
          if (!--v757)
            goto LABEL_1291;
        }
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_1646;
        }
LABEL_1641:
        memmove(v759, v758, v552);
        goto LABEL_1642;
      }
      v702.i64[0] = __PAIR64__(*(unsigned int *)&v1316[32], *(unsigned int *)&v1316[12]);
      v702.i64[1] = *(_QWORD *)&v1316[16];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v702))) & 1) != 0 || !*(_DWORD *)&v1316[24])
        goto LABEL_1189;
      v703 = *(_DWORD *)&v1316[16] - 1;
      v1110 = *(_DWORD *)&v1316[20] - 1;
      v1104 = *(unsigned int *)&v1316[40];
      v1099 = *(unsigned int *)&__src[40];
      v704 = *(char **)v1316;
      v705 = *(char **)__src;
      v1083 = *(_DWORD *)&v1316[24] - 1;
      v1125 = *(_DWORD *)&v1316[16] - 1;
      if (*(_DWORD *)&v1316[24] == 1)
      {
LABEL_1146:
        if (v1110)
        {
          v773 = v705;
          if (v703)
          {
            if (!(_DWORD)v549)
              goto LABEL_1189;
            v774 = 0;
            while (1)
            {
              v775 = 0;
              v776 = v704;
              v777 = v704;
              v778 = v773;
              v779 = v773;
              do
              {
                while (v777)
                {
                  memmove(v779, v777, v549);
                  v777 = &v548[(_QWORD)v777];
                  v779 += v547;
                  if (++v775 == v1125)
                    goto LABEL_1150;
                }
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                v780 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v780 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (byte_254530A10)
                  v781 = byte_254530A18 == 0;
                else
                  v781 = 0;
                if (!v781)
                {
                  v782 = qword_2545309E8;
                  for (i2 = qword_2545309F0; v782 != i2; v782 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v782)(*(_QWORD *)(v782 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v784 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v784 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10)
                  goto LABEL_1646;
                qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                memcpy(v779, 0, v549);
                v779 += v547;
                ++v775;
                v777 = v548;
              }
              while (v775 != v1125);
              v777 = v548;
              if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
              {
                goto LABEL_1646;
              }
LABEL_1150:
              memmove(v779, v777, v549);
              v704 = &v776[v1104];
              v773 = &v778[v1099];
              if (++v774 == v1110)
                goto LABEL_1363;
            }
          }
          if ((_DWORD)v549)
          {
            while (v704
                 || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              memmove(v773, v704, v549);
              v704 += v1104;
              v773 += v1099;
              if (!--v1110)
                goto LABEL_1363;
            }
            goto LABEL_1646;
          }
        }
        else
        {
          v773 = v705;
LABEL_1363:
          v873 = v773;
          if (!v1125)
          {
LABEL_1370:
            if (!(_DWORD)v549 || v704)
            {
              if (!(_DWORD)v549)
                goto LABEL_1189;
            }
            else if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              goto LABEL_1646;
            }
            memmove(v873, v704, v549);
            goto LABEL_1189;
          }
          if ((_DWORD)v549)
          {
            while (v704
                 || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
            {
              memmove(v873, v704, v549);
              v704 = &v548[(_QWORD)v704];
              v873 += v547;
              if (!--v1125)
                goto LABEL_1370;
            }
            goto LABEL_1646;
          }
        }
LABEL_1189:
        if (!v1212)
          goto LABEL_1195;
        v540 = *(std::__shared_weak_count **)&v1206[16];
        if (!*(_QWORD *)&v1206[16])
          goto LABEL_1195;
        v793 = (unint64_t *)(*(_QWORD *)&v1206[16] + 8);
        do
          v542 = __ldaxr(v793);
        while (__stlxr(v542 - 1, v793));
        goto LABEL_1193;
      }
      v706 = 0;
      v1080 = *(unsigned int *)&__src[44];
      v1075 = *(unsigned int *)&v1316[44];
      while (1)
      {
        v1086 = v706;
        v1090 = v705;
        v1094 = v704;
        v707 = v704;
        if (v1110)
        {
          v708 = 0;
          v707 = v704;
          while (1)
          {
            v1118 = v708;
            v709 = v705;
            v710 = v707;
            if (v703)
            {
              if ((_DWORD)v549)
              {
                v711 = 0;
                v710 = v707;
                v709 = v705;
                while (1)
                {
                  if (!v710)
                  {
                    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                    v712 = v549;
                    v713 = v547;
                    v714 = v548;
                    v715 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v715 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    if (byte_254530A10)
                      v716 = byte_254530A18 == 0;
                    else
                      v716 = 0;
                    if (!v716)
                    {
                      v718 = qword_2545309E8;
                      for (i3 = qword_2545309F0; v718 != i3; v718 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v718)(*(_QWORD *)(v718 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                    }
                    v719 = atomic_load((unsigned __int8 *)&qword_254530A20);
                    if ((v719 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                    {
                      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                      __cxa_guard_release(&qword_254530A20);
                    }
                    if (!byte_254530A10)
                      goto LABEL_1646;
                    v548 = v714;
                    v547 = v713;
                    v549 = v712;
                    qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                    v703 = v1125;
                  }
                  memmove(v709, v710, v549);
                  v710 = &v548[(_QWORD)v710];
                  v709 += v547;
                  if (++v711 == v703)
                    goto LABEL_1004;
                }
              }
              goto LABEL_984;
            }
LABEL_1004:
            if ((_DWORD)v549 && !v710)
              break;
            if ((_DWORD)v549)
              goto LABEL_983;
LABEL_984:
            v707 += v1104;
            v705 += v1099;
            v708 = v1118 + 1;
            if (v1118 + 1 == v1110)
              goto LABEL_1018;
          }
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          v720 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v720 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10 || byte_254530A18)
          {
            v722 = qword_2545309E8;
            for (i4 = qword_2545309F0; v722 != i4; v722 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v722)(*(_QWORD *)(v722 + 8), "ptr != nullptr || size == 0", 27, "", 0);
          }
          v723 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v723 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10)
            goto LABEL_1646;
          qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
          v703 = v1125;
LABEL_983:
          memmove(v709, v710, v549);
          goto LABEL_984;
        }
LABEL_1018:
        if (v703)
        {
          if ((_DWORD)v549)
          {
            v724 = 0;
            v725 = v1125;
            while (1)
            {
              if (!v707)
              {
                sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
                v726 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v726 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (byte_254530A10)
                  v727 = byte_254530A18 == 0;
                else
                  v727 = 0;
                if (!v727)
                {
                  v729 = qword_2545309E8;
                  for (i5 = qword_2545309F0; v729 != i5; v729 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v729)(*(_QWORD *)(v729 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                }
                v730 = atomic_load((unsigned __int8 *)&qword_254530A20);
                if ((v730 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
                {
                  __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                  __cxa_guard_release(&qword_254530A20);
                }
                if (!byte_254530A10)
                  goto LABEL_1646;
                qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
                v725 = v1125;
              }
              memmove(v705, v707, v549);
              v707 = &v548[(_QWORD)v707];
              v705 += v547;
              if (++v724 == v725)
                goto LABEL_1037;
            }
          }
          goto LABEL_979;
        }
LABEL_1037:
        if ((_DWORD)v549 && !v707)
          break;
        if ((_DWORD)v549)
          goto LABEL_978;
LABEL_979:
        v704 = &v1094[v1075];
        v705 = &v1090[v1080];
        v706 = v1086 + 1;
        v703 = v1125;
        if (v1086 + 1 == v1083)
          goto LABEL_1146;
      }
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        goto LABEL_1646;
      }
LABEL_978:
      memmove(v705, v707, v549);
      goto LABEL_979;
    }
    v1195 = v1283;
    *(int64x2_t *)v1196 = v1284;
    *(int64x2_t *)&v1196[16] = v1285;
    *(_DWORD *)&v1196[32] = v1286;
    v1197[0] = 0;
    v1203 = 0;
    if (v1294)
    {
      *(_QWORD *)v1197 = off_24C06F140;
      v193 = v1288;
      if (*((_QWORD *)&v1288 + 1))
      {
        v194 = (unint64_t *)(*((_QWORD *)&v1288 + 1) + 8);
        do
          v195 = __ldxr(v194);
        while (__stxr(v195 + 1, v194));
        v196 = v1291;
        v197 = v1292;
        v198 = v1293;
        do
          v199 = __ldxr(v194);
        while (__stxr(v199 + 1, v194));
      }
      else
      {
        v196 = v1291;
        v197 = v1292;
        v198 = v1293;
      }
      *(_OWORD *)&v1197[8] = v193;
      v1198 = v1289;
      v1199 = v1290;
      v1200 = v196;
      v1201 = v197;
      v1202 = v198;
      if (*((_QWORD *)&v193 + 1))
      {
        v443 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
        do
          v444 = __ldaxr(v443);
        while (__stlxr(v444 - 1, v443));
        if (!v444)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v193 + 1) + 16))(*((_QWORD *)&v193 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v193 + 1));
        }
      }
      v1203 = 1;
    }
    sub_207CB15B8((uint64_t)&v1232, (uint64_t)v1316);
    sub_207CB329C((uint64_t)&v1195, (uint64_t)__src);
    v445 = *(float *)&v1316[20];
    v446.i64[0] = __PAIR64__(*(unsigned int *)&v1316[16], *(unsigned int *)&v1316[8]);
    v446.i64[1] = *(_QWORD *)&v1316[20];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v446))) & 1) == 0 && *(_DWORD *)&v1316[12])
    {
      pixelBuffer[12] = v1316[28];
      pixelBuffer[13] = v1316[29];
      pixelBuffer[14] = v1316[30];
      pixelBuffer[15] = v1316[31];
      pixelBuffer[16] = __src[28];
      pixelBuffer[17] = __src[29];
      pixelBuffer[18] = __src[30];
      pixelBuffer[19] = __src[31];
      *(_DWORD *)&pixelBuffer[8] = *(_DWORD *)&v1316[8] - 1;
      *(_DWORD *)&pixelBuffer[20] = *(_DWORD *)&v1316[12] - 1;
      pixelBuffer[24] = v1316[32];
      pixelBuffer[25] = v1316[33];
      pixelBuffer[26] = v1316[34];
      pixelBuffer[27] = v1316[35];
      pixelBuffer[28] = __src[32];
      pixelBuffer[29] = __src[33];
      pixelBuffer[30] = __src[34];
      pixelBuffer[31] = __src[35];
      *(_QWORD *)pixelBuffer = 0;
      pixelBuffer[36] = v1316[36];
      pixelBuffer[37] = v1316[37];
      pixelBuffer[38] = v1316[38];
      pixelBuffer[39] = v1316[39];
      pixelBuffer[40] = __src[36];
      pixelBuffer[41] = __src[37];
      pixelBuffer[42] = __src[38];
      pixelBuffer[43] = __src[39];
      v447 = *(_DWORD *)&v1316[20] - 1;
      *(_DWORD *)&pixelBuffer[32] = *(_DWORD *)&v1316[16] - 1;
      *(_DWORD *)&pixelBuffer[44] = *(_DWORD *)&v1316[20] - 1;
      pixelBuffer[48] = v1316[40];
      pixelBuffer[49] = v1316[41];
      pixelBuffer[50] = v1316[42];
      pixelBuffer[51] = v1316[43];
      pixelBuffer[52] = __src[40];
      pixelBuffer[53] = __src[41];
      pixelBuffer[54] = __src[42];
      pixelBuffer[55] = __src[43];
      *(_QWORD *)((char *)&v1224 + 4) = *(unsigned int *)&v1316[44] | ((unint64_t)*(unsigned int *)&__src[44] << 32);
      v448 = *(_BYTE **)v1316;
      v449 = *(float **)__src;
      LODWORD(v1224) = *(_DWORD *)&v1316[24] - 1;
      if (*(_DWORD *)&v1316[24] == 1)
      {
LABEL_707:
        if (v447)
        {
          v539 = 0;
          do
          {
            v445 = sub_207CB345C(pixelBuffer, v448, v449, v445);
            v448 += *(unsigned int *)&pixelBuffer[48];
            v449 += *(unsigned int *)&pixelBuffer[52];
            ++v539;
          }
          while (v539 < *(_DWORD *)&pixelBuffer[44]);
        }
        sub_207CB345C(pixelBuffer, v448, v449, v445);
        goto LABEL_711;
      }
      v450 = 0;
      while (2)
      {
        v1089 = v450;
        v451 = *(_DWORD *)&pixelBuffer[44];
        v1093 = v449;
        v1098 = v448;
        v452 = v449;
        v453 = v448;
        if (!*(_DWORD *)&pixelBuffer[44])
        {
LABEL_646:
          v445 = sub_207CB345C(pixelBuffer, v453, v452, v445);
          v448 = &v1098[DWORD1(v1224)];
          v449 = &v1093[DWORD2(v1224)];
          v450 = v1089 + 1;
          if (v1089 + 1 >= v1224)
          {
            v447 = *(_DWORD *)&pixelBuffer[44];
            goto LABEL_707;
          }
          continue;
        }
        break;
      }
      v454 = *(_DWORD *)&pixelBuffer[32];
      v455 = *(unsigned int *)&pixelBuffer[48];
      v456 = *(_DWORD *)&pixelBuffer[20];
      v457 = *(_DWORD *)&pixelBuffer[8];
      if (*(_DWORD *)&pixelBuffer[32])
      {
        v458 = *(unsigned int *)&pixelBuffer[36];
        v459 = *(unsigned int *)&pixelBuffer[40];
        v453 = v1098;
        if (*(_DWORD *)&pixelBuffer[20])
        {
          v1116 = 4 * *(unsigned int *)&pixelBuffer[52];
          v460 = *(unsigned int *)&pixelBuffer[24];
          v461 = *(unsigned int *)&pixelBuffer[40];
          v462 = 4 * *(unsigned int *)&pixelBuffer[28];
          v463 = 0;
          if (*(_DWORD *)&pixelBuffer[8])
          {
            v464 = *(unsigned int *)&pixelBuffer[12];
            v465 = 4 * *(unsigned int *)&pixelBuffer[16];
            v466 = &v449[(unint64_t)v462 / 4];
            v467 = &v449[v461];
            v468 = &v449[*(unsigned int *)&pixelBuffer[40] + (unint64_t)*(unsigned int *)&pixelBuffer[28]];
            v469 = &v449[(unint64_t)v462 / 4 + v461];
            v452 = v449;
            v1109 = *(_DWORD *)&pixelBuffer[44];
            v1103 = *(unsigned int *)&pixelBuffer[48];
            do
            {
              v1123 = v463;
              v470 = 0;
              v471 = v469;
              v472 = v468;
              v473 = v467;
              v474 = v466;
              v475 = v452;
              v476 = v453;
              do
              {
                v477 = 0;
                v478 = v473;
                v479 = v472;
                v480 = v471;
                v481 = v474;
                v482 = v475;
                v483 = v476;
                do
                {
                  v484 = v481;
                  v485 = v482;
                  v486 = v457;
                  v487 = v483;
                  do
                  {
                    LOBYTE(v445) = *v487;
                    v445 = (float)LODWORD(v445);
                    *v485 = v445;
                    v487 += v464;
                    v485 = (float *)((char *)v485 + v465);
                    --v486;
                  }
                  while (v486);
                  LOBYTE(v445) = *v487;
                  v445 = (float)LODWORD(v445);
                  *v485 = v445;
                  v483 += v460;
                  v482 = (float *)((char *)v482 + v462);
                  ++v477;
                  v481 = &v484[(unint64_t)v462 / 4];
                }
                while (v477 != v456);
                v488 = v457;
                do
                {
                  LOBYTE(v445) = *v483;
                  v445 = (float)LODWORD(v445);
                  *v484 = v445;
                  v483 += v464;
                  v484 = (float *)((char *)v484 + v465);
                  --v488;
                }
                while (v488);
                LOBYTE(v445) = *v483;
                v476 += v458;
                v475 = (float *)((char *)v475 + v461 * 4);
                ++v470;
                v474 = (float *)((char *)v474 + v461 * 4);
                v445 = (float)LODWORD(v445);
                *v484 = v445;
                v473 = &v478[v461];
                v472 = &v479[v461];
                v471 = &v480[v461];
              }
              while (v470 != v454);
              v489 = 0;
              do
              {
                v490 = v479;
                v491 = v480;
                v492 = v478;
                v493 = v457;
                v494 = v476;
                do
                {
                  LOBYTE(v445) = *v494;
                  v445 = (float)LODWORD(v445);
                  *v492 = v445;
                  v494 += v464;
                  v492 = (float *)((char *)v492 + v465);
                  --v493;
                }
                while (v493);
                LOBYTE(v445) = *v494;
                v445 = (float)LODWORD(v445);
                *v492 = v445;
                v476 += v460;
                v478 = (float *)((char *)v478 + v462);
                ++v489;
                v479 = (float *)((char *)v479 + v462);
                v480 = (float *)((char *)v480 + v462);
              }
              while (v489 != v456);
              v495 = v457;
              do
              {
                LOBYTE(v445) = *v476;
                v445 = (float)LODWORD(v445);
                *v491 = v445;
                v476 += v464;
                v490 = (float *)((char *)v490 + v465);
                v491 = (float *)((char *)v491 + v465);
                --v495;
              }
              while (v495);
              LOBYTE(v445) = *v476;
              v453 += v1103;
              v452 = (float *)((char *)v452 + v1116);
              v463 = v1123 + 1;
              v466 = (float *)((char *)v466 + v1116);
              v445 = (float)LODWORD(v445);
              *v490 = v445;
              v467 = (float *)((char *)v467 + v1116);
              v468 = (float *)((char *)v468 + v1116);
              v469 = (float *)((char *)v469 + v1116);
            }
            while (v1123 + 1 != v1109);
          }
          else
          {
            v524 = &v449[v461];
            v452 = v449;
            do
            {
              v525 = 0;
              v526 = v524;
              v527 = v452;
              v528 = v453;
              do
              {
                v529 = v526;
                v530 = v527;
                v531 = v456;
                v532 = v528;
                do
                {
                  LOBYTE(v445) = *v532;
                  v445 = (float)LODWORD(v445);
                  *v530 = v445;
                  v532 += v460;
                  v530 = (float *)((char *)v530 + v462);
                  --v531;
                }
                while (v531);
                LOBYTE(v445) = *v532;
                v445 = (float)LODWORD(v445);
                *v530 = v445;
                v528 += v458;
                v527 = (float *)((char *)v527 + v461 * 4);
                ++v525;
                v526 = &v529[v461];
              }
              while (v525 != v454);
              v533 = v456;
              do
              {
                LOBYTE(v445) = *v528;
                v445 = (float)LODWORD(v445);
                *v529 = v445;
                v528 += v460;
                v529 = (float *)((char *)v529 + v462);
                --v533;
              }
              while (v533);
              LOBYTE(v445) = *v528;
              v445 = (float)LODWORD(v445);
              *v529 = v445;
              v453 += v455;
              v452 = (float *)((char *)v452 + v1116);
              ++v463;
              v524 = (float *)((char *)v524 + v1116);
            }
            while (v463 != v451);
          }
        }
        else if (*(_DWORD *)&pixelBuffer[8])
        {
          v509 = 0;
          v510 = 4 * *(unsigned int *)&pixelBuffer[52];
          v511 = *(unsigned int *)&pixelBuffer[40];
          v512 = *(unsigned int *)&pixelBuffer[12];
          v513 = 4 * *(unsigned int *)&pixelBuffer[16];
          v514 = &v449[v511];
          v452 = v449;
          do
          {
            v515 = 0;
            v516 = v514;
            v517 = v452;
            v518 = v453;
            do
            {
              v519 = v516;
              v520 = v517;
              v521 = v457;
              v522 = v518;
              do
              {
                LOBYTE(v445) = *v522;
                v445 = (float)LODWORD(v445);
                *v520 = v445;
                v522 += v512;
                v520 = (float *)((char *)v520 + v513);
                --v521;
              }
              while (v521);
              LOBYTE(v445) = *v522;
              v445 = (float)LODWORD(v445);
              *v520 = v445;
              v518 += v458;
              v517 = (float *)((char *)v517 + v511 * 4);
              ++v515;
              v516 = &v519[v511];
            }
            while (v515 != v454);
            v523 = v457;
            do
            {
              LOBYTE(v445) = *v518;
              v445 = (float)LODWORD(v445);
              *v519 = v445;
              v518 += v512;
              v519 = (float *)((char *)v519 + v513);
              --v523;
            }
            while (v523);
            LOBYTE(v445) = *v518;
            v445 = (float)LODWORD(v445);
            *v519 = v445;
            v453 += v455;
            v452 = (float *)((char *)v452 + v510);
            ++v509;
            v514 = (float *)((char *)v514 + v510);
          }
          while (v509 != v451);
        }
        else
        {
          v534 = 0;
          v535 = 4 * *(unsigned int *)&pixelBuffer[52];
          v452 = v449;
          do
          {
            v536 = v452;
            v537 = v454;
            v538 = v453;
            do
            {
              LOBYTE(v445) = *v538;
              v445 = (float)LODWORD(v445);
              *v536 = v445;
              v538 += v458;
              v536 += v459;
              --v537;
            }
            while (v537);
            LOBYTE(v445) = *v538;
            v445 = (float)LODWORD(v445);
            *v536 = v445;
            v453 += v455;
            v452 = (float *)((char *)v452 + v535);
            ++v534;
          }
          while (v534 != v451);
        }
        goto LABEL_646;
      }
      v496 = *(unsigned int *)&pixelBuffer[24];
      v497 = 4 * *(unsigned int *)&pixelBuffer[52];
      v498 = *(unsigned int *)&pixelBuffer[12];
      v499 = 4 * *(unsigned int *)&pixelBuffer[28];
      v500 = 4 * *(unsigned int *)&pixelBuffer[16];
      v452 = v449;
      v453 = v1098;
      while (2)
      {
        v501 = v453;
        v502 = v452;
        if (v456)
        {
          v502 = v452;
          v503 = v456;
          v501 = v453;
          if (v457)
          {
            v504 = 0;
            v502 = v452;
            v501 = v453;
            do
            {
              v505 = v502;
              v506 = v457;
              v507 = v501;
              do
              {
                LOBYTE(v445) = *v507;
                v445 = (float)LODWORD(v445);
                *v505 = v445;
                v507 += v498;
                v505 = (float *)((char *)v505 + v500);
                --v506;
              }
              while (v506);
              LOBYTE(v445) = *v507;
              v445 = (float)LODWORD(v445);
              *v505 = v445;
              v501 += v496;
              v502 = (float *)((char *)v502 + v499);
              ++v504;
            }
            while (v504 != v456);
            goto LABEL_676;
          }
          do
          {
            LOBYTE(v445) = *v501;
            v445 = (float)LODWORD(v445);
            *v502 = v445;
            v501 += v496;
            v502 = (float *)((char *)v502 + v499);
            --v503;
          }
          while (v503);
        }
        else
        {
LABEL_676:
          if (v457)
          {
            v508 = v457;
            do
            {
              LOBYTE(v445) = *v501;
              v445 = (float)LODWORD(v445);
              *v502 = v445;
              v501 += v498;
              v502 = (float *)((char *)v502 + v500);
              --v508;
            }
            while (v508);
          }
        }
        LOBYTE(v445) = *v501;
        v445 = (float)LODWORD(v445);
        *v502 = v445;
        v453 += v455;
        v452 = (float *)((char *)v452 + v497);
        if (++v454 == v451)
          goto LABEL_646;
        continue;
      }
    }
LABEL_711:
    if (!v1203)
      goto LABEL_1195;
    v540 = *(std::__shared_weak_count **)&v1197[16];
    if (!*(_QWORD *)&v1197[16])
      goto LABEL_1195;
    v541 = (unint64_t *)(*(_QWORD *)&v1197[16] + 8);
    do
      v542 = __ldaxr(v541);
    while (__stlxr(v542 - 1, v541));
LABEL_1193:
    if (!v542)
    {
      ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
      std::__shared_weak_count::__release_weak(v540);
    }
LABEL_1195:
    if (v1243)
    {
      v794 = (std::__shared_weak_count *)*((_QWORD *)&v1237 + 1);
      if (*((_QWORD *)&v1237 + 1))
      {
        v795 = (unint64_t *)(*((_QWORD *)&v1237 + 1) + 8);
        do
          v796 = __ldaxr(v795);
        while (__stlxr(v796 - 1, v795));
LABEL_1497:
        if (!v796)
        {
          ((void (*)(std::__shared_weak_count *))v794->__on_zero_shared)(v794);
          std::__shared_weak_count::__release_weak(v794);
        }
      }
    }
LABEL_1499:
    v54 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
    v1060 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((unint64_t)v1060 & 0xFFFFFFFFFFFFFF00);
    v54->~__shared_weak_count = v1060;
    HIBYTE(v54->__on_zero_shared) = 0;
    v61 = (std::__shared_weak_count *)operator new(0x20uLL);
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C06F1C0;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61[1].__vftable = v54;
    if (v1282 != -1)
      ((void (*)(int64x2_t *, int64x2_t *))off_24C084E78[v1282])(&v1232, &v1270);
    if (v1295 != -1)
      ((void (*)(int64x2_t *, int64x2_t *))off_24C084E78[v1295])(&v1270, &v1283);
    v62 = 0;
LABEL_1504:
    *(_BYTE *)(a1 + 8) = v62;
    v923 = (unint64_t *)&v61->__shared_owners_;
    do
      v924 = __ldxr(v923);
    while (__stxr(v924 + 1, v923));
    v925 = *(std::__shared_weak_count **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v54;
    *(_QWORD *)(a1 + 24) = v61;
    if (v925)
    {
      v926 = (unint64_t *)&v925->__shared_owners_;
      do
        v927 = __ldaxr(v926);
      while (__stlxr(v927 - 1, v926));
      if (!v927)
      {
        ((void (*)(std::__shared_weak_count *))v925->__on_zero_shared)(v925);
        std::__shared_weak_count::__release_weak(v925);
      }
    }
    do
      v928 = __ldaxr(v923);
    while (__stlxr(v928 - 1, v923));
    if (v928)
    {
      if (!v1138)
        goto LABEL_1520;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      if (!v1138)
        goto LABEL_1520;
    }
    v699 = (std::__shared_weak_count *)*((_QWORD *)&v1132 + 1);
    if (!*((_QWORD *)&v1132 + 1))
      goto LABEL_1520;
    v929 = (unint64_t *)(*((_QWORD *)&v1132 + 1) + 8);
    do
      v701 = __ldaxr(v929);
    while (__stlxr(v701 - 1, v929));
LABEL_1519:
    if (!v701)
    {
      ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
      std::__shared_weak_count::__release_weak(v699);
      v930 = (_QWORD *)a1;
      if (*(_BYTE *)(a1 + 8))
      {
LABEL_1521:
        v931 = 0;
        if (!v1163)
          goto LABEL_1533;
        goto LABEL_1522;
      }
    }
    else
    {
LABEL_1520:
      v930 = (_QWORD *)a1;
      if (*(_BYTE *)(a1 + 8))
        goto LABEL_1521;
    }
    *v930 = off_24C06E9E8;
    v935 = (std::__shared_weak_count *)v930[3];
    if (!v935)
      goto LABEL_1532;
    v936 = (unint64_t *)&v935->__shared_owners_;
    do
      v937 = __ldaxr(v936);
    while (__stlxr(v937 - 1, v936));
    if (!v937)
    {
      ((void (*)(std::__shared_weak_count *))v935->__on_zero_shared)(v935);
      std::__shared_weak_count::__release_weak(v935);
      v931 = 1;
      if (!v1163)
        goto LABEL_1533;
    }
    else
    {
LABEL_1532:
      v931 = 1;
      if (!v1163)
        goto LABEL_1533;
    }
LABEL_1522:
    v932 = v1157;
    if (v1157)
    {
      v933 = (unint64_t *)&v1157->__shared_owners_;
      do
        v934 = __ldaxr(v933);
      while (__stlxr(v934 - 1, v933));
      if (!v934)
      {
        ((void (*)(std::__shared_weak_count *))v932->__on_zero_shared)(v932);
        std::__shared_weak_count::__release_weak(v932);
      }
    }
LABEL_1533:
    if ((v931 & 1) == 0)
      return;
    v4 = v1077 + 1;
  }
  while (v1077 + 1 != v1067);
LABEL_1647:
  *(_QWORD *)a1 = off_24C06E9E8;
  *(_BYTE *)(a1 + 8) = 0;
  v981 = operator new(0x18uLL);
  *(_QWORD *)v981 = 0;
  v981[23] = 0;
  *(_QWORD *)(a1 + 16) = v981;
  v982 = operator new(0x20uLL);
  *v982 = &unk_24C06F1C0;
  v982[1] = 0;
  v982[2] = 0;
  v982[3] = v981;
  *(_QWORD *)(a1 + 24) = v982;
}

void sub_2080B5F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a66;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;

  v69 = STACK[0xA00];
  if (STACK[0xA00])
  {
    v70 = STACK[0xA08];
    v71 = (void *)STACK[0xA00];
    if (STACK[0xA08] != v69)
    {
      do
      {
        if (*(char *)(v70 - 1) < 0)
          operator delete(*(void **)(v70 - 24));
        v70 -= 24;
      }
      while (v70 != v69);
      v71 = (void *)STACK[0xA00];
    }
    STACK[0xA08] = v69;
    operator delete(v71);
  }
  if (SLOBYTE(STACK[0xA7F]) < 0)
    operator delete((void *)STACK[0xA68]);
  if (SLOBYTE(STACK[0xA67]) < 0)
    operator delete((void *)STACK[0xA50]);
  if (SLOBYTE(STACK[0xA2F]) < 0)
    operator delete((void *)STACK[0xA18]);
  __cxa_guard_abort(&qword_253E51450);
  __cxa_free_exception(v66);
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  sub_2080B7680((uint64_t)&STACK[0x680]);
  sub_207CA140C((uint64_t)&STACK[0x780]);
  sub_207CA9514((uint64_t)&STACK[0xB00]);
  sub_207CA9148((uint64_t)&STACK[0x430]);
  if (SLOBYTE(STACK[0x4F7]) < 0)
    operator delete((void *)STACK[0x4E0]);
  sub_207CA140C((uint64_t)&STACK[0x260]);
  sub_207C9C674(a66);
  sub_207CA140C((uint64_t)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

void sub_2080B676C(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t (**v40)();
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *__p;
  char *v45;
  char v46;
  __int128 v47;
  unint64_t v48;
  _OWORD v49[3];
  int v50;
  uint64_t (**v51)();
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  char v59;
  int v60;
  _BYTE v61[9];

  sub_2080AD388(a1, a2, (uint64_t)&v40);
  v4 = v41;
  if (v41 || !v46)
  {
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = v4;
    v5 = v43;
    *(_QWORD *)(a3 + 16) = v42;
    *(_QWORD *)(a3 + 24) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 56) = 0;
    if (v46)
      goto LABEL_37;
  }
  else
  {
    *(_QWORD *)a3 = off_24C06E9E8;
    *(_BYTE *)(a3 + 8) = 0;
    v8 = v43;
    *(_QWORD *)(a3 + 16) = v42;
    *(_QWORD *)(a3 + 24) = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      if (!v46)
        sub_207CA2A4C();
    }
    v48 = 0;
    v47 = 0uLL;
    sub_207CA8804((char **)&v47, 0xEEEEEEEEEEEEEEEFLL * ((v45 - (_BYTE *)__p) >> 3));
    v11 = (char *)__p;
    v12 = v45;
    if (__p != v45)
    {
      do
      {
        v13 = *(_OWORD *)v11;
        v14 = *((_OWORD *)v11 + 1);
        v15 = *((_OWORD *)v11 + 2);
        v50 = *((_DWORD *)v11 + 12);
        v49[1] = v14;
        v49[2] = v15;
        v49[0] = v13;
        LOBYTE(v51) = 0;
        v59 = 0;
        if (v11[112])
        {
          v51 = off_24C06E878;
          v16 = *((_QWORD *)v11 + 8);
          v17 = (std::__shared_weak_count *)*((_QWORD *)v11 + 9);
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
            v20 = *((_QWORD *)v11 + 12);
            v21 = *((_DWORD *)v11 + 26);
            v22 = *((_WORD *)v11 + 54);
            do
              v23 = __ldxr(v18);
            while (__stxr(v23 + 1, v18));
          }
          else
          {
            v20 = *((_QWORD *)v11 + 12);
            v21 = *((_DWORD *)v11 + 26);
            v22 = *((_WORD *)v11 + 54);
          }
          v52 = v16;
          v53 = v17;
          v24 = *((_DWORD *)v11 + 22);
          v54 = *((_QWORD *)v11 + 10);
          v55 = v24;
          v56 = v20;
          v57 = v21;
          v58 = v22;
          if (v17)
          {
            v25 = (unint64_t *)&v17->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v59 = 1;
        }
        v60 = 2;
        v27 = *((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1) >= v48)
        {
          v29 = sub_207CA896C((char **)&v47, (uint64_t)v49);
        }
        else
        {
          **((_BYTE **)&v47 + 1) = 0;
          *(_DWORD *)(v27 + 120) = -1;
          v28 = v60;
          if (v60 != -1)
          {
            ((void (*)(_BYTE *, uint64_t, _OWORD *))off_24C084C70[v60])(v61, v27, v49);
            *(_DWORD *)(v27 + 120) = v28;
          }
          v29 = (char *)(v27 + 128);
        }
        *((_QWORD *)&v47 + 1) = v29;
        if (v60 != -1)
          ((void (*)(_BYTE *, _OWORD *))off_24C084C58[v60])(v61, v49);
        v11 += 120;
      }
      while (v11 != v12);
    }
    v30 = v48;
    *(_OWORD *)(a3 + 32) = v47;
    *(_QWORD *)(a3 + 48) = v30;
    *(_BYTE *)(a3 + 56) = 1;
    if (v46)
    {
LABEL_37:
      v31 = (char *)__p;
      if (__p)
      {
        v32 = v45;
        v33 = __p;
        if (v45 != __p)
        {
          do
          {
            if (*(v32 - 8))
            {
              v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 6);
              if (v34)
              {
                v35 = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
            }
            v32 -= 120;
          }
          while (v32 != v31);
          v33 = __p;
        }
        v45 = v31;
        operator delete(v33);
      }
    }
  }
  v40 = off_24C06E9E8;
  v37 = v43;
  if (v43)
  {
    v38 = (unint64_t *)&v43->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_2080B6AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_207C9C674(v9);
  sub_207CA86F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080B6AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _QWORD *v17;

  sub_207C9F334(&a17);
  sub_207C9C674(v17);
  sub_207CA86F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2080B6B44()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Async execution not implemented");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_2080B6B80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2080B6B94(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 1 && *(_DWORD *)(a1 + 12) == 1;
}

BOOL sub_2080B6BA8(uint64_t a1)
{
  uint64_t v1;

  v1 = 4;
  if (*(_DWORD *)(a1 + 48) != 65)
    v1 = 1;
  return v1 == *(unsigned int *)(a1 + 24);
}

void sub_2080B6BC8(uint64_t a1, int64x2_t *a2)
{
  __int32 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *exception;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  _OWORD v40[2];
  char v41;
  _OWORD v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE v49[16];
  std::__shared_weak_count *v50;
  char v51;
  __int128 v52;
  int v53;
  char v54;
  __int128 v55;
  int v56;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  memset(v42, 0, sizeof(v42));
  LODWORD(v43) = 16;
  v48 = 0;
  v3 = a2[10].i32[0];
  if (v3 != 262152)
  {
    if (v3 != 65568)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 723, (uint64_t)"", 0, (uint64_t)"EspressoBufferToConstDataView32f requires FLOAT32 or UINT8 storage", 66, (void (*)(void **))sub_208216974);
      abort();
    }
    v4 = a2[7].u64[1];
    if (HIDWORD(v4)
      || (v5 = a2[5].u64[0], HIDWORD(v5))
      || (v6 = a2[5].u64[1], HIDWORD(v6))
      || (v7 = a2[6].u64[0], HIDWORD(v7))
      || (v8 = a2[6].u64[1], HIDWORD(v8)))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C08F078;
      __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
    }
    v9 = a2->i64[0];
    v10 = a2[8];
    v11 = a2[9].i64[0];
    *(_QWORD *)&v55 = __PAIR64__(v5, v4);
    *((_QWORD *)&v55 + 1) = __PAIR64__(v7, v6);
    v56 = v8;
    LODWORD(v52) = 1;
    DWORD1(v52) = v4;
    *((int32x2_t *)&v52 + 1) = vmovn_s64(v10);
    v53 = v11;
    v54 = 1;
    v49[0] = 0;
    v51 = 0;
    sub_20809E7AC((uint64_t)&v35, v9, &v55, &v52, &dword_208266D30, (uint64_t)v49);
    if (v51)
    {
      v12 = v50;
      if (v50)
      {
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = v36;
    *(_OWORD *)a1 = v35;
    *(_OWORD *)(a1 + 16) = v15;
    *(_OWORD *)(a1 + 32) = v37;
    *(_DWORD *)(a1 + 48) = v38;
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v41)
    {
      *(_QWORD *)(a1 + 56) = off_24C06F140;
      v16 = v39;
      v17 = v40[0];
      v39 = 0uLL;
      *(_OWORD *)(a1 + 64) = v16;
      *(_OWORD *)(a1 + 80) = v17;
      *(_OWORD *)(a1 + 94) = *(_OWORD *)((char *)v40 + 14);
      *(_BYTE *)(a1 + 112) = 1;
    }
    *(_DWORD *)(a1 + 120) = 1;
    v18 = v48;
    if (v48 == -1)
      return;
LABEL_32:
    ((void (*)(__int128 *, _OWORD *))off_24C084E78[v18])(&v35, v42);
    return;
  }
  v19 = a2[7].u64[1];
  if (HIDWORD(v19)
    || (v20 = a2[5].u64[0], HIDWORD(v20))
    || (v21 = a2[5].u64[1], HIDWORD(v21))
    || (v22 = a2[6].u64[0], HIDWORD(v22))
    || (v23 = a2[6].u64[1], HIDWORD(v23)))
  {
    v34 = __cxa_allocate_exception(8uLL);
    *v34 = &off_24C08F078;
    __cxa_throw(v34, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  v24 = a2->i64[0];
  v25 = a2[8];
  v26 = a2[9].i64[0];
  *(_QWORD *)&v55 = __PAIR64__(v20, v19);
  *((_QWORD *)&v55 + 1) = __PAIR64__(v22, v21);
  v56 = v23;
  LODWORD(v52) = 1;
  DWORD1(v52) = v19;
  *((int32x2_t *)&v52 + 1) = vmovn_s64(v25);
  v53 = v26;
  v54 = 1;
  v49[0] = 0;
  v51 = 0;
  sub_20809E7AC((uint64_t)&v35, v24, &v55, &v52, &dword_208266D38, (uint64_t)v49);
  if (v51)
  {
    v27 = v50;
    if (v50)
    {
      v28 = (unint64_t *)&v50->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v30 = v36;
  *(_OWORD *)a1 = v35;
  *(_OWORD *)(a1 + 16) = v30;
  *(_OWORD *)(a1 + 32) = v37;
  *(_DWORD *)(a1 + 48) = v38;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v41)
  {
    *(_QWORD *)(a1 + 56) = off_24C06F140;
    v31 = v39;
    v32 = v40[0];
    v39 = 0uLL;
    *(_OWORD *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 80) = v32;
    *(_OWORD *)(a1 + 94) = *(_OWORD *)((char *)v40 + 14);
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_DWORD *)(a1 + 120) = 0;
  v18 = v48;
  if (v48 != -1)
    goto LABEL_32;
}

void sub_2080B6F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_207CA2C18(v17 - 144);
  sub_2080B6FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080B6F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2080B6FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080B6FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2080B6FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080B6FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2080B6FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080B6FC8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C084E78[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_2080B7020(uint64_t a1)
{
  _OWORD *v2;
  int v3;
  size_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  _QWORD v18[5];
  _QWORD *v19;

  v2 = operator new(0x118uLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[16] = 0u;
  *((_QWORD *)v2 + 34) = 0;
  sub_207CA2878((uint64_t)v2);
  v18[0] = v2;
  std::ostream::operator<<();
  v3 = *((_DWORD *)v2 + 30);
  if ((v3 & 0x10) != 0)
  {
    v6 = *((_QWORD *)v2 + 14);
    v7 = *((_QWORD *)v2 + 9);
    if (v6 < v7)
    {
      *((_QWORD *)v2 + 14) = v7;
      v6 = v7;
    }
    v8 = (const void *)*((_QWORD *)v2 + 8);
    v4 = v6 - (_QWORD)v8;
    if (v6 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      HIBYTE(v17) = 0;
      v5 = __dst;
      goto LABEL_14;
    }
    v8 = (const void *)*((_QWORD *)v2 + 5);
    v4 = *((_QWORD *)v2 + 7) - (_QWORD)v8;
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)v4;
    v17 = v10 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_13;
  }
  HIBYTE(v17) = v4;
  v5 = __dst;
  if (v4)
LABEL_13:
    memmove(v5, v8, v4);
LABEL_14:
  *((_BYTE *)v5 + v4) = 0;
  v11 = v18[0];
  if (v18[0])
  {
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v18[0] = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v11 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v11 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v11 + 16) = v14;
    if (*(char *)(v11 + 111) < 0)
      operator delete(*(void **)(v11 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v11 + 128);
    operator delete((void *)v11);
  }
  v18[0] = a1;
  v18[1] = __dst;
  v18[2] = a1;
  v18[3] = __dst;
  v18[4] = __dst;
  v15 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v15 == -1)
    sub_207CA9F48();
  v19 = v18;
  ((void (*)(_QWORD **, uint64_t))off_24C084C10[v15])(&v19, a1);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst[0]);
}

void sub_2080B7250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_2080B7278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_2080B728C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    sub_2080B728C(*a1);
    sub_2080B728C(a1[1]);
    if (!*((_BYTE *)a1 + 112))
      goto LABEL_8;
    if (!*((_BYTE *)a1 + 104))
      goto LABEL_8;
    a1[10] = &off_24C08A5D8;
    v2 = (std::__shared_weak_count *)a1[12];
    if (!v2)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(a1);
    }
    else
    {
LABEL_8:
      operator delete(a1);
    }
  }
}

uint64_t sub_2080B7328(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2080B7390(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  __CVBuffer **v11;
  __CVBuffer *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  __CVBuffer *pixelBuffer;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  __CVBuffer **v27;
  std::__shared_weak_count *v28;

  if (!a4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&a4->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    sub_20812AC30(a3, &v26);
    v11 = v27;
    if (v27)
      goto LABEL_7;
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
  std::__shared_weak_count::__release_weak(a4);
  sub_20812AC30(a3, &v26);
  v11 = v27;
  if (!v27)
    goto LABEL_16;
LABEL_7:
  v12 = *v11;
  v13 = (std::__shared_weak_count *)v11[1];
  if (!v13)
  {
LABEL_17:
    pixelBuffer = v12;
    v25 = 0;
    goto LABEL_18;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  pixelBuffer = v12;
  v25 = v13;
  do
    v16 = __ldxr(v14);
  while (__stxr(v16 + 1, v14));
  do
    v17 = __ldaxr(v14);
  while (__stlxr(v17 - 1, v14));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_18:
  v26 = &off_24C08A5D8;
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!CVPixelBufferGetIOSurface(pixelBuffer)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoModelInstance.cpp", 525, (uint64_t)"CVPixelBufferGetIOSurface(ref)", 30, (uint64_t)"The input buffer is not IOSurface backed", 40, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (**(_BYTE **)a2 && **(_DWORD **)(a2 + 8) == 1)
    v21 = espresso_network_bind_direct_cvpixelbuffer();
  else
    v21 = espresso_network_bind_input_cvpixelbuffer();
  sub_2080B76F0(a1, *(unint64_t ****)(a2 + 40), v21);
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_2080B75F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2080B7604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080B7618(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2080B7680(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_2080B76F0(uint64_t a1, unint64_t ***a2, int a3)
{
  std::string *v4;
  void *v5;
  unint64_t size;
  int v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string __p;
  _DWORD v14[2];

  if (a3)
  {
    sub_207C9F428(**a2);
    v4 = std::string::insert(&__p, 0, "Failed to bind buffer created for Espresso Model input ", 0x37uLL);
    v5 = (void *)v4->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
    v14[0] = v4->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v14 + 3) = *(_DWORD *)((char *)&v4->__r_.__value_.__r.__words[2] + 3);
    v7 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)a1 = off_24C06E9E8;
    *(_BYTE *)(a1 + 8) = 5;
    v8 = (char *)operator new(0x18uLL);
    v9 = v8;
    if (v7 < 0)
    {
      sub_207CA40D8(v8, v5, size);
    }
    else
    {
      *(_QWORD *)v8 = v5;
      *((_QWORD *)v8 + 1) = size;
      *((_DWORD *)v8 + 4) = v14[0];
      *(_DWORD *)(v8 + 19) = *(_DWORD *)((char *)v14 + 3);
      v8[23] = v7;
    }
    *(_QWORD *)(a1 + 16) = v9;
    v12 = operator new(0x20uLL);
    *v12 = &unk_24C06F1C0;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v9;
    *(_QWORD *)(a1 + 24) = v12;
    if (v7 < 0)
    {
      operator delete(v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_11:
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_11;
    }
  }
  else
  {
    *(_QWORD *)a1 = off_24C06E9E8;
    *(_BYTE *)(a1 + 8) = 0;
    v10 = operator new(0x18uLL);
    v10[23] = 0;
    *v10 = 0;
    *(_QWORD *)(a1 + 16) = v10;
    v11 = operator new(0x20uLL);
    *v11 = &unk_24C06F1C0;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    *(_QWORD *)(a1 + 24) = v11;
  }
}

void sub_2080B786C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  int v16;

  operator delete(v15);
  if (v16 < 0)
  {
    operator delete(v14);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2080B78F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080B7958()
{
  return 25;
}

uint64_t sub_2080B7960(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_2080B7968@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_2080B797C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2080B7A00(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_2080B7A68()
{
  return 3;
}

uint64_t sub_2080B7A70(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_2080B7A78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_2080B7A90(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_DWORD *sub_2080B7B14(_DWORD *a1, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  int v9;
  char *v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned int v32;
  uint64_t *v33;
  int v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;

  if (a1[11])
  {
    v9 = 0;
    while (1)
    {
      v35 = v9;
      v36 = __src;
      v37 = __dst;
      v10 = __src;
      v11 = a3;
      if (a1[8])
        break;
LABEL_3:
      sub_2080B7F80(a1, a2, v11, v10, __dst);
      __src = &v36[4 * a1[12]];
      __dst = &v37[4 * a1[13]];
      v9 = v35 + 1;
      if ((v35 + 1) >= a1[11])
        goto LABEL_44;
    }
    v12 = 0;
    v10 = v36;
    while (1)
    {
      v38 = v12;
      v13 = a1[3];
      v14 = a1[4];
      *(_QWORD *)a2 = v10;
      *(_DWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v14;
      v15 = a1[5];
      v39 = v10;
      v40 = __dst;
      if (v15)
      {
        v16 = 0;
        while (1)
        {
          *(_QWORD *)a2 = v10;
          *(_QWORD *)(a2 + 16) = __dst;
          v18 = *v11;
          if (!v10)
          {
            if (v18)
              break;
          }
          v17 = __dst;
          if (v18)
            goto LABEL_12;
LABEL_13:
          v10 += 4 * a1[6];
          __dst += 4 * a1[7];
          if (++v16 >= v15)
            goto LABEL_29;
        }
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v19 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v21 = qword_2545309E8;
          v22 = qword_2545309F0;
          while (v21 != v22)
          {
            v24 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v21;
            v23 = *(_QWORD *)(v21 + 8);
            v21 += 16;
            v24(v23, "ptr != nullptr || size == 0", 27, "", 0);
          }
        }
        v20 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        v11 = a3;
        if (!byte_254530A10)
          goto LABEL_50;
        qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
        v17 = *(char **)(a2 + 16);
LABEL_12:
        memmove(v17, v10, 4 * v18);
        v15 = a1[5];
        goto LABEL_13;
      }
LABEL_29:
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 16) = __dst;
      v25 = *v11;
      if (!v10)
      {
        if (v25)
          break;
      }
      if (v25)
        goto LABEL_7;
LABEL_8:
      v10 = &v39[4 * a1[9]];
      __dst = &v40[4 * a1[10]];
      v12 = v38 + 1;
      if ((v38 + 1) >= a1[8])
        goto LABEL_3;
    }
    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    v26 = atomic_load((unsigned __int8 *)&qword_254530A20);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
    {
      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
      __cxa_guard_release(&qword_254530A20);
    }
    if (!byte_254530A10 || byte_254530A18)
    {
      v29 = qword_2545309E8;
      v28 = qword_2545309F0;
      while (v29 != v28)
      {
        v31 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v29;
        v30 = *(_QWORD *)(v29 + 8);
        v29 += 16;
        v31(v30, "ptr != nullptr || size == 0", 27, "", 0);
      }
    }
    v27 = atomic_load((unsigned __int8 *)&qword_254530A20);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
    {
      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
      __cxa_guard_release(&qword_254530A20);
    }
    if (!byte_254530A10)
LABEL_50:
      abort();
    qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
    __dst = *(char **)(a2 + 16);
LABEL_7:
    memmove(__dst, v10, 4 * v25);
    goto LABEL_8;
  }
LABEL_44:
  if (a1[8])
  {
    v32 = 0;
    v33 = a3;
    do
    {
      sub_2080B7F80(a1, a2, a3, __src, __dst);
      __src += 4 * a1[9];
      __dst += 4 * a1[10];
      ++v32;
    }
    while (v32 < a1[8]);
  }
  else
  {
    v33 = a3;
  }
  return sub_2080B7F80(a1, a2, v33, __src, __dst);
}

_DWORD *sub_2080B7F80(_DWORD *result, uint64_t a2, uint64_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += 4 * v12[6];
      v5 += 4 * v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, 4 * v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, 4 * v15);
  }
  if (v15)
    return memmove(v5, v6, 4 * v15);
  return result;
}

_DWORD *sub_2080B80FC(_DWORD *a1, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  size_t *v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  size_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned int v33;
  int v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;

  v9 = a1;
  if (a1[11])
  {
    v10 = 0;
    while (1)
    {
      v35 = v10;
      v36 = __src;
      v37 = __dst;
      if (v9[8])
        break;
LABEL_3:
      sub_2080B8590(v9, a2, a3, __src, __dst);
      __src = &v36[v9[12]];
      __dst = &v37[v9[13]];
      v10 = v35 + 1;
      if ((v35 + 1) >= v9[11])
        goto LABEL_44;
    }
    v11 = 0;
    while (1)
    {
      v38 = v11;
      v12 = v9[3];
      v13 = v9[4];
      *(_QWORD *)a2 = __src;
      *(_DWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 16) = __dst;
      *(_DWORD *)(a2 + 24) = v13;
      v14 = v9[5];
      v39 = __src;
      v40 = __dst;
      if (v14)
      {
        v15 = 0;
        while (1)
        {
          *(_QWORD *)a2 = __src;
          *(_QWORD *)(a2 + 16) = __dst;
          v17 = *a3;
          if (!__src)
          {
            if (v17)
              break;
          }
          v16 = __dst;
          if (v17)
            goto LABEL_12;
LABEL_13:
          __src += v9[6];
          __dst += v9[7];
          if (++v15 >= v14)
            goto LABEL_29;
        }
        v18 = a2;
        v19 = a3;
        sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
        v20 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10 || byte_254530A18)
        {
          v23 = qword_2545309E8;
          v22 = qword_2545309F0;
          while (v23 != v22)
          {
            v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v23;
            v24 = *(_QWORD *)(v23 + 8);
            v23 += 16;
            v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
          }
        }
        v21 = atomic_load((unsigned __int8 *)&qword_254530A20);
        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
        {
          __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
          __cxa_guard_release(&qword_254530A20);
        }
        if (!byte_254530A10)
          goto LABEL_48;
        a3 = v19;
        qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
        a2 = v18;
        v16 = *(char **)(v18 + 16);
        v9 = a1;
LABEL_12:
        memmove(v16, __src, v17);
        v14 = v9[5];
        goto LABEL_13;
      }
LABEL_29:
      *(_QWORD *)a2 = __src;
      *(_QWORD *)(a2 + 16) = __dst;
      v26 = *a3;
      if (!__src)
      {
        if (v26)
          break;
      }
      if (v26)
        goto LABEL_7;
LABEL_8:
      __src = &v39[v9[9]];
      __dst = &v40[v9[10]];
      v11 = v38 + 1;
      if ((v38 + 1) >= v9[8])
        goto LABEL_3;
    }
    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    v27 = atomic_load((unsigned __int8 *)&qword_254530A20);
    if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
    {
      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
      __cxa_guard_release(&qword_254530A20);
    }
    if (!byte_254530A10 || byte_254530A18)
    {
      v29 = qword_2545309E8;
      v30 = qword_2545309F0;
      while (v29 != v30)
      {
        v32 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v29;
        v31 = *(_QWORD *)(v29 + 8);
        v29 += 16;
        v32(v31, "ptr != nullptr || size == 0", 27, "", 0);
      }
    }
    v28 = atomic_load((unsigned __int8 *)&qword_254530A20);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
    {
      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
      __cxa_guard_release(&qword_254530A20);
    }
    if (!byte_254530A10)
LABEL_48:
      abort();
    qword_254530A00(*(_QWORD *)algn_254530A08, "ptr != nullptr || size == 0", 27, "", 0);
    __dst = *(char **)(a2 + 16);
LABEL_7:
    memmove(__dst, __src, v26);
    goto LABEL_8;
  }
LABEL_44:
  if (v9[8])
  {
    v33 = 0;
    do
    {
      sub_2080B8590(v9, a2, a3, __src, __dst);
      __src += v9[9];
      __dst += v9[10];
      ++v33;
    }
    while (v33 < v9[8]);
  }
  return sub_2080B8590(v9, a2, a3, __src, __dst);
}

_DWORD *sub_2080B8590(_DWORD *result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  unsigned int v11;
  _DWORD *v12;
  int v13;
  size_t v14;
  size_t v15;

  v5 = __dst;
  v6 = __src;
  v9 = result[3];
  v10 = result[4];
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  v11 = result[5];
  if (v11)
  {
    v12 = result;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v14 = *a3;
      if (!v6)
      {
        if (v14)
          break;
      }
      result = v5;
      if (v14)
        goto LABEL_4;
LABEL_5:
      v6 += v12[6];
      v5 += v12[7];
      if (++v13 >= v11)
        goto LABEL_10;
    }
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_17;
    }
    result = *(_DWORD **)(a2 + 16);
LABEL_4:
    result = memmove(result, v6, v14);
    v11 = v12[5];
    goto LABEL_5;
  }
LABEL_10:
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v15 = *a3;
  if (!v6 && v15)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
LABEL_17:
      abort();
    }
    v5 = *(char **)(a2 + 16);
    return memmove(v5, v6, v15);
  }
  if (v15)
    return memmove(v5, v6, v15);
  return result;
}

void sub_2080B870C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_2080B876C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

__n128 sub_2080B87D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C084EC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2080B880C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C084EC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2080B882C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_2080B8834(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPF24espresso_return_status_tPvEJRS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2080B88A0()
{
  return &unk_24C084F28;
}

void sub_2080B88AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C084F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2080B88BC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C084F48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_2080B88DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2080B88EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (a1[2])
  {
    v1 = *a1;
    v2 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v2 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    i = *(_QWORD *)(v1 + 8) ? *(_QWORD **)(v1 + 8) : (_QWORD *)v1;
    if (i)
    {
      v4 = (_QWORD *)i[2];
      if (v4)
      {
        v5 = (_QWORD *)*v4;
        if ((_QWORD *)*v4 == i)
        {
          *v4 = 0;
          while (1)
          {
            v7 = (_QWORD *)v4[1];
            if (!v7)
              break;
            do
            {
              v4 = v7;
              v7 = (_QWORD *)*v7;
            }
            while (v7);
          }
        }
        else
        {
          for (v4[1] = 0; v5; v5 = (_QWORD *)v4[1])
          {
            do
            {
              v4 = v5;
              v5 = (_QWORD *)*v5;
            }
            while (v5);
          }
        }
        sub_2080B728C(i);
        v6 = (_QWORD *)v4[2];
        for (i = v4; v6; v6 = (_QWORD *)v6[2])
          i = v6;
      }
      sub_2080B728C(i);
    }
  }
}

void sub_2080B89AC(char a1@<W0>, void **a2@<X8>)
{
  unsigned int v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  _DWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (unsigned __int16)sub_207CF7368();
  if (v4 <= 0x100)
    LOBYTE(v4) = 0;
  if ((_BYTE)v4)
  {
    v5 = (char *)operator new(4uLL);
    *(_DWORD *)v5 = 1;
    v6 = v5 + 4;
    a2[1] = v5 + 4;
    a2[2] = v5 + 4;
    *a2 = v5;
    if ((a1 & 1) != 0)
    {
LABEL_5:
      v7 = v6;
      goto LABEL_28;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    if ((a1 & 1) != 0)
      goto LABEL_5;
  }
  v8 = v6 - v5;
  v9 = (v6 - v5) >> 2;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62)
    sub_207CA420C();
  if (v8 >> 1 > v10)
    v10 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v11 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  if (v11)
  {
    if (v11 >> 62)
      sub_207CA3AB8();
    v12 = (char *)operator new(4 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[4 * v9];
  v14 = &v12[4 * v11];
  *(_DWORD *)v13 = 2;
  v7 = v13 + 4;
  v15 = v13;
  v16 = v6 - v5;
  if (v6 != v5)
  {
    if ((unint64_t)(v16 - 4) < 0x1C)
    {
      v17 = v6;
      v15 = &v12[4 * v9];
      do
      {
LABEL_23:
        v24 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v15 - 1) = v24;
        v15 -= 4;
      }
      while (v17 != v5);
      goto LABEL_24;
    }
    v18 = ((unint64_t)(v16 - 4) >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v17 = &v6[-v19];
    v15 = &v13[-v19];
    v20 = &v12[4 * v9 - 16];
    v21 = (__int128 *)(v6 - 16);
    v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
LABEL_24:
  *a2 = v15;
  a2[1] = v7;
  a2[2] = v14;
  if (v5)
  {
    operator delete(v5);
    v14 = (char *)a2[2];
  }
  a2[1] = v7;
  v6 = v14;
  if (v7 < v14)
  {
    *((_DWORD *)v13 + 1) = 3;
    v25 = v13 + 8;
    goto LABEL_49;
  }
LABEL_28:
  v26 = (char *)*a2;
  v27 = v7 - (_BYTE *)*a2;
  v28 = v27 >> 2;
  v29 = (v27 >> 2) + 1;
  if (v29 >> 62)
    sub_207CA420C();
  if ((v6 - v26) >> 1 > v29)
    v29 = (v6 - v26) >> 1;
  if ((unint64_t)(v6 - v26) >= 0x7FFFFFFFFFFFFFFCLL)
    v30 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v30 = v29;
  if (v30)
  {
    if (v30 >> 62)
      sub_207CA3AB8();
    v31 = (char *)operator new(4 * v30);
  }
  else
  {
    v31 = 0;
  }
  v32 = &v31[4 * v28];
  v33 = &v31[4 * v30];
  *(_DWORD *)v32 = 3;
  v25 = v32 + 4;
  if (v7 == v26)
    goto LABEL_47;
  v34 = v7 - v26 - 4;
  if (v34 < 0x2C)
  {
    v35 = v7;
    goto LABEL_46;
  }
  if ((unint64_t)(v7 - v31 - v27) < 0x20)
  {
    v35 = v7;
    do
    {
LABEL_46:
      v42 = *((_DWORD *)v35 - 1);
      v35 -= 4;
      *((_DWORD *)v32 - 1) = v42;
      v32 -= 4;
    }
    while (v35 != v26);
    goto LABEL_47;
  }
  v36 = (v34 >> 2) + 1;
  v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
  v35 = &v7[-v37];
  v32 -= v37;
  v38 = &v31[4 * v28 - 16];
  v39 = (__int128 *)(v7 - 16);
  v40 = v36 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v41 = *v39;
    *((_OWORD *)v38 - 1) = *(v39 - 1);
    *(_OWORD *)v38 = v41;
    v38 -= 32;
    v39 -= 2;
    v40 -= 8;
  }
  while (v40);
  if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_46;
LABEL_47:
  *a2 = v32;
  a2[1] = v25;
  a2[2] = v33;
  if (v26)
    operator delete(v26);
LABEL_49:
  a2[1] = v25;
}

void sub_2080B8C8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080B8CAC(char a1)
{
  int *v1;
  int *v2;
  int *v3;
  int v4;
  uint64_t context;
  int *v7;
  int *v8;

  sub_2080B89AC(a1, (void **)&v7);
  v1 = v7;
  v2 = v8;
  if (v7 == v8)
  {
    context = 0;
    if (!v7)
      return context;
    goto LABEL_9;
  }
  v3 = v7;
  do
  {
    v4 = *v3;
    if (*v3 != 1 && v4 != 3 && v4 != 2)
    {
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoUtil.cpp", 81, (uint64_t)"", 0, (uint64_t)"Unexpected device", 17, (void (*)(void **))sub_208216974);
      abort();
    }
    context = espresso_create_context();
    if (context)
      break;
    ++v3;
  }
  while (v3 != v2);
  if (v1)
LABEL_9:
    operator delete(v1);
  return context;
}

void sub_2080B8DAC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2080B8DC8(uint64_t result, uint64_t a2)
{
  const char *v2;
  size_t v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const char *last_error_message;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  __int128 *v22;
  uint64_t v23;
  void *__p;
  size_t v25;
  int64_t v26;
  std::string __dst;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;
  uint64_t v32;

  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 1065353216;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  if (a2)
  {
    v32 = 0;
    e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options();
    v2 = (const char *)MEMORY[0x20BD02C80]();
    v3 = strlen(v2);
    if (v3 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v4 = v3;
    if (v3 >= 0x17)
    {
      v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v6 = v3 | 7;
      v7 = v6 + 1;
      p_dst = (std::string *)operator new(v6 + 1);
      __dst.__r_.__value_.__l.__size_ = v4;
      __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
      p_dst = &__dst;
      if (!v3)
      {
LABEL_13:
        p_dst->__r_.__value_.__s.__data_[v4] = 0;
        v8 = std::string::insert(&__dst, 0, "EspressoStreamPool: Failed to create e5rt stream operation with options.  Return code: ", 0x57uLL);
        v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        v10 = std::string::append(&v28, ". Last error message: ", 0x16uLL);
        v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        last_error_message = (const char *)e5rt_get_last_error_message();
        v13 = strlen(last_error_message);
        if (v13 > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        v14 = v13;
        if (v13 >= 0x17)
        {
          v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17)
            v16 = v13 | 7;
          v17 = v16 + 1;
          p_p = operator new(v16 + 1);
          v25 = v14;
          v26 = v17 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v26) = v13;
          p_p = &__p;
          if (!v13)
          {
LABEL_22:
            *((_BYTE *)p_p + v14) = 0;
            if (v26 >= 0)
              v18 = (const std::string::value_type *)&__p;
            else
              v18 = (const std::string::value_type *)__p;
            if (v26 >= 0)
              v19 = HIBYTE(v26);
            else
              v19 = v25;
            v20 = std::string::append(&v29, v18, v19);
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v31 = v20->__r_.__value_.__r.__words[2];
            v30 = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v26) < 0)
            {
              operator delete(__p);
              if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_30:
                if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_31;
                goto LABEL_42;
              }
            }
            else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_30;
            }
            operator delete(v29.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_31:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_33;
              goto LABEL_32;
            }
LABEL_42:
            operator delete(v28.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_33:
              if (v31 >= 0)
                v22 = &v30;
              else
                v22 = (__int128 *)v30;
              if (v31 >= 0)
                v23 = HIBYTE(v31);
              else
                v23 = *((_QWORD *)&v30 + 1);
              sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Private/EspressoV2StreamPool.cpp", 76, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_208216974);
              abort();
            }
LABEL_32:
            operator delete(__dst.__r_.__value_.__l.__data_);
            goto LABEL_33;
          }
        }
        memmove(p_p, last_error_message, v14);
        goto LABEL_22;
      }
    }
    memmove(p_dst, v2, v4);
    goto LABEL_13;
  }
  return result;
}

void sub_2080B96A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void **v37;
  uint64_t v38;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;

  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  sub_207CC46C8(a11);
  v40 = *a10;
  if (*a10)
  {
    do
    {
      v41 = (_QWORD *)*v40;
      operator delete(v40);
      v40 = v41;
    }
    while (v41);
  }
  v42 = *v37;
  *v37 = 0;
  if (v42)
    operator delete(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_2080B97EC(uint64_t a1)
{
  _QWORD *i;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
  {
    if (i[2])
      e5rt_execution_stream_release();
    if (i[4])
      e5rt_execution_stream_operation_release();
  }
  sub_207CC46C8(a1 + 40);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

unint64_t sub_2080B9880(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + (((unint64_t)(v6 + v2 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v6 + v2 - 1) & 0x1FF));
  if (v4 == v5)
    v8 = 0;
  else
    v8 = ((v4 - v5) << 6) - 1;
  *(_QWORD *)(a1 + 80) = v2 - 1;
  if ((unint64_t)(v8 - (v2 + v6) + 1) >= 0x400)
  {
    operator delete(*(void **)(v4 - 8));
    *(_QWORD *)(a1 + 56) -= 8;
  }
  v9 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v9 >> 47) ^ v9);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v1 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12)
        v1 = v11 % v12;
    }
    else
    {
      v1 = (v12 - 1) & v11;
    }
    v15 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v1);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v18 = v16[1];
            if (v18 == v11)
            {
              if (v16[2] == v7)
                goto LABEL_68;
            }
            else if ((v18 & (v12 - 1)) != v1)
            {
              goto LABEL_29;
            }
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_29;
          }
        }
        do
        {
          v17 = v16[1];
          if (v17 == v11)
          {
            if (v16[2] == v7)
              goto LABEL_68;
          }
          else
          {
            if (v17 >= v12)
              v17 %= v12;
            if (v17 != v1)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_29:
  v16 = operator new(0x28uLL);
  *v16 = 0;
  v16[1] = v11;
  v16[2] = v7;
  v16[3] = 1;
  v16[4] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v12)
      goto LABEL_41;
    if (prime < v12)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v12)
LABEL_41:
        sub_207CA6B84(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v28 = v12 - 1;
    if ((v12 & (v12 - 1)) == 0)
    {
      v1 = v28 & v11;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v11));
      if (!v30)
        goto LABEL_60;
LABEL_58:
      *v16 = *v30;
      goto LABEL_66;
    }
    if (v11 >= v12)
    {
      v1 = v11 % v12;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
      if (v30)
        goto LABEL_58;
      goto LABEL_60;
    }
    v1 = v11;
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v1);
  if (v30)
    goto LABEL_58;
LABEL_60:
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v29 + 8 * v1) = a1 + 16;
  if (!*v16)
    goto LABEL_67;
  v31 = *(_QWORD *)(*v16 + 8);
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v31 >= v12)
      v31 %= v12;
  }
  else
  {
    v31 &= v12 - 1;
  }
  v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
LABEL_66:
  *v30 = v16;
LABEL_67:
  ++*(_QWORD *)(a1 + 24);
LABEL_68:
  *((_BYTE *)v16 + 24) = 0;
  sub_2080BA3C8((_QWORD *)a1, v7);
  return v7;
}

void sub_2080B9C30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2080B9C44(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = sub_2080BA3C8(a1, a2);
  if (v4)
  {
    v5 = v4;
    if (!*((_BYTE *)v4 + 24))
    {
      e5rt_execution_stream_reset();
      v6 = a1[7];
      v7 = a1[6];
      if (v6 == v7)
        v8 = 0;
      else
        v8 = ((v6 - v7) << 6) - 1;
      v9 = a1[10];
      v10 = v9 + a1[9];
      if (v8 == v10)
      {
        sub_2080B9D00(a1 + 5);
        v7 = a1[6];
        v9 = a1[10];
        v10 = a1[9] + v9;
      }
      *(_QWORD *)(*(_QWORD *)(v7 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF)) = a2;
      a1[10] = v9 + 1;
      *((_BYTE *)v5 + 24) = 1;
    }
  }
}

void sub_2080B9D00(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_207CA3AB8();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_207CA3AB8();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_207CA3AB8();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_2080BA368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2080BA384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2080BA398(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2080BA3B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080BA3C8(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_2080BA4D8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_2080A28F4(v10 + 8, a2, (uint64_t)&v18);
  v11 = v19;
  if (v19)
  {
    *(_QWORD *)a5 = off_24C06E9E8;
    *(_BYTE *)(a5 + 8) = v11;
    v12 = v21;
    *(_QWORD *)(a5 + 16) = v20;
    *(_QWORD *)(a5 + 24) = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    *(_BYTE *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4);
  }
  v18 = off_24C06E9E8;
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2080BA5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C9C674(&a9);
  _Unwind_Resume(a1);
}

void sub_2080BA604(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t (**v18)();
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_2080A28F4(v10 + 8, a2, (uint64_t)&v18);
  v11 = v19;
  if (v19)
  {
    *(_QWORD *)a5 = off_24C06E9E8;
    *(_BYTE *)(a5 + 8) = v11;
    v12 = v21;
    *(_QWORD *)(a5 + 16) = v20;
    *(_QWORD *)(a5 + 24) = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    *(_BYTE *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 56) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, a4);
  }
  v18 = off_24C06E9E8;
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2080BA71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C9C674(&a9);
  _Unwind_Resume(a1);
}

void *sub_2080BA730(char **a1, uint64_t a2)
{
  char *v3;
  int v4;
  int v5;
  void *result;
  size_t v7;
  __int32 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  __int32 v15;
  char *v16;
  __int32 v17;
  int v18;
  __int32 v19;
  char *v20;
  int v21;
  __int32 v22;
  char *v23;
  __int32 v24;
  int i;
  __int32 v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  int v31;
  __int32 v32;
  void *__src;
  int32x4_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;

  v3 = *a1;
  v4 = *(_DWORD *)(a2 + 24);
  v5 = *(_DWORD *)(a2 + 4);
  result = (void *)sub_207CB13F8(a2, (uint64_t)&__src);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v34))) & 1) == 0 && v35)
  {
    v7 = (v5 * v4);
    v8 = v34.i32[2] - 1;
    v9 = v36;
    v10 = v37;
    v11 = (char *)__src;
    v31 = v35 - 1;
    v32 = v34.i32[3] - 1;
    if (v35 != 1)
    {
      v30 = v38;
      if (v34.i32[3] == 1)
      {
        if (v34.i32[2] == 1)
        {
          if (!(_DWORD)v7)
            return result;
          do
          {
            result = memmove(v3, v11, v7);
            v3 = &a1[3][(_QWORD)v3];
            v11 += v30;
            --v31;
          }
          while (v31);
        }
        else
        {
          if (!(_DWORD)v7)
            return result;
          v18 = 0;
          do
          {
            v19 = v8;
            v20 = v11;
            do
            {
              memmove(v3, v20, v7);
              v3 = &a1[3][(_QWORD)v3];
              v20 += v9;
              --v19;
            }
            while (v19);
            result = memmove(v3, v20, v7);
            v3 = &a1[3][(_QWORD)v3];
            v11 += v30;
            ++v18;
          }
          while (v18 != v31);
        }
      }
      else if (v34.i32[2] == 1)
      {
        if (!(_DWORD)v7)
          return result;
        v21 = 0;
        do
        {
          v22 = v32;
          v23 = v11;
          do
          {
            memmove(v3, v23, v7);
            v3 = &a1[3][(_QWORD)v3];
            v23 += v10;
            --v22;
          }
          while (v22);
          result = memmove(v3, v23, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v30;
          ++v21;
        }
        while (v21 != v31);
      }
      else
      {
        if (!(_DWORD)v7)
          return result;
        v12 = 0;
        do
        {
          v28 = v12;
          v13 = 0;
          v29 = v11;
          v14 = v11;
          do
          {
            v15 = v8;
            v16 = v14;
            do
            {
              memmove(v3, v16, v7);
              v3 = &a1[3][(_QWORD)v3];
              v16 += v9;
              --v15;
            }
            while (v15);
            memmove(v3, v16, v7);
            v3 = &a1[3][(_QWORD)v3];
            v14 += v10;
            ++v13;
          }
          while (v13 != v32);
          v17 = v8;
          do
          {
            memmove(v3, v14, v7);
            v3 = &a1[3][(_QWORD)v3];
            v14 += v9;
            --v17;
          }
          while (v17);
          result = memmove(v3, v14, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 = &v29[v30];
          v12 = v28 + 1;
        }
        while (v28 + 1 != v31);
      }
    }
    v24 = v32;
    if (v32)
    {
      if (v8)
      {
        if (!(_DWORD)v7)
          return result;
        for (i = 0; i != v32; ++i)
        {
          v26 = v8;
          v27 = v11;
          do
          {
            memmove(v3, v27, v7);
            v3 = &a1[3][(_QWORD)v3];
            v27 += v9;
            --v26;
          }
          while (v26);
          result = memmove(v3, v27, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v10;
        }
      }
      else
      {
        if (!(_DWORD)v7)
          return result;
        do
        {
          result = memmove(v3, v11, v7);
          v3 = &a1[3][(_QWORD)v3];
          v11 += v10;
          --v24;
        }
        while (v24);
      }
    }
    if (v8)
    {
      if (!(_DWORD)v7)
        return result;
      do
      {
        result = memmove(v3, v11, v7);
        v3 = &a1[3][(_QWORD)v3];
        v11 += v9;
        --v8;
      }
      while (v8);
    }
    if ((_DWORD)v7)
      return memmove(v3, v11, v7);
  }
  return result;
}

void sub_2080BAA94(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t (**v43)();
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[3];
  _QWORD v47[3];

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_52;
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v46[0] = &off_24C08D790;
  v46[1] = v10;
  v46[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_2080F2C14((uint64_t)v46);
  v46[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_16;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_16:
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
      goto LABEL_17;
LABEL_27:
    v24 = *(_QWORD *)(a2 + 8);
    v43 = &off_24C08D790;
    v44 = v24;
    v45 = 0;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
    goto LABEL_27;
LABEL_17:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v21 = *(_QWORD *)(a2 + 8);
  v20 = *(std::__shared_weak_count **)(a2 + 16);
  v43 = &off_24C08D790;
  v44 = v21;
  v45 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
LABEL_28:
  v25 = sub_2081DD518((uint64_t)&v43, 0);
  v26 = v45;
  v47[0] = &off_24C08D790;
  v47[1] = v44;
  v47[2] = v45;
  if (v45)
  {
    v27 = (unint64_t *)&v45->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_2081DE99C((uint64_t)v47);
  v30 = sub_2081DEC1C((uint64_t)v47);
  v31 = sub_2081DEE9C((uint64_t)v47);
  v32 = sub_2081DF11C((uint64_t)v47);
  v47[0] = &off_24C08D790;
  if (v26)
  {
    v33 = (unint64_t *)&v26->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v35 = v29;
  v36 = v29 | ((unint64_t)v30 << 32);
  v37 = v31 | ((unint64_t)v32 << 32);
  v43 = &off_24C08D790;
  v38 = v45;
  if (v45)
  {
    v39 = (unint64_t *)&v45->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v30)
    v41 = v35 == 0;
  else
    v41 = 1;
  if (v41)
    v42 = 0;
  else
    v42 = v36;
  *a1 = v25;
  a1[1] = v42;
  a1[2] = v37;
  if (v32 * HIDWORD(v42) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_52:
    abort();
  }
}

void sub_2080BAD9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BADC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va1);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BADE0(uint64_t a1, unsigned int *a2)
{
  BOOL v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  void (**v16)(_QWORD);
  __int128 v17;
  char v18;
  char *v19;
  __int128 v20;

  *(_QWORD *)a1 = off_24C084F98;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2)
    v4 = a2[1] == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  else
  {
    v19 = (char *)operator new(0x68uLL);
    v20 = xmmword_208267670;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(a2, 1278226488, (uint64_t *)&v19, (uint64_t)&v16);
    if (!v18)
    {
      v14 = sub_207E0E368((uint64_t)&v16);
      sub_207F09168(v14);
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    v6 = v17;
    v17 = 0uLL;
    (*v16)(&v16);
    if (SHIBYTE(v20) < 0)
      operator delete(v19);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  if (!a2[1])
  {
LABEL_21:
    v10 = *(_OWORD *)a2;
    goto LABEL_22;
  }
  v19 = (char *)&off_24C08D790;
  *(_QWORD *)&v20 = v6;
  *((_QWORD *)&v20 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2080BAA94((uint64_t *)&v16, (uint64_t)&v19);
  v10 = v17;
  v19 = (char *)&off_24C08D790;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v15 = v10;
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v10 = v15;
    }
  }
LABEL_22:
  *v7 = v10;
  return a1;
}

void sub_2080BAFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v4 - 49) < 0)
    operator delete(*(void **)(v4 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_2080BAFF8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_2080BB050(uint64_t a1, size_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46[3];
  uint64_t (**v47)();
  uint64_t *v48;
  std::__shared_weak_count *v49;
  size_t v50[2];

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_66;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v48 = v20;
    v49 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v47 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v48 = v29;
    v49 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v47 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_66:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v48 = v11;
  v49 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v47 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v48);
  }
LABEL_50:
  sub_2080BB4C8(v46, a1);
  v50[0] = a2;
  v50[1] = (size_t)v46;
  sub_2080F2F3C(v50);
  if (!v48)
    goto LABEL_58;
  v39 = *v48;
  v38 = (std::__shared_weak_count *)v48[1];
  if (!v38)
    goto LABEL_56;
  v40 = (unint64_t *)&v38->__shared_owners_;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  do
    v42 = __ldaxr(v40);
  while (__stlxr(v42 - 1, v40));
  if (v42)
  {
LABEL_56:
    if (!v39)
      goto LABEL_58;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (v39)
LABEL_57:
    sub_2081E31E4((uint64_t)v48);
LABEL_58:
  v47 = &off_24C08D790;
  v43 = v49;
  if (v49)
  {
    v44 = (unint64_t *)&v49->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_2080BB424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BB440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080BB4C8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080BAA94(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080BB6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080BB6E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  __int128 v49;
  std::__shared_weak_count *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_52;
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v48[0] = &off_24C08D790;
  v48[1] = v10;
  v48[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_2080F2C14((uint64_t)v48);
  v48[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_16;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_16:
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
      goto LABEL_17;
LABEL_27:
    v24 = *(_QWORD *)(a2 + 8);
    v45 = &off_24C08D790;
    v46 = v24;
    v47 = 0;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
    goto LABEL_27;
LABEL_17:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v21 = *(_QWORD *)(a2 + 8);
  v20 = *(std::__shared_weak_count **)(a2 + 16);
  v45 = &off_24C08D790;
  v46 = v21;
  v47 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
LABEL_28:
  v25 = sub_2081DD518((uint64_t)&v45, 0);
  v26 = v47;
  *(_QWORD *)&v49 = &off_24C08D790;
  *((_QWORD *)&v49 + 1) = v46;
  v50 = v47;
  if (v47)
  {
    v27 = (unint64_t *)&v47->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_2081DE99C((uint64_t)&v49);
  v30 = sub_2081DEC1C((uint64_t)&v49);
  v31 = sub_2081DEE9C((uint64_t)&v49);
  v32 = sub_2081DF11C((uint64_t)&v49);
  *(_QWORD *)&v49 = &off_24C08D790;
  if (v26)
  {
    v33 = (unint64_t *)&v26->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v35 = v29;
  v36 = v29 | ((unint64_t)v30 << 32);
  v37 = v31 | ((unint64_t)v32 << 32);
  v45 = &off_24C08D790;
  v38 = v47;
  if (v47)
  {
    v39 = (unint64_t *)&v47->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v30)
    v41 = v35 == 0;
  else
    v41 = 1;
  if (v41)
    v42 = 0;
  else
    v42 = v36;
  *(_QWORD *)((char *)&v49 + 4) = v42;
  LODWORD(v49) = 2;
  v43 = v49;
  LODWORD(v49) = 1;
  *(_QWORD *)((char *)&v49 + 4) = v37;
  v44 = v49;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v43;
  *(_DWORD *)(a1 + 16) = HIDWORD(v42);
  *(_QWORD *)(a1 + 20) = v44;
  *(_DWORD *)(a1 + 28) = v32;
  *(_QWORD *)(a1 + 32) = v42;
  *(_QWORD *)(a1 + 40) = v37;
  if (HIDWORD(v42) * v32 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_52:
    abort();
  }
}

void sub_2080BBA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080BBA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BBA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BBAA4(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  void (**v18)(_QWORD);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char *v23;
  __int128 v24;

  *(_QWORD *)a1 = off_24C085028;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (unsigned int *)a2 + 6;
  if (*((_DWORD *)a2 + 6))
    v5 = *((_DWORD *)a2 + 7) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  else
  {
    v23 = (char *)operator new(0x68uLL);
    v24 = xmmword_208267670;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v4, 843264056, (uint64_t *)&v23, (uint64_t)&v18);
    if (!v22)
    {
      v17 = sub_207E0E368((uint64_t)&v18);
      sub_207F09168(v17);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    v7 = v19;
    v19 = 0uLL;
    (*v18)(&v18);
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_21:
    v14 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v8 = v14;
    *(_OWORD *)(v8 + 16) = v15;
    return a1;
  }
  v23 = (char *)&off_24C08D790;
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2080BB6E4((uint64_t)&v18, (uint64_t)&v23);
  v11 = v20;
  *(_OWORD *)v8 = v19;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v21;
  v23 = (char *)&off_24C08D790;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2080BBC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080BBCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080BBD5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BB6E4(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 2;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(DWORD1(v30), 2);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080BBF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080BBFA0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  __int128 v49;
  std::__shared_weak_count *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_52;
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v48[0] = &off_24C08D790;
  v48[1] = v10;
  v48[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_2080F2C14((uint64_t)v48);
  v48[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_16;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_16:
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
      goto LABEL_17;
LABEL_27:
    v24 = *(_QWORD *)(a2 + 8);
    v45 = &off_24C08D790;
    v46 = v24;
    v47 = 0;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
    goto LABEL_27;
LABEL_17:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v21 = *(_QWORD *)(a2 + 8);
  v20 = *(std::__shared_weak_count **)(a2 + 16);
  v45 = &off_24C08D790;
  v46 = v21;
  v47 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
LABEL_28:
  v25 = sub_2081DD518((uint64_t)&v45, 0);
  v26 = v47;
  *(_QWORD *)&v49 = &off_24C08D790;
  *((_QWORD *)&v49 + 1) = v46;
  v50 = v47;
  if (v47)
  {
    v27 = (unint64_t *)&v47->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_2081DE99C((uint64_t)&v49);
  v30 = sub_2081DEC1C((uint64_t)&v49);
  v31 = sub_2081DEE9C((uint64_t)&v49);
  v32 = sub_2081DF11C((uint64_t)&v49);
  *(_QWORD *)&v49 = &off_24C08D790;
  if (v26)
  {
    v33 = (unint64_t *)&v26->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v35 = v29;
  v36 = v29 | ((unint64_t)v30 << 32);
  v37 = v31 | ((unint64_t)v32 << 32);
  v45 = &off_24C08D790;
  v38 = v47;
  if (v47)
  {
    v39 = (unint64_t *)&v47->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v30)
    v41 = v35 == 0;
  else
    v41 = 1;
  if (v41)
    v42 = 0;
  else
    v42 = v36;
  *(_QWORD *)((char *)&v49 + 4) = v42;
  LODWORD(v49) = 3;
  v43 = v49;
  LODWORD(v49) = 1;
  *(_QWORD *)((char *)&v49 + 4) = v37;
  v44 = v49;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v43;
  *(_DWORD *)(a1 + 16) = HIDWORD(v42);
  *(_QWORD *)(a1 + 20) = v44;
  *(_DWORD *)(a1 + 28) = v32;
  *(_QWORD *)(a1 + 32) = v42;
  *(_QWORD *)(a1 + 40) = v37;
  if (HIDWORD(v42) * v32 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_52:
    abort();
  }
}

void sub_2080BC31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080BC330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BC344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BC360(uint64_t a1, int a2, __int128 *a3)
{
  unsigned int *v5;
  BOOL v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  void (**v23)(_QWORD);
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char *v28;
  __int128 v29;

  *(_QWORD *)a1 = off_24C0850B8;
  *(_DWORD *)(a1 + 8) = 0;
  v5 = (unsigned int *)a3 + 6;
  if (*((_DWORD *)a3 + 6))
    v6 = *((_DWORD *)a3 + 7) == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v9 = a1 + 48;
    if (!*((_DWORD *)a3 + 6))
      goto LABEL_30;
  }
  else
  {
    if (a2 == 21)
      v10 = 24;
    else
      v10 = 0;
    if (a2 == 17)
      v11 = 71;
    else
      v11 = v10;
    if (a2 == 17)
      v12 = 842285568;
    else
      v12 = 0;
    v13 = v12 | v11;
    v28 = (char *)operator new(0x68uLL);
    v29 = xmmword_208267670;
    strcpy(v28, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v5, v13, (uint64_t *)&v28, (uint64_t)&v23);
    if (!v27)
    {
      v22 = sub_207E0E368((uint64_t)&v23);
      sub_207F09168(v22);
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    v8 = v24;
    v24 = 0uLL;
    (*v23)(&v23);
    if (SHIBYTE(v29) < 0)
      operator delete(v28);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
    *(_DWORD *)(a1 + 40) = 0;
    v9 = a1 + 48;
    if (!*((_DWORD *)a3 + 6))
      goto LABEL_30;
  }
  if (!*((_DWORD *)a3 + 7))
  {
LABEL_30:
    v19 = *a3;
    v20 = a3[1];
    *(_QWORD *)(v9 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)v9 = v19;
    *(_OWORD *)(v9 + 16) = v20;
    return a1;
  }
  v28 = (char *)&off_24C08D790;
  *(_QWORD *)&v29 = v8;
  *((_QWORD *)&v29 + 1) = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_2080BBFA0((uint64_t)&v23, (uint64_t)&v28);
  v16 = v25;
  *(_OWORD *)v9 = v24;
  *(_OWORD *)(v9 + 16) = v16;
  *(_QWORD *)(v9 + 32) = v26;
  v28 = (char *)&off_24C08D790;
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_2080BC568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080BC5B0(uint64_t a1, _BYTE *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  _BYTE *v45;
  int v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _BYTE *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t (**v62)();
  uint64_t *v63;
  std::__shared_weak_count *v64;
  _QWORD v65[2];

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_82;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v63 = v20;
    v64 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v62 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v63 = v29;
    v64 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v62 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_82:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v63 = v11;
  v64 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v62 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v63);
  }
LABEL_50:
  sub_2080BD4AC((uint64_t)&v55, a1);
  v65[0] = &v55;
  v65[1] = a2;
  if (v59 == 1)
  {
    sub_2080F324C(v65);
  }
  else if (v56 && v57 && v58)
  {
    v38 = v57 - 1;
    v39 = v60;
    v40 = v55;
    v41 = v58 - 1;
    if (v58 != 1)
    {
      v42 = v61;
      if (v57 == 1)
      {
        do
        {
          *v40 = *a2;
          v40[1] = *a2;
          v40[2] = *a2;
          v40 += v42;
          --v41;
        }
        while (v41);
      }
      else
      {
        v43 = 0;
        v44 = v55 + 2;
        do
        {
          v45 = v44;
          v46 = v38;
          do
          {
            *(v45 - 2) = *a2;
            *(v45 - 1) = *a2;
            *v45 = *a2;
            v45 += v39;
            --v46;
          }
          while (v46);
          *(v45 - 2) = *a2;
          *(v45 - 1) = *a2;
          *v45 = *a2;
          v40 += v42;
          ++v43;
          v44 += v42;
        }
        while (v43 != v41);
      }
    }
    for (; v38; --v38)
    {
      *v40 = *a2;
      v40[1] = *a2;
      v40[2] = *a2;
      v40 += v39;
    }
    *v40 = *a2;
    v40[1] = *a2;
    v40[2] = *a2;
  }
  if (!v63)
    goto LABEL_74;
  v48 = *v63;
  v47 = (std::__shared_weak_count *)v63[1];
  if (!v47)
    goto LABEL_72;
  v49 = (unint64_t *)&v47->__shared_owners_;
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
  do
    v51 = __ldaxr(v49);
  while (__stlxr(v51 - 1, v49));
  if (v51)
  {
LABEL_72:
    if (!v48)
      goto LABEL_74;
    goto LABEL_73;
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  if (v48)
LABEL_73:
    sub_2081E31E4((uint64_t)v63);
LABEL_74:
  v62 = &off_24C08D790;
  v52 = v64;
  if (v64)
  {
    v53 = (unint64_t *)&v64->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_2080BCA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BCAA4(uint64_t a1, _DWORD *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE v47[20];
  int v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  size_t v52[2];
  char v53;
  char *v54;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_75;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v20;
    v51 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v49 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v29;
    v51 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v49 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_75:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v50 = v11;
  v51 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v49 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v50);
  }
LABEL_50:
  sub_2080BD4AC((uint64_t)v47, a1);
  v52[0] = (size_t)a2;
  v52[1] = (size_t)v47;
  if (a2[5] == 1 && v48 == 1)
  {
    sub_2080F3514(v52);
  }
  else
  {
    v53 = 0;
    if (a2[2] && a2[3] && a2[4])
    {
      v54 = &v53;
      sub_2080F3BF8((uint64_t)&v54, (uint64_t)a2, (uint64_t)v47);
    }
  }
  if (!v50)
    goto LABEL_67;
  v40 = *v50;
  v39 = (std::__shared_weak_count *)v50[1];
  if (!v39)
    goto LABEL_65;
  v41 = (unint64_t *)&v39->__shared_owners_;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  do
    v43 = __ldaxr(v41);
  while (__stlxr(v43 - 1, v41));
  if (v43)
  {
LABEL_65:
    if (!v40)
      goto LABEL_67;
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (v40)
LABEL_66:
    sub_2081E31E4((uint64_t)v50);
LABEL_67:
  v49 = &off_24C08D790;
  v44 = v51;
  if (v51)
  {
    v45 = (unint64_t *)&v51->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_2080BCEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BCED8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  uint64_t (**v58)();
  _QWORD *v59;
  std::__shared_weak_count *v60;
  _QWORD v61[3];
  _QWORD v62[3];

  v62[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0850B8;
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v4 = *(uint64_t **)(a2 + 8);
      if (v6)
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_8:
        v10 = *((_DWORD *)v4 + 4);
        goto LABEL_11;
      }
    }
  }
  v10 = 0;
LABEL_11:
  *(_QWORD *)(a1 + 16) = &off_24C08D790;
  *(_DWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 24) = v4;
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 40) = 0;
  v14 = *(_QWORD **)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  v56 = v14;
  v57 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_23;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (v19)
        goto LABEL_25;
    }
    else
    {
LABEL_23:
      if (v19)
        goto LABEL_25;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_25:
  v61[0] = &off_24C08D790;
  v61[1] = v56;
  v61[2] = v57;
  if (v57)
  {
    v23 = (unint64_t *)&v57->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_2080F2C14((uint64_t)v61);
  v61[0] = &off_24C08D790;
  if (!v57)
    goto LABEL_32;
  v25 = (unint64_t *)&v57->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    v27 = v57;
  }
  else
  {
LABEL_32:
    v27 = v57;
    if (!v57)
    {
      v58 = &off_24C08D790;
      v59 = v56;
      v60 = 0;
      goto LABEL_43;
    }
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  do
    v30 = __ldaxr(v28);
  while (__stlxr(v30 - 1, v28));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v58 = &off_24C08D790;
  v59 = v56;
  v60 = v57;
  v31 = (unint64_t *)&v57->__shared_owners_;
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_43:
  v33 = sub_2081DE99C((uint64_t)&v58);
  v34 = sub_2081DEC1C((uint64_t)&v58);
  v35 = sub_2081DEE9C((uint64_t)&v58);
  v36 = sub_2081DF11C((uint64_t)&v58);
  v58 = &off_24C08D790;
  v37 = v60;
  if (v60)
  {
    v38 = (unint64_t *)&v60->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v35 | ((unint64_t)v36 << 32);
  v41 = v33 | ((unint64_t)v34 << 32);
  LODWORD(v62[0]) = 3;
  HIDWORD(v62[0]) = v41;
  *(_QWORD *)(a1 + 48) = v62[0];
  *(_DWORD *)(a1 + 56) = v34;
  LODWORD(v62[0]) = 1;
  *(_QWORD *)((char *)v62 + 4) = v40;
  *(_QWORD *)(a1 + 60) = v62[0];
  *(_DWORD *)(a1 + 68) = v36;
  *(_QWORD *)(a1 + 72) = v41;
  *(_QWORD *)(a1 + 80) = v40;
  if (v57)
  {
    v42 = (unint64_t *)&v57->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      v44 = *(_QWORD *)(a2 + 8);
      if (v44)
        goto LABEL_53;
LABEL_67:
      v51 = 0;
      goto LABEL_68;
    }
  }
  v44 = *(_QWORD *)(a2 + 8);
  if (!v44)
    goto LABEL_67;
LABEL_53:
  v45 = *(std::__shared_weak_count **)(v44 + 8);
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      v49 = *(uint64_t **)(a2 + 8);
      if (v49)
        goto LABEL_59;
LABEL_74:
      v51 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_75;
      goto LABEL_69;
    }
  }
  v49 = *(uint64_t **)(a2 + 8);
  if (!v49)
    goto LABEL_74;
LABEL_59:
  v51 = *v49;
  v50 = (std::__shared_weak_count *)v49[1];
  if (!v50)
    goto LABEL_68;
  v52 = (unint64_t *)&v50->__shared_owners_;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  do
    v54 = __ldaxr(v52);
  while (__stlxr(v54 - 1, v52));
  if (v54)
  {
LABEL_68:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_75;
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
  std::__shared_weak_count::__release_weak(v50);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_75:
    if (!v51)
      return a1;
    goto LABEL_76;
  }
LABEL_69:
  if ((v51 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_76:
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return a1;
}

void sub_2080BD3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  sub_2080BAFF8(v15);
  _Unwind_Resume(a1);
}

void sub_2080BD424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080BD4AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v23 = &off_24C08D790;
  v24 = v10;
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BBFA0(a1, (uint64_t)&v20);
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_23:
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080BD65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080BD678(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  __int128 v49;
  std::__shared_weak_count *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_52;
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v48[0] = &off_24C08D790;
  v48[1] = v10;
  v48[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_2080F2C14((uint64_t)v48);
  v48[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_16;
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_16:
    v16 = *(std::__shared_weak_count **)(a2 + 16);
    if (v16)
      goto LABEL_17;
LABEL_27:
    v24 = *(_QWORD *)(a2 + 8);
    v45 = &off_24C08D790;
    v46 = v24;
    v47 = 0;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v16 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v16)
    goto LABEL_27;
LABEL_17:
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  v21 = *(_QWORD *)(a2 + 8);
  v20 = *(std::__shared_weak_count **)(a2 + 16);
  v45 = &off_24C08D790;
  v46 = v21;
  v47 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
LABEL_28:
  v25 = sub_2081DD518((uint64_t)&v45, 0);
  v26 = v47;
  *(_QWORD *)&v49 = &off_24C08D790;
  *((_QWORD *)&v49 + 1) = v46;
  v50 = v47;
  if (v47)
  {
    v27 = (unint64_t *)&v47->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_2081DE99C((uint64_t)&v49);
  v30 = sub_2081DEC1C((uint64_t)&v49);
  v31 = sub_2081DEE9C((uint64_t)&v49);
  v32 = sub_2081DF11C((uint64_t)&v49);
  *(_QWORD *)&v49 = &off_24C08D790;
  if (v26)
  {
    v33 = (unint64_t *)&v26->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v35 = v29;
  v36 = v29 | ((unint64_t)v30 << 32);
  v37 = v31 | ((unint64_t)v32 << 32);
  v45 = &off_24C08D790;
  v38 = v47;
  if (v47)
  {
    v39 = (unint64_t *)&v47->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v30)
    v41 = v35 == 0;
  else
    v41 = 1;
  if (v41)
    v42 = 0;
  else
    v42 = v36;
  *(_QWORD *)((char *)&v49 + 4) = v42;
  LODWORD(v49) = 4;
  v43 = v49;
  LODWORD(v49) = 1;
  *(_QWORD *)((char *)&v49 + 4) = v37;
  v44 = v49;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v43;
  *(_DWORD *)(a1 + 16) = HIDWORD(v42);
  *(_QWORD *)(a1 + 20) = v44;
  *(_DWORD *)(a1 + 28) = v32;
  *(_QWORD *)(a1 + 32) = v42;
  *(_QWORD *)(a1 + 40) = v37;
  if (HIDWORD(v42) * v32 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_52:
    abort();
  }
}

void sub_2080BD9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080BDA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BDA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BDA38(uint64_t a1, int a2, __int128 *a3)
{
  unsigned int *v5;
  BOOL v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  void (**v20)(_QWORD);
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char *v25;
  __int128 v26;

  *(_QWORD *)a1 = off_24C085148;
  *(_DWORD *)(a1 + 8) = 0;
  v5 = (unsigned int *)a3 + 6;
  if (*((_DWORD *)a3 + 6))
    v6 = *((_DWORD *)a3 + 7) == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v9 = a1 + 48;
    if (!*((_DWORD *)a3 + 6))
      goto LABEL_24;
  }
  else
  {
    if ((a2 - 25) > 0xC)
      v10 = 0;
    else
      v10 = dword_20826C148[a2 - 25] | *(_DWORD *)&aA[4 * a2 - 100];
    v25 = (char *)operator new(0x68uLL);
    v26 = xmmword_208267670;
    strcpy(v25, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v5, v10, (uint64_t *)&v25, (uint64_t)&v20);
    if (!v24)
    {
      v19 = sub_207E0E368((uint64_t)&v20);
      sub_207F09168(v19);
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    v8 = v21;
    v21 = 0uLL;
    (*v20)(&v20);
    if (SHIBYTE(v26) < 0)
      operator delete(v25);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
    *(_DWORD *)(a1 + 40) = 0;
    v9 = a1 + 48;
    if (!*((_DWORD *)a3 + 6))
      goto LABEL_24;
  }
  if (!*((_DWORD *)a3 + 7))
  {
LABEL_24:
    v16 = *a3;
    v17 = a3[1];
    *(_QWORD *)(v9 + 32) = *((_QWORD *)a3 + 4);
    *(_OWORD *)v9 = v16;
    *(_OWORD *)(v9 + 16) = v17;
    return a1;
  }
  v25 = (char *)&off_24C08D790;
  *(_QWORD *)&v26 = v8;
  *((_QWORD *)&v26 + 1) = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_2080BD678((uint64_t)&v20, (uint64_t)&v25);
  v13 = v22;
  *(_OWORD *)v9 = v21;
  *(_OWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 32) = v23;
  v25 = (char *)&off_24C08D790;
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_2080BDC48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080BDC90(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BYTE *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t (**v53)();
  uint64_t *v54;
  std::__shared_weak_count *v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t *v58;
  _DWORD v59[7];
  _QWORD v60[2];

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_72;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v54 = v20;
    v55 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v53 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v54 = v29;
    v55 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v53 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_72:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v54 = v11;
  v55 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v53 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v54);
  }
LABEL_50:
  sub_2080BEAEC((uint64_t)&v46, a1);
  v56[0] = &v46;
  v56[1] = a2;
  if (v50 == 1)
  {
    sub_2080F324C(v56);
  }
  else
  {
    v57 = a2;
    if (v47 && v48 && v49)
    {
      v58 = &v57;
      v59[0] = 0;
      v59[1] = v47 - 1;
      v59[2] = v50;
      v59[3] = v48 - 1;
      v59[4] = v51;
      v59[5] = v49 - 1;
      v59[6] = v52;
      v60[0] = 0;
      v60[1] = 0;
      sub_2080F3E38(v59, (uint64_t)v60, (_BYTE ***)&v58, v46);
    }
  }
  if (!v54)
    goto LABEL_64;
  v39 = *v54;
  v38 = (std::__shared_weak_count *)v54[1];
  if (!v38)
    goto LABEL_62;
  v40 = (unint64_t *)&v38->__shared_owners_;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  do
    v42 = __ldaxr(v40);
  while (__stlxr(v42 - 1, v40));
  if (v42)
  {
LABEL_62:
    if (!v39)
      goto LABEL_64;
    goto LABEL_63;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (v39)
LABEL_63:
    sub_2081E31E4((uint64_t)v54);
LABEL_64:
  v53 = &off_24C08D790;
  v43 = v55;
  if (v55)
  {
    v44 = (unint64_t *)&v55->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_2080BE0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BE0E4(uint64_t a1, _DWORD *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE v47[20];
  int v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  size_t v52[2];
  char v53;
  char *v54;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_75;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v20;
    v51 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v49 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v29;
    v51 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v49 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_75:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v50 = v11;
  v51 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v49 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v50);
  }
LABEL_50:
  sub_2080BEAEC((uint64_t)v47, a1);
  v52[0] = (size_t)a2;
  v52[1] = (size_t)v47;
  if (a2[5] == 1 && v48 == 1)
  {
    sub_2080F3514(v52);
  }
  else
  {
    v53 = 0;
    if (a2[2] && a2[3] && a2[4])
    {
      v54 = &v53;
      sub_2080F3FF4((uint64_t)&v54, (uint64_t)a2, (uint64_t)v47);
    }
  }
  if (!v50)
    goto LABEL_67;
  v40 = *v50;
  v39 = (std::__shared_weak_count *)v50[1];
  if (!v39)
    goto LABEL_65;
  v41 = (unint64_t *)&v39->__shared_owners_;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  do
    v43 = __ldaxr(v41);
  while (__stlxr(v43 - 1, v41));
  if (v43)
  {
LABEL_65:
    if (!v40)
      goto LABEL_67;
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (v40)
LABEL_66:
    sub_2081E31E4((uint64_t)v50);
LABEL_67:
  v49 = &off_24C08D790;
  v44 = v51;
  if (v51)
  {
    v45 = (unint64_t *)&v51->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_2080BE504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BE518(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  uint64_t (**v58)();
  _QWORD *v59;
  std::__shared_weak_count *v60;
  _QWORD v61[3];
  _QWORD v62[3];

  v62[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C085148;
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v4 = *(uint64_t **)(a2 + 8);
      if (v6)
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_8:
        v10 = *((_DWORD *)v4 + 4);
        goto LABEL_11;
      }
    }
  }
  v10 = 0;
LABEL_11:
  *(_QWORD *)(a1 + 16) = &off_24C08D790;
  *(_DWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 24) = v4;
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 40) = 0;
  v14 = *(_QWORD **)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  v56 = v14;
  v57 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v14)
  {
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_23;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (v19)
        goto LABEL_25;
    }
    else
    {
LABEL_23:
      if (v19)
        goto LABEL_25;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_25:
  v61[0] = &off_24C08D790;
  v61[1] = v56;
  v61[2] = v57;
  if (v57)
  {
    v23 = (unint64_t *)&v57->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_2080F2C14((uint64_t)v61);
  v61[0] = &off_24C08D790;
  if (!v57)
    goto LABEL_32;
  v25 = (unint64_t *)&v57->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
    v27 = v57;
  }
  else
  {
LABEL_32:
    v27 = v57;
    if (!v57)
    {
      v58 = &off_24C08D790;
      v59 = v56;
      v60 = 0;
      goto LABEL_43;
    }
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  do
    v30 = __ldaxr(v28);
  while (__stlxr(v30 - 1, v28));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v58 = &off_24C08D790;
  v59 = v56;
  v60 = v57;
  v31 = (unint64_t *)&v57->__shared_owners_;
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_43:
  v33 = sub_2081DE99C((uint64_t)&v58);
  v34 = sub_2081DEC1C((uint64_t)&v58);
  v35 = sub_2081DEE9C((uint64_t)&v58);
  v36 = sub_2081DF11C((uint64_t)&v58);
  v58 = &off_24C08D790;
  v37 = v60;
  if (v60)
  {
    v38 = (unint64_t *)&v60->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v35 | ((unint64_t)v36 << 32);
  v41 = v33 | ((unint64_t)v34 << 32);
  LODWORD(v62[0]) = 4;
  HIDWORD(v62[0]) = v41;
  *(_QWORD *)(a1 + 48) = v62[0];
  *(_DWORD *)(a1 + 56) = v34;
  LODWORD(v62[0]) = 1;
  *(_QWORD *)((char *)v62 + 4) = v40;
  *(_QWORD *)(a1 + 60) = v62[0];
  *(_DWORD *)(a1 + 68) = v36;
  *(_QWORD *)(a1 + 72) = v41;
  *(_QWORD *)(a1 + 80) = v40;
  if (v57)
  {
    v42 = (unint64_t *)&v57->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      v44 = *(_QWORD *)(a2 + 8);
      if (v44)
        goto LABEL_53;
LABEL_67:
      v51 = 0;
      goto LABEL_68;
    }
  }
  v44 = *(_QWORD *)(a2 + 8);
  if (!v44)
    goto LABEL_67;
LABEL_53:
  v45 = *(std::__shared_weak_count **)(v44 + 8);
  if (v45)
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      v49 = *(uint64_t **)(a2 + 8);
      if (v49)
        goto LABEL_59;
LABEL_74:
      v51 = 0;
      if (!*(_DWORD *)(a1 + 72))
        goto LABEL_75;
      goto LABEL_69;
    }
  }
  v49 = *(uint64_t **)(a2 + 8);
  if (!v49)
    goto LABEL_74;
LABEL_59:
  v51 = *v49;
  v50 = (std::__shared_weak_count *)v49[1];
  if (!v50)
    goto LABEL_68;
  v52 = (unint64_t *)&v50->__shared_owners_;
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  do
    v54 = __ldaxr(v52);
  while (__stlxr(v54 - 1, v52));
  if (v54)
  {
LABEL_68:
    if (!*(_DWORD *)(a1 + 72))
      goto LABEL_75;
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
  std::__shared_weak_count::__release_weak(v50);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_75:
    if (!v51)
      return a1;
    goto LABEL_76;
  }
LABEL_69:
  if ((v51 == 0) == (*(_DWORD *)(a1 + 76) == 0))
    return a1;
LABEL_76:
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return a1;
}

void sub_2080BE9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  sub_2080BAFF8(v15);
  _Unwind_Resume(a1);
}

void sub_2080BEA64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080BEAEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080BD678(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080BED14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080BED30(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::__shared_weak_count **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  _QWORD v49[2];
  std::__shared_weak_count *v50;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_64;
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v48[0] = &off_24C08D790;
  v48[1] = v10;
  v48[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v48);
  v15 = &v50;
  if (v14 > 1647589489)
  {
    if (v14 == 1647719521)
    {
      v16 = 0;
      goto LABEL_21;
    }
    if (v14 == 1647589490)
    {
      v16 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    if (v14 == 1278226742)
    {
      v16 = 3;
      goto LABEL_21;
    }
    if (v14 == 1647392359)
    {
      v16 = 2;
LABEL_21:
      v15 = (std::__shared_weak_count **)((char *)v49 + 4 * v16);
    }
  }
  if ((char *)v15 - (char *)v49 == 16
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v48[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_28;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_28:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_29;
LABEL_39:
    v27 = *(_QWORD *)(a2 + 8);
    v45 = &off_24C08D790;
    v46 = v27;
    v47 = 0;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_39;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v45 = &off_24C08D790;
  v46 = v24;
  v47 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_40:
  v28 = sub_2081DD518((uint64_t)&v45, 0);
  v29 = v47;
  v49[0] = &off_24C08D790;
  v49[1] = v46;
  v50 = v47;
  if (v47)
  {
    v30 = (unint64_t *)&v47->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)v49);
  v33 = sub_2081DEC1C((uint64_t)v49);
  v34 = sub_2081DEE9C((uint64_t)v49);
  v35 = sub_2081DF11C((uint64_t)v49) << 31;
  v49[0] = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v45 = &off_24C08D790;
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *a1 = v28;
  a1[1] = v44;
  a1[2] = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  if (HIDWORD(v35) * HIDWORD(v44) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_64:
    abort();
  }
}

void sub_2080BF108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BF11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BF130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va1);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BF14C(uint64_t a1, unsigned int *a2)
{
  BOOL v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  void (**v16)(_QWORD);
  __int128 v17;
  char v18;
  char *v19;
  __int128 v20;

  *(_QWORD *)a1 = off_24C0851D8;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2)
    v4 = a2[1] == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  else
  {
    v19 = (char *)operator new(0x68uLL);
    v20 = xmmword_208267670;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(a2, 1647392359, (uint64_t *)&v19, (uint64_t)&v16);
    if (!v18)
    {
      v14 = sub_207E0E368((uint64_t)&v16);
      sub_207F09168(v14);
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    v6 = v17;
    v17 = 0uLL;
    (*v16)(&v16);
    if (SHIBYTE(v20) < 0)
      operator delete(v19);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  if (!a2[1])
  {
LABEL_21:
    v10 = *(_OWORD *)a2;
    goto LABEL_22;
  }
  v19 = (char *)&off_24C08D790;
  *(_QWORD *)&v20 = v6;
  *((_QWORD *)&v20 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2080BED30((uint64_t *)&v16, (uint64_t)&v19);
  v10 = v17;
  v19 = (char *)&off_24C08D790;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v15 = v10;
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v10 = v15;
    }
  }
LABEL_22:
  *v7 = v10;
  return a1;
}

void sub_2080BF31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v4 - 49) < 0)
    operator delete(*(void **)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_2080BF364(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46[3];
  uint64_t (**v47)();
  uint64_t *v48;
  std::__shared_weak_count *v49;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_66;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v48 = v20;
    v49 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v47 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v48 = v29;
    v49 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v47 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_66:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v48 = v11;
  v49 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v47 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v48);
  }
LABEL_50:
  sub_2080BF7D8(v46, a1);
  sub_2080F44E4(a2, (uint64_t)v46);
  if (!v48)
    goto LABEL_58;
  v39 = *v48;
  v38 = (std::__shared_weak_count *)v48[1];
  if (!v38)
    goto LABEL_56;
  v40 = (unint64_t *)&v38->__shared_owners_;
  do
    v41 = __ldxr(v40);
  while (__stxr(v41 + 1, v40));
  do
    v42 = __ldaxr(v40);
  while (__stlxr(v42 - 1, v40));
  if (v42)
  {
LABEL_56:
    if (!v39)
      goto LABEL_58;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  if (v39)
LABEL_57:
    sub_2081E31E4((uint64_t)v48);
LABEL_58:
  v47 = &off_24C08D790;
  v43 = v49;
  if (v49)
  {
    v44 = (unint64_t *)&v49->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_2080BF734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BF750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080BF7D8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080BED30(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080BF9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080BF9F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD v50[3];
  __int128 v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v50[0] = &off_24C08D790;
  v50[1] = v10;
  v50[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v50);
  v15 = (char *)v52;
  if (v14 > 1647589489)
  {
    if (v14 == 1647719521)
    {
      v16 = 0;
      goto LABEL_21;
    }
    if (v14 == 1647589490)
    {
      v16 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    if (v14 == 1278226742)
    {
      v16 = 3;
      goto LABEL_21;
    }
    if (v14 == 1647392359)
    {
      v16 = 2;
LABEL_21:
      v15 = (char *)&v52[-2] + 4 * v16;
    }
  }
  if (v15 - (char *)&v51 == 16
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v50[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_28;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_28:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_29;
LABEL_39:
    v27 = *(_QWORD *)(a2 + 8);
    v47 = &off_24C08D790;
    v48 = v27;
    v49 = 0;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_39;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v47 = &off_24C08D790;
  v48 = v24;
  v49 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_40:
  v28 = sub_2081DD518((uint64_t)&v47, 0);
  v29 = v49;
  *(_QWORD *)&v51 = &off_24C08D790;
  *((_QWORD *)&v51 + 1) = v48;
  v52[0] = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)&v51);
  v33 = sub_2081DEC1C((uint64_t)&v51);
  v34 = sub_2081DEE9C((uint64_t)&v51);
  v35 = sub_2081DF11C((uint64_t)&v51) << 31;
  *(_QWORD *)&v51 = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v47 = &off_24C08D790;
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *(_QWORD *)((char *)&v51 + 4) = v44;
  LODWORD(v51) = 3;
  v45 = v51;
  LODWORD(v51) = 1;
  *(_QWORD *)((char *)&v51 + 4) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  v46 = v51;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 16) = HIDWORD(v44);
  *(_QWORD *)(a1 + 20) = v46;
  *(_DWORD *)(a1 + 28) = HIDWORD(v35);
  *(_QWORD *)(a1 + 32) = v44;
  *(_QWORD *)(a1 + 40) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  if (HIDWORD(v44) * HIDWORD(v35) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080BFE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080BFE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080BFE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080BFE90(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  void (**v18)(_QWORD);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char *v23;
  __int128 v24;

  *(_QWORD *)a1 = off_24C085268;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (unsigned int *)a2 + 6;
  if (*((_DWORD *)a2 + 6))
    v5 = *((_DWORD *)a2 + 7) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  else
  {
    v23 = (char *)operator new(0x68uLL);
    v24 = xmmword_208267670;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v4, 1647589490, (uint64_t *)&v23, (uint64_t)&v18);
    if (!v22)
    {
      v17 = sub_207E0E368((uint64_t)&v18);
      sub_207F09168(v17);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    v7 = v19;
    v19 = 0uLL;
    (*v18)(&v18);
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_21:
    v14 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v8 = v14;
    *(_OWORD *)(v8 + 16) = v15;
    return a1;
  }
  v23 = (char *)&off_24C08D790;
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2080BF9F4((uint64_t)&v18, (uint64_t)&v23);
  v11 = v20;
  *(_OWORD *)v8 = v19;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v21;
  v23 = (char *)&off_24C08D790;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2080C0070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C00C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C0148(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;

  if (*(_DWORD *)(a2 + 40) >= 3u)
LABEL_31:
    sub_207CA9F48();
  v4 = *(uint64_t **)(a2 + 24);
  if (!v4)
    goto LABEL_17;
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    sub_2080F3D20(a1, 0, (_DWORD *)(a2 + 72));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_17;
LABEL_9:
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_31;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(std::__shared_weak_count **)(a2 + 32);
  v23 = &off_24C08D790;
  v24 = v10;
  v25 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v21 = v10;
    v22 = v11;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
  }
  else
  {
    v21 = v10;
    v22 = 0;
  }
  v20 = &off_24C08D790;
  sub_2080BF9F4(a1, (uint64_t)&v20);
  v20 = &off_24C08D790;
  if (!v11)
    goto LABEL_23;
  v15 = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_23:
    v23 = &off_24C08D790;
    v17 = v25;
    if (!v25)
      return;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2080C02F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080C0314(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD v50[3];
  __int128 v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v50[0] = &off_24C08D790;
  v50[1] = v10;
  v50[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v50);
  v15 = (char *)v52;
  if (v14 > 1647589489)
  {
    if (v14 == 1647719521)
    {
      v16 = 0;
      goto LABEL_21;
    }
    if (v14 == 1647589490)
    {
      v16 = 1;
      goto LABEL_21;
    }
  }
  else
  {
    if (v14 == 1278226742)
    {
      v16 = 3;
      goto LABEL_21;
    }
    if (v14 == 1647392359)
    {
      v16 = 2;
LABEL_21:
      v15 = (char *)&v52[-2] + 4 * v16;
    }
  }
  if (v15 - (char *)&v51 == 16
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v50[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_28;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_28:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_29;
LABEL_39:
    v27 = *(_QWORD *)(a2 + 8);
    v47 = &off_24C08D790;
    v48 = v27;
    v49 = 0;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_39;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v47 = &off_24C08D790;
  v48 = v24;
  v49 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_40:
  v28 = sub_2081DD518((uint64_t)&v47, 0);
  v29 = v49;
  *(_QWORD *)&v51 = &off_24C08D790;
  *((_QWORD *)&v51 + 1) = v48;
  v52[0] = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)&v51);
  v33 = sub_2081DEC1C((uint64_t)&v51);
  v34 = sub_2081DEE9C((uint64_t)&v51);
  v35 = sub_2081DF11C((uint64_t)&v51) << 31;
  *(_QWORD *)&v51 = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v47 = &off_24C08D790;
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *(_QWORD *)((char *)&v51 + 4) = v44;
  LODWORD(v51) = 4;
  v45 = v51;
  LODWORD(v51) = 1;
  *(_QWORD *)((char *)&v51 + 4) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  v46 = v51;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 16) = HIDWORD(v44);
  *(_QWORD *)(a1 + 20) = v46;
  *(_DWORD *)(a1 + 28) = HIDWORD(v35);
  *(_QWORD *)(a1 + 32) = v44;
  *(_QWORD *)(a1 + 40) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  if (HIDWORD(v44) * HIDWORD(v35) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C0794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C07B0(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  void (**v18)(_QWORD);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char *v23;
  __int128 v24;

  *(_QWORD *)a1 = off_24C0852F8;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (unsigned int *)a2 + 6;
  if (*((_DWORD *)a2 + 6))
    v5 = *((_DWORD *)a2 + 7) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  else
  {
    v23 = (char *)operator new(0x68uLL);
    v24 = xmmword_208267670;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v4, 1647719521, (uint64_t *)&v23, (uint64_t)&v18);
    if (!v22)
    {
      v17 = sub_207E0E368((uint64_t)&v18);
      sub_207F09168(v17);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    v7 = v19;
    v19 = 0uLL;
    (*v18)(&v18);
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_21:
    v14 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v8 = v14;
    *(_OWORD *)(v8 + 16) = v15;
    return a1;
  }
  v23 = (char *)&off_24C08D790;
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2080C0314((uint64_t)&v18, (uint64_t)&v23);
  v11 = v20;
  *(_OWORD *)v8 = v19;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v21;
  v23 = (char *)&off_24C08D790;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2080C0990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C09E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C0A68(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C0314(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080C0C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080C0CAC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  _QWORD v49[2];
  std::__shared_weak_count *v50;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_66;
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v48[0] = &off_24C08D790;
  v48[1] = v10;
  v48[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v48);
  v15 = (char *)&v50 + 4;
  if (v14 <= 1380411456)
  {
    if (v14 == 843264104)
    {
      v16 = 1;
      goto LABEL_23;
    }
    if (v14 == 1278226536)
    {
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    switch(v14)
    {
      case 1380411457:
        v16 = 2;
        goto LABEL_23;
      case 1751410032:
        v16 = 4;
        goto LABEL_23;
      case 1751411059:
        v16 = 3;
LABEL_23:
        v15 = (char *)v49 + 4 * v16;
        break;
    }
  }
  if (v15 - (char *)v49 == 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v48[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_30;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_30:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_31;
LABEL_41:
    v27 = *(_QWORD *)(a2 + 8);
    v45 = &off_24C08D790;
    v46 = v27;
    v47 = 0;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_41;
LABEL_31:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v45 = &off_24C08D790;
  v46 = v24;
  v47 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_42:
  v28 = sub_2081DD518((uint64_t)&v45, 0);
  v29 = v47;
  v49[0] = &off_24C08D790;
  v49[1] = v46;
  v50 = v47;
  if (v47)
  {
    v30 = (unint64_t *)&v47->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)v49);
  v33 = sub_2081DEC1C((uint64_t)v49);
  v34 = sub_2081DEE9C((uint64_t)v49);
  v35 = sub_2081DF11C((uint64_t)v49) << 31;
  v49[0] = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v45 = &off_24C08D790;
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *a1 = v28;
  a1[1] = v44;
  a1[2] = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  if (HIDWORD(v35) * HIDWORD(v44) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_66:
    abort();
  }
}

void sub_2080C109C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C10B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C10C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va1);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C10E0(uint64_t a1, unsigned int *a2)
{
  BOOL v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  void (**v16)(_QWORD);
  __int128 v17;
  char v18;
  char *v19;
  __int128 v20;

  *(_QWORD *)a1 = off_24C085388;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2)
    v4 = a2[1] == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  else
  {
    v19 = (char *)operator new(0x68uLL);
    v20 = xmmword_208267670;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(a2, 1278226536, (uint64_t *)&v19, (uint64_t)&v16);
    if (!v18)
    {
      v14 = sub_207E0E368((uint64_t)&v16);
      sub_207F09168(v14);
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    v6 = v17;
    v17 = 0uLL;
    (*v16)(&v16);
    if (SHIBYTE(v20) < 0)
      operator delete(v19);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  if (!a2[1])
  {
LABEL_21:
    v10 = *(_OWORD *)a2;
    goto LABEL_22;
  }
  v19 = (char *)&off_24C08D790;
  *(_QWORD *)&v20 = v6;
  *((_QWORD *)&v20 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2080C0CAC((uint64_t *)&v16, (uint64_t)&v19);
  v10 = v17;
  v19 = (char *)&off_24C08D790;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v15 = v10;
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v10 = v15;
    }
  }
LABEL_22:
  *v7 = v10;
  return a1;
}

void sub_2080C12B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v4 - 49) < 0)
    operator delete(*(void **)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C12F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47[3];
  uint64_t (**v48)();
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51[2];

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_66;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v49 = v20;
    v50 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v48 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v49 = v29;
    v50 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v48 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_66:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v49 = v11;
  v50 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v48 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v49);
  }
LABEL_50:
  sub_2080C1770(v47, a1);
  v51[0] = a2;
  v51[1] = (uint64_t)v47;
  v38.n128_u64[0] = sub_2080F5DDC(v51);
  if (!v49)
    goto LABEL_58;
  v40 = *v49;
  v39 = (std::__shared_weak_count *)v49[1];
  if (!v39)
    goto LABEL_56;
  v41 = (unint64_t *)&v39->__shared_owners_;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  do
    v43 = __ldaxr(v41);
  while (__stlxr(v43 - 1, v41));
  if (v43)
  {
LABEL_56:
    if (!v40)
      goto LABEL_58;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v38);
  std::__shared_weak_count::__release_weak(v39);
  if (v40)
LABEL_57:
    sub_2081E31E4((uint64_t)v49);
LABEL_58:
  v48 = &off_24C08D790;
  v44 = v50;
  if (v50)
  {
    v45 = (unint64_t *)&v50->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v44->__on_zero_shared)(v44, v38);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_2080C16CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C16E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C1770(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080C0CAC(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C1970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080C198C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD v50[3];
  __int128 v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v50[0] = &off_24C08D790;
  v50[1] = v10;
  v50[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v50);
  v15 = (char *)v52 + 4;
  if (v14 <= 1380411456)
  {
    if (v14 == 843264104)
    {
      v16 = 1;
      goto LABEL_23;
    }
    if (v14 == 1278226536)
    {
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    switch(v14)
    {
      case 1380411457:
        v16 = 2;
        goto LABEL_23;
      case 1751410032:
        v16 = 4;
        goto LABEL_23;
      case 1751411059:
        v16 = 3;
LABEL_23:
        v15 = (char *)&v52[-2] + 4 * v16;
        break;
    }
  }
  if (v15 - (char *)&v51 == 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v50[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_30;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_30:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_31;
LABEL_41:
    v27 = *(_QWORD *)(a2 + 8);
    v47 = &off_24C08D790;
    v48 = v27;
    v49 = 0;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_41;
LABEL_31:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v47 = &off_24C08D790;
  v48 = v24;
  v49 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_42:
  v28 = sub_2081DD518((uint64_t)&v47, 0);
  v29 = v49;
  *(_QWORD *)&v51 = &off_24C08D790;
  *((_QWORD *)&v51 + 1) = v48;
  v52[0] = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)&v51);
  v33 = sub_2081DEC1C((uint64_t)&v51);
  v34 = sub_2081DEE9C((uint64_t)&v51);
  v35 = sub_2081DF11C((uint64_t)&v51) << 31;
  *(_QWORD *)&v51 = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v47 = &off_24C08D790;
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *(_QWORD *)((char *)&v51 + 4) = v44;
  LODWORD(v51) = 2;
  v45 = v51;
  LODWORD(v51) = 1;
  *(_QWORD *)((char *)&v51 + 4) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  v46 = v51;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 16) = HIDWORD(v44);
  *(_QWORD *)(a1 + 20) = v46;
  *(_DWORD *)(a1 + 28) = HIDWORD(v35);
  *(_QWORD *)(a1 + 32) = v44;
  *(_QWORD *)(a1 + 40) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  if (HIDWORD(v44) * HIDWORD(v35) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C1DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C1E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C1E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C1E40(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  void (**v18)(_QWORD);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char *v23;
  __int128 v24;

  *(_QWORD *)a1 = off_24C085418;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (unsigned int *)a2 + 6;
  if (*((_DWORD *)a2 + 6))
    v5 = *((_DWORD *)a2 + 7) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  else
  {
    v23 = (char *)operator new(0x68uLL);
    v24 = xmmword_208267670;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v4, 843264104, (uint64_t *)&v23, (uint64_t)&v18);
    if (!v22)
    {
      v17 = sub_207E0E368((uint64_t)&v18);
      sub_207F09168(v17);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    v7 = v19;
    v19 = 0uLL;
    (*v18)(&v18);
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_21:
    v14 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v8 = v14;
    *(_OWORD *)(v8 + 16) = v15;
    return a1;
  }
  v23 = (char *)&off_24C08D790;
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2080C198C((uint64_t)&v18, (uint64_t)&v23);
  v11 = v20;
  *(_OWORD *)v8 = v19;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v21;
  v23 = (char *)&off_24C08D790;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2080C2020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C2070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C20F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C198C(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 2;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(DWORD1(v30), 2);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080C2320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080C233C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD v50[3];
  __int128 v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v50[0] = &off_24C08D790;
  v50[1] = v10;
  v50[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v50);
  v15 = (char *)v52 + 4;
  if (v14 <= 1380411456)
  {
    if (v14 == 843264104)
    {
      v16 = 1;
      goto LABEL_23;
    }
    if (v14 == 1278226536)
    {
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    switch(v14)
    {
      case 1380411457:
        v16 = 2;
        goto LABEL_23;
      case 1751410032:
        v16 = 4;
        goto LABEL_23;
      case 1751411059:
        v16 = 3;
LABEL_23:
        v15 = (char *)&v52[-2] + 4 * v16;
        break;
    }
  }
  if (v15 - (char *)&v51 == 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v50[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_30;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_30:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_31;
LABEL_41:
    v27 = *(_QWORD *)(a2 + 8);
    v47 = &off_24C08D790;
    v48 = v27;
    v49 = 0;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_41;
LABEL_31:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v47 = &off_24C08D790;
  v48 = v24;
  v49 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_42:
  v28 = sub_2081DD518((uint64_t)&v47, 0);
  v29 = v49;
  *(_QWORD *)&v51 = &off_24C08D790;
  *((_QWORD *)&v51 + 1) = v48;
  v52[0] = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)&v51);
  v33 = sub_2081DEC1C((uint64_t)&v51);
  v34 = sub_2081DEE9C((uint64_t)&v51);
  v35 = sub_2081DF11C((uint64_t)&v51) << 31;
  *(_QWORD *)&v51 = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v47 = &off_24C08D790;
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *(_QWORD *)((char *)&v51 + 4) = v44;
  LODWORD(v51) = 4;
  v45 = v51;
  LODWORD(v51) = 1;
  *(_QWORD *)((char *)&v51 + 4) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  v46 = v51;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 16) = HIDWORD(v44);
  *(_QWORD *)(a1 + 20) = v46;
  *(_DWORD *)(a1 + 28) = HIDWORD(v35);
  *(_QWORD *)(a1 + 32) = v44;
  *(_QWORD *)(a1 + 40) = v35 & 0xFFFFFFFF00000000 | (v34 >> 1);
  if (HIDWORD(v44) * HIDWORD(v35) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C27AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C27C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C27D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C27F0(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  void (**v18)(_QWORD);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char *v23;
  __int128 v24;

  *(_QWORD *)a1 = off_24C0854A8;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (unsigned int *)a2 + 6;
  if (*((_DWORD *)a2 + 6))
    v5 = *((_DWORD *)a2 + 7) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  else
  {
    v23 = (char *)operator new(0x68uLL);
    v24 = xmmword_208267670;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v4, 1380411457, (uint64_t *)&v23, (uint64_t)&v18);
    if (!v22)
    {
      v17 = sub_207E0E368((uint64_t)&v18);
      sub_207F09168(v17);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    v7 = v19;
    v19 = 0uLL;
    (*v18)(&v18);
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_21:
    v14 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v8 = v14;
    *(_OWORD *)(v8 + 16) = v15;
    return a1;
  }
  v23 = (char *)&off_24C08D790;
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2080C233C((uint64_t)&v18, (uint64_t)&v23);
  v11 = v20;
  *(_OWORD *)v8 = v19;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v21;
  v23 = (char *)&off_24C08D790;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2080C29D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C2A20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C2AA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C233C(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080C2CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080C2CEC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[3];
  _QWORD v49[2];
  std::__shared_weak_count *v50;

  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_66;
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v48[0] = &off_24C08D790;
  v48[1] = v10;
  v48[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v48);
  v15 = (char *)&v50 + 4;
  if (v14 <= 1380410944)
  {
    if (v14 == 843264102)
    {
      v16 = 1;
      goto LABEL_23;
    }
    if (v14 == 1278226534)
    {
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    switch(v14)
    {
      case 1380410945:
        v16 = 2;
        goto LABEL_23;
      case 1717855600:
        v16 = 4;
        goto LABEL_23;
      case 1717856627:
        v16 = 3;
LABEL_23:
        v15 = (char *)v49 + 4 * v16;
        break;
    }
  }
  if (v15 - (char *)v49 == 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v48[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_30;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_30:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_31;
LABEL_41:
    v27 = *(_QWORD *)(a2 + 8);
    v45 = &off_24C08D790;
    v46 = v27;
    v47 = 0;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_41;
LABEL_31:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v45 = &off_24C08D790;
  v46 = v24;
  v47 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_42:
  v28 = sub_2081DD518((uint64_t)&v45, 0);
  v29 = v47;
  v49[0] = &off_24C08D790;
  v49[1] = v46;
  v50 = v47;
  if (v47)
  {
    v30 = (unint64_t *)&v47->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)v49);
  v33 = sub_2081DEC1C((uint64_t)v49);
  v34 = sub_2081DEE9C((uint64_t)v49);
  v35 = sub_2081DF11C((uint64_t)v49) << 30;
  v49[0] = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v45 = &off_24C08D790;
  v40 = v47;
  if (v47)
  {
    v41 = (unint64_t *)&v47->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *a1 = v28;
  a1[1] = v44;
  a1[2] = v35 & 0xFFFFFFFF00000000 | (v34 >> 2);
  if (HIDWORD(v35) * HIDWORD(v44) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_66:
    abort();
  }
}

void sub_2080C30DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C30F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C3104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va1);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C3120(uint64_t a1, unsigned int *a2)
{
  BOOL v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  void (**v16)(_QWORD);
  __int128 v17;
  char v18;
  char *v19;
  __int128 v20;

  *(_QWORD *)a1 = off_24C085538;
  *(_DWORD *)(a1 + 8) = 0;
  if (*a2)
    v4 = a2[1] == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  else
  {
    v19 = (char *)operator new(0x68uLL);
    v20 = xmmword_208267670;
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(a2, 1278226534, (uint64_t *)&v19, (uint64_t)&v16);
    if (!v18)
    {
      v14 = sub_207E0E368((uint64_t)&v16);
      sub_207F09168(v14);
    }
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    v6 = v17;
    v17 = 0uLL;
    (*v16)(&v16);
    if (SHIBYTE(v20) < 0)
      operator delete(v19);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 40) = 0;
    v7 = (_OWORD *)(a1 + 48);
    if (!*a2)
      goto LABEL_21;
  }
  if (!a2[1])
  {
LABEL_21:
    v10 = *(_OWORD *)a2;
    goto LABEL_22;
  }
  v19 = (char *)&off_24C08D790;
  *(_QWORD *)&v20 = v6;
  *((_QWORD *)&v20 + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_2080C2CEC((uint64_t *)&v16, (uint64_t)&v19);
  v10 = v17;
  v19 = (char *)&off_24C08D790;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      v15 = v10;
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v10 = v15;
    }
  }
LABEL_22:
  *v7 = v10;
  return a1;
}

void sub_2080C32F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v4 - 49) < 0)
    operator delete(*(void **)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C3338(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47[3];
  uint64_t (**v48)();
  uint64_t *v49;
  std::__shared_weak_count *v50;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    goto LABEL_66;
  v3 = *(uint64_t **)(a1 + 24);
  if (!v3)
    return;
  v6 = *v3;
  v5 = (std::__shared_weak_count *)v3[1];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  else
  {
LABEL_8:
    if (!v6)
      return;
  }
  v10 = *(_DWORD *)(a1 + 40);
  if (v10 == 2)
  {
    v20 = *(uint64_t **)(a1 + 24);
    v21 = *(std::__shared_weak_count **)(a1 + 32);
    v49 = v20;
    v50 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v48 = off_24C08D770;
    if (v20)
    {
      v25 = *v20;
      v24 = (std::__shared_weak_count *)v20[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v25)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10 == 1)
  {
    v29 = *(uint64_t **)(a1 + 24);
    v30 = *(std::__shared_weak_count **)(a1 + 32);
    v49 = v29;
    v50 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v48 = off_24C08D770;
    if (v29)
    {
      v34 = *v29;
      v33 = (std::__shared_weak_count *)v29[1];
      if (v33)
      {
        v35 = (unint64_t *)&v33->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        do
          v37 = __ldaxr(v35);
        while (__stlxr(v37 - 1, v35));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v34)
        goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (v10)
LABEL_66:
    sub_207CA9F48();
  v11 = *(uint64_t **)(a1 + 24);
  v12 = *(std::__shared_weak_count **)(a1 + 32);
  v49 = v11;
  v50 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v48 = off_24C08D770;
  if (v11)
  {
    v16 = *v11;
    v15 = (std::__shared_weak_count *)v11[1];
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v16)
LABEL_49:
      sub_2081E3010((uint64_t)v49);
  }
LABEL_50:
  sub_2080C37AC(v47, a1);
  v38.n128_f32[0] = sub_207D5A1F4(a2, (uint64_t)v47);
  if (!v49)
    goto LABEL_58;
  v40 = *v49;
  v39 = (std::__shared_weak_count *)v49[1];
  if (!v39)
    goto LABEL_56;
  v41 = (unint64_t *)&v39->__shared_owners_;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  do
    v43 = __ldaxr(v41);
  while (__stlxr(v43 - 1, v41));
  if (v43)
  {
LABEL_56:
    if (!v40)
      goto LABEL_58;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v38);
  std::__shared_weak_count::__release_weak(v39);
  if (v40)
LABEL_57:
    sub_2081E31E4((uint64_t)v49);
LABEL_58:
  v48 = &off_24C08D790;
  v44 = v50;
  if (v50)
  {
    v45 = (unint64_t *)&v50->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v44->__on_zero_shared)(v44, v38);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_2080C3708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DD834((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C3724(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C37AC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080C2CEC(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C39AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080C39C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD v50[3];
  __int128 v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v50[0] = &off_24C08D790;
  v50[1] = v10;
  v50[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v50);
  v15 = (char *)v52 + 4;
  if (v14 <= 1380410944)
  {
    if (v14 == 843264102)
    {
      v16 = 1;
      goto LABEL_23;
    }
    if (v14 == 1278226534)
    {
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    switch(v14)
    {
      case 1380410945:
        v16 = 2;
        goto LABEL_23;
      case 1717855600:
        v16 = 4;
        goto LABEL_23;
      case 1717856627:
        v16 = 3;
LABEL_23:
        v15 = (char *)&v52[-2] + 4 * v16;
        break;
    }
  }
  if (v15 - (char *)&v51 == 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v50[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_30;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_30:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_31;
LABEL_41:
    v27 = *(_QWORD *)(a2 + 8);
    v47 = &off_24C08D790;
    v48 = v27;
    v49 = 0;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_41;
LABEL_31:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v47 = &off_24C08D790;
  v48 = v24;
  v49 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_42:
  v28 = sub_2081DD518((uint64_t)&v47, 0);
  v29 = v49;
  *(_QWORD *)&v51 = &off_24C08D790;
  *((_QWORD *)&v51 + 1) = v48;
  v52[0] = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)&v51);
  v33 = sub_2081DEC1C((uint64_t)&v51);
  v34 = sub_2081DEE9C((uint64_t)&v51);
  v35 = sub_2081DF11C((uint64_t)&v51) << 30;
  *(_QWORD *)&v51 = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v47 = &off_24C08D790;
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *(_QWORD *)((char *)&v51 + 4) = v44;
  LODWORD(v51) = 2;
  v45 = v51;
  LODWORD(v51) = 1;
  *(_QWORD *)((char *)&v51 + 4) = v35 & 0xFFFFFFFF00000000 | (v34 >> 2);
  v46 = v51;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 16) = HIDWORD(v44);
  *(_QWORD *)(a1 + 20) = v46;
  *(_DWORD *)(a1 + 28) = HIDWORD(v35);
  *(_QWORD *)(a1 + 32) = v44;
  *(_QWORD *)(a1 + 40) = v35 & 0xFFFFFFFF00000000 | (v34 >> 2);
  if (HIDWORD(v44) * HIDWORD(v35) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C3E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C3E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C3E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C3E7C(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  void (**v18)(_QWORD);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char *v23;
  __int128 v24;

  *(_QWORD *)a1 = off_24C0855C8;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (unsigned int *)a2 + 6;
  if (*((_DWORD *)a2 + 6))
    v5 = *((_DWORD *)a2 + 7) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  else
  {
    v23 = (char *)operator new(0x68uLL);
    v24 = xmmword_208267670;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v4, 843264102, (uint64_t *)&v23, (uint64_t)&v18);
    if (!v22)
    {
      v17 = sub_207E0E368((uint64_t)&v18);
      sub_207F09168(v17);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    v7 = v19;
    v19 = 0uLL;
    (*v18)(&v18);
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_21:
    v14 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v8 = v14;
    *(_OWORD *)(v8 + 16) = v15;
    return a1;
  }
  v23 = (char *)&off_24C08D790;
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2080C39C8((uint64_t)&v18, (uint64_t)&v23);
  v11 = v20;
  *(_OWORD *)v8 = v19;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v21;
  v23 = (char *)&off_24C08D790;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2080C405C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C40AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C4134(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C39C8(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 2;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 2 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
  v20 = __PAIR64__(DWORD1(v30), 2);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080C435C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2080C4378(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  size_t v34;
  size_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD v50[3];
  __int128 v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v6)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_9:
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v50[0] = &off_24C08D790;
  v50[1] = v10;
  v50[2] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_2081DF39C((uint64_t)v50);
  v15 = (char *)v52 + 4;
  if (v14 <= 1380410944)
  {
    if (v14 == 843264102)
    {
      v16 = 1;
      goto LABEL_23;
    }
    if (v14 == 1278226534)
    {
      v16 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    switch(v14)
    {
      case 1380410945:
        v16 = 2;
        goto LABEL_23;
      case 1717855600:
        v16 = 4;
        goto LABEL_23;
      case 1717856627:
        v16 = 3;
LABEL_23:
        v15 = (char *)&v52[-2] + 4 * v16;
        break;
    }
  }
  if (v15 - (char *)&v51 == 20
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v50[0] = &off_24C08D790;
  if (!v11)
    goto LABEL_30;
  v17 = (unint64_t *)&v11->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_30:
    v19 = *(std::__shared_weak_count **)(a2 + 16);
    if (v19)
      goto LABEL_31;
LABEL_41:
    v27 = *(_QWORD *)(a2 + 8);
    v47 = &off_24C08D790;
    v48 = v27;
    v49 = 0;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v19)
    goto LABEL_41;
LABEL_31:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 - 1, v20));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  v47 = &off_24C08D790;
  v48 = v24;
  v49 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
LABEL_42:
  v28 = sub_2081DD518((uint64_t)&v47, 0);
  v29 = v49;
  *(_QWORD *)&v51 = &off_24C08D790;
  *((_QWORD *)&v51 + 1) = v48;
  v52[0] = v49;
  if (v49)
  {
    v30 = (unint64_t *)&v49->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = sub_2081DE99C((uint64_t)&v51);
  v33 = sub_2081DEC1C((uint64_t)&v51);
  v34 = sub_2081DEE9C((uint64_t)&v51);
  v35 = sub_2081DF11C((uint64_t)&v51) << 30;
  *(_QWORD *)&v51 = &off_24C08D790;
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v38 = v32;
  v39 = v32 | ((unint64_t)v33 << 32);
  v47 = &off_24C08D790;
  v40 = v49;
  if (v49)
  {
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v33)
    v43 = v38 == 0;
  else
    v43 = 1;
  if (v43)
    v44 = 0;
  else
    v44 = v39;
  *(_QWORD *)((char *)&v51 + 4) = v44;
  LODWORD(v51) = 4;
  v45 = v51;
  LODWORD(v51) = 1;
  *(_QWORD *)((char *)&v51 + 4) = v35 & 0xFFFFFFFF00000000 | (v34 >> 2);
  v46 = v51;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 16) = HIDWORD(v44);
  *(_QWORD *)(a1 + 20) = v46;
  *(_DWORD *)(a1 + 28) = HIDWORD(v35);
  *(_QWORD *)(a1 + 32) = v44;
  *(_QWORD *)(a1 + 40) = v35 & 0xFFFFFFFF00000000 | (v34 >> 2);
  if (HIDWORD(v44) * HIDWORD(v35) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C47E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C47FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2081DE77C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C4810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_2081DE77C(&a15);
  sub_2081DE77C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C482C(uint64_t a1, __int128 *a2)
{
  unsigned int *v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  void (**v18)(_QWORD);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char *v23;
  __int128 v24;

  *(_QWORD *)a1 = off_24C085658;
  *(_DWORD *)(a1 + 8) = 0;
  v4 = (unsigned int *)a2 + 6;
  if (*((_DWORD *)a2 + 6))
    v5 = *((_DWORD *)a2 + 7) == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  else
  {
    v23 = (char *)operator new(0x68uLL);
    v24 = xmmword_208267670;
    strcpy(v23, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
    sub_2081DDCBC(v4, 1380410945, (uint64_t *)&v23, (uint64_t)&v18);
    if (!v22)
    {
      v17 = sub_207E0E368((uint64_t)&v18);
      sub_207F09168(v17);
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    v7 = v19;
    v19 = 0uLL;
    (*v18)(&v18);
    if (SHIBYTE(v24) < 0)
      operator delete(v23);
    *(_QWORD *)(a1 + 16) = &off_24C08D790;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 40) = 0;
    v8 = a1 + 48;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_21;
  }
  if (!*((_DWORD *)a2 + 7))
  {
LABEL_21:
    v14 = *a2;
    v15 = a2[1];
    *(_QWORD *)(v8 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v8 = v14;
    *(_OWORD *)(v8 + 16) = v15;
    return a1;
  }
  v23 = (char *)&off_24C08D790;
  *(_QWORD *)&v24 = v7;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_2080C4378((uint64_t)&v18, (uint64_t)&v23);
  v11 = v20;
  *(_OWORD *)v8 = v19;
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v21;
  v23 = (char *)&off_24C08D790;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_2080C4A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2081DE6D8((uint64_t)va);
  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_2080C4A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*(_DWORD *)(a1 + 40) >= 3u)
    sub_207CA9F48();
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2080C4AE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_38;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          *(_QWORD *)&v30 = &off_24C08D790;
          *((_QWORD *)&v30 + 1) = v10;
          v31 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v28 = v10;
            v29 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v28 = v10;
            v29 = 0;
          }
          v27 = &off_24C08D790;
          sub_2080C4378(a1, (uint64_t)&v27);
          v27 = &off_24C08D790;
          if (v11)
          {
            v22 = (unint64_t *)&v11->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          *(_QWORD *)&v30 = &off_24C08D790;
          v24 = v31;
          if (v31)
          {
            v25 = (unint64_t *)&v31->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          return;
        }
LABEL_38:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 76))
    v15 = *(_DWORD *)(a2 + 72) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  if (v15)
    v16 = 0;
  LODWORD(v30) = 4;
  *(_QWORD *)((char *)&v30 + 4) = v16;
  v17 = 4 * ((_DWORD)v16 != 0);
  LODWORD(v18) = v17 * v16;
  if (HIDWORD(v16))
    v18 = v18;
  else
    v18 = 0;
  v19 = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
  v20 = __PAIR64__(DWORD1(v30), 4);
  LODWORD(v30) = 1;
  *(_QWORD *)((char *)&v30 + 4) = v19;
  v21 = v30;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v20;
  *(_DWORD *)(a1 + 16) = HIDWORD(v16);
  *(_QWORD *)(a1 + 20) = v21;
  *(_DWORD *)(a1 + 28) = v18;
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v19;
}

void sub_2080C4D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C4D28(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C084F98;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080C4D8C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080BAA94(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C4F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080C4FA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v28 = &off_24C08D790;
          v29 = v10;
          v30 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080BAA94(&v26, (uint64_t)&v23);
          *(_QWORD *)a1 = v26;
          *(_OWORD *)(a1 + 8) = v27;
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v28 = &off_24C08D790;
          v20 = v30;
          if (v30)
          {
            v21 = (unint64_t *)&v30->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C51B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C51D4()
{
  return 1;
}

_UNKNOWN **sub_2080C51DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080C5230(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45[8];
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v14;
    v51 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v49 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v50);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v23;
    v51 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v49 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v50 = v5;
  v51 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v49 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080C4FA8((uint64_t)v45, a1);
  sub_2080C4FA8((uint64_t)&v43, a1);
  v32 = operator new(0x40uLL);
  v33 = v32;
  *v32 = &off_24C0856E8;
  if (v48 <= 0x20)
    v34 = 32;
  else
    v34 = v48;
  v52[0] = v46;
  v52[1] = v47 | (unint64_t)(v34 << 32);
  sub_2080BADE0((uint64_t)v32, (unsigned int *)v52);
  v53 = v43;
  v54 = v44;
  sub_2080BB050((uint64_t)v33, (size_t)&v53);
  *v33 = &off_24C0856E8;
  *a2 = v33;
  if (!v50)
    goto LABEL_48;
  v36 = *v50;
  v35 = (std::__shared_weak_count *)v50[1];
  if (!v35)
    goto LABEL_46;
  v37 = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (v39)
  {
LABEL_46:
    if (!v36)
      goto LABEL_48;
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (v36)
LABEL_47:
    sub_2081E30F8((uint64_t)v50);
LABEL_48:
  v49 = &off_24C08D790;
  v40 = v51;
  if (v51)
  {
    v41 = (unint64_t *)&v51->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_2080C5610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)v16 = off_24C084F98;
  v19 = v16[10];
  if ((_DWORD)v19 != -1)
    ((void (*)(uint64_t, unsigned int *))off_24C0863C0[v19])(v17 - 33, v16 + 4);
  v16[10] = -1;
  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080C5668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080C5684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C5698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080C56AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080C56EC(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[3];
  unsigned int v46;
  double v47[3];
  __int128 v48;
  uint64_t v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086228, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v51, lpsrc, 1);
    v16 = (void *)v51;
    v17 = *(_QWORD *)(v51 + 16);
    v44 = *(_OWORD *)v51;
    v45[0] = v17;
    *(_QWORD *)&v51 = 0;
    operator delete(v16);
    sub_2080C4D8C((uint64_t *)&v51, a1);
    *(_QWORD *)&v48 = &v44;
    *((_QWORD *)&v48 + 1) = &v51;
    sub_2080F2F3C((size_t *)&v48);
    return result;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    if (v8)
    {
      v22 = *v8;
      v21 = (std::__shared_weak_count *)v8[1];
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v22)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v26 = (unint64_t *)&v7->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (v8)
    {
      v29 = *v8;
      v28 = (std::__shared_weak_count *)v8[1];
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        do
          v32 = __ldaxr(v30);
        while (__stlxr(v32 - 1, v30));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v29)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080C4FA8((uint64_t)&v48, v5);
  *(_QWORD *)&v44 = &off_24C0856E8;
  if (HIDWORD(v49) <= 0x20)
    v33 = 32;
  else
    v33 = HIDWORD(v49);
  v50[0] = *((_QWORD *)&v48 + 1);
  v50[1] = v49 | (unint64_t)(v33 << 32);
  sub_2080BADE0((uint64_t)&v44, (unsigned int *)v50);
  v51 = v48;
  v52 = v49;
  sub_2080BB050((uint64_t)&v44, (size_t)&v51);
  *(_QWORD *)&v44 = &off_24C0856E8;
  if (!v8)
    goto LABEL_53;
  v35 = *v8;
  v34 = (std::__shared_weak_count *)v8[1];
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (!v35)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  if (v35)
LABEL_52:
    sub_2081E30F8((uint64_t)v8);
LABEL_53:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = v46;
  *(_DWORD *)(a1 + 8) = DWORD2(v44);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = v47[0];
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v51, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_63;
  }
  *(_QWORD *)&v51 = a1 + 16;
  ((void (*)(__int128 *))off_24C0863F0[v41])(&v51);
LABEL_63:
  v43 = v46;
  result = v47[0];
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
  *(_QWORD *)&v44 = off_24C084F98;
  if ((_DWORD)v43 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C0863C0[v43])(&v51, v45);
  return result;
}

uint64_t sub_2080C5C7C(uint64_t a1)
{
  uint64_t v2[3];

  sub_2080C4D8C(v2, a1);
  return v2[0];
}

double sub_2080C5CA4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080C4D8C((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_2080C5D34@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080C4FA8((uint64_t)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2080C5DC4()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51488);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51488))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E51490);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51490))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E51498);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51498))
    {
LABEL_13:
      if (byte_253E517FF < 0)
      {
        sub_207CA40D8(&xmmword_253E517D0, (void *)qword_253E517E8, unk_253E517F0);
      }
      else
      {
        xmmword_253E517D0 = *(_OWORD *)&qword_253E517E8;
        unk_253E517E0 = unk_253E517F8;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E517D0, &dword_207C77000);
      __cxa_guard_release(&qword_253E51490);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E514A0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E514A0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray8u>]", &qword_253E51800);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51800, &dword_207C77000);
      __cxa_guard_release(&qword_253E514A0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E514A8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E514A8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E514B0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E514B0))
      {
        if (byte_253E51818[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E51818, *(unint64_t *)&byte_253E51818[8]);
        else
          __p = *(std::string *)byte_253E51818;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51830);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51830, &dword_207C77000);
        __cxa_guard_release(&qword_253E514B0);
      }
      if (byte_253E51847 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E51830, *((unint64_t *)&xmmword_253E51830 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E51830;
        v18 = unk_253E51840;
      }
      sub_207DDBAFC((char *)v17, (std::string *)&qword_253E517E8);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E517E8, &dword_207C77000);
      __cxa_guard_release(&qword_253E51498);
      goto LABEL_13;
    }
    if (byte_253E51817 >= 0)
      v6 = byte_253E51817;
    else
      v6 = unk_253E51808;
    if (byte_253E51817 >= 0)
      v7 = &qword_253E51800;
    else
      v7 = (uint64_t *)qword_253E51800;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E51818[8] = v6;
      *(_QWORD *)&byte_253E51818[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E51818 = v13;
    }
    else
    {
      v13 = byte_253E51818;
      byte_253E51818[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51818, &dword_207C77000);
    __cxa_guard_release(&qword_253E514A8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E517E7 < 0)
  {
    sub_207CA40D8(&xmmword_253E517B8, (void *)xmmword_253E517D0, *((unint64_t *)&xmmword_253E517D0 + 1));
  }
  else
  {
    xmmword_253E517B8 = xmmword_253E517D0;
    unk_253E517C8 = unk_253E517E0;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E517B8, &dword_207C77000);
  __cxa_guard_release(&qword_253E51488);
LABEL_2:
  if (byte_253E517CF >= 0)
    return &xmmword_253E517B8;
  else
    return (__int128 *)xmmword_253E517B8;
}

void sub_2080C6218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E51498);
  __cxa_guard_abort(&qword_253E51490);
  __cxa_guard_abort(&qword_253E51488);
  _Unwind_Resume(a1);
}

void sub_2080C62B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51488);
  _Unwind_Resume(a1);
}

void sub_2080C62CC()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080C6308(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080C6ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C6B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C6B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C6B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C6B4C()
{
  return 65792;
}

_QWORD *sub_2080C6B58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080C6B98(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0851D8;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080C6BFC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080BED30(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C6DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_2081DE77C(&a9);
  sub_2081DE77C(&a12);
  _Unwind_Resume(a1);
}

void sub_2080C6E18(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v28 = &off_24C08D790;
          v29 = v10;
          v30 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080BED30(&v26, (uint64_t)&v23);
          *(_QWORD *)a1 = v26;
          *(_OWORD *)(a1 + 8) = v27;
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v28 = &off_24C08D790;
          v20 = v30;
          if (v30)
          {
            v21 = (unint64_t *)&v30->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

void sub_2080C7028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2081DE77C((uint64_t *)va);
  sub_2081DE77C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C7044()
{
  return 2;
}

_UNKNOWN **sub_2080C704C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254530830);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254530830))
    return &off_253E50C68;
  __cxa_guard_release(&qword_254530830);
  return &off_253E50C68;
}

void sub_2080C70A0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45[8];
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    v14 = *(uint64_t **)(a1 + 24);
    v15 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v14;
    v51 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v49 = off_24C08D750;
    if (!v14)
      goto LABEL_37;
    v19 = *v14;
    v18 = (std::__shared_weak_count *)v14[1];
    if (!v18)
      goto LABEL_24;
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (v22)
    {
LABEL_24:
      if (!v19)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!v19)
      goto LABEL_37;
LABEL_36:
    sub_2081E2F24((uint64_t)v50);
    goto LABEL_37;
  }
  if (v4 == 1)
  {
    v23 = *(uint64_t **)(a1 + 24);
    v24 = *(std::__shared_weak_count **)(a1 + 32);
    v50 = v23;
    v51 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v49 = off_24C08D750;
    if (!v23)
      goto LABEL_37;
    v28 = *v23;
    v27 = (std::__shared_weak_count *)v23[1];
    if (!v27)
      goto LABEL_35;
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (v31)
    {
LABEL_35:
      if (!v28)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (!v28)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v4)
    sub_207CA9F48();
  v5 = *(uint64_t **)(a1 + 24);
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  v50 = v5;
  v51 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v49 = off_24C08D750;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_13;
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (v13)
    {
LABEL_13:
      if (!v10)
        goto LABEL_37;
      goto LABEL_36;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_36;
  }
LABEL_37:
  sub_2080C6E18((uint64_t)v45, a1);
  sub_2080C6E18((uint64_t)&v43, a1);
  v32 = operator new(0x40uLL);
  v33 = v32;
  *v32 = &off_24C085778;
  if (v48 <= 0x10)
    v34 = 16;
  else
    v34 = v48;
  v52[0] = v46;
  v52[1] = v47 | (unint64_t)(v34 << 32);
  sub_2080BF14C((uint64_t)v32, (unsigned int *)v52);
  v53 = v43;
  v54 = v44;
  sub_2080BF364((uint64_t)v33, (uint64_t *)&v53);
  *v33 = &off_24C085778;
  *a2 = v33;
  if (!v50)
    goto LABEL_48;
  v36 = *v50;
  v35 = (std::__shared_weak_count *)v50[1];
  if (!v35)
    goto LABEL_46;
  v37 = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (v39)
  {
LABEL_46:
    if (!v36)
      goto LABEL_48;
    goto LABEL_47;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (v36)
LABEL_47:
    sub_2081E30F8((uint64_t)v50);
LABEL_48:
  v49 = &off_24C08D790;
  v40 = v51;
  if (v51)
  {
    v41 = (unint64_t *)&v51->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_2080C7480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)v16 = off_24C0851D8;
  v19 = v16[10];
  if ((_DWORD)v19 != -1)
    ((void (*)(uint64_t, unsigned int *))off_24C0863C0[v19])(v17 - 33, v16 + 4);
  v16[10] = -1;
  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080C74D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  operator delete(v16);
  sub_2081DD418(&a16);
  _Unwind_Resume(a1);
}

void sub_2080C74F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2080C7508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2081DD418((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2080C751C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD200(a2, v2);
  if (v3 != 1)
  {
    if (v3)
      sub_207CA9F48();
    return sub_2081DD200(a2, v2);
  }
  return sub_2081DD30C(a2, v2);
}

double sub_2080C755C(uint64_t a1, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  double result;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[3];
  unsigned int v46;
  double v47[3];
  __int128 v48;
  uint64_t v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C08D688, (const struct __class_type_info *)&unk_24C086240, 0);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(&v51, lpsrc, 2);
    v16 = (void *)v51;
    v17 = *(_QWORD *)(v51 + 16);
    v44 = *(_OWORD *)v51;
    v45[0] = v17;
    *(_QWORD *)&v51 = 0;
    operator delete(v16);
    sub_2080C6BFC((uint64_t *)&v51, a1);
    sub_2080F44E4((uint64_t *)&v44, (uint64_t)&v51);
    return result;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 10);
  if (v6 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    if (v8)
    {
      v22 = *v8;
      v21 = (std::__shared_weak_count *)v8[1];
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v22)
        goto LABEL_41;
    }
  }
  else if (v6 == 1)
  {
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v26 = (unint64_t *)&v7->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    if (v8)
    {
      v29 = *v8;
      v28 = (std::__shared_weak_count *)v8[1];
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        do
          v32 = __ldaxr(v30);
        while (__stlxr(v32 - 1, v30));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v29)
        goto LABEL_41;
    }
  }
  else
  {
    if (v6)
      sub_207CA9F48();
    v8 = (uint64_t *)*((_QWORD *)v4 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 4);
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v8)
    {
      v12 = *v8;
      v11 = (std::__shared_weak_count *)v8[1];
      if (v11)
      {
        v13 = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
LABEL_41:
        sub_2081E2F24((uint64_t)v8);
    }
  }
  sub_2080C6E18((uint64_t)&v48, v5);
  *(_QWORD *)&v44 = &off_24C085778;
  if (HIDWORD(v49) <= 0x10)
    v33 = 16;
  else
    v33 = HIDWORD(v49);
  v50[0] = *((_QWORD *)&v48 + 1);
  v50[1] = v49 | (unint64_t)(v33 << 32);
  sub_2080BF14C((uint64_t)&v44, (unsigned int *)v50);
  v51 = v48;
  v52 = v49;
  sub_2080BF364((uint64_t)&v44, (uint64_t *)&v51);
  *(_QWORD *)&v44 = &off_24C085778;
  if (!v8)
    goto LABEL_53;
  v35 = *v8;
  v34 = (std::__shared_weak_count *)v8[1];
  if (v34)
  {
    v36 = (unint64_t *)&v34->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      if (!v35)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  if (v35)
LABEL_52:
    sub_2081E30F8((uint64_t)v8);
LABEL_53:
  if (v7)
  {
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v41 = v46;
  *(_DWORD *)(a1 + 8) = DWORD2(v44);
  v42 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v42 == -1)
  {
    if ((_DWORD)v41 == -1)
    {
      result = v47[0];
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
      return result;
    }
  }
  else if ((_DWORD)v41 == -1)
  {
    ((void (*)(__int128 *, uint64_t))off_24C0863C0[v42])(&v51, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_63;
  }
  *(_QWORD *)&v51 = a1 + 16;
  ((void (*)(__int128 *))off_24C0863F0[v41])(&v51);
LABEL_63:
  v43 = v46;
  result = v47[0];
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v47;
  *(_QWORD *)&v44 = off_24C0851D8;
  if ((_DWORD)v43 != -1)
    ((void (*)(__int128 *, _QWORD *))off_24C0863C0[v43])(&v51, v45);
  return result;
}

uint64_t sub_2080C7AE4(uint64_t a1)
{
  uint64_t v2[3];

  sub_2080C6BFC(v2, a1);
  return v2[0];
}

double sub_2080C7B0C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080C6BFC((uint64_t *)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

double sub_2080C7B9C@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (a2 != 2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  sub_2080C6E18((uint64_t)&v7, a1);
  v5 = operator new(0x18uLL);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  v5[2] = v8;
  *a3 = v5;
  return result;
}

__int128 *sub_2080C7C2C()
{
  unsigned __int8 v0;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v6;
  uint64_t *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17[2];
  uint64_t v18;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_253E514B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_253E514B8))
    goto LABEL_2;
  v2 = atomic_load((unsigned __int8 *)&qword_253E514C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E514C0))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_253E514C8);
    if ((v3 & 1) != 0 || !__cxa_guard_acquire(&qword_253E514C8))
    {
LABEL_13:
      if (byte_253E5188F < 0)
      {
        sub_207CA40D8(&xmmword_253E51860, (void *)qword_253E51878, unk_253E51880);
      }
      else
      {
        xmmword_253E51860 = *(_OWORD *)&qword_253E51878;
        unk_253E51870 = unk_253E51888;
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51860, &dword_207C77000);
      __cxa_guard_release(&qword_253E514C0);
      goto LABEL_7;
    }
    v4 = atomic_load((unsigned __int8 *)&qword_253E514D0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E514D0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray16u>]", &qword_253E51890);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51890, &dword_207C77000);
      __cxa_guard_release(&qword_253E514D0);
    }
    v5 = atomic_load((unsigned __int8 *)&qword_253E514D8);
    if ((v5 & 1) != 0 || !__cxa_guard_acquire(&qword_253E514D8))
    {
LABEL_49:
      v16 = atomic_load((unsigned __int8 *)&qword_253E514E0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_253E514E0))
      {
        if (byte_253E518A8[23] < 0)
          sub_207CA40D8(&__p, *(void **)byte_253E518A8, *(unint64_t *)&byte_253E518A8[8]);
        else
          __p = *(std::string *)byte_253E518A8;
        sub_2082144D8(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E518C0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E518C0, &dword_207C77000);
        __cxa_guard_release(&qword_253E514E0);
      }
      if (byte_253E518D7 < 0)
      {
        sub_207CA40D8(v17, (void *)xmmword_253E518C0, *((unint64_t *)&xmmword_253E518C0 + 1));
      }
      else
      {
        *(_OWORD *)v17 = xmmword_253E518C0;
        v18 = unk_253E518D0;
      }
      sub_207F1EA4C((char *)v17, (std::string *)&qword_253E51878);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51878, &dword_207C77000);
      __cxa_guard_release(&qword_253E514C8);
      goto LABEL_13;
    }
    if (byte_253E518A7 >= 0)
      v6 = byte_253E518A7;
    else
      v6 = unk_253E51898;
    if (byte_253E518A7 >= 0)
      v7 = &qword_253E51890;
    else
      v7 = (uint64_t *)qword_253E51890;
    v8 = (char *)v7 + v6;
    if ((uint64_t)v6 >= 1)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = memchr(v10, 60, v9);
        if (!v11)
          break;
        if (*v11 == 60)
          goto LABEL_35;
        v10 = (uint64_t *)(v11 + 1);
        v9 = v8 - (_BYTE *)v10;
      }
      while (v8 - (_BYTE *)v10 > 0);
    }
    v11 = (char *)v7 + v6;
LABEL_35:
    v12 = v11 - (_BYTE *)v7;
    if (v11 == v8)
      v12 = -1;
    if (v6 >= v12)
      v6 = v12;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v13 = (char *)operator new(v14 + 1);
      *(_QWORD *)&byte_253E518A8[8] = v6;
      *(_QWORD *)&byte_253E518A8[16] = v15 | 0x8000000000000000;
      *(_QWORD *)byte_253E518A8 = v13;
    }
    else
    {
      v13 = byte_253E518A8;
      byte_253E518A8[23] = v6;
      if (!v6)
        goto LABEL_48;
    }
    memmove(v13, v7, v6);
LABEL_48:
    v13[v6] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E518A8, &dword_207C77000);
    __cxa_guard_release(&qword_253E514D8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_253E51877 < 0)
  {
    sub_207CA40D8(&xmmword_253E51848, (void *)xmmword_253E51860, *((unint64_t *)&xmmword_253E51860 + 1));
  }
  else
  {
    xmmword_253E51848 = xmmword_253E51860;
    unk_253E51858 = unk_253E51870;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51848, &dword_207C77000);
  __cxa_guard_release(&qword_253E514B8);
LABEL_2:
  if (byte_253E5185F >= 0)
    return &xmmword_253E51848;
  else
    return (__int128 *)xmmword_253E51848;
}

void sub_2080C8080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E514C8);
  __cxa_guard_abort(&qword_253E514C0);
  __cxa_guard_abort(&qword_253E514B8);
  _Unwind_Resume(a1);
}

void sub_2080C811C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E514B8);
  _Unwind_Resume(a1);
}

void sub_2080C8134()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 333, (uint64_t)"", 0, (uint64_t)"Access notification must only be done in debug.", 47, (void (*)(void **))sub_208216974);
  abort();
}

void sub_2080C8170(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t (**v78)();
  __int128 v79;

  if (a2)
  {
    v4 = *(_DWORD *)(a1 + 40);
    switch(v4)
    {
      case 2:
        v24 = *(uint64_t **)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v24;
        *((_QWORD *)&v76 + 1) = v25;
        if (v25)
        {
          v26 = (unint64_t *)(v25 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v29 = *v24;
          v28 = (std::__shared_weak_count *)v24[1];
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (v29)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 1:
        v33 = *(uint64_t **)(a1 + 24);
        v34 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v33;
        *((_QWORD *)&v76 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (v33)
        {
          v38 = *v33;
          v37 = (std::__shared_weak_count *)v33[1];
          if (v37)
          {
            v39 = (unint64_t *)&v37->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          if (v38)
            goto LABEL_55;
        }
        goto LABEL_56;
      case 0:
        v5 = *(uint64_t **)(a1 + 24);
        v6 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)&v76 = v5;
        *((_QWORD *)&v76 + 1) = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        if (v5)
        {
          v10 = *v5;
          v9 = (std::__shared_weak_count *)v5[1];
          if (v9)
          {
            v11 = (unint64_t *)&v9->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            do
              v13 = __ldaxr(v11);
            while (__stlxr(v13 - 1, v11));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          if (v10)
LABEL_55:
            sub_2081E3010(v76);
        }
LABEL_56:
        v42 = operator new(0x20uLL);
        v79 = v76;
        v78 = off_24C08D770;
        *v42 = off_24C086098;
        sub_2081DD728(v42 + 1, (uint64_t)&v78);
        if ((_QWORD)v79)
        {
          v44 = *(_QWORD *)v79;
          v43 = *(std::__shared_weak_count **)(v79 + 8);
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            do
              v47 = __ldaxr(v45);
            while (__stlxr(v47 - 1, v45));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if (!v44)
                goto LABEL_64;
              goto LABEL_63;
            }
          }
          if (v44)
LABEL_63:
            sub_2081E31E4(v79);
        }
LABEL_64:
        v78 = &off_24C08D790;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (!*((_QWORD *)&v79 + 1))
          goto LABEL_68;
        v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (v50)
        {
LABEL_68:
          *a3 = v42;
          return;
        }
        goto LABEL_69;
    }
LABEL_112:
    sub_207CA9F48();
  }
  v14 = *(_DWORD *)(a1 + 40);
  if (v14 == 2)
  {
    v51 = *(uint64_t **)(a1 + 24);
    v52 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v51;
    *((_QWORD *)&v77 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    if (!v51)
      goto LABEL_94;
    v56 = *v51;
    v55 = (std::__shared_weak_count *)v51[1];
    if (v55)
    {
      v57 = (unint64_t *)&v55->__shared_owners_;
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (!v56)
      goto LABEL_94;
LABEL_93:
    sub_2081E2F24(v77);
    goto LABEL_94;
  }
  if (v14 == 1)
  {
    v60 = *(uint64_t **)(a1 + 24);
    v61 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)&v77 = v60;
    *((_QWORD *)&v77 + 1) = v61;
    if (v61)
    {
      v62 = (unint64_t *)(v61 + 8);
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    if (!v60)
      goto LABEL_94;
    v65 = *v60;
    v64 = (std::__shared_weak_count *)v60[1];
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 - 1, v66));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (!v65)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v14)
    goto LABEL_112;
  v15 = *(uint64_t **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v77 = v15;
  *((_QWORD *)&v77 + 1) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (v15)
  {
    v20 = *v15;
    v19 = (std::__shared_weak_count *)v15[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v20)
      goto LABEL_93;
  }
LABEL_94:
  v42 = operator new(0x20uLL);
  v79 = v77;
  v78 = off_24C08D750;
  *v42 = off_24C086078;
  sub_2081DD30C(v42 + 1, (uint64_t)&v78);
  if ((_QWORD)v79)
  {
    v70 = *(_QWORD *)v79;
    v69 = *(std::__shared_weak_count **)(v79 + 8);
    if (v69)
    {
      v71 = (unint64_t *)&v69->__shared_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v70)
          goto LABEL_102;
        goto LABEL_101;
      }
    }
    if (v70)
LABEL_101:
      sub_2081E30F8(v79);
  }
LABEL_102:
  v78 = &off_24C08D790;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
LABEL_69:
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      *a3 = v42;
      return;
    }
  }
  *a3 = v42;
}

void sub_2080C8944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD418(&a12);
  operator delete(v12);
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C8968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD418(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C897C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  sub_2081DD834(&a12);
  operator delete(v12);
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

void sub_2080C89A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081DD834(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2080C89B4()
{
  return 65792;
}

_QWORD *sub_2080C89C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;

  v2 = a1 + 16;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
    return sub_2081DD728(a2, v2);
  if (v3 > 1)
    sub_207CA9F48();
  return sub_2081DD61C(a2, v2);
}

uint64_t sub_2080C8A00(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C085388;
  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C0863C0[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_2080C8A64(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v23)();
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(a2 + 40) >= 3u)
    goto LABEL_39;
  v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    v6 = *v4;
    v5 = (std::__shared_weak_count *)v4[1];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_9:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          v10 = *(_QWORD *)(a2 + 24);
          v11 = *(std::__shared_weak_count **)(a2 + 32);
          v26 = &off_24C08D790;
          v27 = v10;
          v28 = v11;
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            v24 = v10;
            v25 = v11;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
          }
          else
          {
            v24 = v10;
            v25 = 0;
          }
          v23 = &off_24C08D790;
          sub_2080C0CAC(a1, (uint64_t)&v23);
          v23 = &off_24C08D790;
          if (v11)
          {
            v18 = (unint64_t *)&v11->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v26 = &off_24C08D790;
          v20 = v28;
          if (v28)
          {
            v21 = (unint64_t *)&v28->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          return;
        }
LABEL_39:
        sub_207CA9F48();
      }
    }
    else
    {
LABEL_8:
      if (v6)
        goto LABEL_9;
    }
  }
  if (*(_DWORD *)(a2 + 52))
    v15 = *(_DWORD *)(a2 + 48) == 0;
  else
    v15 = 1;
  v16 = *(_QWORD *)(a2 + 48);
  if (v15)
    v16 = 0;
  v17 = 0x100000000;
  if (v16 > 0x100000000)
    v17 = v16;
  *a1 = 0;
  a1[1] = v16;
  a1[2] = ((_DWORD)v16 != 0) | (unint64_t)(v17 << 32);
  if (HIDWORD(v16) * (_DWORD)v17 == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
}

