void sub_207DDD980(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[5];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void **)a1[1];
    if (v3 >= 0x400)
    {
      operator delete(*v4);
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v2 = a1[5];
      v3 = a1[4] - 1024;
      a1[4] = v3;
    }
    v5 = (void **)a1[2];
    if (v5 == v4)
      v6 = 0;
    else
      v6 = (((char *)v5 - (char *)v4) << 7) - 1;
    if (v6 - (v3 + v2) >= 0x400)
    {
      operator delete(*(v5 - 1));
      a1[2] -= 8;
    }
    sub_207DDDA50((uint64_t)a1);
  }
  else
  {
    v7 = a1[2];
    if (v7 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v7 - 8));
        v8 = a1[1];
        v7 = a1[2] - 8;
        a1[2] = v7;
      }
      while (v7 != v8);
    }
    a1[4] = 0;
    sub_207DDDA50((uint64_t)a1);
  }
}

void sub_207DDDA50(uint64_t a1)
{
  char *v1;
  void *v2;
  char *v3;
  int64_t v4;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;

  v1 = *(char **)(a1 + 16);
  v2 = *(void **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = v1 - v3;
  v5 = (v1 - v3) >> 3;
  if (v5 < (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 3)
  {
    if (v1 == v3)
    {
      v7 = 0;
      v8 = 8 * v5;
    }
    else
    {
      if (v4 < 0)
        sub_207CA3AB8();
      v7 = operator new(v1 - v3);
      v8 = (uint64_t)&v7[v5];
      if ((unint64_t)(v4 - 8) < 0x18)
      {
        v9 = v7;
      }
      else
      {
        v9 = v7;
        if ((unint64_t)((char *)v7 - v3) >= 0x20)
        {
          v10 = 0;
          v11 = ((unint64_t)(v4 - 8) >> 3) + 1;
          v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          v9 = &v7[v12];
          v13 = &v3[v12 * 8];
          v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v15 = &v7[v10];
            v16 = *(_OWORD *)&v3[v10 * 8 + 16];
            *v15 = *(_OWORD *)&v3[v10 * 8];
            v15[1] = v16;
            v10 += 4;
            v14 -= 4;
          }
          while (v14);
          v3 = v13;
          if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_13;
        }
      }
      do
      {
        v17 = *(_QWORD *)v3;
        v3 += 8;
        *v9++ = v17;
      }
      while (v9 != (_QWORD *)v8);
    }
LABEL_13:
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v8;
    if (v2)
      operator delete(v2);
  }
}

_QWORD *sub_207DDDB70(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    if (v3 < 0)
      sub_207D159B0();
    v5 = ((unint64_t)(v3 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    *a1 = v6;
    a1[1] = 0;
    a1[2] = v5;
    v7 = *(_QWORD **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    a1[1] = v8;
    v9 = (v8 - 1) >> 6;
    if (v8 < 0x41)
      v9 = 0;
    v6[v9] = 0;
    v10 = v8 & 0x3F;
    if (v8 > 0x3F || (v8 & 0x3F) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = &v7[v8 >> 6];
      do
      {
        v15 = 1 << v11;
        if (((*v7 >> v13) & 1) != 0)
          v16 = *v6 | v15;
        else
          v16 = *v6 & ~v15;
        *v6 = v16;
        ++v13;
        v7 += v12 == 63;
        if (v12 == 63)
          v13 = 0;
        v6 += v11 == 63;
        if (v11 == 63)
          v11 = 0;
        else
          ++v11;
        v12 = v13;
      }
      while (v7 != v14 || v10 != v13);
    }
  }
  return a1;
}

void sub_207DDDC78(uint64_t *a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X3>, int a4@<W4>, uint64_t *a5@<X5>, uint64_t **a6@<X8>)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;

  v9 = a2;
  v10 = a1;
  LODWORD(v11) = a2;
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    v21 = a6;
    do
    {
      v12 = *v10;
      v13 = a5[1];
      v14 = a5[2];
      if (v13 == v14 << 6)
      {
        if ((uint64_t)(v13 + 1) < 0)
          sub_207D159B0();
        v15 = v14 << 7;
        if (v15 <= (v13 & 0xFFFFFFFFFFFFFFC0) + 64)
          v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v13 <= 0x3FFFFFFFFFFFFFFELL)
          v16 = v15;
        else
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        sub_207D1C104((uint64_t)a5, v16);
        v13 = a5[1];
      }
      a5[1] = v13 + 1;
      v17 = *a5;
      v18 = v13 >> 6;
      v19 = 1 << v13;
      if ((v12 & (1 << v9)) != 0)
        v20 = *(_QWORD *)(v17 + 8 * v18) | v19;
      else
        v20 = *(_QWORD *)(v17 + 8 * v18) & ~v19;
      *(_QWORD *)(v17 + 8 * v18) = v20;
      v10 += (_DWORD)v11 == 63;
      if ((_DWORD)v11 == 63)
        v11 = 0;
      else
        v11 = (v9 + 1);
      v9 = v11 | v9 & 0xFFFFFFFF00000000;
    }
    while (v10 != a3 || (_DWORD)v11 != a4);
    v10 = a3;
    a6 = v21;
  }
  *a6 = v10;
  a6[1] = (uint64_t *)v9;
  a6[2] = a5;
}

uint64_t *sub_207DDDDAC(uint64_t *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  v9 = *(char **)v4;
  v10 = (uint64_t)&v6[-*(_QWORD *)v4];
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + 1;
  if (v12 >> 62)
    sub_207CA420C();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 62)
      sub_207CA3AB8();
    v15 = operator new(4 * v14);
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = v6 - v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_DWORD *)(4 * v11);
  v17 = 0;
  *(_DWORD *)(4 * v11) = a2;
  v8 = 4 * v11 + 4;
  v18 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v6 - v15 - v10) < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[-v21];
    v16 = (_DWORD *)((char *)v16 - v21);
    v22 = &v15[4 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v26 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v16 = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(_QWORD *)v4 = v16;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v4 + 16) = v17;
  if (v9)
    operator delete(v9);
LABEL_22:
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_207DDDF2C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_2081FB134((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C075098[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207DDE15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207DDE184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

double sub_207DDE19C@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  char *v3;
  double result;

  if (a1 == 2)
  {
    v3 = (char *)operator new(0x20uLL);
    *(_QWORD *)a2 = v3;
    *(_OWORD *)(a2 + 8) = xmmword_20822CA00;
    strcpy(v3, "Not enough centroid pixels");
    return *(double *)" centroid pixels";
  }
  else if (a1 == 1)
  {
    *(_BYTE *)(a2 + 23) = 19;
    result = *(double *)"Segmentation failed";
    strcpy((char *)a2, "Segmentation failed");
  }
  else if (a1)
  {
    *(_BYTE *)(a2 + 23) = 13;
    strcpy((char *)a2, "Unknown error");
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 8;
    strcpy((char *)a2, "No error");
  }
  return result;
}

void sub_207DDE290(std::error_category *a1)
{
  void *v1;

  std::error_category::~error_category(a1);
  operator delete(v1);
}

const char *sub_207DDE2A4()
{
  return "App Clip Code Decoder Error Category";
}

void sub_207DDE2B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  void **v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  float *v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  float v42;
  float v43;
  float v45;
  float v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *(_DWORD **)a1;
  sub_207DE0630(a2);
  v5 = *(void ***)(a2 + 8);
  v6 = *(void ***)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  (*(_DWORD **)((char *)v5 + (((v8 + v7) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v8 + v7) & 0x3FF] = *v4;
  v9 = v8 + 1;
  *(_QWORD *)(a2 + 40) = v9;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = v10 - *(_QWORD *)a1;
  if (v11 != 4)
  {
    v12 = 0;
    v13 = (v11 >> 2) - 1;
    do
    {
      v14 = *(_QWORD *)a1 + 4 * v12;
      v16 = *(float *)v14;
      v15 = *(float *)(v14 + 4);
      if ((float)(v15 - *(float *)v14) >= 3.0)
      {
        if (v6 == v5)
          v17 = 0;
        else
          v17 = (((char *)v6 - (char *)v5) << 7) - 1;
        v18 = v7 + v9;
        if (v17 == v7 + v9)
        {
          sub_207DE0630(a2);
          v5 = *(void ***)(a2 + 8);
          v6 = *(void ***)(a2 + 16);
          v7 = *(_QWORD *)(a2 + 32);
          v9 = *(_QWORD *)(a2 + 40);
          v18 = v7 + v9;
        }
        v19 = (((char *)v6 - (char *)v5) << 7) - 1;
        (*(float **)((char *)v5 + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)))[v18 & 0x3FF] = v16;
        v20 = v9 + 1;
        *(_QWORD *)(a2 + 40) = v20;
        if (v6 == v5)
          v19 = 0;
        v21 = v20 + v7;
        if (v19 == v20 + v7)
        {
          sub_207DE0630(a2);
          v5 = *(void ***)(a2 + 8);
          v6 = *(void ***)(a2 + 16);
          v7 = *(_QWORD *)(a2 + 32);
          v20 = *(_QWORD *)(a2 + 40);
          v21 = v7 + v20;
        }
        (*(float **)((char *)v5 + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)))[v21 & 0x3FF] = v15;
        v9 = v20 + 1;
        *(_QWORD *)(a2 + 40) = v9;
      }
      ++v12;
    }
    while (v13 != v12);
    v10 = *(_QWORD *)(a1 + 8);
  }
  if (v6 == v5)
    v22 = 0;
  else
    v22 = (((char *)v6 - (char *)v5) << 7) - 1;
  v23 = v7 + v9;
  if (v22 == v7 + v9)
  {
    sub_207DE0630(a2);
    v5 = *(void ***)(a2 + 8);
    v6 = *(void ***)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    v23 = v7 + v9;
  }
  (*(_DWORD **)((char *)v5 + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)))[v23 & 0x3FF] = *(_DWORD *)(v10 - 4);
  v24 = v9 + 1;
  *(_QWORD *)(a2 + 40) = v9 + 1;
  if ((unint64_t)(v9 + 1) <= 6)
  {
    v25 = v9 + 355;
    do
    {
      if (v6 == v5)
        v26 = 0;
      else
        v26 = (((char *)v6 - (char *)v5) << 7) - 1;
      v27 = v7 + v24;
      if (v26 == v7 + v24)
      {
        sub_207DE0630(a2);
        v5 = *(void ***)(a2 + 8);
        v6 = *(void ***)(a2 + 16);
        v7 = *(_QWORD *)(a2 + 32);
        v24 = *(_QWORD *)(a2 + 40);
        v27 = v7 + v24;
      }
      (*(float **)((char *)v5 + ((v27 >> 7) & 0x1FFFFFFFFFFFFF8)))[v27 & 0x3FF] = (float)v25;
      *(_QWORD *)(a2 + 40) = ++v24;
      ++v25;
    }
    while (v25 != 361);
    v28 = (char *)&v5[v7 >> 10];
    v29 = v7 & 0x3FF;
    v30 = (float *)(*(_QWORD *)v28 + 4 * v29);
    v31 = v24 + v7;
    v32 = (char *)&v5[v31 >> 10];
    v33 = *(_QWORD *)v32 + 4 * (v31 & 0x3FF);
    if ((float *)v33 == v30 || (v34 = (v31 & 0x3FF) + ((v32 - v28) << 7), v34 == v29))
      v35 = 0;
    else
      v35 = 63 - __clz(v34 - v29);
    sub_207DDE748((unint64_t)v28, v30, v32, v33, 2 * v35, 1);
    v7 = *(_QWORD *)(a2 + 32);
    v5 = *(void ***)(a2 + 8);
  }
  v36 = v7 + 1;
  v37 = (*(float **)((char *)v5 + (((v7 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 + 1) & 0x3FF];
  v38 = vabds_f32((*(float **)((char *)v5 + (((v7 + 2) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 + 2) & 0x3FF], v37);
  v39 = vabds_f32((*(float **)((char *)v5 + (((v7 + 4) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 + 4) & 0x3FF], (*(float **)((char *)v5 + (((v7 + 3) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 + 3) & 0x3FF]);
  v40 = v38 < v39;
  if (v38 != v39)
  {
    v41 = vabds_f32((*(float **)((char *)v5 + (((v7 + 6) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 + 6) & 0x3FF], (*(float **)((char *)v5 + (((v7 + 5) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 + 5) & 0x3FF]);
    v42 = v38 - v39;
    v43 = v39 - v38;
    if (!v40)
      v43 = v42;
    if (v43 > 0.005 && v38 != v41)
    {
      v45 = v38 >= v41 ? v38 - v41 : v41 - v38;
      if (v45 > 0.005)
      {
        v46 = (*(float **)((char *)v5 + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)))[v7 & 0x3FF];
        v47 = *(_QWORD *)(a2 + 40) - 1;
        v48 = v47 + v7;
        v49 = *(uint64_t *)((char *)v5 + (((v47 + v7) >> 7) & 0x1FFFFFFFFFFFFF8));
        v50 = v48 & 0x3FF;
        if ((float)(v46 + vabds_f32(360.0, *(float *)(v49 + 4 * v50))) < 3.0)
        {
          *(float *)(v49 + 4 * v50) = v37 + 360.0;
          *(_QWORD *)(a2 + 32) = v36;
          *(_QWORD *)(a2 + 40) = v47;
          if (v36 >= 0x800)
          {
            operator delete(*v5);
            v5 = (void **)(*(_QWORD *)(a2 + 8) + 8);
            *(_QWORD *)(a2 + 8) = v5;
            v47 = *(_QWORD *)(a2 + 40);
            v36 = *(_QWORD *)(a2 + 32) - 1024;
            *(_QWORD *)(a2 + 32) = v36;
          }
          v51 = v36 + 1;
          *(_QWORD *)(a2 + 32) = v51;
          *(_QWORD *)(a2 + 40) = v47 - 1;
          if (v51 >= 0x800)
          {
            operator delete(*v5);
            *(_QWORD *)(a2 + 8) += 8;
            *(_QWORD *)(a2 + 32) -= 1024;
          }
        }
      }
    }
  }
}

void sub_207DDE70C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207DDA328(v1);
  _Unwind_Resume(a1);
}

void sub_207DDE720(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207DDA328(v1);
  _Unwind_Resume(a1);
}

void sub_207DDE734(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207DDA328(v1);
  _Unwind_Resume(a1);
}

void sub_207DDE748(unint64_t a1, float *a2, char *a3, unint64_t a4, uint64_t a5, char a6)
{
  unint64_t v8;
  float *v10;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  float *v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unint64_t v43;
  float *v44;
  float v45;
  float *v46;
  uint64_t v47;
  char *v48;
  float *v49;
  float v50;
  float *v51;
  float v52;
  float *v53;
  _BOOL4 v55;
  float *v56;
  float v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  float *v63;
  unint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  float *v68;
  float *v69;
  float *v70;
  uint64_t v71;
  unint64_t v72;
  float *v73;
  float *v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float *v79;
  float *v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  unint64_t v87;
  float *v88;
  float v89;
  float *v90;
  float *v91;
  char *v92;
  float *v93;
  float v94;
  float *v95;
  float v96;
  float *v97;
  float v98;
  float *v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  float v103;
  float v104;
  float *v105;
  float *v106;
  unint64_t v107;
  _QWORD *v108;
  float *v109;
  unint64_t v110;
  float *i;
  float *v112;
  float *v113;
  float **v114;
  float *v115;
  float v116;
  float v117;
  float *v118;
  uint64_t v119;
  int64_t v120;
  int64_t v121;
  BOOL v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  float *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  float *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  float v137;
  float v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float *v147;
  float **v148;
  float *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  float *v155;
  float *v156;
  float *v157;
  float *v158;
  float *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  float *v163;
  float v164;
  float v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  float *v169;
  float v170;
  float v171;
  float v172;
  float *v173;
  float v174;
  float v175;
  float v176;
  _QWORD *v177;
  float *v178;
  unint64_t v179;
  _QWORD *v180;
  float *v181;
  uint64_t v182;
  int v183;
  int v184;
  __int16 v185;
  float **v186;
  float v187;
  float v188;
  float v189;
  int v190;
  float *v191;
  float *v192;
  uint64_t v193;
  __int16 v194;
  float **v195;
  unint64_t v196;
  float *v197;
  float *v198;
  float v199;
  float v200;
  float *v201;
  float *v202;
  float *v203;
  float *v204;
  unint64_t v205;

  if ((float *)a4 == a2)
    return;
  v8 = a4;
  v10 = a2;
  while (2)
  {
    v12 = *(float **)a3;
    v13 = v8 - *(_QWORD *)a3;
    v14 = v13 >> 2;
    v15 = *(float **)a1;
    v16 = (uint64_t)v10 - *(_QWORD *)a1;
    v17 = v16 >> 2;
    v18 = (v13 >> 2) + ((_QWORD)&a3[-a1] << 7) - (v16 >> 2);
    switch(v18)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((float *)v8 == v12)
          v8 = *((_QWORD *)a3 - 1) + 4096;
        v103 = *(float *)(v8 - 4);
        v104 = *v10;
        if (v103 < *v10)
        {
          *v10 = v103;
          *(float *)(v8 - 4) = v104;
        }
        return;
      case 3:
        if (v16 < -3)
        {
          v105 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10))
                         + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
          if ((float *)v8 != v12)
            goto LABEL_293;
        }
        else
        {
          v105 = (float *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((v17 + 1) & 0x3FF));
          if ((float *)v8 != v12)
            goto LABEL_293;
        }
        v8 = *((_QWORD *)a3 - 1) + 4096;
LABEL_293:
        v170 = *v105;
        v171 = *v10;
        v172 = *(float *)(v8 - 4);
        if (*v105 >= *v10)
        {
          if (v172 < v170)
          {
            *v105 = v172;
            *(float *)(v8 - 4) = v170;
            v183 = *(_DWORD *)v10;
            if (*v105 < *v10)
            {
              *v10 = *v105;
              *(_DWORD *)v105 = v183;
            }
          }
        }
        else if (v172 >= v170)
        {
          *v10 = v170;
          *v105 = v171;
          v187 = *(float *)(v8 - 4);
          if (v187 < v171)
          {
            *v105 = v187;
            *(float *)(v8 - 4) = v171;
          }
        }
        else
        {
          *v10 = v172;
          *(float *)(v8 - 4) = v171;
        }
        return;
      case 4:
        if (v16 >= -3)
        {
          v106 = (float *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((v17 + 1) & 0x3FF));
          v107 = v17 + 2;
          goto LABEL_298;
        }
        v106 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10))
                       + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFF9)
        {
          v107 = 1;
LABEL_298:
          v173 = (float *)(*(_QWORD *)(a1 + ((v107 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v107 & 0x3FF));
          if ((float *)v8 != v12)
            goto LABEL_300;
          goto LABEL_299;
        }
        v173 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v17) >> 10))
                       + 4 * (~(1021 - (_WORD)v17) & 0x3FF));
        if ((float *)v8 == v12)
LABEL_299:
          v8 = *((_QWORD *)a3 - 1) + 4096;
LABEL_300:
        v174 = *v106;
        v175 = *v10;
        v176 = *v173;
        if (*v106 >= *v10)
        {
          if (v176 >= v174)
          {
            v174 = *v173;
          }
          else
          {
            *v106 = v176;
            *v173 = v174;
            v184 = *(_DWORD *)v10;
            if (*v106 < *v10)
            {
              *v10 = *v106;
              *(_DWORD *)v106 = v184;
              v174 = *v173;
            }
          }
        }
        else
        {
          if (v176 >= v174)
          {
            *v10 = v174;
            *v106 = v175;
            v174 = *v173;
            if (*v173 >= v175)
              goto LABEL_327;
            *v106 = v174;
          }
          else
          {
            *v10 = v176;
          }
          *v173 = v175;
          v174 = v175;
        }
LABEL_327:
        v188 = *(float *)(v8 - 4);
        if (v188 < v174)
        {
          *v173 = v188;
          *(float *)(v8 - 4) = v174;
          v189 = *v106;
          if (*v173 < *v106)
          {
            *v106 = *v173;
            *v173 = v189;
            v190 = *(_DWORD *)v10;
            if (*v106 < *v10)
            {
              *v10 = *v106;
              *(_DWORD *)v106 = v190;
            }
          }
        }
        return;
      case 5:
        if (v16 >= -3)
        {
          v108 = (_QWORD *)(a1 + 8 * ((unint64_t)(v17 + 1) >> 10));
          v109 = (float *)(*v108 + 4 * ((v17 + 1) & 0x3FF));
          v110 = v17 + 2;
LABEL_305:
          v177 = (_QWORD *)(a1 + 8 * (v110 >> 10));
          v178 = (float *)(*v177 + 4 * (v110 & 0x3FF));
          v179 = v17 + 3;
          goto LABEL_306;
        }
        v108 = (_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10));
        v109 = (float *)(*v108 + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFF9)
        {
          v110 = 1;
          goto LABEL_305;
        }
        v177 = (_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v17) >> 10));
        v178 = (float *)(*v177 + 4 * (~(1021 - (_WORD)v17) & 0x3FF));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFF5)
        {
          v179 = 1;
LABEL_306:
          v180 = (_QWORD *)(a1 + 8 * (v179 >> 10));
          v181 = (float *)(*v180 + 4 * (v179 & 0x3FF));
          if ((float *)v8 != v12)
            goto LABEL_308;
          goto LABEL_307;
        }
        v205 = 1020 - v17;
        v180 = (_QWORD *)(a1 - 8 * (v205 >> 10));
        v181 = (float *)(*v180 + 4 * (~(_WORD)v205 & 0x3FF));
        if ((float *)v8 == v12)
        {
LABEL_307:
          v182 = *((_QWORD *)a3 - 1);
          a3 -= 8;
          v8 = v182 + 4096;
        }
LABEL_308:
        sub_207DE04F0(a1, v10, (uint64_t)v108, v109, (uint64_t)v177, v178, (uint64_t)v180, v181, (uint64_t)a3, (float *)(v8 - 4));
        return;
      default:
        if (v18 <= 23)
        {
          if ((a6 & 1) != 0)
          {
            for (i = v10 + 1; ; ++i)
            {
              if ((char *)i - (char *)v15 == 4096)
              {
                v113 = *(float **)(a1 + 8);
                a1 += 8;
                v15 = v113;
                i = v113;
              }
              if (i == (float *)v8)
                return;
              v114 = (float **)a1;
              if (i == v15)
              {
                v114 = (float **)(a1 - 8);
                v115 = (float *)(*(_QWORD *)(a1 - 8) + 4092);
                v116 = *v115;
                v117 = *i;
                if (*i >= *v115)
                  continue;
              }
              else
              {
                v115 = i - 1;
                v116 = *(i - 1);
                v117 = *i;
                if (*i >= v116)
                  continue;
              }
              v118 = i;
              while (1)
              {
                *v118 = v116;
                if (v115 == v10)
                  break;
                v112 = v115;
                if (v115 == *v114)
                {
                  v119 = (uint64_t)*--v114;
                  v115 = (float *)(v119 + 4092);
                  v116 = *(float *)(v119 + 4092);
                  v118 = v112;
                  if (v117 >= v116)
                    goto LABEL_196;
                }
                else
                {
                  --v115;
                  v116 = *(v112 - 1);
                  v118 = v112;
                  if (v117 >= v116)
                    goto LABEL_196;
                }
              }
              v112 = v10;
LABEL_196:
              *v112 = v117;
            }
          }
          if (v16 < -3)
          {
            v185 = ~(1022 - v17);
            v186 = (float **)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10));
          }
          else
          {
            v185 = v17 + 1;
            v186 = (float **)(a1 + 8 * ((unint64_t)(v17 + 1) >> 10));
          }
          v191 = *v186;
          v192 = &(*v186)[v185 & 0x3FF];
          if (v192 == (float *)v8)
            return;
          while (1)
          {
            v193 = v192 - v191;
            if ((char *)v192 - (char *)v191 < 5)
            {
              v196 = 1024 - v193;
              v194 = ~(_WORD)v196;
              v195 = &v186[-(v196 >> 10)];
            }
            else
            {
              v194 = v193 - 1;
              v195 = &v186[(unint64_t)(v193 - 1) >> 10];
            }
            v197 = *v195;
            v198 = &(*v195)[v194 & 0x3FF];
            v199 = *v192;
            v200 = *v198;
            if (*v192 >= *v198)
            {
              if ((char *)++v192 - (char *)v191 == 4096)
                goto LABEL_346;
            }
            else
            {
              v201 = v192;
              do
              {
                while (1)
                {
                  v203 = v198;
                  *v201 = v200;
                  if (v198 != v197)
                    break;
                  v202 = *--v195;
                  v197 = v202;
                  v198 = v202 + 1023;
                  v200 = v202[1023];
                  v201 = v203;
                  if (v199 >= v200)
                    goto LABEL_343;
                }
                --v198;
                v200 = *(v203 - 1);
                v201 = v203;
              }
              while (v199 < v200);
LABEL_343:
              *v203 = v199;
              if ((char *)++v192 - (char *)v191 == 4096)
              {
LABEL_346:
                v204 = v186[1];
                ++v186;
                v191 = v204;
                v192 = v204;
              }
            }
            if (v192 == (float *)v8)
              return;
          }
        }
        if (!a5)
        {
          if (v10 == (float *)v8)
            return;
          v120 = (unint64_t)(v18 - 2) >> 1;
          v121 = v120;
          while (v121)
          {
            v123 = v121 + v17;
            if (v121 + v17 < 1)
            {
              v134 = 1023 - v123;
              v124 = (uint64_t *)(a1 - 8 * (v134 >> 10));
              v125 = *v124;
              v126 = (float *)(*v124 + 4 * (~(_DWORD)v134 & 0x3FFLL));
              if (v126 == v10)
                break;
            }
            else
            {
              v124 = (uint64_t *)(a1 + 8 * (v123 >> 10));
              v125 = *v124;
              v126 = (float *)(*v124 + 4 * (v123 & 0x3FF));
              if (v126 == v10)
                break;
            }
            v127 = (((_QWORD)v124 - a1) << 7) - v17 + (((uint64_t)v126 - v125) >> 2);
            if (v120 >= v127)
            {
              v128 = (2 * v127) | 1;
              v129 = v128 + v17;
              if (v128 + v17 >= 1)
                goto LABEL_220;
LABEL_224:
              v135 = 1023 - v129;
              v130 = (uint64_t *)(a1 - 8 * (v135 >> 10));
              v131 = *v130;
              v132 = (float *)(*v130 + 4 * (~(_DWORD)v135 & 0x3FFLL));
              v133 = 2 * v127 + 2;
              if (v133 < v18)
                goto LABEL_225;
LABEL_227:
              v133 = v128;
              goto LABEL_228;
            }
LABEL_214:
            v122 = v121-- <= 0;
            if (v122)
            {
              while (1)
              {
                v145 = 0;
                v146 = *v10;
                v147 = v10;
                v148 = (float **)a1;
                do
                {
                  v149 = v147;
                  if (v145 == -1)
                  {
                    v150 = -1;
                    v145 = 0;
                    if (v18 <= 0)
                      goto LABEL_249;
                  }
                  else
                  {
                    v151 = v145 + 1 + v147 - *v148;
                    if (v151 < 1)
                    {
                      v152 = 1023 - v151;
                      v148 -= v152 >> 10;
                      v147 = &(*v148)[~(_WORD)v152 & 0x3FF];
                      v150 = (2 * v145) | 1;
                      v145 = 2 * v145 + 2;
                      if (v145 >= v18)
                        goto LABEL_249;
                    }
                    else
                    {
                      v148 += (unint64_t)v151 >> 10;
                      v147 = &(*v148)[v151 & 0x3FF];
                      v150 = (2 * v145) | 1;
                      v145 = 2 * v145 + 2;
                      if (v145 >= v18)
                        goto LABEL_249;
                    }
                  }
                  v153 = (char *)v147 - (char *)*v148;
                  v154 = v153 >> 2;
                  if (v153 < -3)
                  {
                    if (*v147 >= v148[-((unint64_t)(1022 - v154) >> 10)][~(1022 - (_WORD)v154) & 0x3FF])
                    {
LABEL_249:
                      v145 = v150;
                      goto LABEL_250;
                    }
                  }
                  else if (*v147 >= (*(float **)((char *)v148
                                                + (((unint64_t)(v154 + 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v154 + 1) & 0x3FF])
                  {
                    goto LABEL_249;
                  }
                  if ((char *)++v147 - (char *)*v148 == 4096)
                  {
                    v155 = v148[1];
                    ++v148;
                    v147 = v155;
                  }
LABEL_250:
                  *v149 = *v147;
                }
                while (v145 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
                if (v12 == (float *)v8)
                {
                  v156 = (float *)(*((_QWORD *)a3 - 1) + 4092);
                  if (v147 == v156)
                    goto LABEL_286;
                }
                else
                {
                  v156 = (float *)(v8 - 4);
                  if (v147 == (float *)(v8 - 4))
                    goto LABEL_286;
                }
                *v147 = *v156;
                v157 = v147 + 1;
                v158 = *v148;
                if ((char *)v157 - (char *)*v148 == 4096)
                {
                  v159 = v148[1];
                  ++v148;
                  v158 = v159;
                  v157 = v159;
                }
                *v156 = v146;
                if (v157 == v10)
                  goto LABEL_287;
                v160 = v157 - v158 - v17 + (((_QWORD)v148 - a1) << 7);
                v161 = v160 - 2;
                if (v160 < 2)
                  goto LABEL_287;
                v162 = v161 >> 1;
                v163 = v10;
                if (v161 < 2)
                {
                  if (v158 != v157)
                    goto LABEL_274;
LABEL_278:
                  v147 = *(v148 - 1) + 1023;
                  v146 = *v147;
                  v165 = *v163;
                  if (*v163 >= *v147)
                    goto LABEL_287;
                  do
                  {
LABEL_282:
                    *v147 = v165;
                    v147 = v163;
                    if (!v162)
                      break;
                    v167 = (v162 - 1) >> 1;
                    v163 = v10;
                    if (v162 >= 3)
                    {
                      v168 = v167 + v17;
                      if ((uint64_t)(v167 + v17) >= 1)
                        v163 = (float *)(*(_QWORD *)(a1 + ((v168 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v168 & 0x3FF));
                      else
                        v163 = (float *)(*(_QWORD *)(a1 - 8 * ((1023 - v168) >> 10))
                                       + 4 * (~(1023 - (_WORD)v168) & 0x3FF));
                    }
                    v165 = *v163;
                    v162 = v167;
                  }
                  while (*v163 < v146);
LABEL_286:
                  *v147 = v146;
                  goto LABEL_287;
                }
                v166 = v162 + v17;
                if ((uint64_t)(v162 + v17) < 1)
                {
                  v163 = (float *)(*(_QWORD *)(a1 - 8 * ((1023 - v166) >> 10)) + 4 * (~(1023 - (_WORD)v166) & 0x3FF));
                  if (v158 == v157)
                    goto LABEL_278;
                }
                else
                {
                  v163 = (float *)(*(_QWORD *)(a1 + ((v166 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v166 & 0x3FF));
                  if (v158 == v157)
                    goto LABEL_278;
                }
LABEL_274:
                v164 = *(v157 - 1);
                v147 = v157 - 1;
                v146 = v164;
                v165 = *v163;
                if (*v163 < v164)
                  goto LABEL_282;
LABEL_287:
                if (v12 == (float *)v8)
                {
                  v169 = (float *)*((_QWORD *)a3 - 1);
                  a3 -= 8;
                  v12 = v169;
                  v8 = (unint64_t)(v169 + 1024);
                }
                v8 -= 4;
                v122 = v18-- <= 2;
                if (v122)
                  return;
              }
            }
          }
          v127 = 0;
          v126 = v10;
          v128 = 1;
          v129 = v17 + 1;
          if (v17 + 1 < 1)
            goto LABEL_224;
LABEL_220:
          v130 = (uint64_t *)(a1 + 8 * (v129 >> 10));
          v131 = *v130;
          v132 = (float *)(*v130 + 4 * (v129 & 0x3FF));
          v133 = 2 * v127 + 2;
          if (v133 >= v18)
            goto LABEL_227;
LABEL_225:
          v136 = ((uint64_t)v132 - v131) >> 2;
          if ((uint64_t)v132 - v131 < -3)
          {
            if (*v132 >= *(float *)(v130[-((unint64_t)(1022 - v136) >> 10)]
                                   + 4 * (~(1022 - (_WORD)v136) & 0x3FF)))
              goto LABEL_227;
          }
          else if (*v132 >= *(float *)(*(uint64_t *)((char *)v130
                                                   + (((unint64_t)(v136 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * ((v136 + 1) & 0x3FF)))
          {
            goto LABEL_227;
          }
          if ((float *)((char *)++v132 - v131) == (float *)4096)
            v132 = (float *)v130[1];
LABEL_228:
          v137 = *v132;
          v138 = *v126;
          if (*v132 < *v126)
            goto LABEL_214;
          while (1)
          {
            *v126 = v137;
            v126 = v132;
            if (v120 < v133)
            {
LABEL_213:
              *v126 = v138;
              goto LABEL_214;
            }
            v139 = (2 * v133) | 1;
            v140 = v139 + v17;
            if (v139 + v17 < 1)
            {
              v143 = 1023 - v140;
              v141 = (uint64_t *)(a1 - 8 * (v143 >> 10));
              v142 = *v141;
              v132 = (float *)(*v141 + 4 * (~(_DWORD)v143 & 0x3FFLL));
              v133 = 2 * v133 + 2;
              if (v133 >= v18)
                goto LABEL_230;
            }
            else
            {
              v141 = (uint64_t *)(a1 + 8 * (v140 >> 10));
              v142 = *v141;
              v132 = (float *)(*v141 + 4 * (v140 & 0x3FF));
              v133 = 2 * v133 + 2;
              if (v133 >= v18)
                goto LABEL_230;
            }
            v144 = ((uint64_t)v132 - v142) >> 2;
            if ((uint64_t)v132 - v142 < -3)
            {
              if (*v132 < *(float *)(v141[-((unint64_t)(1022 - v144) >> 10)]
                                    + 4 * (~(1022 - (_WORD)v144) & 0x3FF)))
              {
LABEL_241:
                if ((float *)((char *)++v132 - v142) == (float *)4096)
                  v132 = (float *)v141[1];
                goto LABEL_231;
              }
            }
            else if (*v132 < *(float *)(*(uint64_t *)((char *)v141
                                                    + (((unint64_t)(v144 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                       + 4 * ((v144 + 1) & 0x3FF)))
            {
              goto LABEL_241;
            }
LABEL_230:
            v133 = v139;
LABEL_231:
            v137 = *v132;
            if (*v132 < v138)
              goto LABEL_213;
          }
        }
        v19 = (unint64_t)v18 >> 1;
        v20 = ((unint64_t)v18 >> 1) + v17;
        if ((unint64_t)v18 < 0x81)
        {
          if (v20 < 1)
          {
            v27 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v20) >> 10))
                          + 4 * (~(1023 - (_WORD)v20) & 0x3FF));
            if (v13 >= 5)
            {
LABEL_17:
              v28 = (float *)(*(_QWORD *)&a3[((unint64_t)(v14 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                            + 4 * ((v14 - 1) & 0x3FF));
              v29 = *v10;
              v30 = *v27;
              v31 = *v28;
              if (*v10 >= *v27)
              {
LABEL_18:
                if (v31 < v29)
                {
                  *v10 = v31;
                  *v28 = v29;
                  v32 = *v27;
                  if (*v10 < *v27)
                  {
                    *v27 = *v10;
                    *v10 = v32;
                    --a5;
                    if ((a6 & 1) == 0)
                      goto LABEL_139;
LABEL_49:
                    v42 = *v10;
                    goto LABEL_50;
                  }
                }
                goto LABEL_48;
              }
LABEL_28:
              if (v31 >= v29)
              {
                *v27 = v29;
                *v10 = v30;
                if (*v28 >= v30)
                  goto LABEL_48;
                *v10 = *v28;
              }
              else
              {
                *v27 = v31;
              }
              *v28 = v30;
LABEL_48:
              --a5;
              if ((a6 & 1) == 0)
                goto LABEL_139;
              goto LABEL_49;
            }
          }
          else
          {
            v27 = (float *)(*(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
            if (v13 >= 5)
              goto LABEL_17;
          }
          v28 = (float *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v14) >> 10)]
                        + 4 * (~(1024 - (_WORD)v14) & 0x3FF));
          v29 = *v10;
          v30 = *v27;
          v31 = *v28;
          if (*v10 >= *v27)
            goto LABEL_18;
          goto LABEL_28;
        }
        if (v20 >= 1)
        {
          v21 = (float *)(*(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
          if (v13 >= 5)
            goto LABEL_11;
LABEL_23:
          v22 = (float *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v14) >> 10)]
                        + 4 * (~(1024 - (_WORD)v14) & 0x3FF));
          v23 = *v21;
          v24 = *v10;
          v25 = *v22;
          if (*v21 >= *v10)
            goto LABEL_12;
          goto LABEL_24;
        }
        v21 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v20) >> 10))
                      + 4 * (~(1023 - (_WORD)v20) & 0x3FF));
        if (v13 < 5)
          goto LABEL_23;
LABEL_11:
        v22 = (float *)(*(_QWORD *)&a3[((unint64_t)(v14 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                      + 4 * ((v14 - 1) & 0x3FF));
        v23 = *v21;
        v24 = *v10;
        v25 = *v22;
        if (*v21 >= *v10)
        {
LABEL_12:
          if (v25 < v23)
          {
            *v21 = v25;
            *v22 = v23;
            v26 = *v10;
            if (*v21 < *v10)
            {
              *v10 = *v21;
              *v21 = v26;
            }
          }
          goto LABEL_33;
        }
LABEL_24:
        if (v25 >= v23)
        {
          *v10 = v23;
          *v21 = v24;
          if (*v22 >= v24)
            goto LABEL_33;
          *v21 = *v22;
        }
        else
        {
          *v10 = v25;
        }
        *v22 = v24;
LABEL_33:
        if (v16 < -3)
        {
          v33 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1022 - v17) >> 10))
                        + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
          v34 = v17 + v19 - 1;
          v35 = (unint64_t)v34 >> 7;
          if (v34 < 1)
          {
LABEL_35:
            v36 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v34) >> 10))
                          + 4 * (~(1023 - (_WORD)v34) & 0x3FF));
            if (v13 < 9)
              goto LABEL_36;
LABEL_42:
            v37 = (float *)(*(_QWORD *)&a3[((unint64_t)(v14 - 2) >> 7) & 0x1FFFFFFFFFFFFF8]
                          + 4 * ((v14 - 2) & 0x3FF));
            v38 = *v36;
            v39 = *v33;
            v40 = *v37;
            if (*v36 >= *v33)
              goto LABEL_37;
            goto LABEL_43;
          }
        }
        else
        {
          v33 = (float *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * ((v17 + 1) & 0x3FF));
          v34 = v17 + v19 - 1;
          v35 = (unint64_t)v34 >> 7;
          if (v34 < 1)
            goto LABEL_35;
        }
        v36 = (float *)(*(_QWORD *)(a1 + (v35 & 0x1FFFFFFFFFFFFF8)) + 4 * (v34 & 0x3FF));
        if (v13 >= 9)
          goto LABEL_42;
LABEL_36:
        v37 = (float *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1025 - v14) >> 10)]
                      + 4 * (~(1025 - (_WORD)v14) & 0x3FF));
        v38 = *v36;
        v39 = *v33;
        v40 = *v37;
        if (*v36 >= *v33)
        {
LABEL_37:
          if (v40 < v38)
          {
            *v36 = v40;
            *v37 = v38;
            v41 = *v33;
            if (*v36 < *v33)
            {
              *v33 = *v36;
              *v36 = v41;
            }
          }
          goto LABEL_105;
        }
LABEL_43:
        if (v40 >= v38)
        {
          *v33 = v38;
          *v36 = v39;
          if (*v37 >= v39)
            goto LABEL_105;
          *v36 = *v37;
        }
        else
        {
          *v33 = v40;
        }
        *v37 = v39;
LABEL_105:
        if (v16 < -7)
        {
          v70 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1021 - v17) >> 10))
                        + 4 * (~(1021 - (_WORD)v17) & 0x3FF));
          v71 = v17 + v19 + 1;
          v72 = (unint64_t)v71 >> 7;
          if (v71 < 1)
          {
LABEL_107:
            v73 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v71) >> 10))
                          + 4 * (~(1023 - (_WORD)v71) & 0x3FF));
            if (v13 < 13)
              goto LABEL_108;
LABEL_114:
            v74 = (float *)(*(_QWORD *)&a3[((unint64_t)(v14 - 3) >> 7) & 0x1FFFFFFFFFFFFF8]
                          + 4 * ((v14 - 3) & 0x3FF));
            v75 = *v73;
            v76 = *v70;
            v77 = *v74;
            if (*v73 >= *v70)
              goto LABEL_109;
            goto LABEL_115;
          }
        }
        else
        {
          v70 = (float *)(*(_QWORD *)(a1 + (((unint64_t)(v17 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * ((v17 + 2) & 0x3FF));
          v71 = v17 + v19 + 1;
          v72 = (unint64_t)v71 >> 7;
          if (v71 < 1)
            goto LABEL_107;
        }
        v73 = (float *)(*(_QWORD *)(a1 + (v72 & 0x1FFFFFFFFFFFFF8)) + 4 * (v71 & 0x3FF));
        if (v13 >= 13)
          goto LABEL_114;
LABEL_108:
        v74 = (float *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1026 - v14) >> 10)]
                      + 4 * (~(1026 - (_WORD)v14) & 0x3FF));
        v75 = *v73;
        v76 = *v70;
        v77 = *v74;
        if (*v73 >= *v70)
        {
LABEL_109:
          if (v77 < v75)
          {
            *v73 = v77;
            *v74 = v75;
            v78 = *v70;
            if (*v73 < *v70)
            {
              *v70 = *v73;
              *v73 = v78;
            }
          }
          goto LABEL_120;
        }
LABEL_115:
        if (v77 >= v75)
        {
          *v70 = v75;
          *v73 = v76;
          if (*v74 >= v76)
            goto LABEL_120;
          *v73 = *v74;
        }
        else
        {
          *v70 = v77;
        }
        *v74 = v76;
LABEL_120:
        if (v34 < 1)
        {
          v79 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v34) >> 10))
                        + 4 * (~(1023 - (_WORD)v34) & 0x3FF));
          if (v20 >= 1)
          {
LABEL_122:
            v80 = (float *)(*(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF));
            if (v71 >= 1)
              goto LABEL_123;
LABEL_128:
            v81 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v71) >> 10))
                          + 4 * (~(1023 - (_WORD)v71) & 0x3FF));
            v82 = *v80;
            v83 = *v79;
            v84 = *v81;
            if (*v80 < *v79)
              goto LABEL_124;
LABEL_129:
            if (v84 < v82)
            {
              *v80 = v84;
              *v81 = v82;
              v85 = *v79;
              if (*v80 < *v79)
              {
                *v79 = *v80;
                *v80 = v85;
              }
            }
            goto LABEL_135;
          }
        }
        else
        {
          v79 = (float *)(*(_QWORD *)(a1 + (v35 & 0x1FFFFFFFFFFFFF8)) + 4 * (v34 & 0x3FF));
          if (v20 >= 1)
            goto LABEL_122;
        }
        v80 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1023 - v20) >> 10))
                      + 4 * (~(1023 - (_WORD)v20) & 0x3FF));
        if (v71 < 1)
          goto LABEL_128;
LABEL_123:
        v81 = (float *)(*(_QWORD *)(a1 + (v72 & 0x1FFFFFFFFFFFFF8)) + 4 * (v71 & 0x3FF));
        v82 = *v80;
        v83 = *v79;
        v84 = *v81;
        if (*v80 >= *v79)
          goto LABEL_129;
LABEL_124:
        if (v84 >= v82)
        {
          *v79 = v82;
          *v80 = v83;
          if (*v81 >= v83)
            goto LABEL_135;
          *v80 = *v81;
        }
        else
        {
          *v79 = v84;
        }
        *v81 = v83;
LABEL_135:
        if (v20 < 1)
        {
          v87 = 1023 - v20;
          LOWORD(v20) = ~(1023 - v20);
          v86 = *(_QWORD *)(a1 - 8 * (v87 >> 10));
        }
        else
        {
          v86 = *(_QWORD *)(a1 + (((unint64_t)v20 >> 7) & 0x1FFFFFFFFFFFFF8));
        }
        v88 = (float *)(v86 + 4 * (v20 & 0x3FF));
        v89 = *v10;
        *v10 = *v88;
        *v88 = v89;
        --a5;
        if ((a6 & 1) != 0)
          goto LABEL_49;
LABEL_139:
        if (v16 < 5)
        {
          v42 = *v10;
          if (*(float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v17) >> 10))
                        + 4 * (~(1024 - (_WORD)v17) & 0x3FF)) >= *v10)
            goto LABEL_143;
        }
        else
        {
          v42 = *v10;
          if (*(float *)(*(_QWORD *)(a1 + (((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * ((v17 - 1) & 0x3FF)) >= *v10)
          {
LABEL_143:
            if (v13 < 5)
            {
              v68 = v10;
              if (v42 >= *(float *)(*(_QWORD *)&a3[-8 * ((unint64_t)(1024 - v14) >> 10)]
                                   + 4 * (~(1024 - (_WORD)v14) & 0x3FF)))
              {
                do
                {
LABEL_152:
                  if ((char *)++v68 - (char *)v15 == 4096)
                  {
                    v91 = *(float **)(a1 + 8);
                    a1 += 8;
                    v15 = v91;
                    v68 = v91;
                  }
                }
                while ((a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v68 < v8) && v42 >= *v68);
                goto LABEL_157;
              }
            }
            else
            {
              v68 = v10;
              if (v42 >= *(float *)(*(_QWORD *)&a3[((unint64_t)(v14 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                   + 4 * ((v14 - 1) & 0x3FF)))
                goto LABEL_152;
            }
            do
            {
              if ((char *)++v68 - (char *)v15 == 4096)
              {
                v90 = *(float **)(a1 + 8);
                a1 += 8;
                v15 = v90;
                v68 = v90;
              }
            }
            while (v42 >= *v68);
LABEL_157:
            if (a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v68 < v8)
            {
              v92 = a3;
              v93 = (float *)v8;
              do
              {
                if (v93 == v12)
                {
                  v95 = (float *)*((_QWORD *)v92 - 1);
                  v92 -= 8;
                  v12 = v95;
                  v93 = v95 + 1024;
                }
                v94 = *--v93;
              }
              while (v42 < v94);
            }
            else
            {
              v92 = a3;
              v93 = (float *)v8;
            }
            while (a1 < (unint64_t)v92 || (char *)a1 == v92 && v68 < v93)
            {
              v96 = *v68;
              *v68 = *v93;
              *v93 = v96;
              do
              {
                if ((char *)++v68 - (char *)v15 == 4096)
                {
                  v97 = *(float **)(a1 + 8);
                  a1 += 8;
                  v15 = v97;
                  v68 = v97;
                }
              }
              while (v42 >= *v68);
              do
              {
                if (v93 == v12)
                {
                  v99 = (float *)*((_QWORD *)v92 - 1);
                  v92 -= 8;
                  v12 = v99;
                  v93 = v99 + 1024;
                }
                v98 = *--v93;
              }
              while (v42 < v98);
            }
            v100 = (char *)v68 - (char *)v15;
            v101 = v100 >> 2;
            if (v100 < 5)
            {
              v102 = (float *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(1024 - v101) >> 10))
                             + 4 * (~(1024 - (_WORD)v101) & 0x3FF));
              if (v102 == v10)
              {
LABEL_180:
                a6 = 0;
                *v102 = v42;
                goto LABEL_4;
              }
            }
            else
            {
              v102 = (float *)(*(_QWORD *)(a1 + (((unint64_t)(v101 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v101 - 1) & 0x3FF));
              if (v102 == v10)
                goto LABEL_180;
            }
            *v10 = *v102;
            goto LABEL_180;
          }
        }
LABEL_50:
        v43 = a1;
        v44 = v10;
        do
        {
          if ((char *)++v44 - (char *)v15 == 4096)
          {
            v46 = *(float **)(v43 + 8);
            v43 += 8;
            v15 = v46;
            v44 = v46;
          }
          v45 = *v44;
        }
        while (*v44 < v42);
        v47 = v44 - v15;
        if ((char *)v44 - (char *)v15 < 5)
        {
          if ((float *)(*(_QWORD *)(v43 - 8 * ((unint64_t)(1024 - v47) >> 10))
                       + 4 * (~(1024 - (_WORD)v47) & 0x3FF)) != v10)
          {
LABEL_56:
            v48 = a3;
            v49 = (float *)v8;
            do
            {
              if (v49 == v12)
              {
                v51 = (float *)*((_QWORD *)v48 - 1);
                v48 -= 8;
                v12 = v51;
                v49 = v51 + 1024;
              }
              v50 = *--v49;
            }
            while (v50 >= v42);
            goto LABEL_69;
          }
        }
        else if ((float *)(*(_QWORD *)(v43 + (((unint64_t)(v47 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((v47 - 1) & 0x3FF)) != v10)
        {
          goto LABEL_56;
        }
        v48 = a3;
        v49 = (float *)v8;
        while (v43 < (unint64_t)v48 || (char *)v43 == v48 && v44 < v49)
        {
          if (v49 == v12)
          {
            v53 = (float *)*((_QWORD *)v48 - 1);
            v48 -= 8;
            v12 = v53;
            v49 = v53 + 1023;
            if (v53[1023] < v42)
              break;
          }
          else
          {
            v52 = *--v49;
            if (v52 < v42)
              break;
          }
        }
LABEL_69:
        v55 = (char *)v43 != v48 || v44 >= v49;
        if (v43 < (unint64_t)v48)
          v55 = 0;
        while (v43 < (unint64_t)v48 || (char *)v43 == v48 && v44 < v49)
        {
          *v44 = *v49;
          *v49 = v45;
          do
          {
            if ((char *)++v44 - (char *)v15 == 4096)
            {
              v56 = *(float **)(v43 + 8);
              v43 += 8;
              v15 = v56;
              v44 = v56;
            }
            v45 = *v44;
          }
          while (*v44 < v42);
          do
          {
            if (v49 == v12)
            {
              v58 = (float *)*((_QWORD *)v48 - 1);
              v48 -= 8;
              v12 = v58;
              v49 = v58 + 1024;
            }
            v57 = *--v49;
          }
          while (v57 >= v42);
        }
        v59 = (char *)v44 - (char *)v15;
        v60 = v59 >> 2;
        if (v59 < 5)
        {
          v64 = 1024 - v60;
          v62 = v43 - 8 * (v64 >> 10);
          v63 = (float *)(*(_QWORD *)v62 + 4 * (~(_WORD)v64 & 0x3FF));
          if (v63 == v10)
            goto LABEL_92;
          goto LABEL_91;
        }
        v61 = v60 - 1;
        v62 = v43 + 8 * (v61 >> 10);
        v63 = (float *)(*(_QWORD *)v62 + 4 * (v61 & 0x3FF));
        if (v63 != v10)
LABEL_91:
          *v10 = *v63;
LABEL_92:
        *v63 = v42;
        if (!v55)
        {
LABEL_96:
          sub_207DDE748(a1, v10, v62, v63, a5, a6 & 1);
          a6 = 0;
          goto LABEL_97;
        }
        v65 = sub_207DDFE88((char *)a1, v10, (char *)v62, (uint64_t)v63);
        v66 = (uint64_t)v63 - *(_QWORD *)v62;
        v67 = v66 >> 2;
        if (v66 >= -3)
        {
          if (!sub_207DDFE88((char *)(v62 + 8 * ((unint64_t)(v67 + 1) >> 10)), (float *)(*(_QWORD *)(v62 + 8 * ((unint64_t)(v67 + 1) >> 10)) + 4 * ((v67 + 1) & 0x3FF)), a3, v8))goto LABEL_95;
LABEL_100:
          v68 = v10;
          v8 = (unint64_t)v63;
          a3 = (char *)v62;
          if (v65)
            return;
          goto LABEL_4;
        }
        if (sub_207DDFE88((char *)(v62 - 8 * ((unint64_t)(1022 - v67) >> 10)), (float *)(*(_QWORD *)(v62 - 8 * ((unint64_t)(1022 - v67) >> 10))+ 4 * (~(1022 - (_WORD)v67) & 0x3FF)), a3, v8))
        {
          goto LABEL_100;
        }
LABEL_95:
        if (!v65)
          goto LABEL_96;
LABEL_97:
        v68 = v63 + 1;
        if ((float *)((char *)v63 - *(_QWORD *)v62 + 4) == (float *)4096)
        {
          v69 = *(float **)(v62 + 8);
          v62 += 8;
          v68 = v69;
        }
        a1 = v62;
LABEL_4:
        v10 = v68;
        if ((float *)v8 != v68)
          continue;
        return;
    }
  }
}

BOOL sub_207DDFE88(char *a1, float *a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  float **v8;
  float *v9;
  float *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float *v16;
  char *v17;
  float *v18;
  unint64_t v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char *v28;
  float *v29;
  unint64_t v30;
  char *v31;
  float *v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float **v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  float *v47;
  int v48;
  float *v49;
  float **v50;
  float *v51;
  float v52;
  float v53;
  float *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  int v59;
  float *v60;
  unint64_t v61;

  if ((float *)a4 == a2)
    return 1;
  v4 = *(_QWORD *)a3;
  v5 = (uint64_t)a2 - *(_QWORD *)a1;
  v6 = v5 >> 2;
  switch(((a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v5 >> 2))
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (v4 == a4)
        a4 = *((_QWORD *)a3 - 1) + 4096;
      v14 = *(float *)(a4 - 4);
      v15 = *a2;
      if (v14 < *a2)
      {
        *a2 = v14;
        *(float *)(a4 - 4) = v15;
      }
      return 1;
    case 3:
      if (v5 < -3)
      {
        v16 = (float *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
        if (v4 != a4)
          goto LABEL_26;
      }
      else
      {
        v16 = (float *)(*(_QWORD *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        if (v4 != a4)
          goto LABEL_26;
      }
      a4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_26:
      v25 = *v16;
      v26 = *a2;
      v27 = *(float *)(a4 - 4);
      if (*v16 >= *a2)
      {
        if (v27 >= v25)
          return 1;
        *v16 = v27;
        *(float *)(a4 - 4) = v25;
        goto LABEL_86;
      }
      if (v27 < v25)
      {
        *a2 = v27;
        *(float *)(a4 - 4) = v26;
        return 1;
      }
      *a2 = v25;
      *v16 = v26;
      v57 = *(float *)(a4 - 4);
      if (v57 < v26)
      {
        *v16 = v57;
        *(float *)(a4 - 4) = v26;
        return 1;
      }
      return 1;
    case 4:
      if (v5 >= -3)
      {
        v16 = (float *)(*(_QWORD *)&a1[((unint64_t)(v6 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v6 + 1) & 0x3FF));
        v20 = v6 + 2;
        goto LABEL_39;
      }
      v16 = (float *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1022 - v6) >> 10)] + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        v20 = 1;
LABEL_39:
        v34 = (float *)(*(_QWORD *)&a1[(v20 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v20 & 0x3FF));
        if (v4 != a4)
          goto LABEL_41;
        goto LABEL_40;
      }
      v34 = (float *)(*(_QWORD *)&a1[-8 * ((unint64_t)(1021 - v6) >> 10)] + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if (v4 == a4)
LABEL_40:
        a4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_41:
      v35 = *v16;
      v36 = *a2;
      v37 = *v34;
      if (*v16 < *a2)
      {
        if (v37 >= v35)
        {
          *a2 = v35;
          *v16 = v36;
          v35 = *v34;
          if (*v34 >= v36)
            goto LABEL_81;
          *v16 = v35;
        }
        else
        {
          *a2 = v37;
        }
        *v34 = v36;
        v35 = v36;
LABEL_81:
        v39 = *(float *)(a4 - 4);
        if (v39 >= v35)
          return 1;
        goto LABEL_84;
      }
      if (v37 < v35)
      {
        *v16 = v37;
        *v34 = v35;
        v38 = *(_DWORD *)a2;
        if (*v16 < *a2)
        {
          *a2 = *v16;
          *(_DWORD *)v16 = v38;
          v35 = *v34;
          v39 = *(float *)(a4 - 4);
          if (v39 >= *v34)
            return 1;
          goto LABEL_84;
        }
        goto LABEL_81;
      }
      v35 = *v34;
      v39 = *(float *)(a4 - 4);
      if (v39 >= v37)
        return 1;
LABEL_84:
      *v34 = v39;
      *(float *)(a4 - 4) = v35;
      v58 = *v16;
      if (*v34 >= *v16)
        return 1;
      *v16 = *v34;
      *v34 = v58;
LABEL_86:
      v59 = *(_DWORD *)a2;
      if (*v16 >= *a2)
        return 1;
      *a2 = *v16;
      *(_DWORD *)v16 = v59;
      return 1;
    case 5:
      if (v5 >= -3)
      {
        v17 = &a1[8 * ((unint64_t)(v6 + 1) >> 10)];
        v18 = (float *)(*(_QWORD *)v17 + 4 * ((v6 + 1) & 0x3FF));
        v19 = v6 + 2;
LABEL_31:
        v28 = &a1[8 * (v19 >> 10)];
        v29 = (float *)(*(_QWORD *)v28 + 4 * (v19 & 0x3FF));
        v30 = v6 + 3;
        goto LABEL_32;
      }
      v17 = &a1[-8 * ((unint64_t)(1022 - v6) >> 10)];
      v18 = (float *)(*(_QWORD *)v17 + 4 * (~(1022 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF9)
      {
        v19 = 1;
        goto LABEL_31;
      }
      v28 = &a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
      v29 = (float *)(*(_QWORD *)v28 + 4 * (~(1021 - (_WORD)v6) & 0x3FF));
      if ((unint64_t)v5 >= 0xFFFFFFFFFFFFFFF5)
      {
        v30 = 1;
LABEL_32:
        v31 = &a1[8 * (v30 >> 10)];
        v32 = (float *)(*(_QWORD *)v31 + 4 * (v30 & 0x3FF));
        if (v4 != a4)
          goto LABEL_34;
        goto LABEL_33;
      }
      v61 = 1020 - v6;
      v31 = &a1[-8 * (v61 >> 10)];
      v32 = (float *)(*(_QWORD *)v31 + 4 * (~(_WORD)v61 & 0x3FF));
      if (v4 == a4)
      {
LABEL_33:
        v33 = *((_QWORD *)a3 - 1);
        a3 -= 8;
        a4 = v33 + 4096;
      }
LABEL_34:
      sub_207DE04F0((uint64_t)a1, a2, (uint64_t)v17, v18, (uint64_t)v28, v29, (uint64_t)v31, v32, (uint64_t)a3, (float *)(a4 - 4));
      return 1;
    default:
      if (v5 <= -8)
      {
        v8 = (float **)&a1[-8 * ((unint64_t)(1021 - v6) >> 10)];
        v9 = *v8;
        v10 = &(*v8)[~(1021 - (_WORD)v6) & 0x3FF];
        v13 = 1022 - v6;
      }
      else
      {
        v8 = (float **)&a1[8 * ((unint64_t)(v6 + 2) >> 10)];
        v9 = *v8;
        v10 = &(*v8)[(v6 + 2) & 0x3FF];
        v11 = __CFADD__(v6, 1);
        v12 = v6 + 1;
        if (!v11)
        {
          v21 = (float *)(*(_QWORD *)&a1[(v12 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v12 & 0x3FF));
          v22 = *v21;
          v23 = *a2;
          v24 = *v10;
          if (*v21 >= *a2)
            goto LABEL_49;
          goto LABEL_22;
        }
        v13 = 1023;
      }
      v21 = (float *)(*(_QWORD *)&a1[-8 * (v13 >> 10)] + 4 * (~(_WORD)v13 & 0x3FF));
      v22 = *v21;
      v23 = *a2;
      v24 = *v10;
      if (*v21 >= *a2)
      {
LABEL_49:
        if (v24 < v22)
        {
          *v21 = v24;
          *v10 = v22;
          v40 = *a2;
          if (*v21 < *a2)
          {
            *a2 = *v21;
            *v21 = v40;
          }
        }
        goto LABEL_55;
      }
LABEL_22:
      if (v24 >= v22)
      {
        *a2 = v22;
        *v21 = v23;
        if (*v10 >= v23)
          goto LABEL_55;
        *v21 = *v10;
      }
      else
      {
        *a2 = v24;
      }
      *v10 = v23;
LABEL_55:
      v41 = v10 - v9;
      if ((char *)v10 - (char *)v9 < -3)
      {
        v46 = 1022 - v41;
        v43 = &v8[-(v46 >> 10)];
        v44 = *v43;
        v45 = ~(_DWORD)v46 & 0x3FFLL;
      }
      else
      {
        v42 = v41 + 1;
        v43 = &v8[v42 >> 10];
        v44 = *v43;
        v45 = v42 & 0x3FF;
      }
      v47 = &v44[v45];
      if (v47 == (float *)a4)
        return 1;
      v48 = 0;
      while (1)
      {
        v49 = v47;
        v50 = v43;
        v51 = v44;
        v52 = *v47;
        v53 = *v10;
        if (*v47 < *v10)
        {
          v54 = v47;
          while (1)
          {
            *v54 = v53;
            if (v10 == a2)
              break;
            v56 = v10;
            if (v10 == v9)
            {
              v55 = *--v8;
              v9 = v55;
              v10 = v55 + 1023;
              v53 = v55[1023];
              v54 = v56;
              if (v52 >= v53)
                goto LABEL_69;
            }
            else
            {
              --v10;
              v53 = *(v56 - 1);
              v54 = v56;
              if (v52 >= v53)
                goto LABEL_69;
            }
          }
          v56 = a2;
LABEL_69:
          *v56 = v52;
          if (++v48 == 8)
            break;
        }
        ++v47;
        v44 = v51;
        v43 = v50;
        if ((char *)(v49 + 1) - (char *)v51 == 4096)
        {
          v43 = v50 + 1;
          v44 = v50[1];
          v47 = v44;
        }
        v9 = v51;
        v8 = v50;
        v10 = v49;
        if (v47 == (float *)a4)
          return 1;
      }
      v60 = v47 + 1;
      if ((char *)(v47 + 1) - (char *)v51 == 4096)
        v60 = v50[1];
      result = v60 == (float *)a4;
      break;
  }
  return result;
}

void sub_207DE04F0(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6, uint64_t a7, float *a8, uint64_t a9, float *a10)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  v10 = *a4;
  v11 = *a2;
  v12 = *a6;
  if (*a4 >= *a2)
  {
    if (v12 >= v10)
    {
      v10 = *a6;
      v14 = *a8;
      if (*a8 >= v12)
        goto LABEL_17;
      goto LABEL_14;
    }
    *a4 = v12;
    *a6 = v10;
    v13 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v13;
      v10 = *a6;
      v14 = *a8;
      if (*a8 >= *a6)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 >= v10)
    {
      *a2 = v10;
      *a4 = v11;
      v10 = *a6;
      if (*a6 >= v11)
        goto LABEL_11;
      *a4 = v10;
    }
    else
    {
      *a2 = v12;
    }
    *a6 = v11;
    v10 = v11;
  }
LABEL_11:
  v14 = *a8;
  if (*a8 >= v10)
    goto LABEL_17;
LABEL_14:
  *a6 = v14;
  *a8 = v10;
  v15 = *a4;
  if (*a6 < *a4)
  {
    *a4 = *a6;
    *a6 = v15;
    v16 = *a2;
    if (*a4 < *a2)
    {
      *a2 = *a4;
      *a4 = v16;
    }
  }
LABEL_17:
  v17 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v17;
    v18 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v18;
      v19 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v19;
        v20 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v20;
        }
      }
    }
  }
}

void sub_207DE0630(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_207CA3AB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_207CC12E4((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_207CC1470((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_207CA3AB8();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_207CA3AB8();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_207DE0B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207DE0B8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207DE0BA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207DE0BB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207DE0BD0(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint8x16_t *v43;
  uint64_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t *v49;
  uint8x16_t *v50;
  uint8x16_t v51;
  uint8x16_t *v52;
  int i;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v74;
  unint64_t v75;
  uint8x16_t v76;
  uint8x16_t *v77;
  uint64_t v78;

  v2 = *(_DWORD *)(a2 + 36);
  v3 = (*(_DWORD *)(a2 + 32) - 1);
  v4 = v2 - 1;
  if (v2 != 1)
  {
    if (*(_DWORD *)(a2 + 32) != 1)
    {
      v5 = 0;
      v6 = v3 & 0xFFFFFFE0;
      v7 = v3 & 0xFFFFFFF8;
      while (1)
      {
        v9 = *(_DWORD *)(result + 40);
        v8 = *(_DWORD *)(result + 44);
        v10 = (v8 * v5);
        v11 = *(_QWORD *)(result + 24);
        v12 = v11 + v10;
        v13 = *(_DWORD *)(a2 + 40);
        v14 = (*(_DWORD *)(a2 + 44) * v5++);
        v15 = (v8 * v5);
        v16 = v11 + v15;
        v17 = *(_QWORD *)(a2 + 24);
        v18 = v17 + v14;
        if (v3 < 8)
        {
          v19 = 0;
LABEL_6:
          v20 = 0;
          v21 = v3 - v19;
          v22 = v9 * v19;
          v23 = v9 + v9 * v19;
          v24 = v13 * v19;
          do
          {
            v25 = (v22 + v20);
            v26 = (v23 + v20);
            v27 = *(unsigned __int8 *)(v12 + v26);
            v28 = *(unsigned __int8 *)(v12 + v25);
            v29 = *(unsigned __int8 *)(v16 + v26);
            v30 = *(unsigned __int8 *)(v16 + v25);
            if (v29 < v30)
              v30 = v29;
            if (v27 >= v28)
              v31 = v28;
            else
              v31 = v27;
            if (v30 >= v31)
              LOBYTE(v30) = v31;
            *(_BYTE *)(v18 + v24) = v30;
            v20 += v9;
            v24 += v13;
            --v21;
          }
          while (v21);
          goto LABEL_15;
        }
        v19 = 0;
        if (v13 != 1 || v9 != 1)
          goto LABEL_6;
        v19 = 0;
        v35 = v17 + v3 + v14;
        v36 = v11 + v3 + 1;
        v37 = v36 + v15;
        v38 = v18 >= v36 + v10 || v12 >= v35;
        v39 = !v38;
        v40 = v16 >= v35 || v18 >= v37;
        if (!v40 || v39)
          goto LABEL_6;
        if (v3 >= 0x20)
        {
          v42 = 0;
          do
          {
            v43 = (uint8x16_t *)(v12 + (v42 & 0xFFFFFFE0));
            v44 = v42 & 0xFFFFFFE0 | 1;
            v45 = *(uint8x16_t *)(v12 + v44);
            v46 = *(uint8x16_t *)(v12 + v44 + 16);
            v47 = *v43;
            v48 = v43[1];
            v49 = (uint8x16_t *)(v16 + (v42 & 0xFFFFFFE0));
            v50 = (uint8x16_t *)(v16 + v44);
            v51 = vminq_u8(vminq_u8(v50[1], v49[1]), vminq_u8(v46, v48));
            v52 = (uint8x16_t *)(v18 + (v42 & 0xFFFFFFE0));
            *v52 = vminq_u8(vminq_u8(*v50, *v49), vminq_u8(v45, v47));
            v52[1] = v51;
            v42 += 32;
          }
          while (v6 != v42);
          if (v6 == v3)
            goto LABEL_15;
          v41 = v3 & 0xFFFFFFE0;
          v19 = v41;
          if ((v3 & 0x18) == 0)
            goto LABEL_6;
        }
        else
        {
          v41 = 0;
        }
        do
        {
          *(uint8x8_t *)(v18 + (v41 & 0xFFFFFFF8)) = vmin_u8(vmin_u8(*(uint8x8_t *)(v16+ (v41 & 0xFFFFFFF8 | 1)), *(uint8x8_t *)(v16+ (v41 & 0xFFFFFFF8))), vmin_u8(*(uint8x8_t *)(v12+ (v41 & 0xFFFFFFF8 | 1)), *(uint8x8_t *)(v12+ (v41 & 0xFFFFFFF8))));
          v41 += 8;
        }
        while (v7 != v41);
        v19 = v3 & 0xFFFFFFF8;
        if (v7 != v3)
          goto LABEL_6;
LABEL_15:
        v32 = (v9 * v3);
        v33 = *(unsigned __int8 *)(v16 + v32);
        v34 = *(unsigned __int8 *)(v12 + v32);
        if (v33 < v34)
          LOBYTE(v34) = v33;
        *(_BYTE *)(v18 + (v13 * v3)) = v34;
        if (v5 == v4)
          goto LABEL_46;
      }
    }
    for (i = 1; i != v2; ++i)
    {
      v54 = *(_DWORD *)(result + 44);
      v55 = v54 * (i - 1);
      v56 = *(_QWORD *)(result + 24);
      v57 = *(unsigned __int8 *)(v56 + (v54 * i));
      v58 = *(unsigned __int8 *)(v56 + v55);
      if (v57 >= v58)
        LOBYTE(v57) = v58;
      *(_BYTE *)(*(_QWORD *)(a2 + 24) + (*(_DWORD *)(a2 + 44) * (i - 1))) = v57;
    }
  }
LABEL_46:
  v59 = *(_DWORD *)(result + 40);
  v60 = (*(_DWORD *)(result + 44) * v4);
  v61 = *(_QWORD *)(result + 24);
  v62 = v61 + v60;
  v63 = *(_DWORD *)(a2 + 40);
  v64 = (*(_DWORD *)(a2 + 44) * v4);
  v65 = *(_QWORD *)(a2 + 24);
  v66 = v65 + v64;
  if ((_DWORD)v3)
  {
    if (v3 < 8)
    {
LABEL_48:
      v67 = 0;
      goto LABEL_49;
    }
    v67 = 0;
    if (v63 == 1 && v59 == 1)
    {
      if (v66 < v60 + v3 + v61 + 1 && v62 < v65 + v64 + v3)
        goto LABEL_48;
      if (v3 >= 0x20)
      {
        v74 = 0;
        v67 = v3 & 0xFFFFFFE0;
        do
        {
          v75 = v62 + (v74 & 0xFFFFFFE0);
          v76 = vminq_u8(*(uint8x16_t *)(v75 + 17), *(uint8x16_t *)(v75 + 16));
          v77 = (uint8x16_t *)(v66 + (v74 & 0xFFFFFFE0));
          *v77 = vminq_u8(*(uint8x16_t *)(v75 + 1), *(uint8x16_t *)v75);
          v77[1] = v76;
          v74 += 32;
        }
        while (v67 != v74);
        if (v67 == v3)
          goto LABEL_54;
        if ((v3 & 0x18) == 0)
          goto LABEL_49;
      }
      else
      {
        v67 = 0;
      }
      v78 = v67;
      v67 = v3 & 0xFFFFFFF8;
      do
      {
        *(uint8x8_t *)(v66 + (v78 & 0xFFFFFFF8)) = vmin_u8(*(uint8x8_t *)(v62+ (v78 & 0xFFFFFFF8)+ 1), *(uint8x8_t *)(v62 + (v78 & 0xFFFFFFF8)));
        v78 += 8;
      }
      while (v67 != v78);
      if (v67 == v3)
        goto LABEL_54;
    }
LABEL_49:
    v68 = 0;
    v69 = v3 - v67;
    v70 = v59 * v67;
    v71 = v59 + v59 * v67;
    v72 = v63 * v67;
    do
    {
      if (*(unsigned __int8 *)(v62 + (v71 + v68)) >= *(unsigned __int8 *)(v62 + (v70 + v68)))
        result = *(unsigned __int8 *)(v62 + (v70 + v68));
      else
        result = *(unsigned __int8 *)(v62 + (v71 + v68));
      *(_BYTE *)(v66 + v72) = result;
      v68 += v59;
      v72 += v63;
      --v69;
    }
    while (v69);
  }
LABEL_54:
  *(_BYTE *)(v66 + (v63 * v3)) = *(_BYTE *)(v62 + (v59 * v3));
  return result;
}

void sub_207DE0F5C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  void *v5[2];
  char v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 __p;
  uint64_t v16;
  unsigned __int8 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;

  if (*a1)
  {
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  sub_207CCB5A4((uint64_t)v5, "Segmentation model failed to initialize");
  v13 = 1;
  sub_207CCAFD0(0x59u, (__int128 *)v5, (uint64_t)&v14);
  *(_OWORD *)a2 = v14;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v24)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v13)
      return;
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v3 = v17;
  if (v17)
  {
    *(_OWORD *)(a2 + 16) = __p;
    *(_QWORD *)(a2 + 32) = v16;
    v16 = 0;
    __p = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v23)
  {
    v4 = v20;
    *(_QWORD *)(a2 + 64) = v19;
    *(_OWORD *)(a2 + 48) = v18;
    v18 = 0uLL;
    *(_QWORD *)(a2 + 72) = v4;
    *(_OWORD *)(a2 + 80) = v21;
    *(_QWORD *)(a2 + 96) = v22;
    v19 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v3 && SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  if (v13)
  {
LABEL_15:
    if (v12)
    {
      if (v11 < 0)
        operator delete(v10);
      if (v9 < 0)
        operator delete(v8);
    }
    if (v7)
    {
      if (v6 < 0)
        operator delete(v5[0]);
    }
  }
}

void sub_207DE10F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207DE1104(_QWORD *a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 *p_src;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  __int128 v57;
  char *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  void **v76;
  void **v77;
  void *v78;
  char *v79;
  void *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void *v88[2];
  char *v89;
  char v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void *v95[2];
  uint64_t v96;
  char v97;
  uint64_t (**v98)();
  uint64_t v99;
  void *v100;
  std::__shared_weak_count *v101;
  char v102;
  char v103;
  void *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109[3];
  char v110;
  char v111;
  void *v112;
  void **v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  void *v125;
  uint64_t (**v126)();
  char *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *__dst[2];
  uint64_t v131;
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  _BYTE v137[24];
  _BYTE *v138;
  char v139;
  __int128 __src;
  std::__shared_weak_count_vtbl *v141;
  __int128 *v142;
  _BYTE v143[32];
  std::__shared_weak_count_vtbl *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  char v148;
  _BYTE v149[24];
  _BYTE *v150;
  char v151;
  _BYTE v152[24];
  _BYTE *v153;
  char v154;
  __int128 __p;
  uint64_t v156;
  char v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  char v161;
  _BYTE v162[24];
  _BYTE *v163;
  char v164;
  _BYTE v165[24];
  _BYTE *v166;
  char v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a2 + 79) < 0)
  {
    sub_207CA40D8(__dst, *((void **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(__int128 *)((char *)a2 + 56);
    v131 = *((_QWORD *)a2 + 9);
  }
  v132 = 1;
  v133 = xmmword_20823831C;
  v134 = unk_20823832C;
  v135 = xmmword_20823833C;
  v136 = 1;
  v137[0] = 0;
  v139 = 0;
  LOBYTE(__src) = 0;
  v143[0] = 0;
  if (*((char *)a2 + 103) < 0)
  {
    sub_207CA40D8(&v143[8], *((void **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    *(_OWORD *)&v143[8] = a2[5];
    *(_QWORD *)&v143[24] = *((_QWORD *)a2 + 12);
  }
  LOBYTE(v144) = 1;
  v4 = xmmword_20823834C;
  v5 = unk_20823835C;
  v145 = xmmword_20823834C;
  v146 = unk_20823835C;
  v6 = xmmword_20823836C;
  v147 = xmmword_20823836C;
  v148 = 1;
  v149[0] = 0;
  v151 = 0;
  v152[0] = 0;
  v154 = 0;
  if (*((char *)a2 + 127) < 0)
  {
    sub_207CA40D8(&__p, *((void **)a2 + 13), *((_QWORD *)a2 + 14));
    v6 = xmmword_20823836C;
    v5 = unk_20823835C;
    v4 = xmmword_20823834C;
  }
  else
  {
    __p = *(__int128 *)((char *)a2 + 104);
    v156 = *((_QWORD *)a2 + 15);
  }
  v157 = 1;
  v158 = v4;
  v159 = v5;
  v160 = v6;
  v161 = 1;
  v162[0] = 0;
  v164 = 0;
  v165[0] = 0;
  v167 = 0;
  v115 = operator new(0x1F8uLL);
  v117 = (char *)v115 + 504;
  sub_207CA5340((char *)v115, (__int128 *)__dst);
  sub_207CA5340((char *)v115 + 168, (__int128 *)&v143[8]);
  sub_207CA5340((char *)v115 + 336, &__p);
  v116 = (char *)v115 + 504;
  if (v167)
  {
    v7 = v166;
    if (v166 == v165)
    {
      v8 = 4;
      v7 = v165;
    }
    else
    {
      if (!v166)
        goto LABEL_16;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
LABEL_16:
  if (v164)
  {
    v9 = v163;
    if (v163 == v162)
    {
      v10 = 4;
      v9 = v162;
      goto LABEL_21;
    }
    if (v163)
    {
      v10 = 5;
LABEL_21:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  if (v157 && SHIBYTE(v156) < 0)
    operator delete((void *)__p);
  if (v154)
  {
    v11 = v153;
    if (v153 == v152)
    {
      v12 = 4;
      v11 = v152;
    }
    else
    {
      if (!v153)
        goto LABEL_31;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_31:
  if (v151)
  {
    v13 = v150;
    if (v150 == v149)
    {
      v14 = 4;
      v13 = v149;
      goto LABEL_36;
    }
    if (v150)
    {
      v14 = 5;
LABEL_36:
      (*(void (**)(void))(*v13 + 8 * v14))();
    }
  }
  if ((_BYTE)v144 && (v143[31] & 0x80000000) != 0)
    operator delete(*(void **)&v143[8]);
  if (v143[0])
  {
    p_src = v142;
    if (v142 == &__src)
    {
      v16 = 4;
      p_src = &__src;
    }
    else
    {
      if (!v142)
        goto LABEL_46;
      v16 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_src + 8 * v16))();
  }
LABEL_46:
  if (v139)
  {
    v17 = v138;
    if (v138 == v137)
    {
      v18 = 4;
      v17 = v137;
      goto LABEL_51;
    }
    if (v138)
    {
      v18 = 5;
LABEL_51:
      (*(void (**)(void))(*v17 + 8 * v18))();
    }
  }
  if (v132 && SHIBYTE(v131) < 0)
    operator delete(__dst[0]);
  v19 = (char *)operator new(0x20uLL);
  v104 = v19;
  v105 = (unint64_t)v19;
  *(_QWORD *)&v106 = v19 + 32;
  if (*((char *)a2 + 151) < 0)
  {
    sub_207CA40D8(__dst, *((void **)a2 + 16), *((_QWORD *)a2 + 17));
    v19 = (char *)v105;
    v132 = 1;
    if (v105 >= (unint64_t)v106)
    {
      v21 = sub_207D4E7A8((uint64_t)&v104, (uint64_t)__dst);
      goto LABEL_61;
    }
  }
  else
  {
    *(_OWORD *)__dst = a2[8];
    v131 = *((_QWORD *)a2 + 18);
    v132 = 1;
  }
  *v19 = 0;
  v19[24] = 0;
  if (v132)
  {
    v20 = *(_OWORD *)__dst;
    *((_QWORD *)v19 + 2) = v131;
    *(_OWORD *)v19 = v20;
    __dst[1] = 0;
    v131 = 0;
    __dst[0] = 0;
    v19[24] = 1;
  }
  v21 = (uint64_t)(v19 + 32);
LABEL_61:
  v105 = v21;
  if (v132 && SHIBYTE(v131) < 0)
  {
    operator delete(__dst[0]);
    v21 = v105;
  }
  v112 = v104;
  v113 = (void **)v21;
  v114 = v106;
  v104 = (void *)*((_QWORD *)a2 + 5);
  LODWORD(v105) = *((_DWORD *)a2 + 12);
  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(&v106, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v106 = *a2;
    v107 = *((_QWORD *)a2 + 2);
  }
  sub_207CA51F8((uint64_t)&v108, (uint64_t *)&v115);
  sub_207CA550C(v109, (uint64_t *)&v112);
  v110 = 0;
  v111 = 0;
  if (!*((_BYTE *)a2 + 28) || !sub_207C9C828())
  {
    v126 = 0;
    v127 = 0;
    v125 = 0;
    if (v116 == v115)
    {
      v28 = *((_DWORD *)a2 + 6);
      v88[0] = 0;
      v88[1] = 0;
      v89 = 0;
    }
    else
    {
      v25 = 0xCF3CF3CF3CF3CF3DLL * ((v116 - (_BYTE *)v115) >> 3);
      if (v25 > 0x924924924924924)
        sub_207D4E938();
      v26 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * ((v116 - (_BYTE *)v115) >> 3));
      v125 = v26;
      v127 = &v26[28 * v25];
      v27 = 28 * ((28 * v25 - 28) / 0x1C);
      bzero(v26, v27 + 28);
      v126 = (uint64_t (**)())&v26[v27 + 28];
      v28 = *((_DWORD *)a2 + 6);
      v88[0] = operator new(v27 + 28);
      v89 = (char *)v88[0] + v27 + 28;
      memcpy(v88[0], v26, v27 + 26);
      v88[1] = v89;
    }
    v90 = 1;
    v91 = 1;
    v92 = 0;
    __dst[0] = off_24C084A40;
    sub_207CA4F70((uint64_t)&__dst[1], (uint64_t *)&v104);
    __dst[0] = off_24C084918;
    sub_207D4EC30((uint64_t)&__src, (uint64_t)v88);
    *(_QWORD *)v143 = v91;
    *(_WORD *)&v143[8] = v92;
    sub_207DE4258((uint64_t)v95, (uint64_t)__dst);
    __dst[0] = off_24C084918;
    if ((_BYTE)v142 && (_QWORD)__src)
    {
      *((_QWORD *)&__src + 1) = __src;
      operator delete((void *)__src);
    }
    __dst[0] = off_24C084A40;
    sub_207CA6534((uint64_t)&__dst[1]);
    if (v97)
      goto LABEL_105;
    v98 = off_24C06E9E8;
    v29 = v101;
    if (v101)
    {
      p_shared_owners = (unint64_t *)&v101->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v97)
    {
      v32 = v96;
      v96 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v33 = (std::__shared_weak_count *)v95[1];
      if (v95[1])
      {
        v34 = (unint64_t *)((char *)v95[1] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    if (v90 && v88[0])
    {
      v88[1] = v88[0];
      operator delete(v88[0]);
    }
    v88[0] = 0;
    v88[1] = 0;
    v89 = 0;
    v36 = v125;
    v37 = (char *)v126 - (_BYTE *)v125;
    if (v126 != v125)
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v37 >> 2)) > 0x924924924924924)
        sub_207D4E938();
      v88[0] = operator new((char *)v126 - (_BYTE *)v125);
      v88[1] = v88[0];
      v38 = (char *)v88[0] + 4 * (v37 >> 2);
      v89 = v38;
      memcpy(v88[0], v36, v37 - 2);
      v88[1] = v38;
    }
    v90 = 1;
    v91 = v28;
    v92 = 0;
    __dst[0] = off_24C084A40;
    sub_207CA4F70((uint64_t)&__dst[1], (uint64_t *)&v104);
    __dst[0] = off_24C084918;
    sub_207D4EC30((uint64_t)&__src, (uint64_t)v88);
    *(_QWORD *)v143 = v91;
    *(_WORD *)&v143[8] = v92;
    sub_207DE4258((uint64_t)v95, (uint64_t)__dst);
    __dst[0] = off_24C084918;
    if ((_BYTE)v142 && (_QWORD)__src)
    {
      *((_QWORD *)&__src + 1) = __src;
      operator delete((void *)__src);
    }
    __dst[0] = off_24C084A40;
    sub_207CA6534((uint64_t)&__dst[1]);
    if (v97)
    {
LABEL_105:
      v39 = operator new(0x18uLL);
      *(_OWORD *)v39 = *(_OWORD *)v95;
      v95[0] = 0;
      v95[1] = 0;
      v40 = v101;
      v39[2] = v96;
      *a1 = v39;
      v96 = 0;
      v98 = off_24C06E9E8;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v97)
      {
        v43 = v96;
        v96 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        v44 = (std::__shared_weak_count *)v95[1];
        if (v95[1])
        {
          v45 = (unint64_t *)((char *)v95[1] + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      if (v90 && v88[0])
      {
        v88[1] = v88[0];
        operator delete(v88[0]);
      }
      if (v125)
        operator delete(v125);
      goto LABEL_212;
    }
    v98 = off_24C06E9E8;
    v49 = v101;
    if (v101)
    {
      v50 = (unint64_t *)&v101->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v97)
    {
      v52 = v96;
      v96 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      v53 = (std::__shared_weak_count *)v95[1];
      if (v95[1])
      {
        v54 = (unint64_t *)((char *)v95[1] + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    if (v90 && v88[0])
    {
      v88[1] = v88[0];
      operator delete(v88[0]);
    }
    v56 = v125;
    if (!v125)
      goto LABEL_211;
    goto LABEL_210;
  }
  LOBYTE(v95[0]) = 0;
  v97 = 0;
  LOBYTE(v98) = *((_BYTE *)a2 + 29);
  v99 = *((_QWORD *)a2 + 4);
  LOBYTE(v100) = 0;
  v103 = 0;
  __dst[0] = off_24C084A40;
  sub_207CA4F70((uint64_t)&__dst[1], (uint64_t *)&v104);
  __dst[0] = off_24C084970;
  sub_207D4EAF0(&__src, (__int128 *)v95);
  sub_2080A1D38((uint64_t)__dst, (uint64_t)&v125);
  if ((_BYTE)v127)
  {
    LOBYTE(v88[0]) = 0;
    v90 = 0;
    v91 = (uint64_t)off_24C06E9E8;
    LOBYTE(v92) = (_BYTE)v127;
    v22 = v129;
    v93 = v128;
    v94 = v129;
    if (!v129)
      goto LABEL_173;
    v23 = (unint64_t *)&v129->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v126 = off_24C06E9E8;
    goto LABEL_169;
  }
  v47 = (std::__shared_weak_count *)operator new(0xE8uLL);
  v47->__shared_owners_ = 0;
  v48 = (unint64_t *)&v47->__shared_owners_;
  v47->__shared_weak_owners_ = 0;
  v47->__vftable = (std::__shared_weak_count_vtbl *)off_24C075550;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084A40;
  sub_207CA4F70((uint64_t)&v47[1].__shared_owners_, (uint64_t *)&__dst[1]);
  LOBYTE(v47[6].__shared_owners_) = 0;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084970;
  LOBYTE(v47[7].__shared_owners_) = 0;
  if ((_BYTE)v142)
  {
    if (SHIBYTE(v141) < 0)
    {
      sub_207CA40D8(&v47[6].__shared_owners_, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      *(_OWORD *)&v47[6].__shared_owners_ = __src;
      v47[7].__vftable = v141;
    }
    LOBYTE(v47[7].__shared_owners_) = 1;
  }
  v57 = *(_OWORD *)v143;
  LOBYTE(v47[8].__shared_owners_) = 0;
  *(_OWORD *)&v47[7].__shared_weak_owners_ = v57;
  LOBYTE(v47[9].__shared_owners_) = 0;
  if ((_BYTE)v145)
  {
    if (SHIBYTE(v144) < 0)
    {
      sub_207CA40D8(&v47[8].__shared_owners_, *(void **)&v143[16], *(unint64_t *)&v143[24]);
    }
    else
    {
      *(_OWORD *)&v47[8].__shared_owners_ = *(_OWORD *)&v143[16];
      v47[9].__vftable = v144;
    }
    LOBYTE(v47[9].__shared_owners_) = 1;
  }
  v120 = v47 + 1;
  v121 = v47;
  v118 = 0;
  v119 = 0;
  v58 = (char *)v125;
  v125 = 0;
  v122 = v47 + 1;
  v123 = v47;
  do
    v59 = __ldxr(v48);
  while (__stxr(v59 + 1, v48));
  if (!v58
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Model.cpp", 39, (uint64_t)"instance_ != nullptr", 20, (uint64_t)&unk_2082258F5, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v88[0] = &v47[1];
  v88[1] = v47;
  v122 = 0;
  v123 = 0;
  v89 = v58;
  v90 = 1;
  v91 = (uint64_t)off_24C06E9E8;
  LOBYTE(v92) = 0;
  v93 = v128;
  v94 = v129;
  if (v129)
  {
    v60 = (unint64_t *)&v129->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  v124 = 0;
  do
    v62 = __ldaxr(v48);
  while (__stlxr(v62 - 1, v48));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  v63 = v119;
  if (v119)
  {
    v64 = (unint64_t *)&v119->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v22 = v129;
  v126 = off_24C06E9E8;
  if (v129)
  {
LABEL_169:
    v66 = (unint64_t *)&v22->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_173:
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  __dst[0] = off_24C084970;
  if ((_BYTE)v145 && SHIBYTE(v144) < 0)
    operator delete(*(void **)&v143[16]);
  if ((_BYTE)v142 && SHIBYTE(v141) < 0)
    operator delete((void *)__src);
  __dst[0] = off_24C084A40;
  sub_207CA6534((uint64_t)&__dst[1]);
  if (v90)
  {
    v68 = operator new(0x18uLL);
    *(_OWORD *)v68 = *(_OWORD *)v88;
    v88[0] = 0;
    v88[1] = 0;
    v69 = v94;
    v68[2] = v89;
    *a1 = v68;
    v89 = 0;
    v91 = (uint64_t)off_24C06E9E8;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (v90)
    {
      v89 = 0;
      if (v88[1])
      {
        v72 = (unint64_t *)((char *)v88[1] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          (*(void (**)(void *))(*(_QWORD *)v88[1] + 16))(v88[1]);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v88[1]);
        }
      }
    }
    if (v103 && v102 < 0)
      operator delete(v100);
    if (v97 && SHIBYTE(v96) < 0)
      operator delete(v95[0]);
    goto LABEL_212;
  }
  v91 = (uint64_t)off_24C06E9E8;
  if (v94)
  {
    v74 = &v94->__shared_owners_;
    do
      v75 = __ldaxr((unint64_t *)v74);
    while (__stlxr(v75 - 1, (unint64_t *)v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v103 && v102 < 0)
    operator delete(v100);
  if (v97 && SHIBYTE(v96) < 0)
  {
    v56 = v95[0];
LABEL_210:
    operator delete(v56);
  }
LABEL_211:
  *a1 = 0;
LABEL_212:
  sub_207CA6534((uint64_t)&v104);
  v76 = (void **)v112;
  if (v112)
  {
    v77 = v113;
    v78 = v112;
    if (v113 != v112)
    {
      do
      {
        if (*((_BYTE *)v77 - 8) && *((char *)v77 - 9) < 0)
          operator delete(*(v77 - 4));
        v77 -= 4;
      }
      while (v77 != v76);
      v78 = v112;
    }
    v113 = v76;
    operator delete(v78);
  }
  v79 = (char *)v115;
  if (!v115)
    goto LABEL_242;
  v80 = v115;
  if (v116 == v115)
    goto LABEL_241;
  v81 = v116 - 80;
  do
  {
    if (!v81[72])
      goto LABEL_231;
    v83 = (char *)*((_QWORD *)v81 + 8);
    if (v81 + 40 == v83)
    {
      v83 = v81 + 40;
      v84 = 4;
    }
    else
    {
      if (!v83)
        goto LABEL_231;
      v84 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v83 + 8 * v84))();
LABEL_231:
    if (v81[32])
    {
      v85 = (char *)*((_QWORD *)v81 + 3);
      if (v81 == v85)
      {
        v85 = v81;
        v86 = 4;
        goto LABEL_236;
      }
      if (v85)
      {
        v86 = 5;
LABEL_236:
        (*(void (**)(void))(*(_QWORD *)v85 + 8 * v86))();
      }
    }
    if (*(v81 - 64) && *(v81 - 65) < 0)
      operator delete(*((void **)v81 - 11));
    v82 = v81 - 88;
    v81 -= 168;
  }
  while (v82 != v79);
  v80 = v115;
LABEL_241:
  v116 = v79;
  operator delete(v80);
LABEL_242:
  __dst[0] = (void *)0x8000000080;
  a1[1] = &off_24C0751D0;
  sub_207DDB554(__dst, a1 + 2);
  return a1;
}

void sub_207DE2110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t v67;
  void **v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void *v74;

  if (*(_BYTE *)(v70 + 224) && *(char *)(v70 + 223) < 0)
    operator delete(*v69);
  if (*(_BYTE *)(v70 + 176))
  {
    if (*(char *)(v70 + 175) < 0)
      operator delete(*v68);
  }
  *v72 = v71;
  sub_207CA6534(v67);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v70);
  operator delete(v74);
  sub_207D4EA24(&a62);
  sub_2080A1C40((uint64_t)&a67);
  sub_207DE41EC((uint64_t)&a23);
  sub_207CA6534((uint64_t)&a34);
  sub_207CA5094(&a49);
  sub_207CA510C(&a52);
  _Unwind_Resume(a1);
}

void sub_207DE22F0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_207D4BEC4(v1);
  _Unwind_Resume(a1);
}

void sub_207DE2304(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void **v41;

  sub_207CA510C(v41);
  if (a41 < 0)
    operator delete(__p);
  JUMPOUT(0x207DE22D8);
}

void sub_207DE2338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;

  if (!a52)
    goto LABEL_22;
  if (v69 == (char *)a52)
    goto LABEL_21;
  v71 = v69 - 80;
  while (1)
  {
    if (!v71[72])
      goto LABEL_11;
    v73 = (char *)*((_QWORD *)v71 + 8);
    if (v71 + 40 == v73)
    {
      v73 = v71 + 40;
      v74 = 4;
    }
    else
    {
      if (!v73)
        goto LABEL_11;
      v74 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v73 + 8 * v74))();
LABEL_11:
    if (v71[32])
    {
      v75 = (char *)*((_QWORD *)v71 + 3);
      if (v71 == v75)
      {
        v75 = v71;
        v76 = 4;
        goto LABEL_16;
      }
      if (v75)
      {
        v76 = 5;
LABEL_16:
        (*(void (**)(void))(*(_QWORD *)v75 + 8 * v76))();
      }
    }
    if (*(v71 - 64))
    {
      if (*(v71 - 65) < 0)
        operator delete(*((void **)v71 - 11));
    }
    v72 = v71 - 88;
    v71 -= 168;
    if (v72 == (char *)a52)
    {
      v69 = (char *)a52;
LABEL_21:
      operator delete(v69);
LABEL_22:
      sub_207D4E3E4(v68);
      sub_207D4E3E4(v67);
      sub_207D4E3E4((uint64_t)&a67);
      _Unwind_Resume(a1);
    }
  }
}

void sub_207DE2428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  for (i = v1 - 80; ; i -= 168)
  {
    if (!*(_BYTE *)(i + 72))
      goto LABEL_9;
    v4 = *(_QWORD **)(i + 64);
    if ((_QWORD *)(i + 40) == v4)
    {
      v4 = (_QWORD *)(i + 40);
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    if (*(_BYTE *)(i + 32))
    {
      v6 = *(_QWORD **)(i + 24);
      if ((_QWORD *)i == v6)
      {
        v6 = (_QWORD *)i;
        v7 = 4;
        goto LABEL_14;
      }
      if (v6)
      {
        v7 = 5;
LABEL_14:
        (*(void (**)(void))(*v6 + 8 * v7))();
      }
    }
    if (*(_BYTE *)(i - 64) && *(char *)(i - 65) < 0)
      operator delete(*(void **)(i - 88));
    v3 = i - 88;
    if (v3 == v0)
      JUMPOUT(0x207DE233CLL);
  }
}

void sub_207DE24CC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  _BYTE *v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  __int16 v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  int v88;
  char *v89;
  char *v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  void *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  void *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  void *v121;
  char *v122;
  uint64_t v123;
  __int128 *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  __int16 v134;
  unint64_t v135;
  char *v136;
  _BYTE *v137;
  _QWORD *v138;
  char *v139;
  char *v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  int v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;
  int v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  float v192;
  char v193;
  float v194;
  float v195;
  float v196;
  float v197;
  BOOL v198;
  float v199;
  float v200;
  float v201;
  float v202;
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  __int16 v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __int16 v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unsigned __int8 v238;
  __int16 v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  int v246;
  unint64_t v247;
  int v248;
  _BYTE *v249;
  int v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  _BYTE *v263;
  _QWORD *v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  int v268;
  int v269;
  uint64_t v270;
  int i;
  unsigned __int8 *v272;
  _BYTE *v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  unsigned int v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  BOOL v289;
  BOOL v290;
  BOOL v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint8x16_t *v295;
  uint8x16_t *v296;
  uint8x16_t v297;
  uint8x16_t v298;
  uint8x16_t *v299;
  uint64_t v300;
  int v301;
  int v302;
  unsigned int v303;
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint8x16_t *v317;
  uint8x16_t v318;
  uint8x16_t v319;
  uint8x16_t *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  int v333;
  char v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  int v340;
  __int16 v341;
  char v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  int v346;
  char v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  int v353;
  __int16 v354;
  char v355;
  _BYTE v356[48];
  int v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  __int16 v364;
  char v365;
  void *v366;
  char *v367;
  uint64_t v368;
  void *v369[2];
  __int128 v370;
  int v371;
  uint64_t (**v372)();
  char v373;
  __int128 v374;
  void *__p[2];
  uint64_t v376;
  unsigned __int8 v377;
  __int128 v378;
  std::__shared_weak_count *v379;
  char v380;
  __int128 v381;
  int v382;
  char v383;
  __int128 v384;
  int v385;
  __int128 v386;
  __int128 v387;
  void *v388[2];
  uint64_t v389;
  uint64_t (**v390)();
  uint64_t v391;
  std::__shared_weak_count *v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  int v396;
  __int16 v397;
  char v398;
  int v399;
  _OWORD v400[3];
  int v401;
  uint64_t (**v402)();
  uint64_t v403;
  std::__shared_weak_count *v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  int v408;
  __int16 v409;
  char v410;
  int v411;
  _OWORD v412[3];
  int v413;
  uint64_t (**v414)();
  uint64_t v415;
  std::__shared_weak_count *v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  int v420;
  __int16 v421;
  char v422;
  int v423;
  _QWORD v424[4];

  v424[1] = *MEMORY[0x24BDAC8D0];
  if (!*a1)
  {
    v29 = (char *)operator new(0x20uLL);
    strcpy(v29, "ML model is not initialized!");
    *(_QWORD *)a5 = off_24C06E9E8;
    *(_BYTE *)(a5 + 8) = 5;
    v30 = operator new(0x18uLL);
    sub_207CA40D8(v30, v29, 0x1CuLL);
    *(_QWORD *)(a5 + 16) = v30;
    v31 = operator new(0x20uLL);
    *v31 = &unk_24C06F1C0;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v30;
    *(_QWORD *)(a5 + 24) = v31;
    operator delete(v29);
    return;
  }
  v372 = off_24C06E9E8;
  v373 = 10;
  v10 = operator new(0x18uLL);
  *(_QWORD *)v10 = 0;
  v10[23] = 0;
  *(_QWORD *)&v374 = v10;
  v11 = operator new(0x20uLL);
  *v11 = &unk_24C06F1C0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v10;
  *((_QWORD *)&v374 + 1) = v11;
  LOBYTE(__p[0]) = 0;
  v377 = 0;
  *(_OWORD *)v369 = 0u;
  v370 = 0u;
  v371 = 733221720;
  kdebug_trace();
  v366 = 0;
  v367 = 0;
  v368 = 0;
  v12 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a2 + 48) && v12)
  {
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(std::__shared_weak_count **)(a2 + 16);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v13 + 88))(v13, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v12 = *(_QWORD *)(a2 + 24);
  }
  LOBYTE(v343) = 0;
  v347 = 0;
  v378 = xmmword_208238240;
  LODWORD(v379) = 1;
  LOBYTE(v330) = 0;
  BYTE4(v331) = 0;
  sub_20809F1D0((uint64_t)v356, v12, &v378, &v330, &xmmword_20823831C, (uint64_t)&v343);
  if (v347)
  {
    v18 = (std::__shared_weak_count *)v344;
    if ((_QWORD)v344)
    {
      v19 = (unint64_t *)(v344 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v386 = *(_OWORD *)v356;
  v387 = *(_OWORD *)&v356[16];
  *(_OWORD *)v388 = *(_OWORD *)&v356[32];
  LODWORD(v389) = v357;
  LOBYTE(v390) = 0;
  v398 = 0;
  if (v365)
  {
    v390 = off_24C06E878;
    v21 = v358;
    v22 = v359;
    if (v359)
    {
      v23 = (unint64_t *)&v359->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = v362;
      v26 = v363;
      v27 = v364;
      do
        v28 = __ldxr(v23);
      while (__stxr(v28 + 1, v23));
    }
    else
    {
      v25 = v362;
      v26 = v363;
      v27 = v364;
    }
    v391 = v21;
    v392 = v22;
    v393 = v360;
    v394 = v361;
    v395 = v25;
    v396 = v26;
    v397 = v27;
    if (v22)
    {
      v32 = (unint64_t *)&v22->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v398 = 1;
  }
  v327 = a3;
  v328 = a4;
  v399 = 1;
  v34 = *(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 104) && v34)
  {
    v35 = *(_QWORD *)(a2 + 64);
    v36 = *(std::__shared_weak_count **)(a2 + 72);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      do
        v39 = __ldaxr(v37);
      while (__stlxr(v39 - 1, v37));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v35 + 88))(v35, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v34 = *(_QWORD *)(a2 + 80);
  }
  LOBYTE(v330) = 0;
  v334 = 0;
  v381 = xmmword_208238250;
  v382 = 1;
  LOBYTE(v378) = 0;
  BYTE4(v379) = 0;
  sub_20809F1D0((uint64_t)&v343, v34, &v381, &v378, &xmmword_20823834C, (uint64_t)&v330);
  if (v334)
  {
    v40 = (std::__shared_weak_count *)v331;
    if ((_QWORD)v331)
    {
      v41 = (unint64_t *)(v331 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v400[0] = v343;
  v400[1] = v344;
  v400[2] = v345;
  v401 = v346;
  LOBYTE(v402) = 0;
  v410 = 0;
  if (v355)
  {
    v402 = off_24C06E878;
    v43 = v348;
    v44 = v349;
    if (v349)
    {
      v45 = (unint64_t *)&v349->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = v352;
      v48 = v353;
      v49 = v354;
      do
        v50 = __ldxr(v45);
      while (__stxr(v50 + 1, v45));
    }
    else
    {
      v47 = v352;
      v48 = v353;
      v49 = v354;
    }
    v403 = v43;
    v404 = v44;
    v405 = v350;
    v406 = v351;
    v407 = v47;
    v408 = v48;
    v409 = v49;
    if (v44)
    {
      v51 = (unint64_t *)&v44->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v410 = 1;
  }
  v411 = 1;
  v53 = *(_QWORD *)(a2 + 136);
  if (*(_BYTE *)(a2 + 160) && v53)
  {
    v54 = *(_QWORD *)(a2 + 120);
    v55 = *(std::__shared_weak_count **)(a2 + 128);
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      do
        v58 = __ldaxr(v56);
      while (__stlxr(v58 - 1, v56));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v54 + 88))(v54, 1, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v53 = *(_QWORD *)(a2 + 136);
  }
  LOBYTE(v378) = 0;
  v380 = 0;
  v384 = xmmword_208238250;
  v385 = 1;
  LOBYTE(v381) = 0;
  v383 = 0;
  sub_20809F1D0((uint64_t)&v330, v53, &v384, &v381, &xmmword_20823834C, (uint64_t)&v378);
  if (v380)
  {
    v59 = v379;
    if (v379)
    {
      v60 = (unint64_t *)&v379->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  v412[0] = v330;
  v412[1] = v331;
  v412[2] = v332;
  v413 = v333;
  LOBYTE(v414) = 0;
  v422 = 0;
  if (v342)
  {
    v414 = off_24C06E878;
    v62 = v335;
    v63 = v336;
    if (v336)
    {
      v64 = (unint64_t *)&v336->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
      v66 = v339;
      v67 = v340;
      v68 = v341;
      do
        v69 = __ldxr(v64);
      while (__stxr(v69 + 1, v64));
    }
    else
    {
      v66 = v339;
      v67 = v340;
      v68 = v341;
    }
    v415 = v62;
    v416 = v63;
    v417 = v337;
    v418 = v338;
    v419 = v66;
    v420 = v67;
    v421 = v68;
    if (v63)
    {
      v70 = (unint64_t *)&v63->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v422 = 1;
  }
  v423 = 1;
  sub_207D552FC((uint64_t *)&v366, (uint64_t)&v386, (uint64_t)v424, 3uLL);
  if (v423 != -1)
    ((void (*)(__int128 *, _OWORD *))off_24C0755E0[v423])(&v378, v412);
  v423 = -1;
  if (v411 != -1)
    ((void (*)(__int128 *, _OWORD *))off_24C0755E0[v411])(&v378, v400);
  v411 = -1;
  if (v399 != -1)
    ((void (*)(__int128 *, __int128 *))off_24C0755E0[v399])(&v378, &v386);
  v399 = -1;
  if (v342)
  {
    v72 = v336;
    if (v336)
    {
      v73 = (unint64_t *)&v336->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
  if (v355)
  {
    v75 = v349;
    if (v349)
    {
      v76 = (unint64_t *)&v349->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
  }
  if (v365)
  {
    v78 = v359;
    if (v359)
    {
      v79 = (unint64_t *)&v359->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
  }
  sub_2080BA4D8(*(_QWORD *)(*a1 + 16), &v366, 0, 0, (uint64_t)&v386);
  v373 = BYTE8(v386);
  v81 = v387;
  if (*((_QWORD *)&v387 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
  v374 = v81;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
      v87 = v377;
      v88 = v390;
      if (v377 == v390)
        goto LABEL_122;
LABEL_134:
      if (v87)
      {
        v95 = (char *)__p[0];
        if (__p[0])
        {
          v96 = (char *)__p[1];
          v97 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              if (*(v96 - 8))
              {
                v98 = (std::__shared_weak_count *)*((_QWORD *)v96 - 6);
                if (v98)
                {
                  v99 = (unint64_t *)&v98->__shared_owners_;
                  do
                    v100 = __ldaxr(v99);
                  while (__stlxr(v100 - 1, v99));
                  if (!v100)
                  {
                    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                    std::__shared_weak_count::__release_weak(v98);
                  }
                }
              }
              v96 -= 120;
            }
            while (v96 != v95);
            v97 = __p[0];
          }
          __p[1] = v95;
          operator delete(v97);
        }
        v377 = 0;
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v388;
        v376 = v389;
        v388[1] = 0;
        v389 = 0;
        v388[0] = 0;
        v377 = 1;
      }
      goto LABEL_152;
    }
  }
  v87 = v377;
  v88 = v390;
  if (v377 != v390)
    goto LABEL_134;
LABEL_122:
  if (!v87)
    goto LABEL_153;
  v89 = (char *)__p[0];
  if (__p[0])
  {
    v90 = (char *)__p[1];
    v91 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*(v90 - 8))
        {
          v92 = (std::__shared_weak_count *)*((_QWORD *)v90 - 6);
          if (v92)
          {
            v93 = (unint64_t *)&v92->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
        }
        v90 -= 120;
      }
      while (v90 != v89);
      v91 = __p[0];
    }
    __p[1] = v89;
    operator delete(v91);
  }
  *(_OWORD *)__p = *(_OWORD *)v388;
  v376 = v389;
  v388[1] = 0;
  v389 = 0;
  v388[0] = 0;
LABEL_152:
  v88 = v390;
LABEL_153:
  if (v88)
  {
    v101 = (char *)v388[0];
    if (v388[0])
    {
      v102 = (char *)v388[1];
      v103 = v388[0];
      if (v388[1] != v388[0])
      {
        do
        {
          if (*(v102 - 8))
          {
            v104 = (std::__shared_weak_count *)*((_QWORD *)v102 - 6);
            if (v104)
            {
              v105 = (unint64_t *)&v104->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
          }
          v102 -= 120;
        }
        while (v102 != v101);
        v103 = v388[0];
      }
      v388[1] = v101;
      operator delete(v103);
    }
  }
  *(_QWORD *)&v386 = off_24C06E9E8;
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (!*((_QWORD *)&v387 + 1))
    goto LABEL_170;
  v108 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
  do
    v109 = __ldaxr(v108);
  while (__stlxr(v109 - 1, v108));
  if (!v109)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    v110 = v373;
    if (v373)
      goto LABEL_171;
  }
  else
  {
LABEL_170:
    v110 = v373;
    if (v373)
    {
LABEL_171:
      *(_QWORD *)a5 = off_24C06E9E8;
      *(_BYTE *)(a5 + 8) = v110;
      v111 = *((_QWORD *)&v374 + 1);
      *(_QWORD *)(a5 + 16) = v374;
      *(_QWORD *)(a5 + 24) = v111;
      if (v111)
      {
        v112 = (unint64_t *)(v111 + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      v114 = (char *)v366;
      if (v366)
      {
        v115 = v367;
        v116 = v366;
        if (v367 != v366)
        {
          do
          {
            v117 = v115 - 128;
            v118 = *((unsigned int *)v115 - 2);
            if ((_DWORD)v118 != -1)
              ((void (*)(__int128 *, char *))off_24C0755E0[v118])(&v386, v115 - 128);
            *((_DWORD *)v115 - 2) = -1;
            v115 -= 128;
          }
          while (v117 != v114);
          v116 = v366;
        }
        v367 = v114;
        operator delete(v116);
      }
      goto LABEL_210;
    }
  }
  v119 = (char *)v366;
  if (v366)
  {
    v120 = v367;
    v121 = v366;
    if (v367 != v366)
    {
      do
      {
        v122 = v120 - 128;
        v123 = *((unsigned int *)v120 - 2);
        if ((_DWORD)v123 != -1)
          ((void (*)(__int128 *, char *))off_24C0755E0[v123])(&v386, v120 - 128);
        *((_DWORD *)v120 - 2) = -1;
        v120 -= 128;
      }
      while (v122 != v119);
      v121 = v366;
    }
    v367 = v119;
    operator delete(v121);
  }
  kdebug_trace();
  v330 = 0u;
  v331 = 0u;
  LODWORD(v332) = 733221728;
  kdebug_trace();
  if (!v377
    || (v124 = (__int128 *)__p[0], (void *)((char *)__p[1] - (char *)__p[0]) != (void *)120)
    || *(_DWORD *)__p[0] != 1
    || *((_DWORD *)__p[0] + 1) != 128
    || *((_DWORD *)__p[0] + 2) != 128
    || *((_DWORD *)__p[0] + 3) != 5
    || *((_DWORD *)__p[0] + 4) != 1)
  {
    v136 = (char *)operator new(0x28uLL);
    strcpy(v136, "Unexpected ML model output layout!");
    *(_QWORD *)a5 = off_24C06E9E8;
    *(_BYTE *)(a5 + 8) = 10;
    v137 = operator new(0x18uLL);
    sub_207CA40D8(v137, v136, 0x22uLL);
    *(_QWORD *)(a5 + 16) = v137;
    v138 = operator new(0x20uLL);
    *v138 = &unk_24C06F1C0;
    v138[1] = 0;
    v138[2] = 0;
    v138[3] = v137;
    *(_QWORD *)(a5 + 24) = v138;
    operator delete(v136);
    goto LABEL_210;
  }
  if (__p[1] == __p[0])
    sub_207CBA8AC();
  if ((*((_BYTE *)__p[0] + 48) & 0x40) == 0
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/include/Kit/ML/Execution.h", 225, (uint64_t)"o.Format().Contains(FormatFlags::FLOAT32)", 41, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v125 = *v124;
  v126 = v124[1];
  v127 = v124[2];
  LODWORD(v389) = *((_DWORD *)v124 + 12);
  v387 = v126;
  *(_OWORD *)v388 = v127;
  v386 = v125;
  LOBYTE(v390) = 0;
  v398 = 0;
  if (*((_BYTE *)v124 + 112))
  {
    v390 = off_24C06E878;
    v128 = *((_QWORD *)v124 + 8);
    v129 = (std::__shared_weak_count *)*((_QWORD *)v124 + 9);
    if (v129)
    {
      v130 = (unint64_t *)&v129->__shared_owners_;
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
      v132 = *((_QWORD *)v124 + 12);
      v133 = *((_DWORD *)v124 + 26);
      v134 = *((_WORD *)v124 + 54);
      do
        v135 = __ldxr(v130);
      while (__stxr(v135 + 1, v130));
    }
    else
    {
      v132 = *((_QWORD *)v124 + 12);
      v133 = *((_DWORD *)v124 + 26);
      v134 = *((_WORD *)v124 + 54);
    }
    v391 = v128;
    v392 = v129;
    v148 = *((_DWORD *)v124 + 22);
    v393 = *((_QWORD *)v124 + 10);
    v394 = v148;
    v395 = v132;
    v396 = v133;
    v397 = v134;
    if (v129)
    {
      v149 = (unint64_t *)&v129->__shared_owners_;
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v398 = 1;
  }
  sub_207CB36E8((uint64_t)&v386, (uint64_t)v356);
  v329 = *(_QWORD *)v356;
  v151 = HIDWORD(*(_QWORD *)&v356[12]);
  if (*(_DWORD *)&v356[12])
    v152 = v151 == 0;
  else
    v152 = 1;
  if (v152)
    LODWORD(v151) = 0;
  v326 = HIDWORD(*(_QWORD *)&v356[32]);
  if ((_DWORD)v151 * *(_DWORD *)&v356[36] == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_434;
  }
  sub_207CB36E8((uint64_t)&v386, (uint64_t)v356);
  v153 = *(unsigned int *)&v356[40];
  v154 = *(_QWORD *)v356;
  v155 = HIDWORD(*(_QWORD *)&v356[12]);
  if (*(_DWORD *)&v356[12])
    v156 = v155 == 0;
  else
    v156 = 1;
  if (v156)
    LODWORD(v155) = 0;
  v325 = HIDWORD(*(_QWORD *)&v356[32]);
  if ((_DWORD)v155 * *(_DWORD *)&v356[36] == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_434;
  }
  sub_207CB36E8((uint64_t)&v386, (uint64_t)v356);
  v323 = *(_DWORD *)&v356[40];
  v157 = *(_QWORD *)v356;
  v158 = HIDWORD(*(_QWORD *)&v356[12]);
  if (*(_DWORD *)&v356[12])
    v159 = v158 == 0;
  else
    v159 = 1;
  if (v159)
    LODWORD(v158) = 0;
  v324 = HIDWORD(*(_QWORD *)&v356[32]);
  if ((_DWORD)v158 * *(_DWORD *)&v356[36] == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_434;
  }
  sub_207CB36E8((uint64_t)&v386, (uint64_t)v356);
  v160 = *(_DWORD *)&v356[40];
  v322 = *(_QWORD *)v356;
  v161 = HIDWORD(*(_QWORD *)&v356[12]);
  if (*(_DWORD *)&v356[12])
    v162 = v161 == 0;
  else
    v162 = 1;
  if (v162)
    LODWORD(v161) = 0;
  v163 = HIDWORD(*(_QWORD *)&v356[32]);
  if ((_DWORD)v161 * *(_DWORD *)&v356[36] == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    goto LABEL_434;
  }
  sub_207CB36E8((uint64_t)&v386, (uint64_t)v356);
  v164 = *(_DWORD *)&v356[40];
  v165 = *(_QWORD *)v356;
  v166 = HIDWORD(*(_QWORD *)&v356[12]);
  if (*(_DWORD *)&v356[12])
    v167 = v166 == 0;
  else
    v167 = 1;
  if (v167)
    LODWORD(v166) = 0;
  v168 = HIDWORD(*(_QWORD *)&v356[32]);
  if ((_DWORD)v166 * *(_DWORD *)&v356[36] == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
LABEL_434:
    abort();
  }
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = v165 + 4 * (4 * v164);
  v176 = v322 + 4 * (3 * v160);
  v177 = v157 + 4 * (2 * v323);
  v178 = v154 + 4 * v153;
  v179 = 1132396544;
  while (2)
  {
    v180 = 0;
    v181 = 0;
    v182 = 0;
    v183 = v175 + 4 * v173;
    v184 = v176 + 4 * v172;
    v185 = v177 + 4 * v171;
    v187 = *(_DWORD *)(v327 + 40);
    v188 = *(_QWORD *)(v327 + 24) + (*(_DWORD *)(v327 + 44) * v174);
    v189 = *(_DWORD *)(v328 + 40);
    v190 = *(_QWORD *)(v328 + 24) + (*(_DWORD *)(v328 + 44) * v174);
    v191 = v329 + 4 * v169;
    do
    {
      v194 = *(float *)(v191 + v182);
      v186 = v178 + 4 * v170;
      v195 = *(float *)(v186 + v182);
      v193 = v194 < v195;
      v196 = *(float *)(v185 + v182);
      if (v194 >= v195)
        v197 = *(float *)(v191 + v182);
      else
        v197 = *(float *)(v186 + v182);
      if (v194 >= v195)
        v194 = *(float *)(v186 + v182);
      if (v196 > v194)
        v194 = *(float *)(v185 + v182);
      v198 = v196 <= v197;
      if (v196 <= v197)
        v199 = v197;
      else
        v199 = *(float *)(v185 + v182);
      if (v196 <= v197)
        v197 = v194;
      if (!v198)
        v193 = 2;
      v200 = *(float *)(v184 + v182);
      if (v200 <= v199)
      {
        v201 = v199;
        if (v200 <= v197)
        {
          v199 = v197;
          v202 = *(float *)(v183 + v182);
          if (v202 > v201)
          {
LABEL_274:
            v192 = v202;
            v193 = 4;
            goto LABEL_275;
          }
        }
        else
        {
          v199 = *(float *)(v184 + v182);
          v202 = *(float *)(v183 + v182);
          if (v202 > v201)
            goto LABEL_274;
        }
      }
      else
      {
        v201 = *(float *)(v184 + v182);
        v193 = 3;
        v202 = *(float *)(v183 + v182);
        if (v202 > v200)
          goto LABEL_274;
      }
      v192 = v201;
      if (v202 <= v199)
        v201 = v199;
      else
        v201 = v202;
LABEL_275:
      *(_BYTE *)(v188 + v180) = v193;
      *(_BYTE *)(v190 + v181) = llroundf((float)((float)(v201 - v192) + 1.0) * 255.0);
      v182 += 4;
      v181 += v189;
      v180 += v187;
    }
    while (v182 != 512);
    ++v174;
    v173 += v168;
    v172 += v163;
    v171 += v324;
    v170 += v325;
    v169 += v326;
    if (v174 != 128)
      continue;
    break;
  }
  *(_QWORD *)v356 = off_24C06EB30;
  v203 = v328;
  v204 = *(_QWORD *)(v328 + 8);
  v205 = *(std::__shared_weak_count **)(v328 + 16);
  if (v205)
  {
    v206 = (unint64_t *)&v205->__shared_owners_;
    do
      v207 = __ldxr(v206);
    while (__stxr(v207 + 1, v206));
    v208 = *(_WORD *)(v328 + 48);
    do
      v209 = __ldxr(v206);
    while (__stxr(v209 + 1, v206));
    v210 = *(_QWORD *)(v328 + 24);
    *(_OWORD *)&v356[32] = *(_OWORD *)(v328 + 32);
    do
      v211 = __ldxr(v206);
    while (__stxr(v211 + 1, v206));
    *(_QWORD *)&v356[8] = v204;
    *(_QWORD *)&v356[16] = v205;
    *(_QWORD *)&v356[24] = v210;
    LOWORD(v357) = v208;
    do
      v212 = __ldaxr(v206);
    while (__stlxr(v212 - 1, v206));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v205->__on_zero_shared)(v205, 1132396544);
      std::__shared_weak_count::__release_weak(v205);
    }
    do
      v213 = __ldaxr(v206);
    while (__stlxr(v213 - 1, v206));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v205->__on_zero_shared)(v205, v179);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  else
  {
    v214 = *(_WORD *)(v328 + 48);
    v215 = *(_QWORD *)(v328 + 24);
    *(_QWORD *)&v356[8] = *(_QWORD *)(v328 + 8);
    *(_QWORD *)&v356[16] = 0;
    *(_QWORD *)&v356[24] = v215;
    *(_OWORD *)&v356[32] = *(_OWORD *)(v328 + 32);
    LOWORD(v357) = v214;
  }
  *(_QWORD *)&v343 = &off_24C0753F8;
  sub_207DDD610((uint64_t)(a1 + 1), (uint64_t *)&v343 + 1);
  sub_207DE0BD0((uint64_t)v356, (uint64_t)&v343);
  v216 = (std::__shared_weak_count *)v344;
  if ((_QWORD)v344)
  {
    v217 = (unint64_t *)(v344 + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = *(std::__shared_weak_count **)&v356[16];
  if (*(_QWORD *)&v356[16])
  {
    v220 = (unint64_t *)(*(_QWORD *)&v356[16] + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  *(_QWORD *)v356 = off_24C06EB30;
  v223 = a1[2];
  v222 = (std::__shared_weak_count *)a1[3];
  *(_QWORD *)&v343 = v223;
  *((_QWORD *)&v343 + 1) = v222;
  if (v222)
  {
    v224 = (unint64_t *)&v222->__shared_owners_;
    do
      v225 = __ldxr(v224);
    while (__stxr(v225 + 1, v224));
    *(_QWORD *)&v378 = v223;
    *((_QWORD *)&v378 + 1) = v222;
    do
      v226 = __ldxr(v224);
    while (__stxr(v226 + 1, v224));
    do
      v227 = __ldxr(v224);
    while (__stxr(v227 + 1, v224));
    *(_QWORD *)&v356[8] = v223;
    *(_QWORD *)&v356[16] = v222;
    do
      v228 = __ldxr(v224);
    while (__stxr(v228 + 1, v224));
    do
      v229 = __ldaxr(v224);
    while (__stlxr(v229 - 1, v224));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  else
  {
    v378 = v223;
    *(_QWORD *)&v356[8] = v223;
    *(_QWORD *)&v356[16] = 0;
  }
  (*(void (**)(void **__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v223 + 72))(v369, v223, 1);
  v230 = v369[0];
  v231 = *((_QWORD *)v369[0] + 2);
  *(_OWORD *)&v356[24] = *(_OWORD *)v369[0];
  *(_QWORD *)&v356[40] = v231;
  v369[0] = 0;
  operator delete(v230);
  v232 = *(_QWORD *)&v356[8];
  v233 = *(std::__shared_weak_count **)&v356[16];
  if (*(_QWORD *)&v356[16])
  {
    v234 = (unint64_t *)(*(_QWORD *)&v356[16] + 8);
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
    do
      v236 = __ldaxr(v234);
    while (__stlxr(v236 - 1, v234));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v237 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v232 + 104))(v232);
  v238 = v237;
  if ((v237 & 0xFFFFFF) <= 0x10000)
    v238 = 0;
  v239 = v237 & 0xFF00;
  if ((v237 & 0xFF0000) == 0)
    v239 = 0;
  LOWORD(v357) = v239 & 0xFF00 | v238;
  v240 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
  if (*((_QWORD *)&v378 + 1))
  {
    v241 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
  if (*((_QWORD *)&v343 + 1))
  {
    v244 = (unint64_t *)(*((_QWORD *)&v343 + 1) + 8);
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = *(_DWORD *)&v356[40];
  v247 = *(_QWORD *)&v356[24];
  v248 = *(_DWORD *)(v328 + 40);
  v249 = *(_BYTE **)(v328 + 24);
  *v249 = **(_BYTE **)&v356[24];
  v250 = *(_DWORD *)(v328 + 32);
  v251 = (v250 - 1);
  if (v250 != 1)
  {
    v252 = 1;
    if (v251 < 8 || v248 != 1 || v246 != 1)
      goto LABEL_359;
    v312 = (v250 - 2) + 2;
    if ((unint64_t)(v249 + 1) >= v247 + v312 || v247 >= (unint64_t)&v249[v312])
    {
      if (v251 >= 0x20)
      {
        v315 = 0;
        v314 = v251 & 0xFFFFFFE0;
        do
        {
          v316 = (v315 + 1);
          v317 = (uint8x16_t *)(v247 + (v315 & 0xFFFFFFE0));
          v318 = vmaxq_u8(*v317, *(uint8x16_t *)(v247 + v316));
          v319 = vmaxq_u8(v317[1], *(uint8x16_t *)(v247 + v316 + 16));
          v320 = (uint8x16_t *)&v249[v316];
          *v320 = v318;
          v320[1] = v319;
          v315 += 32;
        }
        while (v314 != v315);
        if (v314 == v251)
          goto LABEL_363;
        if ((((_BYTE)v250 - 1) & 0x18) == 0)
        {
          v252 = v314 | 1;
          v203 = v328;
          goto LABEL_359;
        }
      }
      else
      {
        v314 = 0;
      }
      v321 = v251 & 0xFFFFFFF8;
      v252 = v251 & 0xFFFFFFF8 | 1;
      do
      {
        *(uint8x8_t *)&v249[(v314 + 1)] = vmax_u8(*(uint8x8_t *)(v247 + (v314 & 0xFFFFFFF8)), *(uint8x8_t *)(v247 + (v314 + 1)));
        v314 += 8;
      }
      while (v321 != v314);
      v203 = v328;
      if (v321 != v251)
        goto LABEL_359;
    }
    else
    {
      v252 = 1;
LABEL_359:
      v253 = 0;
      v254 = v250 - v252;
      v255 = v248 * v252;
      v256 = v246 * v252;
      v257 = v246 * (v252 - 1);
      do
      {
        v258 = *(unsigned __int8 *)(v247 + (v257 + v253));
        if (v258 <= *(unsigned __int8 *)(v247 + (v256 + v253)))
          LOBYTE(v258) = *(_BYTE *)(v247 + (v256 + v253));
        v249[v255] = v258;
        v255 += v248;
        v253 += v246;
        --v254;
      }
      while (v254);
    }
  }
LABEL_363:
  v259 = *(_DWORD *)(v203 + 36);
  if (v259 != 1)
  {
    v268 = 0;
    v269 = *(_DWORD *)&v356[44];
    v270 = v247 + 2;
    for (i = 1; i != v259; ++i)
    {
      v272 = (unsigned __int8 *)(v247 + (v269 * (i - 1)));
      v273 = (_BYTE *)(v247 + (v269 * i));
      v274 = *(_DWORD *)(v203 + 40);
      v275 = (*(_DWORD *)(v203 + 44) * i);
      v276 = *(_QWORD *)(v203 + 24);
      v277 = (_BYTE *)(v276 + v275);
      v278 = *v272;
      if (v278 <= *v273)
        LOBYTE(v278) = *v273;
      *v277 = v278;
      v279 = *(_DWORD *)(v203 + 32);
      v280 = (v279 - 1);
      if (v279 == 1)
        goto LABEL_377;
      v281 = 1;
      if (v280 < 8 || v274 != 1 || v246 != 1)
        goto LABEL_407;
      v282 = (v269 * v268);
      v283 = (v269 + v282);
      v284 = v247 + v283;
      v285 = v276 + v275 + 1;
      v286 = (v279 - 2);
      v287 = v276 + v286 + v275 + 2;
      v288 = v270 + v283 + v286;
      v289 = v285 >= v270 + v282 + v286 || v247 + v282 >= v287;
      v290 = !v289;
      v281 = 1;
      v291 = v284 >= v287 || v285 >= v288;
      if (!v291 || v290)
        goto LABEL_407;
      if (v280 >= 0x20)
      {
        v293 = 0;
        v292 = v280 & 0xFFFFFFE0;
        do
        {
          v294 = (v293 + 1);
          v295 = (uint8x16_t *)&v272[v293 & 0xFFFFFFE0];
          v296 = (uint8x16_t *)&v273[v293 & 0xFFFFFFE0];
          v297 = vmaxq_u8(vmaxq_u8(*v295, *(uint8x16_t *)&v272[v294]), vmaxq_u8(*v296, *(uint8x16_t *)&v273[v294]));
          v298 = vmaxq_u8(vmaxq_u8(v295[1], *(uint8x16_t *)&v272[v294 + 16]), vmaxq_u8(v296[1], *(uint8x16_t *)&v273[v294 + 16]));
          v299 = (uint8x16_t *)&v277[v294];
          *v299 = v297;
          v299[1] = v298;
          v293 += 32;
        }
        while (v292 != v293);
        if (v292 == v280)
          goto LABEL_377;
        if ((((_BYTE)v279 - 1) & 0x18) == 0)
        {
          v281 = v292 | 1;
LABEL_407:
          v301 = 0;
          v302 = v279 - v281;
          v303 = v274 * v281;
          v304 = v246 * v281;
          v305 = v246 * (v281 - 1);
          do
          {
            v306 = (v305 + v301);
            v307 = (v304 + v301);
            v308 = v272[v306];
            v309 = v272[v307];
            v310 = v273[v306];
            v311 = v273[v307];
            if (v308 <= v309)
              v308 = v309;
            if (v310 <= v311)
              v310 = v311;
            if (v308 > v310)
              LOBYTE(v310) = v308;
            v277[v303] = v310;
            v303 += v274;
            v301 += v246;
            --v302;
          }
          while (v302);
          goto LABEL_377;
        }
      }
      else
      {
        v292 = 0;
      }
      v300 = v280 & 0xFFFFFFF8;
      v281 = v280 & 0xFFFFFFF8 | 1;
      do
      {
        *(uint8x8_t *)&v277[(v292 + 1)] = vmax_u8(vmax_u8(*(uint8x8_t *)&v272[v292 & 0xFFFFFFF8], *(uint8x8_t *)&v272[(v292 + 1)]), vmax_u8(*(uint8x8_t *)&v273[v292 & 0xFFFFFFF8], *(uint8x8_t *)&v273[(v292 + 1)]));
        v292 += 8;
      }
      while (v300 != v292);
      if (v300 != v280)
        goto LABEL_407;
LABEL_377:
      ++v268;
    }
  }
  v260 = *(std::__shared_weak_count **)&v356[16];
  if (*(_QWORD *)&v356[16])
  {
    v261 = (unint64_t *)(*(_QWORD *)&v356[16] + 8);
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  *(_QWORD *)a5 = off_24C06E9E8;
  *(_BYTE *)(a5 + 8) = 0;
  v263 = operator new(0x18uLL);
  *(_QWORD *)v263 = 0;
  v263[23] = 0;
  *(_QWORD *)(a5 + 16) = v263;
  v264 = operator new(0x20uLL);
  *v264 = &unk_24C06F1C0;
  v264[1] = 0;
  v264[2] = 0;
  v264[3] = v263;
  *(_QWORD *)(a5 + 24) = v264;
  if (v398)
  {
    v265 = v392;
    if (v392)
    {
      v266 = (unint64_t *)&v392->__shared_owners_;
      do
        v267 = __ldaxr(v266);
      while (__stlxr(v267 - 1, v266));
      if (!v267)
      {
        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
        std::__shared_weak_count::__release_weak(v265);
      }
    }
  }
LABEL_210:
  kdebug_trace();
  if (v377)
  {
    v139 = (char *)__p[0];
    if (__p[0])
    {
      v140 = (char *)__p[1];
      v141 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*(v140 - 8))
          {
            v142 = (std::__shared_weak_count *)*((_QWORD *)v140 - 6);
            if (v142)
            {
              v143 = (unint64_t *)&v142->__shared_owners_;
              do
                v144 = __ldaxr(v143);
              while (__stlxr(v144 - 1, v143));
              if (!v144)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v142);
              }
            }
          }
          v140 -= 120;
        }
        while (v140 != v139);
        v141 = __p[0];
      }
      __p[1] = v139;
      operator delete(v141);
    }
  }
  v372 = off_24C06E9E8;
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v374 + 1);
  if (*((_QWORD *)&v374 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v374 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
}

void sub_207DE3FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  operator delete(v11);
  sub_207CA140C((uint64_t)&STACK[0x2C0]);
  sub_207CD822C((uint64_t)va);
  sub_207CA86F4((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_207DE4078(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_207C9CFA4(a1);
}

uint64_t sub_207DE41EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207DE4258(uint64_t a1, uint64_t a2)
{
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t (**v20)();
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  sub_2080A19F8(a2, (uint64_t)&v19);
  v4 = v21;
  if (v21)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = off_24C06E9E8;
    *(_BYTE *)(a1 + 40) = v4;
    v5 = v23;
    *(_QWORD *)(a1 + 48) = v22;
    *(_QWORD *)(a1 + 56) = v5;
    if (!v5)
      goto LABEL_20;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v20 = off_24C06E9E8;
  }
  else
  {
    v8 = (std::__shared_weak_count *)operator new(0xC8uLL);
    v8->__shared_owners_ = 0;
    v9 = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24C0755A0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084A40;
    sub_207CA4F70((uint64_t)&v8[1].__shared_owners_, (uint64_t *)(a2 + 8));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)off_24C084918;
    sub_207D4EC30((uint64_t)&v8[6].__shared_owners_, a2 + 128);
    v8[7].__shared_weak_owners_ = *(_QWORD *)(a2 + 160);
    LOWORD(v8[8].__vftable) = *(_WORD *)(a2 + 168);
    v10 = v19;
    v19 = 0;
    do
      v11 = __ldxr(v9);
    while (__stxr(v11 + 1, v9));
    if (!v10
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ML/src/Model.cpp", 39, (uint64_t)"instance_ != nullptr", 20, (uint64_t)&unk_2082258F5, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)a1 = v8 + 1;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = off_24C06E9E8;
    *(_BYTE *)(a1 + 40) = 0;
    v12 = v23;
    *(_QWORD *)(a1 + 48) = v22;
    *(_QWORD *)(a1 + 56) = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    do
      v15 = __ldaxr(v9);
    while (__stlxr(v15 - 1, v9));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    v5 = v23;
    v20 = off_24C06E9E8;
    if (!v23)
      goto LABEL_20;
  }
  v16 = (unint64_t *)&v5->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    result = v19;
    if (v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
LABEL_20:
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_207DE44D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  a15 = 0;
  sub_207C99D78((uint64_t)&a13);
  sub_207C99D78((uint64_t)&a11);
  sub_207C99D78((uint64_t)&a9);
  sub_207D4EA24(&a16);
  _Unwind_Resume(a1);
}

void sub_207DE4508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13;
  va_list va;

  va_start(va, a8);
  *v10 = v11;
  sub_207CA6534(v9);
  std::__shared_weak_count::~__shared_weak_count(v8);
  operator delete(v13);
  sub_207D4EA24((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE453C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_207D4EA24((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE4550(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DE4560(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DE4580(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_207DE4590(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0755A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DE45A0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0755A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DE45C0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_207DE45D0(float32x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int32x2_t *a8@<X7>, uint64_t a9@<X8>, float32x4_t a10@<Q3>)
{
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v13;
  uint64x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  unsigned int v17;
  float32x2_t v18;
  float32x4_t v19;
  unsigned int v20;
  int8x8_t v21;
  int8x8_t v22;
  float32x2_t v23;
  unsigned int v24;
  int8x8_t v25;
  float32x2_t v26;
  float32x2_t v27;
  unsigned int v28;
  int8x16_t v29;
  float32x2_t v30;
  float v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v41;
  float32x2_t v42;
  int32x2_t v43;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x2_t v53;
  __float2 v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  int8x16_t v62;
  float32x4_t v63;

  v13 = (int8x8_t)*a1;
  v14.i64[0] = a2;
  v14.i64[1] = a3;
  v15 = vcvt_f32_f64(vcvtq_f64_u64(v14));
  v16 = vmul_f32(a1[1], v15);
  if ((vcgt_f32(*a1, v16).u8[0] & 1) != 0)
    v17 = -1;
  else
    v17 = 0;
  *(int32x2_t *)a10.f32 = vdup_n_s32(v17);
  v18.i32[0] = vbsl_s8(*(int8x8_t *)a10.f32, (int8x8_t)v16, v13).u32[0];
  v18.i32[1] = HIDWORD(*(unint64_t *)a1);
  *(int8x8_t *)a10.f32 = vbsl_s8(*(int8x8_t *)a10.f32, v13, (int8x8_t)v16);
  v19 = a10;
  v19.i32[1] = v16.i32[1];
  if ((vcgt_f32(v18, v16).i32[1] & 1) != 0)
    v20 = -1;
  else
    v20 = 0;
  v21 = (int8x8_t)vdup_n_s32(v20);
  v22 = vbsl_s8(v21, (int8x8_t)v18, *(int8x8_t *)v19.f32);
  v18.i32[1] = vbsl_s8(v21, *(int8x8_t *)&v16, v13).i32[1];
  v23 = vmul_f32(v18, v15);
  if ((vcgt_f32(v23, *(float32x2_t *)v19.f32).u8[0] & 1) != 0)
    v24 = -1;
  else
    v24 = 0;
  v25 = (int8x8_t)vdup_n_s32(v24);
  v26.i32[0] = vbsl_s8(v25, (int8x8_t)v23, *(int8x8_t *)a10.f32).u32[0];
  v26.i32[1] = v22.i32[1];
  v27.i32[0] = vbsl_s8(v25, *(int8x8_t *)a10.f32, (int8x8_t)v23).u32[0];
  if ((vcgt_f32(v23, v26).i32[1] & 1) != 0)
    v28 = -1;
  else
    v28 = 0;
  *(int32x2_t *)a10.f32 = vdup_n_s32(v28);
  v27.i32[1] = vbsl_s8(*(int8x8_t *)&a10, v22, *(int8x8_t *)&v23).i32[1];
  v26.i32[1] = vbsl_s8(*(int8x8_t *)&a10, *(int8x8_t *)&v23, v22).i32[1];
  a10.i64[0] = *(_QWORD *)(a4 + 12);
  a10.i32[2] = *(_DWORD *)(a4 + 20);
  v19.i64[0] = *(_QWORD *)a4;
  v19.i32[2] = *(_DWORD *)(a4 + 8);
  v29 = (int8x16_t)vsubq_f32(a10, v19);
  v30 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
  LODWORD(v31) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(float32x2_t *)v29.i8, 1), v30, v30).u32[0];
  *(float32x2_t *)v29.i8 = vmul_f32(vadd_f32(v26, v27), (float32x2_t)0x3F0000003F000000);
  v30.i32[0] = *(_DWORD *)(a6 + 8);
  v10.i32[0] = *(_DWORD *)(a6 + 20);
  v11.i32[0] = *(_DWORD *)(a6 + 32);
  *(float32x2_t *)v32.f32 = vadd_f32(*(float32x2_t *)(a6 + 24), vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a6, *(float *)v29.i32), *(float32x2_t *)(a6 + 12), *(float32x2_t *)v29.i8, 1));
  *(float32x2_t *)&v32.u32[2] = vadd_f32(v11, vmla_lane_f32(vmul_f32(v30, *(float32x2_t *)v29.i8), v10, *(float32x2_t *)v29.i8, 1));
  v33 = vsub_f32(v26, v27);
  v34 = vmulq_n_f32(v32, (float)((float)((float)(*a5 + a5[4]) * 0.5) * sqrtf(v31))/ sqrtf(vmla_lane_f32(vmul_f32(v33, v33), (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1), v33, 1).f32[0]));
  *(_OWORD *)(a9 + 20) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 4) = 0u;
  *(_DWORD *)a9 = 1065353216;
  *(_DWORD *)(a9 + 20) = 1065353216;
  *(_DWORD *)(a9 + 40) = 1065353216;
  *(_DWORD *)(a9 + 60) = 1065353216;
  v35.i64[0] = 0x3F0000003F000000;
  v35.i64[1] = 0x3F0000003F000000;
  v36 = vmulq_f32(vaddq_f32(a10, v19), v35);
  v37 = vsubq_f32(v34, v36);
  *(_DWORD *)(a9 + 56) = v37.i32[2];
  *(_QWORD *)(a9 + 48) = v37.i64[0];
  if (*(_BYTE *)(a7 + 8) && a8[1].i8[4])
  {
    v38 = (float32x2_t)*a8;
    v39 = (float32x2_t)vdup_lane_s32(*a8, 1);
    v39.f32[0] = sqrtf(vmla_lane_f32(vmul_f32(v38, v38), v39, (float32x2_t)*a8, 1).f32[0]);
    if (v39.f32[0] != 0.0 && v39.f32[0] > 0.000001)
    {
      v41.f32[0] = *(float *)a7 * v15.f32[0];
      v41.i32[1] = vmuls_lane_f32(*(float *)(a7 + 4), v15, 1);
      v42 = vmla_f32(v41, vadd_f32(v16, v23), (float32x2_t)0xBF000000BF000000);
      v43 = (int32x2_t)vmla_lane_f32(vmul_f32(v42, v42), (float32x2_t)vdup_lane_s32((int32x2_t)v42, 1), v42, 1);
      *(float *)v43.i32 = sqrtf(*(float *)v43.i32);
      if (*(float *)v43.i32 != 0.0 && *(float *)v43.i32 > 0.000001)
      {
        v45 = vdiv_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 0));
        v60 = v45.f32[0];
        v46 = vdiv_f32(v42, (float32x2_t)vdup_lane_s32(v43, 0));
        v61 = v46.f32[0];
        v62 = (int8x16_t)v36;
        v47 = v46.f32[1];
        v63 = v34;
        v48 = asinf(v45.f32[1]);
        if (v60 >= 0.0)
        {
          v50 = v48;
        }
        else
        {
          v49 = 3.14159265 - v48;
          v50 = v49;
        }
        v51 = asinf(v47);
        if (v61 < 0.0)
        {
          v52 = 3.14159265 - v51;
          v51 = v52;
        }
        v54 = __sincosf_stret(v51 - v50);
        v53 = (float32x2_t)__PAIR64__(LODWORD(v54.__sinval), LODWORD(v54.__cosval));
        *(float *)&v55 = -v54.__sinval;
        HIDWORD(v55) = LODWORD(v54.__cosval);
        *(_QWORD *)a9 = __PAIR64__(LODWORD(v54.__sinval), LODWORD(v54.__cosval));
        *(_QWORD *)(a9 + 16) = v55;
        v53.i32[0] = *(_DWORD *)(a9 + 8);
        v56.i32[0] = *(_DWORD *)(a9 + 24);
        v57.i32[0] = *(_DWORD *)(a9 + 40);
        *(float32x2_t *)v58.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a9, *(float *)v62.i32), *(float32x2_t *)(a9 + 16), *(float32x2_t *)v62.i8, 1), *(float32x2_t *)(a9 + 32), (float32x4_t)v62, 2);
        *(float32x2_t *)&v58.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v53, *(float32x2_t *)v62.i8), v56, *(float32x2_t *)v62.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), v57);
        v59 = vsubq_f32(v63, v58);
        *(_DWORD *)(a9 + 56) = v59.i32[2];
        *(_QWORD *)(a9 + 48) = v59.i64[0];
      }
    }
  }
}

void sub_207DE48FC(uint64_t a1@<X0>, float32x2_t *a2@<X1>, unint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, int8x16_t *a6@<X8>)
{
  float32x2_t *v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  unint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x2_t *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  float32x2_t *v27;
  uint64_t v28;
  __int32 v29;
  unint64_t v30;
  uint64_t v31;
  float32x2_t *v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t *v37;
  float32x2_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int32 v47;
  float32x2_t *v48;
  uint64_t *v49;
  float64x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  uint64_t v54;
  double v55;
  uint64_t *v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  double *v63;
  int64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  uint64_t v73;
  float64x2_t v74;
  uint64_t *v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t *v78;
  uint64_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x2_t *v83;
  unint64_t v88;
  unint64_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x4_t v93;
  double v94;
  void *__p;
  uint64_t *v96;
  uint64_t *v97;
  void *v98;
  float32x2_t *v99;
  float32x2_t *v100;

  v98 = 0;
  v99 = 0;
  v100 = 0;
  if (a4)
  {
    v8 = (float32x2_t *)operator new(0x5DCuLL);
    v13 = 0;
    v98 = v8;
    v99 = v8;
    v100 = (float32x2_t *)((char *)v8 + 1500);
    v14 = (float *)a3[1];
    v15 = (float)(v14[3] - *v14) * 0.25;
    v16 = (float)(v14[7] - v14[1]) * 0.25;
    v17 = (float)(v14[11] - v14[2]) * 0.25;
    while (1)
    {
      v18 = 0;
      v88 = v13;
      v9.f32[0] = *v14 + (float)(v15 * (float)v13);
      v91 = *(float32x2_t *)v9.f32;
      do
      {
        v19 = 0;
        v89 = v18;
        v9.f32[0] = v14[1] + (float)(v16 * (float)v18);
        v92 = *(float32x2_t *)v9.f32;
        v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 0);
        do
        {
          while (1)
          {
            while (1)
            {
              v9.f32[0] = v14[2] + (float)(v17 * (float)v19);
              v10.i32[0] = a2[1].i32[0];
              v11.i32[0] = a2[3].i32[0];
              v12.i32[0] = a2[5].i32[0];
              *(float32x2_t *)v21.f32 = vmla_n_f32(vmla_f32(vmul_n_f32(*a2, v91.f32[0]), v20, a2[2]), a2[4], v9.f32[0]);
              v10 = vmla_f32(vmla_f32(vmul_f32(v10, v91), v92, v11), *(float32x2_t *)v9.f32, v12);
              *(float32x2_t *)&v21.u32[2] = v10;
              *(float32x2_t *)v9.f32 = a2[6];
              v9.i32[2] = a2[7].i32[0];
              v9 = vaddq_f32(v9, v21);
              if (v8 >= v100)
                break;
              v8[1].i32[0] = v9.i32[2];
              *v8 = *(float32x2_t *)v9.f32;
              v8 = (float32x2_t *)((char *)v8 + 12);
              v99 = v8;
              if (++v19 == 5)
                goto LABEL_5;
            }
            v22 = (float32x2_t *)v98;
            v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)v98) >> 2) + 1;
            if (v23 > 0x1555555555555555)
              sub_207CA420C();
            if (0x5555555555555556 * (((char *)v100 - (_BYTE *)v98) >> 2) > v23)
              v23 = 0x5555555555555556 * (((char *)v100 - (_BYTE *)v98) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (_BYTE *)v98) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v24 = 0x1555555555555555;
            else
              v24 = v23;
            if (v24)
            {
              if (v24 > 0x1555555555555555)
                sub_207CA3AB8();
              v90 = v9;
              v25 = (char *)operator new(12 * v24);
              v9 = v90;
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * (((char *)v8 - (_BYTE *)v98) >> 2)];
            *(_QWORD *)v26 = v9.i64[0];
            *((_DWORD *)v26 + 2) = v9.i32[2];
            v27 = (float32x2_t *)(v26 + 12);
            if (v8 == v22)
            {
              v98 = v26;
              v100 = (float32x2_t *)&v25[12 * v24];
              v22 = v8;
              break;
            }
            do
            {
              v28 = *(uint64_t *)((char *)&v8[-2] + 4);
              v8 = (float32x2_t *)((char *)v8 - 12);
              v29 = v8[1].i32[0];
              *(_QWORD *)(v26 - 12) = v28;
              v26 -= 12;
              *((_DWORD *)v26 + 2) = v29;
            }
            while (v8 != v22);
            v98 = v26;
            v100 = (float32x2_t *)&v25[12 * v24];
            if (v22)
              break;
            v8 = v27;
            v99 = v27;
            if (++v19 == 5)
              goto LABEL_5;
          }
          operator delete(v22);
          v8 = v27;
          v99 = v27;
          ++v19;
        }
        while (v19 != 5);
LABEL_5:
        v18 = v89 + 1;
      }
      while (v89 != 4);
      v13 = v88 + 1;
      if (v88 == 4)
        goto LABEL_50;
    }
  }
  v30 = *a3;
  if (*a3)
  {
    if (v30 > 0x1555555555555555)
      sub_207CA420C();
    v31 = 12 * v30;
    v32 = (float32x2_t *)operator new(12 * v30);
    v98 = v32;
    v99 = v32;
    v100 = (float32x2_t *)((char *)v32 + v31);
    v37 = (float32x2_t *)a3[1];
    v38 = (float32x2_t *)((char *)v37 + v31);
    while (1)
    {
      v33.i32[0] = a2[1].i32[0];
      v34.i32[0] = a2[3].i32[0];
      v35.i32[0] = a2[5].i32[0];
      v36.i32[0] = v37[1].i32[0];
      *(float32x2_t *)v39.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a2, COERCE_FLOAT(*v37)), a2[2], *v37, 1), a2[4], v36.f32[0]);
      *(float32x2_t *)&v39.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.f32, *v37), v34, *v37, 1), v36, v35);
      *(float32x2_t *)v33.f32 = a2[6];
      v33.i32[2] = a2[7].i32[0];
      v40 = vaddq_f32(v39, v33);
      if (v32 < v100)
      {
        v32[1].i32[0] = v40.i32[2];
        *v32 = *(float32x2_t *)v40.f32;
        v8 = (float32x2_t *)((char *)v32 + 12);
      }
      else
      {
        v41 = (float32x2_t *)v98;
        v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (_BYTE *)v98) >> 2) + 1;
        if (v42 > 0x1555555555555555)
          sub_207CA420C();
        if (0x5555555555555556 * (((char *)v100 - (_BYTE *)v98) >> 2) > v42)
          v42 = 0x5555555555555556 * (((char *)v100 - (_BYTE *)v98) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (_BYTE *)v98) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v43 = 0x1555555555555555;
        else
          v43 = v42;
        if (v43)
        {
          v93 = v40;
          if (v43 > 0x1555555555555555)
            sub_207CA3AB8();
          v44 = (char *)operator new(12 * v43);
          v40 = v93;
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * (((char *)v32 - (_BYTE *)v98) >> 2)];
        *(_QWORD *)v45 = v40.i64[0];
        *((_DWORD *)v45 + 2) = v40.i32[2];
        v8 = (float32x2_t *)(v45 + 12);
        if (v32 == v41)
        {
          v98 = v45;
          v100 = (float32x2_t *)&v44[12 * v43];
          v41 = v32;
        }
        else
        {
          do
          {
            v46 = *(uint64_t *)((char *)&v32[-2] + 4);
            v32 = (float32x2_t *)((char *)v32 - 12);
            v47 = v32[1].i32[0];
            *(_QWORD *)(v45 - 12) = v46;
            v45 -= 12;
            *((_DWORD *)v45 + 2) = v47;
          }
          while (v32 != v41);
          v98 = v45;
          v100 = (float32x2_t *)&v44[12 * v43];
          if (!v41)
            goto LABEL_31;
        }
        operator delete(v41);
      }
LABEL_31:
      v99 = v8;
      v37 = (float32x2_t *)((char *)v37 + 12);
      v32 = v8;
      if (v37 == v38)
        goto LABEL_50;
    }
  }
  v8 = 0;
LABEL_50:
  __p = 0;
  v96 = 0;
  v97 = 0;
  v48 = (float32x2_t *)v98;
  if (v8 == v98)
  {
    a6->i64[0] = 0;
    a6->i64[1] = 0;
    v83 = (float32x2_t *)v98;
    if (v98)
      goto LABEL_95;
    return;
  }
  if ((0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)v98) >> 2)) >> 61)
    sub_207CA420C();
  v49 = (uint64_t *)operator new(0x5555555555555558 * (((char *)v8 - (_BYTE *)v98) >> 2));
  __p = v49;
  v96 = v49;
  v97 = &v49[0xAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)v98) >> 2)];
  do
  {
    if (!a4 || v48[1].f32[0] > 0.0)
    {
      LODWORD(v50.f64[0]) = *(_DWORD *)(a1 + 8);
      v51.i32[0] = *(_DWORD *)(a1 + 20);
      v52.i32[0] = *(_DWORD *)(a1 + 32);
      v53.i32[0] = v48[1].i32[0];
      *(int32x2_t *)&v50.f64[0] = vdup_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v50.f64[0], *v48), v51, *v48, 1), v53, v52), 0);
      v55 = COERCE_DOUBLE(vdiv_f32(vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a1, COERCE_FLOAT(*v48)), *(float32x2_t *)(a1 + 12), *v48, 1), *(float32x2_t *)(a1 + 24), v53.f32[0]), *(float32x2_t *)&v50.f64[0]));
      v94 = v55;
      if (*a5)
      {
        sub_207D7FE28((float *)&v94, (float *)&v94 + 1, *a5, v55, v50);
        v49 = v96;
      }
      if (v49 < v97)
      {
        *(double *)v49 = v94;
        v54 = (uint64_t)(v49 + 1);
        goto LABEL_54;
      }
      v56 = (uint64_t *)__p;
      v57 = (char *)v49 - (_BYTE *)__p;
      v58 = ((char *)v49 - (_BYTE *)__p) >> 3;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 61)
        sub_207CA420C();
      v60 = (char *)v97 - (_BYTE *)__p;
      if (((char *)v97 - (_BYTE *)__p) >> 2 > v59)
        v59 = v60 >> 2;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
      {
        if (v61 >> 61)
          sub_207CA3AB8();
        v62 = operator new(8 * v61);
        v63 = (double *)&v62[8 * v58];
        *v63 = v94;
        v54 = (uint64_t)(v63 + 1);
        v64 = (char *)v49 - (char *)v56;
        if (v49 == v56)
        {
LABEL_70:
          __p = v63;
          v96 = (uint64_t *)v54;
          v97 = (uint64_t *)&v62[8 * v61];
          if (!v49)
            goto LABEL_54;
          goto LABEL_77;
        }
      }
      else
      {
        v62 = 0;
        v63 = (double *)(8 * v58);
        *(double *)(8 * v58) = v94;
        v54 = 8 * v58 + 8;
        v64 = (char *)v49 - (char *)v56;
        if (v49 == v56)
          goto LABEL_70;
      }
      v65 = v64 - 8;
      if (v65 >= 0x168)
      {
        v68 = ((char *)(v49 - 1) - (char *)v56) & 0xFFFFFFFFFFFFFFF8;
        if (&v62[v57 - 8 - v68] > &v62[v57 - 8])
        {
          v66 = v49;
        }
        else if ((uint64_t *)((char *)v49 - v68 - 8) > v49 - 1)
        {
          v66 = v49;
        }
        else if ((unint64_t)((char *)v49 - v62 - v57) >= 0x20)
        {
          v69 = (v65 >> 3) + 1;
          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          v66 = &v49[v70 / 0xFFFFFFFFFFFFFFF8];
          v63 = (double *)((char *)v63 - v70);
          v71 = (float64x2_t *)&v62[8 * v58 - 16];
          v72 = (float64x2_t *)(v49 - 2);
          v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v50 = v72[-1];
            v74 = *v72;
            v71[-1] = v50;
            *v71 = v74;
            v71 -= 2;
            v72 -= 2;
            v73 -= 4;
          }
          while (v73);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_76:
            v49 = (uint64_t *)__p;
            __p = v63;
            v96 = (uint64_t *)v54;
            v97 = (uint64_t *)&v62[8 * v61];
            if (v49)
LABEL_77:
              operator delete(v49);
LABEL_54:
            v96 = (uint64_t *)v54;
            v49 = (uint64_t *)v54;
            goto LABEL_55;
          }
        }
        else
        {
          v66 = v49;
        }
      }
      else
      {
        v66 = v49;
      }
      do
      {
        v67 = *--v66;
        *((_QWORD *)v63-- - 1) = v67;
      }
      while (v66 != v56);
      goto LABEL_76;
    }
LABEL_55:
    v48 = (float32x2_t *)((char *)v48 + 12);
  }
  while (v48 != v8);
  v75 = (uint64_t *)__p;
  a6->i64[0] = 0;
  a6->i64[1] = 0;
  if (v75 != v49)
  {
    v76 = *v75;
    a6->i64[0] = *v75;
    a6->i64[1] = v76;
    v77.i64[0] = v76;
    v77.i64[1] = v76;
    v78 = v75;
    do
    {
      v79 = *v78++;
      v80.i64[0] = v79;
      v81.i64[0] = v79;
      v81.i64[1] = v79;
      v82.i64[0] = v77.i64[0];
      v82.i64[1] = v79;
      v80.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
      v77 = vbslq_s8((int8x16_t)vcgtq_f32(v82, v80), v81, v77);
    }
    while (v78 != v49);
    *a6 = v77;
  }
  if (v75)
  {
    v96 = v75;
    operator delete(v75);
  }
  v83 = (float32x2_t *)v98;
  if (v98)
  {
LABEL_95:
    v99 = v83;
    operator delete(v83);
  }
}

void sub_207DE5090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DE5124(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;
  char v6;

  sub_207C95F10(__p);
  sub_2080A89DC((uint64_t)__p, 0xEu);
  if (v6 && v5 < 0)
    operator delete(__p[0]);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 142;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_207CA40D8((_BYTE *)(a2 + 48), *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)(a2 + 48) = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 16);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
}

void sub_207DE51D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(_BYTE *)(v15 + 72) && *(char *)(v15 + 71) < 0)
    operator delete(*v16);
  if (*(_BYTE *)(v15 + 24))
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_207DE5230(uint64_t a1, const void *a2, unsigned int *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_207CF8B74(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_207DE5380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207DE5394(uint64_t a1, const void *a2, int *a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_207CF8A80(a3, (CFNumberRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_207DE54E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DE54F8(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __CVBuffer *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  IOSurfaceRef IOSurface;
  std::__shared_weak_count_vtbl *v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::string::size_type size;
  __int128 *v20;
  unsigned int BaseAddressOfPlane;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int WidthOfPlane;
  int HeightOfPlane;
  int BytesPerRowOfPlane;
  unsigned int BytesPerElementOfPlane;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count_vtbl *ChildSurface;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  size_t v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  unsigned int v83;
  _BOOL4 v84;
  void *v85;
  uint64_t *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  __CVBuffer *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  __CVBuffer *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  __CVBuffer *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  size_t v111;
  char *BaseAddress;
  size_t BytesPerRow;
  size_t v114;
  unint64_t *v115;
  unint64_t v116;
  __int128 v117;
  unint64_t *v118;
  unint64_t v119;
  __int128 *v120;
  unsigned int v121;
  __int16 v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  __int128 v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::logic_error *exception;
  std::string::size_type v176;
  uint64_t (**v177)();
  __int128 v178;
  std::string v179;
  char v180;
  char v181;
  void *__p[2];
  std::string::size_type v183;
  __int128 v184;
  std::__shared_weak_count *v185;
  __int128 v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  std::string v191;
  uint64_t v192;
  int v193;
  __int128 *v194;
  unsigned int v195;
  __int16 v196;
  std::string v197;
  __int128 v198;
  __int128 *v199;
  unsigned int v200;
  __int16 v201;
  __int128 v202;
  __int128 v203;
  std::string v204;

  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = *(__CVBuffer **)v8;
    v10 = *(std::__shared_weak_count **)(v8 + 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  IOSurface = CVPixelBufferGetIOSurface(v9);
  if (!IOSurface || !a2)
    goto LABEL_92;
  v15 = (std::__shared_weak_count_vtbl *)IOSurface;
  v16 = 12344;
  if (sub_20815A764(a1) == 1278226488)
  {
    sub_2081DDA24(&v191, v15, 1, 0);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
    *(_OWORD *)&v204.__r_.__value_.__r.__words[1] = *(_OWORD *)&v191.__r_.__value_.__r.__words[1];
    if (v191.__r_.__value_.__r.__words[2])
    {
      v17 = (unint64_t *)(v191.__r_.__value_.__r.__words[2] + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    sub_2080E7A10((uint64_t)&v204, (uint64_t)&v197);
    v15 = (std::__shared_weak_count_vtbl *)v197.__r_.__value_.__r.__words[2];
    size = v197.__r_.__value_.__l.__size_;
    *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v198;
    v20 = v199;
    BaseAddressOfPlane = v200;
    v16 = v201;
    v22 = (std::__shared_weak_count *)v204.__r_.__value_.__r.__words[2];
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
    if (!v204.__r_.__value_.__r.__words[2])
      goto LABEL_19;
    v23 = (unint64_t *)(v204.__r_.__value_.__r.__words[2] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v15)
      {
LABEL_20:
        v25 = (unint64_t *)&v15->~__shared_weak_count_0;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        do
          v27 = __ldxr(v25);
        while (__stxr(v27 + 1, v25));
        *(_QWORD *)&v186 = v179.__r_.__value_.__r.__words[0];
        DWORD2(v186) = v179.__r_.__value_.__r.__words[1];
        do
          v28 = __ldaxr(v25);
        while (__stlxr(v28 - 1, v25));
        if (!v28)
        {
          (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 2))(v15);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
        }
        do
          v29 = __ldaxr(v25);
        while (__stlxr(v29 - 1, v25));
        if (!v29)
        {
          (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 2))(v15);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
        }
        goto LABEL_72;
      }
    }
    else
    {
LABEL_19:
      if (v15)
        goto LABEL_20;
    }
    *(_QWORD *)&v186 = v179.__r_.__value_.__r.__words[0];
    DWORD2(v186) = v179.__r_.__value_.__r.__words[1];
LABEL_72:
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
    v56 = (std::__shared_weak_count *)v191.__r_.__value_.__r.__words[2];
    if (v191.__r_.__value_.__r.__words[2])
    {
      v57 = (unint64_t *)(v191.__r_.__value_.__r.__words[2] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    goto LABEL_77;
  }
  WidthOfPlane = IOSurfaceGetWidthOfPlane((IOSurfaceRef)v15, 0);
  HeightOfPlane = IOSurfaceGetHeightOfPlane((IOSurfaceRef)v15, 0);
  BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane((IOSurfaceRef)v15, 0);
  BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane((IOSurfaceRef)v15, 0);
  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane((IOSurfaceRef)v15, 0);
  LODWORD(v179.__r_.__value_.__l.__data_) = WidthOfPlane;
  LODWORD(__p[0]) = HeightOfPlane;
  LODWORD(v203) = BytesPerRowOfPlane;
  v189 = BytesPerElementOfPlane;
  v190 = BaseAddressOfPlane - IOSurfaceGetBaseAddress((IOSurfaceRef)v15);
  v187 = 1278226488;
  v188 = BytesPerRowOfPlane * HeightOfPlane;
  *(_OWORD *)&v197.__r_.__value_.__r.__words[1] = 0uLL;
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197.__r_.__value_.__l.__size_;
  sub_207D006CC(&v197, (std::__shared_weak_count_vtbl **)&v191);
  v20 = &v186;
  v184 = *(_OWORD *)&v191.__r_.__value_.__l.__data_;
  sub_207CFF9E4((uint64_t)&v197, (char *)v197.__r_.__value_.__l.__size_);
  sub_207DE5230((uint64_t)&v184, (const void *)*MEMORY[0x24BDD8EF8], &v187);
  sub_207DE5230((uint64_t)&v184, (const void *)*MEMORY[0x24BDD8FD0], (unsigned int *)&v179);
  sub_207DE5230((uint64_t)&v184, (const void *)*MEMORY[0x24BDD8EB0], (unsigned int *)__p);
  LODWORD(v197.__r_.__value_.__l.__data_) = 0x4000;
  sub_207DE5394((uint64_t)&v184, (const void *)*MEMORY[0x24BDC56C8], (int *)&v197);
  sub_207DE5230((uint64_t)&v184, (const void *)*MEMORY[0x24BDD8E38], (unsigned int *)&v203);
  sub_207DE5230((uint64_t)&v184, (const void *)*MEMORY[0x24BDD8E30], &v189);
  sub_207DE5230((uint64_t)&v184, (const void *)*MEMORY[0x24BDD8EE8], &v190);
  sub_207DE5230((uint64_t)&v184, (const void *)*MEMORY[0x24BDD8E18], (unsigned int *)&v188);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  *(_OWORD *)__p = v184;
  if (*((_QWORD *)&v184 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  ChildSurface = (std::__shared_weak_count_vtbl *)IOSurfaceCreateChildSurface();
  if (ChildSurface)
  {
    sub_2081DDA24(&v191, ChildSurface, 0, 0);
    v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
    *(_OWORD *)&v179.__r_.__value_.__r.__words[1] = *(_OWORD *)&v191.__r_.__value_.__r.__words[1];
    if (v191.__r_.__value_.__r.__words[2])
    {
      v38 = (unint64_t *)(v191.__r_.__value_.__r.__words[2] + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    sub_2080E7A10((uint64_t)&v179, (uint64_t)&v197);
    v15 = (std::__shared_weak_count_vtbl *)v197.__r_.__value_.__r.__words[2];
    v176 = v197.__r_.__value_.__l.__size_;
    v203 = v198;
    v20 = v199;
    BaseAddressOfPlane = v200;
    v16 = v201;
    v40 = (std::__shared_weak_count *)v179.__r_.__value_.__r.__words[2];
    v179.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
    if (v179.__r_.__value_.__r.__words[2])
    {
      v41 = (unint64_t *)(v179.__r_.__value_.__r.__words[2] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v202 = v203;
    v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
    v43 = (std::__shared_weak_count *)v191.__r_.__value_.__r.__words[2];
    if (v191.__r_.__value_.__r.__words[2])
    {
      v44 = (unint64_t *)(v191.__r_.__value_.__r.__words[2] + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v34 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_53;
  }
  else if (!v34)
  {
    goto LABEL_53;
  }
  v46 = (unint64_t *)&v34->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
    if (!*((_QWORD *)&v184 + 1))
      goto LABEL_57;
    goto LABEL_54;
  }
LABEL_53:
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (!*((_QWORD *)&v184 + 1))
    goto LABEL_57;
LABEL_54:
  v49 = (unint64_t *)&v48->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    if (ChildSurface)
      goto LABEL_58;
    goto LABEL_92;
  }
LABEL_57:
  if (ChildSurface)
  {
LABEL_58:
    if (!v15)
    {
      v197.__r_.__value_.__r.__words[0] = v202;
      LODWORD(v197.__r_.__value_.__r.__words[1]) = DWORD2(v202);
      v186 = *(_OWORD *)&v197.__r_.__value_.__l.__data_;
      size = v176;
      *(_QWORD *)a4 = off_24C06E878;
      goto LABEL_81;
    }
    v51 = (unint64_t *)&v15->~__shared_weak_count_0;
    size = v176;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    do
      v53 = __ldxr(v51);
    while (__stxr(v53 + 1, v51));
    v197.__r_.__value_.__r.__words[0] = v202;
    LODWORD(v197.__r_.__value_.__r.__words[1]) = DWORD2(v202);
    do
      v54 = __ldaxr(v51);
    while (__stlxr(v54 - 1, v51));
    if (!v54)
    {
      (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 2))(v15);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
    }
    v186 = *(_OWORD *)&v197.__r_.__value_.__l.__data_;
    do
      v55 = __ldaxr(v51);
    while (__stlxr(v55 - 1, v51));
    if (!v55)
    {
      (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 2))(v15);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
      *(_QWORD *)a4 = off_24C06E878;
      goto LABEL_78;
    }
LABEL_77:
    *(_QWORD *)a4 = off_24C06E878;
    if (v15)
    {
LABEL_78:
      v59 = (unint64_t *)&v15->~__shared_weak_count_0;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
      do
        v61 = __ldxr(v59);
      while (__stxr(v61 + 1, v59));
    }
LABEL_81:
    *(_QWORD *)(a4 + 8) = size;
    *(_QWORD *)(a4 + 16) = v15;
    *(_QWORD *)(a4 + 24) = v186;
    *(_DWORD *)(a4 + 32) = DWORD2(v186);
    *(_QWORD *)(a4 + 40) = v20;
    *(_DWORD *)(a4 + 48) = BaseAddressOfPlane;
    *(_WORD *)(a4 + 52) = v16;
    if (v15)
    {
      v62 = (unint64_t *)&v15->~__shared_weak_count_0;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 2))(v15);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
      }
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
      if (!v64)
      {
        (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 2))(v15);
        v65 = (std::__shared_weak_count *)v15;
LABEL_267:
        std::__shared_weak_count::__release_weak(v65);
        return;
      }
    }
    return;
  }
LABEL_92:
  v66 = *(uint64_t **)(a1 + 8);
  v67 = *(std::__shared_weak_count **)(a1 + 16);
  *((_QWORD *)&v184 + 1) = v66;
  v185 = v67;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  *(_QWORD *)&v184 = off_24C08A598;
  if (v66)
  {
    v71 = *v66;
    v70 = (std::__shared_weak_count *)v66[1];
    if (v70)
    {
      v72 = (unint64_t *)&v70->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
      do
        v74 = __ldaxr(v72);
      while (__stlxr(v74 - 1, v72));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
        if (!v71)
          goto LABEL_103;
        goto LABEL_102;
      }
    }
    if (v71)
LABEL_102:
      sub_20815FC78(*((uint64_t *)&v184 + 1));
  }
LABEL_103:
  if (sub_20815A764(a1) != 875704422
    && sub_20815A764(a1) != 875704438
    && sub_20815A764(a1) != 1278226488
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 179, (uint64_t)"FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_420YpCbCr8BiPlanarFullRange || FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange || FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_OneComponent8", 250, (uint64_t)&unk_20821F46B, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v75 = sub_20815C268((uint64_t)&v184, 0);
  v76 = sub_20815C4E8((uint64_t)&v184, 0);
  std::to_string(&v191, v75);
  v77 = std::string::append(&v191, "_", 1uLL);
  v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v197.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v179, v76);
  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = &v179;
  else
    v79 = (std::string *)v179.__r_.__value_.__r.__words[0];
  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
  else
    v80 = v179.__r_.__value_.__l.__size_;
  v81 = std::string::append(&v197, (const std::string::value_type *)v79, v80);
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v183 = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v179.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_115:
      if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_116;
      goto LABEL_120;
    }
  }
  else if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_115;
  }
  operator delete(v197.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_116:
    if (sub_207DEA850(a3, (uint64_t)__p))
      goto LABEL_135;
    goto LABEL_121;
  }
LABEL_120:
  operator delete(v191.__r_.__value_.__l.__data_);
  if (sub_207DEA850(a3, (uint64_t)__p))
    goto LABEL_135;
LABEL_121:
  v83 = (unsigned __int16)sub_207CF7368();
  if (v83 <= 0x100)
    LOBYTE(v83) = 0;
  v84 = v83 == 0;
  v204.__r_.__value_.__r.__words[0] = sub_20815BF9C(a1);
  v85 = operator new(0x28uLL);
  *((_QWORD *)v85 + 1) = 0;
  *((_QWORD *)v85 + 2) = 0;
  *(_QWORD *)v85 = off_24C075608;
  *((_BYTE *)&v197.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v197, "ODT_Y_IMAGE");
  LODWORD(v179.__r_.__value_.__l.__data_) = 0;
  v179.__r_.__value_.__s.__data_[4] = 1;
  sub_20815A338((std::__shared_weak_count_vtbl **)v85 + 3, (unsigned int *)&v204, 0x4C303038u, (uint64_t *)&v197, 2 * v84, (unsigned int *)&v179);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v197.__r_.__value_.__l.__data_);
  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v85 + 24;
  v191.__r_.__value_.__l.__size_ = (std::string::size_type)v85;
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v86 = sub_207DEAA7C((uint64_t)a3, (uint64_t)__p, (__int128 **)&v197);
  *(_OWORD *)&v191.__r_.__value_.__l.__data_ = 0uLL;
  v87 = (std::__shared_weak_count *)v86[6];
  v86[5] = (uint64_t)v85 + 24;
  v86[6] = (uint64_t)v85;
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
  if (v191.__r_.__value_.__l.__size_)
  {
    v91 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
LABEL_135:
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v93 = sub_207DEAA7C((uint64_t)a3, (uint64_t)__p, (__int128 **)&v197);
  sub_20815A470((CVPixelBufferPoolRef *)v93[5], (uint64_t)&v179);
  if (!v181
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 193, (uint64_t)"y_pixel_buffer", 14, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (!v179.__r_.__value_.__l.__size_)
  {
    v94 = 0;
    v99 = *((_QWORD *)&v184 + 1);
    if (*((_QWORD *)&v184 + 1))
      goto LABEL_144;
LABEL_151:
    v100 = 0;
    goto LABEL_152;
  }
  v94 = *(__CVBuffer **)v179.__r_.__value_.__l.__size_;
  v95 = *(std::__shared_weak_count **)(v179.__r_.__value_.__l.__size_ + 8);
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    do
      v98 = __ldaxr(v96);
    while (__stlxr(v98 - 1, v96));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      v99 = *((_QWORD *)&v184 + 1);
      if (*((_QWORD *)&v184 + 1))
        goto LABEL_144;
      goto LABEL_151;
    }
  }
  v99 = *((_QWORD *)&v184 + 1);
  if (!*((_QWORD *)&v184 + 1))
    goto LABEL_151;
LABEL_144:
  v100 = *(__CVBuffer **)v99;
  v101 = *(std::__shared_weak_count **)(v99 + 8);
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
    do
      v104 = __ldaxr(v102);
    while (__stlxr(v104 - 1, v102));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
LABEL_152:
  v105 = (char *)CVPixelBufferGetBaseAddressOfPlane(v100, 0);
  if (*((_QWORD *)&v184 + 1))
  {
    v106 = (__CVBuffer *)**((_QWORD **)&v184 + 1);
    v107 = *(std::__shared_weak_count **)(*((_QWORD *)&v184 + 1) + 8);
    if (v107)
    {
      v108 = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
      do
        v110 = __ldaxr(v108);
      while (__stlxr(v110 - 1, v108));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
  }
  else
  {
    v106 = 0;
  }
  v111 = CVPixelBufferGetBytesPerRowOfPlane(v106, 0);
  CVPixelBufferLockBaseAddress(v94, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v94);
  BytesPerRow = CVPixelBufferGetBytesPerRow(v94);
  if (v76 && v75)
  {
    v114 = BytesPerRow;
    do
    {
      memmove(BaseAddress, v105, v75);
      v105 += v111;
      BaseAddress += v114;
      --v76;
    }
    while (v76);
  }
  CVPixelBufferUnlockBaseAddress(v94, 0);
  v177 = &off_24C08A5D8;
  v178 = *(_OWORD *)&v179.__r_.__value_.__r.__words[1];
  if (v179.__r_.__value_.__r.__words[2])
  {
    v115 = (unint64_t *)(v179.__r_.__value_.__r.__words[2] + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  sub_20814D798((uint64_t)&v177, (uint64_t)&v197);
  v191.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06F140;
  v117 = *(_OWORD *)&v197.__r_.__value_.__r.__words[1];
  if (v197.__r_.__value_.__r.__words[2])
  {
    v118 = (unint64_t *)(v197.__r_.__value_.__r.__words[2] + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    v120 = v199;
    v121 = v200;
    v122 = v201;
    do
      v123 = __ldxr(v118);
    while (__stxr(v123 + 1, v118));
  }
  else
  {
    v120 = v199;
    v121 = v200;
    v122 = v201;
  }
  *(_OWORD *)&v191.__r_.__value_.__r.__words[1] = v117;
  v192 = v198;
  v193 = DWORD2(v198);
  v194 = v120;
  v195 = v121;
  v196 = v122;
  if (*((_QWORD *)&v117 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v117 + 1) + 16))(*((_QWORD *)&v117 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v117 + 1));
    }
  }
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C074C28;
  v126 = (std::__shared_weak_count *)v197.__r_.__value_.__r.__words[2];
  if (v197.__r_.__value_.__r.__words[2])
  {
    v127 = (unint64_t *)(v197.__r_.__value_.__r.__words[2] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0753F8;
  sub_207DE9870((uint64_t)&v191, (uint64_t)&v197.__r_.__value_.__l.__size_);
  v129 = *(_OWORD *)&v197.__r_.__value_.__r.__words[1];
  v202 = *(_OWORD *)&v197.__r_.__value_.__r.__words[1];
  if (v197.__r_.__value_.__r.__words[2])
  {
    v130 = (unint64_t *)(v197.__r_.__value_.__r.__words[2] + 8);
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  if (!(_QWORD)v129 || *(uint64_t (***)())v129 != &off_24C08A428)
  {
    v203 = 0uLL;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207DE9074((char *)&v204, (uint64_t)&v197);
    std::logic_error::logic_error(exception, &v204);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v203 = v129;
  if (*((_QWORD *)&v129 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v133 = __ldxr(v132);
    while (__stxr(v133 + 1, v132));
    v135 = *((_QWORD *)&v198 + 1);
    v134 = v198;
    v136 = HIDWORD(v199);
    do
      v137 = __ldxr(v132);
    while (__stxr(v137 + 1, v132));
    do
      v138 = __ldaxr(v132);
    while (__stlxr(v138 - 1, v132));
    if (!v138)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  else
  {
    v135 = *((_QWORD *)&v198 + 1);
    v134 = v198;
    v136 = HIDWORD(v199);
  }
  v139 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v140 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (std::__shared_weak_count *)v197.__r_.__value_.__r.__words[2];
  if (v197.__r_.__value_.__r.__words[2])
  {
    v143 = (unint64_t *)(v197.__r_.__value_.__r.__words[2] + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = (std::__shared_weak_count *)v191.__r_.__value_.__r.__words[2];
  if (v191.__r_.__value_.__r.__words[2])
  {
    v146 = (unint64_t *)(v191.__r_.__value_.__r.__words[2] + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  if (*((_QWORD *)&v129 + 1))
  {
    v148 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
    do
      v150 = __ldxr(v148);
    while (__stxr(v150 + 1, v148));
    do
      v151 = __ldxr(v148);
    while (__stxr(v151 + 1, v148));
    do
      v152 = __ldaxr(v148);
    while (__stlxr(v152 - 1, v148));
    if (!v152)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
    do
      v153 = __ldaxr(v148);
    while (__stlxr(v153 - 1, v148));
    if (!v153)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
    do
      v154 = __ldaxr(v148);
    while (__stlxr(v154 - 1, v148));
    if (!v154)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    }
  }
  v177 = &off_24C08A5D8;
  v155 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v156 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  *(_QWORD *)a4 = off_24C06E878;
  if (*((_QWORD *)&v129 + 1))
  {
    v158 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
    do
      v160 = __ldxr(v158);
    while (__stxr(v160 + 1, v158));
    do
      v161 = __ldxr(v158);
    while (__stxr(v161 + 1, v158));
  }
  *(_OWORD *)(a4 + 8) = v129;
  *(_QWORD *)(a4 + 24) = v135;
  *(_DWORD *)(a4 + 32) = v136;
  *(_QWORD *)(a4 + 40) = v134;
  *(_DWORD *)(a4 + 48) = 1;
  *(_WORD *)(a4 + 52) = 256;
  if (!*((_QWORD *)&v129 + 1))
    goto LABEL_247;
  v162 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 - 1, v162));
  if (!v163)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
  }
  do
    v164 = __ldaxr(v162);
  while (__stlxr(v164 - 1, v162));
  if (!v164)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
  }
  do
    v165 = __ldaxr(v162);
  while (__stlxr(v165 - 1, v162));
  if (!v165)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 16))(*((_QWORD *)&v129 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v129 + 1));
    if (v181)
    {
LABEL_248:
      (*(void (**)(std::string *))v179.__r_.__value_.__l.__data_)(&v179);
      if (SHIBYTE(v183) < 0)
        goto LABEL_249;
LABEL_254:
      v166 = (uint64_t *)*((_QWORD *)&v184 + 1);
      if (!*((_QWORD *)&v184 + 1))
        goto LABEL_262;
      goto LABEL_255;
    }
  }
  else
  {
LABEL_247:
    if (v181)
      goto LABEL_248;
  }
  if (v180 < 0)
  {
    operator delete((void *)v179.__r_.__value_.__l.__size_);
    if ((SHIBYTE(v183) & 0x80000000) == 0)
      goto LABEL_254;
  }
  else if ((SHIBYTE(v183) & 0x80000000) == 0)
  {
    goto LABEL_254;
  }
LABEL_249:
  operator delete(__p[0]);
  v166 = (uint64_t *)*((_QWORD *)&v184 + 1);
  if (!*((_QWORD *)&v184 + 1))
    goto LABEL_262;
LABEL_255:
  v168 = *v166;
  v167 = (std::__shared_weak_count *)v166[1];
  if (v167)
  {
    v169 = (unint64_t *)&v167->__shared_owners_;
    do
      v170 = __ldxr(v169);
    while (__stxr(v170 + 1, v169));
    do
      v171 = __ldaxr(v169);
    while (__stlxr(v171 - 1, v169));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
      if (!v168)
        goto LABEL_262;
      goto LABEL_261;
    }
  }
  if (v168)
LABEL_261:
    sub_20815FE54(*((uint64_t *)&v184 + 1));
LABEL_262:
  *(_QWORD *)&v184 = &off_24C08A5D8;
  v172 = v185;
  if (v185)
  {
    v173 = (unint64_t *)&v185->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      v65 = v172;
      goto LABEL_267;
    }
  }
}

void sub_207DE672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_2081DE77C(&a13);
  sub_2081DE77C(&a31);
  sub_207C99D78((uint64_t)&a19);
  sub_207C99D78((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_207DE6758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_207C99D78((uint64_t)&__p);
  sub_207C99D78((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_207DE6818()
{
  uint64_t v0;

  sub_207CFF9E4(v0 - 224, *(char **)(v0 - 216));
  JUMPOUT(0x207DE6828);
}

void sub_207DE6830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  sub_2081DE77C((_QWORD *)(v31 - 120));
  sub_2081DE77C(&a31);
  _Unwind_Resume(a1);
}

void sub_207DE684C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_207DE69C4((uint64_t)&__p);
  if (SHIBYTE(a24) < 0)
  {
    operator delete(a22);
    sub_20815AC38(&a26);
    _Unwind_Resume(a1);
  }
  sub_20815AC38(&a26);
  _Unwind_Resume(a1);
}

void sub_207DE69B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DE69C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_207DE6A1C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *size;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __CVBuffer **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  __CVBuffer *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  __CVBuffer *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  char *BaseAddressOfPlane;
  __CVBuffer *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  size_t BytesPerRowOfPlane;
  size_t v94;
  size_t v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  unsigned __int16 v102;
  void *v103;
  std::string::size_type v104;
  char v105;
  std::string::size_type v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *v114;
  __CVBuffer *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  char *BaseAddress;
  size_t BytesPerRow;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  __int16 v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  __int128 v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  __CVBuffer **v173;
  std::__shared_weak_count *v174;
  __CVBuffer *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t *v179;
  uint64_t *v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::logic_error *exception;
  uint64_t (**v190)();
  __int128 v191;
  std::string v192;
  char v193;
  char v194;
  void *__p[2];
  std::string::size_type v196;
  unsigned int v197[2];
  uint64_t (**v198)();
  __CVBuffer **v199;
  std::__shared_weak_count *v200;
  uint64_t (**v201)();
  __int128 v202;
  uint64_t (**v203)();
  __int128 v204;
  std::string v205;
  _BYTE v206[24];
  int v207;
  int v208;
  std::string v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  __int16 v214;
  __int128 v215;
  __int128 v216;
  std::string v217;

  sub_20815C8B0(a1, &v205);
  size = (uint64_t *)v205.__r_.__value_.__l.__size_;
  v204 = *(_OWORD *)&v205.__r_.__value_.__r.__words[1];
  if (v205.__r_.__value_.__r.__words[2])
  {
    v9 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v203 = off_24C08D750;
  if (size)
  {
    v12 = *size;
    v11 = (std::__shared_weak_count *)size[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    if (v12)
LABEL_11:
      sub_2081E2F24(v204);
  }
LABEL_12:
  v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
  v16 = (std::__shared_weak_count *)v205.__r_.__value_.__r.__words[2];
  if (!v205.__r_.__value_.__r.__words[2])
    goto LABEL_16;
  v17 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    v19 = (uint64_t *)v204;
    if (!(_QWORD)v204)
      goto LABEL_103;
  }
  else
  {
LABEL_16:
    v19 = (uint64_t *)v204;
    if (!(_QWORD)v204)
      goto LABEL_103;
  }
  v21 = *v19;
  v20 = (std::__shared_weak_count *)v19[1];
  if (!v20)
    goto LABEL_22;
  v22 = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (!v21)
      goto LABEL_103;
  }
  else
  {
LABEL_22:
    if (!v21)
      goto LABEL_103;
  }
  if (!a2)
    goto LABEL_103;
  sub_2081DF5D8((uint64_t)&v203, 1u, &v205);
  v25 = (uint64_t *)v205.__r_.__value_.__l.__size_;
  *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = *(_OWORD *)&v205.__r_.__value_.__r.__words[1];
  if (v205.__r_.__value_.__r.__words[2])
  {
    v26 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C08D750;
  if (v25)
  {
    v29 = *v25;
    v28 = (std::__shared_weak_count *)v25[1];
    if (v28)
    {
      v30 = (unint64_t *)&v28->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v29)
      sub_2081E2F24(v209.__r_.__value_.__l.__size_);
  }
  v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
  v33 = (std::__shared_weak_count *)v205.__r_.__value_.__r.__words[2];
  if (v205.__r_.__value_.__r.__words[2])
  {
    v34 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      v36 = (uint64_t *)v209.__r_.__value_.__l.__size_;
      if (v209.__r_.__value_.__l.__size_)
        goto LABEL_41;
LABEL_98:
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
      v70 = (std::__shared_weak_count *)v209.__r_.__value_.__r.__words[2];
      if (v209.__r_.__value_.__r.__words[2])
      {
        v71 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
LABEL_103:
      v73 = *(__CVBuffer ***)(a1 + 8);
      v74 = *(std::__shared_weak_count **)(a1 + 16);
      v199 = v73;
      v200 = v74;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      v198 = off_24C08A598;
      if (v73)
      {
        v78 = *v73;
        v77 = (std::__shared_weak_count *)v73[1];
        if (v77)
        {
          v79 = (unint64_t *)&v77->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
          do
            v81 = __ldaxr(v79);
          while (__stlxr(v81 - 1, v79));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
            if (!v78)
              goto LABEL_114;
            goto LABEL_113;
          }
        }
        if (v78)
LABEL_113:
          sub_20815FC78((uint64_t)v199);
      }
LABEL_114:
      if (sub_20815A764(a1) != 875704422
        && sub_20815A764(a1) != 875704438
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 237, (uint64_t)"FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_420YpCbCr8BiPlanarFullRange || FormatOSType(pixel_buffer.Format()) == kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange", 175, (uint64_t)&unk_20821F46B, 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if (v199)
      {
        v82 = *v199;
        v83 = (std::__shared_weak_count *)v199[1];
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
          do
            v86 = __ldaxr(v84);
          while (__stlxr(v86 - 1, v84));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
      }
      else
      {
        v82 = 0;
      }
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v82, 1uLL);
      if (v199)
      {
        v88 = *v199;
        v89 = (std::__shared_weak_count *)v199[1];
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldxr(v90);
          while (__stxr(v91 + 1, v90));
          do
            v92 = __ldaxr(v90);
          while (__stlxr(v92 - 1, v90));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
      }
      else
      {
        v88 = 0;
      }
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v88, 1uLL);
      v94 = sub_20815C268((uint64_t)&v198, 1uLL);
      v95 = sub_20815C4E8((uint64_t)&v198, 1uLL);
      v197[0] = v94;
      v197[1] = v95;
      std::to_string(&v209, v94);
      v96 = std::string::append(&v209, "_", 1uLL);
      v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      v205.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v192, v95);
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = &v192;
      else
        v98 = (std::string *)v192.__r_.__value_.__r.__words[0];
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = HIBYTE(v192.__r_.__value_.__r.__words[2]);
      else
        v99 = v192.__r_.__value_.__l.__size_;
      v100 = std::string::append(&v205, (const std::string::value_type *)v98, v99);
      v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      v196 = v100->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v192.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_141:
          if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_142;
          goto LABEL_146;
        }
      }
      else if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_141;
      }
      operator delete(v205.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_142:
        if (sub_207DEA850(a3, (uint64_t)__p))
          goto LABEL_161;
        goto LABEL_147;
      }
LABEL_146:
      operator delete(v209.__r_.__value_.__l.__data_);
      if (sub_207DEA850(a3, (uint64_t)__p))
        goto LABEL_161;
LABEL_147:
      v102 = sub_207CF7368();
      v103 = operator new(0x28uLL);
      v104 = (std::string::size_type)v103;
      v105 = v102;
      if (v102 <= 0x100u)
        v105 = 0;
      *((_QWORD *)v103 + 1) = 0;
      *((_QWORD *)v103 + 2) = 0;
      *(_QWORD *)v103 = off_24C075608;
      v106 = (std::string::size_type)v103 + 24;
      *((_BYTE *)&v205.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&v205, "ODT_CBCR_IMAGE");
      LODWORD(v192.__r_.__value_.__l.__data_) = 0;
      v192.__r_.__value_.__s.__data_[4] = 1;
      sub_20815A338((std::__shared_weak_count_vtbl **)v103 + 3, v197, 0x32433038u, (uint64_t *)&v205, 2 * (v105 == 0), (unsigned int *)&v192);
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v205.__r_.__value_.__l.__data_);
      v209.__r_.__value_.__r.__words[0] = v106;
      v209.__r_.__value_.__l.__size_ = v104;
      v205.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v107 = sub_207DEAA7C((uint64_t)a3, (uint64_t)__p, (__int128 **)&v205);
      *(_OWORD *)&v209.__r_.__value_.__l.__data_ = 0uLL;
      v108 = (std::__shared_weak_count *)v107[6];
      v107[5] = v106;
      v107[6] = v104;
      if (v108)
      {
        v109 = (unint64_t *)&v108->__shared_owners_;
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v111 = (std::__shared_weak_count *)v209.__r_.__value_.__l.__size_;
      if (v209.__r_.__value_.__l.__size_)
      {
        v112 = (unint64_t *)(v209.__r_.__value_.__l.__size_ + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
LABEL_161:
      v205.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v114 = sub_207DEAA7C((uint64_t)a3, (uint64_t)__p, (__int128 **)&v205);
      sub_20815A470((CVPixelBufferPoolRef *)v114[5], (uint64_t)&v192);
      if (!v194
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 259, (uint64_t)"cbcr_pixel_buffer", 17, (uint64_t)"Failed to create pixel buffer", 29, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if (v192.__r_.__value_.__l.__size_)
      {
        v115 = *(__CVBuffer **)v192.__r_.__value_.__l.__size_;
        v116 = *(std::__shared_weak_count **)(v192.__r_.__value_.__l.__size_ + 8);
        if (v116)
        {
          v117 = (unint64_t *)&v116->__shared_owners_;
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
          do
            v119 = __ldaxr(v117);
          while (__stlxr(v119 - 1, v117));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
      }
      else
      {
        v115 = 0;
      }
      CVPixelBufferLockBaseAddress(v115, 0);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v115);
      BytesPerRow = CVPixelBufferGetBytesPerRow(v115);
      if (BytesPerRow < BytesPerRowOfPlane
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 268, (uint64_t)"output_cbcr_bytes_per_row >= cbcr_plane_bytes_per_row", 53, (uint64_t)&unk_20821F46B, 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if (v95 && BytesPerRowOfPlane)
      {
        do
        {
          memmove(BaseAddress, BaseAddressOfPlane, BytesPerRowOfPlane);
          BaseAddress += BytesPerRow;
          BaseAddressOfPlane += BytesPerRowOfPlane;
          --v95;
        }
        while (v95);
      }
      CVPixelBufferUnlockBaseAddress(v115, 0);
      v190 = &off_24C08A5D8;
      v191 = *(_OWORD *)&v192.__r_.__value_.__r.__words[1];
      if (v192.__r_.__value_.__r.__words[2])
      {
        v122 = (unint64_t *)(v192.__r_.__value_.__r.__words[2] + 8);
        do
          v123 = __ldxr(v122);
        while (__stxr(v123 + 1, v122));
      }
      sub_20814D798((uint64_t)&v190, (uint64_t)&v205);
      v209.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C06F140;
      v124 = *(_OWORD *)&v205.__r_.__value_.__r.__words[1];
      if (v205.__r_.__value_.__r.__words[2])
      {
        v125 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
        v127 = *(_QWORD *)&v206[16];
        v128 = v207;
        v129 = v208;
        do
          v130 = __ldxr(v125);
        while (__stxr(v130 + 1, v125));
      }
      else
      {
        v127 = *(_QWORD *)&v206[16];
        v128 = v207;
        v129 = v208;
      }
      *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = v124;
      v210 = *(_QWORD *)v206;
      v211 = *(_DWORD *)&v206[8];
      v212 = v127;
      v213 = v128;
      v214 = v129;
      if (*((_QWORD *)&v124 + 1))
      {
        v131 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v124 + 1) + 16))(*((_QWORD *)&v124 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v124 + 1));
        }
      }
      v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C074C28;
      v133 = (std::__shared_weak_count *)v205.__r_.__value_.__r.__words[2];
      if (v205.__r_.__value_.__r.__words[2])
      {
        v134 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v205.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C075658;
      sub_207DEA4D8((uint64_t)&v209, (uint64_t)&v205.__r_.__value_.__l.__size_);
      v136 = *(_OWORD *)&v205.__r_.__value_.__r.__words[1];
      v215 = *(_OWORD *)&v205.__r_.__value_.__r.__words[1];
      if (v205.__r_.__value_.__r.__words[2])
      {
        v137 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
      }
      if (!(_QWORD)v136 || *(uint64_t (***)())v136 != &off_24C08A4B8)
      {
        v216 = 0uLL;
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_207DE9BCC((char *)&v217, (uint64_t)&v205);
        std::logic_error::logic_error(exception, &v217);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
      }
      v216 = v136;
      if (*((_QWORD *)&v136 + 1))
      {
        v139 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
        v141 = *(_QWORD *)v206;
        v142 = *(_QWORD *)&v206[12];
        v143 = v208;
        do
          v144 = __ldxr(v139);
        while (__stxr(v144 + 1, v139));
        do
          v145 = __ldaxr(v139);
        while (__stlxr(v145 - 1, v139));
        if (!v145)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
        }
      }
      else
      {
        v141 = *(_QWORD *)v206;
        v142 = *(_QWORD *)&v206[12];
        v143 = v208;
      }
      v146 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (*((_QWORD *)&v215 + 1))
      {
        v147 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v149 = (std::__shared_weak_count *)v205.__r_.__value_.__r.__words[2];
      if (v205.__r_.__value_.__r.__words[2])
      {
        v150 = (unint64_t *)(v205.__r_.__value_.__r.__words[2] + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      v152 = (std::__shared_weak_count *)v209.__r_.__value_.__r.__words[2];
      if (v209.__r_.__value_.__r.__words[2])
      {
        v153 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      if (*((_QWORD *)&v136 + 1))
      {
        v155 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
        do
          v156 = __ldxr(v155);
        while (__stxr(v156 + 1, v155));
        do
          v157 = __ldxr(v155);
        while (__stxr(v157 + 1, v155));
        do
          v158 = __ldxr(v155);
        while (__stxr(v158 + 1, v155));
        do
          v159 = __ldaxr(v155);
        while (__stlxr(v159 - 1, v155));
        if (!v159)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
        }
        do
          v160 = __ldaxr(v155);
        while (__stlxr(v160 - 1, v155));
        if (!v160)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
        }
        do
          v161 = __ldaxr(v155);
        while (__stlxr(v161 - 1, v155));
        if (!v161)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
        }
      }
      v190 = &off_24C08A5D8;
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
      if (*((_QWORD *)&v191 + 1))
      {
        v163 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      *(_QWORD *)a4 = off_24C06E878;
      if (*((_QWORD *)&v136 + 1))
      {
        v165 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
        do
          v166 = __ldxr(v165);
        while (__stxr(v166 + 1, v165));
        do
          v167 = __ldxr(v165);
        while (__stxr(v167 + 1, v165));
        do
          v168 = __ldxr(v165);
        while (__stxr(v168 + 1, v165));
      }
      *(_OWORD *)(a4 + 8) = v136;
      *(_QWORD *)(a4 + 24) = v142;
      *(_DWORD *)(a4 + 32) = v143;
      *(_QWORD *)(a4 + 40) = v141;
      *(_DWORD *)(a4 + 48) = 5;
      *(_WORD *)(a4 + 52) = 256;
      if (!*((_QWORD *)&v136 + 1))
        goto LABEL_259;
      v169 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
      }
      do
        v171 = __ldaxr(v169);
      while (__stlxr(v171 - 1, v169));
      if (!v171)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
      }
      do
        v172 = __ldaxr(v169);
      while (__stlxr(v172 - 1, v169));
      if (!v172)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v136 + 1) + 16))(*((_QWORD *)&v136 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136 + 1));
        if (v194)
        {
LABEL_260:
          (*(void (**)(std::string *))v192.__r_.__value_.__l.__data_)(&v192);
          if (SHIBYTE(v196) < 0)
            goto LABEL_261;
LABEL_266:
          v173 = v199;
          if (!v199)
            goto LABEL_274;
          goto LABEL_267;
        }
      }
      else
      {
LABEL_259:
        if (v194)
          goto LABEL_260;
      }
      if (v193 < 0)
      {
        operator delete((void *)v192.__r_.__value_.__l.__size_);
        if ((SHIBYTE(v196) & 0x80000000) == 0)
          goto LABEL_266;
      }
      else if ((SHIBYTE(v196) & 0x80000000) == 0)
      {
        goto LABEL_266;
      }
LABEL_261:
      operator delete(__p[0]);
      v173 = v199;
      if (!v199)
        goto LABEL_274;
LABEL_267:
      v175 = *v173;
      v174 = (std::__shared_weak_count *)v173[1];
      if (v174)
      {
        v176 = (unint64_t *)&v174->__shared_owners_;
        do
          v177 = __ldxr(v176);
        while (__stxr(v177 + 1, v176));
        do
          v178 = __ldaxr(v176);
        while (__stlxr(v178 - 1, v176));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
          if (!v175)
            goto LABEL_274;
          goto LABEL_273;
        }
      }
      if (v175)
LABEL_273:
        sub_20815FE54((uint64_t)v199);
LABEL_274:
      v198 = &off_24C08A5D8;
      v62 = v200;
      if (!v200)
        goto LABEL_278;
      v179 = (unint64_t *)&v200->__shared_owners_;
      do
        v64 = __ldaxr(v179);
      while (__stlxr(v64 - 1, v179));
      goto LABEL_277;
    }
  }
  v36 = (uint64_t *)v209.__r_.__value_.__l.__size_;
  if (!v209.__r_.__value_.__l.__size_)
    goto LABEL_98;
LABEL_41:
  v38 = *v36;
  v37 = (std::__shared_weak_count *)v36[1];
  if (v37)
  {
    v39 = (unint64_t *)&v37->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 - 1, v39));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (!v38)
  {
    if (v209.__r_.__value_.__l.__size_)
    {
      v66 = *(_QWORD *)v209.__r_.__value_.__l.__size_;
      v65 = *(std::__shared_weak_count **)(v209.__r_.__value_.__l.__size_ + 8);
      if (v65)
      {
        v67 = (unint64_t *)&v65->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
        do
          v69 = __ldaxr(v67);
        while (__stlxr(v69 - 1, v67));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      if (v66)
        sub_2081E30F8(v209.__r_.__value_.__l.__size_);
    }
    goto LABEL_98;
  }
  v201 = &off_24C08D790;
  v202 = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
  if (v209.__r_.__value_.__r.__words[2])
  {
    v42 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  sub_2080E7A10((uint64_t)&v201, (uint64_t)&v205);
  v44 = *(_OWORD *)&v205.__r_.__value_.__r.__words[1];
  *(_OWORD *)&v192.__r_.__value_.__l.__data_ = *(_OWORD *)v206;
  v45 = *(_QWORD *)&v206[16];
  v46 = v207;
  v47 = v208;
  *(_QWORD *)a4 = off_24C06E878;
  if (*((_QWORD *)&v44 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    do
      v50 = __ldxr(v48);
    while (__stxr(v50 + 1, v48));
  }
  *(_OWORD *)(a4 + 8) = v44;
  *(_QWORD *)(a4 + 24) = v192.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a4 + 32) = v192.__r_.__value_.__r.__words[1];
  *(_QWORD *)(a4 + 40) = v45;
  *(_DWORD *)(a4 + 48) = v46;
  *(_WORD *)(a4 + 52) = v47;
  if (*((_QWORD *)&v44 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
    }
    do
      v53 = __ldaxr(v51);
    while (__stlxr(v53 - 1, v51));
    if (!v53)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 16))(*((_QWORD *)&v44 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44 + 1));
    }
  }
  v201 = &off_24C08D790;
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (*((_QWORD *)&v202 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v209.__r_.__value_.__l.__size_)
  {
    v58 = *(_QWORD *)v209.__r_.__value_.__l.__size_;
    v57 = *(std::__shared_weak_count **)(v209.__r_.__value_.__l.__size_ + 8);
    if (v57)
    {
      v59 = (unint64_t *)&v57->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
      do
        v61 = __ldaxr(v59);
      while (__stlxr(v61 - 1, v59));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (v58)
      sub_2081E30F8(v209.__r_.__value_.__l.__size_);
  }
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C08D790;
  v62 = (std::__shared_weak_count *)v209.__r_.__value_.__r.__words[2];
  if (!v209.__r_.__value_.__r.__words[2])
    goto LABEL_278;
  v63 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
LABEL_277:
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    v180 = (uint64_t *)v204;
    if (!(_QWORD)v204)
      goto LABEL_286;
    goto LABEL_279;
  }
LABEL_278:
  v180 = (uint64_t *)v204;
  if (!(_QWORD)v204)
    goto LABEL_286;
LABEL_279:
  v182 = *v180;
  v181 = (std::__shared_weak_count *)v180[1];
  if (!v181)
    goto LABEL_284;
  v183 = (unint64_t *)&v181->__shared_owners_;
  do
    v184 = __ldxr(v183);
  while (__stxr(v184 + 1, v183));
  do
    v185 = __ldaxr(v183);
  while (__stlxr(v185 - 1, v183));
  if (v185)
  {
LABEL_284:
    if (!v182)
      goto LABEL_286;
    goto LABEL_285;
  }
  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
  std::__shared_weak_count::__release_weak(v181);
  if (v182)
LABEL_285:
    sub_2081E30F8(v204);
LABEL_286:
  v203 = &off_24C08D790;
  v186 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v187 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
}

void sub_207DE7B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  sub_2081DE77C(&a27);
  sub_2081DD418((_QWORD *)(v30 - 208));
  sub_2081DD418(&a30);
  _Unwind_Resume(a1);
}

void sub_207DE7B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;

  *(_QWORD *)(v34 - 208) = v33;
  v36 = *(std::__shared_weak_count **)(v34 - 192);
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_2081DE77C(&a33);
  sub_2081DD418(&a30);
  _Unwind_Resume(a1);
}

void sub_207DE7BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_2081DD418(&a30);
  _Unwind_Resume(a1);
}

void sub_207DE7BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  sub_207C99D78(v44 - 208);
  if (a27 < 0)
    operator delete(__p);
  sub_20815AC38(&a30);
  sub_2081DD418(&a36);
  _Unwind_Resume(a1);
}

void sub_207DE7DF8()
{
  JUMPOUT(0x207DE7DE0);
}

void sub_207DE7E00(uint64_t a1, float32x4_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float64x2_t v21;
  float32x4_t *v22;
  int8x16_t *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  int8x8_t v29;
  uint64x2_t v30;
  float64x2_t v31;
  int8x8_t v32;
  int8x8_t v33;
  int8x8_t v34;
  float64x2_t v35;
  int8x8_t v36;
  int8x8_t v37;
  float64x2_t v38;
  int8x8_t v39;
  float64x2_t *v40;
  unint64_t v41;
  unint64_t v42;
  float32x4_t *v43;
  int8x16_t *v44;
  int8x16_t v45;
  unint64_t v46;
  int8x8_t v47;
  int8x8_t v48;
  uint64x2_t v49;
  float64x2_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  float64x2_t v54;
  int8x8_t v55;
  int8x8_t v56;
  float64x2_t v57;
  int8x8_t v58;
  float64x2_t v59;
  int8x8_t v60;
  int8x8_t v61;
  float64x2_t v62;
  int8x8_t v63;
  int8x8_t v64;
  float64x2_t v65;
  int8x8_t v66;
  float64x2_t v67;
  int8x8_t v68;
  int8x8_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t (**v78)();
  uint64_t *v79;
  std::__shared_weak_count *v80;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v79 = v3;
  v80 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v78 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    if (v8)
LABEL_11:
      sub_20815FC78((uint64_t)v79);
  }
LABEL_12:
  v12 = sub_20815C268((uint64_t)&v78, 0);
  v13 = sub_20815C4E8((uint64_t)&v78, 0);
  v14 = sub_20815A89C((uint64_t)&v78, 0);
  v15 = sub_20815C768((uint64_t)&v78, 0);
  if (v15 < v12
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 298, (uint64_t)"image_plane_bytes_per_row >= result_bytes_per_row", 49, (uint64_t)&unk_20821F46B, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (v13 && v12)
  {
    v17 = 0;
    v18 = 0;
    v19 = 4 * v12;
    v20 = v12 & 0xFFFFFFFFFFFFFFF8;
    v21 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
    v22 = a2;
    v23 = (int8x16_t *)v14;
    do
    {
      if (v12 >= 8
        && ((unint64_t)a2 + v19 * v18 < v14 + v12 + v17
          ? (v24 = v14 + v17 >= (unint64_t)a2 + v19 + v19 * v18)
          : (v24 = 1),
            v24))
      {
        if (v12 < 0x10)
        {
          v25 = 0;
LABEL_26:
          v26 = 4 * v25;
          do
          {
            v27 = *(uint64_t *)((char *)v23->i64 + v25);
            v28.i32[0] = v27;
            v28.i32[1] = BYTE1(v27);
            v29 = vand_s8(v28, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v29.u32[0];
            v30.i64[1] = v29.u32[1];
            v31 = vcvtq_f64_u64(v30);
            v32.i32[0] = BYTE2(v27);
            v32.i32[1] = BYTE3(v27);
            v33 = vand_s8(v32, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v33.u32[0];
            v30.i64[1] = v33.u32[1];
            v34.i32[0] = BYTE4(v27);
            v35 = vcvtq_f64_u64(v30);
            v34.i32[1] = BYTE5(v27);
            v36 = vand_s8(v34, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v36.u32[0];
            v30.i64[1] = v36.u32[1];
            v37.i32[0] = BYTE6(v27);
            v37.i32[1] = HIBYTE(v27);
            v38 = vcvtq_f64_u64(v30);
            v39 = vand_s8(v37, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v39.u32[0];
            v30.i64[1] = v39.u32[1];
            v16 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v38, v21)), vdivq_f64(vcvtq_f64_u64(v30), v21));
            v40 = (float64x2_t *)((char *)v22 + v26);
            *(float32x4_t *)v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v31, v21)), vdivq_f64(v35, v21));
            v40[1] = v16;
            v25 += 8;
            v26 += 32;
          }
          while (v20 != v25);
          v41 = v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == v20)
            goto LABEL_17;
          goto LABEL_31;
        }
        v42 = v12 & 0xFFFFFFFFFFFFFFF0;
        v43 = v22;
        v44 = v23;
        do
        {
          v45 = *v44++;
          v46 = vextq_s8(v45, v45, 8uLL).u64[0];
          v47.i32[0] = v46;
          v47.i32[1] = BYTE1(v46);
          v48 = vand_s8(v47, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v48.u32[0];
          v49.i64[1] = v48.u32[1];
          v50 = vcvtq_f64_u64(v49);
          v51.i32[0] = BYTE2(v46);
          v51.i32[1] = BYTE3(v46);
          v52 = vand_s8(v51, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v52.u32[0];
          v49.i64[1] = v52.u32[1];
          v53.i32[0] = BYTE4(v46);
          v54 = vcvtq_f64_u64(v49);
          v53.i32[1] = BYTE5(v46);
          v55 = vand_s8(v53, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v55.u32[0];
          v49.i64[1] = v55.u32[1];
          v56.i32[0] = BYTE6(v46);
          v56.i32[1] = HIBYTE(v46);
          v57 = vcvtq_f64_u64(v49);
          v58 = vand_s8(v56, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v58.u32[0];
          v49.i64[1] = v58.u32[1];
          v59 = vcvtq_f64_u64(v49);
          v56.i32[0] = v45.u8[0];
          v56.i32[1] = v45.u8[1];
          v60 = vand_s8(v56, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v60.u32[0];
          v49.i64[1] = v60.u32[1];
          v61.i32[0] = v45.u8[2];
          v62 = vcvtq_f64_u64(v49);
          v61.i32[1] = v45.u8[3];
          v63 = vand_s8(v61, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v63.u32[0];
          v49.i64[1] = v63.u32[1];
          v64.i32[0] = v45.u8[4];
          v64.i32[1] = v45.u8[5];
          v65 = vcvtq_f64_u64(v49);
          v66 = vand_s8(v64, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v66.u32[0];
          v49.i64[1] = v66.u32[1];
          v67 = vcvtq_f64_u64(v49);
          v68.i32[0] = v45.u8[6];
          v68.i32[1] = v45.u8[7];
          v69 = vand_s8(v68, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v69.u32[0];
          v49.i64[1] = v69.u32[1];
          v16 = vdivq_f64(vcvtq_f64_u64(v49), v21);
          *v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v62, v21)), vdivq_f64(v65, v21));
          v43[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v67, v21)), v16);
          v43[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v50, v21)), vdivq_f64(v54, v21));
          v43[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v57, v21)), vdivq_f64(v59, v21));
          v43 += 4;
          v42 -= 16;
        }
        while (v42);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_17;
        v25 = v12 & 0xFFFFFFFFFFFFFFF0;
        v41 = v12 & 0xFFFFFFFFFFFFFFF0;
        if ((v12 & 8) != 0)
          goto LABEL_26;
      }
      else
      {
        v41 = 0;
      }
      do
      {
LABEL_31:
        LOBYTE(v16.f64[0]) = v23->i8[v41];
        v16.f64[0] = (double)*(unint64_t *)&v16.f64[0] / 255.0;
        *(float *)v16.f64 = v16.f64[0];
        v22->i32[v41++] = LODWORD(v16.f64[0]);
      }
      while (v12 != v41);
LABEL_17:
      v17 += v15;
      ++v18;
      v23 = (int8x16_t *)((char *)v23 + v15);
      v22 = (float32x4_t *)((char *)v22 + v19);
    }
    while (v18 != v13);
  }
  if (v79)
  {
    v71 = *v79;
    v70 = (std::__shared_weak_count *)v79[1];
    if (!v70)
      goto LABEL_44;
    v72 = (unint64_t *)&v70->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    do
      v74 = __ldaxr(v72);
    while (__stlxr(v74 - 1, v72));
    if (v74)
    {
LABEL_44:
      if (!v71)
        goto LABEL_46;
      goto LABEL_45;
    }
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
    if (v71)
LABEL_45:
      sub_20815FE54((uint64_t)v79);
  }
LABEL_46:
  v78 = &off_24C08A5D8;
  v75 = v80;
  if (v80)
  {
    v76 = (unint64_t *)&v80->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_207DE82DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207DE832C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE8340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE8354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE8368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE837C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE8390(uint64_t a1, float32x4_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float64x2_t v21;
  float32x4_t *v22;
  int8x16_t *v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  int8x8_t v29;
  uint64x2_t v30;
  float64x2_t v31;
  int8x8_t v32;
  int8x8_t v33;
  int8x8_t v34;
  float64x2_t v35;
  int8x8_t v36;
  int8x8_t v37;
  float64x2_t v38;
  int8x8_t v39;
  float64x2_t *v40;
  unint64_t v41;
  unint64_t v42;
  float32x4_t *v43;
  int8x16_t *v44;
  int8x16_t v45;
  unint64_t v46;
  int8x8_t v47;
  int8x8_t v48;
  uint64x2_t v49;
  float64x2_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  float64x2_t v54;
  int8x8_t v55;
  int8x8_t v56;
  float64x2_t v57;
  int8x8_t v58;
  float64x2_t v59;
  int8x8_t v60;
  int8x8_t v61;
  float64x2_t v62;
  int8x8_t v63;
  int8x8_t v64;
  float64x2_t v65;
  int8x8_t v66;
  float64x2_t v67;
  int8x8_t v68;
  int8x8_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t (**v78)();
  uint64_t *v79;
  std::__shared_weak_count *v80;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v79 = v3;
  v80 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v78 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (v7)
    {
      v9 = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    if (v8)
LABEL_11:
      sub_20815FC78((uint64_t)v79);
  }
LABEL_12:
  v12 = sub_20815C130((uint64_t)&v78);
  v13 = sub_20815C3B0((uint64_t)&v78);
  v14 = sub_20815A89C((uint64_t)&v78, 0);
  v15 = sub_20815C630((uint64_t)&v78);
  if (v15 < v12
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 319, (uint64_t)"image_plane_bytes_per_row >= result_bytes_per_row", 49, (uint64_t)&unk_20821F46B, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (v13 && v12)
  {
    v17 = 0;
    v18 = 0;
    v19 = 4 * v12;
    v20 = v12 & 0xFFFFFFFFFFFFFFF8;
    v21 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
    v22 = a2;
    v23 = (int8x16_t *)v14;
    do
    {
      if (v12 >= 8
        && ((unint64_t)a2 + v19 * v18 < v14 + v12 + v17
          ? (v24 = v14 + v17 >= (unint64_t)a2 + v19 + v19 * v18)
          : (v24 = 1),
            v24))
      {
        if (v12 < 0x10)
        {
          v25 = 0;
LABEL_26:
          v26 = 4 * v25;
          do
          {
            v27 = *(uint64_t *)((char *)v23->i64 + v25);
            v28.i32[0] = v27;
            v28.i32[1] = BYTE1(v27);
            v29 = vand_s8(v28, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v29.u32[0];
            v30.i64[1] = v29.u32[1];
            v31 = vcvtq_f64_u64(v30);
            v32.i32[0] = BYTE2(v27);
            v32.i32[1] = BYTE3(v27);
            v33 = vand_s8(v32, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v33.u32[0];
            v30.i64[1] = v33.u32[1];
            v34.i32[0] = BYTE4(v27);
            v35 = vcvtq_f64_u64(v30);
            v34.i32[1] = BYTE5(v27);
            v36 = vand_s8(v34, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v36.u32[0];
            v30.i64[1] = v36.u32[1];
            v37.i32[0] = BYTE6(v27);
            v37.i32[1] = HIBYTE(v27);
            v38 = vcvtq_f64_u64(v30);
            v39 = vand_s8(v37, (int8x8_t)0xFF000000FFLL);
            v30.i64[0] = v39.u32[0];
            v30.i64[1] = v39.u32[1];
            v16 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v38, v21)), vdivq_f64(vcvtq_f64_u64(v30), v21));
            v40 = (float64x2_t *)((char *)v22 + v26);
            *(float32x4_t *)v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v31, v21)), vdivq_f64(v35, v21));
            v40[1] = v16;
            v25 += 8;
            v26 += 32;
          }
          while (v20 != v25);
          v41 = v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == v20)
            goto LABEL_17;
          goto LABEL_31;
        }
        v42 = v12 & 0xFFFFFFFFFFFFFFF0;
        v43 = v22;
        v44 = v23;
        do
        {
          v45 = *v44++;
          v46 = vextq_s8(v45, v45, 8uLL).u64[0];
          v47.i32[0] = v46;
          v47.i32[1] = BYTE1(v46);
          v48 = vand_s8(v47, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v48.u32[0];
          v49.i64[1] = v48.u32[1];
          v50 = vcvtq_f64_u64(v49);
          v51.i32[0] = BYTE2(v46);
          v51.i32[1] = BYTE3(v46);
          v52 = vand_s8(v51, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v52.u32[0];
          v49.i64[1] = v52.u32[1];
          v53.i32[0] = BYTE4(v46);
          v54 = vcvtq_f64_u64(v49);
          v53.i32[1] = BYTE5(v46);
          v55 = vand_s8(v53, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v55.u32[0];
          v49.i64[1] = v55.u32[1];
          v56.i32[0] = BYTE6(v46);
          v56.i32[1] = HIBYTE(v46);
          v57 = vcvtq_f64_u64(v49);
          v58 = vand_s8(v56, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v58.u32[0];
          v49.i64[1] = v58.u32[1];
          v59 = vcvtq_f64_u64(v49);
          v56.i32[0] = v45.u8[0];
          v56.i32[1] = v45.u8[1];
          v60 = vand_s8(v56, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v60.u32[0];
          v49.i64[1] = v60.u32[1];
          v61.i32[0] = v45.u8[2];
          v62 = vcvtq_f64_u64(v49);
          v61.i32[1] = v45.u8[3];
          v63 = vand_s8(v61, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v63.u32[0];
          v49.i64[1] = v63.u32[1];
          v64.i32[0] = v45.u8[4];
          v64.i32[1] = v45.u8[5];
          v65 = vcvtq_f64_u64(v49);
          v66 = vand_s8(v64, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v66.u32[0];
          v49.i64[1] = v66.u32[1];
          v67 = vcvtq_f64_u64(v49);
          v68.i32[0] = v45.u8[6];
          v68.i32[1] = v45.u8[7];
          v69 = vand_s8(v68, (int8x8_t)0xFF000000FFLL);
          v49.i64[0] = v69.u32[0];
          v49.i64[1] = v69.u32[1];
          v16 = vdivq_f64(vcvtq_f64_u64(v49), v21);
          *v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v62, v21)), vdivq_f64(v65, v21));
          v43[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v67, v21)), v16);
          v43[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v50, v21)), vdivq_f64(v54, v21));
          v43[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v57, v21)), vdivq_f64(v59, v21));
          v43 += 4;
          v42 -= 16;
        }
        while (v42);
        if (v12 == (v12 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_17;
        v25 = v12 & 0xFFFFFFFFFFFFFFF0;
        v41 = v12 & 0xFFFFFFFFFFFFFFF0;
        if ((v12 & 8) != 0)
          goto LABEL_26;
      }
      else
      {
        v41 = 0;
      }
      do
      {
LABEL_31:
        LOBYTE(v16.f64[0]) = v23->i8[v41];
        v16.f64[0] = (double)*(unint64_t *)&v16.f64[0] / 255.0;
        *(float *)v16.f64 = v16.f64[0];
        v22->i32[v41++] = LODWORD(v16.f64[0]);
      }
      while (v12 != v41);
LABEL_17:
      v17 += v15;
      ++v18;
      v23 = (int8x16_t *)((char *)v23 + v15);
      v22 = (float32x4_t *)((char *)v22 + v19);
    }
    while (v18 != v13);
  }
  if (v79)
  {
    v71 = *v79;
    v70 = (std::__shared_weak_count *)v79[1];
    if (!v70)
      goto LABEL_44;
    v72 = (unint64_t *)&v70->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    do
      v74 = __ldaxr(v72);
    while (__stlxr(v74 - 1, v72));
    if (v74)
    {
LABEL_44:
      if (!v71)
        goto LABEL_46;
      goto LABEL_45;
    }
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
    if (v71)
LABEL_45:
      sub_20815FE54((uint64_t)v79);
  }
LABEL_46:
  v78 = &off_24C08A5D8;
  v75 = v80;
  if (v80)
  {
    v76 = (unint64_t *)&v80->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_207DE8860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207DE88B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE88C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE88D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE88EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE8900(uint64_t a1, size_t a2)
{
  __CVBuffer **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  __CVBuffer *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  __CVBuffer *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  const char *BaseAddressOfPlane;
  __CVBuffer *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  size_t BytesPerRowOfPlane;
  float64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  unint64_t v37;
  float64x2_t v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  const char *v43;
  double v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  unint64_t v63;
  const char *v64;
  float32x4_t *v65;
  unint64_t v66;
  int8x8_t v67;
  int8x8_t v68;
  uint64x2_t v69;
  float64x2_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x8_t v73;
  float64x2_t v74;
  int8x8_t v75;
  int8x8_t v76;
  float64x2_t v77;
  int8x8_t v78;
  float64x2_t v79;
  int8x8_t v80;
  int8x8_t v81;
  float64x2_t v82;
  int8x8_t v83;
  int8x8_t v84;
  float64x2_t v85;
  int8x8_t v86;
  float64x2_t v87;
  int8x8_t v88;
  int8x8_t v89;
  float32x4_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float32x4_t *v98;
  std::__shared_weak_count *v99;
  __CVBuffer *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  char v107;
  uint64_t (**v108)();
  __CVBuffer **v109;
  std::__shared_weak_count *v110;
  int8x16x2_t v111;

  v3 = *(__CVBuffer ***)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v109 = v3;
  v110 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v108 = off_24C08A598;
  if (v3)
  {
    v8 = *v3;
    v7 = (std::__shared_weak_count *)v3[1];
    if (!v7)
      goto LABEL_10;
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (v11)
    {
LABEL_10:
      if (!v8)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v8)
LABEL_11:
      sub_20815FC78((uint64_t)v109);
  }
LABEL_12:
  v12 = sub_20815C268((uint64_t)&v108, 1uLL);
  v13 = sub_20815C4E8((uint64_t)&v108, 1uLL);
  if (v109)
  {
    v14 = *v109;
    v15 = (std::__shared_weak_count *)v109[1];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  BaseAddressOfPlane = (const char *)CVPixelBufferGetBaseAddressOfPlane(v14, 1uLL);
  if (v109)
  {
    v20 = *v109;
    v21 = (std::__shared_weak_count *)v109[1];
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    v20 = 0;
  }
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v20, 1uLL);
  if (BytesPerRowOfPlane < 2 * v12
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Util/src/MLUtils.cpp", 342, (uint64_t)"image_plane_bytes_per_row >= result_bytes_per_row * 2u", 54, (uint64_t)&unk_20821F46B, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (v13 && v12)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = a2 + 4 * v12;
    v31 = 4 * v13 * v12;
    v32 = a2 + v31;
    v33 = a2 + v12 * (4 * v13 + 4);
    v34 = 2 * (v12 - 1);
    v35 = v33 <= a2 || v32 >= v30;
    v36 = !v35;
    v107 = v36;
    v37 = v12 & 0xFFFFFFFFFFFFFFF0;
    v38 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
    v39 = BaseAddressOfPlane;
    do
    {
      if (v12 >= 0x10)
      {
        v40 = 0;
        v46 = (char *)&BaseAddressOfPlane[v27];
        if (&BaseAddressOfPlane[v27 + v34] >= &BaseAddressOfPlane[v27])
        {
          v47 = v46 + 1;
          if (&v46[v34 + 1] >= v46 + 1 && ((v12 - 1) & 0x8000000000000000) == 0)
          {
            v40 = 0;
            v48 = (char *)&BaseAddressOfPlane[2 * v12 - 1 + v27];
            v49 = (char *)&BaseAddressOfPlane[2 * v12 + v27];
            v50 = 4 * v28;
            v51 = a2 + 4 * v28;
            v52 = v30 + 4 * v28;
            v53 = v51 >= (unint64_t)v48 || (unint64_t)v46 >= v52;
            v54 = v107;
            if (!v53)
              v54 = 1;
            v35 = v51 >= (unint64_t)v49;
            v55 = v32 + v50;
            v56 = v33 + v50;
            v57 = v35 || (unint64_t)v47 >= v52;
            v58 = !v57;
            v59 = v55 >= (unint64_t)v48 || (unint64_t)v46 >= v56;
            v60 = !v59;
            v61 = v55 >= (unint64_t)v49 || (unint64_t)v47 >= v56;
            v62 = !v61;
            if ((v54 & 1) == 0 && !v58 && !v60 && !v62)
            {
              v41 = v28 + v37;
              v63 = v12 & 0xFFFFFFFFFFFFFFF0;
              v64 = v39;
              v65 = (float32x4_t *)(a2 + 4 * v28);
              do
              {
                v111 = vld2q_s8(v64);
                v64 += 32;
                v66 = vextq_s8(v111.val[0], v111.val[0], 8uLL).u64[0];
                v67.i32[0] = v66;
                v67.i32[1] = BYTE1(v66);
                v68 = vand_s8(v67, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v68.u32[0];
                v69.i64[1] = v68.u32[1];
                v70 = vcvtq_f64_u64(v69);
                v71.i32[0] = BYTE2(v66);
                v71.i32[1] = BYTE3(v66);
                v72 = vand_s8(v71, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v72.u32[0];
                v69.i64[1] = v72.u32[1];
                v73.i32[0] = BYTE4(v66);
                v74 = vcvtq_f64_u64(v69);
                v73.i32[1] = BYTE5(v66);
                v75 = vand_s8(v73, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v75.u32[0];
                v69.i64[1] = v75.u32[1];
                v76.i32[0] = BYTE6(v66);
                v76.i32[1] = HIBYTE(v66);
                v77 = vcvtq_f64_u64(v69);
                v78 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v78.u32[0];
                v69.i64[1] = v78.u32[1];
                v79 = vcvtq_f64_u64(v69);
                v76.i32[0] = v111.val[0].u8[0];
                v76.i32[1] = v111.val[0].u8[1];
                v80 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v80.u32[0];
                v69.i64[1] = v80.u32[1];
                v81.i32[0] = v111.val[0].u8[2];
                v82 = vcvtq_f64_u64(v69);
                v81.i32[1] = v111.val[0].u8[3];
                v83 = vand_s8(v81, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v83.u32[0];
                v69.i64[1] = v83.u32[1];
                v84.i32[0] = v111.val[0].u8[4];
                v84.i32[1] = v111.val[0].u8[5];
                v85 = vcvtq_f64_u64(v69);
                v86 = vand_s8(v84, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v86.u32[0];
                v69.i64[1] = v86.u32[1];
                v87 = vcvtq_f64_u64(v69);
                v88.i32[0] = v111.val[0].u8[6];
                v88.i32[1] = v111.val[0].u8[7];
                v89 = vand_s8(v88, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v89.u32[0];
                v69.i64[1] = v89.u32[1];
                v90 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v70, v38)), vdivq_f64(v74, v38));
                *v65 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v82, v38)), vdivq_f64(v85, v38));
                v65[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v87, v38)), vdivq_f64(vcvtq_f64_u64(v69), v38));
                *(_QWORD *)&v74.f64[0] = vextq_s8(v111.val[1], v111.val[1], 8uLL).u64[0];
                v65[2] = v90;
                v65[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v77, v38)), vdivq_f64(v79, v38));
                v90.i32[0] = LOBYTE(v74.f64[0]);
                v90.i32[1] = BYTE1(v74.f64[0]);
                *(int8x8_t *)v90.f32 = vand_s8(*(int8x8_t *)v90.f32, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v90.u32[0];
                v69.i64[1] = v90.u32[1];
                v91 = vcvtq_f64_u64(v69);
                LODWORD(v77.f64[0]) = BYTE2(v74.f64[0]);
                HIDWORD(v77.f64[0]) = BYTE3(v74.f64[0]);
                *(int8x8_t *)&v77.f64[0] = vand_s8(*(int8x8_t *)&v77.f64[0], (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = LODWORD(v77.f64[0]);
                v69.i64[1] = HIDWORD(v77.f64[0]);
                v92 = vcvtq_f64_u64(v69);
                LODWORD(v79.f64[0]) = BYTE4(v74.f64[0]);
                HIDWORD(v79.f64[0]) = BYTE5(v74.f64[0]);
                *(int8x8_t *)&v79.f64[0] = vand_s8(*(int8x8_t *)&v79.f64[0], (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = LODWORD(v79.f64[0]);
                v69.i64[1] = HIDWORD(v79.f64[0]);
                v93 = vcvtq_f64_u64(v69);
                LODWORD(v82.f64[0]) = BYTE6(v74.f64[0]);
                HIDWORD(v82.f64[0]) = HIBYTE(v74.f64[0]);
                *(int8x8_t *)&v74.f64[0] = vand_s8(*(int8x8_t *)&v82.f64[0], (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = LODWORD(v74.f64[0]);
                v69.i64[1] = HIDWORD(v74.f64[0]);
                v94 = vcvtq_f64_u64(v69);
                LODWORD(v82.f64[0]) = v111.val[1].u8[0];
                HIDWORD(v82.f64[0]) = v111.val[1].u8[1];
                *(int8x8_t *)&v82.f64[0] = vand_s8(*(int8x8_t *)&v82.f64[0], (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = LODWORD(v82.f64[0]);
                v69.i64[1] = HIDWORD(v82.f64[0]);
                v95 = vcvtq_f64_u64(v69);
                LODWORD(v85.f64[0]) = v111.val[1].u8[2];
                HIDWORD(v85.f64[0]) = v111.val[1].u8[3];
                *(int8x8_t *)&v85.f64[0] = vand_s8(*(int8x8_t *)&v85.f64[0], (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = LODWORD(v85.f64[0]);
                v69.i64[1] = HIDWORD(v85.f64[0]);
                v96 = vcvtq_f64_u64(v69);
                LODWORD(v87.f64[0]) = v111.val[1].u8[4];
                HIDWORD(v87.f64[0]) = v111.val[1].u8[5];
                *(int8x8_t *)&v87.f64[0] = vand_s8(*(int8x8_t *)&v87.f64[0], (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = LODWORD(v87.f64[0]);
                v69.i64[1] = HIDWORD(v87.f64[0]);
                v97 = vcvtq_f64_u64(v69);
                v89.i32[0] = v111.val[1].u8[6];
                v89.i32[1] = v111.val[1].u8[7];
                *(int8x8_t *)v111.val[0].i8 = vand_s8(v89, (int8x8_t)0xFF000000FFLL);
                v69.i64[0] = v111.val[0].u32[0];
                v69.i64[1] = v111.val[0].u32[1];
                v26 = vdivq_f64(vcvtq_f64_u64(v69), v38);
                v98 = (float32x4_t *)((char *)v65 + v31);
                *v98 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v95, v38)), vdivq_f64(v96, v38));
                v98[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v97, v38)), v26);
                v98[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v91, v38)), vdivq_f64(v92, v38));
                v98[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v93, v38)), vdivq_f64(v94, v38));
                v65 += 4;
                v63 -= 16;
              }
              while (v63);
              v40 = v12 & 0xFFFFFFFFFFFFFFF0;
              if (v12 == v37)
                goto LABEL_44;
              goto LABEL_42;
            }
          }
        }
      }
      else
      {
        v40 = 0;
      }
      v41 = v28;
LABEL_42:
      v42 = v12 - v40;
      v43 = &v39[2 * v40];
      do
      {
        LOBYTE(v26.f64[0]) = *v43;
        v44 = (double)*(unint64_t *)&v26.f64[0] / 255.0;
        *(float *)&v44 = v44;
        v45 = 4 * v41;
        *(_DWORD *)(a2 + v45) = LODWORD(v44);
        LOBYTE(v44) = v43[1];
        v26.f64[0] = (double)*(unint64_t *)&v44 / 255.0;
        *(float *)v26.f64 = v26.f64[0];
        *(_DWORD *)(a2 + 4 * v13 * v12 + v45) = LODWORD(v26.f64[0]);
        ++v41;
        v43 += 2;
        --v42;
      }
      while (v42);
LABEL_44:
      v27 += BytesPerRowOfPlane;
      ++v29;
      v39 += BytesPerRowOfPlane;
      v28 = v41;
    }
    while (v29 != v13);
  }
  if (v109)
  {
    v100 = *v109;
    v99 = (std::__shared_weak_count *)v109[1];
    if (!v99)
      goto LABEL_86;
    v101 = (unint64_t *)&v99->__shared_owners_;
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
    do
      v103 = __ldaxr(v101);
    while (__stlxr(v103 - 1, v101));
    if (v103)
    {
LABEL_86:
      if (!v100)
        goto LABEL_88;
      goto LABEL_87;
    }
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
    if (v100)
LABEL_87:
      sub_20815FE54((uint64_t)v109);
  }
LABEL_88:
  v108 = &off_24C08A5D8;
  v104 = v110;
  if (v110)
  {
    v105 = (unint64_t *)&v110->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
}

void sub_207DE8FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207DE9024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE9038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DE9060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_207DE9074(char *a1, uint64_t a2)
{
  unsigned __int8 v4;
  std::string *v5;
  uint64_t *v6;
  unint64_t v7;
  std::string::size_type size;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 *v32;
  int64x2_t v33;
  int8x16_t v34;
  std::string __p;
  void *v36[3];
  void *v37[2];
  char v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253E510B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E510B8))
  {
    sub_207C96EE8(v37, "ImageView");
    v31 = sub_207CABB88();
    sub_207DE94FC((uint64_t)&v39, (uint64_t)v31);
    v32 = sub_207CACD14();
    sub_207DE94FC((uint64_t)&v42, (uint64_t)v32);
    sub_207CAA110(v36, (uint64_t)&v39, 2uLL);
    sub_208215D20((char *)v37, (uint64_t *)v36, (std::string *)&qword_253E510C8, v33, v34);
    sub_207C99DE0(v36);
    if (SHIBYTE(v44) < 0)
    {
      operator delete(v42);
      if ((SHIBYTE(v41) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v38 & 0x80000000) == 0)
        {
LABEL_46:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E510C8, &dword_207C77000);
          __cxa_guard_release(&qword_253E510B8);
          goto LABEL_2;
        }
LABEL_50:
        operator delete(v37[0]);
        goto LABEL_46;
      }
    }
    else if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(v39);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_50;
  }
LABEL_2:
  v5 = sub_207DE95B4();
  v39 = "Attempting to create an ";
  v40 = 24;
  v6 = &qword_253E510C8;
  v7 = byte_253E510DF;
  if (byte_253E510DF < 0)
  {
    v7 = unk_253E510D0;
    v6 = (uint64_t *)qword_253E510C8;
  }
  v41 = (const char *)v6;
  v42 = (void *)v7;
  v43 = " from an ";
  v44 = 9;
  size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v5->__r_.__value_.__l.__size_;
  v45[0] = v9;
  v45[1] = size;
  sub_207CAC8F4((uint64_t)&v39, (uint64_t)&v46, 0, 0, &__p);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v39 = p_p;
    v40 = v21;
    v41 = " but the other image contains an incompatible buffer type ";
    v42 = (void *)58;
    v43 = (const char *)v19;
    v44 = v20;
    sub_207CAC8F4((uint64_t)&v39, (uint64_t)v45, 0, 0, (std::string *)a1);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_25;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v26 <= 0x16)
  {
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    v27 = a1;
    a1[23] = v26;
LABEL_36:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, v30, v25);
    goto LABEL_40;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  *((_QWORD *)a1 + 1) = v26;
  *((_QWORD *)a1 + 2) = v29 | 0x8000000000000000;
  *(_QWORD *)a1 = v27;
  a1 = v27;
  if (v25)
    goto LABEL_36;
LABEL_40:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_207DE941C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_207C99DE0(&a13);
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_253E510B8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a16);
  __cxa_guard_abort(&qword_253E510B8);
  _Unwind_Resume(a1);
}

void sub_207DE94D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207DE94FC(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_20821F46B, 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207DE9598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_207DE95B4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452BE30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BE30))
  {
    sub_207C96EE8(v7, "ImageView");
    v2 = sub_207CABB88();
    sub_207DE97B8((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207DE97B8((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452BE18, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BE18, &dword_207C77000);
          __cxa_guard_release(&qword_25452BE30);
          return &stru_25452BE18;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452BE18;
}

void sub_207DE9704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452BE30);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452BE30);
  _Unwind_Resume(a1);
}

void sub_207DE97B8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_20821F46B, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207DE9854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DE9870(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::logic_error *exception;
  std::string v23;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207DE9AEC(a1);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v23.__r_.__value_.__r.__words[0] = v4;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v12 = v11 != 0;
  v13 = v11 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  if (v13)
    v14 = 0;
  else
    v14 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v15) * HIDWORD(v14) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v16 = v14 | v12;
  v17 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v23.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v16;
    *(_WORD *)(a2 + 40) = v17;
  }
}

void sub_207DE9AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_207DE9AEC(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_207DE95B4();
  v3 = sub_207DDD0CC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_207CA9B98("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t sub_207DE9B64(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

double sub_207DE9BCC(char *a1, uint64_t a2)
{
  unsigned __int8 v4;
  std::string *v5;
  uint64_t *v6;
  unint64_t v7;
  std::string::size_type size;
  std::string *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *p_p;
  double result;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 *v32;
  int64x2_t v33;
  int8x16_t v34;
  std::string __p;
  void *v36[3];
  void *v37[2];
  char v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253E510C0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E510C0))
  {
    sub_207C96EE8(v37, "ImageView");
    v31 = sub_207CAD95C();
    sub_207DEA054((uint64_t)&v39, (uint64_t)v31);
    v32 = sub_207CACD14();
    sub_207DEA054((uint64_t)&v42, (uint64_t)v32);
    sub_207CAA110(v36, (uint64_t)&v39, 2uLL);
    sub_208215D20((char *)v37, (uint64_t *)v36, (std::string *)&qword_253E510E0, v33, v34);
    sub_207C99DE0(v36);
    if (SHIBYTE(v44) < 0)
    {
      operator delete(v42);
      if ((SHIBYTE(v41) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v38 & 0x80000000) == 0)
        {
LABEL_46:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E510E0, &dword_207C77000);
          __cxa_guard_release(&qword_253E510C0);
          goto LABEL_2;
        }
LABEL_50:
        operator delete(v37[0]);
        goto LABEL_46;
      }
    }
    else if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(v39);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_50;
  }
LABEL_2:
  v5 = sub_207DEA10C();
  v39 = "Attempting to create an ";
  v40 = 24;
  v6 = &qword_253E510E0;
  v7 = byte_253E510F7;
  if (byte_253E510F7 < 0)
  {
    v7 = unk_253E510E8;
    v6 = (uint64_t *)qword_253E510E0;
  }
  v41 = (const char *)v6;
  v42 = (void *)v7;
  v43 = " from an ";
  v44 = 9;
  size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v9 = v5;
  else
    v9 = (std::string *)v5->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = v5->__r_.__value_.__l.__size_;
  v45[0] = v9;
  v45[1] = size;
  sub_207CAC8F4((uint64_t)&v39, (uint64_t)&v46, 0, 0, &__p);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(std::__shared_weak_count **)(a2 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a2 + 8);
      v15 = *(std::__shared_weak_count **)(a2 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v21 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v39 = p_p;
    v40 = v21;
    v41 = " but the other image contains an incompatible buffer type ";
    v42 = (void *)58;
    v43 = (const char *)v19;
    v44 = v20;
    sub_207CAC8F4((uint64_t)&v39, (uint64_t)v45, 0, 0, (std::string *)a1);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_25;
    return result;
  }
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = v25 + 46;
  if (v25 + 46 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v26 <= 0x16)
  {
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    v27 = a1;
    a1[23] = v26;
LABEL_36:
    if (v24 >= 0)
      v30 = &__p;
    else
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(a1, v30, v25);
    goto LABEL_40;
  }
  v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17)
    v28 = v26 | 7;
  v29 = v28 + 1;
  v27 = (char *)operator new(v28 + 1);
  *((_QWORD *)a1 + 1) = v26;
  *((_QWORD *)a1 + 2) = v29 | 0x8000000000000000;
  *(_QWORD *)a1 = v27;
  a1 = v27;
  if (v25)
    goto LABEL_36;
LABEL_40:
  strcpy(&v27[v25], " but the other image does not contain a buffer");
  result = *(double *)"contain a buffer";
  if ((v24 & 0x80) != 0)
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
  return result;
}

void sub_207DE9F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_207C99DE0(&a13);
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_253E510C0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a16);
  __cxa_guard_abort(&qword_253E510C0);
  _Unwind_Resume(a1);
}

void sub_207DEA028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207DEA054(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_20821F46B, 0, 1, 1, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207DEA0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_207DEA10C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25452BE50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BE50))
  {
    sub_207C96EE8(v7, "ImageView");
    v2 = sub_207CAD95C();
    sub_207DEA310((uint64_t)v2, (uint64_t)v9);
    v3 = sub_207CABC80();
    sub_207DEA310((uint64_t)v3, (uint64_t)&__p);
    sub_207CAA110(v6, (uint64_t)v9, 2uLL);
    sub_208215D20((char *)v7, (uint64_t *)v6, &stru_25452BE38, v4, v5);
    sub_207C99DE0(v6);
    if (v12 < 0)
    {
      operator delete(__p);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BE38, &dword_207C77000);
          __cxa_guard_release(&qword_25452BE50);
          return &stru_25452BE38;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9[0]);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_25452BE38;
}

void sub_207DEA25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_207C99DE0((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_25452BE50);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_25452BE50);
  _Unwind_Resume(a1);
}

void sub_207DEA310(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    sub_207CA40D8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_2082144D8(&__p, "cv3d::kit::img::", 16, (const std::string::value_type *)&unk_20821F46B, 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207DEA3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DEA3C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DEA430()
{
  return 5;
}

uint64_t sub_207DEA438(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_207DEA440@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_207DEA454(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_207DEA4D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::logic_error *exception;
  std::string v30;
  _BYTE v31[12];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207DEA7D8(a1);
    std::logic_error::logic_error(exception, &v30);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v30.__r_.__value_.__r.__words[0] = v4;
      v30.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_DWORD *)v31 = 2;
  *(_QWORD *)&v31[4] = v17;
  v18 = v17;
  v19 = *(_QWORD *)v31;
  v20 = HIDWORD(v17);
  *(_DWORD *)v31 = 1;
  *(_QWORD *)&v31[4] = v16;
  v21 = *(_QWORD *)v31;
  v22 = HIDWORD(v15);
  if (HIDWORD(v17) * HIDWORD(v15) == -1
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v23 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)a2 = v30.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v19;
  *(_DWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v22;
  *(_QWORD *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v23;
  if (size)
  {
    v27 = (unint64_t *)&size->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_207DEA78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_207DEA7D8(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  unsigned int v5;

  v2 = sub_207DEA10C();
  v3 = sub_207DDD0CC();
  v5 = *(_DWORD *)(a1 + 48);
  return sub_207CA9B98("Attempting to create an ", (uint64_t)v2, (uint64_t)" from an ", (uint64_t)v3, (uint64_t)" but the image is of incompatible format ", &v5);
}

uint64_t *sub_207DEA850(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_207CA77C0((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *sub_207DEAA7C(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  _QWORD v58[2];
  char v59;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_207CA77C0((uint64_t)v58, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x38uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  v59 = 0;
  *v26 = 0;
  v26[1] = v10;
  v27 = v26 + 2;
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_207CA40D8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v59 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v34 = 1;
    if (v11 >= 3)
      v34 = (v11 & (v11 - 1)) != 0;
    v35 = v34 | (2 * v11);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime > v11)
    {
LABEL_68:
      if (prime >> 61)
        sub_207CA3AB8();
      v38 = operator new(8 * prime);
      v39 = *(void **)a1;
      *(_QWORD *)a1 = v38;
      if (v39)
        operator delete(v39);
      v40 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      v41 = (_QWORD *)*v25;
      if (!*v25)
        goto LABEL_100;
      v42 = v41[1];
      v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v44 = v42 & v43;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v25;
        for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
        {
          v46 = i[1] & v43;
          if (v46 == v44)
          {
            v41 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
          {
            *v41 = *i;
            v47 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v47);
            **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v41;
            v41 = i;
            v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime)
        v42 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      v51 = (_QWORD *)*v41;
      if (!*v41)
      {
LABEL_100:
        v11 = prime;
        v54 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_101;
        goto LABEL_116;
      }
      while (1)
      {
        v53 = v51[1];
        if (v53 >= prime)
          v53 %= prime;
        if (v53 == v42)
          goto LABEL_94;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v53))
        {
          *v41 = *v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)(*(_QWORD *)a1 + v52);
          **(_QWORD **)(*(_QWORD *)a1 + v52) = v51;
          v51 = v41;
LABEL_94:
          v41 = v51;
          v51 = (_QWORD *)*v51;
          if (!v51)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v41;
          v41 = v51;
          v51 = (_QWORD *)*v51;
          v42 = v53;
          if (!v51)
            goto LABEL_100;
        }
      }
    }
    if (prime < v11)
    {
      v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (prime <= v48)
        prime = v48;
      if (prime < v11)
      {
        if (!prime)
        {
          v55 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v55)
            operator delete(v55);
          v11 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v54 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_101:
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
LABEL_117:
      *v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v58[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v25;
      if (*(_QWORD *)v58[0])
      {
        v56 = *(_QWORD *)(*(_QWORD *)v58[0] + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v56 >= v11)
            v56 %= v11;
        }
        else
        {
          v56 &= v11 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    v3 = v54 & v10;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v54 & v10));
    v33 = (_QWORD *)v58[0];
    if (v32)
      goto LABEL_57;
    goto LABEL_117;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v33 = (_QWORD *)v58[0];
  if (!v32)
    goto LABEL_117;
LABEL_57:
  *v33 = *v32;
  *v32 = v58[0];
LABEL_123:
  v14 = (uint64_t *)v58[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_207DEB05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DEB088((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DEB070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DEB088((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207DEB088(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_207DEB120(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DEB130(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DEB150(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_207DEB1AC(float *a1@<X0>, float *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;

  v4 = a1[5];
  if (fabsf(fabsf(v4) + -1.0) <= 0.00034527)
  {
    v11 = v4 + -1.0;
    v12 = *a1;
    if (v11 <= 0.00034527)
    {
      v7 = atan2f(v12, *a1);
      v10 = 0.0;
      v13 = 1119092736;
    }
    else
    {
      v7 = atan2f(-v12, -v12);
      v10 = 0.0;
      v13 = -1028390912;
    }
    v9 = *(float *)&v13;
  }
  else
  {
    v5 = asinf(v4);
    v6 = cosf(v5);
    v7 = atan2f((float)-a1[2] / v6, a1[8] / v6);
    v8 = atan2f((float)-a1[3] / v6, a1[4] / v6);
    v9 = v5 * 57.296;
    v10 = v8 * 57.296;
  }
  *a2 = v9;
  a2[1] = v7 * 57.296;
  a2[2] = v10;
}

float32x4_t sub_207DEB2BC(float32x4_t *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float32_t v6;
  float v7;
  float v8;
  float32_t v9;
  float v10;
  float v11;
  float32_t v12;
  int8x16_t v13;
  float32x2_t v14;
  float32x4_t result;
  float32_t v16;
  float v17;

  *a1 = (float32x4_t)xmmword_208238740;
  v2 = (float)((float)(*a2 + 1.0) + a2[4]) + a2[8];
  a1->f32[0] = v2;
  v3 = (float)((float)(*a2 + 1.0) - a2[4]) - a2[8];
  a1->f32[1] = v3;
  v4 = (float)((float)(1.0 - *a2) + a2[4]) - a2[8];
  a1->f32[2] = v4;
  v5 = (float)((float)(1.0 - *a2) - a2[4]) + a2[8];
  a1->f32[3] = v5;
  if (v2 <= 1.0)
  {
    if (v3 <= 1.0)
    {
      if (v4 <= 1.0)
      {
        v16 = fabsf(sqrtf(v5)) * 0.5;
        a1->f32[3] = v16;
        v17 = v16 * 4.0;
        a1->f32[0] = (float)(a2[1] - a2[3]) / v17;
        a1->f32[1] = (float)(a2[6] + a2[2]) / v17;
        a1->f32[2] = (float)(a2[5] + a2[7]) / v17;
        goto LABEL_9;
      }
      v12 = sqrtf(v4) * 0.5;
      a1->f32[2] = v12;
      v7 = v12 * 4.0;
      a1->f32[0] = (float)(a2[6] - a2[2]) / v7;
      a1->f32[1] = (float)(a2[3] + a2[1]) / v7;
      v10 = a2[5];
      v11 = a2[7];
    }
    else
    {
      v9 = sqrtf(v3) * 0.5;
      a1->f32[1] = v9;
      v7 = v9 * 4.0;
      a1->f32[0] = (float)(a2[5] - a2[7]) / v7;
      a1->f32[2] = (float)(a2[3] + a2[1]) / v7;
      v10 = a2[2];
      v11 = a2[6];
    }
    v8 = v10 + v11;
  }
  else
  {
    v6 = sqrtf(v2) * 0.5;
    a1->f32[0] = v6;
    v7 = v6 * 4.0;
    a1->f32[1] = (float)(a2[5] - a2[7]) / v7;
    a1->f32[2] = (float)(a2[6] - a2[2]) / v7;
    v8 = a2[1] - a2[3];
  }
  a1->f32[3] = v8 / v7;
LABEL_9:
  v13 = *(int8x16_t *)a1;
  v14 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
  result = vmulq_n_f32(*a1, 1.0/ sqrtf(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1->f32, 1), *(float32x2_t *)a1->f32, 1), v14, v14), (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a1, 3), *a1, 3).f32[0]));
  *a1 = result;
  return result;
}

const char *sub_207DEB4D8()
{
  return "ODT";
}

void sub_207DEB4E4(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_207DEB510()
{
  char *v0;

  v0[23] = 8;
  strcpy(v0, "No error");
}

void sub_207DEB53C()
{
  char *v0;

  v0[23] = 13;
  strcpy(v0, "Frame expired");
}

char *sub_207DEB56C()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_208238780;
  strcpy(result, "Active class to class ID mapping missing");
  return result;
}

void sub_207DEB5AC()
{
  char *v0;

  v0[23] = 17;
  strcpy(v0, "Crop frame failed");
}

char *sub_207DEB5D8()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_20822C980;
  strcpy(result, "Pipeline not initialized");
  return result;
}

char *sub_207DEB680()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_20822E360;
  strcpy(result, "Model bundle format not supported");
  return result;
}

char *sub_207DEB6BC()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_20822EB60;
  strcpy(result, "Model bundle folder structure mismatch");
  return result;
}

double sub_207DEB760()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x38uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_20822AB50;
  strcpy(v1, "Failed to initialize e5 program library for model");
  return *(double *)"library for model";
}

char *sub_207DEB7A4()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_20822EB50;
  strcpy(result, "Failed to initialize Espresso model");
  return result;
}

double sub_207DEB7E8()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)operator new(0x20uLL);
  *(_QWORD *)v0 = v1;
  *(_OWORD *)(v0 + 8) = xmmword_20822ABB0;
  strcpy(v1, "Failed to create e5 compiler");
  return *(double *)"eate e5 compiler";
}

char *sub_207DEB828()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_208238750;
  strcpy(result, "Failed to compile model using e5 API");
  return result;
}

void sub_207DEB86C()
{
  char *v0;

  v0[23] = 19;
  strcpy(v0, "Error in processing");
}

void sub_207DEB8A0(const std::error_condition *a1@<X0>, uint64_t a2@<X1>, CFErrorRef *a3@<X8>)
{
  void *__p[2];
  uint64_t v6;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_207CA40D8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v6 = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    HIBYTE(v6) = 0;
    LOBYTE(__p[0]) = 0;
  }
  sub_207D01528(a1, (uint64_t)__p, a3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_207DEB940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DEB95C(const std::error_condition *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFErrorRef *a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  CFDictionaryRef v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const __CFAllocator *Default;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  CFStringRef v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *__p[2];
  uint64_t v41;
  void *v42;
  std::__shared_weak_count *v43;
  char v44;
  CFDictionaryRef theDict;
  std::__shared_weak_count *v46;
  __CFError *v47;
  std::__shared_weak_count *v48;
  void *key;
  std::__shared_weak_count *v50;
  CFStringRef v51;
  std::__shared_weak_count *v52;

  sub_207DEB8A0(a1, a2, &v47);
  sub_207D012D8(&v47, (CFMutableDictionaryRef *)__p);
  sub_207D0178C((std::__shared_weak_count_vtbl **)&v42, (uint64_t)__p);
  LOBYTE(v51) = 0;
  LOBYTE(v52) = 0;
  sub_207CFA638((uint64_t)&v42, (uint64_t)&v51, &theDict);
  v7 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v11 = (unint64_t *)((char *)__p[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v44 = 4;
  strcpy((char *)&v42, "UUID");
  if (*(_BYTE *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_207CA40D8(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v41 = *(_QWORD *)(a3 + 16);
    }
  }
  else
  {
    HIBYTE(v41) = 0;
    LOBYTE(__p[0]) = 0;
  }
  sub_207CF8F18((uint64_t)&v42, (CFStringRef *)&key);
  v13 = key;
  v15 = theDict;
  v14 = v46;
  if (!v46)
    goto LABEL_21;
  v16 = (unint64_t *)&v46->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v15)
      goto LABEL_23;
  }
  else
  {
LABEL_21:
    if (!v15)
      goto LABEL_23;
  }
  if (CFDictionaryContainsKey(theDict, v13))
    goto LABEL_23;
  sub_207CF8F18((uint64_t)__p, &v51);
  v33 = v51;
  v32 = v52;
  if (v52)
  {
    v34 = (unint64_t *)&v52->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      if (!v33)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  if (v33)
LABEL_52:
    CFDictionaryAddValue(theDict, v13, v51);
LABEL_53:
  v37 = v52;
  if (v52)
  {
    v38 = (unint64_t *)&v52->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_23:
  v19 = v50;
  if (!v50)
    goto LABEL_27;
  v20 = (unint64_t *)&v50->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_27:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_59:
    operator delete(__p[0]);
    if ((v44 & 0x80000000) == 0)
      goto LABEL_29;
LABEL_60:
    operator delete(v42);
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (SHIBYTE(v41) < 0)
    goto LABEL_59;
LABEL_28:
  if (v44 < 0)
    goto LABEL_60;
LABEL_29:
  sub_207D01634((std::__shared_weak_count_vtbl **)&v42, (uint64_t)&theDict);
  Default = CFAllocatorGetDefault();
  sub_207D00BEC(a4, a1, (std::string::size_type *)&v42, Default);
  v23 = v43;
  if (v43)
  {
    v24 = (unint64_t *)&v43->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v46;
  if (v46)
  {
    v27 = (unint64_t *)&v46->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v48;
  if (v48)
  {
    v30 = (unint64_t *)&v48->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_207DEBD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_207C99D78(v25 - 64);
  sub_207C99D78((uint64_t)&a25);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    sub_207C99D78((uint64_t)&a21);
    sub_207C99D78((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_207C99D78((uint64_t)&a21);
  sub_207C99D78((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_207DEBDE4(std::error_category *a1)
{
  void *v1;

  std::error_category::~error_category(a1);
  operator delete(v1);
}

char ***sub_207DEBDF8@<X0>(char ***result@<X0>, uint64_t ***a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD **a5@<X4>, float32x2_t **a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D1>, double a11@<D3>, double a12@<D4>, double a13@<D5>, double a14@<D6>, double a15@<D7>, _BYTE *a16, uint64_t *a17)
{
  float32x2_t v17;
  float32x2_t v18;
  __int128 v25;
  int v26;
  __int32 v27;
  float32x2_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  __int32 *v52;
  int v53;
  int v54;
  float32x2_t v55;
  float32x2_t v56;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char **v66;

  *(_BYTE *)(a9 + 24) = 0;
  *(_BYTE *)(a9 + 36) = 0;
  *(_BYTE *)(a9 + 40) = 0;
  *(_BYTE *)(a9 + 52) = 0;
  *(_QWORD *)(a9 + 68) = 0;
  *(_QWORD *)(a9 + 60) = 0;
  *(_QWORD *)(a9 + 76) = 0;
  *(_QWORD *)(a9 + 84) = 0x3F80000000000000;
  *(_DWORD *)(a9 + 56) = 1065353216;
  *(_DWORD *)(a9 + 72) = 1065353216;
  *(_BYTE *)(a9 + 156) = 0;
  *(_BYTE *)(a9 + 160) = 0;
  *(_BYTE *)(a9 + 172) = 0;
  *(_WORD *)(a9 + 176) = 0;
  *(_BYTE *)(a9 + 178) = 0;
  v25 = 0uLL;
  *(_OWORD *)(a9 + 96) = 0u;
  *(_OWORD *)(a9 + 112) = 0u;
  *(_OWORD *)(a9 + 128) = 0u;
  *(_BYTE *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 184) = 0xBFF0000000000000;
  v26 = *((_DWORD *)*a5 + 2);
  *(_QWORD *)a9 = **a5;
  *(_DWORD *)(a9 + 8) = v26;
  v27 = (*a6)[1].i32[0];
  v28 = **a6;
  *(float32x2_t *)(a9 + 12) = v28;
  *(_DWORD *)(a9 + 20) = v27;
  v29 = (uint64_t **)*result;
  v30 = (uint64_t **)result[1];
  v62 = 0uLL;
  v63 = 0;
  v31 = (char *)v30 - (char *)v29;
  if (v30 != v29)
  {
    v32 = v31 >> 3;
    v33 = 0xAAAAAAAAAAAAAAABLL * v32;
    if (0xAAAAAAAAAAAAAAABLL * v32 > 0x1555555555555555)
      sub_207CA420C();
    *(_QWORD *)&v62 = operator new(4 * v32);
    *((_QWORD *)&v62 + 1) = v62;
    v63 = v62 + 12 * v33;
    v66 = (char **)&v62;
    do
    {
      v34 = *((_DWORD *)*v29 + 2);
      v64 = **v29;
      v65 = v34;
      result = sub_207D95A00(&v66, &v64);
      v29 += 3;
    }
    while (v29 != v30);
    v25 = v62;
    v31 = v63;
  }
  v36 = *a2;
  v35 = a2[1];
  *(_OWORD *)(a9 + 96) = v25;
  *(_QWORD *)(a9 + 112) = v31;
  v62 = 0uLL;
  v63 = 0;
  v37 = (char *)v35 - (char *)v36;
  if (v35 == v36)
  {
    v41 = 0uLL;
  }
  else
  {
    v38 = v37 >> 3;
    v39 = 0xAAAAAAAAAAAAAAABLL * v38;
    if (0xAAAAAAAAAAAAAAABLL * v38 > 0x1555555555555555)
      sub_207CA420C();
    *(_QWORD *)&v62 = operator new(4 * v38);
    *((_QWORD *)&v62 + 1) = v62;
    v63 = v62 + 12 * v39;
    v66 = (char **)&v62;
    do
    {
      v40 = *((_DWORD *)*v36 + 2);
      v64 = **v36;
      v65 = v40;
      result = sub_207D95A00(&v66, &v64);
      v36 += 3;
    }
    while (v36 != v35);
    v41 = v62;
    v37 = v63;
  }
  v42 = *a3;
  v43 = a3[1];
  *(_OWORD *)(a9 + 120) = v41;
  *(_QWORD *)(a9 + 136) = v37;
  if (v43 - v42 == 12)
  {
    v53 = *(_DWORD *)(v42 + 8);
    a10 = *(double *)v42;
    *(_QWORD *)(a9 + 144) = *(_QWORD *)v42;
    *(_DWORD *)(a9 + 152) = v53;
    *(_BYTE *)(a9 + 156) = 1;
    v44 = a17;
    v45 = *a4;
    if (a4[1] - *a4 != 12)
    {
LABEL_14:
      if (!a16[24])
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    v44 = a17;
    v45 = *a4;
    if (a4[1] - *a4 != 12)
      goto LABEL_14;
  }
  v54 = *(_DWORD *)(v45 + 8);
  a10 = *(double *)v45;
  *(_QWORD *)(a9 + 160) = *(_QWORD *)v45;
  *(_DWORD *)(a9 + 168) = v54;
  *(_BYTE *)(a9 + 172) = 1;
  if (a16[24])
  {
LABEL_15:
    v46 = *(_QWORD *)a16;
    v47 = *(_DWORD *)(**(_QWORD **)a16 + 8);
    *(_QWORD *)(a9 + 24) = ***(_QWORD ***)a16;
    *(_DWORD *)(a9 + 32) = v47;
    *(_BYTE *)(a9 + 36) = 1;
    v48 = *(_QWORD *)(v46 + 24);
    v49 = *(_DWORD *)(v48 + 8);
    a10 = *(double *)v48;
    *(_QWORD *)(a9 + 40) = *(_QWORD *)v48;
    *(_DWORD *)(a9 + 48) = v49;
    *(_BYTE *)(a9 + 52) = 1;
  }
LABEL_16:
  if (*((_BYTE *)v44 + 24))
  {
    v50 = *v44;
    LODWORD(a14) = **(_DWORD **)v50;
    LODWORD(a11) = *(_DWORD *)(*(_QWORD *)v50 + 4);
    LODWORD(a10) = *(_DWORD *)(*(_QWORD *)v50 + 8);
    v51 = *(_DWORD **)(v50 + 24);
    LODWORD(a15) = *v51;
    LODWORD(a12) = v51[1];
    v28.i32[0] = v51[2];
    v52 = *(__int32 **)(v50 + 48);
    v17.i32[0] = *v52;
    LODWORD(a13) = v52[1];
    LODWORD(v41) = v52[2];
  }
  else
  {
    LODWORD(a14) = 1.0;
    LODWORD(a15) = 0;
    v17.i32[0] = 0;
    LODWORD(a11) = 0;
    LODWORD(a12) = 1.0;
    LODWORD(a13) = 0;
    LODWORD(a10) = 0;
    v28.i32[0] = 0;
    LODWORD(v41) = 1.0;
  }
  v55 = vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)0x800000003F800000, *(float *)&a14), (float32x2_t)0xBF80000000000000, *(float *)&a15), (float32x2_t)0xB3BBBD2E80000000, v17.f32[0]);
  v18.i32[0] = 867941678;
  v56 = vmla_f32(vmul_f32(*(float32x2_t *)&a14, 0), v18, *(float32x2_t *)&a15);
  __asm { FMOV            V7.2S, #-1.0 }
  *(_DWORD *)(a9 + 64) = vmla_f32(v56, _D7, v17).u32[0];
  *(float32x2_t *)(a9 + 56) = v55;
  *(_DWORD *)(a9 + 76) = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&a11, 0), v18, *(float32x2_t *)&a12), _D7, *(float32x2_t *)&a13).u32[0];
  *(float32x2_t *)(a9 + 68) = vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)0x800000003F800000, *(float *)&a11), (float32x2_t)0xBF80000000000000, *(float *)&a12), (float32x2_t)0xB3BBBD2E80000000, *(float *)&a13);
  *(_DWORD *)(a9 + 88) = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&a10, 0), v18, v28), _D7, *(float32x2_t *)&v41).u32[0];
  *(float32x2_t *)(a9 + 80) = vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)0x800000003F800000, *(float *)&a10), (float32x2_t)0xBF80000000000000, v28.f32[0]), (float32x2_t)0xB3BBBD2E80000000, *(float *)&v41);
  *(_BYTE *)(a9 + 177) = a7;
  *(_BYTE *)(a9 + 178) = a8;
  return result;
}

void sub_207DEC1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _QWORD *v10;

  if (__p)
    operator delete(__p);
  sub_207D047D0(v10);
  _Unwind_Resume(a1);
}

void sub_207DEC1E8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  __int32 *v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  __int32 *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  __int32 *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  __int32 *v41;
  float32x4_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  __int32 *v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  __int32 *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *__p;
  int v57[2];
  char *v58;
  void *v59;
  char *v60;
  char *v61;

  sub_207D09340(a2, *a1);
  v8 = *a1;
  v9 = (*a1)[12];
  v10 = (*a1)[13];
  v54 = (*a1)[15];
  v55 = (*a1)[16];
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v11 = v9;
  v12 = (v10 - v9) / 12;
  if (v10 != v9)
  {
    if (v12 > 0x1555555555555555)
      sub_207CA420C();
    v13 = (char *)operator new(v10 - v9);
    v14 = &v13[12 * v12];
    v59 = v13;
    v61 = v14;
    bzero(v13, 12 * ((12 * v12 - 12) / 0xC) + 12);
    v60 = v14;
  }
  v15 = (v55 - v54) / 12;
  __p = 0;
  *(_QWORD *)v57 = 0;
  v58 = 0;
  if (v55 != v54)
  {
    if (v15 > 0x1555555555555555)
      sub_207CA420C();
    v16 = (char *)operator new(v55 - v54);
    v17 = &v16[12 * v15];
    __p = v16;
    v58 = v17;
    bzero(v16, 12 * ((12 * v15 - 12) / 0xC) + 12);
    *(_QWORD *)v57 = v17;
  }
  v18 = a1[1];
  if (v8 == v18)
  {
    v20 = 0uLL;
    v19 = 0uLL;
  }
  else if (v10 == v11)
  {
    v19 = 0uLL;
    v20 = 0uLL;
    if (v55 == v54)
    {
      do
      {
        v4.i64[0] = *v8;
        v4.i32[2] = *((_DWORD *)v8 + 2);
        v19 = vaddq_f32(v19, v4);
        v4.i64[0] = *(uint64_t *)((char *)v8 + 12);
        v4.i32[2] = *((_DWORD *)v8 + 5);
        v20 = vaddq_f32(v20, v4);
        v8 += 24;
      }
      while (v8 != v18);
    }
    else
    {
      do
      {
        v37 = 0;
        v4.i64[0] = *v8;
        v4.i32[2] = *((_DWORD *)v8 + 2);
        v5.i64[0] = *(uint64_t *)((char *)v8 + 12);
        v5.i32[2] = *((_DWORD *)v8 + 5);
        v38 = 1;
        do
        {
          v39 = v8[15] + v37;
          v40 = (char *)__p + v37;
          v6.i64[0] = *(_QWORD *)((char *)__p + v37);
          v41 = (__int32 *)((char *)__p + v37 + 8);
          v6.i32[2] = *v41;
          v7.i64[0] = *(_QWORD *)v39;
          v7.i32[2] = *(_DWORD *)(v39 + 8);
          v6 = vaddq_f32(v6, v7);
          *v41 = v6.i32[2];
          *v40 = v6.i64[0];
          v37 += 12;
          v26 = v15 > v38++;
        }
        while (v26);
        v19 = vaddq_f32(v19, v4);
        v20 = vaddq_f32(v20, v5);
        v8 += 24;
      }
      while (v8 != v18);
    }
  }
  else
  {
    v19 = 0uLL;
    v20 = 0uLL;
    if (v55 == v54)
    {
      do
      {
        v32 = 0;
        v4.i64[0] = *v8;
        v4.i32[2] = *((_DWORD *)v8 + 2);
        v5.i64[0] = *(uint64_t *)((char *)v8 + 12);
        v5.i32[2] = *((_DWORD *)v8 + 5);
        v33 = 1;
        do
        {
          v34 = v8[12] + v32;
          v35 = (char *)v59 + v32;
          v6.i64[0] = *(_QWORD *)((char *)v59 + v32);
          v36 = (__int32 *)((char *)v59 + v32 + 8);
          v6.i32[2] = *v36;
          v7.i64[0] = *(_QWORD *)v34;
          v7.i32[2] = *(_DWORD *)(v34 + 8);
          v6 = vaddq_f32(v6, v7);
          *v36 = v6.i32[2];
          *v35 = v6.i64[0];
          v32 += 12;
          v26 = v12 > v33++;
        }
        while (v26);
        v19 = vaddq_f32(v19, v4);
        v20 = vaddq_f32(v20, v5);
        v8 += 24;
      }
      while (v8 != v18);
    }
    else
    {
      do
      {
        v21 = 0;
        v5.i64[0] = *v8;
        v5.i32[2] = *((_DWORD *)v8 + 2);
        v4.i64[0] = *(uint64_t *)((char *)v8 + 12);
        v4.i32[2] = *((_DWORD *)v8 + 5);
        v22 = 1;
        do
        {
          v23 = v8[12] + v21;
          v24 = (char *)v59 + v21;
          v6.i64[0] = *(_QWORD *)((char *)v59 + v21);
          v25 = (__int32 *)((char *)v59 + v21 + 8);
          v6.i32[2] = *v25;
          v7.i64[0] = *(_QWORD *)v23;
          v7.i32[2] = *(_DWORD *)(v23 + 8);
          v6 = vaddq_f32(v6, v7);
          *v25 = v6.i32[2];
          *v24 = v6.i64[0];
          v21 += 12;
          v26 = v12 > v22++;
        }
        while (v26);
        v27 = 0;
        v19 = vaddq_f32(v19, v5);
        v28 = 1;
        do
        {
          v29 = v8[15] + v27;
          v30 = (char *)__p + v27;
          v5.i64[0] = *(_QWORD *)((char *)__p + v27);
          v31 = (__int32 *)((char *)__p + v27 + 8);
          v5.i32[2] = *v31;
          v6.i64[0] = *(_QWORD *)v29;
          v6.i32[2] = *(_DWORD *)(v29 + 8);
          v5 = vaddq_f32(v5, v6);
          *v31 = v5.i32[2];
          *v30 = v5.i64[0];
          v27 += 12;
          v26 = v15 > v28++;
        }
        while (v26);
        v20 = vaddq_f32(v20, v4);
        v8 += 24;
      }
      while (v8 != v18);
    }
  }
  v4.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 6));
  v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0);
  if (v10 != v11)
  {
    v43 = 0;
    v44 = 1;
    do
    {
      v45 = (char *)v59 + v43;
      v4.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 6));
      v6.i64[0] = *(_QWORD *)((char *)v59 + v43);
      v46 = (__int32 *)((char *)v59 + v43 + 8);
      v6.i32[2] = *v46;
      v4 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0));
      *v46 = v4.i32[2];
      *v45 = v4.i64[0];
      v43 += 12;
      v26 = v12 > v44++;
    }
    while (v26);
  }
  v47 = vdivq_f32(v19, v42);
  v48 = vdivq_f32(v20, v42);
  if (v55 != v54)
  {
    v49 = 0;
    v50 = 1;
    do
    {
      v51 = (char *)__p + v49;
      v20.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 6));
      v42.i64[0] = *(_QWORD *)((char *)__p + v49);
      v52 = (__int32 *)((char *)__p + v49 + 8);
      v42.i32[2] = *v52;
      v20 = vdivq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0));
      *v52 = v20.i32[2];
      *v51 = v20.i64[0];
      v49 += 12;
      v26 = v15 > v50++;
    }
    while (v26);
  }
  *(_DWORD *)(a2 + 8) = v47.i32[2];
  *(_QWORD *)a2 = v47.i64[0];
  *(_DWORD *)(a2 + 20) = v48.i32[2];
  *(_QWORD *)(a2 + 12) = v48.i64[0];
  if ((void **)(a2 + 96) != &v59)
    sub_207D27A90((_QWORD *)(a2 + 96), (char *)v59, v60, 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)v59) >> 2));
  v53 = __p;
  if ((void **)(a2 + 120) != &__p)
  {
    sub_207D27A90((_QWORD *)(a2 + 120), (char *)__p, *(char **)v57, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v57 - (_QWORD)__p) >> 2));
    v53 = __p;
  }
  if (v53)
  {
    *(_QWORD *)v57 = v53;
    operator delete(v53);
  }
  if (v59)
  {
    v60 = (char *)v59;
    operator delete(v59);
  }
}

void sub_207DEC6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  _QWORD *v15;
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a14;
    if (!a14)
    {
LABEL_3:
      sub_207D047D0(v15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v17 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v17);
  sub_207D047D0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_207DEC758(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 40))
      return a1;
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 40))
      return a1;
  }
  if (*(_BYTE *)(a1 + 32))
  {
    v5 = *(void **)(a1 + 8);
    if (v5)
    {
      *(_QWORD *)(a1 + 16) = v5;
      operator delete(v5);
      return a1;
    }
  }
  return a1;
}

uint64_t sub_207DEC7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8, float a9)
{
  _OWORD *v15;
  char *v16;
  float v22;
  float v23;
  float v24;
  float v25;

  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0x4000000000000000;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 316) = 0;
  *(_DWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_BYTE *)(a1 + 420) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 436) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 442) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 488) = xmmword_208238860;
  *(_OWORD *)(a1 + 504) = unk_208238870;
  *(_OWORD *)(a1 + 456) = xmmword_208238840;
  *(_OWORD *)(a1 + 472) = unk_208238850;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 588) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 724) = 0;
  *(_BYTE *)(a1 + 788) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_BYTE *)(a1 + 924) = 0;
  *(_DWORD *)(a1 + 928) = 6;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 944) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  v15 = operator new(0xF0uLL);
  *(_QWORD *)(a1 + 952) = v15;
  *(_QWORD *)(a1 + 968) = v15 + 15;
  *v15 = 0u;
  v15[1] = 0u;
  v15[2] = 0u;
  v15[3] = 0u;
  v15[4] = 0u;
  v15[5] = 0u;
  v15[6] = 0u;
  v15[7] = 0u;
  v15[8] = 0u;
  v15[9] = 0u;
  v15[10] = 0u;
  v15[11] = 0u;
  v15[12] = 0u;
  v15[13] = 0u;
  v15[14] = 0u;
  *(_QWORD *)(a1 + 960) = v15 + 15;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_QWORD *)(a1 + 1008) = 0x3F90FF972474538FLL;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_WORD *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1034) = 0;
  *(_BYTE *)(a1 + 1040) = -1;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  v16 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = off_24C0757B0;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 120) = unk_208238870;
  *(_OWORD *)(v16 + 104) = xmmword_208238860;
  *(_OWORD *)(v16 + 88) = unk_208238850;
  *(_OWORD *)(v16 + 72) = xmmword_208238840;
  *((_QWORD *)v16 + 26) = 0;
  *((_QWORD *)v16 + 27) = 0;
  v16[224] = 0;
  *(_QWORD *)(a1 + 1104) = v16 + 24;
  *(_QWORD *)(a1 + 1112) = v16;
  *(_DWORD *)(a1 + 1120) = 4;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 1124) = xmmword_208232BD0;
  *(_OWORD *)(a1 + 1140) = _Q1;
  *(_OWORD *)(a1 + 1156) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 1172) = xmmword_208232BC0;
  *(_DWORD *)(a1 + 1188) = 1042536202;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_DWORD *)(a1 + 1196) = 1042536202;
  *(_BYTE *)(a1 + 1296) = 0;
  *(_DWORD *)(a1 + 1300) = 0;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_DWORD *)(a1 + 1324) = -1082130432;
  *(_WORD *)(a1 + 1328) = 1;
  *(_QWORD *)(a1 + 1336) = 0;
  *(float *)(a1 + 100) = a9;
  if (a6 <= a8)
    v22 = a8;
  else
    v22 = a6;
  if (a6 <= a8)
    v23 = a6;
  else
    v23 = a8;
  if (a5 <= a7)
    v24 = a7;
  else
    v24 = a5;
  if (a5 <= a7)
    v25 = a5;
  else
    v25 = a7;
  *(float *)(a1 + 128) = v23;
  *(float *)(a1 + 132) = v25;
  *(float *)(a1 + 136) = v22;
  *(float *)(a1 + 140) = v24;
  return a1;
}

void sub_207DECAD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v8;
  void *v9;

  v5 = v4;
  v6 = v3;
  sub_207DEC758(v5);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 960) = v8;
    operator delete(v8);
  }
  sub_207D047D0(v2);
  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207DECB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  _OWORD *v18;
  char *v19;
  float v25;
  float v26;
  float v27;
  float v28;

  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(float *)(a1 + 104) = a11;
  *(float *)(a1 + 108) = a10;
  *(float *)(a1 + 112) = a12;
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0x40000000;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 316) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_QWORD *)(a1 + 348) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_BYTE *)(a1 + 420) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 436) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 442) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 488) = xmmword_208238860;
  *(_OWORD *)(a1 + 504) = unk_208238870;
  *(_OWORD *)(a1 + 456) = xmmword_208238840;
  *(_OWORD *)(a1 + 472) = unk_208238850;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 588) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 724) = 0;
  *(_BYTE *)(a1 + 788) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_BYTE *)(a1 + 924) = 0;
  *(_DWORD *)(a1 + 928) = 6;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 944) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  v18 = operator new(0xF0uLL);
  *(_QWORD *)(a1 + 952) = v18;
  *(_QWORD *)(a1 + 968) = v18 + 15;
  *v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[14] = 0u;
  *(_QWORD *)(a1 + 960) = v18 + 15;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_QWORD *)(a1 + 1008) = 0x3F90FF972474538FLL;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_WORD *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1034) = 0;
  *(_BYTE *)(a1 + 1040) = -1;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  v19 = (char *)operator new(0xE8uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_24C0757B0;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 184) = 0u;
  *(_OWORD *)(v19 + 200) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 120) = unk_208238870;
  *(_OWORD *)(v19 + 104) = xmmword_208238860;
  *(_OWORD *)(v19 + 88) = unk_208238850;
  *(_OWORD *)(v19 + 72) = xmmword_208238840;
  *((_QWORD *)v19 + 26) = 0;
  *((_QWORD *)v19 + 27) = 0;
  v19[224] = 0;
  *(_QWORD *)(a1 + 1104) = v19 + 24;
  *(_QWORD *)(a1 + 1112) = v19;
  *(_DWORD *)(a1 + 1120) = 4;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 1124) = xmmword_208232BD0;
  *(_OWORD *)(a1 + 1140) = _Q1;
  *(_OWORD *)(a1 + 1156) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 1172) = xmmword_208232BC0;
  *(_DWORD *)(a1 + 1188) = 1042536202;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_DWORD *)(a1 + 1196) = 1042536202;
  *(_BYTE *)(a1 + 1296) = 0;
  *(_DWORD *)(a1 + 1300) = 0;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_DWORD *)(a1 + 1324) = -1082130432;
  *(_WORD *)(a1 + 1328) = 1;
  *(_QWORD *)(a1 + 1336) = 0;
  *(float *)(a1 + 100) = a9;
  if (a6 <= a8)
    v25 = a8;
  else
    v25 = a6;
  if (a6 <= a8)
    v26 = a6;
  else
    v26 = a8;
  if (a5 <= a7)
    v27 = a7;
  else
    v27 = a5;
  if (a5 <= a7)
    v28 = a5;
  else
    v28 = a7;
  *(float *)(a1 + 128) = v26;
  *(float *)(a1 + 132) = v28;
  *(float *)(a1 + 136) = v25;
  *(float *)(a1 + 140) = v27;
  return a1;
}

void sub_207DECE30(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v8;
  void *v9;

  v5 = v4;
  v6 = v3;
  sub_207DEC758(v5);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 960) = v8;
    operator delete(v8);
  }
  sub_207D047D0(v2);
  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_207DECE94(uint64_t a1, int *a2)
{
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void **v21;
  char *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  char *v37;

  sub_207D27414(a1 + 264, (uint64_t *)a2);
  v4 = *a2;
  v5 = *((float *)a2 + 1);
  v6 = *((float *)a2 + 2);
  v7 = *((float *)a2 + 3);
  v8 = *((float *)a2 + 4);
  v9 = *((float *)a2 + 5);
  if (*(float *)a2 <= v7)
    v10 = a2[3];
  else
    v10 = *a2;
  if (*(float *)a2 > v7)
    v4 = a2[3];
  if (v5 <= v8)
    v11 = a2[4];
  else
    v11 = a2[1];
  if (v5 > v8)
    v5 = *((float *)a2 + 4);
  if (v6 <= v9)
    v12 = a2[5];
  else
    v12 = a2[2];
  if (v6 > v9)
    v6 = *((float *)a2 + 5);
  *(_DWORD *)(a1 + 144) = v4;
  *(float *)(a1 + 148) = v5;
  *(float *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 156) = v10;
  *(_DWORD *)(a1 + 160) = v11;
  *(_DWORD *)(a1 + 164) = v12;
  v13 = a2[2];
  *(_QWORD *)(a1 + 168) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 176) = v13;
  v14 = *(_QWORD *)(a2 + 1);
  *(_DWORD *)(a1 + 180) = a2[3];
  *(_QWORD *)(a1 + 184) = v14;
  LODWORD(v14) = a2[4];
  v15 = a2[2];
  *(_DWORD *)(a1 + 192) = *a2;
  *(_DWORD *)(a1 + 196) = v14;
  *(_DWORD *)(a1 + 200) = v15;
  v16 = a2[5];
  *(_QWORD *)(a1 + 204) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 212) = v16;
  v17 = a2[2];
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 3);
  *(_DWORD *)(a1 + 224) = v17;
  v18 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(a1 + 228) = *a2;
  *(_QWORD *)(a1 + 232) = v18;
  LODWORD(v18) = a2[1];
  v19 = a2[5];
  *(_DWORD *)(a1 + 240) = a2[3];
  *(_DWORD *)(a1 + 244) = v18;
  *(_DWORD *)(a1 + 248) = v19;
  v20 = a2[5];
  *(_QWORD *)(a1 + 252) = *(_QWORD *)(a2 + 3);
  *(_DWORD *)(a1 + 260) = v20;
  v21 = (void **)(a1 + 360);
  v22 = *(char **)(a1 + 360);
  if (v22 == *(char **)(a1 + 368))
  {
    for (i = 0; i != 8; ++i)
    {
      while (1)
      {
        v25 = a1 + 168 + 12 * i;
        v26 = *(_QWORD *)(a1 + 376);
        if ((unint64_t)v22 >= v26)
          break;
        v24 = *(_QWORD *)v25;
        *((_DWORD *)v22 + 2) = *(_DWORD *)(v25 + 8);
        *(_QWORD *)v22 = v24;
        *(_QWORD *)(a1 + 368) = v22 + 12;
        ++i;
        v22 += 12;
        if (i == 8)
          return;
      }
      v27 = (char *)*v21;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)*v21) >> 2);
      v29 = v28 + 1;
      if (v28 + 1 > 0x1555555555555555)
        sub_207CA420C();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v27) >> 2);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0xAAAAAAAAAAAAAAALL)
        v31 = 0x1555555555555555;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0x1555555555555555)
          sub_207CA3AB8();
        v32 = (char *)operator new(12 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = &v32[12 * v28];
      *(_QWORD *)v33 = *(_QWORD *)v25;
      *((_DWORD *)v33 + 2) = *(_DWORD *)(v25 + 8);
      v34 = v33;
      if (v22 != v27)
      {
        do
        {
          v35 = *(_QWORD *)(v22 - 12);
          v22 -= 12;
          v36 = *((_DWORD *)v22 + 2);
          *(_QWORD *)(v34 - 12) = v35;
          v34 -= 12;
          *((_DWORD *)v34 + 2) = v36;
        }
        while (v22 != v27);
        v22 = (char *)*v21;
      }
      v37 = v33 + 12;
      *(_QWORD *)(a1 + 360) = v34;
      *(_QWORD *)(a1 + 368) = v33 + 12;
      *(_QWORD *)(a1 + 376) = &v32[12 * v31];
      if (v22)
        operator delete(v22);
      *(_QWORD *)(a1 + 368) = v37;
      v22 = v37;
    }
  }
}

uint64_t sub_207DED0F8(uint64_t a1, int32x4_t *a2, int32x2_t **a3, float a4, double a5, double a6, double a7, float32x4_t a8, double a9, int32x2_t a10)
{
  int32x2_t v10;
  uint64_t v12;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t *v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float v55;
  float v56;
  int32x4_t v57;
  float v58;
  float v59;
  float v60;
  float32x2_t v61;
  unsigned __int32 v62;
  float32x2_t v63;
  unsigned __int32 v64;
  float32x2_t v65;
  unsigned __int32 v66;

  if (!*(_BYTE *)(a1 + 300) || !*(_BYTE *)(a1 + 316))
    return 1;
  v12 = (char *)a3[1] - (char *)*a3;
  if (v12)
  {
    v14 = v12 >> 6;
    v15 = a2[1];
    v16 = a2[2];
    a8.i32[0] = *(_DWORD *)(a1 + 328);
    a10.i32[0] = *(_DWORD *)(a1 + 340);
    v10.i32[0] = *(_DWORD *)(a1 + 352);
    v17 = *(float *)(a1 + 288);
    v47 = (float32x4_t)vdupq_laneq_s32(*a2, 2);
    v48 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2->i8, 1);
    v57 = *a2;
    v46 = (float32x4_t)vdupq_laneq_s32(*a2, 3);
    v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 1);
    v44 = (float32x4_t)vdupq_laneq_s32(v15, 2);
    v56 = *(float *)v15.i32;
    v43 = (float32x4_t)vdupq_laneq_s32(v15, 3);
    v18 = vdupq_lane_s32(*(int32x2_t *)v16.i8, 1);
    v41 = (float32x4_t)vdupq_laneq_s32(v16, 2);
    v42 = (float32x4_t)v18;
    v55 = *(float *)v16.i32;
    v19 = vdupq_laneq_s32(v16, 3);
    v40 = (float32x4_t)v19;
    v53 = *(float32x2_t *)a8.f32;
    v54 = *(float32x2_t *)(a1 + 320);
    v20 = (float32x2_t)vdup_lane_s32((int32x2_t)v54, 1);
    v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a8.f32, 0);
    v51 = (float32x2_t)a10;
    v52 = *(float32x2_t *)(a1 + 332);
    v22 = (float32x2_t)vdup_lane_s32((int32x2_t)v52, 1);
    v23 = (float32x2_t)vdup_lane_s32(a10, 0);
    v24 = *a3 + 4;
    v49 = (float32x2_t)v10;
    v50 = *(float32x2_t *)(a1 + 344);
    v25 = (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1);
    v26 = (float32x2_t)vdup_lane_s32(v10, 0);
    while (1)
    {
      *(int32x2_t *)v19.i8 = v24[-4];
      v19.i32[2] = v24[-3].i32[0];
      *(int32x2_t *)v18.i8 = v24[-2];
      v18.i32[2] = v24[-1].i32[0];
      v27.i64[0] = vzip1q_s32(v19, v18).u64[0];
      *(int32x2_t *)a8.f32 = v24[2];
      a8.i32[2] = v24[3].i32[0];
      v28 = (int8x16_t)vnegq_f32(a8);
      v29 = (int8x16_t)vtrn2q_s32(v19, v18);
      v29.i32[2] = HIDWORD(*(unint64_t *)v24);
      v30 = (int8x16_t)vzip2q_s32(v19, v18);
      v31 = (float32x2_t)vdup_lane_s32(*v24, 1);
      *(float32x2_t *)v32.f32 = vmls_lane_f32(vmul_f32((float32x2_t)*v24, *(float32x2_t *)v28.i8), v31, *(float32x2_t *)a8.f32, 1);
      v31.i32[0] = v24[1].i32[0];
      *(float32x2_t *)v33.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v27.f32, *(float *)v28.i32), *(float32x2_t *)v29.i8, *(float32x2_t *)a8.f32, 1), *(float32x2_t *)v30.i8, a8, 2);
      v30.i32[2] = v31.i32[0];
      v33.i64[1] = __PAIR64__(1.0, vmla_f32(*(float32x2_t *)v32.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), v31).u32[0]);
      v32.i32[3] = 0;
      v32.i32[0] = v29.i32[0];
      v35 = vextq_s8(vextq_s8(v29, v29, 0xCuLL), v30, 8uLL);
      v34.i64[0] = v35.i64[1];
      *(uint64_t *)((char *)v32.i64 + 4) = v35.i64[0];
      v34.i64[1] = vdupq_laneq_s32((int32x4_t)v30, 2).u32[0];
      v27.i64[1] = v24->u32[0];
      v36 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v27, *(float *)v57.i32), v48, v32), v47, v34), v46, v33);
      v37 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v27, v56), v45, v32), v44, v34), v43, v33);
      v38 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v27, v55), v42, v32), v41, v34), v40, v33);
      v34.i64[0] = vextq_s8(v36, v36, 8uLL).u64[0];
      v33.i64[0] = vextq_s8(v37, v37, 8uLL).u64[0];
      v61 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v36.i8, v54.f32[0]), v20, *(float32x2_t *)v37.i8), v21, *(float32x2_t *)v38.i8);
      v32.i64[0] = vextq_s8(v38, v38, 8uLL).u64[0];
      v62 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v34.f32, v54), v20, *(float32x2_t *)v33.f32), v53, *(float32x2_t *)v32.f32).u32[0];
      v63 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v36.i8, v52.f32[0]), v22, *(float32x2_t *)v37.i8), v23, *(float32x2_t *)v38.i8);
      v64 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v34.f32, v52), v22, *(float32x2_t *)v33.f32), v51, *(float32x2_t *)v32.f32).u32[0];
      v65 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v36.i8, v50.f32[0]), v25, *(float32x2_t *)v37.i8), v26, *(float32x2_t *)v38.i8);
      v66 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v34.f32, v50), v25, *(float32x2_t *)v33.f32), v49, *(float32x2_t *)v32.f32).u32[0];
      sub_207DEB1AC((float *)&v61, &v58);
      if ((float)(v58 + a4) >= v17
        && (float)(v58 - a4) <= *(float *)(a1 + 304)
        && (float)(v59 + a4) >= *(float *)(a1 + 292)
        && (float)(v59 - a4) <= *(float *)(a1 + 308)
        && (float)(v60 + a4) >= *(float *)(a1 + 296)
        && (float)(v60 - a4) <= *(float *)(a1 + 312))
      {
        break;
      }
      v24 += 8;
      if (!--v14)
        return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_207DED424(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, float a6, double a7, double a8, float32x4_t a9, double a10, float32x4_t a11, double a12, double a13)
{
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  int8x16_t v22;
  float32x2_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x2_t *v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  unsigned __int32 v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  unsigned __int8 v69;
  uint64_t result;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  __int128 v87;
  unint64_t v88[2];
  int8x16_t v89;
  _OWORD v90[3];
  float32x4_t v91;

  v85 = *(float32x4_t *)(a1 + 472);
  v86 = *(float32x4_t *)(a1 + 456);
  v83 = *(float32x4_t *)(a1 + 504);
  v84 = *(float32x4_t *)(a1 + 488);
  if (*(_BYTE *)(a1 + 788) && *(_BYTE *)(a1 + 924))
  {
    a11.i64[0] = *(_QWORD *)(a1 + 772);
    a11.i32[2] = *(_DWORD *)(a1 + 780);
    v19 = *(float32x2_t *)(a1 + 756);
    LODWORD(a10) = *(_DWORD *)(a1 + 764);
    a13 = *(double *)(a1 + 740);
    v20 = *(float32x2_t *)(a1 + 724);
    v21.i32[0] = *(_DWORD *)(a1 + 732);
    v22 = (int8x16_t)vnegq_f32(a11);
    v21.i32[1] = *(_DWORD *)(a1 + 748);
    v23 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v20, *(int32x2_t *)&a13), *(float *)v22.i32), (float32x2_t)vzip2_s32((int32x2_t)v20, *(int32x2_t *)&a13), *(float32x2_t *)a11.f32, 1), v21, a11, 2);
    LODWORD(v24) = vmla_f32(vmls_lane_f32(vmul_f32(v19, *(float32x2_t *)v22.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v19, 1), *(float32x2_t *)a11.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(float32x2_t *)&a10).u32[0];
    v25 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v86, v20.f32[0]), v85, *(float *)&a13), v84, v19.f32[0]), (float32x4_t)0, v83);
    v26 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v86, v20, 1), v85, *(float32x2_t *)&a13, 1), v84, v19, 1), (float32x4_t)0, v83);
    v27 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v86, v21.f32[0]), v85, v21.f32[1]), v84, *(float *)&a10), (float32x4_t)0, v83);
    v28 = vaddq_f32(v83, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v86, v23.f32[0]), v85, v23, 1), v84, v24));
    a9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)(a1 + 876))), v26, *(float32x2_t *)(a1 + 876), 1), v27, *(float32x4_t *)(a1 + 876), 2), v28, *(float32x4_t *)(a1 + 876), 3);
    v85 = a9;
    v86 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)(a1 + 860))), v26, *(float32x2_t *)(a1 + 860), 1), v27, *(float32x4_t *)(a1 + 860), 2), v28, *(float32x4_t *)(a1 + 860), 3);
    v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)(a1 + 908))), v26, *(float32x2_t *)(a1 + 908), 1), v27, *(float32x4_t *)(a1 + 908), 2), v28, *(float32x4_t *)(a1 + 908), 3);
    v84 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)(a1 + 892))), v26, *(float32x2_t *)(a1 + 892), 1), v27, *(float32x4_t *)(a1 + 892), 2), v28, *(float32x4_t *)(a1 + 892), 3);
  }
  v29 = a3[1] - *a3;
  if (v29)
  {
    v30 = 0;
    v31 = 0x8E38E38E38E38E39 * (v29 >> 2);
    v81 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2);
    v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1);
    v79 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1);
    v80 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 3);
    v77 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 3);
    v78 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2);
    v75 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2);
    v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1);
    v73 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1);
    v74 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 3);
    v32 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2);
    v33 = vdupq_laneq_s32((int32x4_t)v83, 3);
    v71 = (float32x4_t)v33;
    v72 = v32;
    while (1)
    {
      v38 = (float32x2_t *)(*a4 + (v30 << 6));
      *(float32x2_t *)v33.i8 = *v38;
      v33.i32[2] = v38[1].i32[0];
      *(float32x2_t *)v32.f32 = v38[2];
      v32.i32[2] = v38[3].i32[0];
      *(float32x2_t *)a9.f32 = v38[6];
      a9.i32[2] = v38[7].i32[0];
      v39.i64[0] = vzip1q_s32(v33, (int32x4_t)v32).u64[0];
      v40 = (int8x16_t)vnegq_f32(a9);
      LODWORD(a13) = v38[5].i32[0];
      v41 = (int8x16_t)vtrn2q_s32(v33, (int32x4_t)v32);
      v41.i32[2] = HIDWORD(*(_QWORD *)&v38[4]);
      v42 = vzip2q_s32(v33, (int32x4_t)v32);
      v43 = (int8x16_t)v42;
      v43.i32[2] = LODWORD(a13);
      *(float32x2_t *)v44.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v39.f32, *(float *)v40.i32), *(float32x2_t *)v41.i8, *(float32x2_t *)a9.f32, 1), *(float32x2_t *)v42.i8, a9, 2);
      v45 = vdupq_laneq_s32((int32x4_t)v43, 2).u32[0];
      v44.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v38[4], *(float32x2_t *)v40.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v38[4], 1), *(float32x2_t *)a9.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(float32x2_t *)&a13).u32[0]);
      v46 = vextq_s8(vextq_s8(v41, v41, 0xCuLL), v43, 8uLL);
      v43.i64[0] = __PAIR64__(v46.u32[0], v41.u32[0]);
      v43.i64[1] = v46.u32[1];
      v47.i64[0] = v46.i64[1];
      v47.i64[1] = v45;
      v39.i64[1] = *(_QWORD *)&v38[4];
      v48 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v39, v86.f32[0]), v82, (float32x4_t)v43), v81, v47), v80, v44);
      a9 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v39, v85.f32[0]), v79, (float32x4_t)v43), v78, v47), v77, v44);
      v49 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v39, v84.f32[0]), v76, (float32x4_t)v43), v75, v47), v74, v44);
      HIDWORD(a13) = v73.i32[1];
      v50 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v39, v83.f32[0]), v73, (float32x4_t)v43), v72, v47);
      v43.i32[3] = v71.i32[3];
      v90[0] = v48;
      v90[1] = a9;
      v48.i64[0] = *(_QWORD *)(a1 + 144);
      v48.i32[2] = *(_DWORD *)(a1 + 152);
      v90[2] = v49;
      v91 = vmlaq_f32(v50, v71, v44);
      v43.i64[0] = *(_QWORD *)(a1 + 156);
      v43.i32[2] = *(_DWORD *)(a1 + 164);
      v51 = vaddq_f32(v48, (float32x4_t)v43);
      v43.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v52 = (int8x16_t)vmulq_f32(v51, v32);
      *(float32x2_t *)v32.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)v90 + 8), *(float32x2_t *)v52.i8), *(float32x2_t *)&a9.u32[2], *(float32x2_t *)v52.i8, 1);
      v33 = (int32x4_t)vextq_s8(v52, v52, 8uLL);
      if ((float)(v91.f32[2]
                 + vmla_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.i8, *(float32x2_t *)&v49.u32[2]).f32[0]) > 0.0)
      {
        v53 = *a3;
        v88[0] = 8;
        v88[1] = a1 + 168;
        if (*a2 == a2[1])
        {
          v87 = 0uLL;
        }
        else
        {
          v54 = *(_OWORD *)(*a2 + 16 * v30);
          v87 = v54;
          if (*((_QWORD *)&v54 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
        }
        sub_207DE48FC(v53 + 36 * v30, (float32x2_t *)v90, v88, 0, (uint64_t *)&v87, &v89);
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
        if (*((_QWORD *)&v87 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = *a5 + 8 * v30;
        v61 = *(_DWORD *)v60;
        LODWORD(v60) = *(_DWORD *)(v60 + 4);
        v63 = *(float *)&v89.i32[1];
        v62 = *(float *)v89.i32;
        v65 = *(float *)&v89.i32[3];
        v64 = *(float *)&v89.i32[2];
        v35 = fmaxf(*(float *)v89.i32, (float)(v61 & (v61 >> 31)));
        v37 = fmaxf(*(float *)&v89.i32[1], (float)(v60 & ((int)v60 >> 31)));
        v66 = fminf(*(float *)&v89.i32[2], (float)(v61 & ~(v61 >> 31)));
        v67 = fminf(*(float *)&v89.i32[3], (float)(v60 & ~((int)v60 >> 31)));
        if (v35 < v66 && v37 < v67)
        {
          if (v35 <= v66)
            v34 = v66;
          else
            v34 = v35;
          if (v35 > v66)
            v35 = v66;
          if (v37 > v67)
            v36 = v37;
          else
            v36 = v67;
          if (v37 > v67)
            v37 = v67;
        }
        else
        {
          v69 = atomic_load((unsigned __int8 *)&qword_253E50C58);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C58))
          {
            qword_25452BE08 = 0;
            *(_QWORD *)&dword_25452BE10 = 0;
            __cxa_guard_release(&qword_253E50C58);
          }
          v37 = *((float *)&qword_25452BE08 + 1);
          v35 = *(float *)&qword_25452BE08;
          v34 = *(float *)&dword_25452BE10;
          v36 = *(float *)&dword_25452BE14;
          v65 = *(float *)&v89.i32[3];
          v64 = *(float *)&v89.i32[2];
          v63 = *(float *)&v89.i32[1];
          v62 = *(float *)v89.i32;
        }
        if ((float)((float)(v36 - v37) * (float)(v34 - v35)) >= (float)((float)((float)(v64 - v62) * (float)(v65 - v63))
                                                                       * a6))
          break;
      }
      if (++v30 == v31)
        goto LABEL_38;
    }
    result = 0;
  }
  else
  {
LABEL_38:
    result = 1;
  }
  *(_BYTE *)(a1 + 1032) = result;
  return result;
}

void sub_207DED950(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_207DED964(uint64_t a1, float a2)
{
  float32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float *v17;
  unint64_t v18;
  float v19;
  float *v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float *v26;
  float *v27;
  char *v28;
  float v29;
  void **v30;

  if (*(_BYTE *)(a1 + 788) && *(_BYTE *)(a1 + 652))
  {
    v4 = (float32x2_t *)(a1 + 588);
    v5 = a1 + 168;
    v6 = 0;
    v26 = (float *)operator new(0x20uLL);
    v27 = v26;
    v28 = (char *)(v26 + 8);
    v30 = (void **)&v26;
    do
    {
      if (!*(_BYTE *)(a1 + 652) || !*(_BYTE *)(a1 + 788))
        sub_207CA2A4C();
      v7.i64[0] = *(_QWORD *)(v5 + v6);
      v7.i32[2] = *(_DWORD *)(v5 + v6 + 8);
      v8.i32[0] = *(_DWORD *)(a1 + 596);
      v9.i32[0] = *(_DWORD *)(a1 + 612);
      v10.i32[0] = *(_DWORD *)(a1 + 628);
      *(float32x2_t *)v12.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v4, *(float *)v7.i32), *(float32x2_t *)(a1 + 604), *(float32x2_t *)v7.i8, 1), *(float32x2_t *)(a1 + 620), (float32x4_t)v7, 2);
      v13 = (float32x2_t)vextq_s8(v7, v7, 8uLL).u64[0];
      *(float32x2_t *)&v12.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v7.i8), v9, *(float32x2_t *)v7.i8, 1), v13, v10);
      v8.i64[0] = *(_QWORD *)(a1 + 636);
      v8.i32[2] = *(_DWORD *)(a1 + 644);
      v14 = vaddq_f32(v12, v8);
      v9.i32[0] = *(_DWORD *)(a1 + 732);
      v10.i32[0] = *(_DWORD *)(a1 + 748);
      v11.i32[0] = *(_DWORD *)(a1 + 764);
      *(float32x2_t *)v15.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a1 + 724), *(float *)v7.i32), *(float32x2_t *)(a1 + 740), *(float32x2_t *)v7.i8, 1), *(float32x2_t *)(a1 + 756), (float32x4_t)v7, 2);
      *(float32x2_t *)&v15.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v9, *(float32x2_t *)v7.i8), v10, *(float32x2_t *)v7.i8, 1), v13, v11);
      v7.i64[0] = *(_QWORD *)(a1 + 772);
      v7.i32[2] = *(_DWORD *)(a1 + 780);
      v16 = (int8x16_t)vsubq_f32(v14, vaddq_f32(v15, (float32x4_t)v7));
      v15.i64[0] = vextq_s8(v16, v16, 8uLL).u64[0];
      v29 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1), *(float32x2_t *)v16.i8, 1), *(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).f32[0]);
      sub_207D2F520((uint64_t *)&v30, &v29);
      v6 += 12;
    }
    while (v6 != 96);
    v17 = v26;
    if (v26 == v27)
    {
      v25 = *(_QWORD *)(a1 + 1104);
      if (a2 < 0.0)
        goto LABEL_14;
    }
    else
    {
      v18 = (char *)v27 - (char *)v26 - 4;
      v19 = 0.0;
      v20 = v26;
      if (v18 < 4)
        goto LABEL_23;
      v21 = (v18 >> 2) + 1;
      v20 = &v26[v21 & 0x7FFFFFFFFFFFFFFELL];
      v22 = v26 + 1;
      v23 = v21 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v19 = (float)(v19 + *(v22 - 1)) + *v22;
        v22 += 2;
        v23 -= 2;
      }
      while (v23);
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_23:
        do
        {
          v24 = *v20++;
          v19 = v19 + v24;
        }
        while (v20 != v27);
      }
      v25 = *(_QWORD *)(a1 + 1104);
      if ((float)(v19 * 0.125) > a2)
      {
LABEL_14:
        ++*(_QWORD *)(v25 + 40);
        *(_BYTE *)(a1 + 1328) = 0;
        if (!v17)
          return;
LABEL_18:
        operator delete(v17);
        return;
      }
    }
    *(_QWORD *)(v25 + 40) = 0;
    *(_BYTE *)(a1 + 1328) = 1;
    if (!v17)
      return;
    goto LABEL_18;
  }
}

void sub_207DEDB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207DEDBA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0757B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DEDBB0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0757B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DEDBD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 216);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_207DEDC2C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = result;
  switch(*(_DWORD *)result)
  {
    case 0:
      v4 = (char *)operator new(0xF0uLL);
      result = sub_207DF2F10((uint64_t)v4, (__int128 *)v3);
      goto LABEL_5;
    case 1:
      v4 = (char *)operator new(0xF0uLL);
      result = sub_207DF3100((uint64_t)v4, v3);
      goto LABEL_5;
    case 2:
      v4 = (char *)operator new(0xF0uLL);
      result = sub_207DF32E8((uint64_t)v4, (__int128 *)v3);
LABEL_5:
      *a2 = (uint64_t)(v4 + 24);
      a2[1] = (uint64_t)v4;
      return result;
    case 3:
      v5 = (char *)operator new(0xF0uLL);
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = off_24C0758A8;
      *(_QWORD *)v5 = off_24C075AE0;
      *((_DWORD *)v5 + 8) = 4;
      *(_OWORD *)(v5 + 36) = xmmword_208232BD0;
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(v5 + 52) = _Q0;
      *(_OWORD *)(v5 + 68) = xmmword_208232BB0;
      *(_OWORD *)(v5 + 84) = xmmword_208232BC0;
      *((_DWORD *)v5 + 25) = 1042536202;
      v5[104] = 0;
      *((_DWORD *)v5 + 27) = 1042536202;
      v5[208] = 0;
      v5[216] = 0;
      result = (uint64_t)operator new(0x58uLL);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)result = off_24C075CC0;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 68) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *((_QWORD *)v5 + 28) = result + 24;
      *((_QWORD *)v5 + 29) = result;
      v11 = *(_OWORD *)(v3 + 16);
      *((_OWORD *)v5 + 2) = *(_OWORD *)v3;
      *((_OWORD *)v5 + 3) = v11;
      v12 = *(_QWORD *)(v3 + 40);
      *((_QWORD *)v5 + 8) = *(_QWORD *)(v3 + 32);
      *((_DWORD *)v5 + 20) = *(_DWORD *)(v3 + 48);
      *((_QWORD *)v5 + 9) = v12;
      *((_OWORD *)v5 + 6) = *(_OWORD *)(v3 + 64);
      *(_OWORD *)(v5 + 84) = *(_OWORD *)(v3 + 52);
      *((_DWORD *)v5 + 30) = *(_DWORD *)(v3 + 88);
      *((_QWORD *)v5 + 14) = *(_QWORD *)(v3 + 80);
      *((_DWORD *)v5 + 33) = *(_DWORD *)(v3 + 100);
      *(_QWORD *)(v5 + 124) = *(_QWORD *)(v3 + 92);
      *((_DWORD *)v5 + 36) = *(_DWORD *)(v3 + 112);
      *((_QWORD *)v5 + 17) = *(_QWORD *)(v3 + 104);
      v13 = *(_QWORD *)(v3 + 116);
      *((_DWORD *)v5 + 39) = *(_DWORD *)(v3 + 124);
      *(_QWORD *)(v5 + 148) = v13;
      v14 = *(_QWORD *)(v3 + 128);
      *((_DWORD *)v5 + 42) = *(_DWORD *)(v3 + 136);
      *((_QWORD *)v5 + 20) = v14;
      v15 = *(_QWORD *)(v3 + 140);
      *((_DWORD *)v5 + 45) = *(_DWORD *)(v3 + 148);
      *(_QWORD *)(v5 + 172) = v15;
      v16 = *(_QWORD *)(v3 + 152);
      *((_DWORD *)v5 + 48) = *(_DWORD *)(v3 + 160);
      *((_QWORD *)v5 + 23) = v16;
      v17 = *(_QWORD *)(v3 + 164);
      *((_DWORD *)v5 + 51) = *(_DWORD *)(v3 + 172);
      *(_QWORD *)(v5 + 196) = v17;
      *a2 = (uint64_t)(v5 + 24);
      a2[1] = (uint64_t)v5;
      return result;
    case 4:
      v18 = operator new(0xF0uLL);
      v18[1] = 0;
      v18[2] = 0;
      *v18 = off_24C075B30;
      result = sub_207DF1014((uint64_t)(v18 + 3));
      goto LABEL_10;
    case 5:
      v18 = operator new(0xF0uLL);
      v18[1] = 0;
      v18[2] = 0;
      *v18 = off_24C075B80;
      result = sub_207DF1DD0((uint64_t)(v18 + 3), v3);
LABEL_10:
      *a2 = result;
      a2[1] = (uint64_t)v18;
      break;
    default:
      *a2 = 0;
      a2[1] = 0;
      break;
  }
  return result;
}

void sub_207DEDEC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_207DEDEE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207DEDEF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207DEDF08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207DEDF1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192);
}

void sub_207DEDF24(uint64_t a1@<X0>, float32x2_t *a2@<X1>, _OWORD *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float v18;
  float v19;
  int8x16_t v20;
  int32x2_t *v21;
  float32x4_t v22;
  int32x2_t v23;
  int8x16_t v24;
  float v25;
  float v26;
  int8x16_t v27;
  float32x2_t v28;
  float v29;
  float v30;
  float cosval;
  float v32;
  __float2 v33;
  float32x4_t v34;
  float v35;
  float v36;
  float v37;
  float32_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  __int32 v44;
  unsigned __int32 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x2_t v54;
  int8x16_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float32x2_t v71;
  int8x16_t v72;
  float32x2_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  __float2 v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float v88;
  float v89;
  int8x16_t v90;
  float32x2_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  __float2 v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x4_t v106;
  int8x16_t v107;
  float32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  __float2 v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  __float2 v141;
  float32x4_t v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x4_t v145;
  float32x4_t v146;
  _OWORD *v147;
  __int128 v148;
  float32x2_t v149;
  float v150;
  float v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  float v155;
  int8x16_t v156;
  float v157;
  int8x16_t v158;
  float v159;
  float v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  __n128 v164;
  int8x16_t v165;
  float v166;
  __int32 v167;
  __int32 v168;
  float v169;
  int8x16_t v170;
  int8x16_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _BYTE v176[32];
  __int128 v177;
  __int128 v178;
  _OWORD v179[2];
  _OWORD v180[2];
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  __int128 v184;
  __int128 v185;
  int8x16_t v186;
  float *v187[2];
  float32x2_t *v188[2];

  v7 = *(_QWORD *)(a1 + 200);
  if (!*(_BYTE *)(v7 + 88))
  {
    v11 = *(_OWORD *)a2->f32;
    v12 = *(_OWORD *)a2[2].f32;
    v13 = *(_OWORD *)a2[6].f32;
    *(_OWORD *)(v7 + 32) = *(_OWORD *)a2[4].f32;
    *(_OWORD *)(v7 + 48) = v13;
    *(_OWORD *)v7 = v11;
    *(_OWORD *)(v7 + 16) = v12;
    v14 = *(_QWORD **)(a1 + 200);
    v14[8] = 0;
    v14[9] = 0;
    v14[10] = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 200) + 88) = 1;
    v15 = *(_OWORD *)a2->f32;
    v16 = *(_OWORD *)a2[2].f32;
    v17 = *(_OWORD *)a2[6].f32;
    a3[2] = *(_OWORD *)a2[4].f32;
    a3[3] = v17;
    *a3 = v15;
    a3[1] = v16;
    return;
  }
  if (a4.n128_f64[0] != 0.0)
  {
    a4.n128_f64[0] = a4.n128_f64[0] / *(float *)(a1 + 12);
    a4.n128_f32[0] = a4.n128_f64[0];
    v164 = a4;
    v18 = -expm1f(-(float)(a4.n128_f32[0] * *(float *)(a1 + 16)));
    v19 = expm1f(-(float)(v164.n128_f32[0] * *(float *)(a1 + 20)));
    v20.i64[0] = *(_QWORD *)v7;
    v20.i32[2] = *(_DWORD *)(v7 + 8);
    v158 = v20;
    v20.i64[0] = *(_QWORD *)(v7 + 16);
    v20.i32[2] = *(_DWORD *)(v7 + 24);
    v156 = v20;
    v20.i64[0] = *(_QWORD *)(v7 + 32);
    v20.i32[2] = *(_DWORD *)(v7 + 40);
    v154 = v20;
    v20.i64[0] = *(_QWORD *)(v7 + 48);
    v20.i32[2] = *(_DWORD *)(v7 + 56);
    v161 = v20;
    v21 = (int32x2_t *)(v7 + 64);
    v22.i64[0] = *(_QWORD *)(v7 + 80);
    v23.i32[1] = v164.n128_i32[1];
    v24 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v7 + 64), v164.n128_f32[0]);
    v25 = *(float *)&v24.i32[2];
    v26 = *(float *)&v24.i32[1];
    v27 = vextq_s8(v24, (int8x16_t)vmulq_n_f32(v22, v164.n128_f32[0]), 0xCuLL);
    v22.i64[0] = vextq_s8(v24, v24, 8uLL).u64[0];
    v28 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1), *(float32x2_t *)v24.i8, 1), *(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
    if (v28.f32[0] >= 0.0061)
    {
      v32 = sqrtf(v28.f32[0]);
      v152 = v24;
      v153 = v27;
      v150 = *(float *)&v24.i32[1];
      v151 = *(float *)&v24.i32[2];
      v149 = v28;
      v33 = __sincosf_stret(v32);
      cosval = v33.__cosval;
      v26 = v150;
      v25 = v151;
      v24 = v152;
      v27 = v153;
      v23.i32[1] = v149.i32[1];
      v30 = v33.__sinval / v32;
      *(float *)v23.i32 = (float)(1.0 / v149.f32[0]) * (float)(1.0 - v33.__cosval);
      v29 = (float)(1.0 / v149.f32[0]) * (float)(1.0 - (float)(v33.__sinval / v32));
    }
    else
    {
      *(float *)v23.i32 = 0.5 - (float)(v28.f32[0] * (float)((float)(v28.f32[0] / -720.0) + 0.041667));
      v29 = 0.16667 - (float)(v28.f32[0] * (float)((float)(v28.f32[0] / -5040.0) + 0.0083333));
      v30 = 1.0 - (float)(v28.f32[0] * v29);
      cosval = 1.0 - (float)(v28.f32[0] * *(float *)v23.i32);
    }
    v34.i32[3] = 0;
    v34.f32[0] = (float)(*(float *)v24.i32 * (float)(*(float *)v24.i32 * *(float *)v23.i32)) + cosval;
    v35 = v26 * (float)(*(float *)v24.i32 * *(float *)v23.i32);
    v36 = v25 * (float)(*(float *)v24.i32 * *(float *)v23.i32);
    v37 = v26 * v30;
    v38 = v35 - (float)(v25 * v30);
    v34.f32[1] = v35 + (float)(v25 * v30);
    v39 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v25), LODWORD(v26)), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v23, 0));
    v34.f32[2] = v36 - (float)(v26 * v30);
    v40.f32[0] = v38;
    v41 = vmul_n_f32(v39, v25);
    v39.f32[1] = v30;
    v42 = vmul_f32((float32x2_t)__PAIR64__(v24.u32[0], LODWORD(v26)), v39);
    v43 = (float32x2_t)vdup_lane_s32((int32x2_t)v42, 1);
    v44 = vsub_f32(v41, v43).u32[0];
    v43.f32[1] = cosval;
    v45 = vadd_f32(v41, v43).u32[1];
    v43.i32[1] = vdup_lane_s32((int32x2_t)v41, 0).u32[0];
    v43.f32[0] = cosval;
    *(float32x2_t *)v46.f32 = vadd_f32(v42, v43);
    v40.i32[1] = v46.i32[0];
    v40.i64[1] = __PAIR64__(unk_208238C5C, v46.u32[1]);
    v46.f32[0] = v36 + v37;
    v46.i32[1] = v44;
    v46.i64[1] = v45;
    *(float *)&v24.i32[1] = v26;
    *(float *)&v24.i32[2] = v25;
    v47 = (float32x4_t)vextq_s8(vextq_s8(v24, v24, 0xCuLL), v24, 8uLL);
    v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL);
    v49 = (int8x16_t)vsubq_f32(vmulq_f32(v47, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), v27, 0xCuLL)), vmulq_f32(v48, (float32x4_t)vextq_s8(vextq_s8(v27, v27, 0xCuLL), v27, 8uLL)));
    v50 = vaddq_f32(vaddq_f32((float32x4_t)v27, vmulq_n_f32((float32x4_t)v49, *(float *)v23.i32)), vmulq_n_f32(vsubq_f32(vmulq_f32(v47, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL)), vmulq_f32(v48, (float32x4_t)vextq_s8(vextq_s8(v49, v49, 0xCuLL), v49, 8uLL))), v29));
    v50.i32[3] = unk_208238C7C;
    v51 = *(float32x4_t *)(v7 + 32);
    v52 = *(int8x16_t *)(v7 + 48);
    v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)(v7 + 16))), v40, *(float32x2_t *)(v7 + 16), 1), v46, *(float32x4_t *)(v7 + 16), 2), v50, *(float32x4_t *)(v7 + 16), 3);
    v180[0] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)v7)), v40, *(float32x2_t *)v7, 1), v46, *(float32x4_t *)v7, 2), v50, *(float32x4_t *)v7, 3);
    v180[1] = v53;
    v181 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v51.f32[0]), v40, *(float32x2_t *)v51.f32, 1), v46, v51, 2), v50, v51, 3);
    v182 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, *(float *)v52.i32), v40, *(float32x2_t *)v52.i8, 1), v46, (float32x4_t)v52, 2), v50, (float32x4_t)v52, 3);
    sub_207DF23FC(&v183, a2, (float32x2_t *)v180, v18, *(double *)v46.i64, *(double *)v50.i64, *(float32x2_t *)v53.f32, *(double *)v40.i64, *(double *)v181.i64, *(double *)v51.i64, v52);
    *(float32x4_t *)v7 = v183;
    *(_OWORD *)(v7 + 16) = v184;
    *(_OWORD *)(v7 + 32) = v185;
    *(int8x16_t *)(v7 + 48) = v186;
    v183 = (float32x4_t)xmmword_208238C40;
    v184 = unk_208238C50;
    v54.i32[1] = unk_208238C74;
    v185 = xmmword_208238C60;
    v186 = (int8x16_t)unk_208238C70;
    v54.i32[0] = *(_DWORD *)(v7 + 8);
    v55.i64[0] = *(_QWORD *)v7;
    v55.i64[1] = v54.u32[0];
    v56 = *(float32x2_t *)(v7 + 16);
    v57.i32[0] = *(_DWORD *)(v7 + 24);
    v58 = *(float32x2_t *)(v7 + 32);
    v59.i32[0] = *(_DWORD *)(v7 + 40);
    v60 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v7, *(float *)v158.i32), v56, *(float *)v156.i32), v58, *(float *)v154.i32);
    v61 = vmla_f32(vmla_f32(vmul_f32(v54, *(float32x2_t *)v158.i8), *(float32x2_t *)v156.i8, v57), *(float32x2_t *)v154.i8, v59);
    v62 = vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)v7, *(float32x2_t *)v158.i8, 1), v56, *(float32x2_t *)v156.i8, 1), v58, *(float32x2_t *)v154.i8, 1);
    v63 = vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(v54, *(float32x2_t *)v158.i8, 1), v57, *(float32x2_t *)v156.i8, 1), v59, *(float32x2_t *)v154.i8, 1);
    v64 = vmla_laneq_f32(vmla_laneq_f32(vmul_laneq_f32(*(float32x2_t *)v7, (float32x4_t)v158, 2), v56, (float32x4_t)v156, 2), v58, (float32x4_t)v154, 2);
    *(float32x2_t *)v55.i8 = vmla_f32(vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), v57), (float32x2_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL), v59);
    v183.i32[2] = v61.i32[0];
    *(float32x2_t *)v183.f32 = v60;
    DWORD2(v184) = v63.i32[0];
    *(float32x2_t *)&v184 = v62;
    *(float32x2_t *)&v185 = v64;
    *(float32x2_t *)v65.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v60, *(float *)v161.i32), v62, *(float32x2_t *)v161.i8, 1), v64, (float32x4_t)v161, 2);
    v66 = vmla_lane_f32(vmul_f32(v61, *(float32x2_t *)v161.i8), v63, *(float32x2_t *)v161.i8, 1);
    v67 = (float32x4_t)vextq_s8(v161, v161, 8uLL);
    *(float32x2_t *)&v65.u32[2] = vmla_f32(v66, *(float32x2_t *)v67.f32, *(float32x2_t *)v55.i8);
    DWORD2(v185) = v55.i32[0];
    v67.i64[0] = *(_QWORD *)(v7 + 48);
    v67.i32[2] = *(_DWORD *)(v7 + 56);
    v68 = vsubq_f32(v67, v65);
    v186.i32[2] = v68.i32[2];
    v186.i64[0] = v68.i64[0];
    memset(v176, 0, 24);
    v172 = (unint64_t)&v183;
    v179[0] = (unint64_t)v176;
    sub_207DA0C70((float32x2_t **)&v172, (float **)v179);
    v72 = *(int8x16_t *)v176;
    v73 = (float32x2_t)vextq_s8(v72, v72, 8uLL).u64[0];
    v74 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v176, 1), *(float32x2_t *)v176, 1), v73, v73).f32[0];
    if (v74 >= 0.0061)
    {
      v79 = sqrtf(v74);
      v159 = v74;
      v162 = *(int8x16_t *)v176;
      v80 = __sincosf_stret(v79);
      v74 = v159;
      v72 = v162;
      v77 = v80.__sinval / v79;
      v75 = (float)(1.0 / v159) * (float)(1.0 - v80.__cosval);
      v76 = (float)(1.0 / v159) * (float)(1.0 - (float)(v80.__sinval / v79));
      if (v159 >= 0.00000149)
      {
LABEL_10:
        if (v74 <= 9.0)
          v78 = (float)((float)(v75 * 0.5) - v76) / v77;
        else
          v78 = (float)(v75 + (float)(v77 * -0.5)) / (float)(v74 * v75);
        goto LABEL_15;
      }
    }
    else
    {
      v75 = 0.5 - (float)(v74 * (float)((float)(v74 / -720.0) + 0.041667));
      v76 = 0.16667 - (float)(v74 * (float)((float)(v74 / -5040.0) + 0.0083333));
      v77 = 1.0 - (float)(v74 * v76);
      if (v74 >= 0.00000149)
        goto LABEL_10;
    }
    v78 = (float)(v74 * 0.000033069) + (float)((float)(v74 * 0.0013889) + 0.083333);
LABEL_15:
    v81 = (float32x4_t)vextq_s8(vextq_s8(v72, v72, 0xCuLL), v72, 8uLL);
    v82 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), v72, 0xCuLL);
    v83 = (int8x16_t)vsubq_f32(vmulq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v186, (int32x4_t)v186), v186, 0xCuLL)), vmulq_f32(v82, (float32x4_t)vextq_s8(vextq_s8(v186, v186, 0xCuLL), v186, 8uLL)));
    v84.i64[0] = 0xBF000000BF000000;
    v84.i64[1] = 0xBF000000BF000000;
    v85 = vaddq_f32(vaddq_f32((float32x4_t)v186, vmulq_f32((float32x4_t)v83, v84)), vmulq_n_f32(vsubq_f32(vmulq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), v83, 0xCuLL)), vmulq_f32(v82, (float32x4_t)vextq_s8(vextq_s8(v83, v83, 0xCuLL), v83, 8uLL))), v78));
    *(_DWORD *)&v176[20] = v85.i32[2];
    *(_QWORD *)&v176[12] = v85.i64[0];
    v86 = (float32x4_t)v164;
    v86.i32[1] = v164.n128_u32[0];
    v83.i32[0] = v164.n128_u32[0];
    v83.i32[1] = v164.n128_u32[0];
    v83.i32[2] = v164.n128_u32[0];
    v83.i32[3] = v164.n128_u32[0];
    v87 = (int8x16_t)vdivq_f32(*(float32x4_t *)v176, (float32x4_t)v83);
    v88 = *(float *)&v87.i32[2];
    v89 = *(float *)&v87.i32[1];
    v90 = vextq_s8(v87, (int8x16_t)vdivq_f32(*(float32x4_t *)&v176[16], v86), 0xCuLL);
    *(_OWORD *)v176 = xmmword_208238C40;
    *(_OWORD *)&v176[16] = unk_208238C50;
    v177 = xmmword_208238C60;
    v178 = unk_208238C70;
    v91 = (float32x2_t)vextq_s8(v87, v87, 8uLL).u64[0];
    v92 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)v87.i8, 1), v91, v91).f32[0];
    if (v92 >= 0.0061)
    {
      v96 = sqrtf(v92);
      v163 = v87;
      v165 = v90;
      v157 = *(float *)&v87.i32[1];
      v160 = *(float *)&v87.i32[2];
      v155 = v92;
      v97 = __sincosf_stret(v96);
      v95 = v97.__cosval;
      v89 = v157;
      v88 = v160;
      v87 = v163;
      v90 = v165;
      v94 = v97.__sinval / v96;
      v93 = (float)(1.0 / v155) * (float)(1.0 - v97.__cosval);
      v86.f32[0] = (float)(1.0 / v155) * (float)(1.0 - (float)(v97.__sinval / v96));
    }
    else
    {
      v93 = 0.5 - (float)(v92 * (float)((float)(v92 / -720.0) + 0.041667));
      v86.f32[0] = 0.16667 - (float)(v92 * (float)((float)(v92 / -5040.0) + 0.0083333));
      v94 = 1.0 - (float)(v92 * v86.f32[0]);
      v95 = 1.0 - (float)(v92 * v93);
    }
    v98 = -v19;
    v99 = (float)(*(float *)v87.i32 * (float)(*(float *)v87.i32 * v93)) + v95;
    v100 = (float)(v89 * (float)(v89 * v93)) + v95;
    *((float *)&v177 + 2) = (float)(v88 * (float)(v88 * v93)) + v95;
    v101 = v89 * (float)(*(float *)v87.i32 * v93);
    v102 = v88 * (float)(*(float *)v87.i32 * v93);
    v103 = v88 * (float)(v89 * v93);
    v104 = *(float *)v87.i32 * v94;
    *(float *)v70.i32 = v89 * v94;
    v105 = v88 * v94;
    *(float *)v176 = v99;
    *(float *)&v176[4] = v101 + v105;
    *(float *)&v177 = v102 + *(float *)v70.i32;
    *((float *)&v177 + 1) = v103 - v104;
    *(float *)&v176[16] = v101 - v105;
    *(float *)&v176[8] = v102 - *(float *)v70.i32;
    *(float *)&v87.i32[1] = v89;
    *(float *)&v176[20] = v100;
    *(float *)&v176[24] = v103 + v104;
    *(float *)&v87.i32[2] = v88;
    v109 = vextq_s8(vextq_s8(v87, v87, 0xCuLL), v87, 8uLL);
    v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), v87, 0xCuLL);
    v107 = (int8x16_t)vsubq_f32(vmulq_f32((float32x4_t)v109, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), v90, 0xCuLL)), vmulq_f32(v106, (float32x4_t)vextq_s8(vextq_s8(v90, v90, 0xCuLL), v90, 8uLL)));
    v108 = vaddq_f32(vaddq_f32((float32x4_t)v90, vmulq_n_f32((float32x4_t)v107, v93)), vmulq_n_f32(vsubq_f32(vmulq_f32((float32x4_t)v109, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), v107, 0xCuLL)), vmulq_f32(v106, (float32x4_t)vextq_s8(vextq_s8(v107, v107, 0xCuLL), v107, 8uLL))), v86.f32[0]));
    DWORD2(v178) = v108.i32[2];
    *(_QWORD *)&v178 = v108.i64[0];
    v172 = xmmword_208238C40;
    v173 = unk_208238C50;
    v109.i32[3] = 0;
    v174 = xmmword_208238C60;
    v175 = unk_208238C70;
    v71.i32[0] = *(_DWORD *)(v7 + 72);
    *(int32x2_t *)v70.i8 = *v21;
    v110 = v70;
    v110.i32[2] = v71.i32[0];
    LODWORD(v111) = HIDWORD(*(unint64_t *)v21);
    v112 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)vdup_lane_s32(*v21, 1), (float32x2_t)*v21, 1), v71, v71).f32[0];
    if (v112 >= 0.0061)
    {
      v115 = sqrtf(v112);
      v168 = *(_DWORD *)(v7 + 72);
      v170 = v110;
      v166 = v112;
      v167 = v70.i32[0];
      v116 = __sincosf_stret(v115);
      *(float *)v109.i32 = v116.__cosval;
      v70.i32[0] = v167;
      v71.i32[0] = v168;
      v110 = v170;
      v114 = v116.__sinval / v115;
      v113 = (float)(1.0 / v166) * (float)(1.0 - v116.__cosval);
      v86.f32[0] = (float)(1.0 / v166) * (float)(1.0 - (float)(v116.__sinval / v115));
    }
    else
    {
      v113 = 0.5 - (float)(v112 * (float)((float)(v112 / -720.0) + 0.041667));
      v86.f32[0] = 0.16667 - (float)(v112 * (float)((float)(v112 / -5040.0) + 0.0083333));
      v114 = 1.0 - (float)(v112 * v86.f32[0]);
      *(float *)v109.i32 = 1.0 - (float)(v112 * v113);
    }
    *(float *)v69.i32 = (float)(*(float *)v70.i32 * (float)(*(float *)v70.i32 * v113)) + *(float *)v109.i32;
    v117 = (float)(v111 * (float)(v111 * v113)) + *(float *)v109.i32;
    *((float *)&v174 + 2) = (float)(v71.f32[0] * (float)(v71.f32[0] * v113)) + *(float *)v109.i32;
    *(float *)v109.i32 = v111 * (float)(*(float *)v70.i32 * v113);
    v118 = v71.f32[0] * (float)(*(float *)v70.i32 * v113);
    v119 = v71.f32[0] * (float)(v111 * v113);
    v120 = *(float *)v70.i32 * v114;
    v121 = v111 * v114;
    v122 = v71.f32[0] * v114;
    LODWORD(v172) = v69.i32[0];
    *((float *)&v172 + 1) = *(float *)v109.i32 + v122;
    *(float *)&v174 = v118 + v121;
    *((float *)&v174 + 1) = v119 - v120;
    *(float *)&v173 = *(float *)v109.i32 - v122;
    *((float *)&v173 + 1) = v117;
    *((float *)&v172 + 2) = v118 - v121;
    *((float *)&v173 + 2) = v119 + v120;
    v109.i64[0] = *(_QWORD *)(v7 + 76);
    v109.i32[2] = *(_DWORD *)(v7 + 84);
    v123 = (float32x4_t)vextq_s8(vextq_s8(v110, v110, 0xCuLL), v110, 8uLL);
    v124 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), v110, 0xCuLL);
    v125 = (int8x16_t)vsubq_f32(vmulq_f32(v123, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109), v109, 0xCuLL)), vmulq_f32(v124, (float32x4_t)vextq_s8(vextq_s8(v109, v109, 0xCuLL), v109, 8uLL)));
    v126 = vaddq_f32((float32x4_t)v109, vmulq_n_f32((float32x4_t)v125, v113));
    v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125), v125, 0xCuLL);
    v128 = vextq_s8(v125, v125, 0xCuLL);
    v129 = (float32x4_t)vextq_s8(v128, v125, 8uLL);
    v130 = vmulq_f32(v123, v127);
    v131 = vmulq_f32(v124, v129);
    v132 = vmulq_n_f32(vsubq_f32(v130, v131), v86.f32[0]);
    v133 = vaddq_f32(v126, v132);
    DWORD2(v175) = v133.i32[2];
    *(_QWORD *)&v175 = v133.i64[0];
    sub_207DF23FC(&v183, (float32x2_t *)v176, (float32x2_t *)&v172, v98, *(double *)v132.i64, *(double *)v86.i64, *(float32x2_t *)v131.f32, *(double *)v129.i64, *(double *)v124.i64, *(double *)v128.i64, v69);
    memset(v179, 0, 24);
    v188[0] = (float32x2_t *)&v183;
    v188[1] = 0;
    v187[0] = (float *)v179;
    v187[1] = 0;
    sub_207DA0C70(v188, v187);
    v134 = (int8x16_t)v179[0];
    v135 = vextq_s8(v134, v134, 8uLL);
    v136 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v134.i8, *(float32x2_t *)v134.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v179[0], 1), *(float32x2_t *)&v179[0], 1), *(float32x2_t *)v135.i8, *(float32x2_t *)v135.i8).f32[0];
    if (v136 >= 0.0061)
    {
      v140 = sqrtf(v136);
      v169 = v136;
      v171 = (int8x16_t)v179[0];
      v141 = __sincosf_stret(v140);
      v136 = v169;
      v134 = v171;
      v138 = v141.__sinval / v140;
      v137 = (float)(1.0 / v169) * (float)(1.0 - v141.__cosval);
      *(float *)v135.i32 = (float)(1.0 / v169) * (float)(1.0 - (float)(v141.__sinval / v140));
      if (v169 >= 0.00000149)
      {
LABEL_23:
        if (v136 <= 9.0)
          v139 = (float)((float)(v137 * 0.5) - *(float *)v135.i32) / v138;
        else
          v139 = (float)(v137 + (float)(v138 * -0.5)) / (float)(v136 * v137);
        goto LABEL_28;
      }
    }
    else
    {
      v137 = 0.5 - (float)(v136 * (float)((float)(v136 / -720.0) + 0.041667));
      *(float *)v135.i32 = 0.16667 - (float)(v136 * (float)((float)(v136 / -5040.0) + 0.0083333));
      v138 = 1.0 - (float)(v136 * *(float *)v135.i32);
      if (v136 >= 0.00000149)
        goto LABEL_23;
    }
    v139 = (float)(v136 * 0.000033069) + (float)((float)(v136 * 0.0013889) + 0.083333);
LABEL_28:
    v135.i64[0] = v186.i64[0];
    v135.i32[2] = v186.i32[2];
    v142 = (float32x4_t)vextq_s8(vextq_s8(v134, v134, 0xCuLL), v134, 8uLL);
    v143 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v134, (int32x4_t)v134), v134, 0xCuLL);
    v144 = (int8x16_t)vsubq_f32(vmulq_f32(v142, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), v135, 0xCuLL)), vmulq_f32(v143, (float32x4_t)vextq_s8(vextq_s8(v135, v135, 0xCuLL), v135, 8uLL)));
    v145.i64[0] = 0xBF000000BF000000;
    v145.i64[1] = 0xBF000000BF000000;
    v146 = vaddq_f32(vaddq_f32((float32x4_t)v135, vmulq_f32((float32x4_t)v144, v145)), vmulq_n_f32(vsubq_f32(vmulq_f32(v142, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v144, (int32x4_t)v144), v144, 0xCuLL)), vmulq_f32(v143, (float32x4_t)vextq_s8(vextq_s8(v144, v144, 0xCuLL), v144, 8uLL))), v139));
    DWORD1(v179[1]) = v146.i32[2];
    *(_QWORD *)((char *)v179 + 12) = v146.i64[0];
    *(_OWORD *)v21->i8 = v179[0];
    *(_QWORD *)(v7 + 80) = *(_QWORD *)&v179[1];
    v147 = *(_OWORD **)(a1 + 200);
    v148 = v147[1];
    *a3 = *v147;
    a3[1] = v148;
    v9 = v147[2];
    v10 = v147[3];
    goto LABEL_29;
  }
  v8 = *(_OWORD *)(v7 + 16);
  *a3 = *(_OWORD *)v7;
  a3[1] = v8;
  v9 = *(_OWORD *)(v7 + 32);
  v10 = *(_OWORD *)(v7 + 48);
LABEL_29:
  a3[2] = v9;
  a3[3] = v10;
}

float32x4_t sub_207DEEBE4@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>, double a3@<D0>, float32x4_t a4@<Q1>)
{
  int8x16_t v4;
  float v6;
  float32x2_t *v7;
  unint64_t v8;
  __int32 v9;
  int8x16_t v10;
  float v11;
  float v12;
  float32x4_t v13;
  unsigned __int32 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float cosval;
  float v23;
  unint64_t v24;
  __float2 v25;
  float v26;
  float v27;
  float v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t result;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float v44;
  int8x16_t v45;
  int8x16_t v46;

  if (!*(_BYTE *)(a1 + 192))
    sub_207CA2A4C();
  v6 = (a3 - *(double *)(a1 + 184)) / *(float *)(a1 + 12);
  v7 = *(float32x2_t **)(a1 + 200);
  *(float32x2_t *)a4.f32 = v7[10];
  v8 = vmulq_n_f32(a4, v6).u64[0];
  v9 = HIDWORD(v8);
  v10 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)v7[8].f32, v6);
  v4.i32[0] = v10.i32[3];
  v11 = *(float *)&v10.i32[2];
  v12 = *(float *)&v10.i32[1];
  v13.i32[3] = 0;
  v14 = unk_208238C7C;
  v16.i32[3] = 0;
  v15.i32[3] = unk_208238C5C;
  v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1);
  v18 = (float32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), v17, *(float32x2_t *)v10.i8, 1), v18, v18).f32[0];
  if (v19 >= 0.0061)
  {
    v23 = sqrtf(v19);
    v45 = v10;
    v46 = v4;
    v43 = *(float *)&v10.i32[1];
    v44 = *(float *)&v10.i32[2];
    v24 = v8;
    v42 = v19;
    v25 = __sincosf_stret(v23);
    cosval = v25.__cosval;
    v9 = HIDWORD(v24);
    LODWORD(v8) = v24;
    v12 = v43;
    v11 = v44;
    v10 = v45;
    v4 = v46;
    v14 = unk_208238C7C;
    v16.i32[3] = 0;
    v15.i32[3] = unk_208238C5C;
    v13.i32[3] = 0;
    v21 = v25.__sinval / v23;
    v17.f32[0] = (float)(1.0 / v42) * (float)(1.0 - v25.__cosval);
    v20 = (float)(1.0 / v42) * (float)(1.0 - (float)(v25.__sinval / v23));
  }
  else
  {
    v17.f32[0] = 0.5 - (float)(v19 * (float)((float)(v19 / -720.0) + 0.041667));
    v20 = 0.16667 - (float)(v19 * (float)((float)(v19 / -5040.0) + 0.0083333));
    v21 = 1.0 - (float)(v19 * v20);
    cosval = 1.0 - (float)(v19 * v17.f32[0]);
  }
  v4.i32[1] = v8;
  v4.i32[2] = v9;
  v16.f32[0] = (float)(*(float *)v10.i32 * (float)(*(float *)v10.i32 * v17.f32[0])) + cosval;
  v26 = v12 * (float)(*(float *)v10.i32 * v17.f32[0]);
  v27 = v11 * (float)(*(float *)v10.i32 * v17.f32[0]);
  v28 = v12 * v21;
  v16.f32[1] = v26 + (float)(v11 * v21);
  v29 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v11), LODWORD(v12)), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v17, 0));
  v16.f32[2] = v27 - (float)(v12 * v21);
  v15.f32[0] = v26 - (float)(v11 * v21);
  v30 = vmul_n_f32(v29, v11);
  v29.f32[1] = v21;
  v31 = vmul_f32((float32x2_t)__PAIR64__(v10.u32[0], LODWORD(v12)), v29);
  v32 = (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1);
  v33 = (float32x2_t)__PAIR64__(LODWORD(cosval), v32.u32[0]);
  v32.i32[0] = vsub_f32(v30, v32).u32[0];
  v32.i32[1] = vadd_f32(v30, v33).i32[1];
  v34 = (float32x2_t)vdup_lane_s32((int32x2_t)v30, 0);
  v34.f32[0] = cosval;
  *(float32x2_t *)&v15.i32[1] = vadd_f32(v31, v34);
  v13.f32[0] = v27 + v28;
  *(float32x2_t *)&v13.i32[1] = v32;
  *(float *)&v10.i32[1] = v12;
  *(float *)&v10.i32[2] = v11;
  v35 = (float32x4_t)vextq_s8(vextq_s8(v10, v10, 0xCuLL), v10, 8uLL);
  v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
  v37 = (int8x16_t)vsubq_f32(vmulq_f32(v35, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), v4, 0xCuLL)), vmulq_f32(v36, (float32x4_t)vextq_s8(vextq_s8(v4, v4, 0xCuLL), v4, 8uLL)));
  result = vaddq_f32(vaddq_f32((float32x4_t)v4, vmulq_n_f32((float32x4_t)v37, v17.f32[0])), vmulq_n_f32(vsubq_f32(vmulq_f32(v35, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), v37, 0xCuLL)), vmulq_f32(v36, (float32x4_t)vextq_s8(vextq_s8(v37, v37, 0xCuLL), v37, 8uLL))), v20));
  result.i32[3] = v14;
  v39 = *(float32x4_t *)v7[6].f32;
  v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)v7[2].f32)), v15, v7[2], 1), v13, *(float32x4_t *)v7[2].f32, 2), result, *(float32x4_t *)v7[2].f32, 3);
  v41 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)v7[4].f32)), v15, v7[4], 1), v13, *(float32x4_t *)v7[4].f32, 2), result, *(float32x4_t *)v7[4].f32, 3);
  *a2 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)v7->f32)), v15, *v7, 1), v13, *(float32x4_t *)v7->f32, 2), result, *(float32x4_t *)v7->f32, 3);
  a2[1] = v40;
  a2[2] = v41;
  a2[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, v39.f32[0]), v15, *(float32x2_t *)v39.f32, 1), v13, v39, 2), result, v39, 3);
  return result;
}

void sub_207DEEEB0(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  __int128 *v7;
  unsigned __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  __int32 v15;
  float32x2_t v16;
  __int32 v17;
  uint64_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int32x2_t v25;
  float v26;
  float v27;
  __int32 v28;
  __int32 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  double v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  unsigned __int128 v45;
  __int128 v46;
  __int128 v47;
  int32x2_t v48;

  v7 = *(__int128 **)(a1 + 200);
  if (*((_BYTE *)v7 + 72))
  {
    if (a4 == 0.0)
    {
      v8 = *v7;
      HIDWORD(v9) = 0;
      LODWORD(v9) = HIDWORD(*v7);
      *(_QWORD *)((char *)&v9 + 4) = *((_QWORD *)v7 + 2);
      *(_QWORD *)&v10 = *((_QWORD *)v7 + 3);
      HIDWORD(v8) = 0;
      *((_QWORD *)&v10 + 1) = *((unsigned int *)v7 + 8);
      *(_OWORD *)(a3 + 16) = v9;
      *(_OWORD *)(a3 + 32) = v10;
      *(_OWORD *)a3 = v8;
      v11 = *((_DWORD *)v7 + 11);
      v12 = *(_QWORD *)((char *)v7 + 36);
    }
    else
    {
      *(double *)&v25 = a4 / *(float *)(a1 + 12);
      *(float *)v25.i32 = *(double *)v25.i32;
      v48 = v25;
      v26 = expm1f(-(float)(*(float *)v25.i32 * *(float *)(a1 + 16)));
      v27 = expm1f(-(float)(*(float *)v48.i32 * *(float *)(a1 + 20)));
      *(float *)&v28 = -expm1f(-(float)(*(float *)v48.i32 * *(float *)(a1 + 24)));
      *(float *)&v29 = -expm1f(-(float)(*(float *)v48.i32 * *(float *)(a1 + 28)));
      *(float32x2_t *)v30.f32 = a2[6];
      v30.i32[2] = a2[7].i32[0];
      v31.i64[0] = *(_QWORD *)((char *)v7 + 36);
      v31.i32[2] = *((_DWORD *)v7 + 11);
      v32.i64[0] = *(_QWORD *)((char *)v7 + 60);
      v32.i32[2] = *((_DWORD *)v7 + 17);
      HIDWORD(v33) = v48.i32[1];
      v34 = vaddq_f32(vmulq_n_f32(v30, -v26), vmulq_n_f32(vaddq_f32(v31, vmulq_n_f32(v32, *(float *)v48.i32)), v26 + 1.0));
      *((_DWORD *)v7 + 11) = v34.i32[2];
      *(_QWORD *)((char *)v7 + 36) = v34.i64[0];
      v35 = vmulq_n_f32(vdivq_f32(vsubq_f32(v34, v31), (float32x4_t)vdupq_lane_s32(v48, 0)), -v27);
      v36 = vmulq_n_f32(v32, v27 + 1.0);
      v37 = (int8x16_t)vaddq_f32(v36, v35);
      *((_DWORD *)v7 + 17) = v37.i32[2];
      *(_QWORD *)((char *)v7 + 60) = v37.i64[0];
      *(float32x2_t *)v37.i8 = *a2;
      LODWORD(v33) = a2[3].i32[0];
      v36.i32[0] = HIDWORD(*(unint64_t *)a2);
      sub_207DEF134(*(_QWORD *)(a1 + 200), (float32x2_t *)(*(_QWORD *)(a1 + 200) + 48), v37, v36, a2[1].f32[0], a2[2], COERCE_FLOAT32_T(HIDWORD(*(_QWORD *)&a2[2])), v33, a2[4], COERCE_FLOAT32_T(HIDWORD(*(_QWORD *)&a2[4])), v38, v39, v40, v41, v42, v43, a2[5].i32[0], *(float *)v48.i32, v28,
        v29);
      v44 = *(__int128 **)(a1 + 200);
      v45 = *v44;
      HIDWORD(v46) = 0;
      LODWORD(v46) = HIDWORD(*v44);
      *(_QWORD *)((char *)&v46 + 4) = *((_QWORD *)v44 + 2);
      *(_QWORD *)&v47 = *((_QWORD *)v44 + 3);
      HIDWORD(v45) = 0;
      *((_QWORD *)&v47 + 1) = *((unsigned int *)v44 + 8);
      *(_OWORD *)(a3 + 16) = v46;
      *(_OWORD *)(a3 + 32) = v47;
      *(_OWORD *)a3 = v45;
      v11 = *((_DWORD *)v44 + 11);
      v12 = *(_QWORD *)((char *)v44 + 36);
    }
    *(_QWORD *)(a3 + 48) = v12;
    *(_DWORD *)(a3 + 56) = v11;
    *(_DWORD *)(a3 + 60) = 1065353216;
  }
  else
  {
    v13 = *a2;
    v14 = a2[2];
    v15 = a2[3].i32[0];
    v16 = a2[4];
    v17 = a2[5].i32[0];
    *((_DWORD *)v7 + 2) = a2[1].i32[0];
    *(float32x2_t *)v7 = v13;
    *((_DWORD *)v7 + 5) = v15;
    *(float32x2_t *)((char *)v7 + 12) = v14;
    *((_DWORD *)v7 + 8) = v17;
    *((float32x2_t *)v7 + 3) = v16;
    v18 = *(_QWORD *)(a1 + 200);
    v19 = a2[6];
    *(_DWORD *)(v18 + 44) = a2[7].i32[0];
    *(float32x2_t *)(v18 + 36) = v19;
    v20 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v20 + 48) = 0;
    *(_DWORD *)(v20 + 56) = 0;
    v21 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v21 + 60) = 0;
    *(_DWORD *)(v21 + 68) = 0;
    *(_BYTE *)(v21 + 72) = 1;
    v22 = *(_OWORD *)a2->f32;
    v23 = *(_OWORD *)a2[2].f32;
    v24 = *(_OWORD *)a2[6].f32;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)a2[4].f32;
    *(_OWORD *)(a3 + 48) = v24;
    *(_OWORD *)a3 = v22;
    *(_OWORD *)(a3 + 16) = v23;
  }
}

void sub_207DEF134(uint64_t a1, float32x2_t *a2, int8x16_t a3, float32x4_t a4, float32_t a5, float32x2_t a6, float32_t a7, double a8, float32x2_t a9, float32_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int32 a17, float a18, __int32 a19, __int32 a20)
{
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  unsigned __int32 v25;
  float32x2_t v26;
  int8x16_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float cosval;
  float v35;
  __float2 v36;
  float v37;
  float32x2_t v38;
  float32_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  __float2 v65;
  float v66;
  float32x2_t v67;
  float32_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float32x2_t v73;
  float32x2_t v74;
  float32_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  uint64_t v87;
  int32x2_t v88;
  int8x16_t v89;
  float v90;
  float v91;
  float32x2_t v92;
  float32x2_t v93;
  float v94;
  float v95;
  float v96;
  __float2 v97;
  float v98;
  float32_t v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x2_t v106;
  float v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float v111;
  float32x2_t v112;
  float v113;
  float v114;
  float v115;
  __float2 v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int8x16_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float v133;
  float v134;
  float32x2_t v135;
  float v136;
  __float2 v137;
  float32x2_t v138;
  float32_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float32x2_t v144;
  float32x2_t v145;
  float32_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float v149;
  float32x2_t v150;
  float32x2_t v151;
  float v152;
  float32x2_t v153;
  float32x2_t v154;
  __int32 v155;
  float32x2_t v156;
  double v157;
  float32x2_t v158;
  float32x2_t v159;
  __int32 v160;
  float32x2_t v161;
  float32x2_t v162;
  unsigned __int32 v163;
  float32x2_t v164;
  float32x2_t v165;
  float v166;
  float32x2_t v167;
  float32x2_t v168;
  int8x16_t v169;
  float v170;
  float32x2_t v171;
  uint64_t v172;
  __int32 v173;
  float32x2_t v174;
  float32x2_t v175;
  __int32 v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  __int32 v180;
  float32x4_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int8x16_t v184;
  float32x2_t v185;
  float v186;
  int8x16_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  int8x16_t v191;
  uint64_t v192;
  float32x2_t v193;
  float32x2_t v194;
  _BYTE v195[20];
  unsigned __int32 v196;
  float32x2_t v197;
  unsigned __int32 v198;
  float32x2_t v199;
  unsigned __int32 v200;
  float32x2_t v201;
  unsigned __int32 v202;
  float32x2_t v203;
  unsigned __int32 v204;
  float32x4_t v205;

  v20.i32[0] = LODWORD(a8);
  v24.i32[0] = a6.i32[0];
  v21.f32[0] = a5;
  v25 = a4.i32[0];
  v26.i32[0] = a3.i32[0];
  a3.i64[0] = *(_QWORD *)a1;
  a3.i32[2] = *(_DWORD *)(a1 + 8);
  v191 = a3;
  a3.i64[0] = *(_QWORD *)(a1 + 12);
  a3.i32[2] = *(_DWORD *)(a1 + 20);
  v187 = a3;
  a3.i64[0] = *(_QWORD *)(a1 + 24);
  a3.i32[2] = *(_DWORD *)(a1 + 32);
  v184 = a3;
  v22.i32[0] = a17;
  *(float *)&a8 = a18;
  a3.i32[0] = a2[1].i32[0];
  *(float32x2_t *)a4.f32 = *a2;
  a4.i32[2] = a3.i32[0];
  a6.i32[0] = a19;
  v154 = a6;
  v29 = (int8x16_t)vmulq_n_f32(a4, a18);
  *(float32x2_t *)a3.i8 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)a3.i8);
  v30 = *(float *)&v29.i32[1];
  v31 = *(float *)&v29.i32[2];
  v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), vmul_lane_f32(*(float32x2_t *)&a8, *a2, 1), *(float32x2_t *)v29.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)a3.i8).f32[0];
  if (v32 >= 0.0061)
  {
    v35 = sqrtf(v32);
    v176 = v24.i32[0];
    v180 = a9.i32[0];
    v170 = a10;
    v173 = v26.i32[0];
    v163 = v25;
    v166 = a7;
    v157 = a8;
    v160 = v29.i32[0];
    v152 = v32;
    v36 = __sincosf_stret(v35);
    cosval = v36.__cosval;
    v29.i32[0] = v160;
    v25 = v163;
    a7 = v166;
    a10 = v170;
    v26.i32[0] = v173;
    v24.i32[0] = v176;
    a9.i32[0] = v180;
    v33 = v36.__sinval / v35;
    *(float *)a3.i32 = (float)(1.0 / v152) * (float)(1.0 - v36.__cosval);
    a8 = v157;
  }
  else
  {
    *(float *)a3.i32 = 0.5 - (float)(v32 * (float)((float)(v32 / -720.0) + 0.041667));
    v33 = 1.0 - (float)(v32 * (float)(0.16667 - (float)(v32 * (float)((float)(v32 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v32 * *(float *)a3.i32);
  }
  v181 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
  v37 = *(float *)v29.i32 * *(float *)a3.i32;
  *(float *)&a8 = v30 * *(float *)a3.i32;
  v38.f32[0] = cosval + (float)(*(float *)v29.i32 * (float)(*(float *)v29.i32 * *(float *)a3.i32));
  v39 = cosval + (float)(v30 * (float)(v30 * *(float *)a3.i32));
  *(float *)a3.i32 = cosval + (float)(v31 * (float)(v31 * *(float *)a3.i32));
  v40 = v30 * v37;
  v23.f32[0] = v31 * v37;
  *(float *)&a8 = v31 * *(float *)&a8;
  v41 = *(float *)v29.i32 * v33;
  v42 = v30 * v33;
  v43 = v31 * v33;
  v44.f32[0] = v40 - (float)(v31 * v33);
  v45.f32[0] = v42 + v23.f32[0];
  v38.f32[1] = v40 + v43;
  v46 = *(float *)&a8 - v41;
  v23.f32[0] = v23.f32[0] - v42;
  v44.f32[1] = v39;
  *(float *)&a8 = v41 + *(float *)&a8;
  v45.f32[1] = v46;
  v177 = (float32x2_t)vextq_s8(v191, v191, 8uLL).u64[0];
  v47 = vmla_f32(vmla_lane_f32(vmul_f32(v23, *(float32x2_t *)v191.i8), *(float32x2_t *)&a8, *(float32x2_t *)v191.i8, 1), v177, *(float32x2_t *)a3.i8);
  v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v187.i8, 0);
  v49 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v187.i8, 1);
  v50 = (float32x2_t)vdup_laneq_s32((int32x4_t)v187, 2);
  v171 = (float32x2_t)vextq_s8(v187, v187, 8uLL).u64[0];
  v51 = vmla_f32(vmla_lane_f32(vmul_f32(v23, *(float32x2_t *)v187.i8), *(float32x2_t *)&a8, *(float32x2_t *)v187.i8, 1), v171, *(float32x2_t *)a3.i8);
  v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 0);
  v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 1);
  v174 = (float32x2_t)vdup_laneq_s32((int32x4_t)v184, 2);
  v164 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v38, *(float *)v191.i32), v44, *(float32x2_t *)v191.i8, 1), v45, (float32x4_t)v191, 2);
  v167 = (float32x2_t)vextq_s8(v184, v184, 8uLL).u64[0];
  v54 = vmla_f32(vmla_lane_f32(vmul_f32(v23, *(float32x2_t *)v184.i8), *(float32x2_t *)&a8, *(float32x2_t *)v184.i8, 1), v167, *(float32x2_t *)a3.i8);
  v26.i32[1] = v25;
  v24.f32[1] = a7;
  a9.f32[1] = a10;
  v158 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v38, *(float *)v187.i32), v44, *(float32x2_t *)v187.i8, 1), v45, (float32x4_t)v187, 2);
  v161 = v47;
  v151 = v51;
  v153 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v38, *(float *)v184.i32), v44, *(float32x2_t *)v184.i8, 1), v45, (float32x4_t)v184, 2);
  v200 = vmla_f32(vmla_f32(vmul_f32(v21, v164), v158, v20), v153, v22).u32[0];
  v199 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v26, v164.f32[0]), v24, v158.f32[0]), a9, v153.f32[0]);
  v202 = vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(v21, v164, 1), v20, v158, 1), v22, v153, 1).u32[0];
  v201 = vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(v26, v164, 1), v24, v158, 1), a9, v153, 1);
  v204 = vmla_f32(vmla_f32(vmul_f32(v21, v47), v51, v20), v54, v22).u32[0];
  v150 = v54;
  v203 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v26, v47.f32[0]), v24, v51.f32[0]), a9, v54.f32[0]);
  *(_QWORD *)v195 = 0;
  *(_DWORD *)&v195[8] = 0;
  sub_207D9EF70(&v199, (float *)v195);
  v57.i32[1] = v154.i32[1];
  v58 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)v195, v154.f32[0]);
  v59 = *(float *)&v58.i32[1];
  v60 = *(float *)&v58.i32[2];
  v61 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), vmul_lane_f32(v154, *(float32x2_t *)v195, 1), *(float32x2_t *)v58.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL), vmul_f32(v154, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v195, *(int8x16_t *)v195, 8uLL))).f32[0];
  if (v61 >= 0.0061)
  {
    v64 = sqrtf(v61);
    v155 = v58.i32[0];
    v149 = v61;
    v65 = __sincosf_stret(v64);
    v63 = v65.__cosval;
    v58.i32[0] = v155;
    v62 = v65.__sinval / v64;
    v57.f32[0] = (float)(1.0 / v149) * (float)(1.0 - v65.__cosval);
  }
  else
  {
    v57.f32[0] = 0.5 - (float)(v61 * (float)((float)(v61 / -720.0) + 0.041667));
    v62 = 1.0 - (float)(v61 * (float)(0.16667 - (float)(v61 * (float)((float)(v61 / -5040.0) + 0.0083333))));
    v63 = 1.0 - (float)(v61 * v57.f32[0]);
  }
  v66 = *(float *)v58.i32 * v57.f32[0];
  v55.f32[0] = v59 * v57.f32[0];
  v67.f32[0] = v63 + (float)(*(float *)v58.i32 * (float)(*(float *)v58.i32 * v57.f32[0]));
  v68 = v63 + (float)(v59 * (float)(v59 * v57.f32[0]));
  v57.f32[0] = v63 + (float)(v60 * (float)(v60 * v57.f32[0]));
  v69 = v59 * v66;
  v70 = v60 * v66;
  v55.f32[0] = v60 * v55.f32[0];
  v71 = *(float *)v58.i32 * v62;
  v56.f32[0] = v59 * v62;
  v72 = v60 * v62;
  v73.f32[0] = v69 - v72;
  v74.f32[0] = v56.f32[0] + v70;
  v67.f32[1] = v69 + v72;
  v75 = v55.f32[0] - v71;
  v56.f32[0] = v70 - v56.f32[0];
  v73.f32[1] = v68;
  v55.f32[0] = v71 + v55.f32[0];
  v74.f32[1] = v75;
  v76 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v67, v164.f32[0]), v73, v164, 1), v74, v161.f32[0]);
  v77 = vmla_f32(vmla_lane_f32(vmul_f32(v56, v164), v55, v164, 1), v161, v57);
  v78 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v67, v158.f32[0]), v73, v158, 1), v74, v151.f32[0]);
  v79 = vmla_f32(vmla_lane_f32(vmul_f32(v56, v158), v55, v158, 1), v151, v57);
  v80 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v67, v153.f32[0]), v73, v153, 1), v74, v150.f32[0]);
  v81 = vmla_f32(vmla_lane_f32(vmul_f32(v56, v153), v55, v153, 1), v150, v57);
  *(_DWORD *)(a1 + 8) = v77.i32[0];
  *(float32x2_t *)a1 = v76;
  *(_DWORD *)(a1 + 20) = v79.i32[0];
  *(float32x2_t *)(a1 + 12) = v78;
  *(_DWORD *)(a1 + 32) = v81.i32[0];
  *(float32x2_t *)(a1 + 24) = v80;
  v200 = vmla_f32(vmla_f32(vmul_f32(v77, *(float32x2_t *)v191.i8), *(float32x2_t *)v187.i8, v79), *(float32x2_t *)v184.i8, v81).u32[0];
  v199 = vmla_f32(vmla_f32(vmul_n_f32(v76, *(float *)v191.i32), v48, v78), v52, v80);
  v202 = vmla_f32(vmla_f32(vmul_lane_f32(v77, *(float32x2_t *)v191.i8, 1), v49, v79), v53, v81).u32[0];
  v201 = vmla_f32(vmla_f32(vmul_lane_f32(v76, *(float32x2_t *)v191.i8, 1), v49, v78), v53, v80);
  v204 = vmla_f32(vmla_f32(vmul_f32(v77, v177), v171, v79), v167, v81).u32[0];
  v203 = vmla_f32(vmla_f32(vmul_laneq_f32(v76, (float32x4_t)v191, 2), v50, v78), v174, v80);
  *(_QWORD *)v195 = 0;
  *(_DWORD *)&v195[8] = 0;
  sub_207D9EF70(&v199, (float *)v195);
  v89 = (int8x16_t)vdivq_f32(*(float32x4_t *)v195, v181);
  v90 = *(float *)&v89.i32[1];
  v91 = *(float *)&v89.i32[2];
  v92 = (float32x2_t)vextq_s8(v89, v89, 8uLL).u64[0];
  v93 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1), *(float32x2_t *)v89.i8, 1), v92, v92);
  if (v93.f32[0] >= 0.0061)
  {
    v96 = sqrtf(v93.f32[0]);
    v192 = v89.i64[0];
    v188 = v93;
    v97 = __sincosf_stret(v96);
    v92.f32[0] = v97.__cosval;
    v89.i64[0] = v192;
    v93.i32[1] = v188.i32[1];
    v95 = v97.__sinval / v96;
    v94 = (float)(1.0 / v188.f32[0]) * (float)(1.0 - v97.__cosval);
  }
  else
  {
    v94 = 0.5 - (float)(v93.f32[0] * (float)((float)(v93.f32[0] / -720.0) + 0.041667));
    v95 = 1.0
        - (float)(v93.f32[0]
                * (float)(0.16667 - (float)(v93.f32[0] * (float)((float)(v93.f32[0] / -5040.0) + 0.0083333))));
    v92.f32[0] = 1.0 - (float)(v93.f32[0] * v94);
  }
  v93.i32[0] = a20;
  v168 = v93;
  v98 = v90 * v94;
  v106.f32[0] = v92.f32[0] + (float)(*(float *)v89.i32 * (float)(*(float *)v89.i32 * v94));
  v99 = v92.f32[0] + (float)(v90 * (float)(v90 * v94));
  v49.f32[0] = v92.f32[0] + (float)(v91 * (float)(v91 * v94));
  v100 = v90 * (float)(*(float *)v89.i32 * v94);
  v101 = v91 * (float)(*(float *)v89.i32 * v94);
  v102 = v91 * v98;
  v103 = *(float *)v89.i32 * v95;
  v104 = v90 * v95;
  v105 = v91 * v95;
  v108.f32[0] = v100 - v105;
  v109.f32[0] = v104 + v101;
  v106.f32[1] = v100 + v105;
  v107 = v101 - v104;
  v108.f32[1] = v99;
  v109.f32[1] = v102 - v103;
  v50.f32[0] = v103 + v102;
  v110 = *a2;
  v22.i32[0] = a2[1].i32[0];
  LODWORD(v111) = HIDWORD(*(unint64_t *)a2);
  v112 = vmla_f32(vmla_lane_f32(vmul_f32(v110, v110), (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1), *a2, 1), v22, v22);
  if (v112.f32[0] >= 0.0061)
  {
    v115 = sqrtf(v112.f32[0]);
    v193 = v109;
    v185 = v108;
    v189 = v106;
    v178 = v112;
    v182 = *a2;
    v116 = __sincosf_stret(v115);
    v92.f32[0] = v116.__cosval;
    v110 = v182;
    v108 = v185;
    v106 = v189;
    v109 = v193;
    v112.i32[1] = v178.i32[1];
    v114 = v116.__sinval / v115;
    v113 = (float)(1.0 / v178.f32[0]) * (float)(1.0 - v116.__cosval);
  }
  else
  {
    v113 = 0.5 - (float)(v112.f32[0] * (float)((float)(v112.f32[0] / -720.0) + 0.041667));
    v114 = 1.0
         - (float)(v112.f32[0]
                 * (float)(0.16667 - (float)(v112.f32[0] * (float)((float)(v112.f32[0] / -5040.0) + 0.0083333))));
    v92.f32[0] = 1.0 - (float)(v112.f32[0] * v113);
  }
  v117 = v111 * v113;
  *(float *)&v87 = v92.f32[0] + (float)(v110.f32[0] * (float)(v110.f32[0] * v113));
  v84.f32[0] = v92.f32[0] + (float)(v111 * (float)(v111 * v113));
  *(float *)v89.i32 = v92.f32[0] + (float)(v22.f32[0] * (float)(v22.f32[0] * v113));
  v92.f32[0] = v111 * (float)(v110.f32[0] * v113);
  v118 = v22.f32[0] * (float)(v110.f32[0] * v113);
  v112.f32[0] = v22.f32[0] * v117;
  v119 = v110.f32[0] * v114;
  v82.f32[0] = v111 * v114;
  v120 = v22.f32[0] * v114;
  v85.f32[0] = v92.f32[0] - v120;
  v83.f32[0] = v82.f32[0] + v118;
  *(float *)v88.i32 = v92.f32[0] + v120;
  v110.f32[0] = v112.f32[0] - v119;
  v82.f32[0] = v118 - v82.f32[0];
  v86.f32[0] = v119 + v112.f32[0];
  v121 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v106, *(float *)&v87), v108, v92.f32[0] - v120), v109, v83.f32[0]);
  v172 = v87;
  v92.f32[0] = v107 * *(float *)&v87;
  v179 = v85;
  v183 = v84;
  v186 = v83.f32[0];
  v190 = v110;
  v122 = (float32x2_t)vdup_lane_s32(v88, 0);
  v123 = (float32x2_t)vdup_lane_s32((int32x2_t)v84, 0);
  v124 = (float32x2_t)vdup_lane_s32((int32x2_t)v110, 0);
  v125 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v106, *(float *)v88.i32), v108, v84.f32[0]), v109, v112.f32[0] - v119);
  v162 = (float32x2_t)v88;
  v165 = v82;
  v112.f32[0] = v107 * *(float *)v88.i32;
  v126 = (float32x2_t)vdup_lane_s32((int32x2_t)v82, 0);
  v127 = (float32x2_t)vdup_lane_s32((int32x2_t)v86, 0);
  v128 = vmla_n_f32(vmul_n_f32(v106, v82.f32[0]), v108, v86.f32[0]);
  v159 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 0);
  v82.f32[0] = v107 * v82.f32[0];
  v175 = v86;
  v200 = vmla_f32(vmla_f32(v92, v85, v50), v83, v49).u32[0];
  v199 = v121;
  v202 = vmla_f32(vmla_f32(v112, v84, v50), v110, v49).u32[0];
  v201 = v125;
  v204 = vmla_f32(vmla_f32(v82, v86, v50), *(float32x2_t *)v89.i8, v49).u32[0];
  v194 = *(float32x2_t *)v89.i8;
  v203 = vmla_n_f32(v128, v109, *(float *)v89.i32);
  v205.i64[0] = 0;
  v205.i32[2] = 0;
  sub_207D9EF70(&v199, v205.f32);
  v130 = (int8x16_t)vmulq_n_f32(v205, v168.f32[0]);
  v131 = vmul_f32(v168, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL));
  v132 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8), vmul_lane_f32(v168, *(float32x2_t *)v205.f32, 1), *(float32x2_t *)v130.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL), v131);
  if (v132.f32[0] >= 0.0061)
  {
    v135 = v124;
    v136 = sqrtf(v132.f32[0]);
    v169 = v130;
    v156 = v132;
    v137 = __sincosf_stret(v136);
    v131.f32[0] = v137.__cosval;
    v130 = v169;
    v132.i32[1] = v156.i32[1];
    v134 = v137.__sinval / v136;
    v124 = v135;
    v133 = (float)(1.0 / v156.f32[0]) * (float)(1.0 - v137.__cosval);
  }
  else
  {
    v133 = 0.5 - (float)(v132.f32[0] * (float)((float)(v132.f32[0] / -720.0) + 0.041667));
    v134 = 1.0
         - (float)(v132.f32[0]
                 * (float)(0.16667 - (float)(v132.f32[0] * (float)((float)(v132.f32[0] / -5040.0) + 0.0083333))));
    v131.f32[0] = 1.0 - (float)(v132.f32[0] * v133);
  }
  v132.f32[0] = v133 * *(float *)v130.i32;
  v129.f32[0] = vmuls_lane_f32(v133, *(float32x2_t *)v130.i8, 1);
  v138.f32[0] = v131.f32[0] + (float)((float)(v133 * *(float *)v130.i32) * *(float *)v130.i32);
  v139 = v131.f32[0] + vmuls_lane_f32(v129.f32[0], *(float32x2_t *)v130.i8, 1);
  v131.f32[0] = v131.f32[0] + vmuls_lane_f32(vmuls_lane_f32(v133, (float32x4_t)v130, 2), (float32x4_t)v130, 2);
  v140 = vmuls_lane_f32(v133 * *(float *)v130.i32, *(float32x2_t *)v130.i8, 1);
  v132.f32[0] = vmuls_lane_f32(v132.f32[0], (float32x4_t)v130, 2);
  v129.f32[0] = vmuls_lane_f32(v129.f32[0], (float32x4_t)v130, 2);
  v141 = v134 * *(float *)v130.i32;
  v142 = vmuls_lane_f32(v134, *(float32x2_t *)v130.i8, 1);
  v143 = vmuls_lane_f32(v134, (float32x4_t)v130, 2);
  v144.f32[0] = v140 - v143;
  v145.f32[0] = v142 + v132.f32[0];
  v138.f32[1] = v140 + v143;
  v146 = v129.f32[0] - v141;
  v132.f32[0] = v132.f32[0] - v142;
  v144.f32[1] = v139;
  v129.f32[0] = v141 + v129.f32[0];
  v145.f32[1] = v146;
  v147.i32[1] = HIDWORD(v172);
  v147.f32[0] = v132.f32[0] * *(float *)&v172;
  v148.i32[1] = v179.i32[1];
  v148.f32[0] = v132.f32[0] * v179.f32[0];
  v132.f32[0] = v132.f32[0] * v186;
  *(_DWORD *)&v195[8] = vmla_f32(vmla_f32(v147, v162, v129), v165, v131).u32[0];
  *(float32x2_t *)v195 = vmla_f32(vmla_f32(vmul_n_f32(v138, *(float *)&v172), v122, v144), v126, v145);
  v196 = vmla_f32(vmla_f32(v148, v183, v129), v175, v131).u32[0];
  *(float32x2_t *)&v195[12] = vmla_f32(vmla_f32(vmul_n_f32(v138, v179.f32[0]), v123, v144), v127, v145);
  v198 = vmla_f32(vmla_f32(v132, v190, v129), v194, v131).u32[0];
  v197 = vmla_f32(vmla_f32(vmul_n_f32(v138, v186), v124, v144), v159, v145);
  v199 = 0;
  v200 = 0;
  sub_207D9EF70((float32x2_t *)v195, (float *)&v199);
  *a2 = v199;
  a2[1].i32[0] = v200;
}

float32x4_t sub_207DEFBB4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, float32x4_t a4@<Q1>, double a5@<D4>, float32x4_t a6@<Q5>)
{
  float32x2_t v6;
  __int128 v7;
  float32x4_t v8;
  float32x2_t v10;
  float32x2_t *v11;
  int8x16_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  __float2 v19;
  float32x4_t v20;
  float v21;
  float v22;
  float32x2_t v23;
  float32_t v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float32_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  __int128 v34;
  __int128 v35;
  int8x16_t v36;
  float32x4_t result;
  float v38;
  float32x4_t v39;
  int8x16_t v40;
  int v41;
  float32x4_t v42;

  if (!*(_BYTE *)(a1 + 192))
    sub_207CA2A4C();
  *(double *)&v10 = (a3 - *(double *)(a1 + 184)) / *(float *)(a1 + 12);
  *(float *)&a5 = *(double *)&v10;
  v11 = *(float32x2_t **)(a1 + 200);
  *(float32x2_t *)a6.f32 = *(float32x2_t *)((char *)v11 + 60);
  a6.i32[2] = v11[8].i32[1];
  *(float32x2_t *)v8.f32 = *(float32x2_t *)((char *)v11 + 36);
  v8.i32[2] = v11[5].i32[1];
  v10.i32[0] = v11[7].i32[0];
  *(float32x2_t *)a4.f32 = v11[6];
  a4.i32[2] = v10.i32[0];
  v12 = (int8x16_t)vmulq_n_f32(a4, *(float *)&a5);
  v13 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.i8, *(float32x2_t *)v12.i8), vmul_lane_f32(*(float32x2_t *)&a5, *(float32x2_t *)a4.f32, 1), *(float32x2_t *)v12.i8, 1);
  v14 = (float32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
  v15 = vmla_f32(v13, v14, vmul_f32(v10, *(float32x2_t *)&a5)).f32[0];
  if (v15 >= 0.0061)
  {
    v18 = sqrtf(v15);
    v42 = v8;
    v40 = v12;
    v41 = LODWORD(a5);
    v38 = v15;
    v39 = a6;
    v19 = __sincosf_stret(v18);
    v14.f32[0] = v19.__cosval;
    a6 = v39;
    v12 = v40;
    v8 = v42;
    v17 = v19.__sinval / v18;
    v16 = (float)(1.0 / v38) * (float)(1.0 - v19.__cosval);
    LODWORD(a5) = v41;
  }
  else
  {
    v16 = 0.5 - (float)(v15 * (float)((float)(v15 / -720.0) + 0.041667));
    v17 = 1.0 - (float)(v15 * (float)(0.16667 - (float)(v15 * (float)((float)(v15 / -5040.0) + 0.0083333))));
    v14.f32[0] = 1.0 - (float)(v15 * v16);
  }
  v20 = vmulq_n_f32(a6, *(float *)&a5);
  v21 = v16 * *(float *)v12.i32;
  a6.f32[0] = vmuls_lane_f32(v16, *(float32x2_t *)v12.i8, 1);
  v22 = vmuls_lane_f32(v16, (float32x4_t)v12, 2);
  v23.f32[0] = v14.f32[0] + (float)((float)(v16 * *(float *)v12.i32) * *(float *)v12.i32);
  v24 = v14.f32[0] + vmuls_lane_f32(a6.f32[0], *(float32x2_t *)v12.i8, 1);
  v14.f32[0] = v14.f32[0] + vmuls_lane_f32(v22, (float32x4_t)v12, 2);
  v25 = vmuls_lane_f32(v21, *(float32x2_t *)v12.i8, 1);
  v6.f32[0] = vmuls_lane_f32(v21, (float32x4_t)v12, 2);
  a6.f32[0] = vmuls_lane_f32(a6.f32[0], (float32x4_t)v12, 2);
  *(float *)&v7 = v17 * *(float *)v12.i32;
  v26 = vmuls_lane_f32(v17, *(float32x2_t *)v12.i8, 1);
  v27 = vmuls_lane_f32(v17, (float32x4_t)v12, 2);
  v28.f32[0] = v25 - v27;
  v23.f32[1] = v25 + v27;
  v29.f32[0] = v26 + v6.f32[0];
  v30 = a6.f32[0] - *(float *)&v7;
  v6.f32[0] = v6.f32[0] - v26;
  v28.f32[1] = v24;
  a6.f32[0] = *(float *)&v7 + a6.f32[0];
  v29.f32[1] = v30;
  v31 = *v11;
  LODWORD(v7) = v11[1].i32[0];
  v32 = *(float32x2_t *)((char *)v11 + 12);
  v12.i32[0] = v11[2].i32[1];
  v33 = v11[3];
  v31.i32[0] = v11[4].i32[0];
  *(float32x2_t *)&v34 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v23, COERCE_FLOAT(*v11)), v28, *v11, 1), v29, *(float *)&v7);
  *((_QWORD *)&v34 + 1) = vmla_f32(vmla_lane_f32(vmul_f32(v6, *v11), *(float32x2_t *)a6.f32, *v11, 1), *(float32x2_t *)&v7, v14).u32[0];
  *(float32x2_t *)&v7 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v23, v32.f32[0]), v28, v32, 1), v29, *(float *)v12.i32);
  *(float32x2_t *)&v35 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v23, v33.f32[0]), v28, v33, 1), v29, v31.f32[0]);
  v28.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v6, v33), *(float32x2_t *)a6.f32, v33, 1), v31, v14).u32[0];
  *(int8x8_t *)((char *)&v7 + 4) = vext_s8(*(int8x8_t *)&v7, (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(v6, v32), *(float32x2_t *)a6.f32, v32, 1), *(float32x2_t *)v12.i8, v14), 4uLL);
  v36 = *(int8x16_t *)(a2 + 32);
  v36.i32[3] = 0;
  *((_QWORD *)&v35 + 1) = __PAIR64__(vextq_s8(v36, v36, 8uLL).u32[1], v28.u32[0]);
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v35;
  result = vaddq_f32(v8, v20);
  *(_OWORD *)a2 = v34;
  *(_QWORD *)(a2 + 48) = result.i64[0];
  *(_DWORD *)(a2 + 56) = result.i32[2];
  *(_DWORD *)(a2 + 60) = 1065353216;
  return result;
}

void sub_207DEFE24(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  __int128 *v7;
  unsigned __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  __int32 v12;
  __int32 v13;
  float32x2_t v14;
  __int32 v15;
  float32x2_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int32x2_t v27;
  float v28;
  float v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  __int32 v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  _QWORD *v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int8x16_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x2_t v55;
  int8x16_t v56;
  float32x2_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float v60;
  float32_t v61;
  int32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x2_t v75;
  int8x16_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x2_t v91;
  double v92;
  float32x2_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  __int128 v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 *v123;
  unsigned __int128 v124;
  __int128 v125;
  __int32 v126;
  float32x4_t v127;
  float32x4_t v128;
  float32_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int32x2_t v132;
  _BYTE v133[20];
  unsigned __int32 v134;
  float32x2_t v135;
  __int32 v136;
  int8x16_t v137;

  v7 = *(__int128 **)(a1 + 200);
  if (*((_BYTE *)v7 + 156))
  {
    if (a4 == 0.0)
    {
      v8 = *v7;
      HIDWORD(v9) = 0;
      LODWORD(v9) = HIDWORD(*v7);
      *(_QWORD *)((char *)&v9 + 4) = *((_QWORD *)v7 + 2);
      *(_QWORD *)&v10 = *((_QWORD *)v7 + 3);
      HIDWORD(v8) = 0;
      *((_QWORD *)&v10 + 1) = *((unsigned int *)v7 + 8);
      *(_OWORD *)(a3 + 16) = v9;
      *(_OWORD *)(a3 + 32) = v10;
      *(_OWORD *)a3 = v8;
      v11 = *((_DWORD *)v7 + 29);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)((char *)v7 + 108);
    }
    else
    {
      *(double *)&v27 = a4 / *(float *)(a1 + 12);
      *(float *)v27.i32 = *(double *)v27.i32;
      v132 = v27;
      v28 = expm1f(-(float)(*(float *)v27.i32 * *(float *)(a1 + 16)));
      v29 = expm1f(-(float)(*(float *)v132.i32 * *(float *)(a1 + 20)));
      *(float *)&v30 = -expm1f(-(float)(*(float *)v132.i32 * *(float *)(a1 + 32)));
      *(float *)&v31 = -expm1f(-(float)(*(float *)v132.i32 * *(float *)(a1 + 36)));
      *(float *)&v32 = -expm1f(-(float)(*(float *)v132.i32 * *(float *)(a1 + 40)));
      v33 = expm1f(-(float)(*(float *)v132.i32 * *(float *)(a1 + 44)));
      *(float32x2_t *)v34.f32 = a2[6];
      v34.i32[2] = a2[7].i32[0];
      v35.i64[0] = *(_QWORD *)((char *)v7 + 108);
      v35.i32[2] = *((_DWORD *)v7 + 29);
      v36.i64[0] = *((_QWORD *)v7 + 18);
      v36.i32[2] = *((_DWORD *)v7 + 38);
      v37.i32[1] = v132.i32[1];
      *(float *)&v38 = -v33;
      v39 = vaddq_f32(vmulq_n_f32(v34, -v28), vmulq_n_f32(vaddq_f32(v35, vmulq_n_f32(v36, *(float *)v132.i32)), v28 + 1.0));
      *((_DWORD *)v7 + 29) = v39.i32[2];
      v40 = vmulq_n_f32(vdivq_f32(vsubq_f32(v39, v35), (float32x4_t)vdupq_lane_s32(v132, 0)), -v29);
      v41 = vmulq_n_f32(v36, v29 + 1.0);
      v42 = (int8x16_t)vaddq_f32(v41, v40);
      *((_DWORD *)v7 + 38) = v42.i32[2];
      *(_QWORD *)((char *)v7 + 108) = v39.i64[0];
      *((_QWORD *)v7 + 18) = v42.i64[0];
      v43 = *(_QWORD **)(a1 + 200);
      v42.i64[0] = *v43;
      v41.i32[0] = a2[1].i32[0];
      *(float32x2_t *)v36.f32 = vmul_lane_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v43, 1);
      v42.i32[2] = *((_DWORD *)v43 + 2);
      v44 = *(float32x2_t *)((char *)v43 + 12);
      v37.i32[0] = *((_DWORD *)v43 + 5);
      v45 = (float32x2_t)v43[3];
      v46.i32[0] = *((_DWORD *)v43 + 8);
      *(float32x2_t *)v47.i8 = *a2;
      v47.i32[2] = v41.i32[0];
      v48 = a2[2];
      v49.i32[0] = a2[3].i32[0];
      v50 = a2[4];
      v51.i32[0] = a2[5].i32[0];
      v41.i32[0] = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v43), v44, v49), v45, v51).u32[0];
      v52 = vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(*a2, *(float32x2_t *)v43, 1), v48, v44, 1), v50, v45, 1);
      *(float32x2_t *)v39.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*a2, *(float *)&v42.i32[2]), v48, v37.f32[0]), v50, v46.f32[0]);
      v53 = vextq_s8(v42, v42, 8uLL);
      *(float32x2_t *)v133 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*a2, COERCE_FLOAT(*v43)), v48, v44.f32[0]), v50, v45.f32[0]);
      *(_DWORD *)&v133[8] = v41.i32[0];
      v134 = vmla_lane_f32(vmla_lane_f32(*(float32x2_t *)v36.f32, v49, v44, 1), v51, v45, 1).u32[0];
      *(float32x2_t *)&v133[12] = v52;
      v135 = *(float32x2_t *)v39.f32;
      v136 = vmla_f32(vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), *(float32x2_t *)v53.i8), v37, v49), v46, v51).u32[0];
      v39.i32[0] = *(_DWORD *)(a1 + 56);
      v53.i64[0] = *(_QWORD *)(a1 + 48);
      v54 = (float32x4_t)v53;
      v54.i32[2] = v39.i32[0];
      v130 = (int8x16_t)vmulq_n_f32(v54, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), *(float32x2_t *)v53.i8, 1), *(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32).f32[0]));
      sub_207DEB2BC((float32x4_t *)&v137, (float *)v133);
      v55.i32[0] = v137.i32[3];
      v56 = (int8x16_t)vmulq_n_f32((float32x4_t)v130, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)((char *)v137.i64 + 4), *(float32x2_t *)v130.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v130.i8, 1), *(float32x2_t *)((char *)v137.i64 + 4), 1), (float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL), v55).f32[0]);
      v57 = (float32x2_t)vextq_s8(v56, v56, 8uLL).u64[0];
      v58 = (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(vextq_s8(v137, v137, 4uLL), v56, 0xCuLL), 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmla_f32(vmul_f32(*(float32x2_t *)v137.i8, *(float32x2_t *)v137.i8), *(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v56.i8, 1), *(float32x2_t *)v56.i8, 1), v57, v57).f32[0]));
      v59 = vmulq_f32((float32x4_t)v58, (float32x4_t)v58);
      v60 = v59.f32[3];
      v61 = v59.f32[0] - v59.f32[1];
      v62 = (int32x4_t)vextq_s8(v58, v58, 0xCuLL);
      v63.i64[1] = v58.i64[1];
      v63.i64[0] = __PAIR64__(v58.u32[0], v58.u32[2]);
      v64 = (int8x16_t)vmulq_f32((float32x4_t)vuzp2q_s32(vuzp1q_s32((int32x4_t)v58, v62), v62), v63);
      v65 = (int8x16_t)vmulq_f32((float32x4_t)vzip1q_s32((int32x4_t)v58, (int32x4_t)v58), (float32x4_t)vzip2q_s32((int32x4_t)v58, vrev64q_s32((int32x4_t)v58)));
      v66 = v65;
      v66.i32[0] = vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1)).u32[0];
      v67 = (float32x4_t)vtrn1q_s32((int32x4_t)v64, (int32x4_t)vextq_s8(v66, v66, 0xCuLL));
      v68 = vsubq_f32((float32x4_t)v66, v67);
      v68.i32[1] = vaddq_f32(*(float32x4_t *)&v65, v67).i32[1];
      v65.i64[1] = 0x4000000040000000;
      v65.i64[0] = v59.u32[3] | 0x4000000000000000;
      v69 = vsubq_f32(v68, (float32x4_t)v65);
      v70 = (int8x16_t)vmulq_f32(v68, (float32x4_t)v65);
      v71 = (float32x4_t)vextq_s8(v64, v64, 8uLL);
      v72 = vsubq_f32((float32x4_t)v64, v71);
      v71.f32[0] = v61;
      v71.i32[2] = v66.i32[2];
      v73 = vaddq_f32((float32x4_t)v64, v71);
      v73.i32[3] = v72.i32[3];
      v72.i64[0] = vsubq_f32(v73, (float32x4_t)v65).u64[0];
      v74 = (int8x16_t)vmulq_f32(v73, (float32x4_t)v65);
      v75.f32[0] = v60 + (float)(v61 - *(float *)v64.i32);
      v76 = *(int8x16_t *)v133;
      v68.i32[0] = v134;
      v77.i32[0] = v136;
      v78 = *(float32x2_t *)v69.f32;
      v129 = v72.f32[0];
      v131 = (int8x16_t)v69;
      *(float32x2_t *)v65.i8 = vmul_n_f32(*(float32x2_t *)v133, v69.f32[0]);
      v69.i64[0] = vextq_s8(v70, v70, 8uLL).u64[0];
      v79 = (float32x4_t)v70;
      v80 = (float32x2_t)vextq_s8(v74, v74, 8uLL).u64[0];
      *(float32x2_t *)v65.i8 = vmla_laneq_f32(vmla_laneq_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)&v133[12], (float32x4_t)v70, 3), v135, (float32x4_t)v74, 2);
      v81 = (float32x4_t)v74;
      v70.i64[0] = vextq_s8(v76, v76, 8uLL).u64[0];
      v82 = v79;
      v127 = v81;
      v128 = v79;
      v78.i32[0] = vmla_f32(vmla_laneq_f32(vmul_f32(*(float32x2_t *)v70.i8, v78), *(float32x2_t *)v68.f32, v79, 3), v80, v77).u32[0];
      v83 = vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)v133, *(float32x2_t *)v79.f32, 1), *(float32x2_t *)&v133[12], v72.f32[0]), v135, v81, 3);
      *(float32x2_t *)v79.f32 = vmla_laneq_f32(vmla_f32(vmul_lane_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v79.f32, 1), *(float32x2_t *)v72.f32, *(float32x2_t *)v68.f32), v77, v81, 3);
      v126 = v75.i32[0];
      *(float32x2_t *)v72.f32 = vmla_n_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v133, v82, 2), *(float32x2_t *)&v133[12], *(float32x2_t *)v81.f32, 1), v135, v75.f32[0]);
      v76.i32[0] = v65.i32[1];
      sub_207DEF134(*(_QWORD *)(a1 + 200) + 36, (float32x2_t *)(*(_QWORD *)(a1 + 200) + 120), v65, (float32x4_t)v76, v78.f32[0], v83, v83.f32[1], *(double *)v79.i64, *(float32x2_t *)v72.f32, v72.f32[1], v84, v85, v86, v87, v88, v89, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v69.f32),
            *(float32x2_t *)v68.f32,
            *(float32x2_t *)v81.f32,
            1),
          v75,
          v77).i32[0],
        *(float *)v132.i32,
        v30,
        v31);
      v90.i32[0] = v128.i32[1];
      v91.i32[0] = v128.i32[3];
      v93.i32[0] = v127.i32[2];
      LODWORD(v92) = v127.i32[1];
      sub_207DEF134(*(_QWORD *)(a1 + 200) + 72, (float32x2_t *)(*(_QWORD *)(a1 + 200) + 132), v131, v90, v128.f32[2], v91, v129, v92, v93, v127.f32[3], v94, v95, v96, v97, v98, v99, v126, *(float *)v132.i32, v32,
        v38);
      v100 = *(_QWORD **)(a1 + 200);
      v101 = *(float32x2_t *)((char *)v100 + 36);
      v102.i32[0] = *((_DWORD *)v100 + 11);
      v103 = (float32x2_t)v100[6];
      v104.i32[0] = *((_DWORD *)v100 + 14);
      v105 = *(float32x2_t *)((char *)v100 + 60);
      v106.i32[0] = *((_DWORD *)v100 + 17);
      v107 = (float32x2_t)v100[9];
      v108.i32[0] = *((_DWORD *)v100 + 20);
      v109 = *(float32x2_t *)((char *)v100 + 84);
      v110.i32[0] = *((_DWORD *)v100 + 23);
      v111 = (float32x2_t)v100[12];
      v112.i32[0] = *((_DWORD *)v100 + 26);
      v113 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v101, v107.f32[0]), v103, v107, 1), v105, v108.f32[0]);
      v114 = vmla_f32(vmla_lane_f32(vmul_f32(v102, v107), v104, v107, 1), v108, v106);
      *(float32x2_t *)&v115 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v101, v109.f32[0]), v103, v109, 1), v105, v110.f32[0]);
      v116 = vmla_f32(vmla_lane_f32(vmul_f32(v102, v109), v104, v109, 1), v110, v106);
      v117 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v101, v111.f32[0]), v103, v111, 1), v105, v112.f32[0]);
      v118 = vmla_f32(vmla_lane_f32(vmul_f32(v102, v111), v104, v111, 1), v112, v106);
      v104.i32[0] = *((_DWORD *)v100 + 2);
      v119 = *(float32x2_t *)((char *)v100 + 12);
      v106.i32[0] = *((_DWORD *)v100 + 5);
      v120 = (float32x2_t)v100[3];
      v110.i32[0] = *((_DWORD *)v100 + 8);
      v112.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v114, *(float32x2_t *)v100), v116, *(float32x2_t *)v100, 1), v104, v118).u32[0];
      *v100 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v113, COERCE_FLOAT(*v100)), *(float32x2_t *)&v115, *(float32x2_t *)v100, 1), v117, v104.f32[0]);
      *((_DWORD *)v100 + 2) = v112.i32[0];
      *(float32x2_t *)((char *)v100 + 12) = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v113, v119.f32[0]), *(float32x2_t *)&v115, v119, 1), v117, v106.f32[0]);
      *((_DWORD *)v100 + 5) = vmla_f32(vmla_lane_f32(vmul_f32(v114, v119), v116, v119, 1), v106, v118).u32[0];
      v100[3] = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v113, v120.f32[0]), *(float32x2_t *)&v115, v120, 1), v117, v110.f32[0]);
      *((_DWORD *)v100 + 8) = vmla_f32(vmla_lane_f32(vmul_f32(v114, v120), v116, v120, 1), v110, v118).u32[0];
      v121 = *(_QWORD *)(a1 + 200);
      *(_DWORD *)(v121 + 36) = 1065353216;
      *(_QWORD *)(v121 + 40) = 0;
      *(_QWORD *)(v121 + 48) = 0x3F80000000000000;
      *(_QWORD *)(v121 + 56) = 0;
      *(_QWORD *)(v121 + 64) = 0x3F80000000000000;
      v122 = *(_QWORD *)(a1 + 200);
      *(_DWORD *)(v122 + 72) = 1065353216;
      *(_QWORD *)(v122 + 76) = 0;
      *(_QWORD *)(v122 + 84) = 0x3F80000000000000;
      *(_QWORD *)(v122 + 92) = 0;
      *(_QWORD *)(v122 + 100) = 0x3F80000000000000;
      v123 = *(__int128 **)(a1 + 200);
      v124 = *v123;
      HIDWORD(v115) = 0;
      LODWORD(v115) = HIDWORD(*v123);
      *(_QWORD *)((char *)&v115 + 4) = *((_QWORD *)v123 + 2);
      *(_QWORD *)&v125 = *((_QWORD *)v123 + 3);
      HIDWORD(v124) = 0;
      *((_QWORD *)&v125 + 1) = *((unsigned int *)v123 + 8);
      *(_OWORD *)(a3 + 16) = v115;
      *(_OWORD *)(a3 + 32) = v125;
      *(_OWORD *)a3 = v124;
      v11 = *((_DWORD *)v123 + 29);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)((char *)v123 + 108);
    }
    *(_DWORD *)(a3 + 56) = v11;
    *(_DWORD *)(a3 + 60) = 1065353216;
  }
  else
  {
    v12 = a2[1].i32[0];
    v13 = a2[3].i32[0];
    v14 = a2[2];
    v15 = a2[5].i32[0];
    v16 = a2[4];
    *(float32x2_t *)v7 = *a2;
    *((_DWORD *)v7 + 2) = v12;
    *(float32x2_t *)((char *)v7 + 12) = v14;
    *((_DWORD *)v7 + 5) = v13;
    *((float32x2_t *)v7 + 3) = v16;
    *((_DWORD *)v7 + 8) = v15;
    v17 = *(_QWORD *)(a1 + 200);
    *(_DWORD *)(v17 + 36) = 1065353216;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) = 0x3F80000000000000;
    *(_QWORD *)(v17 + 56) = 0;
    *(_QWORD *)(v17 + 64) = 0x3F80000000000000;
    v18 = *(_QWORD *)(a1 + 200);
    *(_DWORD *)(v18 + 72) = 1065353216;
    *(_QWORD *)(v18 + 76) = 0;
    *(_QWORD *)(v18 + 84) = 0x3F80000000000000;
    *(_QWORD *)(v18 + 92) = 0;
    *(_QWORD *)(v18 + 100) = 0x3F80000000000000;
    v19 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v19 + 120) = 0;
    *(_DWORD *)(v19 + 128) = 0;
    v20 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v20 + 132) = 0;
    *(_DWORD *)(v20 + 140) = 0;
    v21 = *(_QWORD *)(a1 + 200);
    v22 = a2[6];
    *(_DWORD *)(v21 + 116) = a2[7].i32[0];
    *(float32x2_t *)(v21 + 108) = v22;
    v23 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v23 + 144) = 0;
    *(_DWORD *)(v23 + 152) = 0;
    *(_BYTE *)(v23 + 156) = 1;
    v24 = *(_OWORD *)a2->f32;
    v25 = *(_OWORD *)a2[2].f32;
    v26 = *(_OWORD *)a2[6].f32;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)a2[4].f32;
    *(_OWORD *)(a3 + 48) = v26;
    *(_OWORD *)a3 = v24;
    *(_OWORD *)(a3 + 16) = v25;
  }
}

float32x4_t sub_207DF04F0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q3>, float32x4_t a6@<Q4>, float32x4_t a7@<Q6>)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x2_t v14;
  float32x2_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float cosval;
  float v22;
  __float2 v23;
  float32x2_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __float2 v29;
  float32x2_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float32x2_t v39;
  int8x16_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float v47;
  float v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  __int128 v69;
  int8x8_t v70;
  __int128 v71;
  int8x16_t v72;
  float32x4_t result;
  float v74;
  int8x16_t v75;
  float v76;
  int8x16_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x4_t v84;

  if (!*(_BYTE *)(a1 + 192))
    sub_207CA2A4C();
  *(double *)&v14 = (a3 - *(double *)(a1 + 184)) / *(float *)(a1 + 12);
  v9.f32[0] = *(double *)&v14;
  v15 = *(float32x2_t **)(a1 + 200);
  *(float32x2_t *)a6.f32 = v15[18];
  a6.i32[2] = v15[19].i32[0];
  *(float32x2_t *)a5.f32 = *(float32x2_t *)((char *)v15 + 108);
  a5.i32[2] = v15[14].i32[1];
  v14.i32[0] = v15[16].i32[0];
  *(float32x2_t *)a4.f32 = v15[15];
  a4.i32[2] = v14.i32[0];
  v16 = (int8x16_t)vmulq_n_f32(a4, v9.f32[0]);
  *(float32x2_t *)a7.f32 = *(float32x2_t *)((char *)v15 + 132);
  a7.i32[2] = v15[17].i32[1];
  v17 = (int8x16_t)vmulq_n_f32(a7, v9.f32[0]);
  v18 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), vmul_lane_f32(v9, *(float32x2_t *)a4.f32, 1), *(float32x2_t *)v16.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), vmul_f32(v14, v9));
  v83 = v9;
  v84 = a5;
  v81 = v17;
  v82 = a6;
  v80 = (float32x4_t)v16;
  if (v18.f32[0] >= 0.0061)
  {
    v22 = sqrtf(v18.f32[0]);
    v76 = v18.f32[0];
    v78 = a7;
    v23 = __sincosf_stret(v22);
    a7 = v78;
    v17 = v81;
    v9 = v83;
    cosval = v23.__cosval;
    v20 = v23.__sinval / v22;
    v19 = (float)(1.0 / v76) * (float)(1.0 - v23.__cosval);
  }
  else
  {
    v19 = 0.5 - (float)(v18.f32[0] * (float)((float)(v18.f32[0] / -720.0) + 0.041667));
    v20 = 1.0
        - (float)(v18.f32[0]
                * (float)(0.16667 - (float)(v18.f32[0] * (float)((float)(v18.f32[0] / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v18.f32[0] * v19);
  }
  *(float32x2_t *)v12.i8 = *(float32x2_t *)((char *)v15 + 36);
  v12.i32[2] = v15[5].i32[1];
  *(float32x2_t *)v11.i8 = v15[6];
  v11.i32[2] = v15[7].i32[0];
  *(float32x2_t *)v10.i8 = *(float32x2_t *)((char *)v15 + 60);
  v10.i32[2] = v15[8].i32[1];
  v24 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
  v25 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), vmul_lane_f32(v9, *(float32x2_t *)a7.f32, 1), *(float32x2_t *)v17.i8, 1), v24, vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL), v9)).f32[0];
  if (v25 >= 0.0061)
  {
    v28 = sqrtf(v25);
    v77 = v11;
    v79 = v10;
    v74 = v25;
    v75 = v12;
    v29 = __sincosf_stret(v28);
    v24.f32[0] = v29.__cosval;
    v12 = v75;
    v11 = v77;
    v10 = v79;
    v17 = v81;
    v9 = v83;
    v27 = v29.__sinval / v28;
    v26 = (float)(1.0 / v74) * (float)(1.0 - v29.__cosval);
  }
  else
  {
    v26 = 0.5 - (float)(v25 * (float)((float)(v25 / -720.0) + 0.041667));
    v27 = 1.0 - (float)(v25 * (float)(0.16667 - (float)(v25 * (float)((float)(v25 / -5040.0) + 0.0083333))));
    v24.f32[0] = 1.0 - (float)(v25 * v26);
  }
  v30.f32[0] = cosval + (float)((float)(v19 * v80.f32[0]) * v80.f32[0]);
  v31 = vmuls_lane_f32(v19 * v80.f32[0], *(float32x2_t *)v80.f32, 1);
  v32 = vmuls_lane_f32(v20, v80, 2);
  v30.f32[1] = v31 + v32;
  v33 = vmuls_lane_f32(v19 * v80.f32[0], v80, 2);
  v34 = vmuls_lane_f32(v20, *(float32x2_t *)v80.f32, 1);
  v18.f32[0] = v33 - v34;
  v35.f32[0] = v31 - v32;
  v36 = vmuls_lane_f32(v19, *(float32x2_t *)v80.f32, 1);
  v35.f32[1] = cosval + vmuls_lane_f32(v36, *(float32x2_t *)v80.f32, 1);
  v37 = vmuls_lane_f32(v36, v80, 2);
  v7.f32[0] = (float)(v20 * v80.f32[0]) + v37;
  v38.f32[0] = v34 + v33;
  v38.f32[1] = v37 - (float)(v20 * v80.f32[0]);
  v8.f32[0] = cosval + vmuls_lane_f32(vmuls_lane_f32(v19, v80, 2), v80, 2);
  v39 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v30, *(float *)v12.i32), v35, *(float32x2_t *)v12.i8, 1), v38, (float32x4_t)v12, 2);
  v40 = vextq_s8(v12, v12, 8uLL);
  v41 = vmla_f32(vmla_lane_f32(vmul_f32(v18, *(float32x2_t *)v12.i8), v7, *(float32x2_t *)v12.i8, 1), *(float32x2_t *)v40.i8, v8);
  *(float32x2_t *)v40.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v30, *(float *)v11.i32), v35, *(float32x2_t *)v11.i8, 1), v38, (float32x4_t)v11, 2);
  v42 = vmla_f32(vmla_lane_f32(vmul_f32(v18, *(float32x2_t *)v11.i8), v7, *(float32x2_t *)v11.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v8);
  v43 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v30, *(float *)v10.i32), v35, *(float32x2_t *)v10.i8, 1), v38, (float32x4_t)v10, 2);
  v44 = vmla_f32(vmla_lane_f32(vmul_f32(v18, *(float32x2_t *)v10.i8), v7, *(float32x2_t *)v10.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), v8);
  v45 = vmulq_n_f32(v82, v9.f32[0]);
  v35.f32[0] = v26 * *(float *)v17.i32;
  v7.f32[0] = vmuls_lane_f32(v26, *(float32x2_t *)v17.i8, 1);
  v38.f32[0] = vmuls_lane_f32(v26, (float32x4_t)v17, 2);
  v46.f32[0] = v24.f32[0] + (float)((float)(v26 * *(float *)v17.i32) * *(float *)v17.i32);
  v8.f32[0] = v24.f32[0] + vmuls_lane_f32(v7.f32[0], *(float32x2_t *)v17.i8, 1);
  v24.f32[0] = v24.f32[0] + vmuls_lane_f32(v38.f32[0], (float32x4_t)v17, 2);
  v38.f32[0] = vmuls_lane_f32(v35.f32[0], *(float32x2_t *)v17.i8, 1);
  v9.f32[0] = vmuls_lane_f32(v35.f32[0], (float32x4_t)v17, 2);
  v7.f32[0] = vmuls_lane_f32(v7.f32[0], (float32x4_t)v17, 2);
  v47 = v27 * *(float *)v17.i32;
  *(float *)v10.i32 = vmuls_lane_f32(v27, *(float32x2_t *)v17.i8, 1);
  v48 = vmuls_lane_f32(v27, (float32x4_t)v17, 2);
  v35.f32[0] = v38.f32[0] - v48;
  v49.f32[0] = *(float *)v10.i32 + v9.f32[0];
  v46.f32[1] = v38.f32[0] + v48;
  v9.f32[0] = v9.f32[0] - *(float *)v10.i32;
  v35.i32[1] = v8.i32[0];
  v49.f32[1] = v7.f32[0] - v47;
  v7.f32[0] = v47 + v7.f32[0];
  v50 = v15[9];
  v8.i32[0] = v15[10].i32[0];
  v51 = *(float32x2_t *)((char *)v15 + 84);
  v10.i32[0] = v15[11].i32[1];
  v52 = v15[12];
  v53 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v46, v50.f32[0]), v35, v50, 1), v49, v8.f32[0]);
  v54 = vmla_f32(vmla_lane_f32(vmul_f32(v9, v50), v7, v50, 1), v8, v24);
  v55 = vmla_lane_f32(vmul_n_f32(v46, v51.f32[0]), v35, v51, 1);
  v56 = vmla_lane_f32(vmul_f32(v9, v51), v7, v51, 1);
  v51.i32[0] = v15[13].i32[0];
  v57 = vmla_n_f32(v55, v49, *(float *)v10.i32);
  v58 = vmla_f32(v56, *(float32x2_t *)v10.i8, v24);
  v59 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v46, v52.f32[0]), v35, v52, 1), v49, v51.f32[0]);
  v60 = vmla_f32(vmla_lane_f32(vmul_f32(v9, v52), v7, v52, 1), v51, v24);
  v61 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v39, v53.f32[0]), *(float32x2_t *)v40.i8, v53, 1), v43, v54.f32[0]);
  v62 = vmla_f32(vmla_lane_f32(vmul_f32(v41, v53), v42, v53, 1), v54, v44);
  v63 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v39, v57.f32[0]), *(float32x2_t *)v40.i8, v57, 1), v43, v58.f32[0]);
  v64 = vmla_f32(vmla_lane_f32(vmul_f32(v41, v57), v42, v57, 1), v58, v44);
  v65 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v39, v59.f32[0]), *(float32x2_t *)v40.i8, v59, 1), v43, v60.f32[0]);
  v66 = vmla_f32(vmla_lane_f32(vmul_f32(v41, v59), v42, v59, 1), v60, v44);
  v42.i32[0] = v15[1].i32[0];
  v67 = *(float32x2_t *)((char *)v15 + 12);
  v44.i32[0] = v15[2].i32[1];
  v68 = v15[3];
  v60.i32[0] = v15[4].i32[0];
  *(float32x2_t *)&v69 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v61, COERCE_FLOAT(*v15)), v63, *v15, 1), v65, v42.f32[0]);
  *((_QWORD *)&v69 + 1) = vmla_f32(vmla_lane_f32(vmul_f32(v62, *v15), v64, *v15, 1), v42, v66).u32[0];
  *(float32x2_t *)v40.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v61, v67.f32[0]), v63, v67, 1), v65, v44.f32[0]);
  v70 = (int8x8_t)vmla_f32(vmla_lane_f32(vmul_f32(v62, v67), v64, v67, 1), v44, v66);
  *(float32x2_t *)&v71 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v61, v68.f32[0]), v63, v68, 1), v65, v60.f32[0]);
  v62.i32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v62, v68), v64, v68, 1), v60, v66).u32[0];
  *(int8x8_t *)((char *)v40.i64 + 4) = vext_s8(*(int8x8_t *)v40.i8, v70, 4uLL);
  v72 = *(int8x16_t *)(a2 + 32);
  v72.i32[3] = 0;
  *((_QWORD *)&v71 + 1) = __PAIR64__(vextq_s8(v72, v72, 8uLL).u32[1], v62.u32[0]);
  *(int8x16_t *)(a2 + 16) = v40;
  *(_OWORD *)(a2 + 32) = v71;
  result = vaddq_f32(v84, v45);
  *(_OWORD *)a2 = v69;
  *(_QWORD *)(a2 + 48) = result.i64[0];
  *(_DWORD *)(a2 + 56) = result.i32[2];
  *(_DWORD *)(a2 + 60) = 1065353216;
  return result;
}

void sub_207DF09F4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  int32x2_t v41;
  float v42;
  float v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float v49;
  float32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  int8x16_t v58;
  float32x2_t v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int32x2_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  float32x4_t v85;

  v8 = *a2;
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v11 = a2[4];
  v12 = *((_DWORD *)a2 + 10);
  v80 = *((_DWORD *)a2 + 2);
  v79 = v8;
  v82 = v10;
  v81 = v9;
  v84 = v12;
  v83 = v11;
  sub_207DEB2BC(&v85, (float *)&v79);
  v13.i64[0] = a2[6];
  v13.i32[2] = *((_DWORD *)a2 + 14);
  v14 = v85;
  v15 = *(_QWORD *)(a1 + 200);
  if (*(_BYTE *)(v15 + 56))
  {
    if (a4 == 0.0)
    {
      v16 = *(int8x16_t *)(v15 + 24);
      v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1);
      v18 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
      v17.f32[0] = 1.0
                 / sqrtf(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8), v17, *(float32x2_t *)v16.i8, 1), v18, v18), (float32x2_t)vdup_laneq_s32((int32x4_t)v16, 3), (float32x4_t)v16, 3).f32[0]);
      v19 = (int8x16_t)vmulq_n_f32((float32x4_t)v16, v17.f32[0]);
      v20 = (int8x16_t)vmulq_n_f32((float32x4_t)v19, 1.0/ sqrtf(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8), vmul_lane_f32(v17, *(float32x2_t *)v16.i8, 1), *(float32x2_t *)v19.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), vmul_f32(v18, v17)), vmul_laneq_f32(v17, (float32x4_t)v16, 3), (float32x4_t)v19, 3).f32[0]));
      v21 = vmulq_f32((float32x4_t)v20, (float32x4_t)v20);
      v22 = v21.f32[0] - v21.f32[1];
      v23 = (int32x4_t)vextq_s8(v20, v20, 0xCuLL);
      v24.i64[1] = v20.i64[1];
      v24.i64[0] = __PAIR64__(v20.u32[0], v20.u32[2]);
      v25 = (int8x16_t)vmulq_f32((float32x4_t)vuzp2q_s32(vuzp1q_s32((int32x4_t)v20, v23), v23), v24);
      v26 = vmulq_f32((float32x4_t)vzip1q_s32((int32x4_t)v20, (int32x4_t)v20), (float32x4_t)vzip2q_s32((int32x4_t)v20, vrev64q_s32((int32x4_t)v20)));
      v27 = (int8x16_t)v26;
      v27.i32[0] = vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)).u32[0];
      v28 = (float32x4_t)vtrn1q_s32((int32x4_t)v25, (int32x4_t)vextq_s8(v27, v27, 0xCuLL));
      v29 = vsubq_f32((float32x4_t)v27, v28);
      v30 = vaddq_f32(v26, v28);
      v28.i64[1] = 0x4000000040000000;
      v28.i64[0] = v21.u32[3] | 0x4000000000000000;
      v21.i32[0] = vsubq_f32(v29, v28).u32[0];
      v29.i32[1] = v30.i32[1];
      v31 = vaddq_f32(v29, v29);
      v32 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
      v33 = vsubq_f32((float32x4_t)v25, v32);
      v32.f32[0] = v22;
      v32.i32[2] = v27.i32[2];
      v34 = vaddq_f32((float32x4_t)v25, v32);
      v28.i32[0] = vsubq_f32(v34, v28).u32[0];
      v34.i32[3] = v33.i32[3];
      v35 = vaddq_f32(v34, v34);
      v36 = v22 - *(float *)v25.i32;
      v25.i32[3] = 0;
      v32.i64[0] = __PAIR64__(v28.u32[0], v31.u32[3]);
      v31.i32[0] = v21.i32[0];
      v31.i32[3] = 0;
      v32.i64[1] = v35.u32[1];
      v25.i64[0] = v35.i64[1];
      *(float *)&v25.i32[2] = v21.f32[3] + v36;
      *(float32x4_t *)(a3 + 16) = v32;
      *(int8x16_t *)(a3 + 32) = v25;
      *(float32x4_t *)a3 = v31;
      v37 = *(_DWORD *)(v15 + 8);
      v38 = *(_QWORD *)v15;
    }
    else
    {
      v76 = v13;
      v77 = (int8x16_t)v85;
      *(double *)&v41 = a4 / *(float *)(a1 + 12);
      *(float *)v41.i32 = *(double *)v41.i32;
      v78 = v41;
      v42 = expm1f(-(float)(*(float *)v41.i32 * *(float *)(a1 + 16)));
      v43 = expm1f(-(float)(*(float *)v78.i32 * *(float *)(a1 + 20)));
      v44 = -v43;
      v45.i64[0] = *(_QWORD *)v15;
      v45.i32[2] = *(_DWORD *)(v15 + 8);
      v46.i64[0] = *(_QWORD *)(v15 + 12);
      v46.i32[2] = *(_DWORD *)(v15 + 20);
      v47 = vaddq_f32(vmulq_n_f32(v76, -v42), vmulq_n_f32(vaddq_f32(v45, vmulq_n_f32(v46, *(float *)v78.i32)), v42 + 1.0));
      *(_DWORD *)(v15 + 8) = v47.i32[2];
      v48 = (float32x4_t)vdupq_lane_s32(v78, 0);
      v49 = v43 + 1.0;
      v50 = vaddq_f32(vmulq_n_f32(v46, v49), vmulq_n_f32(vdivq_f32(vsubq_f32(v47, v45), v48), v44));
      *(_DWORD *)(v15 + 20) = v50.i32[2];
      *(_QWORD *)v15 = v47.i64[0];
      *(_QWORD *)(v15 + 12) = v50.i64[0];
      v51 = *(_QWORD *)(a1 + 200);
      v52 = (float32x4_t)vextq_s8(v77, v77, 8uLL);
      v53 = *(int8x16_t *)(v51 + 24);
      *(float32x2_t *)v47.f32 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v53.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), *(float32x2_t *)v77.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL), *(float32x2_t *)v52.f32), (float32x2_t)vdup_laneq_s32((int32x4_t)v53, 3), (float32x4_t)v77, 3);
      v52.i32[0] = 0;
      v54 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v52, v47), 0), (int8x16_t)vnegq_f32((float32x4_t)v77), v77);
      v55 = *(float32x4_t *)(v51 + 40);
      v56 = vmlaq_n_f32(vmulq_n_f32(v54, -v42), vmlaq_n_f32((float32x4_t)v53, v55, *(float *)v78.i32), v42 + 1.0);
      *(float32x4_t *)(v51 + 24) = v56;
      *(float32x4_t *)(v51 + 40) = vmlaq_n_f32(vmulq_n_f32(vdivq_f32(vsubq_f32(v56, (float32x4_t)v53), v48), v44), v55, v49);
      v57 = *(_QWORD *)(a1 + 200);
      v58 = *(int8x16_t *)(v57 + 24);
      v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 1);
      v56.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
      v59.f32[0] = 1.0
                 / sqrtf(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v58.i8), v59, *(float32x2_t *)v58.i8, 1), *(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), (float32x2_t)vdup_laneq_s32((int32x4_t)v58, 3), (float32x4_t)v58, 3).f32[0]);
      v60 = (int8x16_t)vmulq_n_f32((float32x4_t)v58, v59.f32[0]);
      v61 = (int8x16_t)vmulq_n_f32((float32x4_t)v60, 1.0/ sqrtf(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), vmul_lane_f32(v59, *(float32x2_t *)v58.i8, 1), *(float32x2_t *)v60.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), vmul_f32(*(float32x2_t *)v56.f32, v59)), vmul_laneq_f32(v59, (float32x4_t)v58, 3), (float32x4_t)v60, 3).f32[0]));
      v62 = vmulq_f32((float32x4_t)v61, (float32x4_t)v61);
      v59.f32[0] = v62.f32[0] - v62.f32[1];
      v63 = (int32x4_t)vextq_s8(v61, v61, 0xCuLL);
      v64.i64[1] = v61.i64[1];
      v64.i64[0] = __PAIR64__(v61.u32[0], v61.u32[2]);
      v65 = (int8x16_t)vmulq_f32((float32x4_t)vuzp2q_s32(vuzp1q_s32((int32x4_t)v61, v63), v63), v64);
      v66 = vmulq_f32((float32x4_t)vzip1q_s32((int32x4_t)v61, (int32x4_t)v61), (float32x4_t)vzip2q_s32((int32x4_t)v61, vrev64q_s32((int32x4_t)v61)));
      v67 = (int8x16_t)v66;
      v67.i32[0] = vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1)).u32[0];
      v68 = (float32x4_t)vtrn1q_s32((int32x4_t)v65, (int32x4_t)vextq_s8(v67, v67, 0xCuLL));
      v69 = vsubq_f32((float32x4_t)v67, v68);
      v70 = vaddq_f32(v66, v68);
      v68.i64[1] = 0x4000000040000000;
      v68.i64[0] = v62.u32[3] | 0x4000000000000000;
      v62.i32[0] = vsubq_f32(v69, v68).u32[0];
      v69.i32[1] = v70.i32[1];
      v71 = vaddq_f32(v69, v69);
      v72 = (float32x4_t)vextq_s8(v65, v65, 8uLL);
      v73 = vsubq_f32((float32x4_t)v65, v72);
      v72.i32[0] = v59.i32[0];
      v72.i32[2] = v67.i32[2];
      v74 = vaddq_f32((float32x4_t)v65, v72);
      v68.i32[0] = vsubq_f32(v74, v68).u32[0];
      v74.i32[3] = v73.i32[3];
      v75 = vaddq_f32(v74, v74);
      v59.f32[0] = v59.f32[0] - *(float *)v65.i32;
      v65.i32[3] = 0;
      v72.i64[0] = __PAIR64__(v68.u32[0], v71.u32[3]);
      v71.i32[0] = v62.i32[0];
      v71.i32[3] = 0;
      v72.i64[1] = v75.u32[1];
      v65.i64[0] = v75.i64[1];
      *(float *)&v65.i32[2] = v62.f32[3] + v59.f32[0];
      *(float32x4_t *)(a3 + 16) = v72;
      *(int8x16_t *)(a3 + 32) = v65;
      *(float32x4_t *)a3 = v71;
      v37 = *(_DWORD *)(v57 + 8);
      v38 = *(_QWORD *)v57;
    }
    *(_QWORD *)(a3 + 48) = v38;
    *(_DWORD *)(a3 + 56) = v37;
    *(_DWORD *)(a3 + 60) = 1065353216;
  }
  else
  {
    *(_DWORD *)(v15 + 8) = v13.i32[2];
    *(_QWORD *)v15 = v13.i64[0];
    *(float32x4_t *)(*(_QWORD *)(a1 + 200) + 24) = v14;
    *(_BYTE *)(*(_QWORD *)(a1 + 200) + 56) = 1;
    v39 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v39;
    v40 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a3 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a3 + 48) = v40;
  }
}

float32x4_t sub_207DF0E64@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v3;
  uint64_t v4;
  int8x16_t v5;
  float32x2_t v6;
  float32x2_t v7;
  int8x16_t v8;
  float32x2_t v9;
  int8x16_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unsigned __int32 v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t result;

  if (!*(_BYTE *)(a1 + 192))
    sub_207CA2A4C();
  v3 = (a3 - *(double *)(a1 + 184)) / *(float *)(a1 + 12);
  *(float *)&v3 = v3;
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(int8x16_t *)(v4 + 24);
  v6 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1);
  v7 = (float32x2_t)vdup_laneq_s32((int32x4_t)v5, 3);
  v8 = *(int8x16_t *)(v4 + 40);
  v9 = (float32x2_t)vextq_s8(v5, v5, 8uLL).u64[0];
  v10 = (int8x16_t)vmlaq_n_f32((float32x4_t)v5, (float32x4_t)v8, *(float *)&v3);
  v11 = vmla_lane_f32(v6, *(float32x2_t *)&v3, *(float32x2_t *)v8.i8, 1);
  v12 = vmla_f32(v9, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), *(float32x2_t *)&v3);
  v13 = vmla_laneq_f32(v7, *(float32x2_t *)&v3, (float32x4_t)v8, 3);
  *(float32x2_t *)v8.i8 = vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), v11, *(float32x2_t *)v10.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), v12), v13, (float32x4_t)v10, 3);
  *(float *)v8.i32 = 1.0 / sqrtf(*(float *)v8.i32);
  v14 = (int8x16_t)vmulq_n_f32((float32x4_t)v10, *(float *)v8.i32);
  v15 = (int8x16_t)vmulq_n_f32((float32x4_t)v14, 1.0/ sqrtf(vmla_laneq_f32(vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v8.i8), *(float32x2_t *)v14.i8), vmul_f32(v11, *(float32x2_t *)v8.i8), *(float32x2_t *)v14.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), vmul_f32(v12, *(float32x2_t *)v8.i8)), vmul_f32(v13, *(float32x2_t *)v8.i8), (float32x4_t)v14, 3).f32[0]));
  v16 = vmulq_f32((float32x4_t)v15, (float32x4_t)v15);
  v17 = (int32x4_t)vextq_s8(v15, v15, 0xCuLL);
  v18.i64[1] = v15.i64[1];
  v18.i64[0] = __PAIR64__(v15.u32[0], v15.u32[2]);
  v19 = (int8x16_t)vmulq_f32((float32x4_t)vuzp2q_s32(vuzp1q_s32((int32x4_t)v15, v17), v17), v18);
  v20 = vmulq_f32((float32x4_t)vzip1q_s32((int32x4_t)v15, (int32x4_t)v15), (float32x4_t)vzip2q_s32((int32x4_t)v15, vrev64q_s32((int32x4_t)v15)));
  v21 = (int8x16_t)v20;
  v21.i32[0] = vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)).u32[0];
  v22 = (float32x4_t)vtrn1q_s32((int32x4_t)v19, (int32x4_t)vextq_s8(v21, v21, 0xCuLL));
  v23 = vsubq_f32((float32x4_t)v21, v22);
  v24 = vaddq_f32(v20, v22);
  v22.i64[1] = 0x4000000040000000;
  v22.i64[0] = v16.u32[3] | 0x4000000000000000;
  v25 = vsubq_f32(v23, v22).u32[0];
  v23.i32[1] = v24.i32[1];
  v26 = (float32x4_t)vextq_s8(v19, v19, 8uLL);
  v27 = vsubq_f32((float32x4_t)v19, v26);
  v26.f32[0] = v16.f32[0] - v16.f32[1];
  v26.i32[2] = v21.i32[2];
  v21.i64[0] = *(_QWORD *)(v4 + 12);
  v21.i32[2] = *(_DWORD *)(v4 + 20);
  v28 = vmulq_n_f32((float32x4_t)v21, *(float *)&v3);
  v21.i64[0] = *(_QWORD *)v4;
  v21.i32[2] = *(_DWORD *)(v4 + 8);
  v29 = vaddq_f32(v23, v23);
  v30 = vaddq_f32((float32x4_t)v19, v26);
  v22.i32[0] = vsubq_f32(v30, v22).u32[0];
  v30.i32[3] = v27.i32[3];
  v31 = vaddq_f32(v30, v30);
  v24.f32[0] = v16.f32[3] + (float)((float)(v16.f32[0] - v16.f32[1]) - *(float *)v19.i32);
  v19.i64[0] = __PAIR64__(v22.u32[0], v29.u32[3]);
  v29.i32[0] = v25;
  v29.i32[3] = 0;
  v19.i64[1] = v31.u32[1];
  v16.i64[0] = v31.i64[1];
  v16.i64[1] = v24.u32[0];
  *(int8x16_t *)(a2 + 16) = v19;
  *(float32x4_t *)(a2 + 32) = v16;
  result = vaddq_f32((float32x4_t)v21, v28);
  *(float32x4_t *)a2 = v29;
  *(_QWORD *)(a2 + 48) = result.i64[0];
  *(_DWORD *)(a2 + 56) = result.i32[2];
  *(_DWORD *)(a2 + 60) = 1065353216;
  return result;
}

uint64_t sub_207DF1014(uint64_t a1)
{
  char *v7;
  void ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int32x2_t v13;
  float v14;
  char *v15;
  int v16;
  int64_t v17;
  size_t v18;
  size_t v19;
  double v20;
  size_t v21;
  size_t v22;
  double v23;
  std::string *p_b;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  void *p_p;
  uint64_t v30;
  uint64_t v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  float v53;
  _QWORD *v54;
  float v55;
  float v56;
  void *v57;
  _QWORD *v58;
  float v59;
  float v60;
  void *v61;
  _QWORD *v62;
  float v63;
  float v64;
  void *v65;
  float v67;
  int32x2_t v68;
  int v69;
  void *__p;
  size_t v71;
  int64_t v72;
  std::string __b;
  std::string v74;
  void *v75[2];
  int64_t v76;
  _QWORD v77[2];
  _BYTE v78[408];
  _QWORD v79[21];

  v79[19] = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 8) = 4;
  *(_OWORD *)(a1 + 12) = xmmword_208232BD0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 28) = _Q0;
  *(_OWORD *)(a1 + 44) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 60) = xmmword_208232BC0;
  *(_DWORD *)(a1 + 76) = 1042536202;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 1042536202;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)a1 = off_24C0758E0;
  v7 = (char *)operator new(0x58uLL);
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)(a1 + 200) = v7 + 24;
  *(_QWORD *)(a1 + 208) = v7;
  v8 = (void ***)(a1 + 200);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_24C075D10;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *((_DWORD *)v7 + 13) = 1065353216;
  *((_DWORD *)v7 + 17) = 1065353216;
  *((_DWORD *)v7 + 21) = 1065353216;
  v68 = vdup_n_s32(0x3B03126Fu);
  v69 = 990057071;
  v67 = 2.0;
  sub_207DF1904(v77);
  if (!*(_DWORD *)&v78[*(_QWORD *)(v77[0] - 24) + 16])
  {
    v9 = MEMORY[0x20BD02230](v77, &v68);
    v10 = MEMORY[0x20BD02230](v9, &v68.u8[4]);
    v11 = MEMORY[0x20BD02230](v10, &v69);
    MEMORY[0x20BD02230](v11, &v67);
  }
  v12 = sub_207CBAB98(MEMORY[0x24BEDB318], (uint64_t)"odt_kf_params meas_sigmas: ", 27);
  v13 = v68;
  v14 = *(float *)&v69;
  v15 = (char *)v12 + *(_QWORD *)(*v12 - 24);
  v16 = *((_DWORD *)v15 + 2);
  v18 = *((_QWORD *)v15 + 2);
  v17 = *((_QWORD *)v15 + 3);
  if (v17)
  {
    if (v17 <= (uint64_t)(v18 + 2))
      v19 = v18 + 2;
    else
      v19 = v17;
    v20 = __exp10((double)-(uint64_t)v18);
    v21 = v19 + ~v18;
    v22 = v21 - 1;
    if (v21 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v23 = v20;
    if (v22 >= 0x17)
    {
      v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v25 = v22 | 7;
      v26 = v25 + 1;
      p_b = (std::string *)operator new(v25 + 1);
      __b.__r_.__value_.__l.__size_ = v21 - 1;
      __b.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v21 - 1;
      p_b = &__b;
      if (v21 == 1)
      {
        LODWORD(v21) = 1;
        goto LABEL_16;
      }
    }
  }
  else
  {
    v23 = __exp10((double)-(uint64_t)v18);
    v22 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v21) = 4;
  }
  memset(p_b, 32, v22);
LABEL_16:
  p_b->__r_.__value_.__s.__data_[v22] = 0;
  v27 = std::string::append(&__b, "0 ", 2uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v18 >= 0x17)
  {
    v30 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v30 = v18 | 7;
    v31 = v30 + 1;
    p_p = operator new(v30 + 1);
    v71 = v18;
    v72 = v31 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_23;
  }
  HIBYTE(v72) = v18;
  p_p = &__p;
  if (v18)
LABEL_23:
    memset(p_p, 32, v18);
  *((_BYTE *)p_p + v18) = 0;
  if (v72 >= 0)
    v32 = (const std::string::value_type *)&__p;
  else
    v32 = (const std::string::value_type *)__p;
  if (v72 >= 0)
    v33 = HIBYTE(v72);
  else
    v33 = v71;
  v34 = std::string::append(&v74, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v76 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)v75 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v72) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_45:
    operator delete(v74.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_46;
  }
  operator delete(__p);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_45;
LABEL_32:
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_46:
  operator delete(__b.__r_.__value_.__l.__data_);
LABEL_33:
  *(uint64_t *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 0;
  v74.__r_.__value_.__s.__data_[0] = 91;
  sub_207CBAB98(v12, (uint64_t)&v74, 1);
  v36 = v12 + 1;
  v38 = v12 + 2;
  v37 = *v12;
  v39 = (int)v21 + (int)v18 + 1;
  v40 = (int)v18 - 3;
  v41 = (char *)v12 + *(_QWORD *)(*v12 - 24);
  if ((v41[9] & 1) != 0)
  {
    if (*(float *)v13.i32 != 0.0)
    {
      *((_QWORD *)v41 + 3) = v39;
      *(_DWORD *)((char *)v36 + *(_QWORD *)(v37 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v37 - 24)) = v40;
      std::ostream::operator<<();
      goto LABEL_48;
    }
  }
  else if (fabs(*(float *)v13.i32) >= v23)
  {
    *((_QWORD *)v41 + 3) = v39;
    *(_DWORD *)((char *)v36 + *(_QWORD *)(v37 - 24)) = *(_DWORD *)((_BYTE *)v36 + *(_QWORD *)(v37 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v36 + *(_QWORD *)(v37 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v38 + *(_QWORD *)(v37 - 24)) = (int)v18;
    std::ostream::operator<<();
    goto LABEL_48;
  }
  if (v76 >= 0)
    v42 = v75;
  else
    v42 = (void **)v75[0];
  if (v76 >= 0)
    v43 = HIBYTE(v76);
  else
    v43 = (uint64_t)v75[1];
  sub_207CBAB98(v12, (uint64_t)v42, v43);
LABEL_48:
  v74.__r_.__value_.__s.__data_[0] = 44;
  sub_207CBAB98(v12, (uint64_t)&v74, 1);
  v44 = *v12;
  v45 = (char *)v12 + *(_QWORD *)(*v12 - 24);
  if ((v45[9] & 1) != 0)
  {
    if (*(float *)&v13.i32[1] != 0.0)
    {
      *((_QWORD *)v45 + 3) = v39;
      *(_DWORD *)((char *)v36 + *(_QWORD *)(v44 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v44 - 24)) = v40;
      std::ostream::operator<<();
      goto LABEL_60;
    }
  }
  else if (fabs(*(float *)&v13.i32[1]) >= v23)
  {
    *((_QWORD *)v45 + 3) = v39;
    *(_DWORD *)((char *)v36 + *(_QWORD *)(v44 - 24)) = *(_DWORD *)((_BYTE *)v36 + *(_QWORD *)(v44 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v36 + *(_QWORD *)(v44 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v38 + *(_QWORD *)(v44 - 24)) = (int)v18;
    std::ostream::operator<<();
    goto LABEL_60;
  }
  if (v76 >= 0)
    v46 = v75;
  else
    v46 = (void **)v75[0];
  if (v76 >= 0)
    v47 = HIBYTE(v76);
  else
    v47 = (uint64_t)v75[1];
  sub_207CBAB98(v12, (uint64_t)v46, v47);
LABEL_60:
  v74.__r_.__value_.__s.__data_[0] = 44;
  sub_207CBAB98(v12, (uint64_t)&v74, 1);
  v48 = *v12;
  v49 = (char *)v12 + *(_QWORD *)(*v12 - 24);
  if ((v49[9] & 1) != 0)
  {
    if (v14 != 0.0)
    {
      *((_QWORD *)v49 + 3) = v39;
      *(_DWORD *)((char *)v36 + *(_QWORD *)(v48 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v48 - 24)) = v40;
      std::ostream::operator<<();
      goto LABEL_72;
    }
  }
  else if (fabs(v14) >= v23)
  {
    *((_QWORD *)v49 + 3) = v39;
    *(_DWORD *)((char *)v36 + *(_QWORD *)(v48 - 24)) = *(_DWORD *)((_BYTE *)v36 + *(_QWORD *)(v48 - 24)) & 0xFFFFFEFB | 4;
    *(_DWORD *)((char *)v36 + *(_QWORD *)(v48 - 24)) |= 0x400u;
    *(_QWORD *)((char *)v38 + *(_QWORD *)(v48 - 24)) = (int)v18;
    std::ostream::operator<<();
    goto LABEL_72;
  }
  if (v76 >= 0)
    v50 = v75;
  else
    v50 = (void **)v75[0];
  if (v76 >= 0)
    v51 = HIBYTE(v76);
  else
    v51 = (uint64_t)v75[1];
  sub_207CBAB98(v12, (uint64_t)v50, v51);
LABEL_72:
  sub_207CBAB98(v12, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = v16;
  if (SHIBYTE(v76) < 0)
    operator delete(v75[0]);
  sub_207CBAB98(v12, (uint64_t)" accel_sigma: ", 14);
  v52 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v75[0]) = 10;
  sub_207CBAB98(v52, (uint64_t)v75, 1);
  v53 = v67;
  if (v67 > 0.0)
  {
    v54 = operator new(0x28uLL);
    v55 = *(float *)v68.i32;
    *v54 = 0;
    v54[3] = 1065353216;
    v56 = v55 * v55;
    *(_QWORD *)((char *)v54 + 12) = 0;
    *((float *)v54 + 2) = v56 * 4.0;
    *((float *)v54 + 5) = v56 * 1000.0;
    *((float *)v54 + 8) = v56;
    *((float *)v54 + 9) = v53;
    v57 = **v8;
    **v8 = v54;
    if (v57)
    {
      operator delete(v57);
      v53 = v67;
    }
    if (v53 > 0.0)
    {
      v58 = operator new(0x28uLL);
      v59 = *(float *)&v68.i32[1];
      *v58 = 0;
      v58[3] = 1065353216;
      v60 = v59 * v59;
      *(_QWORD *)((char *)v58 + 12) = 0;
      *((float *)v58 + 2) = v60 * 4.0;
      *((float *)v58 + 5) = v60 * 1000.0;
      *((float *)v58 + 8) = v60;
      *((float *)v58 + 9) = v53;
      v61 = (*v8)[1];
      (*v8)[1] = v58;
      if (v61)
      {
        operator delete(v61);
        v53 = v67;
      }
      if (v53 > 0.0)
      {
        v62 = operator new(0x28uLL);
        v63 = *(float *)&v69;
        *v62 = 0;
        v62[3] = 1065353216;
        v64 = v63 * v63;
        *(_QWORD *)((char *)v62 + 12) = 0;
        *((float *)v62 + 2) = v64 * 4.0;
        *((float *)v62 + 5) = v64 * 1000.0;
        *((float *)v62 + 8) = v64;
        *((float *)v62 + 9) = v53;
        v65 = (*v8)[2];
        (*v8)[2] = v62;
        if (v65)
          operator delete(v65);
      }
    }
  }
  v77[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v77 + *(_QWORD *)(v77[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD021C4](v78);
  std::istream::~istream();
  MEMORY[0x20BD027B8](v79);
  return a1;
}

void sub_207DF1828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  if (a37 < 0)
  {
    operator delete(__p);
    sub_207CC05B4(&a39);
    sub_207C99D78(v39);
    _Unwind_Resume(a1);
  }
  sub_207CC05B4(&a39);
  sub_207C99D78(v39);
  _Unwind_Resume(a1);
}

_QWORD *sub_207DF1904(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x20BD021B8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_207DF19D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD027B8](v1 + 424);
  _Unwind_Resume(a1);
}

__n128 sub_207DF1A1C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  uint64_t v7;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  float v11;
  float v17;
  float32x2_t v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t *v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t *v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  __n128 result;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;

  v7 = *(_QWORD *)(a1 + 200);
  v8 = *(_DWORD **)v7;
  if (*(_QWORD *)v7)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v9;
      v10 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a3 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a3 + 48) = v10;
      v11 = a4;
      __asm { FMOV            V4.2S, #1.0 }
      _D4.f32[0] = v11;
      v17 = a4 * a4;
      *(float *)&v10 = v17 * 0.5;
      *((float *)&v10 + 1) = v11;
      v18 = vmul_n_f32(*(float32x2_t *)&v10, v11);
      *(float32x2_t *)&v10 = vmul_n_f32(*(float32x2_t *)&v10, *(float *)&v10);
      v19 = **(float32x2_t ***)(a1 + 200);
      v20 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*v19)), _D4, *v19, 1);
      v21 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v19[1])), _D4, v19[1], 1);
      v22 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v19[2])), _D4, v19[2], 1);
      v23 = v19[4].f32[1];
      v24 = vmla_n_f32(vmla_n_f32(v21, v22, v11), *(float32x2_t *)&v10, v23);
      v25 = vmla_n_f32(vmla_f32(v22, v21, 0), v18, v23);
      v4.i32[0] = v19[3].i32[0];
      v5.i32[0] = v19[3].i32[1];
      v26 = vmul_n_f32(vmla_n_f32(vmul_n_f32(v24, v4.f32[0]), v25, v5.f32[0]), 1.0/ (float)(v19[4].f32[0]+ vmla_f32(vmul_f32(vmla_lane_f32(vmul_f32(v4, v24), v5, v24, 1), v4), v5, vmla_lane_f32(vmul_f32(v4, v25), v5, v25, 1)).f32[0]));
      v27 = vmla_n_f32(v20, v26, *((float *)a2 + 12) - vmla_lane_f32(vmul_f32(v4, v20), v5, v20, 1).f32[0]);
      *v19 = v27;
      v28 = vmls_lane_f32((float32x2_t)1065353216, v26, v4, 0);
      v29 = vmls_lane_f32((float32x2_t)0x3F80000000000000, v26, v5, 0);
      v19[1] = vmla_lane_f32(vmul_n_f32(v28, v24.f32[0]), v29, v24, 1);
      v19[2] = vmla_lane_f32(vmul_n_f32(v28, v25.f32[0]), v29, v25, 1);
      v30 = *(float32x2_t **)(*(_QWORD *)(a1 + 200) + 8);
      v31 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*v30)), _D4, *v30, 1);
      v32 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v30[1])), _D4, v30[1], 1);
      v33 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v30[2])), _D4, v30[2], 1);
      v34 = vmla_n_f32(v32, v33, v11);
      v35 = vmla_f32(v33, v32, 0);
      v32.i32[0] = v30[4].i32[1];
      v36 = vmla_n_f32(v34, *(float32x2_t *)&v10, v32.f32[0]);
      v37 = vmla_n_f32(v35, v18, v32.f32[0]);
      v32.i32[0] = v30[3].i32[0];
      v6.i32[0] = v30[3].i32[1];
      v38 = vmul_n_f32(vmla_n_f32(vmul_n_f32(v36, v32.f32[0]), v37, v6.f32[0]), 1.0/ (float)(v30[4].f32[0]+ vmla_f32(vmul_f32(vmla_lane_f32(vmul_f32(v32, v36), v6, v36, 1), v32), v6, vmla_lane_f32(vmul_f32(v32, v37), v6, v37, 1)).f32[0]));
      v39 = vmla_n_f32(v31, v38, *((float *)a2 + 13) - vmla_lane_f32(vmul_f32(v32, v31), v6, v31, 1).f32[0]);
      *v30 = v39;
      v40 = vmls_lane_f32((float32x2_t)1065353216, v38, v32, 0);
      v41 = vmls_lane_f32((float32x2_t)0x3F80000000000000, v38, v6, 0);
      v30[1] = vmla_lane_f32(vmul_n_f32(v40, v36.f32[0]), v41, v36, 1);
      v30[2] = vmla_lane_f32(vmul_n_f32(v40, v37.f32[0]), v41, v37, 1);
      *(_DWORD *)(a3 + 48) = v27.i32[0];
      *(_DWORD *)(a3 + 52) = v39.i32[0];
      v42 = *(float32x2_t **)(*(_QWORD *)(a1 + 200) + 16);
      v43 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*v42)), _D4, *v42, 1);
      v44 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v42[1])), _D4, v42[1], 1);
      v45 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v42[2])), _D4, v42[2], 1);
      v46 = vmla_n_f32(v44, v45, v11);
      v47 = v42[4].f32[1];
      v48 = vmla_n_f32(v46, *(float32x2_t *)&v10, v47);
      v49 = vmla_n_f32(vmla_f32(v45, v44, 0), v18, v47);
      v18.i32[0] = v42[3].i32[0];
      LODWORD(v10) = v42[3].i32[1];
      v50 = vmul_n_f32(vmla_n_f32(vmul_n_f32(v48, v18.f32[0]), v49, *(float *)&v10), 1.0/ (float)(v42[4].f32[0]+ vmla_f32(vmul_f32(vmla_lane_f32(vmul_f32(v18, v48), *(float32x2_t *)&v10, v48, 1), v18), *(float32x2_t *)&v10, vmla_lane_f32(vmul_f32(v18, v49), *(float32x2_t *)&v10, v49, 1)).f32[0]));
      v51 = vmla_n_f32(v43, v50, *((float *)a2 + 14) - vmla_lane_f32(vmul_f32(v18, v43), *(float32x2_t *)&v10, v43, 1).f32[0]);
      *v42 = v51;
      v52 = vmls_lane_f32((float32x2_t)1065353216, v50, v18, 0);
      v53 = vmls_lane_f32((float32x2_t)0x3F80000000000000, v50, *(float32x2_t *)&v10, 0);
      v42[1] = vmla_lane_f32(vmul_n_f32(v52, v48.f32[0]), v53, v48, 1);
      result.n128_u64[0] = (unint64_t)vmla_lane_f32(vmul_n_f32(v52, v49.f32[0]), v53, v49, 1);
      v42[2] = (float32x2_t)result.n128_u64[0];
      *(_DWORD *)(a3 + 56) = v51.i32[0];
      return result;
    }
    *v8 = *((_DWORD *)a2 + 12);
    v8[1] = 0;
    v55 = *(_DWORD **)(*(_QWORD *)(a1 + 200) + 8);
    *v55 = *((_DWORD *)a2 + 13);
    v55[1] = 0;
    v56 = *(_DWORD **)(*(_QWORD *)(a1 + 200) + 16);
    *v56 = *((_DWORD *)a2 + 14);
    v56[1] = 0;
    v57 = *a2;
    v58 = a2[2];
    v59 = *((_DWORD *)a2 + 6);
    v60 = a2[4];
    v61 = *((_DWORD *)a2 + 10);
    v62 = *(_QWORD *)(a1 + 200);
    *(_DWORD *)(v62 + 36) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v62 + 28) = v57;
    *(_DWORD *)(v62 + 48) = v59;
    *(_QWORD *)(v62 + 40) = v58;
    *(_DWORD *)(v62 + 60) = v61;
    *(_QWORD *)(v62 + 52) = v60;
    *(_BYTE *)(*(_QWORD *)(a1 + 200) + 24) = 1;
  }
  v63 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v63;
  result = *((__n128 *)a2 + 2);
  v64 = *((_OWORD *)a2 + 3);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v64;
  return result;
}

int32x2_t sub_207DF1D20@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double v7;
  float32x2_t *v8;
  float32_t v9;
  int32x2_t result;

  if (!*(_BYTE *)(a1 + 192))
    sub_207CA2A4C();
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_OWORD *)(v3 + 28);
  HIDWORD(v5) = 0;
  LODWORD(v5) = HIDWORD(v4);
  *(_QWORD *)((char *)&v5 + 4) = *(_QWORD *)(v3 + 44);
  *(_QWORD *)&v6 = *(_QWORD *)(v3 + 52);
  *((_QWORD *)&v6 + 1) = *(unsigned int *)(v3 + 60);
  v7 = *(double *)(a1 + 184);
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 60) = 1065353216;
  v8 = *(float32x2_t **)(v3 + 8);
  *(_QWORD *)&v6 = **(_QWORD **)v3;
  HIDWORD(v4) = 0;
  *(_OWORD *)a2 = v4;
  v9 = a3 - v7;
  __asm { FMOV            V1.2S, #1.0 }
  _D1.f32[0] = v9;
  *(_DWORD *)(a2 + 48) = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, *(float *)&v6), _D1, *(float32x2_t *)&v6, 1).u32[0];
  result = vzip1_s32((int32x2_t)vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*v8)), _D1, *v8, 1), (int32x2_t)vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(**(_QWORD **)(v3 + 16))), _D1, **(float32x2_t **)(v3 + 16), 1));
  *(int32x2_t *)(a2 + 52) = result;
  return result;
}

uint64_t sub_207DF1DD0(uint64_t a1, uint64_t a2)
{
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  float v14;
  float v15;
  _QWORD *v16;
  float v17;
  int v18;
  float v19;

  *(_DWORD *)(a1 + 8) = 4;
  *(_OWORD *)(a1 + 12) = xmmword_208232BD0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 28) = _Q0;
  *(_OWORD *)(a1 + 44) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 60) = xmmword_208232BC0;
  *(_DWORD *)(a1 + 76) = 1042536202;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 1042536202;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)a1 = off_24C075918;
  v9 = (char *)operator new(0x68uLL);
  *(_QWORD *)(a1 + 200) = v9 + 24;
  *(_QWORD *)(a1 + 208) = v9;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C075D60;
  *(_OWORD *)(v9 + 24) = xmmword_208238C40;
  *(_OWORD *)(v9 + 40) = unk_208238C50;
  *(_OWORD *)(v9 + 56) = xmmword_208238C60;
  *(_OWORD *)(v9 + 72) = unk_208238C70;
  *((_QWORD *)v9 + 11) = 0;
  *((_QWORD *)v9 + 12) = 0;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 40) = v10;
  v12 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  v13 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 72) = v13;
  LODWORD(v12) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 108) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 132) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 144) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 156) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 180) = v12;
  if (*(_BYTE *)(a1 + 80))
  {
    LODWORD(v13) = *(_DWORD *)(a1 + 76);
    v14 = *(float *)(a1 + 84);
    if (*(float *)&v13 <= v14)
      LODWORD(v13) = *(_DWORD *)(a1 + 84);
    v15 = 1.0;
    if (v14 != 0.0)
      v15 = *(float *)(a1 + 84);
    *(float *)(a1 + 68) = *(float *)(a1 + 68) * (float)((float)(*(float *)&v13 / v15) * (float)(*(float *)&v13 / v15));
    *(float *)&v13 = *(float *)&v13 / v14;
    *(float32x2_t *)(a1 + 60) = vdiv_f32(*(float32x2_t *)(a1 + 60), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v13, 0));
  }
  v16 = operator new(0x28uLL);
  v17 = *(float *)(a1 + 68);
  v18 = *(_DWORD *)(a1 + 72);
  *v16 = 0;
  v16[3] = 1065353216;
  v19 = v17 * v17;
  *(_QWORD *)((char *)v16 + 12) = 0;
  *((float *)v16 + 2) = v19 * 4.0;
  *((float *)v16 + 5) = v19 * 1000.0;
  *((float *)v16 + 8) = v19;
  *((_DWORD *)v16 + 9) = v18;
  *((_QWORD *)v9 + 11) = v16;
  return a1;
}

void sub_207DF1FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_207DF2000(uint64_t a1@<X0>, float32x2_t *a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v21;
  int8x16_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t *v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  double v32;
  float32x2_t v33;
  void *v34;
  unint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  int v44;
  float32x2_t *v45;
  float v46;
  float v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  float32x2_t *v66;
  double v67;
  float v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  float32x4_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  float v77;
  float32x4_t *v78;

  v7 = *(_QWORD *)(a1 + 200);
  if (!*(_BYTE *)(v7 + 76))
  {
    v12 = *(_OWORD *)a2->f32;
    v13 = *(_OWORD *)a2[2].f32;
    v14 = *(_OWORD *)a2[6].f32;
    *(_OWORD *)(v7 + 32) = *(_OWORD *)a2[4].f32;
    *(_OWORD *)(v7 + 48) = v14;
    *(_OWORD *)v7 = v12;
    *(_OWORD *)(v7 + 16) = v13;
    v15 = *(_QWORD *)(a1 + 200);
    *(_DWORD *)(v15 + 72) = 0;
    *(_BYTE *)(v15 + 76) = 1;
    v16 = *(_OWORD *)a2[2].f32;
    *a3 = *(_OWORD *)a2->f32;
    a3[1] = v16;
    v10 = *(_OWORD *)a2[4].f32;
    v11 = *(_OWORD *)a2[6].f32;
    goto LABEL_5;
  }
  if (a4 == 0.0)
  {
    v9 = *(_OWORD *)(v7 + 16);
    *a3 = *(_OWORD *)v7;
    a3[1] = v9;
    v10 = *(_OWORD *)(v7 + 32);
    v11 = *(_OWORD *)(v7 + 48);
LABEL_5:
    a3[2] = v10;
    a3[3] = v11;
    return;
  }
  v17 = a1 + 88;
  v18 = 0;
  v73.i64[0] = (uint64_t)operator new(0x20uLL);
  v73.i64[1] = v73.i64[0];
  *(_QWORD *)&v74 = v73.i64[0] + 32;
  v78 = &v73;
  do
  {
    v19.i32[0] = *(_DWORD *)(v17 + v18 + 8);
    v24 = *(float32x2_t *)(v17 + v18);
    v25 = *(float32x2_t **)(a1 + 200);
    v20.i32[0] = v25[1].i32[0];
    v26 = v25[2];
    v21.i32[0] = v25[3].i32[0];
    v27 = v25[4];
    v22.i32[0] = v25[5].i32[0];
    *(float32x2_t *)v28.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v25, v24.f32[0]), v26, v24, 1), v27, v19.f32[0]);
    *(float32x2_t *)&v28.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.f32, v24), v21, v24, 1), *(float32x2_t *)v19.f32, *(float32x2_t *)v22.i8);
    *(float32x2_t *)v20.f32 = v25[6];
    v20.i32[2] = v25[7].i32[0];
    v29 = vaddq_f32(v28, v20);
    v26.i32[0] = a2[1].i32[0];
    v27.i32[0] = a2[3].i32[0];
    v23.i32[0] = a2[5].i32[0];
    *(float32x2_t *)v30.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a2, v24.f32[0]), a2[2], v24, 1), a2[4], v19.f32[0]);
    *(float32x2_t *)&v30.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v26, v24), v27, v24, 1), *(float32x2_t *)v19.f32, v23);
    *(float32x2_t *)v19.f32 = a2[6];
    v19.i32[2] = a2[7].i32[0];
    v31 = (int8x16_t)vsubq_f32(v29, vaddq_f32(v30, v19));
    v29.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
    v77 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), *(float32x2_t *)v31.i8, 1), *(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
    sub_207D2F520((uint64_t *)&v78, &v77);
    v18 += 12;
  }
  while (v18 != 96);
  v34 = (void *)v73.i64[0];
  if (v73.i64[0] == v73.i64[1])
  {
    v42 = 0.0 / a4;
    v63 = *(_QWORD *)(a1 + 200);
    v64 = *(unsigned __int8 *)(v63 + 77);
    v45 = *(float32x2_t **)(v63 + 64);
    if (v64)
    {
LABEL_16:
      v46 = a4;
      v47 = a4 * a4;
      v48.f32[0] = v47 * 0.5;
      v48.f32[1] = v46;
      v49 = vmul_n_f32(v48, v48.f32[0]);
      v21 = vmul_n_f32(v48, v46);
      __asm { FMOV            V6.2S, #1.0 }
      _D6.f32[0] = v46;
      v55 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*v45)), _D6, *v45, 1);
      v56 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v45[1])), _D6, v45[1], 1);
      v57 = vmla_lane_f32(vmul_n_f32((float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)&v45[2])), _D6, v45[2], 1);
      v58 = v45[4].f32[1];
      v33 = vmla_n_f32(vmla_n_f32(v56, v57, v46), v49, v58);
      v59 = vmla_n_f32(vmla_f32(v57, v56, 0), v21, v58);
      v49.i32[0] = v45[3].i32[0];
      v21.i32[0] = v45[3].i32[1];
      *(float32x2_t *)v22.i8 = vmul_n_f32(vmla_n_f32(vmul_n_f32(v33, v49.f32[0]), v59, v21.f32[0]), 1.0/ (float)(v45[4].f32[0]+ vmla_f32(vmul_f32(vmla_lane_f32(vmul_f32(v49, v33), v21, v33, 1), v49), v21, vmla_lane_f32(vmul_f32(v49, v59), v21, v59, 1)).f32[0]));
      v60 = vmla_n_f32(v55, *(float32x2_t *)v22.i8, v42 - vmla_lane_f32(vmul_f32(v49, v55), v21, v55, 1).f32[0]);
      v61 = vmls_lane_f32((float32x2_t)1065353216, *(float32x2_t *)v22.i8, v49, 0);
      v62 = vmls_lane_f32((float32x2_t)0x3F80000000000000, *(float32x2_t *)v22.i8, v21, 0);
      v32 = COERCE_DOUBLE(vmla_lane_f32(vmul_n_f32(v61, v33.f32[0]), v62, v33, 1));
      *(float32x2_t *)v20.f32 = vmla_lane_f32(vmul_n_f32(v61, v59.f32[0]), v62, v59, 1);
      *v45 = v60;
      *(double *)&v45[1] = v32;
      v45[2] = *(float32x2_t *)v20.f32;
      *(_DWORD *)(*(_QWORD *)(a1 + 200) + 72) = v60.i32[0];
      goto LABEL_19;
    }
  }
  else
  {
    v35 = v73.i64[1] - v73.i64[0] - 4;
    v36 = 0.0;
    v37 = (float *)v73.i64[0];
    if (v35 < 4)
      goto LABEL_23;
    v38 = (v35 >> 2) + 1;
    v37 = (float *)(v73.i64[0] + 4 * (v38 & 0x7FFFFFFFFFFFFFFELL));
    v39 = (float *)(v73.i64[0] + 4);
    v40 = v38 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v36 = (float)(v36 + *(v39 - 1)) + *v39;
      v39 += 2;
      v40 -= 2;
    }
    while (v40);
    if (v38 != (v38 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      do
      {
        v41 = *v37++;
        v36 = v36 + v41;
      }
      while (v37 != (float *)v73.i64[1]);
    }
    v42 = v36 / a4;
    v43 = *(_QWORD *)(a1 + 200);
    v44 = *(unsigned __int8 *)(v43 + 77);
    v45 = *(float32x2_t **)(v43 + 64);
    if (v44)
      goto LABEL_16;
  }
  v45->f32[0] = v42;
  v45->i32[1] = 0;
  v65 = *(_QWORD *)(a1 + 200);
  *(_BYTE *)(v65 + 77) = 1;
  *(float *)(v65 + 72) = v42;
  v46 = a4;
LABEL_19:
  v66 = *(float32x2_t **)(a1 + 200);
  v20.f32[0] = fabsf(v66[9].f32[0]);
  v67 = 1.0 / ((float)(*(float *)(a1 + 60) + (float)(*(float *)(a1 + 64) * v20.f32[0])) * 6.28318531);
  *(float *)&v67 = v67;
  v68 = *(float *)&v67 / v46;
  LODWORD(v67) = 1.0;
  sub_207DF23FC(&v73, a2, v66, 1.0 / (float)(v68 + 1.0), v67, 1.0, *(float32x2_t *)v20.f32, v32, *(double *)&v21, *(double *)&v33, v22);
  v69 = *(_QWORD *)(a1 + 200);
  *(float32x4_t *)v69 = v73;
  *(_OWORD *)(v69 + 16) = v74;
  *(_OWORD *)(v69 + 32) = v75;
  *(_OWORD *)(v69 + 48) = v76;
  v70 = *(_OWORD **)(a1 + 200);
  v71 = v70[1];
  *a3 = *v70;
  a3[1] = v71;
  v72 = v70[3];
  a3[2] = v70[2];
  a3[3] = v72;
  if (v34)
    operator delete(v34);
}

void sub_207DF23D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

float32x4_t sub_207DF23FC(float32x4_t *a1, float32x2_t *a2, float32x2_t *a3, float a4, double a5, double a6, float32x2_t a7, double a8, double a9, double a10, int8x16_t a11)
{
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  __float2 v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  __int32 v48;
  int8x16_t v49;
  float v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float v54;
  float v55;
  float v56;
  float cosval;
  float v58;
  unint64_t v59;
  __float2 v60;
  float32x4_t v61;
  float v62;
  float v63;
  float v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t result;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int32x4_t v91;
  _BYTE v92[32];
  float *v93[2];
  float32x2_t *v94[2];

  v15.i32[1] = unk_208238C54;
  v88 = xmmword_208238C40;
  v16.i32[1] = unk_208238C74;
  v89 = unk_208238C50;
  v90 = xmmword_208238C60;
  v91 = (int32x4_t)unk_208238C70;
  a7.i32[0] = a2[1].i32[0];
  *(float32x2_t *)v17.i8 = *a2;
  v17.i64[1] = a7.u32[0];
  v18 = a2[2];
  v16.i32[0] = a2[3].i32[0];
  v19 = a2[4];
  v15.i32[0] = a2[5].i32[0];
  *(float32x2_t *)a11.i8 = *a3;
  v20 = vmul_lane_f32(a7, *a3, 1);
  a11.i32[2] = a3[1].i32[0];
  v21 = a3[2];
  v11.i32[0] = a3[3].i32[0];
  v22 = a3[4];
  v12.i32[0] = a3[5].i32[0];
  v23 = vmla_f32(vmla_f32(vmul_f32(a7, *a3), v21, v16), v22, v15);
  v24 = vmla_lane_f32(vmla_lane_f32(vmul_lane_f32(*a2, *a3, 1), v18, v21, 1), v19, v22, 1);
  v25 = vmla_lane_f32(vmla_lane_f32(v20, v16, v21, 1), v15, v22, 1);
  v26 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*a2, *(float *)&a11.i32[2]), v18, v11.f32[0]), v19, v12.f32[0]);
  v27 = (float32x4_t)vextq_s8(v17, v17, 8uLL);
  *(float32x2_t *)v27.f32 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v27.f32, (float32x2_t)*(_OWORD *)&vextq_s8(a11, a11, 8uLL)), v11, v16), v12, v15);
  *(float32x2_t *)&v88 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*a2, COERCE_FLOAT(*a3)), v18, v21.f32[0]), v19, v22.f32[0]);
  DWORD2(v88) = v23.i32[0];
  DWORD2(v89) = v25.i32[0];
  *(float32x2_t *)&v89 = v24;
  *(float32x2_t *)&v90 = v26;
  DWORD2(v90) = v27.i32[0];
  v28 = a3[6];
  v15.i32[0] = a3[7].i32[0];
  *(float32x2_t *)v29.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v88, v28.f32[0]), v24, v28, 1), v26, v15.f32[0]);
  *(float32x2_t *)&v29.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v23, v28), v25, v28, 1), v15, *(float32x2_t *)v27.f32);
  *(float32x2_t *)v27.f32 = a2[6];
  v27.i32[2] = a2[7].i32[0];
  v30 = vsubq_f32(v27, v29);
  v91.i32[2] = v30.i32[2];
  v91.i64[0] = v30.i64[0];
  memset(v92, 0, 24);
  v94[0] = (float32x2_t *)&v88;
  v94[1] = 0;
  v93[0] = (float *)v92;
  v93[1] = 0;
  sub_207DA0C70(v94, v93);
  v32 = *(int8x16_t *)v92;
  v33 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
  v34 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92, 1), *(float32x2_t *)v32.i8, 1), v33, v33).f32[0];
  if (v34 < 0.0061)
  {
    v35 = 0.5 - (float)(v34 * (float)((float)(v34 / -720.0) + 0.041667));
    v36 = 0.16667 - (float)(v34 * (float)((float)(v34 / -5040.0) + 0.0083333));
    v37 = 1.0 - (float)(v34 * v36);
    if (v34 >= 0.00000149)
      goto LABEL_3;
LABEL_7:
    v39 = (float)(v34 * 0.000033069) + (float)((float)(v34 * 0.0013889) + 0.083333);
    goto LABEL_8;
  }
  v40 = sqrtf(v34);
  v82 = v34;
  v84 = *(int8x16_t *)v92;
  v41 = __sincosf_stret(v40);
  v34 = v82;
  v32 = v84;
  v37 = v41.__sinval / v40;
  v35 = (float)(1.0 / v82) * (float)(1.0 - v41.__cosval);
  v36 = (float)(1.0 / v82) * (float)(1.0 - (float)(v41.__sinval / v40));
  if (v82 < 0.00000149)
    goto LABEL_7;
LABEL_3:
  v38 = (float)((float)(v35 * 0.5) - v36) / v37;
  v39 = (float)(v35 + (float)(v37 * -0.5)) / (float)(v34 * v35);
  if (v34 <= 9.0)
    v39 = v38;
LABEL_8:
  v42 = (float32x4_t)vextq_s8(vextq_s8(v32, v32, 0xCuLL), v32, 8uLL);
  v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), v32, 0xCuLL);
  v44 = (int8x16_t)vsubq_f32(vmulq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v91, v91), (int8x16_t)v91, 0xCuLL)), vmulq_f32(v43, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v91, (int8x16_t)v91, 0xCuLL), (int8x16_t)v91, 8uLL)));
  v45.i64[0] = 0xBF000000BF000000;
  v45.i64[1] = 0xBF000000BF000000;
  v46 = vaddq_f32(vaddq_f32((float32x4_t)v91, vmulq_f32((float32x4_t)v44, v45)), vmulq_n_f32(vsubq_f32(vmulq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), v44, 0xCuLL)), vmulq_f32(v43, (float32x4_t)vextq_s8(vextq_s8(v44, v44, 0xCuLL), v44, 8uLL))), v39));
  *(_DWORD *)&v92[20] = v46.i32[2];
  *(_QWORD *)&v92[12] = v46.i64[0];
  v47 = vmulq_n_f32(*(float32x4_t *)&v92[16], a4).u64[0];
  v48 = HIDWORD(v47);
  v49 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)v92, a4);
  v31.i32[0] = v49.i32[3];
  v50 = *(float *)&v49.i32[2];
  v51 = *(float *)&v49.i32[1];
  v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1);
  v53 = (float32x2_t)vextq_s8(v49, v49, 8uLL).u64[0];
  v54 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), v52, *(float32x2_t *)v49.i8, 1), v53, v53).f32[0];
  if (v54 >= 0.0061)
  {
    v58 = sqrtf(v54);
    v85 = v49;
    v87 = v31;
    v81 = *(float *)&v49.i32[1];
    v83 = *(float *)&v49.i32[2];
    v59 = v47;
    v80 = v54;
    v60 = __sincosf_stret(v58);
    cosval = v60.__cosval;
    v48 = HIDWORD(v59);
    LODWORD(v47) = v59;
    v51 = v81;
    v50 = v83;
    v49 = v85;
    v31 = v87;
    v56 = v60.__sinval / v58;
    v52.f32[0] = (float)(1.0 / v80) * (float)(1.0 - v60.__cosval);
    v55 = (float)(1.0 / v80) * (float)(1.0 - (float)(v60.__sinval / v58));
  }
  else
  {
    v52.f32[0] = 0.5 - (float)(v54 * (float)((float)(v54 / -720.0) + 0.041667));
    v55 = 0.16667 - (float)(v54 * (float)((float)(v54 / -5040.0) + 0.0083333));
    v56 = 1.0 - (float)(v54 * v55);
    cosval = 1.0 - (float)(v54 * v52.f32[0]);
  }
  v31.i32[1] = v47;
  v31.i32[2] = v48;
  v61.i32[3] = 0;
  v61.f32[0] = (float)(*(float *)v49.i32 * (float)(*(float *)v49.i32 * v52.f32[0])) + cosval;
  v62 = v51 * (float)(*(float *)v49.i32 * v52.f32[0]);
  v63 = v50 * (float)(*(float *)v49.i32 * v52.f32[0]);
  v64 = v51 * v56;
  v61.f32[1] = v62 + (float)(v50 * v56);
  v65 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v50), LODWORD(v51)), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v52, 0));
  v61.f32[2] = v63 - (float)(v51 * v56);
  v66.f32[0] = v62 - (float)(v50 * v56);
  v67 = vmul_n_f32(v65, v50);
  v65.f32[1] = v56;
  v68 = vmul_f32((float32x2_t)__PAIR64__(v49.u32[0], LODWORD(v51)), v65);
  v69 = (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1);
  v70.i64[0] = __PAIR64__(LODWORD(cosval), v69.u32[0]);
  v69.i32[0] = vsub_f32(v67, v69).u32[0];
  v69.i32[1] = vadd_f32(v67, *(float32x2_t *)&v70).i32[1];
  v71 = (float32x2_t)vdup_lane_s32((int32x2_t)v67, 0);
  v71.f32[0] = cosval;
  v72 = vadd_f32(v68, v71);
  v66.i32[1] = v72.i32[0];
  v66.i64[1] = __PAIR64__(unk_208238C5C, v72.u32[1]);
  v70.f32[0] = v63 + v64;
  v70.i32[1] = v69.i32[0];
  v70.i64[1] = v69.u32[1];
  *(float *)&v49.i32[1] = v51;
  *(float *)&v49.i32[2] = v50;
  v73 = (float32x4_t)vextq_s8(vextq_s8(v49, v49, 0xCuLL), v49, 8uLL);
  v74 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
  v75 = (int8x16_t)vsubq_f32(vmulq_f32(v73, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), v31, 0xCuLL)), vmulq_f32(v74, (float32x4_t)vextq_s8(vextq_s8(v31, v31, 0xCuLL), v31, 8uLL)));
  result = vaddq_f32(vaddq_f32((float32x4_t)v31, vmulq_n_f32((float32x4_t)v75, v52.f32[0])), vmulq_n_f32(vsubq_f32(vmulq_f32(v73, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL)), vmulq_f32(v74, (float32x4_t)vextq_s8(vextq_s8(v75, v75, 0xCuLL), v75, 8uLL))), v55));
  result.i32[3] = unk_208238C7C;
  v77 = *(float32x4_t *)a3[6].f32;
  v78 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v66, a3[2], 1), v70, *(float32x4_t *)a3[2].f32, 2), result, *(float32x4_t *)a3[2].f32, 3);
  v79 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v66, a3[4], 1), v70, *(float32x4_t *)a3[4].f32, 2), result, *(float32x4_t *)a3[4].f32, 3);
  *a1 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, COERCE_FLOAT(*(_OWORD *)a3->f32)), v66, *a3, 1), v70, *(float32x4_t *)a3->f32, 2), result, *(float32x4_t *)a3->f32, 3);
  a1[1] = v78;
  a1[2] = v79;
  a1[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, v77.f32[0]), v66, *(float32x2_t *)v77.f32, 1), v70, v77, 2), result, v77, 3);
  return result;
}

__n128 sub_207DF2988@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(a1 + 200);
  v3 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v5;
  return result;
}

_QWORD *sub_207DF29A0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24C075800;
  v2 = (std::__shared_weak_count *)result[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DF2A14(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = off_24C075800;
  v2 = (std::__shared_weak_count *)__p[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_207DF2A88(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24C075838;
  v2 = (std::__shared_weak_count *)result[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DF2AFC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = off_24C075838;
  v2 = (std::__shared_weak_count *)__p[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_207DF2B70(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24C075870;
  v2 = (std::__shared_weak_count *)result[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DF2BE4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = off_24C075870;
  v2 = (std::__shared_weak_count *)__p[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_207DF2C58(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24C0758A8;
  v2 = (std::__shared_weak_count *)result[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DF2CCC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = off_24C0758A8;
  v2 = (std::__shared_weak_count *)__p[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_207DF2D40(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24C0758E0;
  v2 = (std::__shared_weak_count *)result[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DF2DB4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = off_24C0758E0;
  v2 = (std::__shared_weak_count *)__p[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *sub_207DF2E28(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_24C075918;
  v2 = (std::__shared_weak_count *)result[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DF2E9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = off_24C075918;
  v2 = (std::__shared_weak_count *)__p[26];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DF2F10(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _OWORD *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)(a1 + 32) = 4;
  v4 = a1 + 32;
  *(_QWORD *)a1 = off_24C0759F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_208232BD0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 84) = xmmword_208232BC0;
  v10 = (_OWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 100) = 1042536202;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = 1042536202;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = off_24C075800;
  v11 = (char *)operator new(0x78uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = off_24C075BD0;
  *((_DWORD *)v11 + 28) = 0;
  *(_OWORD *)(v11 + 24) = xmmword_208238C40;
  *(_OWORD *)(v11 + 40) = unk_208238C50;
  *(_OWORD *)(v11 + 56) = xmmword_208238C60;
  *(_OWORD *)(v11 + 72) = unk_208238C70;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  v11[112] = 0;
  *(_QWORD *)(a1 + 224) = v11 + 24;
  *(_QWORD *)(a1 + 232) = v11;
  v12 = *a2;
  v13 = a2[1];
  *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v4 = v12;
  *(_OWORD *)(v4 + 16) = v13;
  v14 = *((_QWORD *)a2 + 5);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 72) = v14;
  v15 = *(__int128 *)((char *)a2 + 52);
  *(_OWORD *)((char *)v10 + 12) = a2[4];
  *v10 = v15;
  v16 = *((_QWORD *)a2 + 10);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 22);
  *(_QWORD *)(a1 + 112) = v16;
  v17 = *(_QWORD *)((char *)a2 + 92);
  *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 25);
  *(_QWORD *)(a1 + 124) = v17;
  v18 = *((_QWORD *)a2 + 13);
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 28);
  *(_QWORD *)(a1 + 136) = v18;
  v19 = *(_QWORD *)((char *)a2 + 116);
  *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 31);
  *(_QWORD *)(a1 + 148) = v19;
  v20 = *((_QWORD *)a2 + 16);
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 34);
  *(_QWORD *)(a1 + 160) = v20;
  v21 = *(_QWORD *)((char *)a2 + 140);
  *(_DWORD *)(a1 + 180) = *((_DWORD *)a2 + 37);
  *(_QWORD *)(a1 + 172) = v21;
  v22 = *((_QWORD *)a2 + 19);
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a2 + 40);
  *(_QWORD *)(a1 + 184) = v22;
  v23 = *(_QWORD *)((char *)a2 + 164);
  *(_DWORD *)(a1 + 204) = *((_DWORD *)a2 + 43);
  *(_QWORD *)(a1 + 196) = v23;
  return a1;
}

void sub_207DF30AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_207DF30C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0759F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF30D0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0759F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DF30F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t sub_207DF3100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  *(_DWORD *)(a1 + 32) = 4;
  v4 = a1 + 32;
  *(_QWORD *)a1 = off_24C075A40;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_208232BD0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 84) = xmmword_208232BC0;
  v10 = (_OWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 100) = 1042536202;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = 1042536202;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = off_24C075838;
  v11 = (char *)operator new(0x68uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = off_24C075C20;
  *(_OWORD *)(v11 + 28) = 0u;
  *(_OWORD *)(v11 + 44) = 0u;
  *(_OWORD *)(v11 + 60) = 0u;
  *(_OWORD *)(v11 + 76) = 0u;
  *(_QWORD *)(v11 + 92) = 0;
  *((_DWORD *)v11 + 6) = 1065353216;
  *((_DWORD *)v11 + 10) = 1065353216;
  *((_DWORD *)v11 + 14) = 1065353216;
  *(_QWORD *)(a1 + 224) = v11 + 24;
  *(_QWORD *)(a1 + 232) = v11;
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v13;
  *(_QWORD *)(v4 + 32) = v12;
  v14 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 72) = v14;
  v15 = *(_OWORD *)(a2 + 64);
  *v10 = *(_OWORD *)(a2 + 52);
  *(_OWORD *)((char *)v10 + 12) = v15;
  LODWORD(v14) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 120) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 132) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 144) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 156) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 168) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 180) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 192) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 196) = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 204) = v14;
  return a1;
}

void sub_207DF3294(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_207DF32A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF32B8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DF32D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t sub_207DF32E8(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _OWORD *v10;
  char *v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_DWORD *)(a1 + 32) = 4;
  v4 = a1 + 32;
  *(_QWORD *)a1 = off_24C075A90;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 36) = xmmword_208232BD0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 84) = xmmword_208232BC0;
  v10 = (_OWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 100) = 1042536202;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = 1042536202;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = off_24C075870;
  v11 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = off_24C075C70;
  *(_OWORD *)(v11 + 28) = 0u;
  *(_OWORD *)(v11 + 60) = 0u;
  *(_OWORD *)(v11 + 76) = 0u;
  *(_OWORD *)(v11 + 44) = 0u;
  *(_OWORD *)(v11 + 92) = 0u;
  *(_OWORD *)(v11 + 108) = 0u;
  *(_OWORD *)(v11 + 124) = 0u;
  *(_OWORD *)(v11 + 140) = 0u;
  *(_OWORD *)(v11 + 156) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *((_DWORD *)v11 + 6) = 1065353216;
  *((_DWORD *)v11 + 10) = 1065353216;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v11 + 10) = 0;
  *((_DWORD *)v11 + 22) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)v11 + 7) = _D0;
  *((_DWORD *)v11 + 19) = 1065353216;
  *(_QWORD *)(v11 + 108) = 0;
  *(_QWORD *)(v11 + 100) = 0;
  *(_QWORD *)(v11 + 116) = 0;
  *(_QWORD *)(v11 + 92) = _D0;
  *((_DWORD *)v11 + 28) = 1065353216;
  *((_DWORD *)v11 + 31) = 0;
  *((_DWORD *)v11 + 32) = 1065353216;
  *((_QWORD *)v11 + 18) = 0;
  *((_QWORD *)v11 + 19) = 0;
  *((_QWORD *)v11 + 20) = 0;
  *(_QWORD *)(a1 + 224) = v11 + 24;
  *(_QWORD *)(a1 + 232) = v11;
  v13 = *a2;
  v14 = a2[1];
  *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v4 = v13;
  *(_OWORD *)(v4 + 16) = v14;
  v15 = *((_QWORD *)a2 + 5);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 72) = v15;
  v16 = *(__int128 *)((char *)a2 + 52);
  *(_OWORD *)((char *)v10 + 12) = a2[4];
  *v10 = v16;
  v17 = *((_QWORD *)a2 + 10);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 22);
  *(_QWORD *)(a1 + 112) = v17;
  v18 = *(_QWORD *)((char *)a2 + 92);
  *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 25);
  *(_QWORD *)(a1 + 124) = v18;
  v19 = *((_QWORD *)a2 + 13);
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 28);
  *(_QWORD *)(a1 + 136) = v19;
  v20 = *(_QWORD *)((char *)a2 + 116);
  *(_DWORD *)(a1 + 156) = *((_DWORD *)a2 + 31);
  *(_QWORD *)(a1 + 148) = v20;
  v21 = *((_QWORD *)a2 + 16);
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 34);
  *(_QWORD *)(a1 + 160) = v21;
  v22 = *(_QWORD *)((char *)a2 + 140);
  *(_DWORD *)(a1 + 180) = *((_DWORD *)a2 + 37);
  *(_QWORD *)(a1 + 172) = v22;
  v23 = *((_QWORD *)a2 + 19);
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a2 + 40);
  *(_QWORD *)(a1 + 184) = v23;
  v24 = *(_QWORD *)((char *)a2 + 164);
  *(_DWORD *)(a1 + 204) = *((_DWORD *)a2 + 43);
  *(_QWORD *)(a1 + 196) = v24;
  return a1;
}

void sub_207DF34C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_207DF34D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF34E8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DF3508(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_207DF3518(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF3528(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DF3548(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_207DF3558(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF3568(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075B30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DF3588(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_207DF3598(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF35A8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207DF35C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_207DF35D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF35E8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DF3610(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF3620(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DF3648(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF3658(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DF3680(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF3690(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DF36B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF36C8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DF36E8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[5];
  a1[5] = 0;
  if (v2)
    operator delete(v2);
  v3 = (void *)a1[4];
  a1[4] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
}

void sub_207DF3740(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C075D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207DF3750(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C075D60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DF3770(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    operator delete(v2);
}

uint64_t sub_207DF378C(uint64_t result, uint64_t a2, float32x4_t *a3, double a4)
{
  uint64_t v6;
  _OWORD *v7;
  BOOL v8;
  _DWORD *v9;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  double v31;
  float32x4_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v6 = *(_QWORD *)(a2 + 1104);
  v7 = (_OWORD *)(v6 + 48);
  if (*(_DWORD *)result)
    v8 = *(_BYTE *)(a2 + 1296) == 0;
  else
    v8 = 0;
  if (v8
    && (v9 = (_DWORD *)result, (result = *(_QWORD *)(v6 + 184)) != 0)
    && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result), (result & 1) != 0))
  {
    if (*v9 != 1)
      goto LABEL_25;
    if (a3[4].i8[0] && *(_BYTE *)(a2 + 1024))
    {
      result = (uint64_t)(***(_QWORD *(****)(__int128 *__return_ptr, double))(v6 + 184))(&v36, a4);
      v11 = *(unsigned __int8 *)(v6 + 176);
      v12 = v37;
      *(_OWORD *)(v6 + 112) = v36;
      *(_OWORD *)(v6 + 128) = v12;
      v13 = v39;
      *(_OWORD *)(v6 + 144) = v38;
      *(_OWORD *)(v6 + 160) = v13;
      if (v11)
        goto LABEL_25;
      goto LABEL_24;
    }
    result = (uint64_t)(***(_QWORD *(****)(__int128 *__return_ptr, double))(v6 + 184))(&v36, a4);
    v33 = v37;
    v35 = v38;
    v34 = v39;
    *v7 = v36;
    *(_OWORD *)(v6 + 64) = v33;
    *(_OWORD *)(v6 + 80) = v35;
    *(_OWORD *)(v6 + 96) = v34;
    if (!a3[4].i8[0])
      return result;
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 456);
    v15 = *(_OWORD *)(a2 + 472);
    v16 = *(_OWORD *)(a2 + 504);
    *(_OWORD *)(v6 + 80) = *(_OWORD *)(a2 + 488);
    *(_OWORD *)(v6 + 96) = v16;
    *v7 = v14;
    *(_OWORD *)(v6 + 64) = v15;
    if (*(_BYTE *)(a2 + 924))
      v17 = (__int128 *)(a2 + 860);
    else
      v17 = (__int128 *)(a2 + 588);
    v18 = (_OWORD *)(v6 + 112);
    if (*(unsigned __int8 *)(v6 + 176) == *((unsigned __int8 *)v17 + 64))
    {
      if (!*(_BYTE *)(v6 + 176))
        goto LABEL_25;
      v19 = *v17;
      v20 = v17[1];
      v21 = v17[3];
      *(_OWORD *)(v6 + 144) = v17[2];
      *(_OWORD *)(v6 + 160) = v21;
      *v18 = v19;
      *(_OWORD *)(v6 + 128) = v20;
      if (!a3[4].i8[0])
        return result;
    }
    else
    {
      if (!*(_BYTE *)(v6 + 176))
      {
        v22 = *v17;
        v23 = v17[1];
        v24 = v17[3];
        *(_OWORD *)(v6 + 144) = v17[2];
        *(_OWORD *)(v6 + 160) = v24;
        *v18 = v22;
        *(_OWORD *)(v6 + 128) = v23;
LABEL_24:
        *(_BYTE *)(v6 + 176) = 1;
LABEL_25:
        if (!a3[4].i8[0])
          return result;
        goto LABEL_26;
      }
      *(_BYTE *)(v6 + 176) = 0;
      if (!a3[4].i8[0])
        return result;
    }
  }
LABEL_26:
  if (*(_BYTE *)(v6 + 176))
  {
    if (*(_BYTE *)(a2 + 1024))
    {
      v25 = a3[1];
      v26 = a3[2];
      v27 = a3[3];
      v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v6 + 128))), v25, *(float32x2_t *)(v6 + 128), 1), v26, *(float32x4_t *)(v6 + 128), 2), v27, *(float32x4_t *)(v6 + 128), 3);
      v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v6 + 144))), v25, *(float32x2_t *)(v6 + 144), 1), v26, *(float32x4_t *)(v6 + 144), 2), v27, *(float32x4_t *)(v6 + 144), 3);
      v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v6 + 160))), v25, *(float32x2_t *)(v6 + 160), 1), v26, *(float32x4_t *)(v6 + 160), 2), v27, *(float32x4_t *)(v6 + 160), 3);
      *(float32x4_t *)(v6 + 48) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v6 + 112))), v25, *(float32x2_t *)(v6 + 112), 1), v26, *(float32x4_t *)(v6 + 112), 2), v27, *(float32x4_t *)(v6 + 112), 3);
      *(float32x4_t *)(v6 + 64) = v28;
      *(float32x4_t *)(v6 + 80) = v29;
      *(float32x4_t *)(v6 + 96) = v30;
      if (*(_BYTE *)(a2 + 440))
      {
        if (*(_BYTE *)(a2 + 1024))
        {
          v31 = *(double *)(a2 + 1016);
          *(float *)&v31 = v31;
          v32 = vdivq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v31, 0));
          *(_DWORD *)(v6 + 104) = v32.i32[2];
          *(_QWORD *)(v6 + 96) = v32.i64[0];
        }
      }
    }
  }
  return result;
}

_DWORD *sub_207DF39B0(_DWORD *result, uint64_t a2, float32x4_t *a3, double a4)
{
  uint64_t v4;
  BOOL v8;
  int v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  __int128 v19;
  __int128 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  double v27;
  float32x4_t v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v4 = *(_QWORD *)(a2 + 1104);
  if (*(_DWORD *)v4 != 2)
    return result;
  if (*result != 1)
  {
LABEL_34:
    if (*(_BYTE *)(a2 + 420))
      v29 = *(_DWORD *)(a2 + 928) == 5;
    else
      v29 = 0;
    if (!v29)
      return result;
    goto LABEL_44;
  }
  if (*(_BYTE *)(a2 + 652))
    v8 = *(_BYTE *)(a2 + 1024) == 0;
  else
    v8 = 1;
  v9 = !v8;
  if (*(_QWORD *)(v4 + 184) && *(unsigned __int8 *)(v4 + 200) == v9)
    goto LABEL_20;
  sub_207DEDC2C((uint64_t)(result + 1), (uint64_t *)&v46);
  v10 = v46;
  v46 = 0uLL;
  v11 = *(std::__shared_weak_count **)(v4 + 192);
  *(_OWORD *)(v4 + 184) = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (!*((_QWORD *)&v46 + 1))
    goto LABEL_20;
  v15 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_20:
    *(_BYTE *)(v4 + 200) = v9;
    if (v9)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    *(_BYTE *)(v4 + 200) = v9;
    if (v9)
    {
LABEL_21:
      if (!*(_BYTE *)(a2 + 652))
        goto LABEL_50;
      v17 = *(_QWORD *)(v4 + 184);
      if (!*(_BYTE *)(v17 + 192))
        goto LABEL_23;
LABEL_26:
      v18 = *(double *)(v17 + 184);
      goto LABEL_27;
    }
  }
  v17 = *(_QWORD *)(v4 + 184);
  if (*(_BYTE *)(v17 + 192))
    goto LABEL_26;
LABEL_23:
  v18 = a4 - *(float *)(v17 + 12);
LABEL_27:
  *(double *)(v17 + 184) = a4;
  *(_BYTE *)(v17 + 192) = 1;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, double))(*(_QWORD *)v17 + 32))(&v46, a4 - v18);
  if (a3[4].i8[0] && v9)
  {
    if (!*(_BYTE *)(v4 + 176))
      goto LABEL_50;
    v19 = v47;
    *(_OWORD *)(v4 + 112) = v46;
    *(_OWORD *)(v4 + 128) = v19;
    v20 = v49;
    *(_OWORD *)(v4 + 144) = v48;
    *(_OWORD *)(v4 + 160) = v20;
    if (!a3[4].i8[0])
      goto LABEL_50;
    v21 = a3[1];
    v22 = a3[2];
    v23 = a3[3];
    v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v4 + 128))), v21, *(float32x2_t *)(v4 + 128), 1), v22, *(float32x4_t *)(v4 + 128), 2), v23, *(float32x4_t *)(v4 + 128), 3);
    v25 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v4 + 144))), v21, *(float32x2_t *)(v4 + 144), 1), v22, *(float32x4_t *)(v4 + 144), 2), v23, *(float32x4_t *)(v4 + 144), 3);
    v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v4 + 160))), v21, *(float32x2_t *)(v4 + 160), 1), v22, *(float32x4_t *)(v4 + 160), 2), v23, *(float32x4_t *)(v4 + 160), 3);
    *(float32x4_t *)(v4 + 48) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)(v4 + 112))), v21, *(float32x2_t *)(v4 + 112), 1), v22, *(float32x4_t *)(v4 + 112), 2), v23, *(float32x4_t *)(v4 + 112), 3);
    *(float32x4_t *)(v4 + 64) = v24;
    *(float32x4_t *)(v4 + 80) = v25;
    *(float32x4_t *)(v4 + 96) = v26;
    if (*(_BYTE *)(a2 + 440))
    {
      if (!*(_BYTE *)(a2 + 1024))
        goto LABEL_50;
      v27 = *(double *)(a2 + 1016);
      *(float *)&v27 = v27;
      v28 = vdivq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v27, 0));
      *(_DWORD *)(v4 + 104) = v28.i32[2];
      *(_QWORD *)(v4 + 96) = v28.i64[0];
    }
    goto LABEL_34;
  }
  v30 = v47;
  v32 = v48;
  v31 = v49;
  *(_OWORD *)(v4 + 48) = v46;
  *(_OWORD *)(v4 + 64) = v30;
  *(_OWORD *)(v4 + 80) = v32;
  *(_OWORD *)(v4 + 96) = v31;
  if (*(_BYTE *)(a2 + 420))
    v33 = *(_DWORD *)(a2 + 928) == 5;
  else
    v33 = 0;
  if (v33)
  {
LABEL_44:
    if (!*(_BYTE *)(a2 + 652) || !*(_BYTE *)(v4 + 176))
      return result;
    v34 = *(_QWORD *)(a2 + 1104);
    v35 = *(_QWORD *)(v34 + 48);
    v36 = *(_QWORD *)(v34 + 64);
    v37 = *(_DWORD *)(v34 + 72);
    v38 = *(_QWORD *)(v34 + 80);
    v39 = *(_DWORD *)(v34 + 88);
    *(_DWORD *)(a2 + 464) = *(_DWORD *)(v34 + 56);
    *(_QWORD *)(a2 + 456) = v35;
    *(_DWORD *)(a2 + 480) = v37;
    *(_QWORD *)(a2 + 472) = v36;
    *(_DWORD *)(a2 + 496) = v39;
    *(_QWORD *)(a2 + 488) = v38;
    if (*(_BYTE *)(v34 + 176) && *(_BYTE *)(a2 + 652))
    {
      v40 = *(_DWORD *)(v34 + 120);
      v41 = *(_QWORD *)(v34 + 112);
      v42 = *(_DWORD *)(v34 + 136);
      v43 = *(_QWORD *)(v34 + 128);
      v44 = *(_DWORD *)(v34 + 152);
      v45 = *(_QWORD *)(v34 + 144);
      *(_QWORD *)(a2 + 588) = v41;
      *(_DWORD *)(a2 + 596) = v40;
      *(_QWORD *)(a2 + 604) = v43;
      *(_DWORD *)(a2 + 612) = v42;
      *(_QWORD *)(a2 + 620) = v45;
      *(_DWORD *)(a2 + 628) = v44;
      return result;
    }
LABEL_50:
    sub_207CA2A4C();
  }
  return result;
}

uint64_t sub_207DF3CAC(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = a1[3];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*(_QWORD *)&a1[2] + 8 * v4);
  if (!v5)
    return 0;
  v6 = (_QWORD *)*v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (v6[2] == a2)
          goto LABEL_22;
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (_QWORD *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= *(_QWORD *)&v2)
      v8 %= *(_QWORD *)&v2;
    if (v8 != v4)
      return 0;
LABEL_11:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 0;
  }
  if (v6[2] != a2)
    goto LABEL_11;
LABEL_22:
  v10 = v6[3];
  v11 = v6[4];
  if (v10 == v11)
    return 0;
  result = 0;
  do
  {
    if (*(_BYTE *)(v10 + 441))
    {
      if (**(_DWORD **)(v10 + 1104) == 2)
        ++result;
    }
    v10 += 1344;
  }
  while (v10 != v11);
  return result;
}

unint64_t sub_207DF3DC4(int8x8_t *a1, unint64_t a2)
{
  unint64_t v2;
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  float v22;
  _QWORD *v23;
  _QWORD *v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD **v32;
  size_t v33;
  size_t v34;
  size_t v35;
  _QWORD *i;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  void *__p[2];
  void *v62[2];
  float v63;

  *(_OWORD *)__p = 0u;
  *(_OWORD *)v62 = 0u;
  v63 = 1.0;
  v3 = a1[3];
  if (!*(_QWORD *)&v3)
    goto LABEL_120;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v3 <= a2)
      v5 = a2 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a2;
  }
  v6 = *(_QWORD **)(*(_QWORD *)&a1[2] + 8 * v5);
  if (!v6)
    goto LABEL_120;
  v7 = (_QWORD *)*v6;
  if (!v7)
    goto LABEL_120;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v9 = v7[1];
      if (v9 == a2)
      {
        if (v7[2] == a2)
          goto LABEL_22;
      }
      else if ((v9 & v8) != v5)
      {
        goto LABEL_120;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_120;
    }
  }
  while (1)
  {
    v10 = v7[1];
    if (v10 == a2)
      break;
    if (v10 >= *(_QWORD *)&v3)
      v10 %= *(_QWORD *)&v3;
    if (v10 != v5)
      goto LABEL_120;
LABEL_16:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_120;
  }
  if (v7[2] != a2)
    goto LABEL_16;
LABEL_22:
  v11 = v7[3];
  v12 = v7[4];
  if (v11 == v12)
    goto LABEL_120;
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)(v11 + 48);
    if (v14)
    {
      v16 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        v2 = *(_QWORD *)(v11 + 48);
        if (v14 <= v15)
          v2 = v15 % v14;
      }
      else
      {
        v2 = v15 & (v14 - 1);
      }
      v17 = (_QWORD *)*((_QWORD *)__p[0] + v2);
      if (v17)
      {
        v18 = (_QWORD *)*v17;
        if (v18)
        {
          if (v16.u32[0] < 2uLL)
          {
            while (1)
            {
              v20 = v18[1];
              if (v20 == v15)
              {
                if (v18[2] == v15)
                  goto LABEL_115;
              }
              else if ((v20 & (v14 - 1)) != v2)
              {
                goto LABEL_44;
              }
              v18 = (_QWORD *)*v18;
              if (!v18)
                goto LABEL_44;
            }
          }
          do
          {
            v19 = v18[1];
            if (v19 == v15)
            {
              if (v18[2] == v15)
                goto LABEL_115;
            }
            else
            {
              if (v19 >= v14)
                v19 %= v14;
              if (v19 != v2)
                break;
            }
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
      }
    }
LABEL_44:
    v21 = operator new(0x18uLL);
    *v21 = 0;
    v21[1] = v15;
    v21[2] = v15;
    v22 = (float)((unint64_t)v13 + 1);
    if (v14 && (float)(v63 * (float)v14) >= v22)
    {
      v23 = __p[0];
      v24 = (_QWORD *)*((_QWORD *)__p[0] + v2);
      if (v24)
        goto LABEL_47;
      goto LABEL_107;
    }
    v25 = (v14 & (v14 - 1)) != 0;
    if (v14 < 3)
      v25 = 1;
    v26 = v25 | (2 * v14);
    v27 = vcvtps_u32_f32(v22 / v63);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = (unint64_t)__p[1];
    }
    if (prime > v14)
      goto LABEL_58;
    if (prime < v14)
    {
      v39 = vcvtps_u32_f32((float)(unint64_t)v62[1] / v63);
      if (v14 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < v14)
      {
        if (!prime)
        {
          v46 = __p[0];
          __p[0] = 0;
          if (v46)
            operator delete(v46);
          v14 = 0;
          __p[1] = 0;
          v45 = -1;
          goto LABEL_106;
        }
LABEL_58:
        if (prime >> 61)
          sub_207CA3AB8();
        v29 = operator new(8 * prime);
        v30 = __p[0];
        __p[0] = v29;
        if (v30)
          operator delete(v30);
        v31 = 0;
        __p[1] = (void *)prime;
        do
          *((_QWORD *)__p[0] + v31++) = 0;
        while (prime != v31);
        v32 = (_QWORD **)v62[0];
        if (!v62[0])
          goto LABEL_90;
        v33 = *((_QWORD *)v62[0] + 1);
        v34 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v35 = v33 & v34;
          *((_QWORD *)__p[0] + v35) = v62;
          for (i = *v32; *v32; i = *v32)
          {
            v37 = i[1] & v34;
            if (v37 == v35)
            {
              v32 = (_QWORD **)i;
            }
            else if (*((_QWORD *)__p[0] + v37))
            {
              *v32 = (_QWORD *)*i;
              v38 = 8 * v37;
              *i = **(_QWORD **)((char *)__p[0] + v38);
              **(_QWORD **)((char *)__p[0] + v38) = i;
            }
            else
            {
              *((_QWORD *)__p[0] + v37) = v32;
              v32 = (_QWORD **)i;
              v35 = v37;
            }
          }
          goto LABEL_90;
        }
        if (v33 >= prime)
          v33 %= prime;
        *((_QWORD *)__p[0] + v33) = v62;
        v42 = *v32;
        if (!*v32)
        {
LABEL_90:
          v14 = prime;
          v45 = prime - 1;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_91;
          goto LABEL_106;
        }
        while (1)
        {
          v44 = v42[1];
          if (v44 >= prime)
            v44 %= prime;
          if (v44 == v33)
            goto LABEL_84;
          if (*((_QWORD *)__p[0] + v44))
          {
            *v32 = (_QWORD *)*v42;
            v43 = 8 * v44;
            *v42 = **(_QWORD **)((char *)__p[0] + v43);
            **(_QWORD **)((char *)__p[0] + v43) = v42;
            v42 = v32;
LABEL_84:
            v32 = (_QWORD **)v42;
            v42 = (_QWORD *)*v42;
            if (!v42)
              goto LABEL_90;
          }
          else
          {
            *((_QWORD *)__p[0] + v44) = v32;
            v32 = (_QWORD **)v42;
            v42 = (_QWORD *)*v42;
            v33 = v44;
            if (!v42)
              goto LABEL_90;
          }
        }
      }
      v14 = (unint64_t)__p[1];
    }
    v45 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
LABEL_91:
      if (v14 <= v15)
      {
        v2 = v15 % v14;
        v23 = __p[0];
        v24 = (_QWORD *)*((_QWORD *)__p[0] + v15 % v14);
        if (v24)
          goto LABEL_47;
      }
      else
      {
        v2 = v15;
        v23 = __p[0];
        v24 = (_QWORD *)*((_QWORD *)__p[0] + v15);
        if (v24)
          goto LABEL_47;
      }
      goto LABEL_107;
    }
LABEL_106:
    v2 = v45 & v15;
    v23 = __p[0];
    v24 = (_QWORD *)*((_QWORD *)__p[0] + (v45 & v15));
    if (v24)
    {
LABEL_47:
      *v21 = *v24;
LABEL_113:
      *v24 = v21;
      goto LABEL_114;
    }
LABEL_107:
    *v21 = v62[0];
    v62[0] = v21;
    v23[v2] = v62;
    if (*v21)
    {
      v47 = *(_QWORD *)(*v21 + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v47 >= v14)
          v47 %= v14;
      }
      else
      {
        v47 &= v14 - 1;
      }
      v24 = (char *)__p[0] + 8 * v47;
      goto LABEL_113;
    }
LABEL_114:
    v13 = ++v62[1];
LABEL_115:
    v11 += 1344;
  }
  while (v11 != v12);
  if (v13 == (void *)-1)
  {
LABEL_120:
    v49 = 0;
    goto LABEL_121;
  }
  if (v14)
  {
    v48 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      v49 = 0;
      v57 = 0;
      do
      {
        v59 = v57;
        if (v57 >= v14)
          v59 = v57 % v14;
        v58 = (_QWORD *)*((_QWORD *)__p[0] + v59);
        if (v58)
        {
          while (1)
          {
            v58 = (_QWORD *)*v58;
            if (!v58)
              break;
            v60 = v58[1];
            if (v57 == v60)
            {
              if (v58[2] == v57)
                break;
            }
            else
            {
              if (v60 >= v14)
                v60 %= v14;
              if (v60 != v59)
              {
                v58 = 0;
                break;
              }
            }
          }
        }
        if (!v58)
          v49 = v57;
        v55 = v57++ == (_QWORD)v13;
      }
      while (!v55);
    }
    else
    {
      v49 = 0;
      v50 = 0;
      do
      {
        v54 = (_QWORD *)*((_QWORD *)__p[0] + (v50 & v48));
        if (v54)
        {
          while (1)
          {
            v54 = (_QWORD *)*v54;
            if (!v54)
              break;
            v56 = v54[1];
            if (v50 == v56)
            {
              if (v54[2] == v50)
                break;
            }
            else if ((v56 & v48) != (v50 & v48))
            {
              v54 = 0;
              break;
            }
          }
        }
        if (!v54)
          v49 = v50;
        v55 = v50++ == (_QWORD)v13;
      }
      while (!v55);
    }
  }
  else
  {
    v49 = (unint64_t)v13;
  }
LABEL_121:
  v51 = v62[0];
  if (v62[0])
  {
    do
    {
      v52 = (_QWORD *)*v51;
      operator delete(v51);
      v51 = v52;
    }
    while (v52);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v49;
}

void sub_207DF4490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  void *v11;
  _QWORD *v13;
  _QWORD *v14;

  operator delete(v11);
  v13 = __p;
  if (__p)
  {
    do
    {
      v14 = (_QWORD *)*v13;
      operator delete(v13);
      v13 = v14;
    }
    while (v14);
  }
  if (a9)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF44D8(int8x8_t *a1, unint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  uint64_t *v27;

  v26 = a2;
  v24 = a4;
  v25 = a3;
  v22 = a6;
  v23 = a5;
  v21 = a7;
  v13 = sub_207DF3DC4(a1, a2);
  v20 = v13;
  v27 = (uint64_t *)&v26;
  v14 = sub_207DF64D4((uint64_t)&a1[2], &v26, (uint64_t)&unk_20822AD51, &v27);
  v15 = v14;
  v16 = (uint64_t *)(*(_QWORD *)a1)++;
  v27 = v16;
  v17 = v14[4];
  if (v17 >= v14[5])
  {
    v18 = sub_207DF4754(v14 + 3, (uint64_t *)&v26, (uint64_t *)&v27, (uint64_t *)&v20, &v25, &v24, &v23, &v22, &v21);
  }
  else
  {
    sub_207DEC7E8(v14[4], v26, (uint64_t)v16, v13, a3, a4, a5, a6, a7);
    v18 = v17 + 1344;
    v15[4] = v17 + 1344;
  }
  v15[4] = v18;
  return v18 - 1344;
}

void sub_207DF45F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_207DF45FC(int8x8_t *a1, unint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unint64_t v35;
  uint64_t *v36;

  v35 = a2;
  v33 = a4;
  v34 = a3;
  v31 = a6;
  v32 = a5;
  v29 = a8;
  v30 = a7;
  v27 = a10;
  v28 = a9;
  v19 = sub_207DF3DC4(a1, a2);
  v26 = v19;
  v36 = (uint64_t *)&v35;
  v20 = sub_207DF64D4((uint64_t)&a1[2], &v35, (uint64_t)&unk_20822AD51, &v36);
  v21 = v20;
  v22 = (uint64_t *)(*(_QWORD *)a1)++;
  v36 = v22;
  v23 = v20[4];
  if (v23 >= v20[5])
  {
    v24 = sub_207DF49A4(v20 + 3, (uint64_t *)&v35, (uint64_t *)&v36, (uint64_t *)&v26, &v34, &v33, &v32, &v31, &v30, &v29, &v28, &v27);
  }
  else
  {
    sub_207DECB38(v20[4], v35, (uint64_t)v22, v19, a3, a4, a5, a6, a7, a8, a9, a10);
    v24 = v23 + 1344;
    v21[4] = v23 + 1344;
  }
  v21[4] = v24;
  return v24 - 1344;
}

void sub_207DF474C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_207DF4754(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, float *a5, float *a6, float *a7, float *a8, float *a9)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  __int128 v28;

  v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 6);
  v11 = v10 + 1;
  if (v10 + 1 > 0x30C30C30C30C30)
    sub_207CA420C();
  if (0x9E79E79E79E79E7ALL * ((uint64_t)(a1[2] - *a1) >> 6) > v11)
    v11 = 0x9E79E79E79E79E7ALL * ((uint64_t)(a1[2] - *a1) >> 6);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[2] - *a1) >> 6) >= 0x18618618618618)
    v19 = 0x30C30C30C30C30;
  else
    v19 = v11;
  if (v19)
  {
    if (v19 > 0x30C30C30C30C30)
      sub_207CA3AB8();
    v20 = (char *)operator new(1344 * v19);
  }
  else
  {
    v20 = 0;
  }
  v27 = (uint64_t)&v20[1344 * v10];
  *((_QWORD *)&v28 + 1) = &v20[1344 * v19];
  sub_207DEC7E8(v27, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9);
  v21 = 0;
  v23 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v21) != v23; sub_207D08DD8(v21 + v27, v21 + i))
    v21 -= 1344;
  v25 = (void *)*a1;
  v24 = a1[1];
  *a1 = v27 + v21;
  *(_QWORD *)&v28 = v27 + 1344;
  for (*(_OWORD *)(a1 + 1) = v28; (void *)v24 != v25; v24 = sub_207D085E0(v24 - 1344))
    ;
  if (v25)
    operator delete(v25);
  return v27 + 1344;
}

void sub_207DF4910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207DF4954((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF4954(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1344;
    sub_207D085E0(i - 1344);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_207DF49A4(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  __int128 v31;

  v13 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 6);
  v14 = v13 + 1;
  if (v13 + 1 > 0x30C30C30C30C30)
    sub_207CA420C();
  if (0x9E79E79E79E79E7ALL * ((uint64_t)(a1[2] - *a1) >> 6) > v14)
    v14 = 0x9E79E79E79E79E7ALL * ((uint64_t)(a1[2] - *a1) >> 6);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[2] - *a1) >> 6) >= 0x18618618618618)
    v22 = 0x30C30C30C30C30;
  else
    v22 = v14;
  if (v22)
  {
    if (v22 > 0x30C30C30C30C30)
      sub_207CA3AB8();
    v23 = (char *)operator new(1344 * v22);
  }
  else
  {
    v23 = 0;
  }
  v30 = (uint64_t)&v23[1344 * v13];
  *((_QWORD *)&v31 + 1) = &v23[1344 * v22];
  sub_207DECB38(v30, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  v24 = 0;
  v26 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v24) != v26; sub_207D08DD8(v24 + v30, v24 + i))
    v24 -= 1344;
  v28 = (void *)*a1;
  v27 = a1[1];
  *a1 = v30 + v24;
  *(_QWORD *)&v31 = v30 + 1344;
  for (*(_OWORD *)(a1 + 1) = v31; (void *)v27 != v28; v27 = sub_207D085E0(v27 - 1344))
    ;
  if (v28)
    operator delete(v28);
  return v30 + 1344;
}

void sub_207DF4B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_207DF4954((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF4BB4(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v6 = result;
  while (2)
  {
    v7 = v6;
    v8 = v6 + 1344;
    v9 = v6 + 2688;
    v10 = (float *)(v6 - 1228);
    v11 = 1 - a3;
LABEL_3:
    v12 = a2 - v7;
    v13 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2 - v7) >> 6);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(float *)(a2 - 1228) > *(float *)(v7 + 116))
          return sub_207DF4EA8(v7, a2 - 1344);
        return result;
      case 3uLL:
        return sub_207DF555C(v7, v7 + 1344, a2 - 1344);
      case 4uLL:
        return sub_207DF6224(v7, v7 + 1344, v7 + 2688, a2 - 1344);
      case 5uLL:
        return sub_207DF4F18(v7, v7 + 1344, v7 + 2688, v7 + 4032, a2 - 1344);
      default:
        if (v12 <= 32255)
        {
          if ((a4 & 1) != 0)
            return sub_207DF50A0(v7, a2);
          else
            return sub_207DF51A4(v7, a2);
        }
        if (v11 == 1)
          return sub_207DF527C(v7, a2, a2);
        v14 = v13 >> 1;
        v15 = v7 + 1344 * (v13 >> 1);
        v16 = a2 - 1344;
        if ((unint64_t)v12 <= 0x2A000)
        {
          sub_207DF555C(v7 + 1344 * v14, v7, v16);
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          sub_207DF555C(v7, v7 + 1344 * v14, v16);
          v17 = v7 + 1344 * v14;
          v18 = v17 - 1344;
          sub_207DF555C(v8, v17 - 1344, a2 - 2688);
          v17 += 1344;
          sub_207DF555C(v9, v17, a2 - 4032);
          sub_207DF555C(v18, v15, v17);
          sub_207DF5704(v7, v15);
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        if (*v10 <= *(float *)(v7 + 116))
        {
          result = sub_207DF5774(v7, a2);
          v6 = result;
          goto LABEL_18;
        }
LABEL_11:
        v19 = sub_207DF58F0(v7, a2);
        if ((v20 & 1) == 0)
          goto LABEL_16;
        v21 = sub_207DF5A78(v7, v19);
        v6 = v19 + 1344;
        result = sub_207DF5A78(v19 + 1344, a2);
        if (!(_DWORD)result)
        {
          a3 = -v11;
          if ((v21 & 1) != 0)
            continue;
LABEL_16:
          result = sub_207DF4BB4(v7, v19, -v11, a4 & 1);
          v6 = v19 + 1344;
LABEL_18:
          a4 = 0;
          a3 = -v11;
          continue;
        }
        ++v11;
        a2 = v19;
        if ((v21 & 1) == 0)
          goto LABEL_3;
        return result;
    }
  }
}

uint64_t sub_207DF4EA8(uint64_t a1, uint64_t a2)
{
  _BYTE v5[1344];

  sub_207DF5C98((uint64_t)v5, a1);
  sub_207D463D0(a1, a2);
  sub_207D463D0(a2, (uint64_t)v5);
  return sub_207D085E0((uint64_t)v5);
}

void sub_207DF4F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF4F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _BYTE v11[1344];

  result = sub_207DF6224(a1, a2, a3, a4);
  if (*(float *)(a5 + 116) > *(float *)(a4 + 116))
  {
    sub_207DF5C98((uint64_t)v11, a4);
    sub_207D463D0(a4, a5);
    sub_207D463D0(a5, (uint64_t)v11);
    result = sub_207D085E0((uint64_t)v11);
    if (*(float *)(a4 + 116) > *(float *)(a3 + 116))
    {
      sub_207DF5C98((uint64_t)v11, a3);
      sub_207D463D0(a3, a4);
      sub_207D463D0(a4, (uint64_t)v11);
      result = sub_207D085E0((uint64_t)v11);
      if (*(float *)(a3 + 116) > *(float *)(a2 + 116))
      {
        sub_207DF5C98((uint64_t)v11, a2);
        sub_207D463D0(a2, a3);
        sub_207D463D0(a3, (uint64_t)v11);
        result = sub_207D085E0((uint64_t)v11);
        if (*(float *)(a2 + 116) > *(float *)(a1 + 116))
        {
          sub_207DF5C98((uint64_t)v11, a1);
          sub_207D463D0(a1, a2);
          sub_207D463D0(a2, (uint64_t)v11);
          return sub_207D085E0((uint64_t)v11);
        }
      }
    }
  }
  return result;
}

void sub_207DF5050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF508C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF50A0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float v12[336];

  if (result != a2)
  {
    v3 = result;
    v4 = result + 1344;
    if (result + 1344 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = *(float *)(v6 + 1460);
        v8 = *(float *)(v6 + 116);
        v6 = v4;
        if (v7 > v8)
        {
          sub_207DF5C98((uint64_t)v12, v4);
          v9 = v5;
          while (1)
          {
            sub_207D463D0(v3 + v9 + 1344, v3 + v9);
            if (!v9)
              break;
            v10 = (float *)(v3 + v9 - 1228);
            v9 -= 1344;
            if (v12[29] <= *v10)
            {
              v11 = v3 + v9 + 1344;
              goto LABEL_11;
            }
          }
          v11 = v3;
LABEL_11:
          sub_207D463D0(v11, (uint64_t)v12);
          result = sub_207D085E0((uint64_t)v12);
        }
        v4 = v6 + 1344;
        v5 += 1344;
      }
      while (v6 + 1344 != a2);
    }
  }
  return result;
}

void sub_207DF517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF51A4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8[336];

  if (result != a2)
  {
    v3 = result;
    v4 = result + 1344;
    while (v4 != a2)
    {
      v5 = v4;
      if (*(float *)(v3 + 1460) > *(float *)(v3 + 116))
      {
        sub_207DF5C98((uint64_t)v8, v4);
        do
        {
          sub_207D463D0(v3 + 1344, v3);
          v6 = v3 - 1344;
          v7 = *(float *)(v3 - 1228);
          v3 -= 1344;
        }
        while (v8[29] > v7);
        sub_207D463D0(v6 + 1344, (uint64_t)v8);
        result = sub_207D085E0((uint64_t)v8);
      }
      v4 = v5 + 1344;
      v3 = v5;
    }
  }
  return result;
}

void sub_207DF5254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF527C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[1344];
  _BYTE v24[116];
  float v25;

  if (result != a2)
  {
    v4 = a2;
    v5 = result;
    v6 = a2 - result;
    v7 = (a2 - result) / 1344;
    if (a2 - result >= 1345)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = result + 1344 * v8;
      do
      {
        result = sub_207DF6358(v5, v7, v10);
        v10 -= 1344;
        --v9;
      }
      while (v9);
    }
    if (v4 != a3)
    {
      v11 = v4;
      do
      {
        if (*(float *)(v11 + 116) > *(float *)(v5 + 116))
        {
          sub_207DF5C98((uint64_t)v24, v11);
          sub_207D463D0(v11, v5);
          sub_207D463D0(v5, (uint64_t)v24);
          sub_207D085E0((uint64_t)v24);
          result = sub_207DF6358(v5, v7, v5);
        }
        v11 += 1344;
      }
      while (v11 != a3);
    }
    if (v6 >= 1345)
    {
      v12 = (((unint64_t)v6 >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64;
      do
      {
        sub_207DF5C98((uint64_t)v23, v5);
        v14 = 0;
        v15 = v5;
        do
        {
          v16 = v15 + 1344 * v14 + 1344;
          v17 = 2 * v14;
          v14 = (2 * v14) | 1;
          v18 = v17 + 2;
          if (v18 < v12 && *(float *)(v16 + 116) > *(float *)(v16 + 1460))
          {
            v16 += 1344;
            v14 = v18;
          }
          sub_207D463D0(v15, v16);
          v15 = v16;
        }
        while (v14 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
        v4 -= 1344;
        if (v16 == v4)
        {
          sub_207D463D0(v16, (uint64_t)v23);
        }
        else
        {
          sub_207D463D0(v16, v4);
          sub_207D463D0(v4, (uint64_t)v23);
          v19 = v16 - v5 + 1344;
          if (v19 >= 1345)
          {
            v20 = (unint64_t)(((((unint64_t)v19 >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64) - 2) >> 1;
            v21 = v5 + 1344 * v20;
            if (*(float *)(v21 + 116) > *(float *)(v16 + 116))
            {
              sub_207DF5C98((uint64_t)v24, v16);
              do
              {
                v22 = v21;
                sub_207D463D0(v16, v21);
                if (!v20)
                  break;
                v20 = (v20 - 1) >> 1;
                v21 = v5 + 1344 * v20;
                v16 = v22;
              }
              while (*(float *)(v21 + 116) > v25);
              sub_207D463D0(v22, (uint64_t)v24);
              sub_207D085E0((uint64_t)v24);
            }
          }
        }
        result = sub_207D085E0((uint64_t)v23);
      }
      while (v12-- > 2);
    }
  }
  return result;
}

void sub_207DF5500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&STACK[0x540]);
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF555C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  float v6;
  float v7;
  _BYTE v8[1344];

  v5 = result;
  v6 = *(float *)(a2 + 116);
  v7 = *(float *)(a3 + 116);
  if (v6 > *(float *)(result + 116))
  {
    if (v7 <= v6)
    {
      sub_207DF5C98((uint64_t)v8, result);
      sub_207D463D0(v5, a2);
      sub_207D463D0(a2, (uint64_t)v8);
      result = sub_207D085E0((uint64_t)v8);
      if (*(float *)(a3 + 116) <= *(float *)(a2 + 116))
        return result;
      sub_207DF5C98((uint64_t)v8, a2);
      sub_207D463D0(a2, a3);
      sub_207D463D0(a3, (uint64_t)v8);
    }
    else
    {
      sub_207DF5C98((uint64_t)v8, result);
      sub_207D463D0(v5, a3);
      sub_207D463D0(a3, (uint64_t)v8);
    }
    return sub_207D085E0((uint64_t)v8);
  }
  if (v7 > v6)
  {
    sub_207DF5C98((uint64_t)v8, a2);
    sub_207D463D0(a2, a3);
    sub_207D463D0(a3, (uint64_t)v8);
    result = sub_207D085E0((uint64_t)v8);
    if (*(float *)(a2 + 116) > *(float *)(v5 + 116))
    {
      sub_207DF5C98((uint64_t)v8, v5);
      sub_207D463D0(v5, a2);
      sub_207D463D0(a2, (uint64_t)v8);
      return sub_207D085E0((uint64_t)v8);
    }
  }
  return result;
}

void sub_207DF56A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF56B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF56C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF56DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF56F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF5704(uint64_t a1, uint64_t a2)
{
  _BYTE v5[1344];

  sub_207DF5C98((uint64_t)v5, a1);
  sub_207D463D0(a1, a2);
  sub_207D463D0(a2, (uint64_t)v5);
  return sub_207D085E0((uint64_t)v5);
}

void sub_207DF5760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_207DF5774(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  float v10;
  float v11;
  float *v12;
  _BYTE v14[116];
  float v15;
  _BYTE v16[1344];

  sub_207DF5C98((uint64_t)v14, a1);
  if (v15 <= *(float *)(a2 - 1228))
  {
    v7 = a1 + 1344;
    do
    {
      v5 = v7;
      if (v7 >= a2)
        break;
      v8 = *(float *)(v7 + 116);
      v7 += 1344;
    }
    while (v15 <= v8);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4 + 1344;
      v6 = *(float *)(v4 + 1460);
      v4 += 1344;
    }
    while (v15 <= v6);
  }
  if (v5 >= a2)
  {
    v9 = a2;
  }
  else
  {
    do
    {
      v9 = a2 - 1344;
      v10 = *(float *)(a2 - 1228);
      a2 -= 1344;
    }
    while (v15 > v10);
  }
  while (v5 < v9)
  {
    sub_207DF5C98((uint64_t)v16, v5);
    sub_207D463D0(v5, v9);
    sub_207D463D0(v9, (uint64_t)v16);
    sub_207D085E0((uint64_t)v16);
    do
    {
      v11 = *(float *)(v5 + 1460);
      v5 += 1344;
    }
    while (v15 <= v11);
    do
    {
      v12 = (float *)(v9 - 1228);
      v9 -= 1344;
    }
    while (v15 > *v12);
  }
  if (v5 - 1344 != a1)
    sub_207D463D0(a1, v5 - 1344);
  sub_207D463D0(v5 - 1344, (uint64_t)v14);
  sub_207D085E0((uint64_t)v14);
  return v5;
}

void sub_207DF58C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF58D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&STACK[0x540]);
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF58F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float *v14;
  _BYTE v16[116];
  float v17;
  _BYTE v18[1344];

  sub_207DF5C98((uint64_t)v16, a1);
  v4 = 0;
  do
  {
    v5 = *(float *)(a1 + v4 + 1460);
    v4 += 1344;
  }
  while (v5 > v17);
  v6 = a1 + v4;
  v7 = a1 + v4 - 1344;
  if (v4 == 1344)
  {
    while (v6 < a2)
    {
      v8 = a2 - 1344;
      v10 = *(float *)(a2 - 1228);
      a2 -= 1344;
      if (v10 > v17)
        goto LABEL_9;
    }
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 1344;
      v9 = *(float *)(a2 - 1228);
      a2 -= 1344;
    }
    while (v9 <= v17);
  }
LABEL_9:
  if (v6 < v8)
  {
    v11 = a1 + v4;
    v12 = v8;
    do
    {
      sub_207DF5C98((uint64_t)v18, v11);
      sub_207D463D0(v11, v12);
      sub_207D463D0(v12, (uint64_t)v18);
      sub_207D085E0((uint64_t)v18);
      do
      {
        v13 = *(float *)(v11 + 1460);
        v11 += 1344;
      }
      while (v13 > v17);
      do
      {
        v14 = (float *)(v12 - 1228);
        v12 -= 1344;
      }
      while (*v14 <= v17);
    }
    while (v11 < v12);
    v7 = v11 - 1344;
  }
  if (v7 != a1)
    sub_207D463D0(a1, v7);
  sub_207D463D0(v7, (uint64_t)v16);
  sub_207D085E0((uint64_t)v16);
  return v7;
}

void sub_207DF5A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&STACK[0x540]);
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF5A78(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v14[336];

  v4 = 1;
  switch(0xCF3CF3CF3CF3CF3DLL * ((a2 - a1) >> 6))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = a2 - 1344;
      if (*(float *)(a2 - 1228) > *(float *)(a1 + 116))
      {
        sub_207DF5C98((uint64_t)v14, a1);
        sub_207D463D0(a1, v5);
        sub_207D463D0(v5, (uint64_t)v14);
        goto LABEL_17;
      }
      return v4;
    case 3uLL:
      sub_207DF555C(a1, a1 + 1344, a2 - 1344);
      return v4;
    case 4uLL:
      sub_207DF6224(a1, a1 + 1344, a1 + 2688, a2 - 1344);
      return v4;
    case 5uLL:
      sub_207DF4F18(a1, a1 + 1344, a1 + 2688, a1 + 4032, a2 - 1344);
      return v4;
    default:
      v6 = a1 + 2688;
      sub_207DF555C(a1, a1 + 1344, a1 + 2688);
      v7 = a1 + 4032;
      if (a1 + 4032 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    if (*(float *)(v7 + 116) <= *(float *)(v6 + 116))
      goto LABEL_8;
    sub_207DF5C98((uint64_t)v14, v7);
    v10 = v8;
    while (1)
    {
      sub_207D463D0(a1 + v10 + 4032, a1 + v10 + 2688);
      if (v10 == -2688)
        break;
      v11 = *(float *)(a1 + v10 + 1460);
      v10 -= 1344;
      if (v14[29] <= v11)
      {
        v12 = a1 + v10 + 4032;
        goto LABEL_15;
      }
    }
    v12 = a1;
LABEL_15:
    sub_207D463D0(v12, (uint64_t)v14);
    if (++v9 == 8)
      break;
    sub_207D085E0((uint64_t)v14);
LABEL_8:
    v6 = v7;
    v8 += 1344;
    v7 += 1344;
    if (v7 == a2)
      return 1;
  }
  v4 = v7 + 1344 == a2;
LABEL_17:
  sub_207D085E0((uint64_t)v14);
  return v4;
}

void sub_207DF5C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF5C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_207DF5C98(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  char v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 result;
  __int128 v67;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_OWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v4 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v5 = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v5;
  v6 = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 156) = v6;
  v7 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v7;
  v8 = *(_QWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 180) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v9;
  v10 = *(_QWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_QWORD *)(a1 + 204) = v10;
  v11 = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v11;
  v12 = *(_QWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_QWORD *)(a1 + 228) = v12;
  v13 = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v13;
  v14 = *(_QWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_QWORD *)(a1 + 252) = v14;
  v15 = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v15;
  v16 = *(_QWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_QWORD *)(a1 + 276) = v16;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  if (*(_BYTE *)(a2 + 300))
  {
    v17 = *(_QWORD *)(a2 + 288);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 288) = v17;
    *(_BYTE *)(a1 + 300) = 1;
  }
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 316) = 0;
  if (*(_BYTE *)(a2 + 316))
  {
    v18 = *(_QWORD *)(a2 + 304);
    *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = v18;
    *(_BYTE *)(a1 + 316) = 1;
  }
  v19 = *(_OWORD *)(a2 + 320);
  v20 = *(_OWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 320) = v19;
  *(_OWORD *)(a1 + 336) = v20;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  v21 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v21;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 420) = 0;
  if (*(_BYTE *)(a2 + 420))
  {
    v22 = *(_QWORD *)(a2 + 408);
    *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v22;
    *(_BYTE *)(a1 + 420) = 1;
  }
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 436) = 0;
  if (*(_BYTE *)(a2 + 436))
  {
    v23 = *(_QWORD *)(a2 + 424);
    *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = v23;
    *(_BYTE *)(a1 + 436) = 1;
  }
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  v24 = *(_OWORD *)(a2 + 456);
  v25 = *(_OWORD *)(a2 + 472);
  v26 = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = v26;
  *(_OWORD *)(a1 + 456) = v24;
  *(_OWORD *)(a1 + 472) = v25;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  if (*(_BYTE *)(a2 + 584))
  {
    v27 = *(_OWORD *)(a2 + 520);
    v28 = *(_OWORD *)(a2 + 536);
    v29 = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 568) = v29;
    *(_OWORD *)(a1 + 520) = v27;
    *(_OWORD *)(a1 + 536) = v28;
    *(_BYTE *)(a1 + 584) = 1;
  }
  *(_BYTE *)(a1 + 588) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  if (*(_BYTE *)(a2 + 652))
  {
    v30 = *(_OWORD *)(a2 + 588);
    v31 = *(_OWORD *)(a2 + 604);
    v32 = *(_OWORD *)(a2 + 636);
    *(_OWORD *)(a1 + 620) = *(_OWORD *)(a2 + 620);
    *(_OWORD *)(a1 + 636) = v32;
    *(_OWORD *)(a1 + 588) = v30;
    *(_OWORD *)(a1 + 604) = v31;
    *(_BYTE *)(a1 + 652) = 1;
  }
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  if (*(_BYTE *)(a2 + 720))
  {
    v33 = *(_OWORD *)(a2 + 656);
    v34 = *(_OWORD *)(a2 + 672);
    v35 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v35;
    *(_OWORD *)(a1 + 656) = v33;
    *(_OWORD *)(a1 + 672) = v34;
    *(_BYTE *)(a1 + 720) = 1;
  }
  *(_BYTE *)(a1 + 724) = 0;
  *(_BYTE *)(a1 + 788) = 0;
  if (*(_BYTE *)(a2 + 788))
  {
    v36 = *(_OWORD *)(a2 + 724);
    v37 = *(_OWORD *)(a2 + 740);
    v38 = *(_OWORD *)(a2 + 772);
    *(_OWORD *)(a1 + 756) = *(_OWORD *)(a2 + 756);
    *(_OWORD *)(a1 + 772) = v38;
    *(_OWORD *)(a1 + 724) = v36;
    *(_OWORD *)(a1 + 740) = v37;
    *(_BYTE *)(a1 + 788) = 1;
  }
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  if (*(_BYTE *)(a2 + 856))
  {
    v39 = *(_OWORD *)(a2 + 792);
    v40 = *(_OWORD *)(a2 + 808);
    v41 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v41;
    *(_OWORD *)(a1 + 792) = v39;
    *(_OWORD *)(a1 + 808) = v40;
    *(_BYTE *)(a1 + 856) = 1;
  }
  *(_BYTE *)(a1 + 860) = 0;
  *(_BYTE *)(a1 + 924) = 0;
  if (*(_BYTE *)(a2 + 924))
  {
    v42 = *(_OWORD *)(a2 + 860);
    v43 = *(_OWORD *)(a2 + 876);
    v44 = *(_OWORD *)(a2 + 908);
    *(_OWORD *)(a1 + 892) = *(_OWORD *)(a2 + 892);
    *(_OWORD *)(a1 + 908) = v44;
    *(_OWORD *)(a1 + 860) = v42;
    *(_OWORD *)(a1 + 876) = v43;
    *(_BYTE *)(a1 + 924) = 1;
  }
  v45 = *(_OWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 928) = v45;
  *(_QWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_QWORD *)(a2 + 968) = 0;
  *(_OWORD *)(a2 + 952) = 0u;
  v46 = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a2 + 976) = 0;
  *(_QWORD *)(a1 + 976) = v46;
  v47 = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a2 + 984) = 0;
  *(_QWORD *)(a1 + 984) = v47;
  v48 = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a2 + 992) = 0;
  *(_QWORD *)(a1 + 992) = v48;
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v49 = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1019) = *(_OWORD *)(a2 + 1019);
  *(_OWORD *)(a1 + 1008) = v49;
  v50 = (_DWORD *)(a1 + 1040);
  v51 = (_DWORD *)(a2 + 1040);
  *(_BYTE *)(a1 + 1040) = 0;
  v52 = *(unsigned __int8 *)(a2 + 1080);
  *(_BYTE *)(a1 + 1080) = v52;
  if (v52)
  {
    v53 = *(_BYTE *)(a2 + 1044);
    *v50 = *v51;
    *(_BYTE *)(a1 + 1044) = v53;
    *(_BYTE *)(a1 + 1048) = 0;
    *(_BYTE *)(a1 + 1072) = 0;
    if (*(_BYTE *)(a2 + 1072))
    {
      *(_QWORD *)(a1 + 1048) = 0;
      *(_QWORD *)(a1 + 1056) = 0;
      *(_QWORD *)(a1 + 1064) = 0;
      *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 1048);
      *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
      *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
      *(_QWORD *)(a2 + 1056) = 0;
      *(_QWORD *)(a2 + 1048) = 0;
      *(_QWORD *)(a2 + 1064) = 0;
      *(_BYTE *)(a1 + 1072) = 1;
    }
  }
  else
  {
    *(_BYTE *)v50 = *(_BYTE *)v51;
  }
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(_OWORD *)(a2 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a2 + 1104) = 0u;
  v54 = *(_OWORD *)(a2 + 1120);
  v55 = *(_OWORD *)(a2 + 1136);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v55;
  *(_OWORD *)(a1 + 1120) = v54;
  v56 = *(_QWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1160) = v56;
  v57 = *(_OWORD *)(a2 + 1172);
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1172) = v57;
  v58 = *(_QWORD *)(a2 + 1200);
  *(_DWORD *)(a1 + 1208) = *(_DWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1200) = v58;
  v59 = *(_QWORD *)(a2 + 1212);
  *(_DWORD *)(a1 + 1220) = *(_DWORD *)(a2 + 1220);
  *(_QWORD *)(a1 + 1212) = v59;
  v60 = *(_QWORD *)(a2 + 1224);
  *(_DWORD *)(a1 + 1232) = *(_DWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1224) = v60;
  v61 = *(_QWORD *)(a2 + 1236);
  *(_DWORD *)(a1 + 1244) = *(_DWORD *)(a2 + 1244);
  *(_QWORD *)(a1 + 1236) = v61;
  v62 = *(_QWORD *)(a2 + 1248);
  *(_DWORD *)(a1 + 1256) = *(_DWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1248) = v62;
  v63 = *(_QWORD *)(a2 + 1260);
  *(_DWORD *)(a1 + 1268) = *(_DWORD *)(a2 + 1268);
  *(_QWORD *)(a1 + 1260) = v63;
  v64 = *(_QWORD *)(a2 + 1272);
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1272) = v64;
  v65 = *(_QWORD *)(a2 + 1284);
  *(_DWORD *)(a1 + 1292) = *(_DWORD *)(a2 + 1292);
  *(_QWORD *)(a1 + 1284) = v65;
  result = *(__n128 *)(a2 + 1296);
  v67 = *(_OWORD *)(a2 + 1312);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(_OWORD *)(a1 + 1312) = v67;
  *(__n128 *)(a1 + 1296) = result;
  return result;
}

uint64_t sub_207DF6224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _BYTE v9[1344];

  result = sub_207DF555C(a1, a2, a3);
  if (*(float *)(a4 + 116) > *(float *)(a3 + 116))
  {
    sub_207DF5C98((uint64_t)v9, a3);
    sub_207D463D0(a3, a4);
    sub_207D463D0(a4, (uint64_t)v9);
    result = sub_207D085E0((uint64_t)v9);
    if (*(float *)(a3 + 116) > *(float *)(a2 + 116))
    {
      sub_207DF5C98((uint64_t)v9, a2);
      sub_207D463D0(a2, a3);
      sub_207D463D0(a3, (uint64_t)v9);
      result = sub_207D085E0((uint64_t)v9);
      if (*(float *)(a2 + 116) > *(float *)(a1 + 116))
      {
        sub_207DF5C98((uint64_t)v9, a1);
        sub_207D463D0(a1, a2);
        sub_207D463D0(a2, (uint64_t)v9);
        return sub_207D085E0((uint64_t)v9);
      }
    }
  }
  return result;
}

void sub_207DF631C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF6330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF6344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF6358(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  float v13[336];

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v5 = result;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xCF3CF3CF3CF3CF3DLL * ((a3 - result) >> 6)))
    {
      v8 = (0x9E79E79E79E79E7ALL * ((a3 - result) >> 6)) | 1;
      v9 = result + 1344 * v8;
      if ((uint64_t)(0x9E79E79E79E79E7ALL * ((a3 - result) >> 6) + 2) < a2
        && *(float *)(v9 + 116) > *(float *)(v9 + 1460))
      {
        v9 += 1344;
        v8 = 0x9E79E79E79E79E7ALL * ((a3 - result) >> 6) + 2;
      }
      if (*(float *)(v9 + 116) <= *(float *)(a3 + 116))
      {
        sub_207DF5C98((uint64_t)v13, a3);
        do
        {
          v10 = v9;
          sub_207D463D0(v4, v9);
          if (v6 < v8)
            break;
          v11 = 2 * v8;
          v8 = (2 * v8) | 1;
          v9 = v5 + 1344 * v8;
          v12 = v11 + 2;
          if (v12 < a2 && *(float *)(v9 + 116) > *(float *)(v9 + 1460))
          {
            v9 += 1344;
            v8 = v12;
          }
          v4 = v10;
        }
        while (*(float *)(v9 + 116) <= v13[29]);
        sub_207D463D0(v10, (uint64_t)v13);
        return sub_207D085E0((uint64_t)v13);
      }
    }
  }
  return result;
}

void sub_207DF64AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DF64C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D085E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207DF64D4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_207DF67F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D08BD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DF6804(uint64_t a1, uint64_t a2, double *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  char *v8;
  int v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  std::string v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v28;

  std::to_string(&v22, *a3);
  v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v22;
        goto LABEL_17;
      }
LABEL_15:
      v23 = a2;
      v24 = &v22;
      v25 = a2;
      v26 = &v22;
      v27 = &v22;
      v10 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v10 == -1)
        sub_207CA9F48();
      goto LABEL_16;
    }
    v9 = v8[size--];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v22.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  if (strtod((const char *)v5, 0) != *a3)
  {
    v23 = a2;
    v24 = &v22;
    v25 = a2;
    v26 = &v22;
    v27 = &v22;
    v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10 == -1)
      sub_207CA9F48();
LABEL_16:
    __p[0] = &v23;
    ((void (*)(void **, uint64_t))off_24C075DD0[v10])(__p, a2);
    goto LABEL_40;
  }
  v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v22;
  else
    v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v22.__r_.__value_.__l.__size_;
  v13 = 1;
  if (v12->__r_.__value_.__s.__data_[size] == 46)
    v13 = 2;
  v14 = v13 + size;
  if (v11 >= v14)
    v15 = v14;
  else
    v15 = v11;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = (void *)v15;
    v21 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_37;
  }
  HIBYTE(v21) = v15;
  v16 = __p;
  if (v15)
LABEL_37:
    memmove(v16, v12, v15);
  *((_BYTE *)v16 + v15) = 0;
  v23 = a2;
  v24 = (std::string *)__p;
  v25 = a2;
  v26 = (std::string *)__p;
  v27 = (std::string *)__p;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_207CA9F48();
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24C075DA0[v19])(&v28, a2);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_43;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_207DF6A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_207DF6AE8(uint64_t **result)
{
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  char v5;

  v1 = **result;
  v2 = (__int128 *)(*result)[1];
  v3 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v3 != -1)
    result = (uint64_t **)((uint64_t (*)(char *, uint64_t))off_24C075DB8[v3])(&v5, v1);
  *(_DWORD *)(v1 + 24) = -1;
  if (*((char *)v2 + 23) < 0)
  {
    result = (uint64_t **)sub_207CA40D8((_BYTE *)v1, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v4 = *v2;
    *(_QWORD *)(v1 + 16) = *((_QWORD *)v2 + 2);
    *(_OWORD *)v1 = v4;
  }
  *(_DWORD *)(v1 + 24) = 1;
  return result;
}

void sub_207DF6B84(uint64_t a1, uint64_t a2)
{
  sub_207DF6C2C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_207DF6B90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  char *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207DF6DB0((char **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
  }
  else
  {
    if (*(char *)(v3 + 23) < 0)
    {
      sub_207CA40D8(*(_BYTE **)(a2 + 8), *(void **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v5;
    }
    result = (char *)(v4 + 24);
    *(_QWORD *)(a2 + 8) = v4 + 24;
    *(_QWORD *)(a2 + 8) = v4 + 24;
  }
  return result;
}

void sub_207DF6C24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_207DF6C2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  void *v9;
  _BYTE v10[15];
  char v11;
  __int128 __p;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v14 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v14[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = v3;
  *(_QWORD *)v10 = v14[0];
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)v14 + 7);
  v11 = v4;
  memset(v14, 0, 15);
  v5 = (__int128 *)a1[1];
  if (*((char *)v5 + 23) < 0)
  {
    sub_207CA40D8(&__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v13 = *((_QWORD *)v5 + 2);
    __p = v6;
  }
  v7 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v7 != -1)
    ((void (*)(char *, uint64_t))off_24C075DB8[v7])(&v8, v2);
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v9, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v9);
    return;
  }
  operator delete((void *)__p);
  if (v11 < 0)
    goto LABEL_10;
}

void sub_207DF6D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_207DF6DB0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_207DF6F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_207DF6F84@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = (char *)operator new(0x238uLL);
  bzero(v6, 0x238uLL);
  *((_DWORD *)v6 + 8) = 1065353216;
  *((_DWORD *)v6 + 54) = 4;
  *(_QWORD *)(v6 + 220) = 0x3F8000003C888889;
  *((_DWORD *)v6 + 98) = 0;
  *(_QWORD *)(v6 + 396) = 0x3F8000003C888889;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v6 + 408) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)v6 + 53) = _Q0;
  *(_OWORD *)(v6 + 440) = xmmword_208238E80;
  *((_QWORD *)v6 + 57) = 0x3E23D70A41200000;
  *((_DWORD *)v6 + 117) = 1042536202;
  *a3 = v6;
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 56) = v12;
  *((_DWORD *)v6 + 22) = *(_DWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v6 + 10) = v13;
  *(_OWORD *)(v6 + 104) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v6 + 92) = *(_OWORD *)(a1 + 52);
  *((_QWORD *)v6 + 15) = *(_QWORD *)(a1 + 80);
  *((_DWORD *)v6 + 32) = *(_DWORD *)(a1 + 88);
  *(_QWORD *)(v6 + 132) = *(_QWORD *)(a1 + 92);
  *((_DWORD *)v6 + 35) = *(_DWORD *)(a1 + 100);
  v14 = *(_QWORD *)(a1 + 104);
  *((_DWORD *)v6 + 38) = *(_DWORD *)(a1 + 112);
  *((_QWORD *)v6 + 18) = v14;
  *((_DWORD *)v6 + 41) = *(_DWORD *)(a1 + 124);
  *(_QWORD *)(v6 + 156) = *(_QWORD *)(a1 + 116);
  *((_DWORD *)v6 + 44) = *(_DWORD *)(a1 + 136);
  *((_QWORD *)v6 + 21) = *(_QWORD *)(a1 + 128);
  *((_DWORD *)v6 + 47) = *(_DWORD *)(a1 + 148);
  *(_QWORD *)(v6 + 180) = *(_QWORD *)(a1 + 140);
  *((_DWORD *)v6 + 50) = *(_DWORD *)(a1 + 160);
  *((_QWORD *)v6 + 24) = *(_QWORD *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 164);
  *((_DWORD *)v6 + 53) = *(_DWORD *)(a1 + 172);
  *(_QWORD *)(v6 + 204) = v15;
  v16 = *a2;
  *(_OWORD *)(v6 + 232) = a2[1];
  *(_OWORD *)(v6 + 216) = v16;
  v17 = *((_QWORD *)a2 + 4);
  v18 = *((_QWORD *)a2 + 5);
  *((_DWORD *)v6 + 66) = *((_DWORD *)a2 + 12);
  *((_QWORD *)v6 + 31) = v17;
  *((_QWORD *)v6 + 32) = v18;
  result = *(__n128 *)((char *)a2 + 52);
  *(_OWORD *)(v6 + 280) = a2[4];
  *(__n128 *)(v6 + 268) = result;
  v20 = *((_QWORD *)a2 + 10);
  *((_DWORD *)v6 + 76) = *((_DWORD *)a2 + 22);
  *((_QWORD *)v6 + 37) = v20;
  v21 = *(_QWORD *)((char *)a2 + 92);
  *((_DWORD *)v6 + 79) = *((_DWORD *)a2 + 25);
  *(_QWORD *)(v6 + 308) = v21;
  v22 = *((_QWORD *)a2 + 13);
  *((_DWORD *)v6 + 82) = *((_DWORD *)a2 + 28);
  *((_QWORD *)v6 + 40) = v22;
  v23 = *(_QWORD *)((char *)a2 + 116);
  *((_DWORD *)v6 + 85) = *((_DWORD *)a2 + 31);
  *(_QWORD *)(v6 + 332) = v23;
  v24 = *((_QWORD *)a2 + 16);
  *((_DWORD *)v6 + 88) = *((_DWORD *)a2 + 34);
  *((_QWORD *)v6 + 43) = v24;
  v25 = *(_QWORD *)((char *)a2 + 140);
  *((_DWORD *)v6 + 91) = *((_DWORD *)a2 + 37);
  *(_QWORD *)(v6 + 356) = v25;
  v26 = *((_QWORD *)a2 + 19);
  *((_DWORD *)v6 + 94) = *((_DWORD *)a2 + 40);
  *((_QWORD *)v6 + 46) = v26;
  v27 = *(_QWORD *)((char *)a2 + 164);
  *((_DWORD *)v6 + 97) = *((_DWORD *)a2 + 43);
  *(_QWORD *)(v6 + 380) = v27;
  return result;
}

void sub_207DF7198(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5)
{
  double v5;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  float32x2_t v12;
  int8x16_t v13;
  float32x2_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  _DWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  _QWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  float32x2_t v52;
  BOOL v53;
  int v54;
  unint64_t v55;
  int8x8_t v56;
  uint8x8_t v57;
  unint64_t v58;
  _OWORD *v59;
  _QWORD *v60;
  float32x4_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint8x8_t v108;
  _QWORD **v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  float v113;
  float v114;
  uint64_t v115;
  _QWORD *v116;
  _BOOL8 v117;
  unint64_t v118;
  unint64_t v119;
  size_t prime;
  unint64_t v121;
  uint8x8_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _OWORD *v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  double v130;
  int v131;
  float32x4_t v132;
  float32x4_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  float32x4_t v167;
  int8x16_t v168;
  int32x4_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  uint64_t v179;
  uint64_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  _QWORD *v185;
  int v186;
  int32x4_t v187;
  int v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  _BYTE v193[32];
  __int128 v194;
  __int128 v195;

  v5 = a4.n128_f64[0];
  v7 = *(_BYTE *)(a3 + 64);
  v186 = v7;
  if (!v7)
  {
    v143 = a2;
    v8 = *(_QWORD **)(a2 + 32);
    if (!v8)
      goto LABEL_176;
LABEL_5:
    a5.n128_u8[0] = v7;
    a5.n128_u8[1] = a4.n128_u8[0];
    a5.n128_u8[2] = a4.n128_u8[1];
    a5.n128_u8[3] = a4.n128_u8[2];
    a5.n128_u8[4] = a4.n128_u8[3];
    a5.n128_u8[5] = a4.n128_u8[4];
    a5.n128_u8[6] = a4.n128_u8[5];
    a5.n128_u8[7] = a4.n128_u8[6];
    a5.n128_u8[8] = a4.n128_u8[7];
    a5.n128_u8[9] = a4.n128_u8[8];
    v179 = a1 + 256;
    v180 = a1 + 216;
    v177 = a1 + 296;
    v178 = (_OWORD *)(a1 + 268);
    v175 = a1 + 320;
    v176 = a1 + 308;
    v173 = a1 + 344;
    v174 = a1 + 332;
    v171 = a1 + 368;
    v172 = a1 + 356;
    v170 = a1 + 380;
    a5.n128_u8[10] = a4.n128_u8[9];
    v164 = a1 + 80;
    v165 = a1 + 40;
    v162 = a1 + 120;
    v163 = (_OWORD *)(a1 + 92);
    v160 = a1 + 144;
    v161 = a1 + 132;
    v158 = a1 + 168;
    v159 = a1 + 156;
    a5.n128_u8[11] = a4.n128_u8[10];
    v166 = a5;
    v156 = a1 + 192;
    v157 = a1 + 180;
    v154 = a1 + 392;
    v155 = a1 + 204;
    v152 = (_OWORD *)(a1 + 444);
    v153 = a1 + 432;
    v150 = a1 + 484;
    v151 = a1 + 472;
    v148 = a1 + 508;
    v149 = a1 + 496;
    v146 = a1 + 532;
    v147 = a1 + 520;
    v144 = a1 + 556;
    v145 = a1 + 544;
    v185 = (_QWORD *)(a1 + 16);
    while (v186)
    {
      v187 = (int32x4_t)v166;
      v9 = v8[3];
      v10 = v8[4];
      if (v9 != v10)
        goto LABEL_11;
LABEL_6:
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_176;
    }
    v11 = v187;
    v11.i8[0] = 0;
    v187 = v11;
    v9 = v8[3];
    v10 = v8[4];
    if (v9 == v10)
      goto LABEL_6;
LABEL_11:
    v12 = (float32x2_t)vzip1q_s32(v187, v169).u64[0];
    v13 = (int8x16_t)vnegq_f32(v167);
    v14 = vmul_n_f32(v12, *(float *)v13.i32);
    *(float32x2_t *)v15.f32 = v12;
    v15.i64[1] = v168.u32[0];
    v16 = (int8x16_t)vtrn2q_s32(v187, v169);
    v16.i32[2] = v168.i32[1];
    v17 = (int8x16_t)vzip2q_s32(v187, v169);
    *(float32x2_t *)v18.f32 = vmls_laneq_f32(vmls_lane_f32(v14, *(float32x2_t *)v16.i8, *(float32x2_t *)v167.f32, 1), *(float32x2_t *)v17.i8, v167, 2);
    v17.i32[2] = v168.i32[2];
    v18.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v168.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.i8, 1), *(float32x2_t *)v167.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)).u32[0]);
    v19.i32[3] = 0;
    v19.i32[0] = v16.i32[0];
    v20 = vextq_s8(vextq_s8(v16, v16, 0xCuLL), v17, 8uLL);
    v16.i64[0] = v20.i64[1];
    *(uint64_t *)((char *)v19.i64 + 4) = v20.i64[0];
    v16.i64[1] = vdupq_laneq_s32((int32x4_t)v17, 2).u32[0];
    v181 = (float32x4_t)v16;
    v182 = v19;
    v183 = v15;
    v184 = v18;
LABEL_14:
    v21 = *(_DWORD **)(v9 + 1104);
    if (*v21 == 7)
    {
      v23 = 0;
    }
    else
    {
      v22 = &v193[8];
      if (*v21 != 1)
      {
LABEL_19:
        if (v22 - v193 != 8 || *(_BYTE *)(v9 + 1320))
        {
          v24 = *(int8x8_t *)(a1 + 8);
          if (v24)
          {
            v25 = *(_QWORD *)(v9 + 40);
            v26 = (uint8x8_t)vcnt_s8(v24);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              v27 = *(_QWORD *)(v9 + 40);
              if (v25 >= *(_QWORD *)&v24)
                v27 = v25 % *(_QWORD *)&v24;
            }
            else
            {
              v27 = (*(_QWORD *)&v24 - 1) & v25;
            }
            v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
            if (v28)
            {
              v29 = (_QWORD *)*v28;
              if (v29)
              {
                if (v26.u32[0] < 2uLL)
                {
                  v30 = *(_QWORD *)&v24 - 1;
                  while (1)
                  {
                    v32 = v29[1];
                    if (v32 == v25)
                    {
                      if (v29[2] == v25)
                        goto LABEL_12;
                    }
                    else if ((v32 & v30) != v27)
                    {
                      goto LABEL_13;
                    }
                    v29 = (_QWORD *)*v29;
                    if (!v29)
                      goto LABEL_13;
                  }
                }
                while (1)
                {
                  v31 = v29[1];
                  if (v31 == v25)
                  {
                    if (v29[2] == v25)
                    {
LABEL_12:
                      sub_207DF8130((_QWORD *)a1, v25);
                      goto LABEL_13;
                    }
                  }
                  else
                  {
                    if (v31 >= *(_QWORD *)&v24)
                      v31 %= *(_QWORD *)&v24;
                    if (v31 != v27)
                      goto LABEL_13;
                  }
                  v29 = (_QWORD *)*v29;
                  if (!v29)
                    goto LABEL_13;
                }
              }
            }
          }
          goto LABEL_13;
        }
        *(_OWORD *)v193 = xmmword_208238E90;
        v33 = *v21 - 2;
        v34 = &v193[16];
        if (v33 <= 4)
        {
          v34 = &v193[16];
          if (((0x17u >> v33) & 1) != 0)
            v34 = &v193[4 * qword_208238EA0[v33]];
        }
        if (v34 - v193 == 16 || !*(_BYTE *)(v9 + 652))
          goto LABEL_13;
        v35 = (_QWORD *)(v9 + 1200);
        if (*(_BYTE *)(v9 + 441))
        {
          v36 = *(_OWORD *)v180;
          v37 = *(_OWORD *)(v180 + 16);
          *(_QWORD *)(v9 + 1152) = *(_QWORD *)(v180 + 32);
          *(_OWORD *)(v9 + 1136) = v37;
          *(_OWORD *)(v9 + 1120) = v36;
          v38 = *(_QWORD *)v179;
          *(_DWORD *)(v9 + 1168) = *(_DWORD *)(v179 + 8);
          *(_QWORD *)(v9 + 1160) = v38;
          v39 = *(float32x4_t *)v178;
          v40 = *(float32x4_t *)((char *)v178 + 12);
          *(float32x4_t *)(v9 + 1184) = v40;
          *(float32x4_t *)(v9 + 1172) = v39;
          v41 = *(_QWORD *)v177;
          *(_DWORD *)(v9 + 1208) = *(_DWORD *)(v177 + 8);
          *v35 = v41;
          v42 = *(_QWORD *)v176;
          *(_DWORD *)(v9 + 1220) = *(_DWORD *)(v176 + 8);
          *(_QWORD *)(v9 + 1212) = v42;
          v43 = *(_QWORD *)v175;
          *(_DWORD *)(v9 + 1232) = *(_DWORD *)(v175 + 8);
          *(_QWORD *)(v9 + 1224) = v43;
          v44 = *(_QWORD *)v174;
          *(_DWORD *)(v9 + 1244) = *(_DWORD *)(v174 + 8);
          *(_QWORD *)(v9 + 1236) = v44;
          v45 = *(_QWORD *)v173;
          *(_DWORD *)(v9 + 1256) = *(_DWORD *)(v173 + 8);
          *(_QWORD *)(v9 + 1248) = v45;
          v46 = *(_QWORD *)v172;
          *(_DWORD *)(v9 + 1268) = *(_DWORD *)(v172 + 8);
          *(_QWORD *)(v9 + 1260) = v46;
          v47 = *(_QWORD *)v171;
          *(_DWORD *)(v9 + 1280) = *(_DWORD *)(v171 + 8);
          *(_QWORD *)(v9 + 1272) = v47;
          v48 = *(_QWORD *)v170;
          *(_DWORD *)(v9 + 1292) = *(_DWORD *)(v170 + 8);
          *(_QWORD *)(v9 + 1284) = v48;
          v49 = v9 + 1120;
          if (*(_DWORD *)(v9 + 1120) != 5)
            goto LABEL_50;
        }
        else
        {
          v59 = (_OWORD *)(v9 + 1120);
          v60 = (_QWORD *)(v9 + 1160);
          v61 = (float32x4_t *)(v9 + 1172);
          v62 = (_QWORD *)(v9 + 1212);
          v63 = (_QWORD *)(v9 + 1224);
          v64 = (_QWORD *)(v9 + 1236);
          v65 = (_QWORD *)(v9 + 1248);
          v66 = (_QWORD *)(v9 + 1260);
          v67 = (_QWORD *)(v9 + 1272);
          if (*(_BYTE *)(v9 + 442))
          {
            v68 = *(_OWORD *)v165;
            v69 = *(_OWORD *)(v165 + 16);
            *(_QWORD *)(v9 + 1152) = *(_QWORD *)(v165 + 32);
            *v59 = v68;
            *(_OWORD *)(v9 + 1136) = v69;
            v70 = *(_QWORD *)v164;
            *(_DWORD *)(v9 + 1168) = *(_DWORD *)(v164 + 8);
            *v60 = v70;
            v39 = *(float32x4_t *)v163;
            v40 = *(float32x4_t *)((char *)v163 + 12);
            *(float32x4_t *)(v9 + 1184) = v40;
            *v61 = v39;
            v71 = *(_QWORD *)v162;
            *(_DWORD *)(v9 + 1208) = *(_DWORD *)(v162 + 8);
            *v35 = v71;
            v72 = *(_QWORD *)v161;
            *(_DWORD *)(v9 + 1220) = *(_DWORD *)(v161 + 8);
            *v62 = v72;
            v73 = *(_QWORD *)v160;
            *(_DWORD *)(v9 + 1232) = *(_DWORD *)(v160 + 8);
            *v63 = v73;
            v74 = *(_QWORD *)v159;
            *(_DWORD *)(v9 + 1244) = *(_DWORD *)(v159 + 8);
            *v64 = v74;
            v75 = *(_QWORD *)v158;
            *(_DWORD *)(v9 + 1256) = *(_DWORD *)(v158 + 8);
            *v65 = v75;
            v76 = *(_QWORD *)v157;
            *(_DWORD *)(v9 + 1268) = *(_DWORD *)(v157 + 8);
            *v66 = v76;
            v77 = *(_QWORD *)v156;
            *(_DWORD *)(v9 + 1280) = *(_DWORD *)(v156 + 8);
            *v67 = v77;
            v78 = v155;
          }
          else
          {
            v90 = *(_OWORD *)v154;
            v91 = *(_OWORD *)(v154 + 16);
            *(_QWORD *)(v9 + 1152) = *(_QWORD *)(v154 + 32);
            *v59 = v90;
            *(_OWORD *)(v9 + 1136) = v91;
            v92 = *(_QWORD *)v153;
            *(_DWORD *)(v9 + 1168) = *(_DWORD *)(v153 + 8);
            *v60 = v92;
            v39 = *(float32x4_t *)v152;
            v40 = *(float32x4_t *)((char *)v152 + 12);
            *(float32x4_t *)(v9 + 1184) = v40;
            *v61 = v39;
            v93 = *(_QWORD *)v151;
            *(_DWORD *)(v9 + 1208) = *(_DWORD *)(v151 + 8);
            *v35 = v93;
            v94 = *(_QWORD *)v150;
            *(_DWORD *)(v9 + 1220) = *(_DWORD *)(v150 + 8);
            *v62 = v94;
            v95 = *(_QWORD *)v149;
            *(_DWORD *)(v9 + 1232) = *(_DWORD *)(v149 + 8);
            *v63 = v95;
            v96 = *(_QWORD *)v148;
            *(_DWORD *)(v9 + 1244) = *(_DWORD *)(v148 + 8);
            *v64 = v96;
            v97 = *(_QWORD *)v147;
            *(_DWORD *)(v9 + 1256) = *(_DWORD *)(v147 + 8);
            *v65 = v97;
            v98 = *(_QWORD *)v146;
            *(_DWORD *)(v9 + 1268) = *(_DWORD *)(v146 + 8);
            *v66 = v98;
            v99 = *(_QWORD *)v145;
            *(_DWORD *)(v9 + 1280) = *(_DWORD *)(v145 + 8);
            *v67 = v99;
            v78 = v144;
          }
          v100 = *(_QWORD *)v78;
          *(_DWORD *)(v9 + 1292) = *(_DWORD *)(v78 + 8);
          *(_QWORD *)(v9 + 1284) = v100;
          v49 = v9 + 1120;
          if (*(_DWORD *)(v9 + 1120) != 5)
          {
LABEL_50:
            if (*(_BYTE *)(v9 + 1024))
              v53 = 1;
            else
              v53 = *(_BYTE *)(v9 + 440) == 0;
            v54 = v53;
            v55 = *(_QWORD *)(v9 + 40);
            v56 = *(int8x8_t *)(a1 + 8);
            if (!*(_QWORD *)&v56)
              goto LABEL_78;
            v57 = (uint8x8_t)vcnt_s8(v56);
            v57.i16[0] = vaddlv_u8(v57);
            if (v57.u32[0] > 1uLL)
            {
              v58 = *(_QWORD *)(v9 + 40);
              if (v55 >= *(_QWORD *)&v56)
                v58 = v55 % *(_QWORD *)&v56;
            }
            else
            {
              v58 = (*(_QWORD *)&v56 - 1) & v55;
            }
            v79 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v58);
            if (!v79 || (v80 = (_QWORD *)*v79) == 0)
            {
LABEL_78:
              sub_207DEDC2C(v49, (uint64_t *)&v189);
              *(_QWORD *)v193 = v55;
              *(float32x4_t *)&v193[8] = v189;
              v189 = 0uLL;
              sub_207DF830C(a1, v55, (uint64_t)v193);
              v84 = *(std::__shared_weak_count **)&v193[16];
              if (!*(_QWORD *)&v193[16])
                goto LABEL_82;
              v85 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
                v87 = (std::__shared_weak_count *)v189.i64[1];
                if (!v189.i64[1])
                  goto LABEL_102;
              }
              else
              {
LABEL_82:
                v87 = (std::__shared_weak_count *)v189.i64[1];
                if (!v189.i64[1])
                  goto LABEL_102;
              }
              p_shared_owners = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldaxr(p_shared_owners);
              while (__stlxr(v89 - 1, p_shared_owners));
              if (v89)
                goto LABEL_102;
LABEL_86:
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
              goto LABEL_102;
            }
            if (v57.u32[0] < 2uLL)
            {
              v81 = *(_QWORD *)&v56 - 1;
              while (1)
              {
                v83 = v80[1];
                if (v83 == v55)
                {
                  if (v80[2] == v55)
                    goto LABEL_92;
                }
                else if ((v83 & v81) != v58)
                {
                  goto LABEL_78;
                }
                v80 = (_QWORD *)*v80;
                if (!v80)
                  goto LABEL_78;
              }
            }
            while (1)
            {
              v82 = v80[1];
              if (v82 == v55)
              {
                if (v80[2] == v55)
                {
LABEL_92:
                  if (*(unsigned __int8 *)(v9 + 1034) != v54)
                  {
                    sub_207DF8130((_QWORD *)a1, *(_QWORD *)(v9 + 40));
                    v55 = *(_QWORD *)(v9 + 40);
                    sub_207DEDC2C(v49, (uint64_t *)&v189);
                    *(_QWORD *)v193 = v55;
                    *(float32x4_t *)&v193[8] = v189;
                    v189 = 0uLL;
                    sub_207DF830C(a1, v55, (uint64_t)v193);
                    v101 = *(std::__shared_weak_count **)&v193[16];
                    if (*(_QWORD *)&v193[16])
                    {
                      v102 = (unint64_t *)(*(_QWORD *)&v193[16] + 8);
                      do
                        v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                    v87 = (std::__shared_weak_count *)v189.i64[1];
                    if (v189.i64[1])
                    {
                      v104 = (unint64_t *)(v189.i64[1] + 8);
                      do
                        v105 = __ldaxr(v104);
                      while (__stlxr(v105 - 1, v104));
                      if (!v105)
                        goto LABEL_86;
                    }
                  }
LABEL_102:
                  v188 = v54;
                  v106 = *(_QWORD *)(v9 + 40);
                  v107 = *(_QWORD *)(a1 + 8);
                  if (v107)
                  {
                    v108 = (uint8x8_t)vcnt_s8((int8x8_t)v107);
                    v108.i16[0] = vaddlv_u8(v108);
                    if (v108.u32[0] > 1uLL)
                    {
                      v55 = *(_QWORD *)(v9 + 40);
                      if (v107 <= v106)
                        v55 = v106 % v107;
                    }
                    else
                    {
                      v55 = (v107 - 1) & v106;
                    }
                    v109 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v55);
                    if (v109)
                    {
                      v110 = *v109;
                      if (*v109)
                      {
                        if (v108.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v112 = v110[1];
                            if (v112 == v106)
                            {
                              if (v110[2] == v106)
                                goto LABEL_163;
                            }
                            else if ((v112 & (v107 - 1)) != v55)
                            {
                              goto LABEL_122;
                            }
                            v110 = (_QWORD *)*v110;
                            if (!v110)
                              goto LABEL_122;
                          }
                        }
                        do
                        {
                          v111 = v110[1];
                          if (v111 == v106)
                          {
                            if (v110[2] == v106)
                              goto LABEL_163;
                          }
                          else
                          {
                            if (v111 >= v107)
                              v111 %= v107;
                            if (v111 != v55)
                              break;
                          }
                          v110 = (_QWORD *)*v110;
                        }
                        while (v110);
                      }
                    }
                  }
LABEL_122:
                  v110 = operator new(0x28uLL);
                  *(_QWORD *)v193 = v110;
                  *(_QWORD *)&v193[8] = v185;
                  *v110 = 0;
                  v110[1] = v106;
                  v110[3] = 0;
                  v110[4] = 0;
                  v110[2] = v106;
                  v193[16] = 1;
                  v113 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
                  v114 = *(float *)(a1 + 32);
                  if (v107 && (float)(v114 * (float)v107) >= v113)
                  {
                    v115 = *(_QWORD *)a1;
                    v116 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v55);
                    if (v116)
                      goto LABEL_125;
LABEL_150:
                    *v110 = *v185;
                    *v185 = v110;
                    *(_QWORD *)(v115 + 8 * v55) = v185;
                    if (*v110)
                    {
                      v125 = *(_QWORD *)(*v110 + 8);
                      if ((v107 & (v107 - 1)) != 0)
                      {
                        if (v125 >= v107)
                          v125 %= v107;
                      }
                      else
                      {
                        v125 &= v107 - 1;
                      }
                      v116 = (_QWORD *)(*(_QWORD *)a1 + 8 * v125);
                      goto LABEL_161;
                    }
                  }
                  else
                  {
                    v117 = v107 < 3 || (v107 & (v107 - 1)) != 0;
                    v118 = v117 | (2 * v107);
                    v119 = vcvtps_u32_f32(v113 / v114);
                    if (v118 <= v119)
                      prime = v119;
                    else
                      prime = v118;
                    if (prime == 1)
                    {
                      prime = 2;
                    }
                    else if ((prime & (prime - 1)) != 0)
                    {
                      prime = std::__next_prime(prime);
                      v107 = *(_QWORD *)(a1 + 8);
                    }
                    if (prime > v107)
                      goto LABEL_137;
                    if (prime < v107)
                    {
                      v121 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
                      if (v107 < 3
                        || (v122 = (uint8x8_t)vcnt_s8((int8x8_t)v107), v122.i16[0] = vaddlv_u8(v122), v122.u32[0] > 1uLL))
                      {
                        v121 = std::__next_prime(v121);
                      }
                      else
                      {
                        v123 = 1 << -(char)__clz(v121 - 1);
                        if (v121 >= 2)
                          v121 = v123;
                      }
                      if (prime <= v121)
                        prime = v121;
                      if (prime < v107)
LABEL_137:
                        sub_207CA6B84(a1, prime);
                    }
                    v107 = *(_QWORD *)(a1 + 8);
                    v124 = v107 - 1;
                    if ((v107 & (v107 - 1)) != 0)
                    {
                      if (v107 <= v106)
                      {
                        v55 = v106 % v107;
                        v115 = *(_QWORD *)a1;
                        v116 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v106 % v107));
                        if (!v116)
                          goto LABEL_150;
                      }
                      else
                      {
                        v55 = v106;
                        v115 = *(_QWORD *)a1;
                        v116 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v106);
                        if (!v116)
                          goto LABEL_150;
                      }
                    }
                    else
                    {
                      v55 = v124 & v106;
                      v115 = *(_QWORD *)a1;
                      v116 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v124 & v106));
                      if (!v116)
                        goto LABEL_150;
                    }
LABEL_125:
                    *v110 = *v116;
LABEL_161:
                    *v116 = v110;
                  }
                  ++*(_QWORD *)(a1 + 24);
LABEL_163:
                  if (v188)
                  {
                    v126 = (_OWORD *)(v9 + 588);
                    if (!*(_BYTE *)(v9 + 652))
LABEL_196:
                      sub_207CA2A4C();
                  }
                  else
                  {
                    v126 = (_OWORD *)(v9 + 456);
                  }
                  v127 = v126[1];
                  *(_OWORD *)v193 = *v126;
                  *(_OWORD *)&v193[16] = v127;
                  v128 = v126[3];
                  v194 = v126[2];
                  v195 = v128;
                  v129 = v110[3];
                  if (*(_BYTE *)(v129 + 192))
                    v130 = *(double *)(v129 + 184);
                  else
                    v130 = v5 - *(float *)(v129 + 12);
                  *(double *)(v129 + 184) = v5;
                  *(_BYTE *)(v129 + 192) = 1;
                  (*(void (**)(float32x4_t *__return_ptr, uint64_t, _BYTE *, double))(*(_QWORD *)v129 + 32))(&v189, v129, v193, v5 - v130);
                  if ((v188 & 1) == 0)
                  {
                    if (!v186)
                      goto LABEL_196;
                    v189 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v183, v189.f32[0]), v182, *(float32x2_t *)v189.f32, 1), v181, v189, 2), v184, v189, 3);
                    v190 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v183, v190.f32[0]), v182, *(float32x2_t *)v190.f32, 1), v181, v190, 2), v184, v190, 3);
                    v191 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v183, v191.f32[0]), v182, *(float32x2_t *)v191.f32, 1), v181, v191, 2), v184, v191, 3);
                    v192 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v183, v192.f32[0]), v182, *(float32x2_t *)v192.f32, 1), v181, v192, 2), v184, v192, 3);
                  }
                  v131 = *(unsigned __int8 *)(v9 + 652);
                  v132 = v190;
                  *(float32x4_t *)(v9 + 588) = v189;
                  *(float32x4_t *)(v9 + 604) = v132;
                  v133 = v192;
                  *(float32x4_t *)(v9 + 620) = v191;
                  *(float32x4_t *)(v9 + 636) = v133;
                  if (!v131)
                    *(_BYTE *)(v9 + 652) = 1;
                  *(_BYTE *)(v9 + 1034) = v188;
LABEL_13:
                  v9 += 1344;
                  if (v9 == v10)
                    goto LABEL_6;
                  goto LABEL_14;
                }
              }
              else
              {
                if (v82 >= *(_QWORD *)&v56)
                  v82 %= *(_QWORD *)&v56;
                if (v82 != v58)
                  goto LABEL_78;
              }
              v80 = (_QWORD *)*v80;
              if (!v80)
                goto LABEL_78;
            }
          }
        }
        *(_QWORD *)(v9 + 1200) = *(_QWORD *)(v9 + 168);
        *(_DWORD *)(v9 + 1208) = *(_DWORD *)(v9 + 176);
        *(_QWORD *)(v49 + 92) = *(_QWORD *)(v9 + 180);
        *(_DWORD *)(v9 + 1220) = *(_DWORD *)(v9 + 188);
        *(_QWORD *)(v9 + 1224) = *(_QWORD *)(v9 + 192);
        *(_DWORD *)(v9 + 1232) = *(_DWORD *)(v9 + 200);
        *(_DWORD *)(v9 + 1244) = *(_DWORD *)(v9 + 212);
        *(_QWORD *)(v49 + 116) = *(_QWORD *)(v9 + 204);
        v50 = *(_QWORD *)(v9 + 216);
        *(_DWORD *)(v9 + 1256) = *(_DWORD *)(v9 + 224);
        *(_QWORD *)(v9 + 1248) = v50;
        *(_QWORD *)(v49 + 140) = *(_QWORD *)(v9 + 228);
        *(_DWORD *)(v9 + 1268) = *(_DWORD *)(v9 + 236);
        *(_QWORD *)(v9 + 1272) = *(_QWORD *)(v9 + 240);
        *(_DWORD *)(v9 + 1280) = *(_DWORD *)(v9 + 248);
        *(_QWORD *)(v49 + 164) = *(_QWORD *)(v9 + 252);
        *(_DWORD *)(v9 + 1292) = *(_DWORD *)(v9 + 260);
        v39.i64[0] = *(_QWORD *)(v9 + 156);
        v39.i32[2] = *(_DWORD *)(v9 + 164);
        v40.i64[0] = *(_QWORD *)(v9 + 144);
        v40.i32[2] = *(_DWORD *)(v9 + 152);
        v51 = (int8x16_t)vsubq_f32(v39, v40);
        v52 = (float32x2_t)vextq_s8(v51, v51, 8uLL).u64[0];
        *(float *)(v9 + 1188) = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), *(float32x2_t *)v51.i8, 1), v52, v52).f32[0]);
        goto LABEL_50;
      }
      v23 = 1;
    }
    v22 = &v193[4 * v23];
    goto LABEL_19;
  }
  v7 = *(_BYTE *)a3;
  a4.n128_u64[0] = *(_QWORD *)(a3 + 1);
  a4.n128_u16[4] = *(_WORD *)(a3 + 9);
  a4.n128_u8[10] = *(_BYTE *)(a3 + 11);
  a5.n128_u64[0] = *(_QWORD *)(a3 + 16);
  a5.n128_u32[2] = *(_DWORD *)(a3 + 24);
  v169 = (int32x4_t)a5;
  a5.n128_u64[0] = *(_QWORD *)(a3 + 32);
  a5.n128_u32[2] = *(_DWORD *)(a3 + 40);
  v168 = (int8x16_t)a5;
  a5.n128_u64[0] = *(_QWORD *)(a3 + 48);
  a5.n128_u32[2] = *(_DWORD *)(a3 + 56);
  v167 = (float32x4_t)a5;
  v143 = a2;
  v8 = *(_QWORD **)(a2 + 32);
  if (v8)
    goto LABEL_5;
LABEL_176:
  v134 = *(_QWORD **)(a1 + 16);
  if (v134)
  {
    do
    {
LABEL_179:
      v135 = *(_QWORD **)(v143 + 32);
      if (v135)
      {
        v136 = v135[3];
        v137 = v135[4];
        if (v136 != v137)
          goto LABEL_183;
LABEL_181:
        while (1)
        {
          v135 = (_QWORD *)*v135;
          if (!v135)
            break;
          v136 = v135[3];
          v137 = v135[4];
          if (v136 != v137)
          {
LABEL_183:
            while (*(_QWORD *)(v136 + 40) != v134[2])
            {
              v136 += 1344;
              if (v136 == v137)
                goto LABEL_181;
            }
            v134 = (_QWORD *)*v134;
            if (!v134)
              return;
            goto LABEL_179;
          }
        }
      }
      v138 = (_QWORD *)*v134;
      sub_207D46B24((uint64_t)v193, (_QWORD *)a1, v134);
      v139 = *(_QWORD **)v193;
      *(_QWORD *)v193 = 0;
      if (v139)
      {
        if (v193[16])
        {
          v140 = (std::__shared_weak_count *)v139[4];
          if (v140)
          {
            v141 = (unint64_t *)&v140->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
        }
        operator delete(v139);
      }
      v134 = v138;
    }
    while (v138);
  }
}

void sub_207DF8130(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  char v15;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *(_QWORD ***)(*a1 + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              sub_207D46B24((uint64_t)&__p, a1, v6);
              v10 = __p;
              __p = 0;
              if (v10)
              {
                if (v15)
                {
                  v11 = (std::__shared_weak_count *)v10[4];
                  if (v11)
                  {
                    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
                    do
                      v13 = __ldaxr(p_shared_owners);
                    while (__stlxr(v13 - 1, p_shared_owners));
                    if (!v13)
                    {
                      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                      std::__shared_weak_count::__release_weak(v11);
                    }
                  }
                }
                operator delete(v10);
              }
              return;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v4)
              return;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
}

uint64_t sub_207DF8290(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_207DF830C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x28uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
    goto LABEL_50;
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = v19;
  else
    prime = v18;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v21 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v21)
    goto LABEL_34;
  if (prime < *(_QWORD *)&v21)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < *(_QWORD *)&v21)
LABEL_34:
      sub_207CA6B84(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v25 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= a2)
    {
      v3 = a2 % v7;
      v26 = *(_QWORD *)a1;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (a2 % v7));
      if (!v27)
        goto LABEL_53;
LABEL_51:
      *(_QWORD *)v14 = *v27;
LABEL_59:
      *v27 = v14;
      goto LABEL_60;
    }
    v3 = a2;
LABEL_50:
    v26 = *(_QWORD *)a1;
    v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v27)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v25 & a2;
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v25 & a2));
  if (v27)
    goto LABEL_51;
LABEL_53:
  *(_QWORD *)v14 = *v13;
  *v13 = v14;
  *(_QWORD *)(v26 + 8 * v3) = v13;
  if (*(_QWORD *)v14)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_207DF8608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207DF8290((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DF861C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  float v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  float v11;
  float v12;
  int v13;
  float v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;

  v2 = *(_QWORD *)(a2 + 1104);
  if (*(_BYTE *)(a2 + 441))
    v3 = *(_BYTE *)(a2 + 652) == 0;
  else
    v3 = 1;
  v4 = v3;
  switch(*(_DWORD *)v2)
  {
    case 0:
      v5 = *(float *)(a2 + 88);
      if (v5 < *(float *)(result + 16))
        goto LABEL_36;
      v6 = *(_QWORD *)(v2 + 8);
      if (v6 >= *(_QWORD *)(result + 24) && *(_DWORD *)(a2 + 928) == 6)
        goto LABEL_72;
      *(_DWORD *)v2 = 1;
      if (v5 <= *(float *)result)
        goto LABEL_61;
      *(_QWORD *)(v2 + 8) = v6 + 1;
      *(_QWORD *)(v2 + 24) = 0;
      return result;
    case 1:
      if (*(_BYTE *)(a2 + 1032))
        goto LABEL_36;
      if (*(float *)(a2 + 88) >= *(float *)result)
      {
        if (*(_DWORD *)(a2 + 928) != 6)
        {
          v9 = *(_QWORD *)(result + 24);
          goto LABEL_77;
        }
        v8 = *(_QWORD *)(v2 + 8);
        v9 = *(_QWORD *)(result + 24);
LABEL_64:
        v17 = v8 + 1;
        *(_QWORD *)(v2 + 8) = v17;
        if (v17 < v9)
          goto LABEL_61;
        goto LABEL_72;
      }
      v8 = *(_QWORD *)(v2 + 8);
      v9 = *(_QWORD *)(result + 24);
      if (v8 >= v9 && *(_DWORD *)(a2 + 928) == 6)
        goto LABEL_64;
LABEL_77:
      v19 = *(_QWORD *)(v2 + 16) + 1;
      *(_QWORD *)(v2 + 16) = v19;
      if (v19 > v9)
        goto LABEL_36;
LABEL_61:
      *(_QWORD *)(v2 + 24) = 0;
      return result;
    case 2:
      *(_QWORD *)(v2 + 40) = 0;
      if (*(_BYTE *)(a2 + 1032))
        goto LABEL_38;
      v11 = *(float *)(a2 + 88);
      if (v11 >= *(float *)result)
        goto LABEL_61;
      if (v11 < *(float *)(result + 4) && *(float *)(a2 + 92) < *(float *)(result + 12))
        LOBYTE(v4) = 1;
      if ((v4 & 1) == 0)
        goto LABEL_74;
      goto LABEL_70;
    case 3:
      if (*(_BYTE *)(a2 + 1032))
        goto LABEL_38;
      v12 = *(float *)(a2 + 88);
      if (v12 >= *(float *)result)
        goto LABEL_72;
      if (*(_QWORD *)(v2 + 40) >= *(_QWORD *)(result + 56))
        goto LABEL_75;
      if (v12 < *(float *)(result + 4) && *(float *)(a2 + 92) < *(float *)(result + 12))
        goto LABEL_70;
      goto LABEL_61;
    case 4:
      if (v4)
        goto LABEL_36;
      if (*(_BYTE *)(a2 + 1032))
      {
        *(_QWORD *)(v2 + 24) = 0;
        *(_QWORD *)(v2 + 32) = 0;
        return result;
      }
      v18 = *(float *)(a2 + 88);
      if (v18 >= *(float *)result)
        goto LABEL_72;
      if (v18 >= *(float *)(result + 4) || *(float *)(a2 + 92) >= *(float *)(result + 12) && !*(_QWORD *)(v2 + 24))
        goto LABEL_74;
LABEL_70:
      *(_DWORD *)v2 = 6;
      goto LABEL_71;
    case 6:
      if (*(_BYTE *)(a2 + 1032))
      {
LABEL_38:
        *(_DWORD *)v2 = 4;
        *(_QWORD *)(v2 + 24) = 0;
      }
      else
      {
        v14 = *(float *)(a2 + 88);
        if (v14 >= *(float *)result)
        {
LABEL_72:
          *(_DWORD *)v2 = 2;
          *(_QWORD *)(v2 + 24) = 0;
        }
        else
        {
          if (v14 < *(float *)(result + 4))
            v15 = 1;
          else
            v15 = v4;
          if ((v15 & 1) != 0)
          {
            if (*(float *)(a2 + 92) < *(float *)(result + 12))
              goto LABEL_52;
            if (*(float *)(a2 + 96) >= *(float *)(result + 8))
              LOBYTE(v4) = 1;
            if ((v4 & 1) != 0)
            {
LABEL_52:
              v16 = 40;
              if (!*(_BYTE *)(a2 + 652))
                v16 = 32;
              if (*(_QWORD *)(v2 + 24) > *(_QWORD *)(result + v16) || *(_QWORD *)(v2 + 40) >= *(_QWORD *)(result + 56))
              {
LABEL_36:
                *(_DWORD *)v2 = 5;
                *(_QWORD *)(v2 + 24) = 0;
              }
              else
              {
LABEL_71:
                ++*(_QWORD *)(v2 + 24);
              }
            }
            else
            {
              *(_DWORD *)v2 = 6;
              *(_QWORD *)(v2 + 24) = 0;
              *(_QWORD *)(v2 + 24) = 1;
            }
          }
          else if (*(_QWORD *)(v2 + 40) >= *(_QWORD *)(result + 56))
          {
LABEL_75:
            *(_DWORD *)v2 = 7;
            *(_QWORD *)(v2 + 24) = 0;
          }
          else
          {
LABEL_74:
            *(_DWORD *)v2 = 3;
            *(_QWORD *)(v2 + 24) = 0;
          }
        }
      }
      return result;
    case 7:
      if (*(_BYTE *)(a2 + 1032))
      {
        v13 = 5;
      }
      else
      {
        if (*(float *)(a2 + 88) < *(float *)result)
          goto LABEL_60;
        v13 = 1;
      }
      *(_DWORD *)v2 = v13;
LABEL_60:
      *(_QWORD *)(v2 + 40) = 0;
      goto LABEL_61;
    default:
      goto LABEL_61;
  }
}

void sub_207DF8934(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  int8x16_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  float64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  int v34;
  _BOOL4 v35;
  uint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t i;
  double *v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t j;
  double *v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _DWORD *v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  uint64_t v84;
  int8x16_t v85;
  __int128 v86;
  __int128 v87;
  float64x2_t v88;
  __int128 v89;
  double v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[24];
  char v96;
  __int128 v97;
  _BYTE v98[32];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  double v104;
  __int128 v105;
  float64_t v106;
  double v107;
  float64_t v108;
  unint64_t v109;
  double v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;

  *a2 = 0;
  v4 = *(_DWORD *)(a1 + 8);
  if ((v4 - 1) < 3)
  {
    v5 = *(uint64_t **)(a1 + 16);
    if (*(_QWORD *)(a1 + 24) - (_QWORD)v5 > 0x18uLL)
      goto LABEL_5;
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Distortion.cpp", 42, (uint64_t)"calib.radial_distortion_.size() >= 4", 36, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      v5 = *(uint64_t **)(a1 + 16);
LABEL_5:
      v84 = *(_QWORD *)(a1 + 176);
      v85 = *(int8x16_t *)(a1 + 144);
      v81 = *(int8x16_t *)(a1 + 128);
      v82 = *(int8x16_t *)(a1 + 112);
      v83 = *(int8x16_t *)(a1 + 160);
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[2];
      v9 = v5[3];
      v10 = operator new(0x5A0uLL);
      v11 = v83;
      v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
      *(_QWORD *)&v12 = v85.i64[0];
      *((double *)&v12 + 1) = *(double *)vextq_s8(v85, v85, 8uLL).i64;
      *(_QWORD *)&v13 = v81.i64[0];
      *((_QWORD *)&v13 + 1) = vextq_s8(v81, v81, 8uLL).u64[0];
      *(_QWORD *)&v14 = v82.i64[0];
      *((double *)&v14 + 1) = *(double *)vextq_s8(v82, v82, 8uLL).i64;
      *v10 = v14;
      v10[1] = v13;
      v10[2] = v12;
      v10[3] = v11;
      *((_QWORD *)v10 + 8) = v84;
      *((double *)v10 + 9) = 1.0 / *(double *)v82.i64;
      *((double *)v10 + 10) = -*((double *)&v14 + 1) / (*(double *)v82.i64 * *(double *)v85.i64);
      *((double *)v10 + 11) = -(*(double *)v85.i64 * *(double *)v81.i64 - *((double *)&v14 + 1) * *((double *)&v12 + 1))
                            / (*(double *)v82.i64
                             * *(double *)v85.i64);
      *((_QWORD *)v10 + 12) = 0;
      *((double *)v10 + 13) = 1.0 / *(double *)v85.i64;
      *((double *)v10 + 14) = -*((double *)&v12 + 1) / *(double *)v85.i64;
      *((_QWORD *)v10 + 15) = 0;
      *((_QWORD *)v10 + 16) = 0;
      *(_OWORD *)((char *)v10 + 136) = xmmword_208233CB0;
      *((_QWORD *)v10 + 19) = 0x7FF8000000000000;
      *((_BYTE *)v10 + 160) = 0;
      *((_QWORD *)v10 + 21) = v6;
      *((_QWORD *)v10 + 22) = v7;
      *((_QWORD *)v10 + 23) = v8;
      *((_QWORD *)v10 + 24) = v9;
      *((_BYTE *)v10 + 468) = 0;
      *((_DWORD *)v10 + 248) = 5;
      *((_QWORD *)v10 + 125) = 0x7FF8000000000000;
      *((_QWORD *)v10 + 126) = 0xFFEFFFFFFFFFFFFFLL;
      v10[89] = xmmword_2082339B0;
      v15 = (_DWORD *)*a2;
      *a2 = v10;
      if (v15)
        sub_207D098B8((int)a2, v15);
      return;
    }
LABEL_82:
    abort();
  }
  if (v4)
    return;
  v16 = *(_DWORD *)a1;
  v17 = *(_DWORD *)(a1 + 4);
  v18 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)(*(_QWORD *)(a1 + 24) - v18) <= 0x10)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Distortion.cpp", 34, (uint64_t)"calib.radial_distortion_.size() >= 3", 36, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_82;
    }
    v18 = *(_QWORD *)(a1 + 16);
  }
  v19 = 0;
  v20 = *(double *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 160);
  v22 = *(_OWORD *)(a1 + 112);
  v23 = *(_OWORD *)(a1 + 128);
  v88 = *(float64x2_t *)(a1 + 144);
  v89 = v21;
  v86 = v22;
  v87 = v23;
  v24 = vmuld_n_f64(v88.f64[0], *(double *)&v22);
  v25 = 1.0 / *(double *)&v22;
  v90 = v20;
  *(double *)&v91 = 1.0 / *(double *)&v22;
  v26 = -*((double *)&v22 + 1) / v24;
  v27 = v88.f64[1];
  v28 = -(vmuld_n_f64(v88.f64[0], *(double *)&v23) - vmuld_lane_f64(*((double *)&v22 + 1), v88, 1)) / v24;
  *((double *)&v91 + 1) = v26;
  v92 = *(unint64_t *)&v28;
  v29 = 1.0 / v88.f64[0];
  v30 = -v88.f64[1] / v88.f64[0];
  *(double *)&v93 = 1.0 / v88.f64[0];
  *((double *)&v93 + 1) = v30;
  v94 = 0uLL;
  *(_QWORD *)&v95[8] = 0x7FF8000000000000;
  *(_QWORD *)&v95[16] = 0x7FF8000000000000;
  v96 = 0;
  *(_QWORD *)v98 = 0x7FF8000000000000;
  v97 = xmmword_208238ED8;
  *(int64x2_t *)&v98[8] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)&v98[24] = 0x200000003;
  v99 = *(_OWORD *)&v98[8];
  v100 = *(_OWORD *)&v98[8];
  v31 = *(_QWORD *)(v18 + 16);
  v97 = *(_OWORD *)v18;
  *(_QWORD *)v98 = v31;
  if (*(double *)(v18 + 16) == 0.0)
    v32 = 2;
  else
    v32 = 3;
  v33 = *(double *)(a1 + 64) == 0.0 && *(double *)(a1 + 72) == 0.0;
  *(_OWORD *)&v98[8] = *(_OWORD *)(a1 + 64);
  if (v33)
    v34 = 0;
  else
    v34 = 2;
  *(_DWORD *)&v98[24] = v32;
  *(_DWORD *)&v98[28] = v34;
  *(_OWORD *)v95 = xmmword_208233CB0;
  *(_QWORD *)&v95[16] = 0x7FF8000000000000;
  v96 = 0;
  do
  {
    v35 = (*(_QWORD *)((_BYTE *)&v86 + v19) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)((_BYTE *)&v86 + v19) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    _ZF = v19 == 64;
    v19 += 8;
  }
  while (!_ZF);
  if (!v35)
    goto LABEL_42;
  v37 = 0;
  do
  {
    v38 = (*(_QWORD *)((_BYTE *)&v91 + v37) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*(_QWORD *)((_BYTE *)&v91 + v37) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
    _ZF = v37 == 64;
    v37 += 8;
  }
  while (!_ZF);
  v39 = fabs(*(double *)&v21) < 0.00000001 && v38;
  if (!v39 || fabs(*((double *)&v21 + 1)) >= 0.00000001 || fabs(v20 + -1.0) >= 0.00000001)
    goto LABEL_42;
  v40 = ((unint64_t)v97 & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000;
  if (((unint64_t)v97 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v40 = (*((_QWORD *)&v97 + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if ((*((_QWORD *)&v97 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v40 = (*(_QWORD *)v98 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (v40
    && ((*(_QWORD *)&v98[16] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
      ? (v41 = (*(_QWORD *)&v98[8] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      : (v41 = 0),
        v41))
  {
    v42 = NAN;
    v43 = NAN;
    v44 = NAN;
    v45 = NAN;
  }
  else
  {
LABEL_42:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.hpp", 1027, (uint64_t)"validate()", 10, (uint64_t)"Must have valid lens model to compute frustum extrema.", 54, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    *(_QWORD *)&v23 = v87;
    v27 = v88.f64[1];
    v26 = *((double *)&v91 + 1);
    v25 = *(double *)&v91;
    v28 = *(double *)&v92;
    v30 = *((double *)&v93 + 1);
    v29 = *(double *)&v93;
    v44 = *((double *)&v99 + 1);
    v45 = *(double *)&v99;
    v42 = *((double *)&v100 + 1);
    v43 = *(double *)&v100;
    LOBYTE(v33) = *(_DWORD *)&v98[28] == 0;
  }
  __asm { FMOV            V21.2D, #-0.5 }
  v101 = _Q21;
  v102 = v23;
  v103 = 0xBFE0000000000000;
  v104 = (double)v16 + -0.5;
  v105 = _Q21;
  v106 = v27;
  v107 = v104;
  v108 = v27;
  v109 = 0xBFE0000000000000;
  v110 = (double)v17 + -0.5;
  v111 = v23;
  v112 = v110;
  v113 = v104;
  v114 = v110;
  if (v33)
  {
    for (i = 0; i != 8; ++i)
    {
      v51 = (double *)(&v101 + i);
      v52 = v51[1];
      v53 = v28 + v25 * *v51 + v26 * v52;
      v54 = v30 + v29 * v52;
      v55 = 20;
      v56 = v54;
      v57 = v53;
      if (*(_DWORD *)&v98[24] >= 3u)
      {
        do
        {
          v59 = v56 * v56 + v57 * v57;
          v60 = *(double *)&v97 * v59 + 1.0 + v59 * (*((double *)&v97 + 1) * v59) + v59 * (v59 * (*(double *)v98 * v59));
          if (v60 == 0.0)
            v60 = 1.0;
          v57 = v53 / v60;
          v56 = v54 / v60;
          --v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v58 = *(double *)&v97 * (v56 * v56 + v57 * v57)
              + 1.0
              + (v56 * v56 + v57 * v57) * (*((double *)&v97 + 1) * (v56 * v56 + v57 * v57));
          if (v58 == 0.0)
            v58 = 1.0;
          v57 = v53 / v58;
          v56 = v54 / v58;
          --v55;
        }
        while (v55);
      }
      if (v45 >= v57)
        v45 = v57;
      if (v57 >= v44)
        v44 = v57;
      if (v43 >= v56)
        v43 = v56;
      if (v56 >= v42)
        v42 = v56;
    }
  }
  else
  {
    for (j = 0; j != 8; ++j)
    {
      v62 = (double *)(&v101 + j);
      v63 = v62[1];
      v64 = v28 + v25 * *v62 + v26 * v63;
      v65 = v30 + v29 * v63;
      v66 = 20;
      v67 = v65;
      v68 = v64;
      do
      {
        v69 = v67 * v67 + v68 * v68;
        v70 = v67 * ((*(double *)&v98[8] + *(double *)&v98[8]) * v68) + *(double *)&v98[16] * (v68 * (v68 + v68) + v69);
        v71 = v67 * ((*(double *)&v98[16] + *(double *)&v98[16]) * v68) + *(double *)&v98[8] * (v67 * (v67 + v67) + v69);
        if (*(double *)&v97 * v69 + 1.0 + v69 * (*((double *)&v97 + 1) * v69) + v69 * (v69 * (*(double *)v98 * v69)) == 0.0)
          v72 = 1.0;
        else
          v72 = *(double *)&v97 * v69 + 1.0 + v69 * (*((double *)&v97 + 1) * v69) + v69 * (v69 * (*(double *)v98 * v69));
        v68 = (v64 - v70) / v72;
        v67 = (v65 - v71) / v72;
        --v66;
      }
      while (v66);
      if (v45 >= v68)
        v45 = (v64 - v70) / v72;
      if (v68 >= v44)
        v44 = (v64 - v70) / v72;
      if (v43 >= v67)
        v43 = v67;
      if (v67 >= v42)
        v42 = v67;
    }
  }
  *(double *)&v99 = v45;
  *((double *)&v99 + 1) = v44;
  *(double *)&v100 = v43;
  *((double *)&v100 + 1) = v42;
  v73 = (char *)operator new(0x5A0uLL);
  v74 = v89;
  *((float64x2_t *)v73 + 2) = v88;
  *((_OWORD *)v73 + 3) = v74;
  v75 = v87;
  *(_OWORD *)v73 = v86;
  *((_OWORD *)v73 + 1) = v75;
  v76 = v91;
  *(_OWORD *)(v73 + 88) = v92;
  v77 = v94;
  *(_OWORD *)(v73 + 104) = v93;
  *(_OWORD *)(v73 + 120) = v77;
  *(_OWORD *)(v73 + 72) = v76;
  *((_OWORD *)v73 + 9) = *(_OWORD *)&v95[8];
  v78 = *(_OWORD *)v98;
  *(_OWORD *)(v73 + 168) = v97;
  *(_OWORD *)(v73 + 232) = v100;
  v79 = *(_OWORD *)&v98[16];
  *(_OWORD *)(v73 + 216) = v99;
  *(_OWORD *)(v73 + 200) = v79;
  *((double *)v73 + 8) = v90;
  *((_QWORD *)v73 + 17) = *(_QWORD *)v95;
  v73[160] = v96;
  *(_OWORD *)(v73 + 184) = v78;
  *((_DWORD *)v73 + 248) = 2;
  *((_QWORD *)v73 + 125) = 0x7FF8000000000000;
  *((_QWORD *)v73 + 126) = 0xFFEFFFFFFFFFFFFFLL;
  *((_OWORD *)v73 + 89) = xmmword_2082339B0;
  v80 = (_DWORD *)*a2;
  *a2 = v73;
  if (v80)
    sub_207D098B8((int)a2, v80);
}

void sub_207DF9114(_Unwind_Exception *exception_object)
{
  _DWORD **v1;
  _DWORD *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_207D098B8((int)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207DF913C(uint64_t a1, double *a2, float64x2_t *a3, char a4)
{
  double v6;
  double v7;
  double v8;
  uint64_t result;
  double v10;
  double v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v6 = a2[1];
  v11 = *a2;
  v12 = v6;
  if (*(_BYTE *)(a1 + 392) && *(_BYTE *)(a1 + 368))
  {
    v7 = v7 + (double)*(unint64_t *)(a1 + 336);
    v6 = v6 + (double)*(unint64_t *)(a1 + 344);
    v11 = v7;
    v12 = v6;
  }
  if (*(_BYTE *)(a1 + 393) && *(_BYTE *)(a1 + 384))
  {
    v8 = *(double *)(a1 + 376);
    v11 = v7 * v8;
    v12 = v6 * v8;
  }
  if ((a4 & 1) != 0)
  {
    result = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      return result;
    result = (*(uint64_t (**)(uint64_t, double *, uint64_t, float64x2_t *))(*(_QWORD *)result + 16))(result, &v11, a1 + 144, a3);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = *(_QWORD *)(a1 + 16);
    if (!result)
      return result;
    if (((*(uint64_t (**)(uint64_t, double *, uint64_t, float64x2_t *))(*(_QWORD *)result + 16))(result, &v11, a1 + 144, a3) & 1) == 0)return 0;
  }
  if (*(_BYTE *)(a1 + 393) && *(_BYTE *)(a1 + 384))
  {
    v10 = a3->f64[1];
    a3->f64[0] = a3->f64[0] / *(double *)(a1 + 376);
    a3->f64[1] = v10 / *(double *)(a1 + 376);
  }
  if (*(_BYTE *)(a1 + 392))
  {
    if (*(_BYTE *)(a1 + 368))
      *a3 = vsubq_f64(*a3, vcvtq_f64_u64(*(uint64x2_t *)(a1 + 336)));
  }
  return 1;
}

uint64_t sub_207DF92A0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  __CVBuffer *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  size_t WidthOfPlane;
  uint64_t v18;
  __CVBuffer *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  CFDictionaryRef DictionaryRepresentation;
  std::__shared_weak_count *v31;
  OSType PixelFormatType;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  VTSessionRef v70;
  __int128 v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  VTSessionRef v87;
  __int128 v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  __int128 v92;
  VTSessionRef session[2];
  uint64_t (**v94)();
  __int128 v95;
  _BYTE __p[24];
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  CFDictionaryRef v99;
  std::__shared_weak_count *v100;
  unsigned int v101;
  char v102;
  unsigned int v103[4];
  CGRect v104;

  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v10 = *(__CVBuffer **)v9;
    v11 = *(std::__shared_weak_count **)(v9 + 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v89 = xmmword_208236BB0;
  v91 = 0uLL;
  v92 = xmmword_208236BB0;
  sub_207DFF76C((VTPixelTransferSessionRef *)session);
  v95 = 0uLL;
  v94 = &off_24C08A5D8;
  v15 = *(int64x2_t *)(a4 + 32);
  v16.i64[1] = *(_QWORD *)a4;
  v16.i64[0] = *(_QWORD *)(a4 + 8);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v16), (int32x4_t)vceqzq_s64(v15)))) & 1) != 0
    || *(_QWORD *)(a4 + 32) + *(_QWORD *)(a4 + 16) > *(_QWORD *)a4
    || v15.i64[1] + *(_QWORD *)(a4 + 24) > *(_QWORD *)(a4 + 8))
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/ImageCropper.cpp", 50, (uint64_t)"false", 5, (uint64_t)&unk_20821F9EF, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    v89 = *(_OWORD *)a4;
    v91 = *(_OWORD *)(a4 + 16);
    v92 = *(_OWORD *)(a4 + 32);
  }
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v10, 0);
  v18 = 0;
  v19 = 0;
  if (v89 == __PAIR128__(CVPixelBufferGetHeightOfPlane(v10, 0), WidthOfPlane))
  {
    if ((_QWORD)v95)
    {
      v20 = *(std::__shared_weak_count **)(v95 + 8);
      if (!v20)
        goto LABEL_21;
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v24 = (uint64_t *)v95;
        if (!(_QWORD)v95)
          goto LABEL_31;
      }
      else
      {
LABEL_21:
        v24 = (uint64_t *)v95;
        if (!(_QWORD)v95)
          goto LABEL_31;
      }
      v26 = *v24;
      v25 = (std::__shared_weak_count *)v24[1];
      if (v25)
      {
        v27 = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v26)
        goto LABEL_72;
    }
LABEL_31:
    v104.origin.x = (double)(unint64_t)v91;
    v104.origin.y = (double)*((unint64_t *)&v91 + 1);
    v104.size.width = (double)(unint64_t)v92;
    v104.size.height = (double)*((unint64_t *)&v92 + 1);
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v104);
    v99 = DictionaryRepresentation;
    v31 = (std::__shared_weak_count *)operator new(0x20uLL);
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31[1].__vftable = (std::__shared_weak_count_vtbl *)DictionaryRepresentation;
    v100 = v31;
    if (VTSessionSetProperty(session[0], (CFStringRef)*MEMORY[0x24BDF9688], DictionaryRepresentation)
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/ImageCropper.cpp", 65, (uint64_t)"ret == true", 11, (uint64_t)&unk_20821F9EF, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    PixelFormatType = CVPixelBufferGetPixelFormatType(v10);
    __p[23] = 21;
    strcpy(__p, "ODT_INIT_IMAGECROPPER");
    v103[0] = v92;
    v103[1] = DWORD2(v92);
    v101 = 16;
    v102 = 1;
    sub_20815A0D8(&v97, v103, PixelFormatType, (uint64_t *)__p, 1u, &v101);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    sub_207DFEE80((CVPixelBufferPoolRef *)&v97, (uint64_t)__p);
    v33 = *(_OWORD *)&__p[8];
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
    v95 = v33;
    if (!v34)
      goto LABEL_39;
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      *(_QWORD *)__p = &off_24C08A5D8;
      v37 = *(std::__shared_weak_count **)&__p[16];
      if (!*(_QWORD *)&__p[16])
        goto LABEL_43;
    }
    else
    {
LABEL_39:
      *(_QWORD *)__p = &off_24C08A5D8;
      v37 = *(std::__shared_weak_count **)&__p[16];
      if (!*(_QWORD *)&__p[16])
        goto LABEL_43;
    }
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      v40 = v95;
      if (!(_QWORD)v95)
        goto LABEL_63;
      goto LABEL_44;
    }
LABEL_43:
    v40 = v95;
    if (!(_QWORD)v95)
      goto LABEL_63;
LABEL_44:
    v41 = *(std::__shared_weak_count **)(v40 + 8);
    if (!v41)
      goto LABEL_49;
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v45 = (uint64_t *)v95;
      if ((_QWORD)v95)
        goto LABEL_50;
    }
    else
    {
LABEL_49:
      v45 = (uint64_t *)v95;
      if ((_QWORD)v95)
      {
LABEL_50:
        v47 = *v45;
        v46 = (std::__shared_weak_count *)v45[1];
        if (v46)
        {
          v48 = (unint64_t *)&v46->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
          do
            v50 = __ldaxr(v48);
          while (__stlxr(v50 - 1, v48));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (v47)
          goto LABEL_64;
      }
    }
LABEL_63:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/ImageCropper.cpp", 72, (uint64_t)"cropped_image_ != nullptr", 25, (uint64_t)&unk_20821F9EF, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
LABEL_64:
    v51 = v98;
    if (!v98)
      goto LABEL_68;
    v52 = (unint64_t *)&v98->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
      v54 = v100;
      if (!v100)
        goto LABEL_72;
    }
    else
    {
LABEL_68:
      v54 = v100;
      if (!v100)
        goto LABEL_72;
    }
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
      v57 = v95;
      if ((_QWORD)v95)
        goto LABEL_73;
      goto LABEL_82;
    }
LABEL_72:
    v57 = v95;
    if ((_QWORD)v95)
    {
LABEL_73:
      v58 = *(std::__shared_weak_count_vtbl **)v57;
      v59 = *(std::__shared_weak_count **)(v57 + 8);
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        do
          v62 = __ldaxr(v60);
        while (__stlxr(v62 - 1, v60));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
LABEL_83:
      if (!sub_207DFFDB0((OpaqueVTPixelTransferSession **)session, (std::__shared_weak_count_vtbl *)v10, v58)
        && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/ImageCropper.cpp", 77, (uint64_t)"ret == true", 11, (uint64_t)&unk_20821F9EF, 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      if ((_QWORD)v95)
      {
        v19 = *(__CVBuffer **)v95;
        v63 = *(std::__shared_weak_count **)(v95 + 8);
        if (!v63)
          goto LABEL_91;
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
        do
          v66 = __ldaxr(v64);
        while (__stlxr(v66 - 1, v64));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
          if (v19)
            goto LABEL_92;
        }
        else
        {
LABEL_91:
          if (v19)
          {
LABEL_92:
            CVPixelBufferRetain(v19);
            v18 = 1;
            goto LABEL_93;
          }
        }
      }
      else
      {
        v19 = 0;
      }
      v18 = 0;
      v94 = &off_24C08A5D8;
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
      if (!*((_QWORD *)&v95 + 1))
        goto LABEL_100;
      goto LABEL_97;
    }
LABEL_82:
    v58 = 0;
    goto LABEL_83;
  }
LABEL_93:
  v94 = &off_24C08A5D8;
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (!*((_QWORD *)&v95 + 1))
    goto LABEL_100;
LABEL_97:
  v68 = (unint64_t *)&v67->__shared_owners_;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 - 1, v68));
  if (v69)
  {
LABEL_100:
    v70 = session[0];
    session[0] = 0;
    if (!v70)
      goto LABEL_102;
    goto LABEL_101;
  }
  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
  std::__shared_weak_count::__release_weak(v67);
  v87 = session[0];
  session[0] = 0;
  if (v87)
LABEL_101:
    ((void (*)(void))session[1])();
LABEL_102:
  if ((_DWORD)v18)
  {
    v71 = *a3;
    v72 = a3[1];
    *(_DWORD *)(a6 + 32) = *((_DWORD *)a3 + 8);
    *(_OWORD *)a6 = v71;
    *(_OWORD *)(a6 + 16) = v72;
    *(float32x2_t *)(a6 + 24) = vsub_f32(*(float32x2_t *)(a6 + 24), vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a4 + 16))));
    v73 = (std::__shared_weak_count *)operator new(0x20uLL);
    v73->__shared_owners_ = 0;
    v74 = (unint64_t *)&v73->__shared_owners_;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0709D8;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
    v90 = v73;
    v75 = (char *)operator new(0xA0uLL);
    v76 = v75;
    *((_QWORD *)v75 + 1) = 0;
    *((_QWORD *)v75 + 2) = 0;
    *(_QWORD *)v75 = off_24C08A688;
    v77 = v75 + 24;
    do
      v78 = __ldxr(v74);
    while (__stxr(v78 + 1, v74));
    *((_QWORD *)v75 + 3) = v19;
    *((_QWORD *)v75 + 4) = v73;
    do
      v79 = __ldxr(v74);
    while (__stxr(v79 + 1, v74));
    *((_DWORD *)v75 + 10) = 0;
    *((_QWORD *)v75 + 6) = 0;
    *((_QWORD *)v75 + 7) = 0;
    *((_QWORD *)v75 + 8) = 850045863;
    *(_OWORD *)(v75 + 72) = 0u;
    *(_OWORD *)(v75 + 88) = 0u;
    *(_OWORD *)(v75 + 104) = 0u;
    *((_QWORD *)v75 + 15) = 0;
    do
      v80 = __ldaxr(v74);
    while (__stlxr(v80 - 1, v74));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    *((_OWORD *)v76 + 8) = 0u;
    *((_OWORD *)v76 + 9) = 0u;
    v81 = *(std::__shared_weak_count **)(a5 + 16);
    *(_QWORD *)(a5 + 8) = v77;
    *(_QWORD *)(a5 + 16) = v76;
    if (v81)
    {
      v82 = (unint64_t *)&v81->__shared_owners_;
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    if (v90)
    {
      v84 = (unint64_t *)&v90->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
  return v18;
}

void sub_207DF9B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    sub_207C99D78(v28 - 120);
    sub_207DB7820((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_207C99D78(v28 - 120);
  sub_207DB7820((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_207DF9B7C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207DF9B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __cxa_end_catch();
  sub_207DB7820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DF9BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207DF9BB8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207DF9BD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207DF9BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_207C99D78((uint64_t)&a26);
  sub_207C99D78(v26 - 120);
  sub_207DB7820((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_207DF9C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(void))
{
  _QWORD *v18;

  sub_20815B3F4(v18);
  if (a17)
    a18();
  _Unwind_Resume(a1);
}

uint64_t sub_207DF9C64(uint64_t a1, size_t a2, size_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  size_t v13;
  size_t v14;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;

  if ((sub_20815C130(a4) < a2 || sub_20815C3B0(a4) < a3)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/ImageCropper.cpp", 174, (uint64_t)"(target_width <= pixel_buffer_input.Width()) && (target_height <= pixel_buffer_input.Height())", 94, (uint64_t)&unk_20821F9EF, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v13 = (sub_20815C130(a4) - a2) >> 1;
  v14 = (sub_20815C3B0(a4) - a3) >> 1;
  v16 = sub_20815C130(a4);
  v17 = sub_20815C3B0(a4);
  v18 = v13;
  v19 = v14;
  v20 = a2;
  v21 = a3;
  return sub_207DF92A0(v17, a4, a5, (uint64_t)&v16, a6, a7);
}

float sub_207DF9D6C(uint64_t a1, float32x2_t *a2, unint64_t a3, unint64_t a4, _BYTE *a5, char *a6, float32x2_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, unint64_t *a12, unsigned __int8 a13)
{
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float *v40;
  float32x2_t v42;
  unsigned __int32 v43;
  float32x2_t v44;
  unsigned __int32 v45;
  float32x2_t v46;
  unsigned __int32 v47;
  _BYTE v48[20];
  float v49;
  float32x2_t v50;
  float v51;
  _BYTE v52[20];
  __int128 v53;
  simd_float3x3 v54;

  v20 = a13;
  if (a13)
  {
    v21 = a12[1];
    *(_QWORD *)v52 = 0x3F80000000000000;
    sub_207DF9FD4(a12, v21, 2uLL, (uint64_t *)v52);
    if (a12[1] - *a12 <= 8)
      sub_207DFD6CC();
    v22 = a12[1];
    v20 = v22 - 16;
    v40 = (float *)(v22 - 8);
    v23 = 1;
  }
  else
  {
    v40 = 0;
    v23 = 0;
  }
  v54.columns[0].f32[0] = sub_207DFA444(a1, (uint64_t)a2, a3, a4, a5, (uint64_t)a6, a7, a8, a10, a11, (float *)v20, v23);
  v24 = v54.columns[0].f32[0];
  *(_QWORD *)&v52[12] = 0x3F00000000000000;
  *(_DWORD *)&v52[8] = 0;
  *(_QWORD *)&v53 = 0;
  *((_QWORD *)&v53 + 1) = 0x3F80000000000000;
  *(_QWORD *)v52 = 1056964608;
  sub_207CC4868((uint64_t)v52, (uint64_t)v48, v54);
  v25.i32[0] = v53;
  v26.i32[0] = HIDWORD(v53);
  v27.i32[0] = a2[1].i32[0];
  v28 = *(float32x2_t *)((char *)a2 + 12);
  v29.i32[0] = a2[2].i32[1];
  v30 = a2[3];
  v31.i32[0] = a2[4].i32[0];
  v32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v52, COERCE_FLOAT(*a2)), *(float32x2_t *)&v52[12], *a2, 1), *(float32x2_t *)((char *)&v53 + 4), v27.f32[0]);
  v33 = (float32x2_t)vextq_s8(*(int8x16_t *)v52, *(int8x16_t *)v52, 8uLL).u64[0];
  v34 = vmla_f32(vmla_lane_f32(vmul_f32(v33, *a2), v25, *a2, 1), v27, v26);
  v35 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v52, v28.f32[0]), *(float32x2_t *)&v52[12], v28, 1), *(float32x2_t *)((char *)&v53 + 4), v29.f32[0]);
  v36 = vmla_f32(vmla_lane_f32(vmul_f32(v33, v28), v25, v28, 1), v29, v26);
  v37 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v52, v30.f32[0]), *(float32x2_t *)&v52[12], v30, 1), *(float32x2_t *)((char *)&v53 + 4), v31.f32[0]);
  v38 = vmla_f32(vmla_lane_f32(vmul_f32(v33, v30), v25, v30, 1), v31, v26);
  v26.f32[0] = v49;
  v29.f32[0] = v51;
  v42 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v32, *(float *)v48), v35, *(float32x2_t *)v48, 1), v37, *(float32x4_t *)v48, 2);
  v43 = vmla_f32(vmla_lane_f32(vmul_f32(v34, *(float32x2_t *)v48), v36, *(float32x2_t *)v48, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v48, *(int8x16_t *)v48, 8uLL), v38).u32[0];
  v44 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v32, *(float *)&v48[12]), v35, *(float32x2_t *)&v48[12], 1), v37, v49);
  v45 = vmla_f32(vmla_lane_f32(vmul_f32(v34, *(float32x2_t *)&v48[12]), v36, *(float32x2_t *)&v48[12], 1), v26, v38).u32[0];
  v46 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v32, v50.f32[0]), v35, v50, 1), v37, v51);
  v47 = vmla_f32(vmla_lane_f32(vmul_f32(v34, v50), v36, v50, 1), v29, v38).u32[0];
  return (float)(v24 + sub_207DFA780(a1, (uint64_t)&v42, a3 >> 1, a4 >> 1, a5, a6, a8, a9, a10, a11, v40, v23)) * 0.5;
}

const double *sub_207DF9FD4(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  const double *v6;
  const double *v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;
  uint64_t v30;
  const double *v31;
  char *v32;
  unint64_t v33;
  const double *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  const double *v44;
  char *v45;
  size_t v46;
  void *v47;
  uint64_t v48;
  int64x2_t *v49;
  uint64_t v50;
  int64x2_t v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  double *v68;
  unint64_t v69;
  float64x2_t v71;
  float64x2_t *v72;
  unint64_t v73;

  v4 = *a1;
  v5 = a2 - *a1;
  v6 = (const double *)(*a1 + (v5 & 0xFFFFFFFFFFFFFFF8));
  if (!a3)
    return v6;
  v7 = (const double *)a4;
  v10 = v5 >> 3;
  v12 = a1[1];
  v11 = a1[2];
  if (a3 <= (uint64_t)(v11 - v12) >> 3)
  {
    v17 = (uint64_t)(v12 - (_QWORD)v6) >> 3;
    v18 = a3;
    if (a3 <= v17)
    {
      v19 = a1[1];
      v17 = a3;
      goto LABEL_44;
    }
    v19 = v12 + 8 * (a3 - v17);
    v20 = v18 * 8 - (v12 - (_QWORD)v6) - 8;
    if (v20 >= 0x98)
    {
      if (v12 >= (unint64_t)(a4 + 1)
        || (v21 = (uint64_t *)a1[1], (v20 & 0xFFFFFFFFFFFFFFF8) + v12 + 8 <= (unint64_t)a4))
      {
        v48 = (v20 >> 3) + 1;
        v21 = (uint64_t *)(v12 + 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL));
        v49 = (int64x2_t *)(v12 + 16);
        v50 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v51 = vdupq_lane_s64(*a4, 0);
          v49[-1] = v51;
          *v49 = v51;
          v49 += 2;
          v50 -= 4;
        }
        while (v50);
        if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_43:
          a1[1] = v19;
          if ((const double *)v12 == v6)
            return v6;
LABEL_44:
          v52 = (char *)&v6[v18];
          v53 = v19 - (_QWORD)&v6[v18];
          v54 = v53 >> 3;
          v55 = (uint64_t *)(v19 - v18 * 8);
          v56 = (_QWORD *)v19;
          if ((unint64_t)v55 < v12)
          {
            v57 = (v5 & 0xFFFFFFFFFFFFFFF8) + v53;
            v58 = v57 + v4 + 8;
            if (v12 > v58)
              v58 = v12;
            v59 = v58 + ~v4 - v57;
            if (v59 >= 0x58)
            {
              v56 = (_QWORD *)v19;
              if (v19 - ((v5 & 0xFFFFFFFFFFFFFFF8) + v4) - v53 >= 0x20)
              {
                v60 = (v59 >> 3) + 1;
                v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
                v55 = (uint64_t *)((char *)v55 + v61);
                v56 = (_QWORD *)(v19 + v61);
                v62 = (_OWORD *)(v19 + 16);
                v63 = (__int128 *)(8 * v54 + 8 * v10 + v4 + 16);
                v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v65 = *v63;
                  *(v62 - 1) = *(v63 - 1);
                  *v62 = v65;
                  v62 += 2;
                  v63 += 2;
                  v64 -= 4;
                }
                while (v64);
                if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_54;
              }
            }
            else
            {
              v56 = (_QWORD *)v19;
            }
            do
            {
              v66 = *v55++;
              *v56++ = v66;
            }
            while ((unint64_t)v55 < v12);
          }
LABEL_54:
          a1[1] = (unint64_t)v56;
          if ((char *)v19 != v52)
            memmove((void *)(v19 - 8 * v54), v6, v53);
          if (v6 <= v7)
          {
            if (a1[1] <= (unint64_t)v7)
              v67 = 0;
            else
              v67 = a3;
            v7 += v67;
          }
          if (v17 >= 0xA && (v6 >= v7 + 1 || (unint64_t)v7 >= v4 + (v5 & 0xFFFFFFFFFFFFFFF8) + 8 * v17))
          {
            v68 = (double *)&v6[v17 & 0xFFFFFFFFFFFFFFFCLL];
            v69 = v17 & 3;
            v71 = vld1q_dup_f64(v7);
            v72 = (float64x2_t *)(v4 + 8 * v10 + 16);
            v73 = v17 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v72[-1] = v71;
              *v72 = v71;
              v72 += 2;
              v73 -= 4;
            }
            while (v73);
            if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
              return v6;
          }
          else
          {
            v68 = (double *)v6;
            v69 = v17;
          }
          do
          {
            *v68++ = *v7;
            --v69;
          }
          while (v69);
          return v6;
        }
      }
    }
    else
    {
      v21 = (uint64_t *)a1[1];
    }
    do
      *v21++ = *a4;
    while (v21 != (uint64_t *)v19);
    goto LABEL_43;
  }
  v13 = a3 + ((uint64_t)(v12 - v4) >> 3);
  if (v13 >> 61)
    sub_207DFD6B8();
  v14 = v11 - v4;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      sub_207CA3AB8();
    v16 = (char *)operator new(8 * v15);
  }
  else
  {
    v16 = 0;
  }
  v22 = v5 >> 3;
  v23 = (unint64_t)&v16[8 * v10];
  v24 = (char *)(v23 + 8 * a3);
  v25 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v26 = (char *)v23;
  if (v25 < 0x13)
    goto LABEL_76;
  if (v23 < (unint64_t)(v7 + 1))
  {
    v26 = (char *)v23;
    if (&v16[8 * a3 + (v5 & 0xFFFFFFFFFFFFFFF8)] > (char *)v7)
      goto LABEL_76;
  }
  v27 = v25 + 1;
  v26 = (char *)(v23 + 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL));
  v28 = vdupq_lane_s64(*(_QWORD *)v7, 0);
  v29 = (int64x2_t *)&v16[8 * v22 + 16];
  v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v29[-1] = v28;
    *v29 = v28;
    v29 += 2;
    v30 -= 4;
  }
  while (v30);
  if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_76:
    do
    {
      *(double *)v26 = *v7;
      v26 += 8;
    }
    while (v26 != v24);
  }
  v31 = (const double *)*a1;
  if ((const double *)*a1 != v6)
  {
    v32 = (char *)((v5 & 0xFFFFFFFFFFFFFFF8) + v4);
    v33 = v32 - (char *)v31 - 8;
    v34 = v6;
    v35 = v23;
    if (v33 < 0x68)
      goto LABEL_77;
    v34 = v6;
    v35 = v23;
    if ((unint64_t)(v32 - &v16[v5 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_77;
    v36 = (v33 >> 3) + 1;
    v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v6[v37 / 0xFFFFFFFFFFFFFFF8];
    v35 = v23 - v37;
    v38 = 8 * v22 - 16;
    v39 = &v16[v38];
    v40 = (__int128 *)(v4 + v38);
    v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v42 = *v40;
      *((_OWORD *)v39 - 1) = *(v40 - 1);
      *(_OWORD *)v39 = v42;
      v39 -= 32;
      v40 -= 2;
      v41 -= 4;
    }
    while (v41);
    if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        v43 = *((_QWORD *)v34-- - 1);
        *(_QWORD *)(v35 - 8) = v43;
        v35 -= 8;
      }
      while (v34 != v31);
    }
    v44 = (const double *)a1[1];
    v45 = &v16[8 * v15];
    v46 = (char *)v44 - (char *)v6;
    if (v44 == v6)
      goto LABEL_33;
    goto LABEL_32;
  }
  v35 = v23;
  v45 = &v16[8 * v15];
  v46 = v12 - (_QWORD)v6;
  if ((const double *)v12 != v6)
LABEL_32:
    memmove(v24, v6, v46);
LABEL_33:
  v47 = (void *)*a1;
  *a1 = v35;
  a1[1] = (unint64_t)&v24[v46];
  a1[2] = (unint64_t)v45;
  if (v47)
    operator delete(v47);
  return (const double *)v23;
}

float sub_207DFA444(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _BYTE *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, uint64_t a9, char a10, float *a11, char a12)
{
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float32x2_t **v26;
  float32x4_t v27;
  float32x4_t v28;
  double v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float32x4_t v34;
  float v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  float32x2_t **v45[3];
  size_t v46;
  size_t v47;
  size_t v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t v52;
  uint64_t v53;

  v52 = a4;
  v53 = a3;
  v16 = *(uint64_t **)(a1 + 8);
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  v50 = v16;
  v51 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v49 = off_24C08A598;
  if (v16)
  {
    v21 = *v16;
    v20 = (std::__shared_weak_count *)v16[1];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (!v21)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    if (v21)
LABEL_11:
      sub_20815FC78((uint64_t)v50);
  }
LABEL_12:
  v48 = sub_20815C130((uint64_t)&v49);
  v47 = sub_20815C3B0((uint64_t)&v49);
  v25 = sub_20815A89C((uint64_t)&v49, 0);
  v46 = sub_20815C768((uint64_t)&v49, 0);
  if (v46 < v48
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Warping.cpp", 121, (uint64_t)"image_plane_bytes_per_row >= result_bytes_per_row", 49, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v26 = (float32x2_t **)operator new(8uLL);
  *v26 = a7;
  v45[1] = v26 + 1;
  v45[2] = v26 + 1;
  v45[0] = v26;
  v35 = sub_207DFBBE8(v25, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, a2, &v53, &v52, a5, v27, v28, v29, v30, v31, v32, v33, v34, a6, v45, a9,
          a10,
          a11,
          a12);
  operator delete(v26);
  if (v50)
  {
    v37 = *v50;
    v36 = (std::__shared_weak_count *)v50[1];
    if (v36)
    {
      v38 = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (!v37)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v37)
LABEL_21:
      sub_20815FE54((uint64_t)v50);
  }
LABEL_22:
  v49 = &off_24C08A5D8;
  v41 = v51;
  if (v51)
  {
    v42 = (unint64_t *)&v51->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v35;
}

void sub_207DFA6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207DFA700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_20815AC38(&a22);
  _Unwind_Resume(a1);
}

void sub_207DFA71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFA730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFA744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFA758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFA76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

float sub_207DFA780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, float *a11, char a12)
{
  __CVBuffer **v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  __CVBuffer *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __CVBuffer **v27;
  __CVBuffer *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void *BaseAddressOfPlane;
  __CVBuffer *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  size_t WidthOfPlane;
  std::__shared_weak_count *v40;
  __CVBuffer *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  __CVBuffer *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  std::__shared_weak_count *v51;
  __CVBuffer *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  size_t HeightOfPlane;
  _QWORD *v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  double v62;
  __int128 v63;
  float64x2_t v64;
  _BYTE *v65;
  float64x2_t *v66;
  float64x2_t v67;
  int v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  _OWORD *v73;
  unsigned int v74;
  int8x16_t v77;
  __int128 v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  int8x16_t v86;
  float64x2_t v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  _QWORD **v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  double v95;
  unint64_t v96;
  double v97;
  double v98;
  int v99;
  float v100;
  int v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float v110;
  float v111;
  BOOL v114;
  float v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  float v122;
  float v123;
  float v124;
  uint64_t v125;
  float32x4_t v126;
  unint64_t v127;
  float v129;
  float v130;
  char v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  const float *v135;
  unint64_t v136;
  unint64_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float32x4_t v141;
  unint64_t v142;
  float32x2_t *v143;
  unint64_t v144;
  float *v145;
  float v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  float *v150;
  float v151;
  float v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  _DWORD *v156;
  std::__shared_weak_count *v157;
  __CVBuffer *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  float64x2_t v166;
  float64x2_t v167;
  float32x4_t v168;
  unint64_t v169;
  float32x2_t *v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  void *v183;
  void *__p;
  _BYTE *v185;
  _QWORD *v186;
  size_t BytesPerRowOfPlane;
  uint64_t (**v188)();
  __CVBuffer **v189;
  std::__shared_weak_count *v190;
  float v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  void *v196[11];
  char v197;
  float v198;
  float v199;
  unint64_t v200;
  double v201;
  double v202;
  unint64_t v203;
  _QWORD v204[2];
  void *v205;

  v18 = *(__CVBuffer ***)(a1 + 8);
  v19 = *(std::__shared_weak_count **)(a1 + 16);
  v189 = v18;
  v190 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v188 = off_24C08A598;
  if (!v18)
    goto LABEL_19;
  v23 = *v18;
  v22 = (std::__shared_weak_count *)v18[1];
  if (!v22)
    goto LABEL_10;
  v24 = (unint64_t *)&v22->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 - 1, v24));
  if (v26)
  {
LABEL_10:
    v27 = v189;
    if (!v23)
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  v27 = v189;
  if (v23)
LABEL_11:
    sub_20815FC78((uint64_t)v27);
LABEL_12:
  if (!v27)
  {
LABEL_19:
    v28 = 0;
    goto LABEL_20;
  }
  v28 = *v27;
  v29 = (std::__shared_weak_count *)v27[1];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    do
      v32 = __ldaxr(v30);
    while (__stlxr(v32 - 1, v30));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_20:
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v28, 1uLL);
  if (v189)
  {
    v34 = *v189;
    v35 = (std::__shared_weak_count *)v189[1];
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    v34 = 0;
  }
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v34, 1uLL);
  if (v189)
  {
    v41 = *v189;
    v40 = (std::__shared_weak_count *)v189[1];
    if (v40)
    {
      v42 = (unint64_t *)&v40->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
      do
        v44 = __ldaxr(v42);
      while (__stlxr(v44 - 1, v42));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  else
  {
    v41 = 0;
  }
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v41, 1uLL);
  if (BytesPerRowOfPlane < 2 * WidthOfPlane
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Warping.cpp", 172, (uint64_t)"cbcr_plane_bytes_per_row >= result_bytes_per_row * 2u", 53, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (v189)
  {
    v46 = *v189;
    v45 = (std::__shared_weak_count *)v189[1];
    if (v45)
    {
      v47 = (unint64_t *)&v45->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    v46 = 0;
  }
  v50 = CVPixelBufferGetWidthOfPlane(v46, 1uLL);
  if (v189)
  {
    v52 = *v189;
    v51 = (std::__shared_weak_count *)v189[1];
    if (v51)
    {
      v53 = (unint64_t *)&v51->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  else
  {
    v52 = 0;
  }
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(v52, 1uLL);
  v57 = operator new(0x10uLL);
  v185 = v57 + 2;
  v186 = v57 + 2;
  *v57 = a7;
  v57[1] = a8;
  v183 = 0;
  __p = v57;
  if (!a6)
  {
    v65 = a5;
    v205 = BaseAddressOfPlane;
    goto LABEL_73;
  }
  v65 = a5;
  v66 = (float64x2_t *)operator new(0x5A0uLL);
  sub_207DFDAFC((uint64_t)v66, (uint64_t)a6);
  memcpy(&v66[62].f64[1], a6 + 1000, 0x1B8uLL);
  v196[0] = 0;
  v183 = v66;
  v68 = LODWORD(v66[62].f64[0]);
  if (v68 == -1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_185;
    }
    v68 = LODWORD(v66[62].f64[0]);
  }
  if (!v68)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821FB19, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
LABEL_185:
    abort();
  }
  v67.f64[0] = v66[4].f64[0];
  v175 = v67;
  v69 = v66[2];
  v70 = v66[3];
  v72 = *v66;
  v71 = v66[1];
  v73 = v183;
  v74 = *((_DWORD *)v183 + 248);
  if (v74 == -1)
  {
    v171 = *v66;
    v172 = v66[1];
    v173 = v66[2];
    v174 = v66[3];
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 239, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_191;
    }
    v74 = *((_DWORD *)v183 + 248);
    v69 = v173;
    v70 = v174;
    v72 = v171;
    v71 = v172;
  }
  __asm { FMOV            V0.2D, #0.5 }
  v77 = (int8x16_t)vmulq_f64(v72, _Q0);
  v59 = vmulq_f64(v71, _Q0);
  v58 = vmulq_f64(v69, _Q0);
  *(_QWORD *)&v60 = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
  *(_QWORD *)&v62 = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  *(_QWORD *)&v63 = vextq_s8(v77, v77, 8uLL).u64[0];
  *(_QWORD *)&v61 = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
  if (v74 <= 7)
  {
    *(float64_t *)&v78 = v70.f64[0];
    if (v74)
    {
      v80 = *((float64x2_t *)v183 + 2);
      v79 = *((float64x2_t *)v183 + 3);
      v81 = *(float64x2_t *)v183;
      v82 = *((float64x2_t *)v183 + 1);
      *(_QWORD *)&v83.f64[0] = v77.i64[0];
      *(_QWORD *)&v83.f64[1] = v63;
      goto LABEL_67;
    }
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1724, (uint64_t)&unk_20821FB19, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
LABEL_191:
    abort();
  }
  v80 = *((float64x2_t *)v183 + 2);
  v79 = *((float64x2_t *)v183 + 3);
  v81 = *(float64x2_t *)v183;
  v82 = *((float64x2_t *)v183 + 1);
  *(_QWORD *)&v83.f64[0] = v77.i64[0];
  *(_QWORD *)&v83.f64[1] = v63;
  *(float64_t *)&v78 = v70.f64[0];
LABEL_67:
  v70.f64[1] = v61;
  v84.f64[0] = v58.f64[0];
  v84.f64[1] = v60;
  v85.f64[0] = v59.f64[0];
  v85.f64[1] = v62;
  v86 = (int8x16_t)vabdq_f64(v83, v81);
  v87 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  v64 = (float64x2_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v87, (float64x2_t)vextq_s8(v86, v86, 8uLL)), (int32x4_t)vcgeq_f64(v87, vabdq_f64(v85, v82))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v87, vabdq_f64(v84, v80)), (int32x4_t)vcgeq_f64(v87, vabdq_f64(v70, v79)))));
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)v64)) & 1) != 0
    || (v64.f64[0] = *((float64_t *)v183 + 8), v64.f64[0] = vabdq_f64(v175, v64).f64[0], v64.f64[0] > 1.0e-10))
  {
    *(_QWORD *)&v64.f64[0] = v77.i64[0];
    *(_QWORD *)&v64.f64[1] = v63;
    *(float64_t *)&v63 = v59.f64[0];
    *((double *)&v63 + 1) = v62;
    *(float64x2_t *)v183 = v64;
    v73[1] = v63;
    *(float64_t *)&v88 = v58.f64[0];
    *((double *)&v88 + 1) = v60;
    *((double *)&v78 + 1) = v61;
    v73[2] = v88;
    v73[3] = v78;
    v60 = vmuld_n_f64(*(double *)v77.i64, v58.f64[0]);
    v61 = 1.0;
    *((_QWORD *)v73 + 8) = *(_QWORD *)&v175.f64[0];
    *((double *)v73 + 9) = 1.0 / *(double *)v77.i64;
    v62 = -*(double *)&v77.i64[1] / v60;
    LODWORD(v63) = LODWORD(v58.f64[1]);
    *((double *)v73 + 10) = v62;
    *((double *)v73 + 11) = -(vmuld_n_f64(v58.f64[0], v59.f64[0]) - vmuld_lane_f64(*(double *)&v77.i64[1], v58, 1))
                          / v60;
    *((_QWORD *)v73 + 12) = 0;
    *((double *)v73 + 13) = 1.0 / v58.f64[0];
    *((double *)v73 + 14) = -v58.f64[1] / v58.f64[0];
    *((_QWORD *)v73 + 15) = 0;
    *((_QWORD *)v73 + 16) = 0;
    HIDWORD(v58.f64[0]) = 1072693248;
    *(_OWORD *)((char *)v73 + 136) = xmmword_208233CB0;
    *((_QWORD *)v73 + 19) = 0x7FF8000000000000;
    *((_BYTE *)v73 + 160) = 0;
    a6 = (char *)v183;
    v205 = BaseAddressOfPlane;
    if (v185 - (_BYTE *)__p == 16)
      goto LABEL_73;
  }
  else
  {
    a6 = (char *)v183;
    v205 = BaseAddressOfPlane;
    if (v185 - (_BYTE *)__p == 16)
      goto LABEL_73;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 472, (uint64_t)"num_channels == output_image_data.size()", 40, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_73:
  v89 = 0;
  v197 = *v65;
  v196[0] = &v199;
  v196[1] = &v198;
  v196[2] = v204;
  v196[3] = &v205;
  v196[4] = &BytesPerRowOfPlane;
  v196[5] = &v200;
  v196[6] = &v197;
  v196[7] = &__p;
  v196[8] = &v202;
  v196[9] = &v201;
  v196[10] = &v203;
  v204[0] = 0;
  v204[1] = 0;
  v202 = 0.0;
  v203 = 0;
  v200 = 0;
  v201 = 0.0;
  v198 = (float)HeightOfPlane + -1.0;
  v199 = (float)v50 + -1.0;
  v194 = 0;
  v195 = 0;
  if (a10)
  {
    if (a6)
    {
      sub_207DFD6E0((_BOOL8)&v192, a9, v50, HeightOfPlane, (uint64_t)a6);
      v90 = (_QWORD **)v192;
      v89 = v193;
      v194 = v192;
      v195 = v193;
      if (v192)
      {
        v91 = *(_QWORD **)v192;
        if (*(_QWORD *)(v192 + 8) - *(_QWORD *)v192 != 48)
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 529, (uint64_t)"lookup_table.size() == 2", 24, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          v91 = *v90;
        }
        v92 = v91[1] - *v91;
        if (v92 != v91[4] - v91[3])
        {
          if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 533, (uint64_t)"lookup_x.size() == lookup_y.size()", 34, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
          {
            goto LABEL_188;
          }
          v92 = v91[1] - *v91;
        }
        v93 = v92 >> 2;
        if (v93 >= HeightOfPlane * v50)
        {
LABEL_85:
          if (a4 && a3)
          {
            v94 = 0;
            v95 = sqrt((double)v93 / (double)(HeightOfPlane * v50));
            v96 = (unint64_t)(v95 * (double)v50);
            v97 = v95 + -1.0;
            v98 = v97 * (double)HeightOfPlane;
            v99 = (int)(v97 * (double)v50 * 0.5);
            v100 = (float)(1 - v99);
            v101 = (int)(v98 * 0.5);
            v102 = (float)((int)v50 + v99 - 1);
            v103 = (float)(1 - v101);
            v104 = (float)((int)HeightOfPlane + v101 - 1);
            v105 = (float)v99;
            v106 = (float)v101;
            v59.f64[0] = *(float64_t *)(a2 + 24);
            LODWORD(v59.f64[1]) = *(_DWORD *)(a2 + 32);
            do
            {
              v107 = a3;
              v176 = (float32x4_t)v59;
              v108 = (float32x4_t)v59;
              do
              {
                if (v108.f32[2] == 0.0)
                  v110 = 1.0;
                else
                  v110 = 1.0 / v108.f32[2];
                *(float *)&v98 = (float)(int)((float)(v110 * v108.f32[0]) + 0.5);
                v180 = v108;
                v108.f32[0] = (float)(int)(vmuls_lane_f32(v110, *(float32x2_t *)v108.f32, 1) + 0.5);
                v111 = -1.0;
                v114 = *(float *)&v98 >= v100 && *(float *)&v98 <= v102 && v108.f32[0] >= v103 && v108.f32[0] <= v104;
                v115 = -1.0;
                if (v114)
                {
                  v116 = 4
                       * ((unint64_t)(float)(v105 + *(float *)&v98)
                        + (unint64_t)(float)(v106 + v108.f32[0]) * v96);
                  v111 = *(float *)(*v91 + v116);
                  v115 = *(float *)(v91[3] + v116);
                }
                sub_207DFE100((uint64_t)v196, v111, v115, v98, *(double *)v108.i64, v61, *(float *)&v62, *(float *)&v63, *(float *)v64.f64);
                v109.i64[0] = *(_QWORD *)a2;
                v109.i32[2] = *(_DWORD *)(a2 + 8);
                v108 = vaddq_f32(v180, v109);
                --v107;
              }
              while (v107);
              v109.i64[0] = *(_QWORD *)(a2 + 12);
              v109.i32[2] = *(_DWORD *)(a2 + 20);
              v59 = (float64x2_t)vaddq_f32(v176, v109);
              ++v94;
            }
            while (v94 != a4);
          }
          goto LABEL_123;
        }
        if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 534, (uint64_t)"lookup_x.size() >= input_image_width * input_image_height", 57, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
        {
          v93 = (uint64_t)(v91[1] - *v91) >> 2;
          goto LABEL_85;
        }
LABEL_188:
        abort();
      }
    }
  }
  if (a4 && a3)
  {
    v59.f64[0] = *(float64_t *)(a2 + 24);
    LODWORD(v59.f64[1]) = *(_DWORD *)(a2 + 32);
    v117 = 0;
    if (a6)
    {
      do
      {
        v118 = a3;
        v177 = (float32x4_t)v59;
        v181 = (float32x4_t)v59;
        do
        {
          if (v181.f32[2] == 0.0)
            *(float *)v58.f64 = 1.0;
          else
            *(float *)v58.f64 = 1.0 / v181.f32[2];
          *(float *)v59.f64 = *(float *)v58.f64 * v181.f32[0];
          *(float *)v58.f64 = vmuls_lane_f32(*(float *)v58.f64, *(float32x2_t *)v181.f32, 1);
          v191 = *(float *)v58.f64;
          LODWORD(v192) = LODWORD(v59.f64[0]);
          sub_207D7FE28((float *)&v192, &v191, (uint64_t)a6, v58.f64[0], v59);
          sub_207DFE100((uint64_t)v196, *(float *)&v192, v191, v119, v120, v121, v122, v123, v124);
          v58.f64[0] = *(float64_t *)a2;
          LODWORD(v58.f64[1]) = *(_DWORD *)(a2 + 8);
          v59 = (float64x2_t)vaddq_f32(v181, (float32x4_t)v58);
          v181 = (float32x4_t)v59;
          --v118;
        }
        while (v118);
        v58.f64[0] = *(float64_t *)(a2 + 12);
        LODWORD(v58.f64[1]) = *(_DWORD *)(a2 + 20);
        v59 = (float64x2_t)vaddq_f32(v177, (float32x4_t)v58);
        ++v117;
      }
      while (v117 != a4);
    }
    else
    {
      do
      {
        v125 = a3;
        v178 = (float32x4_t)v59;
        do
        {
          v182 = (float32x4_t)v59;
          *(float *)v59.f64 = 1.0 / *(float *)&v59.f64[1];
          if (*(float *)&v59.f64[1] == 0.0)
            *(float *)v59.f64 = 1.0;
          sub_207DFE100((uint64_t)v196, *(float *)v59.f64 * v182.f32[0], vmuls_lane_f32(*(float *)v59.f64, *(float32x2_t *)v182.f32, 1), *(double *)v182.i64, v60, v61, *(float *)&v62, *(float *)&v63, *(float *)v64.f64);
          v126.i64[0] = *(_QWORD *)a2;
          v126.i32[2] = *(_DWORD *)(a2 + 8);
          v59 = (float64x2_t)vaddq_f32(v182, v126);
          --v125;
        }
        while (v125);
        v126.i64[0] = *(_QWORD *)(a2 + 12);
        v126.i32[2] = *(_DWORD *)(a2 + 20);
        v59 = (float64x2_t)vaddq_f32(v178, v126);
        ++v117;
      }
      while (v117 != a4);
    }
  }
LABEL_123:
  v127 = a4 * a3;
  if (v203)
    _ZF = 1;
  else
    _ZF = v197 == 0;
  if (!_ZF)
    goto LABEL_153;
  if (*v65)
  {
    v129 = v201 / (double)v203;
    v130 = sqrtf(v129) + 0.001;
    v131 = a12;
    *(double *)&v132 = v202;
    if (!v127)
      goto LABEL_151;
  }
  else
  {
    v130 = 255.0;
    v131 = a12;
    *(double *)&v132 = v202;
    if (!v127)
      goto LABEL_151;
  }
  v133 = __p;
  *(double *)&v134 = v130;
  v135 = (const float *)(v65 + 4);
  v136 = *(_QWORD *)__p;
  if (v127 < 4
    || (v136 < (unint64_t)(v65 + 8) ? (_CF = (unint64_t)v135 >= v136 + 4 * v127) : (_CF = 1), !_CF))
  {
    v138 = 0;
LABEL_143:
    v144 = v127 - v138;
    v145 = (float *)(v136 + 4 * v138);
    do
    {
      v146 = (*v145 - *(double *)&v132) / *(double *)&v134;
      *v145 = v146;
      *v145++ = v146 - *v135;
      --v144;
    }
    while (v144);
    goto LABEL_145;
  }
  v138 = v127 & 0xFFFFFFFFFFFFFFFCLL;
  v139 = (float64x2_t)vdupq_lane_s64(v132, 0);
  v140 = (float64x2_t)vdupq_lane_s64(v134, 0);
  v141 = vld1q_dup_f32(v135);
  v142 = v127 & 0xFFFFFFFFFFFFFFFCLL;
  v143 = *(float32x2_t **)__p;
  do
  {
    *(float32x4_t *)v143->f32 = vsubq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(*v143), v139), v140)), vdivq_f64(vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v143->f32), v139), v140)), v141);
    v143 += 2;
    v142 -= 4;
  }
  while (v142);
  if (v127 != v138)
    goto LABEL_143;
LABEL_145:
  v147 = v133[1];
  if (v127 < 4 || v147 < (unint64_t)(v65 + 8) && (unint64_t)v135 < v147 + 4 * v127)
  {
    v148 = 0;
LABEL_149:
    v149 = v127 - v148;
    v150 = (float *)(v147 + 4 * v148);
    do
    {
      v151 = (*v150 - *(double *)&v132) / *(double *)&v134;
      *v150 = v151;
      *v150++ = v151 - *v135;
      --v149;
    }
    while (v149);
    goto LABEL_151;
  }
  v148 = v127 & 0xFFFFFFFFFFFFFFFCLL;
  v166 = (float64x2_t)vdupq_lane_s64(v132, 0);
  v167 = (float64x2_t)vdupq_lane_s64(v134, 0);
  v168 = vld1q_dup_f32(v135);
  v169 = v127 & 0xFFFFFFFFFFFFFFFCLL;
  v170 = (float32x2_t *)v147;
  do
  {
    *(float32x4_t *)v170->f32 = vsubq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(*v170), v166), v167)), vdivq_f64(vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v170->f32), v166), v167)), v168);
    v170 += 2;
    v169 -= 4;
  }
  while (v169);
  if (v127 != v148)
    goto LABEL_149;
LABEL_151:
  if (v131)
  {
    v152 = *(double *)&v132;
    *a11 = v152;
    a11[1] = v130;
  }
LABEL_153:
  v153 = v200;
  if (v89)
  {
    v154 = (unint64_t *)&v89->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v156 = v183;
  v183 = 0;
  if (v156)
    sub_207D098B8((int)&v183, v156);
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v189)
  {
    v158 = *v189;
    v157 = (std::__shared_weak_count *)v189[1];
    if (v157)
    {
      v159 = (unint64_t *)&v157->__shared_owners_;
      do
        v160 = __ldxr(v159);
      while (__stxr(v160 + 1, v159));
      do
        v161 = __ldaxr(v159);
      while (__stlxr(v161 - 1, v159));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
        if (!v158)
          goto LABEL_170;
        goto LABEL_169;
      }
    }
    if (v158)
LABEL_169:
      sub_20815FE54((uint64_t)v189);
  }
LABEL_170:
  v188 = &off_24C08A5D8;
  v162 = v190;
  if (v190)
  {
    v163 = (unint64_t *)&v190->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  return (float)v153 / (float)v127;
}

void sub_207DFB5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _DWORD *v33;
  void *v34;

  sub_207C99D78((uint64_t)&a32);
  v33 = a21;
  a21 = 0;
  if (v33)
  {
    sub_207D098B8((int)&a21, v33);
    v34 = __p;
    if (!__p)
    {
LABEL_3:
      sub_20815AC38(&a26);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = __p;
    if (!__p)
      goto LABEL_3;
  }
  a23 = (uint64_t)v34;
  operator delete(v34);
  sub_20815AC38(&a26);
  _Unwind_Resume(a1);
}

float sub_207DFB738(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _BYTE *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, uint64_t a9, char a10, unint64_t *a11, char a12)
{
  uint64_t v18;
  float *v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v25;

  if (a12)
  {
    v18 = a11[1];
    v25 = 0x3F80000000000000;
    sub_207DF9FD4(a11, v18, 2uLL, &v25);
    if (a11[1] - *a11 <= 8)
      sub_207DFD6CC();
    v19 = (float *)(a11[1] - 16);
    v20 = 1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v21 = sub_20815A764(a1);
  if ((v21 & 0xFFFFFFEF) == 0x34323066)
    return sub_207DFA444(a1, a2, a3, a4, a5, a6, a7, v22, a9, a10, v19, v20);
  if (v21 != 1278226488
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Warping.cpp", 99, (uint64_t)"input_pixelbuffer_format == kCVPixelFormatType_OneComponent8", 60, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  return sub_207DFB8B0(a1, a2, a3, a4, a5, a6, a7, v22, a9, a10, v19, v20);
}

float sub_207DFB8B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _BYTE *a5, uint64_t a6, float32x2_t *a7, uint64_t a8, uint64_t a9, char a10, float *a11, char a12)
{
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float32x2_t **v26;
  float32x4_t v27;
  float32x4_t v28;
  double v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float32x4_t v34;
  float v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  float32x2_t **v45[3];
  size_t v46;
  size_t v47;
  size_t v48;
  uint64_t (**v49)();
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t v52;
  uint64_t v53;

  v52 = a4;
  v53 = a3;
  v16 = *(uint64_t **)(a1 + 8);
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  v50 = v16;
  v51 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v49 = off_24C08A598;
  if (v16)
  {
    v21 = *v16;
    v20 = (std::__shared_weak_count *)v16[1];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (!v21)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    if (v21)
LABEL_11:
      sub_20815FC78((uint64_t)v50);
  }
LABEL_12:
  v48 = sub_20815C130((uint64_t)&v49);
  v47 = sub_20815C3B0((uint64_t)&v49);
  v25 = sub_20815A89C((uint64_t)&v49, 0);
  v46 = sub_20815C630((uint64_t)&v49);
  if (v46 < v48
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Warping.cpp", 145, (uint64_t)"image_plane_bytes_per_row >= result_bytes_per_row", 49, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v26 = (float32x2_t **)operator new(8uLL);
  *v26 = a7;
  v45[1] = v26 + 1;
  v45[2] = v26 + 1;
  v45[0] = v26;
  v35 = sub_207DFBBE8(v25, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, a2, &v53, &v52, a5, v27, v28, v29, v30, v31, v32, v33, v34, a6, v45, a9,
          a10,
          a11,
          a12);
  operator delete(v26);
  if (v50)
  {
    v37 = *v50;
    v36 = (std::__shared_weak_count *)v50[1];
    if (v36)
    {
      v38 = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if (!v37)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    if (v37)
LABEL_21:
      sub_20815FE54((uint64_t)v50);
  }
LABEL_22:
  v49 = &off_24C08A5D8;
  v41 = v51;
  if (v51)
  {
    v42 = (unint64_t *)&v51->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v35;
}

void sub_207DFBB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207DFBB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  operator delete(v22);
  sub_20815AC38(&a22);
  _Unwind_Resume(a1);
}

void sub_207DFBB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFBB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFBBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFBBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFBBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

float sub_207DFBBE8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, unint64_t *a7, _BYTE *a8, float32x4_t a9, float32x4_t a10, double a11, double a12, float a13, float a14, float a15, float32x4_t a16, uint64_t a17, float32x2_t ***a18, uint64_t a19, char a20,float *a21,char a22)
{
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  float32x4_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  double v55;
  double v56;
  int v57;
  float v58;
  float v59;
  int v60;
  double v61;
  float v62;
  unint64_t v63;
  float v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  float32x2_t **v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t v71;
  float32x2_t *v72;
  float v73;
  float v74;
  float v75;
  unint64_t v79;
  float v80;
  float v81;
  BOOL v82;
  unint64_t v84;
  float v85;
  _BYTE *v86;
  float v87;
  double v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  float32x4_t v94;
  float v95;
  BOOL v96;
  BOOL v97;
  unint64_t v98;
  float v99;
  _BYTE *v100;
  float v101;
  double v102;
  float32x4_t v103;
  unint64_t v104;
  float v105;
  float v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  const float *v110;
  BOOL v111;
  unint64_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float32x4_t v115;
  unint64_t v116;
  float32x2_t *v117;
  unint64_t v118;
  float *v119;
  float v120;
  float v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  _BYTE *v125;
  std::__shared_weak_count *v126;
  unint64_t v127;
  uint64_t v128;
  float32x4_t v130;
  uint64_t v131;
  float32x4_t v133;
  int v134;
  float32x4_t v135;
  unsigned __int32 v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;

  if ((char *)a18[1] - (char *)*a18 != 8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 472, (uint64_t)"num_channels == output_image_data.size()", 40, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v28 = 0;
  v29 = *a6;
  v30 = *a7;
  v31 = *a2;
  v32 = (float)(unint64_t)*a2 + -1.0;
  v33 = *a3;
  v34 = (float)(unint64_t)*a3 + -1.0;
  v134 = *a8;
  v139 = 0;
  v140 = 0;
  v127 = v30;
  v128 = v29;
  if (a17 && a20)
  {
    sub_207DFD6E0((_BOOL8)&v137, a19, v31, v33, a17);
    v40 = (uint64_t **)v137;
    v28 = v138;
    v139 = v137;
    v140 = v138;
    if (v137)
    {
      v41 = *(uint64_t **)v137;
      if (*(_QWORD *)(v137 + 8) - *(_QWORD *)v137 != 48)
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 529, (uint64_t)"lookup_table.size() == 2", 24, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
        {
          abort();
        }
        v41 = *v40;
      }
      v42 = *v41;
      v43 = v41[1] - *v41;
      if (v43 != v41[4] - v41[3])
      {
        if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 533, (uint64_t)"lookup_x.size() == lookup_y.size()", 34, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
        {
          goto LABEL_102;
        }
        v42 = *v41;
        v43 = v41[1] - *v41;
      }
      v44 = v43 >> 2;
      v45 = *a2;
      v46 = *a3;
      v47 = *a3 * *a2;
      if (v43 >> 2 >= v47)
      {
LABEL_15:
        v48 = *a7;
        v49 = 0.0;
        if (*a7)
        {
          v50 = *a6;
          if (*a6)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            v54 = 0;
            v55 = sqrt((double)(unint64_t)v44 / (double)v47);
            v56 = (double)v45;
            v57 = (int)((v55 + -1.0) * (double)v45 * 0.5);
            v58 = (float)(1 - v57);
            v59 = (float)((int)v45 + v57 - 1);
            v60 = (int)((v55 + -1.0) * (double)v46 * 0.5);
            v61 = v55 * v56;
            v62 = (float)((int)v46 + v60 - 1);
            v63 = (unint64_t)v61;
            v64 = (float)v57;
            a16.i64[0] = *(_QWORD *)(a5 + 24);
            a16.i32[2] = *(_DWORD *)(a5 + 32);
            v65 = 0.0;
            v49 = 0.0;
            v66 = v128;
            while (1)
            {
              v67 = *a4;
              v68 = *a18;
              v69 = v51;
              v70 = v50;
              v71 = a16;
              do
              {
                v73 = 1.0 / v71.f32[2];
                if (v71.f32[2] == 0.0)
                  v73 = 1.0;
                v74 = (float)(int)((float)(v73 * v71.f32[0]) + 0.5);
                v75 = (float)(int)(vmuls_lane_f32(v73, *(float32x2_t *)v71.f32, 1) + 0.5);
                if (v74 < v58 || v74 > v59 || v75 < (float)(1 - v60) || v75 > v62)
                {
                  v72 = *v68;
LABEL_20:
                  *(__int32 *)((char *)v72->i32 + v69) = 0;
                  ++v54;
                  goto LABEL_21;
                }
                v79 = 4 * ((unint64_t)(float)(v64 + v74) + (unint64_t)(float)((float)v60 + v75) * v63);
                v80 = *(float *)(v42 + v79);
                v72 = *v68;
                if (v80 < 0.0)
                  goto LABEL_20;
                v81 = *(float *)(v41[3] + v79);
                v82 = v81 >= 0.0 && v32 > v80;
                if (!v82 || v34 <= v81)
                  goto LABEL_20;
                v84 = (unint64_t)v80 + v67 * (unint64_t)v81;
                v85 = v80 - (float)(unint64_t)v80;
                LOBYTE(v36) = *(_BYTE *)(a1 + v84);
                v86 = (_BYTE *)(a1 + v67 + v84);
                LOBYTE(v37) = *v86;
                v37 = (float)LODWORD(v37);
                LOBYTE(v38) = *(_BYTE *)(a1 + v84 + 1);
                LOBYTE(v39) = v86[1];
                v39 = (float)LODWORD(v39);
                v38 = v85 * (float)LODWORD(v38);
                v36 = (float)((float)(1.0 - v85) * (float)LODWORD(v36)) + v38;
                v87 = (float)((float)(1.0 - (float)(v81 - (float)(unint64_t)v81)) * v36)
                    + (float)((float)(v81 - (float)(unint64_t)v81)
                            * (float)((float)((float)(1.0 - v85) * v37) + (float)(v85 * v39)));
                *(float *)((char *)v72->f32 + v69) = v87;
                if (v134)
                {
                  ++v53;
                  v88 = v87;
                  v49 = v49 + (v88 - v49) / (double)v53;
                  v65 = v65 + (v88 - v49) * (v88 - v49);
                }
LABEL_21:
                v35.i64[0] = *(_QWORD *)a5;
                v35.i32[2] = *(_DWORD *)(a5 + 8);
                v71 = vaddq_f32(v71, v35);
                v69 += 4;
                --v70;
              }
              while (v70);
              v71.i64[0] = *(_QWORD *)(a5 + 12);
              v71.i32[2] = *(_DWORD *)(a5 + 20);
              a16 = vaddq_f32(a16, v71);
              ++v52;
              v51 += 4 * v50;
              if (v52 == v48)
                goto LABEL_72;
            }
          }
        }
LABEL_71:
        v54 = 0;
        v53 = 0;
        v65 = 0.0;
        v66 = v128;
LABEL_72:
        v104 = v127 * v66;
        if (!v134)
          goto LABEL_76;
        goto LABEL_75;
      }
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/include/ODT/ImgProc/Warping.h", 534, (uint64_t)"lookup_x.size() >= input_image_width * input_image_height", 57, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
      {
        v42 = *v41;
        v45 = *a2;
        v46 = *a3;
        v44 = (v41[1] - *v41) >> 2;
        v47 = *a3 * *a2;
        goto LABEL_15;
      }
LABEL_102:
      abort();
    }
    v30 = *a7;
  }
  v49 = 0.0;
  if (!v30 || !*a6)
    goto LABEL_71;
  v125 = a8;
  v126 = v28;
  v89 = 0;
  v53 = 0;
  v54 = 0;
  v90 = 0;
  a10.i64[0] = *(_QWORD *)(a5 + 24);
  a10.i32[2] = *(_DWORD *)(a5 + 32);
  v65 = 0.0;
  v91 = 1;
  a9.i64[0] = 0;
  v133 = a9;
  do
  {
    if (v91)
    {
      v92 = 0;
      v131 = v90;
      v93 = v90;
      v130 = a10;
      v94 = a10;
      do
      {
        v95 = 1.0 / v94.f32[2];
        if (v94.f32[2] == 0.0)
          v95 = 1.0;
        a9.f32[0] = v95 * v94.f32[0];
        v135 = v94;
        a10.f32[0] = vmuls_lane_f32(v95, *(float32x2_t *)v94.f32, 1);
        v136 = a10.i32[0];
        LODWORD(v137) = a9.i32[0];
        if (a17)
        {
          sub_207D7FE28((float *)&v137, (float *)&v136, a17, *(double *)a9.i64, (float64x2_t)a10);
          a10.i32[0] = v136;
          a9.i32[0] = v137;
        }
        if (a10.f32[0] >= 0.0
          && (a9.f32[0] >= 0.0 ? (v96 = v32 > a9.f32[0]) : (v96 = 0), v96 ? (v97 = v34 > a10.f32[0]) : (v97 = 0), v97))
        {
          v98 = (unint64_t)a9.f32[0] + *a4 * (unint64_t)a10.f32[0];
          v99 = a9.f32[0] - (float)(unint64_t)a9.f32[0];
          LOBYTE(a13) = *(_BYTE *)(a1 + v98);
          v100 = (_BYTE *)(a1 + *a4 + v98);
          LOBYTE(a14) = *v100;
          a14 = (float)LODWORD(a14);
          LOBYTE(a15) = *(_BYTE *)(a1 + v98 + 1);
          a16.i8[0] = v100[1];
          a16.f32[0] = (float)a16.u32[0];
          a15 = v99 * (float)LODWORD(a15);
          a13 = (float)((float)(1.0 - v99) * (float)LODWORD(a13)) + a15;
          v101 = (float)((float)(1.0 - (float)(a10.f32[0] - (float)(unint64_t)a10.f32[0])) * a13)
               + (float)((float)(a10.f32[0] - (float)(unint64_t)a10.f32[0])
                       * (float)((float)((float)(1.0 - v99) * a14) + (float)(v99 * a16.f32[0])));
          (**a18)->f32[v92 + v93] = v101;
          if (v134)
          {
            ++v53;
            v102 = v101;
            v103.i64[1] = v133.i64[1];
            *(double *)a10.i64 = (v102 - *(double *)v133.i64) / (double)v53;
            *(double *)v103.i64 = *(double *)v133.i64 + *(double *)a10.i64;
            v133 = v103;
            v65 = v65 + (v102 - *(double *)v103.i64) * (v102 - *(double *)v103.i64);
          }
        }
        else
        {
          (**a18)->i32[v92 + v93] = 0;
          ++v54;
        }
        a9.i64[0] = *(_QWORD *)a5;
        a9.i32[2] = *(_DWORD *)(a5 + 8);
        v94 = vaddq_f32(v135, a9);
        ++v92;
        v91 = *a6;
      }
      while (v92 < *a6);
      v30 = *a7;
      v90 = v131 + v92;
      a10 = v130;
    }
    a9.i64[0] = *(_QWORD *)(a5 + 12);
    a9.i32[2] = *(_DWORD *)(a5 + 20);
    a10 = vaddq_f32(a10, a9);
    ++v89;
  }
  while (v89 < v30);
  a8 = v125;
  v28 = v126;
  v49 = *(double *)v133.i64;
  v104 = v127 * v128;
  if (!v134)
    goto LABEL_76;
LABEL_75:
  if (!v53)
    goto LABEL_95;
LABEL_76:
  if (*a8)
  {
    v105 = v65 / (double)v53;
    v106 = sqrtf(v105) + 0.001;
    v107 = a22;
    if (!v104)
      goto LABEL_93;
  }
  else
  {
    v106 = 255.0;
    v107 = a22;
    if (!v104)
      goto LABEL_93;
  }
  v108 = (unint64_t)**a18;
  *(double *)&v109 = v106;
  v110 = (const float *)(a8 + 4);
  if (v104 < 4
    || (v108 < (unint64_t)(a8 + 8) ? (v111 = (unint64_t)v110 >= v108 + 4 * v104) : (v111 = 1), !v111))
  {
    v112 = 0;
LABEL_91:
    v118 = v104 - v112;
    v119 = (float *)(v108 + 4 * v112);
    do
    {
      v120 = (*v119 - v49) / *(double *)&v109;
      *v119 = v120;
      *v119++ = v120 - *v110;
      --v118;
    }
    while (v118);
    goto LABEL_93;
  }
  v112 = v104 & 0xFFFFFFFFFFFFFFFCLL;
  v113 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v49, 0);
  v114 = (float64x2_t)vdupq_lane_s64(v109, 0);
  v115 = vld1q_dup_f32(v110);
  v116 = v104 & 0xFFFFFFFFFFFFFFFCLL;
  v117 = **a18;
  do
  {
    *(float32x4_t *)v117->f32 = vsubq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(*v117), v113), v114)), vdivq_f64(vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v117->f32), v113), v114)), v115);
    v117 += 2;
    v116 -= 4;
  }
  while (v116);
  if (v104 != v112)
    goto LABEL_91;
LABEL_93:
  if (v107)
  {
    v121 = v49;
    *a21 = v121;
    a21[1] = v106;
  }
LABEL_95:
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v123 = __ldaxr(p_shared_owners);
    while (__stlxr(v123 - 1, p_shared_owners));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return (float)v54 / (float)v104;
}

void sub_207DFC400(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_207DFC414(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_207DFC428(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_207DFC43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_207DFC450(size_t __sz@<X4>, float32x4_t *a2@<X0>, unint64_t a3@<X1>, unint64_t a4@<X2>, size_t a5@<X3>, float **a6@<X5>, uint64_t a7@<X8>)
{
  size_t v7;
  size_t v9;
  uint64_t v14;
  float *v15;
  unint64_t v16;
  float *v17;
  float *v18;
  unint64_t v19;
  int8x16_t *v20;
  size_t v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  BOOL v31;
  const float *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  unint64_t v39;
  float32x4_t v40;
  __CVBuffer *v41;
  std::__shared_weak_count *v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  OpaqueVTPixelTransferSession *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  OpaqueVTPixelTransferSession *v67;
  float *v68;
  float *v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  float *v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  uint64_t v86;
  const float *v87;
  float32x4_t v88;
  const float *v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  void *__p[11];
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  char v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  OpaqueVTPixelTransferSession *v104[2];
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  CVPixelBufferRef pixelBufferOut;
  char *v108;
  char *v109;
  char *v110;
  _QWORD v111[3];
  _QWORD *v112;
  uint64_t v113;

  v7 = __sz;
  v113 = *MEMORY[0x24BDAC8D0];
  v9 = __sz * a5;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  if (!(__sz * a5))
  {
    v20 = 0;
    v15 = 0;
    v17 = 0;
LABEL_31:
    v26 = a5;
    goto LABEL_32;
  }
  if (v9 >> 62)
    sub_207D0CD58();
  v14 = 4 * v9;
  v108 = (char *)operator new(4 * v9);
  v110 = &v108[4 * v9];
  bzero(v108, 4 * v9);
  v109 = v110;
  v93 = a7;
  if (v9 < 4)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = *a6;
LABEL_5:
    v19 = 0;
    v7 = __sz;
    v20 = (int8x16_t *)v108;
    goto LABEL_6;
  }
  v15 = (float *)operator new(v9 & 0xFFFFFFFFFFFFFFFCLL);
  bzero(v15, v9 & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (float *)operator new(v9 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = v9 >> 2;
  bzero(v17, v9 & 0xFFFFFFFFFFFFFFFCLL);
  v18 = *a6;
  if (v9 < 8)
    goto LABEL_5;
  v19 = 0;
  v20 = (int8x16_t *)v108;
  v29 = (float *)&v108[v14];
  v31 = v108 < (char *)a2 + v14 && v29 > (float *)a2;
  if (v18 < v29 && v108 < (char *)v18 + 8)
  {
    v7 = __sz;
LABEL_6:
    v21 = v9 - v19;
    v22 = v19;
    v23 = (float *)&v20->i32[v19];
    v24 = &a2->f32[v22];
    do
    {
      v25 = *v24++;
      *v23++ = (float)((float)(v18[1] * v25) + *v18) * 0.0039216;
      --v21;
    }
    while (v21);
    goto LABEL_8;
  }
  v7 = __sz;
  if (v31)
    goto LABEL_6;
  v19 = v9 & 0xFFFFFFFFFFFFFFF8;
  v33 = v18;
  v34 = vld1q_dup_f32(v33++);
  v35 = vld1q_dup_f32(v33);
  v36 = a2 + 1;
  v37 = (float32x4_t *)(v108 + 16);
  v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v39 = v9 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v40 = vmulq_f32(vaddq_f32(vmulq_f32(v35, *v36), v34), v38);
    v37[-1] = vmulq_f32(vaddq_f32(vmulq_f32(v35, v36[-1]), v34), v38);
    *v37 = v40;
    v36 += 2;
    v37 += 2;
    v39 -= 8;
  }
  while (v39);
  if (v9 != v19)
    goto LABEL_6;
LABEL_8:
  if (!v16)
  {
    a7 = v93;
    goto LABEL_31;
  }
  v26 = a5;
  v27 = 0;
  if (v16 < 0xC)
    goto LABEL_144;
  v68 = v18 + 2;
  v69 = &v15[v16];
  v70 = a3 + 4 * v16;
  v71 = a4 + 4 * v16;
  v72 = v15 >= v18 + 4 || v68 >= v69;
  v73 = !v72;
  v74 = (unint64_t)v15 < v70 && (unint64_t)v69 > a3;
  v75 = v74;
  v76 = (unint64_t)v15 < v71 && (unint64_t)v69 > a4;
  v77 = v76;
  v78 = &v17[v16];
  v79 = v17 >= v18 + 4 || v68 >= v78;
  v80 = !v79;
  v81 = (unint64_t)v17 < v70 && (unint64_t)v78 > a3;
  v82 = v81;
  v83 = (unint64_t)v17 < v71 && (unint64_t)v78 > a4;
  v84 = v83;
  if (v17 < v69 && v15 < v78)
    goto LABEL_144;
  if (v73)
    goto LABEL_144;
  if (v75)
    goto LABEL_144;
  if (v77)
    goto LABEL_144;
  if (v80)
    goto LABEL_144;
  if (v82)
    goto LABEL_144;
  if (v84)
    goto LABEL_144;
  v86 = 0;
  v27 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  v87 = v18 + 3;
  v88 = vld1q_dup_f32(v87);
  v89 = v18 + 2;
  v90 = vld1q_dup_f32(v89);
  v91 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v92 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    *(float32x4_t *)&v15[v86] = vmulq_f32(vaddq_f32(vmulq_f32(v88, *(float32x4_t *)(a3 + v86 * 4)), v90), v91);
    *(float32x4_t *)&v17[v86] = vmulq_f32(vaddq_f32(vmulq_f32(v88, *(float32x4_t *)(a4 + v86 * 4)), v90), v91);
    v86 += 4;
    v92 -= 4;
  }
  while (v92);
  if (v16 != v27)
  {
LABEL_144:
    do
    {
      v28 = v27;
      v15[v28] = (float)((float)(v18[3] * *(float *)(a3 + 4 * v27)) + v18[2]) * 0.0039216;
      v17[v28] = (float)((float)(v18[3] * *(float *)(a4 + 4 * v27++)) + v18[2]) * 0.0039216;
    }
    while (v16 != v27);
  }
  a7 = v93;
LABEL_32:
  pixelBufferOut = 0;
  if (CVPixelBufferCreate(0, v26, v7, 0x34323076u, 0, &pixelBufferOut)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Warping.cpp", 218, (uint64_t)"kCVReturnSuccess == CVPixelBufferCreate(nullptr, patch_image_width, patch_image_height, kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange, nullptr, &yuv_pixel_buffer)", 164, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v41 = pixelBufferOut;
  v111[0] = &off_24C075DF8;
  v111[1] = MEMORY[0x24BDC5398];
  v111[2] = pixelBufferOut;
  v112 = v111;
  sub_207DFD0D0(pixelBufferOut, v20);
  sub_207DFD384(v41, (uint64_t)v15, (uint64_t)v17);
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "ODT_PATCH_FROM_YUV");
  v99 = __PAIR64__(v7, v26);
  LODWORD(v104[0]) = 16;
  BYTE4(v104[0]) = 1;
  sub_20815A0D8(&v105, (unsigned int *)&v99, 0x18u, (uint64_t *)__p, 1u, (unsigned int *)v104);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  sub_207DFF76C(v104);
  sub_20815B050(__p, (std::__shared_weak_count_vtbl *)pixelBufferOut, 1, 0);
  v42 = (std::__shared_weak_count *)operator new(0x30uLL);
  v42->__shared_owners_ = 0;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
  v43 = (char *)__p[2];
  v42[1].__shared_owners_ = (uint64_t)__p[1];
  v42[1].__shared_weak_owners_ = (uint64_t)v43;
  if (v43)
  {
    v44 = (unint64_t *)(v43 + 8);
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v46 = (std::__shared_weak_count *)__p[2];
    v102 = &v42[1].__vftable;
    v103 = v42;
    __p[0] = &off_24C08A5D8;
    if (__p[2])
    {
      v47 = (unint64_t *)((char *)__p[2] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    v102 = &v42[1].__vftable;
    v103 = v42;
  }
  sub_207DFFEE4((CVPixelBufferPoolRef *)&v105, v104, (uint64_t *)&v102, (uint64_t)&v99);
  sub_207E010BC((uint64_t *)&v99, 1, (uint64_t)__p);
  sub_207D2E0FC(a7, (unsigned __int8 *)__p);
  v49 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v97;
  if (v97)
  {
    v53 = (unint64_t *)&v97->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (!v101)
    goto LABEL_60;
  v55 = v100;
  if (!v100)
    goto LABEL_60;
  v56 = (unint64_t *)&v100->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    v58 = v103;
    if (!v103)
      goto LABEL_64;
  }
  else
  {
LABEL_60:
    v58 = v103;
    if (!v103)
      goto LABEL_64;
  }
  v59 = (unint64_t *)&v58->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    v67 = v104[0];
    v104[0] = 0;
    if (!v67)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_64:
  v61 = v104[0];
  v104[0] = 0;
  if (v61)
LABEL_65:
    ((void (*)(void))v104[1])();
LABEL_66:
  v62 = v106;
  if (v106)
  {
    v63 = (unint64_t *)&v106->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (!v112)
    sub_207CA408C();
  (*(void (**)(_QWORD *))(*v112 + 48))(v112);
  v65 = v112;
  if (v112 == v111)
  {
    v66 = 4;
    v65 = v111;
  }
  else
  {
    if (!v112)
      goto LABEL_77;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_77:
  if (v17)
    operator delete(v17);
  if (v15)
    operator delete(v15);
  if (v108)
    operator delete(v108);
}

void sub_207DFCB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void *v37;
  uint64_t v38;
  void *__pa;

  operator delete(v37);
  __pa = *(void **)(v38 - 152);
  if (__pa)
  {
    *(_QWORD *)(v38 - 144) = __pa;
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void sub_207DFCCC0(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;

  v31 = __PAIR64__(a3, a2);
  sub_207DFE3F4(&v31, (uint64_t)&v25);
  v10 = v25;
  v9 = v26;
  if (!v26)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
    {
LABEL_7:
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v25 + 96))(&v31, v25, 1);
      v14 = v30;
      v15 = v30 * v29;
      if (!(_DWORD)v15)
        goto LABEL_16;
      goto LABEL_11;
    }
  }
  else
  {
LABEL_6:
    if (v10)
      goto LABEL_7;
  }
  v31 = 0;
  v14 = v30;
  v15 = v30 * v29;
  if (!(_DWORD)v15)
    goto LABEL_16;
LABEL_11:
  v16 = v28;
  if (v28)
  {
    v17 = 0;
    v18 = v27;
    v19 = v27 + v15;
    do
    {
      v20 = 0;
      do
      {
        *(_BYTE *)(v18 + v20) = (int)(float)((float)(*(float *)(*(_QWORD *)a4 + 4)
                                                   * *(float *)(a1 + 4 * a2 * v17 + 4 * v20))
                                           + **(float **)a4);
        ++v20;
      }
      while (v16 != v20);
      v18 += v14;
      ++v17;
    }
    while (v18 != v19);
  }
LABEL_16:
  v21 = v31;
  v31 = 0;
  if (v21)
    (*(void (**)(unint64_t))(*(_QWORD *)v21 + 8))(v21);
  sub_2081299D4(v25, a5);
  v22 = v26;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_207DFCE78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

void sub_207DFCE8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207DFCEA0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207DFCF08(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22[88];
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];
  std::__shared_weak_count *v28;

  sub_207DFCCC0(a1, a2, a3, a4, v27);
  v6 = (std::__shared_weak_count *)operator new(0x30uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
  v7 = v28;
  v6[1].__shared_owners_ = v27[1];
  v6[1].__shared_weak_owners_ = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v25 = &v6[1].__vftable;
  v26 = v6;
  sub_207E010BC((uint64_t *)&v25, 1, (uint64_t)v22);
  sub_207D2E0FC(a5, v22);
  v10 = v24;
  if (v24)
  {
    v11 = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v23;
  if (v23)
  {
    v14 = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v27[0] = &off_24C08A5D8;
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_207DFD090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_207D2E210((uint64_t)va);
  sub_207C99D78(v2 - 56);
  sub_20815B3F4((_QWORD *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_207DFD0BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20815B3F4((_QWORD *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_207DFD0D0(__CVBuffer *a1, int8x16_t *a2)
{
  _QWORD *v4;
  uint64_t (*v5)(_QWORD, _QWORD);
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  int8x16_t *BaseAddressOfPlane;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int8 *v12;
  float *v13;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v18;
  float32x4_t *v19;
  _QWORD *v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  int8x16_t *v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;
  int8x16x2_t v36;
  int8x16x4_t v37;

  v35 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  v4 = operator new(0x20uLL);
  v5 = MEMORY[0x24BDC53B0];
  *v4 = &off_24C075F90;
  v4[1] = v5;
  v4[2] = a1;
  v4[3] = 1;
  v34 = v4;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BaseAddressOfPlane = (int8x16_t *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (CVPixelBufferGetBytesPerRowOfPlane(a1, 0) != WidthOfPlane
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Warping.cpp", 271, (uint64_t)"image_plane_bytes_per_row == result_bytes_per_row", 49, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = HeightOfPlane * WidthOfPlane;
  if (HeightOfPlane * WidthOfPlane)
  {
    if (v9 < 8
      || BaseAddressOfPlane < (int8x16_t *)((char *)a2 + 4 * WidthOfPlane * HeightOfPlane)
      && &BaseAddressOfPlane->i8[v9] > (__int8 *)a2)
    {
      v10 = 0;
      goto LABEL_8;
    }
    if (v9 >= 0x10)
    {
      v25 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v10 = v9 & 0xFFFFFFFFFFFFFFF0;
      v26 = v9 & 0xFFFFFFFFFFFFFFF0;
      v27 = BaseAddressOfPlane;
      v28 = (float32x4_t *)a2;
      do
      {
        v30 = v28[2];
        v29 = v28[3];
        v32 = *v28;
        v31 = v28[1];
        v28 += 4;
        v37.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v29, v25));
        v37.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v30, v25));
        v37.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v31, v25));
        v37.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v32, v25));
        *v27++ = vqtbl4q_s8(v37, (int8x16_t)xmmword_208236E30);
        v26 -= 16;
      }
      while (v26);
      if (v9 == v10)
        goto LABEL_10;
      if ((v9 & 8) == 0)
      {
LABEL_8:
        v11 = v9 - v10;
        v12 = &BaseAddressOfPlane->i8[v10];
        v13 = (float *)&a2->i32[v10];
        do
        {
          v14 = *v13++;
          *v12++ = (int)(float)(v14 * 255.0);
          --v11;
        }
        while (v11);
        goto LABEL_10;
      }
    }
    else
    {
      v10 = 0;
    }
    v18 = v10;
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    v19 = (float32x4_t *)((char *)a2 + 4 * v18);
    v20 = (uint64_t *)((char *)BaseAddressOfPlane->i64 + v18);
    v21 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
    v22 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      v24 = *v19;
      v23 = v19[1];
      v19 += 2;
      v36.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v23, v22));
      v36.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v24, v22));
      *v20++ = vqtbl2q_s8(v36, (int8x16_t)xmmword_20822AB00).u64[0];
      v21 += 8;
    }
    while (v21);
    if (v9 != v10)
      goto LABEL_8;
  }
LABEL_10:
  if (!v34)
    sub_207CA408C();
  (*(void (**)(_BYTE *))(*(_QWORD *)v34 + 48))(v34);
  v15 = v34;
  if (v34 == v33)
  {
    v16 = 4;
    v15 = v33;
  }
  else
  {
    v16 = 5;
  }
  return (*(uint64_t (**)(void))(*v15 + 8 * v16))();
}

void sub_207DFD354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C97D64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207DFD384(__CVBuffer *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t (*v7)(_QWORD, _QWORD);
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  char *BaseAddressOfPlane;
  size_t BytesPerRowOfPlane;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  float32x4_t *v28;
  float32x4_t *v29;
  unint64_t v30;
  char *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD *v40;
  uint64_t v41;
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;
  int8x16x2_t v46;
  int8x16x4_t v47;

  v45 = *MEMORY[0x24BDAC8D0];
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  v6 = operator new(0x20uLL);
  v7 = MEMORY[0x24BDC53B0];
  *v6 = &off_24C075F90;
  v6[1] = v7;
  v6[2] = a1;
  v6[3] = 1;
  v44 = v6;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  if (BytesPerRowOfPlane != 2 * WidthOfPlane
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/ImgProc/src/Warping.cpp", 288, (uint64_t)"image_plane_bytes_per_row == result_bytes_per_row * 2u", 54, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (HeightOfPlane && WidthOfPlane)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 2 * (WidthOfPlane - 1);
    v16 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v17 = WidthOfPlane & 0xFFFFFFFFFFFFFFF0;
    v18 = BaseAddressOfPlane;
    do
    {
      if (WidthOfPlane >= 0x10)
      {
        v19 = 0;
        v22 = (unint64_t)&BaseAddressOfPlane[v13];
        if (&BaseAddressOfPlane[v13 + v15] >= &BaseAddressOfPlane[v13]
          && v22 + 1 + v15 >= v22 + 1
          && ((WidthOfPlane - 1) & 0x8000000000000000) == 0)
        {
          v19 = 0;
          v23 = (unint64_t)&BaseAddressOfPlane[2 * WidthOfPlane + v13];
          v24 = 4 * v14;
          v25 = v22 >= a3 + 4 * WidthOfPlane + 4 * v14 || a3 + 4 * v14 >= v23;
          v26 = !v25;
          if ((a2 + 4 * v14 >= v23 || v22 >= a2 + 4 * WidthOfPlane + 4 * v14) && !v26)
          {
            v14 += v17;
            v28 = (float32x4_t *)(a2 + v24);
            v29 = (float32x4_t *)(a3 + v24);
            v30 = WidthOfPlane & 0xFFFFFFFFFFFFFFF0;
            v31 = v18;
            do
            {
              v33 = v28[2];
              v32 = v28[3];
              v35 = *v28;
              v34 = v28[1];
              v28 += 4;
              v47.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v32, v16));
              v47.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v33, v16));
              v47.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v34, v16));
              v47.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v35, v16));
              v46.val[0] = vqtbl4q_s8(v47, (int8x16_t)xmmword_208236E30);
              v37 = v29[2];
              v36 = v29[3];
              v39 = *v29;
              v38 = v29[1];
              v29 += 4;
              v47.val[3] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v36, v16));
              v47.val[2] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v37, v16));
              v47.val[1] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v38, v16));
              v47.val[0] = (int8x16_t)vcvtq_u32_f32(vmulq_f32(v39, v16));
              v46.val[1] = vqtbl4q_s8(v47, (int8x16_t)xmmword_208236E30);
              vst2q_s8(v31, v46);
              v31 += 32;
              v30 -= 16;
            }
            while (v30);
            v19 = WidthOfPlane & 0xFFFFFFFFFFFFFFF0;
            if (WidthOfPlane == v17)
              goto LABEL_10;
          }
        }
      }
      else
      {
        v19 = 0;
      }
      v20 = WidthOfPlane - v19;
      v21 = &v18[2 * v19];
      do
      {
        *v21 = (int)(float)(*(float *)(a2 + 4 * v14) * 255.0);
        v21[1] = (int)(float)(*(float *)(a3 + 4 * v14++) * 255.0);
        v21 += 2;
        --v20;
      }
      while (v20);
LABEL_10:
      v13 += BytesPerRowOfPlane;
      ++v12;
      v18 += BytesPerRowOfPlane;
    }
    while (v12 != HeightOfPlane);
  }
  if (!v44)
    sub_207CA408C();
  (*(void (**)(_BYTE *))(*(_QWORD *)v44 + 48))(v44);
  v40 = v44;
  if (v44 == v43)
  {
    v41 = 4;
    v40 = v43;
  }
  else
  {
    v41 = 5;
  }
  return (*(uint64_t (**)(void))(*v40 + 8 * v41))();
}

void sub_207DFD688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C97D64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFD6B8()
{
  sub_207C95C64("vector");
}

void sub_207DFD6CC()
{
  sub_207CA4018("vector");
}

BOOL sub_207DFD6E0(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  unsigned int v10;
  double *v11;
  _QWORD *v12;
  _QWORD *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  BOOL v29;
  double v30;
  double v31;
  double v32;
  BOOL v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  BOOL v45;
  double v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  double v52;
  BOOL v53;
  double v54;
  double v55;
  double v56;
  BOOL v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  double v62;
  double v63;
  double v64;
  BOOL v65;
  double v66;
  double v67;
  double v68;
  BOOL v69;
  double v70;
  double v71;
  double v72;
  BOOL v73;
  double v74;
  double v75;
  double v76;
  BOOL v77;
  double v78;
  double v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;

  v9 = (_QWORD *)result;
  v10 = *(_DWORD *)(a5 + 992);
  if (v10 == -1)
  {
    result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974);
    if (result)
      goto LABEL_92;
    v10 = *(_DWORD *)(a5 + 992);
    if (v10 <= 7)
    {
LABEL_3:
      if (v10 <= 3)
        goto LABEL_4;
      if (v10 < 6)
        goto LABEL_15;
      goto LABEL_22;
    }
  }
  else if (v10 <= 7)
  {
    goto LABEL_3;
  }
  if (v10 <= 0xB)
  {
    if (v10 < 0xA)
      goto LABEL_15;
    goto LABEL_26;
  }
  if (v10 < 0xE)
    goto LABEL_15;
  if (v10 != -1)
    goto LABEL_29;
  result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821FB19, 0, (void (*)(void **))sub_208216974);
  if (result)
LABEL_92:
    abort();
  v10 = *(_DWORD *)(a5 + 992);
  if (v10 > 7)
  {
    if (v10 <= 0xB)
    {
      if (v10 > 9)
      {
LABEL_26:
        v11 = (double *)(a5 + 168);
        v12 = *(_QWORD **)a2;
        v13 = *(_QWORD **)(a2 + 8);
        if (*(_QWORD **)a2 != v13)
          goto LABEL_30;
        goto LABEL_90;
      }
LABEL_15:
      v11 = (double *)(a5 + 168);
      v12 = *(_QWORD **)a2;
      v13 = *(_QWORD **)(a2 + 8);
      if (*(_QWORD **)a2 != v13)
        goto LABEL_30;
      goto LABEL_90;
    }
    if (v10 <= 0xD)
      goto LABEL_15;
LABEL_29:
    v11 = (double *)(a5 + 168);
    v12 = *(_QWORD **)a2;
    v13 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 != v13)
      goto LABEL_30;
LABEL_90:
    *v9 = 0;
    v9[1] = 0;
    return result;
  }
  if (v10 > 3)
  {
    if (v10 > 5)
    {
LABEL_22:
      v11 = (double *)(a5 + 168);
      v12 = *(_QWORD **)a2;
      v13 = *(_QWORD **)(a2 + 8);
      if (*(_QWORD **)a2 != v13)
        goto LABEL_30;
      goto LABEL_90;
    }
    goto LABEL_15;
  }
LABEL_4:
  if (v10 <= 1)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821FB19, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
    abort();
  }
  v11 = (double *)(a5 + 168);
  v12 = *(_QWORD **)a2;
  v13 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v13)
    goto LABEL_90;
LABEL_30:
  v14 = *(double *)a5;
  v15 = *(double *)(a5 + 8);
  v16 = *(double *)(a5 + 16);
  v17 = *(double *)(a5 + 24);
  v18 = *(double *)(a5 + 32);
  v19 = *(double *)(a5 + 40);
  v20 = *(double *)(a5 + 48);
  v21 = *(double *)(a5 + 56);
  v22 = *(double *)(a5 + 64);
  v23 = *(double *)(a5 + 168);
  v24 = v11[1];
  v25 = v11[2];
  v26 = v11[3];
  while (1)
  {
    v27 = *v12;
    if (*(_QWORD *)(*v12 + 24) == a3 && *(_QWORD *)(v27 + 32) == a4)
    {
      v28 = *(double *)(v27 + 80);
      v29 = v28 < v14;
      if (v28 == v14)
        goto LABEL_38;
      v30 = v28 - v14;
      v31 = v14 - v28;
      if (!v29)
        v31 = v30;
      if (v31 <= 0.001)
      {
LABEL_38:
        v32 = *(double *)(v27 + 88);
        v33 = v32 < v15;
        if (v32 == v15)
          goto LABEL_85;
        v34 = v32 - v15;
        v35 = v15 - v32;
        if (!v33)
          v35 = v34;
        if (v35 <= 0.001)
        {
LABEL_85:
          v36 = *(double *)(v27 + 96);
          v37 = v36 < v16;
          if (v36 == v16)
            goto LABEL_96;
          v38 = v36 - v16;
          v39 = v16 - v36;
          if (!v37)
            v39 = v38;
          if (v39 <= 0.001)
          {
LABEL_96:
            v40 = *(double *)(v27 + 104);
            v41 = v40 < v17;
            if (v40 == v17)
              goto LABEL_97;
            v42 = v40 - v17;
            v43 = v17 - v40;
            if (!v41)
              v43 = v42;
            if (v43 <= 0.001)
            {
LABEL_97:
              v44 = *(double *)(v27 + 112);
              v45 = v44 < v18;
              if (v44 == v18)
                goto LABEL_98;
              v46 = v44 - v18;
              v47 = v18 - v44;
              if (!v45)
                v47 = v46;
              if (v47 <= 0.001)
              {
LABEL_98:
                v48 = *(double *)(v27 + 120);
                v49 = v48 < v19;
                if (v48 == v19)
                  goto LABEL_99;
                v50 = v48 - v19;
                v51 = v19 - v48;
                if (!v49)
                  v51 = v50;
                if (v51 <= 0.001)
                {
LABEL_99:
                  v52 = *(double *)(v27 + 128);
                  v53 = v52 < v20;
                  if (v52 == v20)
                    goto LABEL_100;
                  v54 = v52 - v20;
                  v55 = v20 - v52;
                  if (!v53)
                    v55 = v54;
                  if (v55 <= 0.001)
                  {
LABEL_100:
                    v56 = *(double *)(v27 + 136);
                    v57 = v56 < v21;
                    if (v56 == v21)
                      goto LABEL_101;
                    v58 = v56 - v21;
                    v59 = v21 - v56;
                    if (!v57)
                      v59 = v58;
                    if (v59 <= 0.001)
                    {
LABEL_101:
                      v60 = *(double *)(v27 + 144);
                      v61 = v60 < v22;
                      if (v60 == v22)
                        goto LABEL_102;
                      v62 = v60 - v22;
                      v63 = v22 - v60;
                      if (!v61)
                        v63 = v62;
                      if (v63 <= 0.001)
                      {
LABEL_102:
                        v64 = *(double *)(v27 + 152);
                        v65 = v64 < v23;
                        if (v64 == v23)
                          goto LABEL_103;
                        v66 = v64 - v23;
                        v67 = v23 - v64;
                        if (!v65)
                          v67 = v66;
                        if (v67 <= 0.001)
                        {
LABEL_103:
                          v68 = *(double *)(v27 + 160);
                          v69 = v68 < v24;
                          if (v68 == v24)
                            goto LABEL_104;
                          v70 = v68 - v24;
                          v71 = v24 - v68;
                          if (!v69)
                            v71 = v70;
                          if (v71 <= 0.001)
                          {
LABEL_104:
                            v72 = *(double *)(v27 + 168);
                            v73 = v72 < v25;
                            if (v72 == v25)
                              goto LABEL_105;
                            v74 = v72 - v25;
                            v75 = v25 - v72;
                            if (!v73)
                              v75 = v74;
                            if (v75 <= 0.001)
                            {
LABEL_105:
                              v76 = *(double *)(v27 + 176);
                              v77 = v76 < v26;
                              if (v76 == v26)
                                break;
                              v78 = v76 - v26;
                              v79 = v26 - v76;
                              if (!v77)
                                v79 = v78;
                              if (v79 <= 0.001)
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v12 += 2;
    if (v12 == v13)
      goto LABEL_90;
  }
  v80 = v12[1];
  *v9 = v27;
  v9[1] = v80;
  if (v80)
  {
    v81 = (unint64_t *)(v80 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  return result;
}

uint64_t sub_207DFDAFC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  const void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 992);
  if (v3 == -1)
    goto LABEL_45;
  if (v3 <= 7)
  {
    if (v3 > 3)
    {
      *(_DWORD *)(result + 992) = -1;
      *(_OWORD *)result = *(_OWORD *)a2;
      v26 = *(_OWORD *)(a2 + 16);
      v27 = *(_OWORD *)(a2 + 32);
      v28 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 32) = v27;
      *(_OWORD *)(result + 48) = v28;
      *(_OWORD *)(result + 16) = v26;
      v29 = *(_OWORD *)(a2 + 104);
      v30 = *(_OWORD *)(a2 + 120);
      v31 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(result + 136) = v31;
      *(_OWORD *)(result + 120) = v30;
      *(_OWORD *)(result + 104) = v29;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      v32 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(result + 144) = v32;
      if (v3 > 5)
      {
        if (v3 == 6)
        {
          v55 = *(_OWORD *)(a2 + 168);
          v56 = *(_OWORD *)(a2 + 184);
          v57 = *(_OWORD *)(a2 + 200);
          *(_QWORD *)(result + 216) = *(_QWORD *)(a2 + 216);
          *(_OWORD *)(result + 200) = v57;
          *(_OWORD *)(result + 184) = v56;
          *(_OWORD *)(result + 168) = v55;
          *(_DWORD *)(result + 992) = 6;
        }
        else
        {
          memcpy((void *)(result + 168), (const void *)(a2 + 168), 0x12DuLL);
          v65 = *(_QWORD *)(a2 + 480);
          *(_QWORD *)(v2 + 472) = *(_QWORD *)(a2 + 472);
          *(_QWORD *)(v2 + 480) = v65;
          if (v65)
          {
            v66 = (unint64_t *)(v65 + 8);
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          *(_OWORD *)(v2 + 488) = *(_OWORD *)(a2 + 488);
          v68 = *(_OWORD *)(a2 + 504);
          v69 = *(_OWORD *)(a2 + 520);
          v70 = *(_OWORD *)(a2 + 536);
          *(_QWORD *)(v2 + 552) = *(_QWORD *)(a2 + 552);
          *(_OWORD *)(v2 + 520) = v69;
          *(_OWORD *)(v2 + 536) = v70;
          *(_OWORD *)(v2 + 504) = v68;
          *(_OWORD *)(v2 + 560) = *(_OWORD *)(a2 + 560);
          *(_DWORD *)(v2 + 992) = 7;
          return v2;
        }
      }
      else
      {
        v33 = (void *)(result + 168);
        v34 = (const void *)(a2 + 168);
        if (v3 == 5)
        {
          memcpy(v33, v34, 0x12DuLL);
          *(_DWORD *)(v2 + 992) = 5;
        }
        else
        {
          memcpy(v33, v34, 0x12DuLL);
          *(_DWORD *)(v2 + 992) = 4;
        }
        return v2;
      }
    }
    else if (v3 > 1)
    {
      *(_DWORD *)(result + 992) = -1;
      *(_OWORD *)result = *(_OWORD *)a2;
      v45 = *(_OWORD *)(a2 + 16);
      v46 = *(_OWORD *)(a2 + 32);
      v47 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 32) = v46;
      *(_OWORD *)(result + 48) = v47;
      *(_OWORD *)(result + 16) = v45;
      v48 = *(_OWORD *)(a2 + 104);
      v49 = *(_OWORD *)(a2 + 120);
      v50 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(result + 136) = v50;
      *(_OWORD *)(result + 120) = v49;
      *(_OWORD *)(result + 104) = v48;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      v51 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(result + 144) = v51;
      if (v3 == 2)
      {
        *(_OWORD *)(result + 168) = *(_OWORD *)(a2 + 168);
        v52 = *(_OWORD *)(a2 + 184);
        v53 = *(_OWORD *)(a2 + 200);
        v54 = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(result + 232) = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(result + 216) = v54;
        *(_OWORD *)(result + 200) = v53;
        *(_OWORD *)(result + 184) = v52;
        *(_DWORD *)(result + 992) = 2;
      }
      else
      {
        memcpy((void *)(result + 168), (const void *)(a2 + 168), 0x12DuLL);
        *(_DWORD *)(v2 + 992) = 3;
        return v2;
      }
    }
    else if (v3)
    {
      *(_DWORD *)(result + 992) = -1;
      *(_OWORD *)result = *(_OWORD *)a2;
      v5 = *(_OWORD *)(a2 + 16);
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 32) = v6;
      *(_OWORD *)(result + 48) = v7;
      *(_OWORD *)(result + 16) = v5;
      v8 = *(_OWORD *)(a2 + 104);
      v9 = *(_OWORD *)(a2 + 120);
      v10 = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(result + 136) = v10;
      *(_OWORD *)(result + 120) = v9;
      *(_OWORD *)(result + 104) = v8;
      *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
      v11 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(result + 144) = v11;
      *(_DWORD *)(result + 992) = 1;
    }
    else
    {
      *(_DWORD *)(result + 992) = 0;
    }
    return result;
  }
  *(_DWORD *)(result + 992) = -1;
  *(_OWORD *)result = *(_OWORD *)a2;
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(result + 32) = v13;
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v12;
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(result + 136) = v17;
  *(_OWORD *)(result + 120) = v16;
  *(_OWORD *)(result + 104) = v15;
  *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
  v18 = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(result + 160) = *(_BYTE *)(a2 + 160);
  *(_OWORD *)(result + 144) = v18;
  if (v3 > 0xB)
  {
    if (v3 <= 0xD)
    {
      if (v3 == 13)
      {
        v35 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(result + 168) = v35;
        v36 = *(_OWORD *)(a2 + 200);
        v37 = *(_OWORD *)(a2 + 216);
        v38 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(result + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(result + 232) = v38;
        *(_OWORD *)(result + 216) = v37;
        *(_OWORD *)(result + 200) = v36;
        v39 = *(_OWORD *)(a2 + 264);
        v40 = *(_OWORD *)(a2 + 280);
        v41 = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(result + 296) = *(_OWORD *)(a2 + 296);
        *(_OWORD *)(result + 312) = v41;
        *(_OWORD *)(result + 264) = v39;
        *(_OWORD *)(result + 280) = v40;
        v42 = *(_OWORD *)(a2 + 328);
        v43 = *(_OWORD *)(a2 + 344);
        v44 = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(result + 360) = *(_OWORD *)(a2 + 360);
        *(_OWORD *)(result + 376) = v44;
        *(_OWORD *)(result + 328) = v42;
        *(_OWORD *)(result + 344) = v43;
        *(_DWORD *)(result + 992) = 13;
      }
      else
      {
        memcpy((void *)(result + 168), (const void *)(a2 + 168), 0x12DuLL);
        *(_DWORD *)(v2 + 992) = 12;
        return v2;
      }
      return result;
    }
    v58 = (void *)(result + 168);
    if (v3 == 14)
    {
      memcpy(v58, (const void *)(a2 + 168), 0x2C9uLL);
      *(_DWORD *)(v2 + 992) = 14;
      return v2;
    }
    memcpy(v58, (const void *)(a2 + 168), 0x2C9uLL);
    *(_QWORD *)(v2 + 888) = *(_QWORD *)(a2 + 888);
    v71 = *(_QWORD *)(a2 + 896);
    *(_QWORD *)(v2 + 896) = v71;
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    *(_OWORD *)(v2 + 904) = *(_OWORD *)(a2 + 904);
    v74 = *(_OWORD *)(a2 + 920);
    v75 = *(_OWORD *)(a2 + 936);
    v76 = *(_OWORD *)(a2 + 952);
    *(_QWORD *)(v2 + 968) = *(_QWORD *)(a2 + 968);
    *(_OWORD *)(v2 + 936) = v75;
    *(_OWORD *)(v2 + 952) = v76;
    *(_OWORD *)(v2 + 920) = v74;
    *(_OWORD *)(v2 + 976) = *(_OWORD *)(a2 + 976);
    v3 = 15;
LABEL_45:
    *(_DWORD *)(v2 + 992) = v3;
    return v2;
  }
  v19 = (void *)(result + 168);
  if (v3 > 9)
  {
    if (v3 == 10)
    {
      memcpy(v19, (const void *)(a2 + 168), 0x1E9uLL);
      *(_DWORD *)(v2 + 992) = 10;
      return v2;
    }
    else
    {
      memcpy(v19, (const void *)(a2 + 168), 0x1E9uLL);
      *(_QWORD *)(v2 + 664) = *(_QWORD *)(a2 + 664);
      v59 = *(_QWORD *)(a2 + 672);
      *(_QWORD *)(v2 + 672) = v59;
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      *(_OWORD *)(v2 + 680) = *(_OWORD *)(a2 + 680);
      v62 = *(_OWORD *)(a2 + 696);
      v63 = *(_OWORD *)(a2 + 712);
      v64 = *(_OWORD *)(a2 + 728);
      *(_QWORD *)(v2 + 744) = *(_QWORD *)(a2 + 744);
      *(_OWORD *)(v2 + 712) = v63;
      *(_OWORD *)(v2 + 728) = v64;
      *(_OWORD *)(v2 + 696) = v62;
      *(_OWORD *)(v2 + 752) = *(_OWORD *)(a2 + 752);
      *(_DWORD *)(v2 + 992) = 11;
      return v2;
    }
  }
  else if (v3 == 9)
  {
    memcpy(v19, (const void *)(a2 + 168), 0x145uLL);
    v20 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(v2 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(v2 + 504) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_OWORD *)(v2 + 512) = *(_OWORD *)(a2 + 512);
    v23 = *(_OWORD *)(a2 + 528);
    v24 = *(_OWORD *)(a2 + 544);
    v25 = *(_OWORD *)(a2 + 560);
    *(_QWORD *)(v2 + 576) = *(_QWORD *)(a2 + 576);
    *(_OWORD *)(v2 + 544) = v24;
    *(_OWORD *)(v2 + 560) = v25;
    *(_OWORD *)(v2 + 528) = v23;
    *(_OWORD *)(v2 + 584) = *(_OWORD *)(a2 + 584);
    *(_DWORD *)(v2 + 992) = 9;
    return v2;
  }
  else
  {
    memcpy(v19, (const void *)(a2 + 168), 0x145uLL);
    *(_DWORD *)(v2 + 992) = 8;
    return v2;
  }
}

uint64_t sub_207DFE100(uint64_t result, float a2, float a3, double a4, double a5, double a6, float a7, float a8, float a9)
{
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  unsigned int v16;
  _BYTE *v17;
  unsigned int v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  float v23;
  uint64_t *v24;
  uint64_t *v25;
  double *v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (a2 < 0.0 || a3 < 0.0 || **(float **)result <= a2 || **(float **)(result + 8) <= a3)
  {
    v38 = **(uint64_t ***)(result + 56);
    v39 = *(uint64_t **)(result + 16);
    v41 = *v38;
    v40 = v38[1];
    v42 = *v39;
    v43 = v39[1];
    *(_DWORD *)(v41 + 4 * *v39) = 0;
    *v39 = v42 + 1;
    v39[1] = v43 + 1;
    *(_DWORD *)(v40 + 4 * v43) = 0;
    ++**(_QWORD **)(result + 40);
  }
  else
  {
    v10 = **(_QWORD **)(result + 32);
    v11 = v10 * (unint64_t)a3 + 2 * (unint64_t)a2;
    v12 = *(uint64_t **)(result + 16);
    v13 = **(_QWORD **)(result + 24);
    v14 = a2 - (float)(unint64_t)a2;
    v15 = a3 - (float)(unint64_t)a3;
    v16 = 1.0;
    LOBYTE(v16) = *(_BYTE *)(v13 + v11);
    v17 = (_BYTE *)(v13 + v10 + v11);
    LOBYTE(a7) = *v17;
    LOBYTE(a8) = *(_BYTE *)(v13 + v11 + 2);
    LOBYTE(a9) = v17[2];
    *(float *)&v18 = (float)LODWORD(a9);
    v19 = (float)((float)(1.0 - v14) * (float)v16) + (float)(v14 * (float)LODWORD(a8));
    *(float *)&v20 = v14 * *(float *)&v18;
    *(float *)&v21 = v15 * (float)((float)((float)(1.0 - v14) * (float)LODWORD(a7)) + (float)(v14 * *(float *)&v18));
    v22 = (float)((float)(1.0 - v15) * v19) + *(float *)&v21;
    LOBYTE(v21) = *(_BYTE *)(v13 + v11 + 1);
    LOBYTE(v20) = v17[1];
    LOBYTE(v18) = *(_BYTE *)(v13 + v11 + 3);
    LOBYTE(v9) = v17[3];
    v23 = (float)((float)(1.0 - v15) * (float)((float)((float)(1.0 - v14) * (float)v21) + (float)(v14 * (float)v18)))
        + (float)(v15 * (float)((float)((float)(1.0 - v14) * (float)v20) + (float)(v14 * (float)v9)));
    v24 = **(uint64_t ***)(result + 56);
    if (**(_BYTE **)(result + 48))
    {
      v26 = *(double **)(result + 72);
      v25 = *(uint64_t **)(result + 80);
      v27 = *(double **)(result + 64);
      v28 = (*v12)++;
      v30 = *v24;
      v29 = v24[1];
      *(float *)(v30 + 4 * v28) = v22;
      v31 = *v25 + 1;
      *v25 = v31;
      v32 = v22;
      v33 = *v27 + (v32 - *v27) / (double)(unint64_t)v31;
      *v27 = v33;
      *v26 = *v26 + (v32 - v33) * (v32 - v33);
      v34 = v12[1];
      v12[1] = v34 + 1;
      *(float *)(v29 + 4 * v34) = v23;
      v35 = *v25 + 1;
      *v25 = v35;
      v36 = v23;
      v37 = *v27 + (v36 - *v27) / (double)(unint64_t)v35;
      *v27 = v37;
      *v26 = *v26 + (v36 - v37) * (v36 - v37);
    }
    else
    {
      v45 = *v24;
      v44 = v24[1];
      v46 = *v12;
      v47 = v12[1];
      *(float *)(v45 + 4 * *v12) = v22;
      *v12 = v46 + 1;
      v12[1] = v47 + 1;
      *(float *)(v44 + 4 * v47) = v23;
    }
  }
  return result;
}

__n128 sub_207DFE31C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C075DF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_207DFE354(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C075DF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207DFE374(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_207DFE37C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvP10__CVBufferEJRS6_EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvP10__CVBufferEJRS6_EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvP10__CVBufferEJRS6_EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFvP10__CVBufferEJRS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207DFE3E8()
{
  return &unk_24C075E58;
}

void sub_207DFE3F4(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  void *__p;

  sub_207DFE700(a1, (unint64_t)&v16);
  v3 = (std::__shared_weak_count_vtbl *)v16;
  v17 = v16;
  if (v16)
  {
    v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C076010;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  *(_QWORD *)(a2 + 16) = 0;
  (*((void (**)(void **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&__p, v3, 1);
  v7 = __p;
  v8 = *((_QWORD *)__p + 2);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v8;
  __p = 0;
  operator delete(v7);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v11 = v18;
  if (!v18)
    goto LABEL_14;
  v12 = (unint64_t *)&v18->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (unsigned int *)v16;
    v16 = 0;
    if (!v14)
      return;
  }
  else
  {
LABEL_14:
    v14 = (unsigned int *)v16;
    v16 = 0;
    if (!v14)
      return;
  }
  *(_QWORD *)v14 = off_24C088488;
  v15 = v14[10];
  if ((_DWORD)v15 != -1)
    ((void (*)(void **, unsigned int *))off_24C089598[v15])(&__p, v14 + 4);
  operator delete(v14);
}

void sub_207DFE590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207DFE84C(&a9);
  _Unwind_Resume(a1);
}

void sub_207DFE5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  sub_207C99D78(v11);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_207C99D78((uint64_t)&a10);
  sub_207DFE84C(&a9);
  _Unwind_Resume(a1);
}

void sub_207DFE5F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207DFE660()
{
  return 1;
}

uint64_t sub_207DFE668(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_207DFE670@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_207DFE684(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

double sub_207DFE700@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  _QWORD *v2;
  _BOOL8 v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  void (**v9)();
  int v10;
  _BYTE v11[24];
  unsigned int v12;
  __int128 v13;
  _QWORD v14[2];

  v2 = (_QWORD *)a2;
  LODWORD(a2) = *a1;
  v3 = *a1 != 0;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v14[0] = *(_QWORD *)a1;
  v14[1] = v3 | (a2 << 32);
  sub_2081374F8((uint64_t)&v9, (uint64_t)v14);
  v4 = operator new(0x40uLL);
  v5 = v4;
  *(_QWORD *)v4 = off_24C088488;
  v6 = v12;
  v4[2] = v10;
  *((_BYTE *)v4 + 16) = 0;
  v4[10] = -1;
  if ((_DWORD)v6 == -1)
  {
    result = *(double *)&v13;
    *((_OWORD *)v4 + 3) = v13;
    *(_QWORD *)v4 = &off_24C08A428;
    *v2 = v4;
  }
  else
  {
    ((void (*)(_QWORD *, _DWORD *, _BYTE *))off_24C075F60[v6])(v14, v4 + 4, v11);
    v5[10] = v6;
    v7 = v12;
    result = *(double *)&v13;
    *((_OWORD *)v5 + 3) = v13;
    *(_QWORD *)v5 = &off_24C08A428;
    *v2 = v5;
    v9 = off_24C088488;
    if ((_DWORD)v7 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24C089598[v7])(v14, v11);
  }
  return result;
}

void sub_207DFE838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2081294F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void **sub_207DFE84C(void **a1)
{
  unsigned int *v2;
  uint64_t v3;
  char v5;

  v2 = (unsigned int *)*a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C088488;
    v3 = v2[10];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, unsigned int *))off_24C089598[v3])(&v5, v2 + 4);
    operator delete(v2);
  }
  return a1;
}

__n128 sub_207DFE8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C08A5D8;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_207DFE8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = off_24C08A598;
  return result;
}

__n128 sub_207DFE8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = off_24C08A5B8;
  return result;
}

__n128 sub_207DFE910(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_207DFE924(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207DFE938(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned int **)(a1 + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C088488;
    v2 = v1[10];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_24C089598[v2])(&v3, v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_207DFE9A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit2cv13CVImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

__n128 sub_207DFEA20(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C075F90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_207DFEA60(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C075F90;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_207DFEA88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_207DFEA98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_3$_2EEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_3$_2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_3$_2EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRPFiP10__CVBufferyEJRS6_3$_2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207DFEB04()
{
  return &unk_24C075FF0;
}

float64_t sub_207DFEB10@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q5>)
{
  double v13;
  double v14;
  _BOOL4 v16;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v42;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v49;

  _D3 = *(_QWORD *)(a1 + 8);
  __asm { FMLA            D2, D3, V1.D[1] }
  v13 = sqrt(_D2 + *(double *)(a1 + 16) * *(double *)(a1 + 16));
  v14 = a2[1].f64[0];
  _Q2 = *a2;
  if (v13 == 0.0 || fabs(v13) <= 0.00000001)
  {
    v49 = *a2;
    v16 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ACV/Math/src/LinearAlgebra.cpp", 659, (uint64_t)"!Near(T{0}, sourceNorm)", 23, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    _Q2 = v49;
    if (v16)
      goto LABEL_28;
  }
  _Q0 = vmulq_f64(_Q2, _Q2);
  _D1 = _Q2.f64[1];
  __asm { FMLA            D0, D1, V2.D[1] }
  v19 = sqrt(_Q0.f64[0] + v14 * v14);
  if ((v19 == 0.0 || fabs(v19) <= 0.00000001)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ACV/Math/src/LinearAlgebra.cpp", 660, (uint64_t)"!Near(T{0}, targetNorm)", 23, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
LABEL_28:
    abort();
  }
  if (v13 == 1.0)
  {
    _Q0.f64[0] = *(float64_t *)(a1 + 16);
    v20 = *(float64x2_t *)a1;
    v21 = (float64x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
  }
  else
  {
    if (v13 <= 1.0)
      v22 = 1.0 - v13;
    else
      v22 = v13 + -1.0;
    _Q0.f64[0] = *(float64_t *)(a1 + 16);
    v20 = *(float64x2_t *)a1;
    v21 = (float64x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
    if (v22 > 0.00000001)
    {
      v20.f64[1] = v21.f64[0];
      v23 = vmulq_f64(v20, v20);
      v23.f64[0] = 1.0 / sqrt(v23.f64[0] + v21.f64[0] * v21.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
      v20 = vmulq_n_f64(v20, v23.f64[0]);
      v21 = (float64x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, v23);
    }
  }
  if (v19 == 1.0)
  {
    a4.f64[0] = a2[1].f64[0];
    _Q6 = *a2;
    v25 = (float64x2_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL);
  }
  else
  {
    if (v19 <= 1.0)
      v26 = 1.0 - v19;
    else
      v26 = v19 + -1.0;
    a4.f64[0] = a2[1].f64[0];
    _Q6 = *a2;
    v25 = (float64x2_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL);
    if (v26 > 0.00000001)
    {
      _Q6.f64[1] = v25.f64[0];
      v27 = vmulq_f64(_Q6, _Q6);
      v27.f64[0] = 1.0 / sqrt(v27.f64[0] + v25.f64[0] * v25.f64[0] + a4.f64[0] * a4.f64[0]);
      _Q6 = vmulq_n_f64(_Q6, v27.f64[0]);
      v25 = (float64x2_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL);
      *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vmulq_f64(a4, v27);
    }
  }
  v28 = vmulq_f64(v20, _Q6);
  v29 = v28.f64[0] + v21.f64[0] * v25.f64[0] + _Q0.f64[0] * a4.f64[0];
  if (v29 == -1.0 || ((v30 = v29 + 1.0, v29 <= -1.0) ? (v31 = -1.0 - v29) : (v31 = v29 + 1.0), v31 <= 0.00000001))
  {
    _Q0.f64[0] = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)a3 = 0xBFF0000000000000;
    *(_QWORD *)(a3 + 32) = 0xBFF0000000000000;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0xBFF0000000000000;
  }
  else
  {
    v32.f64[0] = v21.f64[0];
    v32.f64[1] = _Q0.f64[0];
    _Q0.f64[1] = v20.f64[0];
    v33.f64[0] = v25.f64[0];
    v33.f64[1] = a4.f64[0];
    a4.f64[1] = _Q6.f64[0];
    _Q0 = vsubq_f64(vmulq_f64(v32, a4), vmulq_f64(_Q0, v33));
    v34 = vsubq_f64(vmulq_f64(v20, v25), vmulq_f64(v21, _Q6));
    v33.f64[0] = -_Q0.f64[1];
    v35.f64[0] = 0.0;
    v35.f64[1] = v34.f64[0];
    v36 = vaddq_f64(v33, (float64x2_t)0);
    v33.f64[1] = -v34.f64[0];
    v28.f64[0] = 1.0 / v30;
    *(_QWORD *)&v37.f64[0] = vdupq_laneq_s64((int64x2_t)_Q0, 1).u64[0];
    v38 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)0, 8uLL);
    v37.f64[1] = -_Q0.f64[0];
    v39 = vaddq_f64(v35, (float64x2_t)xmmword_20822E370);
    v40 = vaddq_f64(_Q0, (float64x2_t)0);
    __asm { FMOV            V23.2D, #1.0 }
    v42 = vmlsq_lane_f64(vmlaq_n_f64(vmulq_f64(v35, (float64x2_t)0), v38, v34.f64[0]), v37, _Q0.f64[1], 0);
    _D25 = 0;
    __asm { FMLS            D6, D25, V0.D[1] }
    v44 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v35, -v34.f64[0]), (float64x2_t)0, v38), v37, _Q0.f64[0]);
    v34.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v34.f64[0], _Q0, 1), 0.0, _Q0.f64[0]), 0.0, _Q0.f64[0]);
    v45 = vmlaq_f64(vmlsq_lane_f64(vmulq_laneq_f64(v35, _Q0, 1), v38, _Q0.f64[0], 0), (float64x2_t)0, v37);
    __asm { FMLS            D19, D0, V0.D[0] }
    _Q0.f64[0] = _D19 + 0.0;
    *(_QWORD *)(a3 + 16) = *(_OWORD *)&vmlaq_f64(v36, v28, _Q6);
    *(float64x2_t *)a3 = vmlaq_n_f64(v39, v42, v28.f64[0]);
    *(_QWORD *)(a3 + 40) = *(_OWORD *)&vmlaq_f64(v40, v28, v34);
    *(float64x2_t *)(a3 + 24) = vmlaq_n_f64(vaddq_f64(v38, (float64x2_t)xmmword_2082339F0), v44, v28.f64[0]);
    *(_QWORD *)(a3 + 64) = *(_OWORD *)&vmlaq_f64(_Q23, v28, _Q0);
    *(float64x2_t *)(a3 + 48) = vmlaq_n_f64(vaddq_f64(v37, (float64x2_t)0), v45, v28.f64[0]);
  }
  return _Q0.f64[0];
}

uint64_t sub_207DFEE80@<X0>(CVPixelBufferPoolRef *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  std::runtime_error *exception;
  uint64_t v10;
  std::string v11;
  uint64_t (**v12)(_QWORD);
  __int128 v13;
  char v14;

  sub_20815A470(a1, (uint64_t)&v12);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v10 = sub_207DFF0FC((uint64_t)&v12);
    sub_207DFF018("Failed to create PixelBuffer: ", v10);
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v3 = *(_QWORD *)(sub_207DFF13C((uint64_t)&v12) + 8);
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  result = kdebug_trace();
  *(_QWORD *)a2 = &off_24C08A5D8;
  *(_OWORD *)(a2 + 8) = v13;
  v13 = 0uLL;
  if (v14)
    return (*v12)(&v12);
  return result;
}

void sub_207DFEFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_207DE69C4((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  sub_207DE69C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_207DFF018(char *__s, uint64_t a2)
{
  uint64_t result;
  unsigned int v4[6];
  int v5;
  char v6;
  char *v7;

  v5 = 0;
  sub_207DFF650(v4, __s);
  sub_207DFF37C((uint64_t)&v7, v4, a2);
  if (v5 == -1)
    sub_207CA9F48();
  v7 = &v6;
  result = ((uint64_t (*)(char **, unsigned int *))off_24C0760C0[v5])(&v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(char **, unsigned int *))off_24C076090[v5])(&v7, v4);
  return result;
}

void sub_207DFF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DFF0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207DFF0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207DFF0FC(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 32))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C072430;
    __cxa_throw(exception, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_207DFF13C(uint64_t result)
{
  uint64_t v1;
  void *exception;
  _DWORD v3[8];

  v1 = result;
  if (!*(_BYTE *)(result + 32))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    sub_207DFF1F4(v3, v1);
    sub_207DFF254((uint64_t)exception, (uint64_t)v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C076050, (void (*)(void *))sub_207DFF2D8);
  }
  return result;
}

void sub_207DFF1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_DWORD *sub_207DFF1F4(_DWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  __int128 v4;

  *a1 = *(_DWORD *)a2;
  v3 = a1 + 2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_207CA40D8(v3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v3 + 2) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

uint64_t sub_207DFF254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = off_24C076078;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v3 = a1 + 16;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_207CA40D8((_BYTE *)v3, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_207DFF2C4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_207DFF2D8(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_24C076078;
  if (SHIBYTE(this[4].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

void sub_207DFF324(std::exception *this)
{
  void *v2;

  this->__vftable = (std::exception_vtbl *)off_24C076078;
  if (SHIBYTE(this[4].__vftable) < 0)
  {
    operator delete(this[2].__vftable);
    std::exception::~exception(this);
  }
  else
  {
    std::exception::~exception(this);
  }
  operator delete(v2);
}

void sub_207DFF37C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  _OWORD *v5;
  void *p_p;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD *v23;
  void *__p;
  void **v25;
  unsigned int *v26;
  void **v27;
  void **v28;
  _QWORD v29[2];

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v23 = v5;
  v29[0] = a3;
  v29[1] = a3 + 8;
  sub_20815CBE8((uint64_t)v29);
  if (SHIBYTE(v26) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (SHIBYTE(v26) >= 0)
    v7 = HIBYTE(v26);
  else
    v7 = (uint64_t)v25;
  sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)p_p, v7);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
    v8 = *((_DWORD *)v5 + 30);
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
LABEL_12:
    v11 = *((_QWORD *)v5 + 14);
    v12 = *((_QWORD *)v5 + 9);
    if (v11 < v12)
    {
      *((_QWORD *)v5 + 14) = v12;
      v11 = v12;
    }
    v13 = (const void *)*((_QWORD *)v5 + 8);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
    goto LABEL_15;
  }
  operator delete(__p);
  v8 = *((_DWORD *)v5 + 30);
  if ((v8 & 0x10) != 0)
    goto LABEL_12;
LABEL_9:
  if ((v8 & 8) == 0)
  {
    v9 = 0;
    HIBYTE(v22) = 0;
    v10 = __dst;
    goto LABEL_22;
  }
  v13 = (const void *)*((_QWORD *)v5 + 5);
  v9 = *((_QWORD *)v5 + 7) - (_QWORD)v13;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_30:
    sub_207C95C50();
LABEL_15:
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_21;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_21:
    memmove(v10, v13, v9);
LABEL_22:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23;
  if (v23)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v23 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v16 + 16);
    operator delete(v16);
  }
  __p = a2;
  v25 = __dst;
  v26 = a2;
  v27 = __dst;
  v28 = __dst;
  v20 = a2[6];
  if ((_DWORD)v20 == -1)
    sub_207CA9F48();
  v29[0] = &__p;
  ((void (*)(_QWORD *, unsigned int *))off_24C0760A8[v20])(v29, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_207DFF5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_2082155DC(&a16);
    _Unwind_Resume(a1);
  }
  sub_2082155DC(&a16);
  _Unwind_Resume(a1);
}

_DWORD *sub_207DFF650(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C076090[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_207DFF740(OpaqueVTPixelTransferSession *a1)
{
  if (a1)
  {
    VTPixelTransferSessionInvalidate(a1);
    CFRelease(a1);
  }
}

VTPixelTransferSessionRef *sub_207DFF76C(VTPixelTransferSessionRef *a1)
{
  OSStatus v2;
  VTPixelTransferSessionRef v3;
  VTPixelTransferSessionRef v4;
  BOOL v5;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  *a1 = 0;
  a1[1] = (VTPixelTransferSessionRef)sub_207DFF740;
  pixelTransferSessionOut = 0;
  v2 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], &pixelTransferSessionOut);
  v3 = pixelTransferSessionOut;
  v4 = *a1;
  *a1 = pixelTransferSessionOut;
  if (v4)
  {
    ((void (*)(VTPixelTransferSessionRef))a1[1])(v4);
    v3 = pixelTransferSessionOut;
  }
  a1[1] = (VTPixelTransferSessionRef)sub_207DFF740;
  if (v2)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (v5)
  {
    if (v2
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/AppleUtil/src/CvPixelBufferTransferSession.cpp", 52, (uint64_t)"err == kCVReturnSuccess", 23, (uint64_t)&unk_20821FECB, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  else
  {
    VTSessionSetProperty(v3, (CFStringRef)*MEMORY[0x24BDF9678], (CFTypeRef)*MEMORY[0x24BDBD270]);
  }
  return a1;
}

void sub_207DFF854(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(exception_object);
}

BOOL sub_207DFF878(OpaqueVTPixelTransferSession **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  __CVBuffer **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  __CVBuffer *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __CVBuffer **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  __CVBuffer *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  OpaqueVTPixelTransferSession *v36;
  __CVBuffer *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  __CVBuffer **v42;
  __CVBuffer *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  OSStatus v48;
  std::__shared_weak_count *v49;
  __CVBuffer *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  __CVBuffer **v56;
  std::__shared_weak_count *v57;
  __CVBuffer *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  __CVBuffer **v65;
  std::__shared_weak_count *v66;
  __CVBuffer **v67;
  std::__shared_weak_count *v68;

  v6 = *(uint64_t **)(a2 + 8);
  if (v6)
  {
    v8 = *v6;
    v7 = (std::__shared_weak_count *)v6[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v8)
        goto LABEL_19;
    }
    else
    {
LABEL_7:
      if (!v8)
        goto LABEL_19;
    }
    v12 = *(uint64_t **)(a3 + 8);
    if (v12)
    {
      v14 = *v12;
      v13 = (std::__shared_weak_count *)v12[1];
      if (!v13)
        goto LABEL_14;
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v14)
          goto LABEL_20;
      }
      else
      {
LABEL_14:
        if (v14)
          goto LABEL_20;
      }
    }
  }
LABEL_19:
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/AppleUtil/src/CvPixelBufferTransferSession.cpp", 62, (uint64_t)"input_image && output_image", 27, (uint64_t)&unk_20821FECB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_20:
  v18 = *(__CVBuffer ***)(a2 + 8);
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  v67 = v18;
  v68 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if (v18)
  {
    v23 = *v18;
    v22 = (std::__shared_weak_count *)v18[1];
    if (!v22)
      goto LABEL_29;
    v24 = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (v26)
    {
LABEL_29:
      if (!v23)
        goto LABEL_31;
      goto LABEL_30;
    }
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (v23)
LABEL_30:
      sub_20815FC78((uint64_t)v67);
  }
LABEL_31:
  v27 = *(__CVBuffer ***)(a3 + 8);
  v28 = *(std::__shared_weak_count **)(a3 + 16);
  v65 = v27;
  v66 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  if (v27)
  {
    v32 = *v27;
    v31 = (std::__shared_weak_count *)v27[1];
    if (!v31)
      goto LABEL_40;
    v33 = (unint64_t *)&v31->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 - 1, v33));
    if (v35)
    {
LABEL_40:
      if (!v32)
        goto LABEL_42;
      goto LABEL_41;
    }
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (v32)
LABEL_41:
      sub_20815FD68((uint64_t)v65);
  }
LABEL_42:
  v36 = *a1;
  if (v67)
  {
    v37 = *v67;
    v38 = (std::__shared_weak_count *)v67[1];
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      do
        v41 = __ldaxr(v39);
      while (__stlxr(v41 - 1, v39));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v42 = v65;
    if (v65)
      goto LABEL_50;
LABEL_57:
    v43 = 0;
    goto LABEL_58;
  }
  v37 = 0;
  v42 = v65;
  if (!v65)
    goto LABEL_57;
LABEL_50:
  v43 = *v42;
  v44 = (std::__shared_weak_count *)v42[1];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    do
      v47 = __ldaxr(v45);
    while (__stlxr(v47 - 1, v45));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_58:
  v48 = VTPixelTransferSessionTransferImage(v36, v37, v43);
  if (v65)
  {
    v50 = *v65;
    v49 = (std::__shared_weak_count *)v65[1];
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (!v50)
          goto LABEL_66;
        goto LABEL_65;
      }
    }
    if (v50)
LABEL_65:
      sub_20815FF44((uint64_t)v65);
  }
  if (!v66)
    goto LABEL_70;
LABEL_66:
  v54 = (unint64_t *)&v66->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    v56 = v67;
    if (!v67)
      goto LABEL_78;
  }
  else
  {
LABEL_70:
    v56 = v67;
    if (!v67)
      goto LABEL_78;
  }
  v58 = *v56;
  v57 = (std::__shared_weak_count *)v56[1];
  if (v57)
  {
    v59 = (unint64_t *)&v57->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    do
      v61 = __ldaxr(v59);
    while (__stlxr(v61 - 1, v59));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      if (!v58)
        goto LABEL_78;
      goto LABEL_77;
    }
  }
  if (v58)
LABEL_77:
    sub_20815FE54((uint64_t)v67);
LABEL_78:
  if (v68)
  {
    v62 = (unint64_t *)&v68->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  return v48 == 0;
}

void sub_207DFFCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a4);
  if (a4)
  {
    p_shared_owners = (unint64_t *)&a4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
      sub_20815AC38((uint64_t *)va);
      _Unwind_Resume(a1);
    }
  }
  sub_20815AC38((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_207DFFDB0(OpaqueVTPixelTransferSession **a1, std::__shared_weak_count_vtbl *a2, std::__shared_weak_count_vtbl *a3)
{
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[2];
  std::__shared_weak_count *v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  sub_20815B050(v15, a2, 1, 0);
  sub_20815B050(v13, a3, 1, 0);
  v5 = sub_207DFF878(a1, (uint64_t)v15, (uint64_t)v13);
  v13[0] = &off_24C08A5D8;
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v15[0] = &off_24C08A5D8;
  v9 = v16;
  if (!v16)
    return v5;
  v10 = (unint64_t *)&v16->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return v5;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return v5;
}

void sub_207DFFEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_20815B3F4(&a9);
  sub_20815B3F4(&a12);
  _Unwind_Resume(a1);
}

void sub_207DFFED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207DFFEE4(CVPixelBufferPoolRef *a1@<X0>, OpaqueVTPixelTransferSession **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t (**v49)();
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t (**v54)();
  uint64_t v55;
  std::__shared_weak_count *v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  unsigned __int8 v59;
  _QWORD v60[3];

  sub_207DFEE80(a1, (uint64_t)v60);
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
  v8 = (std::__shared_weak_count *)v60[2];
  v7[1].__shared_owners_ = v60[1];
  v7[1].__shared_weak_owners_ = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v57 = &v7[1].__vftable;
    v58 = v7;
    v59 = 1;
    v60[0] = &off_24C08A5D8;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v57 = &v7[1].__vftable;
    v58 = v7;
    v59 = 1;
  }
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  v52 = *a3;
  v53 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v54 = &off_24C08A5D8;
  if (!v12)
  {
    v55 = 0;
    v56 = 0;
    v20 = v57;
    v21 = v58;
    v48 = v58;
    if (!v58)
      goto LABEL_22;
    goto LABEL_20;
  }
  v17 = *(_QWORD *)(v12 + 8);
  v16 = *(std::__shared_weak_count **)(v12 + 16);
  v55 = v17;
  v56 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = v57;
  v21 = v58;
  v48 = v58;
  if (v58)
  {
LABEL_20:
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
LABEL_22:
  v49 = &off_24C08A5D8;
  if (v20)
  {
    v25 = v20[1];
    v24 = (std::__shared_weak_count *)v20[2];
    v50 = v25;
    v51 = v24;
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v50 = 0;
    v51 = 0;
  }
  v28 = sub_207DFF878(a2, (uint64_t)&v54, (uint64_t)&v49);
  v49 = &off_24C08A5D8;
  v29 = v51;
  if (v51)
  {
    v30 = (unint64_t *)&v51->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v48)
  {
    v32 = (unint64_t *)&v48->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v54 = &off_24C08A5D8;
  v34 = v56;
  if (v56)
  {
    v35 = (unint64_t *)&v56->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v53;
  if (!v53)
    goto LABEL_47;
  v38 = (unint64_t *)&v53->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_47:
    if (v28)
      goto LABEL_48;
LABEL_54:
    *(_BYTE *)a4 = 0;
    v44 = v59;
    *(_BYTE *)(a4 + 16) = 0;
    if (!v44)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  if (!v28)
    goto LABEL_54;
LABEL_48:
  v40 = v58;
  *(_QWORD *)a4 = v57;
  *(_QWORD *)(a4 + 8) = v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v43 = v59;
  *(_BYTE *)(a4 + 16) = 1;
  if (v43)
  {
LABEL_55:
    v45 = v58;
    if (v58)
    {
      v46 = (unint64_t *)&v58->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_207E00220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_20815B3F4(&a11);
  sub_207C99D78((uint64_t)&a9);
  sub_20815B3F4(&a16);
  sub_207C99D78((uint64_t)&a14);
  sub_207D2E2BC((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_207E00254(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20815B3F4((_QWORD *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_207E00268(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v1 = *a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (v1)
  {
    v5 = *(uint64_t **)(v1 + 8);
    v6 = *(std::__shared_weak_count **)(v1 + 16);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if (v5)
    {
      v9 = *v5;
      v10 = (std::__shared_weak_count *)v5[1];
      if (v10)
      {
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        do
          v13 = __ldaxr(v11);
        while (__stlxr(v13 - 1, v11));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  if (!v2)
    return v9;
  v16 = (unint64_t *)&v2->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return v9;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v9;
}

void sub_207E003A0(std::__shared_weak_count_vtbl *cf@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  sub_20815B050(v13, cf, 1, 0);
  v15[0] = &off_24C08A5D8;
  v15[1] = v13[1];
  v16 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_207E004C8((uint64_t)v15, a2, a3);
  v15[0] = &off_24C08A5D8;
  v7 = v16;
  if (v16)
  {
    v8 = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13[0] = &off_24C08A5D8;
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_207E004AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_20815B3F4(&a12);
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_207E004C8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int64x2_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  size_t v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  double v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  int v51;
  double v52;
  double v53;
  float v54;
  double v55;
  int v56;
  int v57;
  int v58;
  _BYTE *v59;
  int v60;
  int v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  size_t v70;
  size_t v71;
  size_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  size_t v87;
  size_t v88;
  size_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  unint64_t *v127;
  _QWORD v128[2];
  std::__shared_weak_count *v129;
  _QWORD v130[2];
  std::__shared_weak_count *v131;
  _QWORD v132[3];
  _QWORD v133[3];
  _QWORD v134[3];
  _QWORD v135[3];
  _QWORD *v136;
  std::__shared_weak_count *v137;
  uint64_t (**v138)();
  uint64_t *v139;
  std::__shared_weak_count *v140;

  v6 = *(uint64_t **)(a1 + 8);
  if (v6)
  {
    v8 = *v6;
    v7 = (std::__shared_weak_count *)v6[1];
    if (!v7)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      if (v8)
        goto LABEL_9;
    }
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/AppleUtil/src/CvPixelBufferUtils.cpp", 144, (uint64_t)"img", 3, (uint64_t)&unk_20821FF4A, 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_159;
  }
LABEL_9:
  v12 = sub_20815A764(a1);
  if (v12 <= 1111970368)
  {
    if (v12 > 875704421)
    {
      if (v12 != 875704422 && v12 != 875704438)
      {
        if (v12 != 875836518)
          goto LABEL_97;
LABEL_98:
        v83 = *(_QWORD *)(a1 + 8);
        v84 = *(std::__shared_weak_count **)(a1 + 16);
        v128[0] = &off_24C08A5D8;
        v128[1] = v83;
        v129 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        v87 = sub_20815C130((uint64_t)v128);
        v88 = sub_20815C3B0((uint64_t)v128);
        v89 = sub_20815C630((uint64_t)v128);
        v90 = (std::__shared_weak_count *)operator new(0x30uLL);
        v91 = v90;
        v90->__shared_owners_ = 0;
        v92 = (unint64_t *)&v90->__shared_owners_;
        v90->__shared_weak_owners_ = 0;
        v90->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
        v90[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
        v90[1].__shared_owners_ = v83;
        v90[1].__shared_weak_owners_ = (uint64_t)v84;
        if (v84)
        {
          v93 = (unint64_t *)&v84->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          v137 = v90;
          do
            v95 = __ldxr(v92);
          while (__stxr(v95 + 1, v92));
        }
        else
        {
          v137 = v90;
          v93 = (unint64_t *)&v90->__shared_owners_;
        }
        do
          v96 = __ldxr(v93);
        while (__stxr(v96 + 1, v93));
        v136 = &v90[1].__vftable;
        v138 = &off_24C08A5D8;
        v139 = (uint64_t *)v83;
        v140 = v84;
        do
          v97 = __ldaxr(v92);
        while (__stlxr(v97 - 1, v92));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v91);
        }
        v98 = sub_20815A89C((uint64_t)&v138, 0);
        v99 = v137;
        if (v137)
        {
          v100 = (unint64_t *)&v137->__shared_owners_;
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        v138 = &off_24C08A5D8;
        v102 = v140;
        if (v140)
        {
          v103 = (unint64_t *)&v140->__shared_owners_;
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        v105 = v136;
        *(_BYTE *)a3 = 0;
        *(_OWORD *)(a3 + 8) = xmmword_208239390;
        *(_QWORD *)(a3 + 24) = v87;
        *(_QWORD *)(a3 + 32) = v89;
        *(_QWORD *)(a3 + 40) = v88;
        *(int64x2_t *)(a3 + 48) = vdupq_n_s64(4uLL);
        *(_BYTE *)(a3 + 64) = 0;
        *(_BYTE *)(a3 + 72) = 0;
        *(_QWORD *)(a3 + 80) = v98;
        *(_QWORD *)(a3 + 88) = v99;
        *(_QWORD *)(a3 + 96) = v105;
        *(_QWORD *)(a3 + 104) = v99;
        v128[0] = &off_24C08A5D8;
        v106 = v129;
        if (!v129)
          return;
        v107 = (unint64_t *)&v129->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        goto LABEL_156;
      }
LABEL_29:
      if (a2)
      {
        v20 = *(_QWORD *)(a1 + 8);
        v14 = *(std::__shared_weak_count **)(a1 + 16);
        v134[0] = &off_24C08A5D8;
        v134[1] = v20;
        v134[2] = v14;
        if (v14)
        {
          v21 = (unint64_t *)&v14->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v17 = sub_207E012E8(a3, (uint64_t)v134);
        v134[0] = &off_24C08A5D8;
        if (v14)
        {
          v23 = (unint64_t *)&v14->__shared_owners_;
          do
            v19 = __ldaxr(v23);
          while (__stlxr(v19 - 1, v23));
          goto LABEL_95;
        }
        return;
      }
      v28 = *(uint64_t **)(a1 + 8);
      v29 = *(std::__shared_weak_count **)(a1 + 16);
      v139 = v28;
      v140 = v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v138 = off_24C08A598;
      if (v28)
      {
        v33 = *v28;
        v32 = (std::__shared_weak_count *)v28[1];
        if (v32)
        {
          v34 = (unint64_t *)&v32->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
          do
            v36 = __ldaxr(v34);
          while (__stlxr(v36 - 1, v34));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v33)
          sub_20815FC78((uint64_t)v139);
      }
      v37 = sub_20815C130((uint64_t)&v138);
      v38 = sub_20815C3B0((uint64_t)&v138);
      v39 = sub_20815A89C((uint64_t)&v138, 0);
      v40 = sub_20815A89C((uint64_t)&v138, 1u);
      v41 = sub_20815C768((uint64_t)&v138, 0);
      v42 = sub_20815C768((uint64_t)&v138, 1uLL);
      v43 = (std::__shared_weak_count_vtbl *)operator new[](v38 * 4 * v37);
      v44 = (std::__shared_weak_count *)operator new(0x20uLL);
      v44->__shared_owners_ = 0;
      v46 = (unint64_t *)&v44->__shared_owners_;
      v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C076138;
      v44->__shared_weak_owners_ = 0;
      v44[1].__vftable = v43;
      if (v38 && v37)
      {
        v47 = 0;
        v48 = 0;
        do
        {
          v49 = 0;
          v50 = v40 + (v47 >> 1) * v42;
          do
          {
            v51 = *(unsigned __int8 *)(v50 + (v49 & 0xFFFFFFFFFFFFFFFELL)) - 128;
            LOBYTE(v45) = *(_BYTE *)(v39 + v49);
            v52 = (double)*(unint64_t *)&v45;
            v53 = (double)(*(unsigned __int8 *)(v50 + (v49 | 1)) - 128);
            v54 = v53 * 1.4 + v52;
            *(float *)&v53 = v52 + (double)v51 * -0.343 + v53 * -0.711;
            v55 = (double)v51 * 1.765;
            v56 = llroundf(*(float *)&v53);
            v45 = v55 + v52;
            *(float *)&v45 = v45;
            v57 = llroundf(*(float *)&v45);
            v58 = llroundf(v54);
            v59 = (char *)v43 + v48;
            v60 = v57 & ~(v57 >> 31);
            if (v60 >= 255)
              LOBYTE(v60) = -1;
            *v59 = v60;
            v61 = v56 & ~(v56 >> 31);
            if (v61 >= 255)
              LOBYTE(v61) = -1;
            v59[1] = v61;
            if ((v58 & ~(v58 >> 31)) >= 255)
              v62 = -1;
            else
              v62 = v58 & ~(v58 >> 31);
            v59[2] = v62;
            v59[3] = -1;
            v48 += 4;
            ++v49;
          }
          while (v37 != v49);
          ++v47;
          v39 += v41;
        }
        while (v47 != v38);
      }
      do
        v63 = __ldxr(v46);
      while (__stxr(v63 + 1, v46));
      *(_BYTE *)a3 = 0;
      *(_OWORD *)(a3 + 8) = xmmword_208239390;
      *(_QWORD *)(a3 + 24) = v37;
      *(_QWORD *)(a3 + 32) = 4 * v37;
      *(_QWORD *)(a3 + 40) = v38;
      *(int64x2_t *)(a3 + 48) = vdupq_n_s64(4uLL);
      *(_BYTE *)(a3 + 64) = 0;
      *(_BYTE *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 80) = v43;
      *(_QWORD *)(a3 + 88) = v44;
      *(_QWORD *)(a3 + 96) = 0;
      *(_QWORD *)(a3 + 104) = 0;
      do
        v64 = __ldaxr(v46);
      while (__stlxr(v64 - 1, v46));
      if (v64)
      {
        v65 = v139;
        if (!v139)
          goto LABEL_134;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v65 = v139;
        if (!v139)
        {
LABEL_134:
          v138 = &off_24C08A5D8;
          v114 = v140;
          if (v140)
          {
            v115 = (unint64_t *)&v140->__shared_owners_;
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          return;
        }
      }
      v110 = *v65;
      v109 = (std::__shared_weak_count *)v65[1];
      if (v109)
      {
        v111 = (unint64_t *)&v109->__shared_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
        do
          v113 = __ldaxr(v111);
        while (__stlxr(v113 - 1, v111));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      if (v110)
        sub_20815FE54((uint64_t)v139);
      goto LABEL_134;
    }
    if (v12 == 24)
    {
      v66 = *(_QWORD *)(a1 + 8);
      v67 = *(std::__shared_weak_count **)(a1 + 16);
      v130[0] = &off_24C08A5D8;
      v130[1] = v66;
      v131 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      v70 = sub_20815C130((uint64_t)v130);
      v71 = sub_20815C3B0((uint64_t)v130);
      v72 = sub_20815C630((uint64_t)v130);
      v73 = (std::__shared_weak_count *)operator new(0x30uLL);
      v74 = v73;
      v73->__shared_owners_ = 0;
      v75 = (unint64_t *)&v73->__shared_owners_;
      v73->__shared_weak_owners_ = 0;
      v73->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
      v73[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
      v73[1].__shared_owners_ = v66;
      v73[1].__shared_weak_owners_ = (uint64_t)v67;
      if (v67)
      {
        v76 = (unint64_t *)&v67->__shared_owners_;
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
        v137 = v73;
        do
          v78 = __ldxr(v75);
        while (__stxr(v78 + 1, v75));
      }
      else
      {
        v137 = v73;
        v76 = (unint64_t *)&v73->__shared_owners_;
      }
      do
        v117 = __ldxr(v76);
      while (__stxr(v117 + 1, v76));
      v136 = &v73[1].__vftable;
      v138 = &off_24C08A5D8;
      v139 = (uint64_t *)v66;
      v140 = v67;
      do
        v118 = __ldaxr(v75);
      while (__stlxr(v118 - 1, v75));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v74);
      }
      v119 = sub_20815A89C((uint64_t)&v138, 0);
      v120 = v137;
      if (v137)
      {
        v121 = (unint64_t *)&v137->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v138 = &off_24C08A5D8;
      v123 = v140;
      if (v140)
      {
        v124 = (unint64_t *)&v140->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      v126 = v136;
      *(_BYTE *)a3 = 0;
      *(_OWORD *)(a3 + 8) = xmmword_208232E30;
      *(_QWORD *)(a3 + 24) = v70;
      *(_QWORD *)(a3 + 32) = v72;
      *(_QWORD *)(a3 + 40) = v71;
      *(int64x2_t *)(a3 + 48) = vdupq_n_s64(3uLL);
      *(_BYTE *)(a3 + 64) = 0;
      *(_BYTE *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 80) = v119;
      *(_QWORD *)(a3 + 88) = v120;
      *(_QWORD *)(a3 + 96) = v126;
      *(_QWORD *)(a3 + 104) = v120;
      v130[0] = &off_24C08A5D8;
      v106 = v131;
      if (!v131)
        return;
      v127 = (unint64_t *)&v131->__shared_owners_;
      do
        v108 = __ldaxr(v127);
      while (__stlxr(v108 - 1, v127));
LABEL_156:
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
      return;
    }
    if (v12 != 825437747)
    {
LABEL_97:
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/AppleUtil/src/CvPixelBufferUtils.cpp", 177, (uint64_t)"pbType == kCVPixelFormatType_32BGRA || pbType == kCVPixelFormatType_444YpCbCr8BiPlanarFullRange", 95, (uint64_t)&unk_20821FF4A, 0, (void (*)(void **))sub_208216974))goto LABEL_98;
LABEL_159:
      abort();
    }
LABEL_39:
    if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/AppleUtil/src/CvPixelBufferUtils.cpp", 168, (uint64_t)"k16BitDepth", 11, (uint64_t)"Requested 8-bit image, but buffer is 16-bit", 43, (void (*)(void **))sub_208216974))
    {
      v24 = *(_QWORD *)(a1 + 8);
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      v132[0] = &off_24C08A5D8;
      v132[1] = v24;
      v132[2] = v14;
      if (v14)
      {
        v25 = (unint64_t *)&v14->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v17 = sub_207E012E8(a3, (uint64_t)v132);
      v132[0] = &off_24C08A5D8;
      if (v14)
      {
        v27 = (unint64_t *)&v14->__shared_owners_;
        do
          v19 = __ldaxr(v27);
        while (__stlxr(v19 - 1, v27));
        goto LABEL_95;
      }
      return;
    }
    goto LABEL_159;
  }
  if (v12 > 1647392358)
  {
    if (v12 != 1647392359)
    {
      if (v12 != 2016686640 && v12 != 2016686642)
        goto LABEL_97;
      goto LABEL_29;
    }
    goto LABEL_39;
  }
  if (v12 == 1111970369)
    goto LABEL_98;
  if (v12 != 1278226488)
  {
    if (v12 == 1278226742)
    {
      v13 = *(_QWORD *)(a1 + 8);
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      v133[0] = &off_24C08A5D8;
      v133[1] = v13;
      v133[2] = v14;
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = sub_207E012E8(a3, (uint64_t)v133);
      v133[0] = &off_24C08A5D8;
      if (v14)
      {
        v18 = (unint64_t *)&v14->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
LABEL_95:
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *, int64x2_t))v14->__on_zero_shared)(v14, v17);
          std::__shared_weak_count::__release_weak(v14);
        }
        return;
      }
      return;
    }
    goto LABEL_97;
  }
  v79 = *(_QWORD *)(a1 + 8);
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  v135[0] = &off_24C08A5D8;
  v135[1] = v79;
  v135[2] = v14;
  if (v14)
  {
    v80 = (unint64_t *)&v14->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v17 = sub_207E012E8(a3, (uint64_t)v135);
  v135[0] = &off_24C08A5D8;
  if (v14)
  {
    v82 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v82);
    while (__stlxr(v19 - 1, v82));
    goto LABEL_95;
  }
}

void sub_207E00F5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)(v1 - 112) = &off_24C08A5D8;
  v3 = *(std::__shared_weak_count **)(v1 - 96);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207E00FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20815B3F4((_QWORD *)(v4 - 112));
  sub_207C99D78(v4 - 128);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E00FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E00FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E00FF8(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete[](v1);
  __cxa_rethrow();
}

void sub_207E0100C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  sub_20815AC38((_QWORD *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_207E0105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E01070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20815B3F4((_QWORD *)(v9 - 112));
  sub_207C99D78(v9 - 128);
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_207E01094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20815B3F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E010A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20815B3F4(&a9);
  _Unwind_Resume(a1);
}

void sub_207E010BC(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;

  v6 = *a1;
  if (!*a1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/AppleUtil/src/CvPixelBufferUtils.cpp", 200, (uint64_t)"img", 3, (uint64_t)&unk_20821FF4A, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = *a1;
  }
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v10 = *(std::__shared_weak_count **)(v6 + 16);
    v23 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    if (v11)
    {
      v14 = *(std::__shared_weak_count_vtbl **)v11;
      v15 = *(std::__shared_weak_count **)(v11 + 8);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v14 = 0;
    v23 = 0;
  }
  sub_207E003A0(v14, a2, a3);
  if (!v23)
    goto LABEL_24;
  v19 = (unint64_t *)&v23->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v7)
      return;
  }
  else
  {
LABEL_24:
    if (!v7)
      return;
  }
  v21 = (unint64_t *)&v7->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_207E0128C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20815B3F4((uint64_t *)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E012A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207E012B8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207E012D8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

int64x2_t sub_207E012E8(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  size_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int64x2_t result;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;

  v4 = sub_20815C268(a2, 0);
  v5 = sub_20815C4E8(a2, 0);
  v6 = sub_20815C768(a2, 0);
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  v7[1].__shared_owners_ = v10;
  v7[1].__shared_weak_owners_ = (uint64_t)v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v25 = v7;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  else
  {
    v25 = v7;
    v12 = (unint64_t *)&v7->__shared_owners_;
  }
  do
    v15 = __ldxr(v12);
  while (__stxr(v15 + 1, v12));
  v24 = &v7[1].__vftable;
  v26[0] = &off_24C08A5D8;
  v26[1] = v10;
  v27 = v11;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v17 = sub_20815A89C((uint64_t)v26, 0);
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v26[0] = &off_24C08A5D8;
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2082393A0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = v24;
  *(_QWORD *)(a1 + 104) = v25;
  return result;
}

void sub_207E014B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20815B3F4((uint64_t *)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E014D4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207E014E8(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete[](v1);
}

uint64_t sub_207E014F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_EERKNS_3kit"
                     "2cv14PixelBufferRefEEUlPhE_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_"
                                "EERKNS_3kit2cv14PixelBufferRefEEUlPhE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_EERKNS_3kit2cv14PixelBufferRefEEUlPhE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10apple_util12_GLOBAL__N_119ConvertYpCbCrToBGRAIhEENS0_8cv_types9ImageDataIT_EERKNS_3kit2cv14PixelBufferRefEEUlPhE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_207E01568(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076280;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E015E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076280;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E01658(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207E01660(uint64_t *a1, uint64_t *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C076258, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_20806C92C(a1[1], *(_QWORD *)(result + 8));
  }
  return result;
}

void sub_207E016C4(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  int64x2_t v7;
  int8x16_t v8;
  void *v9[3];
  void *v10[2];
  char v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253E510F8);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_253E510F8))
    goto LABEL_2;
  sub_207C96EE8(v10, "viz::PackageData");
  v3 = sub_207E02B10();
  if (*((char *)v3 + 23) < 0)
  {
    sub_207CA40D8(__p, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v13 = *((_QWORD *)v3 + 2);
    *(_OWORD *)__p = v4;
  }
  *(_OWORD *)v14 = *(_OWORD *)"viz::Package";
  v15 = 0xC00000000000000;
  v5 = sub_207E02D0C();
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17 = v5->__r_.__value_.__r.__words[2];
    v16 = v6;
  }
  *(_OWORD *)v18 = *(_OWORD *)"void";
  v19 = 0x400000000000000;
  sub_207CAA110(v9, (uint64_t)__p, 4uLL);
  sub_208215D20((char *)v10, (uint64_t *)v9, &stru_253E51108, v7, v8);
  sub_207C99DE0(v9);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)v16);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_21:
    operator delete(__p[0]);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_22:
    operator delete(v10[0]);
    goto LABEL_17;
  }
LABEL_20:
  operator delete(v14[0]);
  if (SHIBYTE(v13) < 0)
    goto LABEL_21;
LABEL_16:
  if (v11 < 0)
    goto LABEL_22;
LABEL_17:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_253E51108, &dword_207C77000);
  __cxa_guard_release(&qword_253E510F8);
LABEL_2:
  sub_207E01A04(a1);
  sub_207D49528((__int128 *)&stru_253E51108, (uint64_t)"{", (uint64_t)__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_207E018F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_207C99DE0(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_253E510F8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_253E510F8);
  _Unwind_Resume(a1);
}

void sub_207E019DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E01A04(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  void ***p_dst;
  const char *v13;
  __int128 *v14;
  const char *v15;
  const char *v16;
  void **p_p_dst;

  v2 = atomic_load((unsigned __int8 *)&qword_253E51100);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51100))
  {
    v4 = sub_207E02B10();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_207CF75E4((char *)v4, v6, "::", 2, 0, (uint64_t)&p_dst);
    if (*(v13 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_253E51120, *((void **)v13 - 3), *((_QWORD *)v13 - 2));
    }
    else
    {
      v7 = *(_OWORD *)(v13 - 24);
      unk_253E51130 = *((_QWORD *)v13 - 1);
      xmmword_253E51120 = v7;
    }
    sub_207C99DE0((void **)&p_dst);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51120, &dword_207C77000);
    __cxa_guard_release(&qword_253E51100);
  }
  v11 = -1;
  if (byte_253E51137 < 0)
  {
    sub_207CA40D8(&__dst, (void *)xmmword_253E51120, *((unint64_t *)&xmmword_253E51120 + 1));
  }
  else
  {
    __dst = xmmword_253E51120;
    v10 = unk_253E51130;
  }
  v11 = 1;
  p_dst = (void ***)&__dst;
  v13 = "{";
  v14 = &__dst;
  v15 = "{";
  v16 = "{";
  sub_207CD45F4((uint64_t *)&v14, (uint64_t)&__dst);
  sub_207E022EC((uint64_t)&v8, (uint64_t)&__dst, (uint64_t *)(a1 + 8));
  p_dst = (void ***)&__dst;
  v13 = "}";
  v14 = &__dst;
  v15 = "}";
  v16 = "}";
  if (v11 == -1)
    sub_207CA9F48();
  p_p_dst = (void **)&p_dst;
  ((void (*)(void ***, __int128 *))off_24C0761C0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_207CA9F48();
  p_dst = &p_p_dst;
  result = ((uint64_t (*)(void ****, __int128 *))off_24C0761F0[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(void ****, __int128 *))off_24C0761A8[v11])(&p_dst, &__dst);
  return result;
}

void sub_207E01C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_207C99DE0((void **)va);
  __cxa_guard_abort(&qword_253E51100);
  _Unwind_Resume(a1);
}

void sub_207E01C40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51100);
  _Unwind_Resume(a1);
}

void sub_207E01C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E01C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E01C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E01C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E01CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E01CC0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 6;
}

void sub_207E01CEC(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 6, a2);
}

std::__shared_weak_count_vtbl **sub_207E01D24(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207E01E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E01E48(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207E01E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E01E7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076280;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E01EF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076280;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E01F6C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_207E025AC();
  return sub_207E020C0(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_207E01FC4(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207E022EC((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0761F0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0761A8[v3])(v5, v2);
  return result;
}

void sub_207E0205C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C0761A8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207E02094(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_207E020C0(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_207CA40D8(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_207CD45F4((uint64_t *)&v19, (uint64_t)&__dst);
  sub_207E022EC((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0761C0[v16])(&p_p_dst, &__dst);
  sub_207D48768((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_207CA9F48();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C0761C0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_207CA9F48();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C0761F0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C0761A8[v16])(&p_dst, &__dst);
  return result;
}

void sub_207E0225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E02274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E02288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E022B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E022C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E022D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E022EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst[2];
  unint64_t v26;
  _QWORD v27[5];
  _QWORD *v28;

  v5 = (char *)operator new(0x118uLL);
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v27[0] = v5;
  v6 = (uint64_t *)(v5 + 16);
  v7 = *a3;
  if (*(_BYTE *)(*a3 + 24))
  {
    sub_2081E5F84(v6, *(_QWORD *)(v7 + 16));
  }
  else if (*(_BYTE *)(v7 + 8))
  {
    sub_2081E5C10(v6, *(_QWORD *)v7);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 32);
    if (v8)
    {
      v9 = *(char *)(v8 + 23);
      if (v9 >= 0)
        v10 = *(_QWORD *)(v7 + 32);
      else
        v10 = *(_QWORD *)v8;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(v8 + 23);
      else
        v11 = *(_QWORD *)(v8 + 8);
      sub_207CBAB98(v6, v10, v11);
    }
    else
    {
      sub_207D02290(v6, *(CFTypeRef *)(v7 + 48));
    }
  }
  v12 = *((_DWORD *)v5 + 30);
  if ((v12 & 0x10) != 0)
  {
    v15 = *((_QWORD *)v5 + 14);
    v16 = *((_QWORD *)v5 + 9);
    if (v15 < v16)
    {
      *((_QWORD *)v5 + 14) = v16;
      v15 = v16;
    }
    v17 = (const void *)*((_QWORD *)v5 + 8);
    v13 = v15 - (_QWORD)v17;
    if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v12 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v26) = 0;
      v14 = __dst;
      goto LABEL_27;
    }
    v17 = (const void *)*((_QWORD *)v5 + 5);
    v13 = *((_QWORD *)v5 + 7) - (_QWORD)v17;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      sub_207C95C50();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v13;
    v26 = v19 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_26;
  }
  HIBYTE(v26) = v13;
  v14 = __dst;
  if (v13)
LABEL_26:
    memmove(v14, v17, v13);
LABEL_27:
  *((_BYTE *)v14 + v13) = 0;
  v20 = v27[0];
  if (v27[0])
  {
    v21 = MEMORY[0x24BEDB7F0];
    v22 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v27[0] = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v20 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v20 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v20 + 16) = v23;
    if (*(char *)(v20 + 111) < 0)
      operator delete(*(void **)(v20 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v20 + 128);
    operator delete((void *)v20);
  }
  v27[0] = a2;
  v27[1] = __dst;
  v27[2] = a2;
  v27[3] = __dst;
  v27[4] = __dst;
  v24 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v24 == -1)
    sub_207CA9F48();
  v28 = v27;
  ((void (*)(_QWORD **, uint64_t))off_24C0761D8[v24])(&v28, a2);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
}

void sub_207E02570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E02598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

__int128 *sub_207E025AC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BE90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BE90))
    return &xmmword_25452BE78;
  v2 = sub_207E02688();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452BE78, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452BE88 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452BE78 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BE78, &dword_207C77000);
  __cxa_guard_release(&qword_25452BE90);
  return &xmmword_25452BE78;
}

void sub_207E02670(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BE90);
  _Unwind_Resume(a1);
}

std::string *sub_207E02688()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BEB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BEB0))
    return &stru_25452BE98;
  sub_207E0292C((uint64_t)__p);
  sub_207E02778((char *)__p, &stru_25452BE98);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BE98, &dword_207C77000);
  __cxa_guard_release(&qword_25452BEB0);
  return &stru_25452BE98;
}

void sub_207E02738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BEB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BEB0);
  _Unwind_Resume(a1);
}

void sub_207E02778(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207E02B10();
  if (*((char *)v4 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_207D49134();
  if (*((char *)v6 + 23) < 0)
  {
    sub_207CA40D8(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 2uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_207E028DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_207C99DE0((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207E0292C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BF30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BF30))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::dict::Dictionary>]", qword_25452BF18);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BF18, &dword_207C77000);
    __cxa_guard_release(&qword_25452BF30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452BF50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452BF50))
  {
    v5 = sub_207D49434(qword_25452BF18, "<", 0);
    sub_207D49330(qword_25452BF18, 0, v5, qword_25452BF38);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BF38, &dword_207C77000);
    __cxa_guard_release(&qword_25452BF50);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452BF70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452BF70))
  {
    sub_208215C6C((uint64_t)qword_25452BF38, (uint64_t)&xmmword_25452BF58);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BF58, &dword_207C77000);
    __cxa_guard_release(&qword_25452BF70);
  }
  if (byte_25452BF6F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452BF58, *((unint64_t *)&xmmword_25452BF58 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452BF58;
    *(_QWORD *)(a1 + 16) = unk_25452BF68;
  }
}

void sub_207E02AC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BF70);
  _Unwind_Resume(a1);
}

void sub_207E02AE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BF50);
  _Unwind_Resume(a1);
}

void sub_207E02AF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BF30);
  _Unwind_Resume(a1);
}

__int128 *sub_207E02B10()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BED0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BED0))
    return &xmmword_25452BEB8;
  v2 = (char *)sub_207E02BEC();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452BEB8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452BEC8 = *((_QWORD *)v2 + 2);
    xmmword_25452BEB8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BEB8, &dword_207C77000);
  __cxa_guard_release(&qword_25452BED0);
  return &xmmword_25452BEB8;
}

void sub_207E02BD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BED0);
  _Unwind_Resume(a1);
}

void *sub_207E02BEC()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BEF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452BEF0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dict::Dictionary]", qword_25452BED8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BED8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BEF0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452BF10);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BF10))
    return &unk_25452BEF8;
  sub_208215C6C((uint64_t)qword_25452BED8, (uint64_t)&unk_25452BEF8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452BEF8, &dword_207C77000);
  __cxa_guard_release(&qword_25452BF10);
  return &unk_25452BEF8;
}

void sub_207E02CDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BF10);
  _Unwind_Resume(a1);
}

void sub_207E02CF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BEF0);
  _Unwind_Resume(a1);
}

std::string *sub_207E02D0C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BE70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BE70))
    return &stru_25452BE58;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 6U]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452BE58);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BE58, &dword_207C77000);
  __cxa_guard_release(&qword_25452BE70);
  return &stru_25452BE58;
}

void sub_207E02DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BE70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BE70);
  _Unwind_Resume(a1);
}

uint64_t sub_207E02E04(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C076500[v2])(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

double sub_207E02E5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_207CA40D8(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_207CA40D8((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_207CA40D8(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_207E0B268((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_207E03008(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207E03074(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;

  *a1 = off_24C0762D0;
  a1[1] = &unk_24C076348;
  sub_207E0AB10((uint64_t)(a1 + 2), (uint64_t *)(a2 + 64));
  v23[0] = off_24C06E878;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(std::__shared_weak_count **)(a2 + 24);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
  }
  v23[1] = v9;
  v24 = v10;
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_DWORD *)(a2 + 40);
  v27 = v13;
  v28 = v14;
  v29 = v15;
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_207F22DD8((uint64_t)(a1 + 24), (uint64_t)v23, 0, v4, v5, v6, v7, v8);
  v19 = v24;
  if (!v24)
    return a1;
  v20 = (unint64_t *)&v24->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void sub_207E031D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_207CA2C88((uint64_t)va);
  sub_207E07F28(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_207E031EC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C0762D0;
  *(_QWORD *)(a1 + 8) = &unk_24C076348;
  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C076500[v2])(&v4, a1 + 224);
  *(_DWORD *)(a1 + 288) = -1;
  sub_207E07F28(a1 + 16);
  return a1;
}

uint64_t sub_207E0325C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24C0762D0;
  *(_QWORD *)a1 = &unk_24C076348;
  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C076500[v2])(&v4, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  return sub_207E07F28(a1 + 8);
}

void sub_207E032CC(_QWORD *a1)
{
  uint64_t v2;
  char v3;

  *a1 = off_24C0762D0;
  a1[1] = &unk_24C076348;
  v2 = *((unsigned int *)a1 + 72);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, _QWORD *))off_24C076500[v2])(&v3, a1 + 28);
  *((_DWORD *)a1 + 72) = -1;
  sub_207E07F28((uint64_t)(a1 + 2));
  operator delete(a1);
}

void sub_207E03340(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24C0762D0;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C076348;
  v3 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24C076500[v3])(&v4, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  sub_207E07F28(a1 + 8);
  operator delete(v2);
}

void sub_207E033BC(uint64_t a1, int *a2)
{
  if (!sub_207E210F0(a2, a1)
    && !sub_207E2129C(a2, a1)
    && !sub_207E2146C(a2, a1)
    && !sub_207E21618(a2, a1)
    && !sub_207E21784((uint64_t)a2, a1))
  {
    sub_207E218B4(a1, a2);
  }
}

void sub_207E03440(uint64_t a1, uint64_t (***a2)())
{
  sub_207E03450(a2, a1);
}

void sub_207E03450(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  void *__p;
  uint64_t v28;
  char v29;

  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076D28, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((unsigned __int8 *)v4 + 104);
    v4[11] = "info";
    v4[12] = 4;
    if (!v6)
      *((_BYTE *)v4 + 104) = 1;
    sub_207E14108((uint64_t)v4, a2 + 16);
    v7 = *(unsigned __int8 *)(v5 + 104);
    *(_QWORD *)(v5 + 88) = "value";
    *(_QWORD *)(v5 + 96) = 5;
    if (!v7)
      *(_BYTE *)(v5 + 104) = 1;
    sub_207E159E0(v5, (unsigned __int16 *)(a2 + 192));
    return;
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076D60, 0);
  if (v8)
  {
    v9 = v8;
    sub_207E17BB8((uint64_t)&__p, v8, a2 + 16);
    LODWORD(__p) = 2;
    sub_20820BA20(v9[6], &__p);
    if (__p <= 1)
    {
      sub_207E18720(v9, (unsigned __int16 *)(a2 + 192), __p);
    }
    else
    {
      sub_207E17CA8(v9 + 2);
      sub_207E18720(v9, (unsigned __int16 *)(a2 + 192), 2u);
      v10 = v9[4];
      v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(v9[2] + 32))(v9 + 2) + *(_QWORD *)(v10 - 8);
      if (v11)
        (*(void (**)(_QWORD *, uint64_t))(v9[2] + 40))(v9 + 2, v11);
      v9[4] -= 16;
    }
    return;
  }
  v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076DE8, 0);
  if (!v12)
  {
    v16 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076E20, 0);
    if (!v16)
    {
      if (*a1 == &off_24C082DE0)
      {
        sub_207E1CD58((uint64_t)&__p, a1, a2 + 16);
        sub_207E1D7E4(a1, (unsigned __int16 *)(a2 + 192));
      }
      else
      {
        sub_207E21A24(a2, (uint64_t)a1);
      }
      return;
    }
    v17 = (uint64_t)v16;
    LODWORD(__p) = 6;
    sub_208209DC8((uint64_t)v16, &__p);
    v18 = __p;
    if (__p >= 6)
      v19 = 6;
    else
      v19 = __p;
    if (v19 < 3)
      sub_207E1B3DC((uint64_t)&__p, v17, a2 + 16, v19);
    else
      sub_207E1B5CC(v17, a2 + 16, v19);
    if (v18 < 3 || *(_BYTE *)(v17 + 131))
    {
LABEL_31:
      v20 = (unsigned __int16 *)(a2 + 192);
      LODWORD(__p) = 2;
      sub_208209DC8(v17, &__p);
      v21 = __p;
      if (__p >= 2)
        v22 = 2;
      else
        v22 = __p;
      if (v22 < 2)
        sub_207E1C2F8((const void *)v17, (uint64_t)v20);
      else
        sub_207E1C7BC(v17, v20);
      if (v21 < 2 || *(_BYTE *)(v17 + 131))
        return;
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20820B068(v17, (uint64_t)&__p);
        if (v29 < 0)
        {
          if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
          {
LABEL_67:
            v26 = 1;
            goto LABEL_68;
          }
        }
        else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
        {
          goto LABEL_67;
        }
        v26 = 0;
LABEL_68:
        if (v29 < 0)
          operator delete(__p);
        if (*(_BYTE *)(v17 + 131))
          v25 = 0;
        else
          v25 = v26;
        if ((v25 & 1) == 0)
          return;
      }
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_31;
      sub_20820B068(v17, (uint64_t)&__p);
      if (v29 < 0)
      {
        if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
        {
LABEL_48:
          v24 = 1;
          goto LABEL_49;
        }
      }
      else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
      {
        goto LABEL_48;
      }
      v24 = 0;
LABEL_49:
      if (v29 < 0)
        operator delete(__p);
      if (*(_BYTE *)(v17 + 131))
        v23 = 0;
      else
        v23 = v24;
      if ((v23 & 1) == 0)
        goto LABEL_31;
    }
  }
  v13 = (uint64_t)v12;
  v14 = *((unsigned __int8 *)v12 + 104);
  v12[11] = "info";
  v12[12] = 4;
  if (!v14)
    *((_BYTE *)v12 + 104) = 1;
  sub_207E19198((uint64_t)v12, a2 + 16);
  v15 = *(unsigned __int8 *)(v13 + 104);
  *(_QWORD *)(v13 + 88) = "value";
  *(_QWORD *)(v13 + 96) = 5;
  if (!v15)
    *(_BYTE *)(v13 + 104) = 1;
  sub_207E1A304(v13, (unsigned __int16 *)(a2 + 192));
}

uint64_t sub_207E038E8()
{
  return 2;
}

uint64_t sub_207E038F0()
{
  return 2;
}

uint64_t sub_207E038F8()
{
  return 1;
}

uint64_t sub_207E03900()
{
  return 1;
}

void sub_207E03908(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE v7[16];
  std::__shared_weak_count *v8;
  _BYTE v9[216];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  sub_207F230F4(a1 + 192, (uint64_t)v7);
  sub_207E02E5C(a1 + 16, (uint64_t)v9);
  sub_207E20F54(a2, (uint64_t)v7, (uint64_t)v9);
  sub_207D49CF4((uint64_t)v9);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_207E039CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_207D49CF4((uint64_t)&a17);
  sub_207D56DC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E039E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D56DC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E03A00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_207E03908(a1 - 8, a2);
}

uint64_t sub_207E03A08(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D90, (const struct __class_type_info *)&unk_24C0764C8, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 24;
    v6[1] = a1 + 40;
    v6[2] = a1 + 72;
    v6[3] = a1 + 96;
    v6[4] = a1 + 128;
    v6[5] = a1 + 160;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_207E0BA00((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_207F233F8((unsigned __int16 *)(a1 + 192), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

uint64_t sub_207E03ABC(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D90, (const struct __class_type_info *)&unk_24C0764C8, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 16;
    v6[1] = a1 + 32;
    v6[2] = a1 + 64;
    v6[3] = a1 + 88;
    v6[4] = a1 + 120;
    v6[5] = a1 + 152;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_207E0BA00((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_207F233F8((unsigned __int16 *)(a1 + 184), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

void sub_207E03B70(uint64_t a1, int *a2)
{
  if (!sub_207E210F0(a2, a1)
    && !sub_207E2129C(a2, a1)
    && !sub_207E2146C(a2, a1)
    && !sub_207E21618(a2, a1)
    && !sub_207E21784((uint64_t)a2, a1))
  {
    sub_207E218B4(a1, a2);
  }
}

void sub_207E03BF4(uint64_t a1, int *a2)
{
  uint64_t v3;

  v3 = a1 - 8;
  if (!sub_207E210F0(a2, a1 - 8)
    && !sub_207E2129C(a2, v3)
    && !sub_207E2146C(a2, v3)
    && !sub_207E21618(a2, v3)
    && !sub_207E21784((uint64_t)a2, v3))
  {
    sub_207E218B4(v3, a2);
  }
}

void sub_207E03C78(uint64_t a1, uint64_t (***a2)())
{
  sub_207E03450(a2, a1);
}

void sub_207E03C88(uint64_t a1, uint64_t (***a2)())
{
  sub_207E03450(a2, a1 - 8);
}

uint64_t sub_207E03C98(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_207E03CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24C077C90;
  *(_QWORD *)(a1 + 8) = &unk_24C077D08;
  sub_207E0AB10(a1 + 16, (uint64_t *)(a2 + 32));
  sub_208070C18(a1 + 192, *(uint64_t **)(a2 + 8));
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v4 + 408))
    *(_QWORD *)(a1 + 584) = sub_207CC08D4((char **)(a1 + 576), v4 + 384);
  return a1;
}

void sub_207E03D38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  void **v7;
  void **v8;
  void *v9;
  void **v10;

  v5 = v4;
  v10 = v5;
  v7 = (void **)*v5;
  if (*v5)
  {
    v8 = *(void ***)(v2 + 584);
    v9 = *v5;
    if (v8 != v7)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = *v10;
    }
    *(_QWORD *)(v2 + 584) = v7;
    operator delete(v9);
  }
  sub_207E080B8(v3);
  sub_207E07F28(v1);
  _Unwind_Resume(a1);
}

void sub_207E03DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207E07F28(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E03DBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_24C077C90;
  a1[1] = &unk_24C077D08;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_207E080B8(a1 + 24);
  sub_207E07F28((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_207E03E4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(a1 - 1) = off_24C077C90;
  *a1 = &unk_24C077D08;
  v2 = a1[71];
  if (v2)
  {
    v3 = a1[72];
    v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_207E080B8(a1 + 23);
  return sub_207E07F28((uint64_t)(a1 + 1));
}

void sub_207E03ED8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = (uint64_t)off_24C077C90;
  a1[1] = (uint64_t)&unk_24C077D08;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_207E080B8(a1 + 24);
  sub_207E07F28((uint64_t)(a1 + 2));
  operator delete(a1);
}

void sub_207E03F68(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(a1 - 1) = off_24C077C90;
  v2 = a1 - 1;
  *a1 = &unk_24C077D08;
  v3 = a1[71];
  if (v3)
  {
    v4 = a1[72];
    v5 = (void *)a1[71];
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)a1[71];
    }
    a1[72] = v3;
    operator delete(v5);
  }
  sub_207E080B8(a1 + 23);
  sub_207E07F28((uint64_t)(a1 + 1));
  operator delete(v2);
}

void sub_207E04000(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_207E04030(a2, a1, &v3);
}

void sub_207E04030(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;

  v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076B88, 0);
  if (v6)
  {
    sub_207E34B90((uint64_t)v6, a2, *a3);
  }
  else
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076BD0, 0);
    if (v7)
    {
      sub_207E34D3C((uint64_t)v7, a2, *a3);
    }
    else
    {
      v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076C58, 0);
      if (v8)
      {
        sub_207E34F2C((uint64_t)v8, a2, *a3);
      }
      else
      {
        v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076CA0, 0);
        if (v9)
        {
          sub_207E350D8((uint64_t)v9, a2, *a3);
        }
        else
        {
          v10 = *a3;
          if (*a1 == &off_24C082C60)
            sub_207E352F8((uint64_t)a1, a2, v10);
          else
            sub_207E354FC(a1, a2, v10);
        }
      }
    }
  }
}

void sub_207E04168(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_207E04198(a2, a1, &v3);
}

void sub_207E04198(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!sub_207E35670(a1, a2, a3))
  {
    v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076D60, 0);
    if (v6)
    {
      v7 = v6;
      v8 = *a3;
      sub_207E17BB8((uint64_t)&v11, v6, a2 + 16);
      sub_207E2AC3C((uint64_t)&v12, v7, (uint64_t *)(a2 + 192));
      if (v8 >= 3)
        sub_207E18434((uint64_t)v7, (char **)(a2 + 576));
    }
    else if (!sub_207E3578C(a1, a2, a3))
    {
      v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076E20, 0);
      if (v9)
      {
        sub_207E358A8((uint64_t)v9, a2, *a3);
      }
      else
      {
        v10 = *a3;
        if (*a1 == &off_24C082DE0)
        {
          sub_207E1CD58((uint64_t)&v13, a1, a2 + 16);
          sub_207E2FFBC((uint64_t)&v14, a1, (uint64_t *)(a2 + 192));
          if (v10 >= 3)
            sub_207E1D690(a1, a2 + 576);
        }
        else
        {
          sub_207E35AFC((uint64_t)a1, a2, v10);
        }
      }
    }
  }
}

uint64_t sub_207E04300()
{
  return 3;
}

uint64_t sub_207E04308()
{
  return 3;
}

uint64_t sub_207E04310()
{
  return 1;
}

uint64_t sub_207E04318()
{
  return 1;
}

void sub_207E04320(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  char v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  uint64_t v17[48];
  _BYTE *v18;
  std::__shared_weak_count *v19;
  _DWORD v20[2];
  __int128 __dst;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = a1[72];
  v7 = a1[73];
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(void **)v6;
    v2 = *(void **)(v6 + 8);
    v20[0] = *(_DWORD *)(v6 + 16);
    *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)(v6 + 19);
    v3 = *(_BYTE *)(v6 + 23);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = 0;
  }
  sub_2080715C0(a1 + 24, 1, (uint64_t)v17);
  LOBYTE(__p[0]) = 0;
  v16 = 0;
  if (v6 != v7)
  {
    if (v3 < 0)
    {
      sub_207CA40D8(__p, v8, (unint64_t)v2);
    }
    else
    {
      __p[0] = v8;
      __p[1] = v2;
      LODWORD(v15) = v20[0];
      *(_DWORD *)((char *)&v15 + 3) = *(_DWORD *)((char *)v20 + 3);
      HIBYTE(v15) = v3;
    }
    v16 = 1;
  }
  v9 = operator new(0x1A0uLL);
  LOBYTE(__dst) = 0;
  v23 = 0;
  if (v6 != v7)
  {
    if (SHIBYTE(v15) < 0)
    {
      sub_207CA40D8(&__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      __dst = *(_OWORD *)__p;
      v22 = v15;
    }
    v23 = 1;
  }
  sub_207F0C874((uint64_t)v9, (uint64_t)v17);
  v9[384] = 0;
  v9[408] = 0;
  if (v23)
  {
    *((_OWORD *)v9 + 24) = __dst;
    *((_QWORD *)v9 + 50) = v22;
    v9[408] = 1;
  }
  v18 = v9;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C079870;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  v19 = v10;
  sub_207E02E5C((uint64_t)(a1 + 2), (uint64_t)&__dst);
  sub_207E32D24(a2, (uint64_t *)&v18, (uint64_t)&__dst);
  sub_207D49CF4((uint64_t)&__dst);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16 && SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  sub_207E08A64(v17);
  if (v6 != v7 && v3 < 0)
    operator delete(v8);
}

void sub_207E0455C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;

  if (a73 && a72 < 0)
    operator delete(__p);
  operator delete(v74);
  if (a16 && a15 < 0)
    operator delete(a10);
  sub_207E08A64(&a17);
  if (v75 != v76 && v77 < 0)
    operator delete(v73);
  _Unwind_Resume(a1);
}

void sub_207E04624(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_207E04320((uint64_t *)(a1 - 8), a2);
}

uint64_t sub_207E0462C(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D90, (const struct __class_type_info *)&unk_24C077DD0, 8);
  if (result)
  {
    v4 = result;
    result = sub_207E344F4(a1 + 192, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 24;
      v6[1] = a1 + 40;
      v6[2] = a1 + 72;
      v6[3] = a1 + 96;
      v6[4] = a1 + 128;
      v6[5] = a1 + 160;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_207E0BA00((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

uint64_t sub_207E046E0(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D90, (const struct __class_type_info *)&unk_24C077DD0, 8);
  if (result)
  {
    v4 = result;
    result = sub_207E344F4(a1 + 184, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 16;
      v6[1] = a1 + 32;
      v6[2] = a1 + 64;
      v6[3] = a1 + 88;
      v6[4] = a1 + 120;
      v6[5] = a1 + 152;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_207E0BA00((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_207E04794(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_207E04030(a2, a1, &v3);
}

void sub_207E047C4(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_207E04030(a2, a1 - 8, &v3);
}

void sub_207E047F4(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_207E04198(a2, a1, &v3);
}

void sub_207E04824(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_207E04198(a2, a1 - 8, &v3);
}

uint64_t sub_207E04854(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_24C076970;
  *(_QWORD *)(a1 + 8) = &unk_24C0769D0;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E048CC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = &off_24C076970;
  *(_QWORD *)a1 = &unk_24C0769D0;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E04944(_QWORD *__p)
{
  void *v2;
  uint64_t v3;
  char v4;

  *__p = &off_24C076970;
  __p[1] = &unk_24C0769D0;
  v2 = (void *)__p[27];
  if (v2)
  {
    __p[28] = v2;
    operator delete(v2);
  }
  v3 = *((unsigned int *)__p + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _QWORD *))off_24C0765B0[v3])(&v4, __p + 2);
  operator delete(__p);
}

void sub_207E049B8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(a1 - 8) = &off_24C076970;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0769D0;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v4])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  operator delete(v2);
}

uint64_t sub_207E04A3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C076F10;
  *(_QWORD *)(a1 + 8) = &unk_24C076F70;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E04AEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C076F10;
  *(_QWORD *)a1 = &unk_24C076F70;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E04B9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C076F10;
  __p[1] = &unk_24C076F70;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E04C48(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C076F10;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C076F70;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E04D04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C0771B8;
  *(_QWORD *)(a1 + 8) = &unk_24C077218;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E04DB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C0771B8;
  *(_QWORD *)a1 = &unk_24C077218;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E04E64(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C0771B8;
  __p[1] = &unk_24C077218;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E04F10(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C0771B8;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077218;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E04FCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C077390;
  *(_QWORD *)(a1 + 8) = &unk_24C0773F0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E0507C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C077390;
  *(_QWORD *)a1 = &unk_24C0773F0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E0512C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C077390;
  __p[1] = &unk_24C0773F0;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E051D8(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C077390;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0773F0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E05294(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C078698;
  *(_QWORD *)(a1 + 8) = &unk_24C0786F8;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E05344(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C078698;
  *(_QWORD *)a1 = &unk_24C0786F8;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E053F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C078698;
  __p[1] = &unk_24C0786F8;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E054A0(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C078698;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0786F8;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E0555C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C078838;
  *(_QWORD *)(a1 + 8) = &unk_24C078898;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E0560C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C078838;
  *(_QWORD *)a1 = &unk_24C078898;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E056BC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C078838;
  __p[1] = &unk_24C078898;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E05768(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C078838;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C078898;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E05824(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_24C077638;
  *(_QWORD *)(a1 + 8) = &unk_24C077698;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

_QWORD *sub_207E058B0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = &off_24C077638;
  *result = &unk_24C077698;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))off_24C0765B0[v3])(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

void sub_207E0593C(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  *__p = &off_24C077638;
  __p[1] = &unk_24C077698;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))__p[26];
  if (v2)
    v2(0, __p + 26, 0, 0, 0);
  v3 = *((unsigned int *)__p + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _QWORD *))off_24C0765B0[v3])(&v4, __p + 2);
  operator delete(__p);
}

void sub_207E059C4(uint64_t a1)
{
  void *v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v5;

  *(_QWORD *)(a1 - 8) = &off_24C077638;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077698;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v4])(&v5, a1 + 8);
  operator delete(v2);
}

uint64_t sub_207E05A54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C077B60;
  *(_QWORD *)(a1 + 8) = &unk_24C077BC0;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E05B04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C077B60;
  *(_QWORD *)a1 = &unk_24C077BC0;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E05BB4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C077B60;
  __p[1] = &unk_24C077BC0;
  v2 = (std::__shared_weak_count *)__p[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E05C60(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C077B60;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077BC0;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E05D1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C077EC0;
  *(_QWORD *)(a1 + 8) = &unk_24C077F20;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E05DCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C077EC0;
  *(_QWORD *)a1 = &unk_24C077F20;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E05E7C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C077EC0;
  __p[1] = &unk_24C077F20;
  v2 = (std::__shared_weak_count *)__p[27];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E05F28(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C077EC0;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077F20;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

_BYTE *sub_207E05FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *result;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_207CA40D8((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)v4 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 48);
      goto LABEL_6;
    }
  }
  sub_207CA40D8((_BYTE *)v4, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
LABEL_6:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    sub_207CA40D8((_BYTE *)(a2 + 64), *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  }
  result = (_BYTE *)(a2 + 88);
  if (*(char *)(a1 + 111) < 0)
    return sub_207CA40D8(result, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  *(_OWORD *)result = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

void sub_207E060EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E06160(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C078168;
  *(_QWORD *)(a1 + 8) = &unk_24C0781C8;
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 255) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 264));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 232));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_11:
    ((void (*)(char *, uint64_t))off_24C0765B0[v2])(&v4, a1 + 16);
LABEL_12:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_207E06234(uint64_t a1)
{
  return sub_207E06160(a1 - 8);
}

void sub_207E0623C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207E06160(a1);
  operator delete(v1);
}

void sub_207E06250(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207E06160(a1 - 8);
  operator delete(v1);
}

uint64_t sub_207E06268(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_24C078428;
  *(_QWORD *)(a1 + 8) = &unk_24C078488;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24C0765B0[v2])(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E06310(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = &off_24C078428;
  *(_QWORD *)a1 = &unk_24C078488;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24C0765B0[v2])(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E063B8(char *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = &off_24C078428;
  *((_QWORD *)__p + 1) = &unk_24C078488;
  if (__p[376] && __p[375] < 0)
    operator delete(*((void **)__p + 44));
  if (__p[344] && __p[343] < 0)
  {
    operator delete(*((void **)__p + 40));
    v2 = *((unsigned int *)__p + 48);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *((unsigned int *)__p + 48);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, char *))off_24C0765B0[v2])(&v3, __p + 16);
LABEL_8:
  operator delete(__p);
}

void sub_207E06458(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = &off_24C078428;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C078488;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v3 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v3 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v4, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
  operator delete(v2);
}

uint64_t sub_207E06508()
{
  return 2;
}

uint64_t sub_207E06510()
{
  return 1;
}

uint64_t sub_207E06518(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E06524(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_207E06530@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  _BYTE v12[208];
  uint64_t (**v13)();
  char v14;
  void *__p;
  void *v16;
  char *v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v12);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v12);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v12);
  }
  v13 = off_24C0732D8;
  v14 = *(_BYTE *)(a1 + 208);
  v16 = 0;
  v17 = 0;
  __p = 0;
  v7 = *(_BYTE **)(a1 + 216);
  v6 = *(_BYTE **)(a1 + 224);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[v8];
    __p = v9;
    v17 = &v9[v8];
    memcpy(v9, v7, v8);
    v16 = v10;
  }
  sub_207D47D34((uint64_t)v18, (uint64_t)v12);
  v13 = off_24C073258;
  sub_207E36F00((uint64_t)&v13, a2);
  v13 = off_24C0732D8;
  sub_207D49CF4((uint64_t)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return sub_207D49CF4((uint64_t)v12);
}

void sub_207E06688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_207D4780C(&a35);
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E066A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207E066D0(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C0768C8 && sub_207EB17C0(a1, (uint64_t)a2);
}

void sub_207E066F0(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB19EC(a2, a1);
}

void sub_207E06700(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB2A48(a2, a1);
}

uint64_t sub_207E06710()
{
  return 2;
}

uint64_t sub_207E06718()
{
  return 2;
}

uint64_t sub_207E06720()
{
  return 1;
}

void sub_207E06728(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB19EC(a2, a1 - 8);
}

void sub_207E06738(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB2A48(a2, a1 - 8);
}

uint64_t sub_207E06748()
{
  return 2;
}

uint64_t sub_207E06750()
{
  return 1;
}

uint64_t sub_207E06758(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E06764(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_207E06770@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = off_24C0770C0;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_207D47D34((uint64_t)v17, (uint64_t)v14);
  v15[0] = off_24C077040;
  sub_207E418CC((uint64_t)v15, a2);
  v15[0] = off_24C0770C0;
  sub_207D49CF4((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_207D49CF4((uint64_t)v14);
}

void sub_207E068B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_207E41A58(&a35);
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E068CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207E0691C(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C076E68 && sub_207EB49A8(a1, (uint64_t)a2);
}

void sub_207E0693C(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB4C00(a2, a1);
}

void sub_207E0694C(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB5C5C(a2, a1);
}

void sub_207E0695C(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB4C00(a2, a1 - 8);
}

void sub_207E0696C(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB5C5C(a2, a1 - 8);
}

uint64_t sub_207E0697C()
{
  return 2;
}

uint64_t sub_207E06984()
{
  return 1;
}

uint64_t sub_207E0698C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E06998(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_207E069A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = off_24C074D18;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_207D47D34((uint64_t)v17, (uint64_t)v14);
  v15[0] = off_24C074C98;
  sub_207E523E8((uint64_t)v15, a2);
  v15[0] = off_24C074D18;
  sub_207D49CF4((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_207D49CF4((uint64_t)v14);
}

void sub_207E06AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_207DC7D40(&a35);
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E06B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207E06B50(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C077110 && sub_207EB7A54(a1, (uint64_t)a2);
}

void sub_207E06B70(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB7CAC(a2, a1);
}

void sub_207E06B80(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB8D08(a2, a1);
}

void sub_207E06B90(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB7CAC(a2, a1 - 8);
}

void sub_207E06BA0(uint64_t a1, uint64_t (***a2)())
{
  sub_207EB8D08(a2, a1 - 8);
}

uint64_t sub_207E06BB0()
{
  return 2;
}

uint64_t sub_207E06BB8()
{
  return 1;
}

uint64_t sub_207E06BC0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E06BCC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_207E06BD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = off_24C077540;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_207D47D34((uint64_t)v17, (uint64_t)v14);
  v15[0] = off_24C0774C0;
  sub_207E66CB8((uint64_t)v15, a2);
  v15[0] = off_24C077540;
  sub_207D49CF4((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_207D49CF4((uint64_t)v14);
}

void sub_207E06D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_207E66E44(&a35);
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E06D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207E06D84(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C0772E8 && sub_207EBAC50(a1, (uint64_t)a2);
}

void sub_207E06DA4(uint64_t a1, uint64_t (***a2)())
{
  sub_207EBAEA8(a2, a1);
}

void sub_207E06DB4(uint64_t a1, uint64_t (***a2)())
{
  sub_207EBBF04(a2, a1);
}

void sub_207E06DC4(uint64_t a1, uint64_t (***a2)())
{
  sub_207EBAEA8(a2, a1 - 8);
}

void sub_207E06DD4(uint64_t a1, uint64_t (***a2)())
{
  sub_207EBBF04(a2, a1 - 8);
}

uint64_t sub_207E06DE4()
{
  return 1;
}

uint64_t sub_207E06DEC()
{
  return 1;
}

uint64_t sub_207E06DF4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E06E00(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_207E06E0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = off_24C073610;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_207D47D34((uint64_t)v17, (uint64_t)v14);
  v15[0] = off_24C073590;
  sub_207EBDE4C((uint64_t)v15, a2);
  v15[0] = off_24C073610;
  sub_207D49CF4((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_207D49CF4((uint64_t)v14);
}

void sub_207E06F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_207D4EFCC(&a35);
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E06F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207E06FB8(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C0785F0 && sub_207EBDFD8(a1, (uint64_t)a2);
}

void sub_207E06FD8(uint64_t a1, uint64_t (***a2)())
{
  sub_207EBE230(a2, a1);
}

void sub_207E06FE8(uint64_t a1, uint64_t (***a2)())
{
  sub_207EC3BAC(a2, a1);
}

uint64_t sub_207E06FF8()
{
  return 1;
}

uint64_t sub_207E07000()
{
  return 1;
}

uint64_t sub_207E07008()
{
  return 1;
}

void sub_207E07010(uint64_t a1, uint64_t (***a2)())
{
  sub_207EBE230(a2, a1 - 8);
}

void sub_207E07020(uint64_t a1, uint64_t (***a2)())
{
  sub_207EC3BAC(a2, a1 - 8);
}

uint64_t sub_207E07030()
{
  return 1;
}

uint64_t sub_207E07038()
{
  return 1;
}

uint64_t sub_207E07040(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E0704C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_207E07058@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = off_24C0789B0;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_207D47D34((uint64_t)v17, (uint64_t)v14);
  v15[0] = off_24C078930;
  sub_207ECEE14((uint64_t)v15, a2);
  v15[0] = off_24C0789B0;
  sub_207D49CF4((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_207D49CF4((uint64_t)v14);
}

void sub_207E07198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_207ECEFA0(&a35);
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E071B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207E07204(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C078790 && sub_207ED0954(a1, (uint64_t)a2);
}

void sub_207E07224(uint64_t a1, uint64_t (***a2)())
{
  sub_207ED0BAC(a2, a1);
}

void sub_207E07234(uint64_t a1, uint64_t (***a2)())
{
  sub_207ED6528(a2, a1);
}

void sub_207E07244(uint64_t a1, uint64_t (***a2)())
{
  sub_207ED0BAC(a2, a1 - 8);
}

void sub_207E07254(uint64_t a1, uint64_t (***a2)())
{
  sub_207ED6528(a2, a1 - 8);
}

uint64_t sub_207E07264()
{
  return 2;
}

uint64_t sub_207E0726C()
{
  return 1;
}

uint64_t sub_207E07274(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E07280(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_207E0728C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  _BYTE v14[208];
  uint64_t (**v15)();
  uint64_t (**v16)();
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  sub_208085EDC((int *)(a1 + 200), &v12);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v14);
  }
  v15 = off_24C0777E8;
  v16 = &off_24C084548;
  v17 = v13;
  v13 = 0uLL;
  sub_207D47D34((uint64_t)v18, (uint64_t)v14);
  v15 = off_24C077768;
  sub_207E7D9A4((uint64_t)&v15, a2);
  v15 = off_24C0777E8;
  sub_207D49CF4((uint64_t)v18);
  v16 = &off_24C084548;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_207D49CF4((uint64_t)v14);
  v12 = &off_24C084548;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_207E0741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_207E7DB30(&a39);
  sub_207D49CF4((uint64_t)&a13);
  sub_20808CA44(&a10);
  _Unwind_Resume(a1);
}

void sub_207E07454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20808CA44((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_207E07468(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C077590 && sub_207EE1FD0(a1, (uint64_t)a2);
}

void sub_207E07488(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE21E8(a2, a1);
}

void sub_207E07498(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE2FEC(a2, a1);
}

void sub_207E074A8(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE21E8(a2, a1 - 8);
}

void sub_207E074B8(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE2FEC(a2, a1 - 8);
}

uint64_t sub_207E074C8()
{
  return 2;
}

uint64_t sub_207E074D0()
{
  return 1;
}

uint64_t sub_207E074D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E074E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_207E074F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[208];
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  _QWORD v16[28];

  v16[27] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(std::__shared_weak_count **)(a1 + 208);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a1 + 16;
  v9 = *(_DWORD *)(a1 + 192);
  if (v9 == 2)
  {
    sub_207E372B8(v8, (uint64_t)v13);
  }
  else if (v9 == 1)
  {
    sub_207E370A0(v8, (uint64_t)v13);
  }
  else
  {
    if (v9)
      sub_207CA9F48();
    sub_207E02E5C(v8, (uint64_t)v13);
  }
  v14[0] = off_24C076280;
  v14[1] = v4;
  v15 = v5;
  sub_207D47D34((uint64_t)v16, (uint64_t)v13);
  v14[0] = off_24C076218;
  sub_207E9B5D4((uint64_t)v14, a2);
  v14[0] = off_24C076280;
  sub_207D49CF4((uint64_t)v16);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_207D49CF4((uint64_t)v13);
}

void sub_207E0767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_207E01568(&a37);
  sub_207D49CF4((uint64_t)&a11);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E076E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E076F4(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == &off_24C077AB8)
    return sub_207EE4EF8(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_207E07714(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE5110(a2, a1);
}

void sub_207E07724(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE60AC(a2, a1);
}

void sub_207E07734(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE5110(a2, a1 - 8);
}

void sub_207E07744(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE60AC(a2, a1 - 8);
}

uint64_t sub_207E07754()
{
  return 2;
}

uint64_t sub_207E0775C()
{
  return 1;
}

uint64_t sub_207E07764(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E07770(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_207E0777C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 208);
  v6 = *(std::__shared_weak_count **)(a1 + 216);
  v15[0] = off_24C078070;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a1 + 224);
  sub_207D47D34((uint64_t)v18, (uint64_t)v14);
  v15[0] = off_24C077FF0;
  sub_207EAD0DC((uint64_t)v15, a2);
  v15[0] = off_24C078070;
  sub_207D49CF4((uint64_t)v18);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_207D49CF4((uint64_t)v14);
}

void sub_207E078C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_207EAD270(&a35);
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E078E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_207D49CF4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207E07930(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == &off_24C077E18 && sub_207EE7FB8(a1, (uint64_t)a2);
}

void sub_207E07950(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE8230(a2, a1);
}

void sub_207E07960(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE91CC(a2, a1);
}

void sub_207E07970(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE8230(a2, a1 - 8);
}

void sub_207E07980(uint64_t a1, uint64_t (***a2)())
{
  sub_207EE91CC(a2, a1 - 8);
}

uint64_t sub_207E07990()
{
  return 1;
}

uint64_t sub_207E07998()
{
  return 1;
}

uint64_t sub_207E079A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E079AC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_207E079B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  void *v6;
  _QWORD *v7;
  void *v8[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  _BYTE v16[208];
  _QWORD v17[3];
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_207E05FE4(a1 + 200, (uint64_t)v8);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v16);
  }
  sub_207EED350((uint64_t)v17, (__int128 *)v8, (uint64_t)v16);
  v6 = operator new(0x150uLL);
  sub_207EEB170((uint64_t)v6, (uint64_t)v17);
  *a2 = &off_24C078D18;
  a2[1] = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_24C078E28;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17[0] = off_24C078330;
  sub_207D49CF4((uint64_t)v25);
  if (v24 < 0)
  {
    operator delete(__p);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v21);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v18 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_11:
    sub_207D49CF4((uint64_t)v16);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)v17[1]);
  sub_207D49CF4((uint64_t)v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v14);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v12);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v9 & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v8[0]);
    return;
  }
LABEL_22:
  operator delete(v10);
  if (v9 < 0)
    goto LABEL_23;
}

void sub_207E07BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t (**a49)())
{
  uint64_t v49;

  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  a49 = off_24C0782B0;
  sub_207EEB87C((uint64_t)&a49);
  sub_207D49CF4((uint64_t)&a23);
  sub_207E0A7B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E07C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E0A7B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E07C20(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24C0780C0)
    return sub_207EED490(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_207E07C40(uint64_t a1, uint64_t (***a2)())
{
  sub_207EED9E4(a2, a1);
}

double sub_207E07C50(uint64_t a1, uint64_t (***a2)())
{
  return sub_207EEF544(a2, a1);
}

void sub_207E07C60(uint64_t a1, uint64_t (***a2)())
{
  sub_207EED9E4(a2, a1 - 8);
}

double sub_207E07C70(uint64_t a1, uint64_t (***a2)())
{
  return sub_207EEF544(a2, a1 - 8);
}

uint64_t sub_207E07C80()
{
  return 1;
}

uint64_t sub_207E07C88()
{
  return 1;
}

uint64_t sub_207E07C90(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_207E07C9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_207E07CA8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10[3];
  char v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  _BYTE v16[208];
  uint64_t (**v17)();
  void *v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_207F0B1CC(a1 + 200);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_207E372B8(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_207E370A0(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_207CA9F48();
    sub_207E02E5C(v4, (uint64_t)v16);
  }
  sub_207EF357C((uint64_t)&v17, (uint64_t *)v10, (uint64_t)v16);
  v6 = operator new(0x120uLL);
  sub_207EF1D04((uint64_t)v6, (uint64_t)&v17);
  *v6 = off_24C078520;
  *a2 = &off_24C078D18;
  a2[1] = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_24C078E28;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17 = off_24C0785A0;
  sub_207D49CF4((uint64_t)v25);
  if (v24 && v23 < 0)
    operator delete(__p);
  if (v21 && v20 < 0)
    operator delete(v19);
  v8 = v18;
  v18 = 0;
  if (v8)
    operator delete(v8);
  sub_207D49CF4((uint64_t)v16);
  if (v15 && v14 < 0)
    operator delete(v13);
  if (v12 && v11 < 0)
    operator delete(v10[1]);
  v9 = v10[0];
  v10[0] = 0;
  if (v9)
    operator delete(v9);
}

void sub_207E07E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void **v45;

  sub_207EF1E88(v45);
  sub_207EF1C1C((uint64_t)&a45);
  sub_207D49CF4((uint64_t)&a19);
  sub_207EF1C98((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_207E07E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207EF1C98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207E07EB0(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == &off_24C078380)
    return sub_207EF3684(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_207E07ED0(uint64_t a1, uint64_t (***a2)())
{
  sub_207EF389C(a2, a1);
}

void sub_207E07EE0(uint64_t a1, uint64_t (***a2)())
{
  sub_207EF8318(a2, a1);
}

void sub_207E07EF0(uint64_t a1, uint64_t (***a2)())
{
  sub_207EF389C(a2, a1 - 8);
}

void sub_207E07F00(uint64_t a1, uint64_t (***a2)())
{
  sub_207EF8318(a2, a1 - 8);
}

uint64_t sub_207E07F10()
{
  return 3;
}

uint64_t sub_207E07F18()
{
  return 2;
}

uint64_t sub_207E07F20()
{
  return 1;
}

uint64_t sub_207E07F28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_16;
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
LABEL_16:
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_207E08008(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_207E08060(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t *sub_207E080B8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[44];
  if (v2)
  {
    a1[45] = v2;
    v3 = (unint64_t)(a1[46] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076510[v4])(&v35, a1 + 47);
  }
  v5 = a1[36];
  if (v5)
  {
    a1[37] = v5;
    v6 = -1431655765 * ((unint64_t)(a1[38] - v5) >> 2);
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v7 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076520[v7])(&v35, a1 + 39);
  }
  v8 = a1[32];
  if (v8)
  {
    a1[33] = v8;
    v9 = (unint64_t)(a1[34] - v8) >> 3;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v10 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076530[v10])(&v35, a1 + 35);
  }
  v11 = a1[28];
  if (v11)
  {
    a1[29] = v11;
    v12 = (unint64_t)(a1[30] - v11) >> 3;
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v13 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076540[v13])(&v35, a1 + 31);
  }
  v14 = a1[24];
  if (v14)
  {
    a1[25] = v14;
    v15 = -1431655765 * ((unint64_t)(a1[26] - v14) >> 2);
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v16 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076520[v16])(&v35, a1 + 27);
  }
  v17 = a1[20];
  if (v17)
  {
    a1[21] = v17;
    v18 = *((_DWORD *)a1 + 44) - v17;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v19])(&v35, a1 + 23);
  }
  v20 = a1[15];
  if (v20)
  {
    a1[16] = v20;
    v21 = *((_DWORD *)a1 + 34) - v20;
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v22 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v22])(&v35, a1 + 18);
  }
  v23 = a1[10];
  if (v23)
  {
    a1[11] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[12] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v25 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v25])(&v35, a1 + 13);
  }
  v26 = a1[5];
  if (v26)
  {
    a1[6] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[7] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v28 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v28])(&v35, a1 + 8);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v31])(&v35, a1 + 3);
  }
  return a1;
}

uint64_t *sub_207E08464(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C076520[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_207E084F0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C076530[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_207E08570(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C076540[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_207E085F0(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = *((_DWORD *)a1 + 4) - v2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_207E0866C(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_207E086F8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C076510[v4])(&v8, a1 + 3);
  }
  return a1;
}

void sub_207E08778(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08784(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 4 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E087F4(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08800(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E08874(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08880(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E088F0(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E088FC(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E0896C(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08978(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E089E4(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E089F0(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

uint64_t *sub_207E08A64(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[40];
  if (v2)
  {
    a1[41] = v2;
    v3 = (unint64_t)(a1[42] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 87);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076510[v4])(&v35, a1 + 43);
  }
  v5 = a1[35];
  if (v5)
  {
    a1[36] = v5;
    v6 = *((_DWORD *)a1 + 74) - v5;
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 77);
    if ((_DWORD)v7 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v7])(&v35, a1 + 38);
  }
  v8 = a1[30];
  if (v8)
  {
    a1[31] = v8;
    v9 = *((_DWORD *)a1 + 64) - v8;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 67);
    if ((_DWORD)v10 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v10])(&v35, a1 + 33);
  }
  v11 = a1[26];
  if (v11)
  {
    a1[27] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[28] - v11) >> 2);
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 59);
    if ((_DWORD)v13 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076570[v13])(&v35, a1 + 29);
  }
  v14 = a1[22];
  if (v14)
  {
    a1[23] = v14;
    v15 = (unint64_t)(a1[24] - v14) >> 3;
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 51);
    if ((_DWORD)v16 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076580[v16])(&v35, a1 + 25);
  }
  v17 = a1[18];
  if (v17)
  {
    a1[19] = v17;
    v18 = (unint64_t)(a1[20] - v17) >> 3;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 43);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076590[v19])(&v35, a1 + 21);
  }
  v20 = a1[14];
  if (v20)
  {
    a1[15] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[16] - v20) >> 2);
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 35);
    if ((_DWORD)v22 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C076570[v22])(&v35, a1 + 17);
  }
  v23 = a1[9];
  if (v23)
  {
    a1[10] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[11] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 25);
    if ((_DWORD)v25 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C0765A0[v25])(&v35, a1 + 12);
  }
  v26 = a1[4];
  if (v26)
  {
    a1[5] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[6] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v28 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C0765A0[v28])(&v35, a1 + 7);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_207CA9F48();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C0765A0[v31])(&v35, a1 + 3);
  }
  return a1;
}

void sub_207E08E10(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08E1C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E08E90(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08E9C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E08F0C(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08F18(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

void sub_207E08F88(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_207E08F94(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD032C8](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_208216974);
    abort();
  }
  return result;
}

uint64_t sub_207E09008(uint64_t a1, uint64_t a2)
{
  return sub_207E07F28(a2);
}

uint64_t sub_207E09010(uint64_t a1, uint64_t a2)
{
  return sub_207E07F28(a2);
}

uint64_t sub_207E09018(uint64_t a1, uint64_t a2)
{
  return sub_207E07F28(a2);
}

uint64_t sub_207E09020(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_24C076970;
  *(_QWORD *)(a1 + 8) = &unk_24C0769D0;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E09098(_QWORD *__p)
{
  void *v2;
  uint64_t v3;
  char v4;

  *__p = &off_24C076970;
  __p[1] = &unk_24C0769D0;
  v2 = (void *)__p[27];
  if (v2)
  {
    __p[28] = v2;
    operator delete(v2);
  }
  v3 = *((unsigned int *)__p + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _QWORD *))off_24C0765B0[v3])(&v4, __p + 2);
  operator delete(__p);
}

void sub_207E0910C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = &off_24C076970;
  *(_QWORD *)a1 = &unk_24C0769D0;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E09184(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(a1 - 8) = &off_24C076970;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0769D0;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v4])(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  operator delete(v2);
}

uint64_t sub_207E09208(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C076F10;
  *(_QWORD *)(a1 + 8) = &unk_24C076F70;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E092B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C076F10;
  __p[1] = &unk_24C076F70;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E09364(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C076F10;
  *(_QWORD *)a1 = &unk_24C076F70;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E09414(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C076F10;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C076F70;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E094D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C0771B8;
  *(_QWORD *)(a1 + 8) = &unk_24C077218;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E09580(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C0771B8;
  __p[1] = &unk_24C077218;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E0962C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C0771B8;
  *(_QWORD *)a1 = &unk_24C077218;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E096DC(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C0771B8;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077218;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E09798(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C077390;
  *(_QWORD *)(a1 + 8) = &unk_24C0773F0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E09848(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C077390;
  __p[1] = &unk_24C0773F0;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E098F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C077390;
  *(_QWORD *)a1 = &unk_24C0773F0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E099A4(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C077390;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0773F0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E09A60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C078698;
  *(_QWORD *)(a1 + 8) = &unk_24C0786F8;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E09B10(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C078698;
  __p[1] = &unk_24C0786F8;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E09BBC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C078698;
  *(_QWORD *)a1 = &unk_24C0786F8;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E09C6C(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C078698;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0786F8;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E09D28(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C078838;
  *(_QWORD *)(a1 + 8) = &unk_24C078898;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E09DD8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C078838;
  __p[1] = &unk_24C078898;
  v2 = (std::__shared_weak_count *)__p[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E09E84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C078838;
  *(_QWORD *)a1 = &unk_24C078898;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E09F34(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C078838;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C078898;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E09FF0(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_24C077638;
  *(_QWORD *)(a1 + 8) = &unk_24C077698;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E0A07C(_QWORD *__p)
{
  void (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  *__p = &off_24C077638;
  __p[1] = &unk_24C077698;
  v2 = (void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))__p[26];
  if (v2)
    v2(0, __p + 26, 0, 0, 0);
  v3 = *((unsigned int *)__p + 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _QWORD *))off_24C0765B0[v3])(&v4, __p + 2);
  operator delete(__p);
}

_QWORD *sub_207E0A104(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = &off_24C077638;
  *result = &unk_24C077698;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))off_24C0765B0[v3])(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

void sub_207E0A190(uint64_t a1)
{
  void *v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v5;

  *(_QWORD *)(a1 - 8) = &off_24C077638;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077698;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_24C0765B0[v4])(&v5, a1 + 8);
  operator delete(v2);
}

uint64_t sub_207E0A220(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C077B60;
  *(_QWORD *)(a1 + 8) = &unk_24C077BC0;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E0A2D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C077B60;
  __p[1] = &unk_24C077BC0;
  v2 = (std::__shared_weak_count *)__p[26];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E0A37C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C077B60;
  *(_QWORD *)a1 = &unk_24C077BC0;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E0A42C(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C077B60;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077BC0;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E0A4E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C077EC0;
  *(_QWORD *)(a1 + 8) = &unk_24C077F20;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E0A598(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *__p = &off_24C077EC0;
  __p[1] = &unk_24C077F20;
  v2 = (std::__shared_weak_count *)__p[27];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *((unsigned int *)__p + 48);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *((unsigned int *)__p + 48);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, _QWORD *))off_24C0765B0[v5])(&v6, __p + 2);
LABEL_7:
  operator delete(__p);
}

void sub_207E0A644(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = &off_24C077EC0;
  *(_QWORD *)a1 = &unk_24C077F20;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v5])(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E0A6F4(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(a1 - 8) = &off_24C077EC0;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C077F20;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C0765B0[v6])(&v7, a1 + 8);
LABEL_7:
  operator delete(v2);
}

uint64_t sub_207E0A7B0(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)a1);
  return a1;
}

void sub_207E0A83C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207E06160(a1);
  operator delete(v1);
}

uint64_t sub_207E0A850(uint64_t a1)
{
  return sub_207E06160(a1 - 8);
}

void sub_207E0A858(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207E06160(a1 - 8);
  operator delete(v1);
}

uint64_t sub_207E0A870(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_24C078428;
  *(_QWORD *)(a1 + 8) = &unk_24C078488;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24C0765B0[v2])(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_207E0A918(char *__p)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)__p = &off_24C078428;
  *((_QWORD *)__p + 1) = &unk_24C078488;
  if (__p[376] && __p[375] < 0)
    operator delete(*((void **)__p + 44));
  if (__p[344] && __p[343] < 0)
  {
    operator delete(*((void **)__p + 40));
    v2 = *((unsigned int *)__p + 48);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *((unsigned int *)__p + 48);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, char *))off_24C0765B0[v2])(&v3, __p + 16);
LABEL_8:
  operator delete(__p);
}

void sub_207E0A9B8(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = &off_24C078428;
  *(_QWORD *)a1 = &unk_24C078488;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24C0765B0[v2])(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_207E0AA60(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = &off_24C078428;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C078488;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v3 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v3 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))off_24C0765B0[v3])(&v4, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
  operator delete(v2);
}

uint64_t sub_207E0AB10(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_207CA40D8((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_207CA40D8(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_207E0AD38(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_207E0ACCC(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_207E0AD38@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_207CA44DC((char **)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_207E0AE40(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_207E0ADAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E0AE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_207E0AFA0((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_207CA9F48();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C0765F8[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C0765E0[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_207CA4674((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_207E0AF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E0AFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__dst[2];
  unint64_t v30;
  _QWORD v31[5];
  _QWORD *v32;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v31[0] = v5;
  if (*(_BYTE *)(a3 + 24))
  {
    v6 = *(char *)(a3 + 23);
    if (v6 >= 0)
      v7 = a3;
    else
      v7 = *(_QWORD *)a3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    sub_207CBAB98((_QWORD *)v5 + 2, v7, v8);
  }
  if (*(_BYTE *)(a3 + 80))
  {
    v9 = sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)"#", 1);
    v12 = *(_QWORD *)(a3 + 32);
    v11 = a3 + 32;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    sub_207CBAB98(v9, v14, v15);
  }
  v16 = *((_DWORD *)v5 + 30);
  if ((v16 & 0x10) != 0)
  {
    v19 = *((_QWORD *)v5 + 14);
    v20 = *((_QWORD *)v5 + 9);
    if (v19 < v20)
    {
      *((_QWORD *)v5 + 14) = v20;
      v19 = v20;
    }
    v21 = (const void *)*((_QWORD *)v5 + 8);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_38;
  }
  else
  {
    if ((v16 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v30) = 0;
      v18 = __dst;
      goto LABEL_30;
    }
    v21 = (const void *)*((_QWORD *)v5 + 5);
    v17 = *((_QWORD *)v5 + 7) - (_QWORD)v21;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_38:
      sub_207C95C50();
  }
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v30 = v23 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(v30) = v17;
  v18 = __dst;
  if (v17)
LABEL_29:
    memmove(v18, v21, v17);
LABEL_30:
  *((_BYTE *)v18 + v17) = 0;
  v24 = v31[0];
  if (v31[0])
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v31[0] = *MEMORY[0x24BEDB7F0];
    v27 = *(_QWORD *)(v25 + 72);
    *(_QWORD *)(v24 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(v25 + 64);
    *(_QWORD *)(v24 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v24 + 16) = v27;
    if (*(char *)(v24 + 111) < 0)
      operator delete(*(void **)(v24 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v24 + 128);
    operator delete((void *)v24);
  }
  v31[0] = a2;
  v31[1] = __dst;
  v31[2] = a2;
  v31[3] = __dst;
  v31[4] = __dst;
  v28 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v28 == -1)
    sub_207CA9F48();
  v32 = v31;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v28])(&v32, a2);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
}

void sub_207E0B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E0B254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

double sub_207E0B268@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_207E0B52C((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_207EFE140(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_207E0B76C(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_207E0B414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E0B52C(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void **v9;
  __int128 v10;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      sub_207CA420C();
    v4 = *(void ***)(a1 + 8);
    v5 = 96 * a2;
    v6 = (char *)operator new(96 * a2);
    v7 = &v6[(char *)v4 - (char *)v2];
    *(_QWORD *)&v10 = v7;
    *((_QWORD *)&v10 + 1) = &v6[v5];
    if (v4 != v2)
    {
      v8 = 0;
      do
      {
        sub_207D481C4(&v7[v8 * 8 - 96], (__int128 *)&v4[v8 - 12]);
        v8 -= 12;
      }
      while (&v4[v8] != v2);
      v2 = *(void ***)a1;
      v9 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8 * 8];
      *(_OWORD *)(a1 + 8) = v10;
      while (1)
      {
        if (v9 == v2)
          goto LABEL_17;
        if (*((_BYTE *)v9 - 16) && *((char *)v9 - 41) < 0)
        {
          operator delete(*(v9 - 8));
          if (!*((_BYTE *)v9 - 72))
            goto LABEL_7;
        }
        else if (!*((_BYTE *)v9 - 72))
        {
          goto LABEL_7;
        }
        if (*((char *)v9 - 73) < 0)
          operator delete(*(v9 - 12));
LABEL_7:
        v9 -= 12;
      }
    }
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[v5];
LABEL_17:
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_207E0B6DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    if (*(_BYTE *)(i - 16) && *(char *)(i - 41) < 0)
    {
      operator delete(*(void **)(i - 64));
      if (!*(_BYTE *)(i - 72))
        continue;
    }
    else if (!*(_BYTE *)(i - 72))
    {
      continue;
    }
    if (*(char *)(i - 73) < 0)
      operator delete(*(void **)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_207E0B76C(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _OWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void **v18;
  __int128 v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[6 * v3];
  *((_QWORD *)&v20 + 1) = &v7[6 * v6];
  *v8 = 0;
  v8[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v8[24] = 1;
  }
  v9 = (char *)&v7[6 * v3];
  v9[32] = 0;
  v10 = v9 + 32;
  v10[48] = 0;
  v11 = (char *)&v7[6 * v3];
  if (*(_BYTE *)(a2 + 80))
  {
    *(_OWORD *)v10 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v12 = (unsigned __int128 *)(a2 + 64);
    do
      v13 = __ldaxp(v12);
    while (__stlxp(v13, v12));
    v7[6 * v3 + 4] = v13;
    v10[48] = 1;
    v11 = (char *)&v7[6 * v3];
  }
  v14 = v11 + 96;
  *(_QWORD *)&v20 = v11 + 96;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 != (char *)*a1)
  {
    v17 = 0;
    do
    {
      sub_207D481C4(&v8[v17 - 96], (__int128 *)&v15[v17 - 96]);
      v17 -= 96;
    }
    while (&v15[v17] != v16);
    v15 = (char *)*a1;
    v18 = (void **)a1[1];
    *a1 = &v8[v17];
    *(_OWORD *)(a1 + 1) = v20;
    v14 = (char *)v20;
    while (1)
    {
      if (v18 == (void **)v15)
        goto LABEL_31;
      if (*((_BYTE *)v18 - 16) && *((char *)v18 - 41) < 0)
      {
        operator delete(*(v18 - 8));
        if (!*((_BYTE *)v18 - 72))
          goto LABEL_21;
      }
      else if (!*((_BYTE *)v18 - 72))
      {
        goto LABEL_21;
      }
      if (*((char *)v18 - 73) < 0)
        operator delete(*(v18 - 12));
LABEL_21:
      v18 -= 12;
    }
  }
  *a1 = v8;
  a1[1] = v14;
  a1[2] = *((_QWORD *)&v20 + 1);
LABEL_31:
  if (v15)
    operator delete(v15);
  return v14;
}

BOOL sub_207E0BA00(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 **v20;
  int v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 **v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  unsigned __int8 ***v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 **v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8))
    return 0;
  v5 = (unsigned __int8 *)a2[1];
  v6 = (unsigned __int8 **)a3[1];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v10 = v5[23];
    if ((v10 & 0x80u) == 0)
      v11 = (unsigned __int8 *)v5[23];
    else
      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = v6[1];
    if (v11 != v12)
      return 0;
    if (v13 >= 0)
      v14 = (unsigned __int8 *)a3[1];
    else
      v14 = *v6;
    if ((v10 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10)
          goto LABEL_26;
      }
      return 0;
    }
LABEL_26:
    v15 = a2[2];
    v16 = a3[2];
    v17 = *(unsigned __int8 *)(v16 + 16);
    if (*(_BYTE *)(v15 + 16))
      v18 = v17 == 0;
    else
      v18 = 1;
    if (v18)
    {
      if ((*(_BYTE *)(v15 + 16) != 0) != (v17 != 0))
        return 0;
    }
    else if (*(_QWORD *)v15 != *(_QWORD *)v16 || *(unsigned __int8 *)(v15 + 8) != *(unsigned __int8 *)(v16 + 8))
    {
      return 0;
    }
    v19 = (unsigned __int8 *)a2[3];
    v20 = (unsigned __int8 **)a3[3];
    v21 = *((unsigned __int8 *)v20 + 24);
    if (v19[24])
      v22 = v21 == 0;
    else
      v22 = 1;
    if (v22)
    {
      if ((v19[24] != 0) != (v21 != 0))
        return 0;
    }
    else
    {
      v30 = v19[23];
      if ((v30 & 0x80u) == 0)
        v31 = (unsigned __int8 *)v19[23];
      else
        v31 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
      v32 = (unsigned __int8 *)*((unsigned __int8 *)v20 + 23);
      v33 = (char)v32;
      if ((char)v32 < 0)
        v32 = v20[1];
      if (v31 != v32)
        return 0;
      if (v33 >= 0)
        v34 = (unsigned __int8 *)a3[3];
      else
        v34 = *v20;
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v19, v34, *((_QWORD *)v19 + 1)))
          return 0;
      }
      else if (v19[23])
      {
        while (*v19 == *v34)
        {
          ++v19;
          ++v34;
          if (!--v30)
            goto LABEL_41;
        }
        return 0;
      }
    }
LABEL_41:
    v23 = (unsigned __int8 *)a2[4];
    v24 = (unsigned __int8 **)a3[4];
    v25 = *((unsigned __int8 *)v24 + 24);
    if (v23[24])
      v26 = v25 == 0;
    else
      v26 = 1;
    if (v26)
    {
      if ((v23[24] != 0) == (v25 != 0))
        goto LABEL_47;
    }
    else
    {
      v35 = v23[23];
      if ((v35 & 0x80u) == 0)
        v36 = (unsigned __int8 *)v23[23];
      else
        v36 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
      v37 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
      v38 = (char)v37;
      if ((char)v37 < 0)
        v37 = v24[1];
      if (v36 == v37)
      {
        if (v38 >= 0)
          v39 = (unsigned __int8 *)a3[4];
        else
          v39 = *v24;
        if ((v35 & 0x80) == 0)
        {
          if (v23[23])
          {
            while (*v23 == *v39)
            {
              ++v23;
              ++v39;
              if (!--v35)
                goto LABEL_47;
            }
            return 0;
          }
LABEL_47:
          v27 = (uint64_t *)a2[5];
          v28 = (unsigned __int8 ***)a3[5];
          if (*((_BYTE *)v27 + 24))
            v29 = *((_BYTE *)v28 + 24) == 0;
          else
            v29 = 1;
          if (v29)
            return (*((_BYTE *)v27 + 24) != 0) == (*((_BYTE *)v28 + 24) != 0);
          v41 = *v27;
          v40 = v27[1];
          v42 = *v28;
          if (v40 - *v27 == (char *)v28[1] - (char *)*v28)
          {
            if (v41 == v40)
              return 1;
            while (1)
            {
              v43 = *(unsigned __int8 *)(v41 + 23);
              if ((v43 & 0x80u) == 0)
                v44 = (unsigned __int8 *)*(unsigned __int8 *)(v41 + 23);
              else
                v44 = *(unsigned __int8 **)(v41 + 8);
              v45 = (unsigned __int8 *)*((unsigned __int8 *)v42 + 23);
              v46 = (char)v45;
              if ((char)v45 < 0)
                v45 = v42[1];
              if (v44 != v45)
                break;
              if (v46 >= 0)
                v47 = (unsigned __int8 *)v42;
              else
                v47 = *v42;
              if ((v43 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v41, v47, *(_QWORD *)(v41 + 8)))
                  return 0;
              }
              else if (*(_BYTE *)(v41 + 23))
              {
                v48 = 0;
                while (*(unsigned __int8 *)(v41 + v48) == v47[v48])
                {
                  if (v43 == ++v48)
                    goto LABEL_89;
                }
                return 0;
              }
LABEL_89:
              v41 += 24;
              v42 += 3;
              result = 1;
              if (v41 == v40)
                return result;
            }
          }
          return 0;
        }
        if (!memcmp(*(const void **)v23, v39, *((_QWORD *)v23 + 1)))
          goto LABEL_47;
      }
    }
    return 0;
  }
  if ((v5[24] != 0) == (v7 != 0))
    goto LABEL_26;
  return 0;
}

void sub_207E0BDBC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E0C500((uint64_t)v8, a2);
  sub_207E0BED8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E0BEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0BED8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2081F3DDC(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2081F3DDC(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_2081F1A98(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_20806DC2C((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_207E0C72C(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2081F1A98(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_20806DC2C((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_207E0CAB0((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2081F1A98(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_20806DC2C((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2081F42A4(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2081F1A98(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_20806DC2C((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2081F42A4(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2081F1A98(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_20806DC2C((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2081F42A4(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2081F1A98(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_20806DC2C((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_2081F5870(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2081F42A4(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_207E0C480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E0C4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E0C4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E0C4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_207E0C500(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_207CA5698((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_207E0C670(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E0C72C(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_207E0C834((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_207CA9F48();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
  sub_2081F42A4(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_207E0C7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E0C80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0C820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0C834(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)(&off_24C08E928)[2 * *a3], (uint64_t)(&off_24C08E928)[2 * *a3 + 1]);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E0CA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E0CA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E0CAB0(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_2081F1E44(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_2081F3DDC(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_2081F3DDC(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2081F3DDC(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_2081F1A98(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = (uint64_t)v19;
    sub_20806DC2C((void ***)&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_207E0CDE8(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E0CDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E0CDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E0CDE8(uint64_t a1, unsigned __int8 **a2)
{
  void **v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  void **v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_207E0C834((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_207CA9F48();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24C0765F8[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24C0765E0[v17])(&v19, v15);
    sub_2081F42A4(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = (void **)**a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_2081F1A98(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = (void **)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_20806DC2C(&v16, v10);
    }
  }
}

void sub_207E0CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  _Unwind_Resume(a1);
}

void sub_207E0CF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E0CF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0CF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0CF98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  __int128 i;
  std::string __p;
  __int128 v24;

  v11 = 0x5555555555555555 * ((a1 - a3) >> 3);
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = 0x5555555555555555 * ((a1 - a3) >> 3);
  v13 = (v12 - 1) * a5;
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  v14 = 0;
  v15 = a1 - a3;
  if (a1 != a3)
  {
    do
    {
      sub_207E0D1A8((unsigned __int8 **)&v24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 += size;
      *(_QWORD *)&v24 = v24 + 24;
    }
    while ((_QWORD)v24 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  if (v15 < 0)
  {
    sub_207E0D1A8((unsigned __int8 **)&v24, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)p_p, v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((unint64_t)v11 < 2)
        return;
    }
    else if ((unint64_t)v11 < 2)
    {
      return;
    }
    *(_QWORD *)&v24 = v24 + 24;
    for (i = v24; (_QWORD)i != a3; *(_QWORD *)&i = i + 24)
    {
      std::string::append(a6, a4, a5);
      sub_207E0D1A8((unsigned __int8 **)&i, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v20 = __p.__r_.__value_.__l.__size_;
      std::string::append(a6, (const std::string::value_type *)v19, v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_207E0D164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

void sub_207E0D1A8(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;

  v3 = *a1;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((v3[23] & 0x80u) == 0)
    v4 = v3[23];
  else
    v4 = *((_QWORD *)v3 + 1);
  std::string::reserve(a2, v4);
  v5 = *((_QWORD *)v3 + 1);
  if ((v3[23] & 0x80u) == 0)
  {
    v6 = v3[23];
  }
  else
  {
    v3 = *(unsigned __int8 **)v3;
    v6 = v5;
  }
  if (v6)
  {
    while (1)
    {
      v7 = *v3;
      if (v7 == 59)
        break;
      if (v7 == 92)
      {
        v8 = "\\\\";
LABEL_15:
        std::string::append(a2, v8, 2uLL);
        goto LABEL_10;
      }
      std::string::push_back(a2, v7);
LABEL_10:
      ++v3;
      if (!--v6)
        return;
    }
    v8 = "\\;";
    goto LABEL_15;
  }
}

void sub_207E0D274(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_207E0D294(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C076610[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_207E0DB44((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_207CA9F48();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C0765F8[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C0765E0[v52])(&v48, &v49);
  sub_2081F42A4(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_2081F1E44(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F3DDC(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_207E0DDC0((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_207CA9F48();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C0765F8[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C0765E0[v52])(&v48, &v49);
  sub_2081F42A4(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_2081F4894(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)off_24C06E878;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)off_24C06E878;
      sub_207F2CBA4((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_207F25230((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_207CA9F48();
  }
  v11 = sub_207F24D0C(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = off_24C06E878;
    sub_207F2CBA4((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = off_24C06E878;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_207E0E02C(&v64, (char *)&v60, v11);
  sub_207E0E3F8((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))off_24C076500[v36])(&v49, v38);
}

void sub_207E0D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_207E0E3F8((uint64_t)&a24);
  sub_207CA2C88(v24 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E0D8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x20BD027B8](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_207CA2C88(v39 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E0D928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C88(v9 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E0D944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_207E02E04((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E0DA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a2 = off_24C06E878;
  v3 = *(_QWORD *)(a3 + 8);
  v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  v11 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 52) = v9;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

__n128 sub_207E0DAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;

  v4 = *(_QWORD *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a2 = &off_24C0736D0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a3 + 24);
  v8 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v8;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_207E0DB44(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_207CBAB98((_QWORD *)v5 + 2, (uint64_t)(&off_24C07A7F0)[2 * *a3], (uint64_t)(&off_24C07A7F0)[2 * *a3 + 1]);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E0DD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E0DDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E0DDC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_207F23F98((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E0DFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E0E018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E0E02C(_DWORD *a1, char *a2, int a3)
{
  _BYTE *v4;
  _QWORD *exception;
  int v6;
  std::runtime_error *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  __int128 v33;
  void *__p;
  char v35;
  unsigned __int8 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  char v43;
  std::string v44;
  char v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  int v54;
  _QWORD v55[2];

  sub_207F15C84(a1, a2, a3, (uint64_t)&v44);
  if (!v53)
  {
    v55[0] = "save";
    v55[1] = 4;
    v54 = a3;
    sub_207F15AB0("Failure during ", (uint64_t)v55, (uint64_t)" from stream with file format ", &v54, (uint64_t)": ");
    if (v53)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C072430;
      __cxa_throw(exception, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
    }
    sub_208213E48(&v21, (__int128 *)&v44, (uint64_t)&v23);
    v33 = v23;
    v4 = sub_207CCB3BC(&__p, &v24);
    v9 = v33;
    LOBYTE(v10) = 0;
    v19 = 0;
    if (!v43)
    {
      v20 = 0;
      goto LABEL_14;
    }
    v12 = 0;
    v6 = v36;
    if (v36)
    {
      v10 = *(_OWORD *)v4;
      v11 = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)v4 = 0;
      v12 = 1;
      LOBYTE(v13) = 0;
      v18 = 0;
      if (!v42)
      {
LABEL_8:
        v19 = 1;
        v20 = 0;
        if (!v6)
          goto LABEL_14;
        goto LABEL_12;
      }
    }
    else
    {
      LOBYTE(v13) = 0;
      v18 = 0;
      if (!v42)
        goto LABEL_8;
    }
    v14 = v38;
    v13 = v37;
    v37 = 0uLL;
    v15 = v39;
    v16 = v40;
    v17 = v41;
    v38 = 0;
    v40 = 0uLL;
    v41 = 0;
    v18 = 1;
    v19 = 1;
    v20 = 0;
    if (!v6)
      goto LABEL_14;
LABEL_12:
    if (v35 < 0)
      operator delete(__p);
LABEL_14:
    if (v32)
    {
      if (v31)
      {
        if (v30 < 0)
          operator delete(v29);
        if (v28 < 0)
          operator delete(v27);
      }
      if (v26 && v25 < 0)
        operator delete((void *)v24);
    }
    if (v22 < 0)
      operator delete(v21);
    if (!v53 && v52)
    {
      if (v51)
      {
        if (v50 < 0)
          operator delete(v49);
        if (v48 < 0)
          operator delete(v47);
      }
      if (v46)
      {
        if (v45 < 0)
          operator delete((void *)v44.__r_.__value_.__r.__words[2]);
      }
    }
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v8 = sub_207E0E368((uint64_t)&v9);
    sub_208212E0C(v8, &v44);
    std::runtime_error::runtime_error(v7, &v44);
    __cxa_throw(v7, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
}

void sub_207E0E2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  int v10;
  uint64_t v11;

  if (*(char *)(v11 - 161) < 0)
  {
    operator delete(*(void **)(v11 - 184));
    if ((v10 & 1) == 0)
    {
LABEL_6:
      sub_207D04458((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v10)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v9);
  goto LABEL_6;
}

void sub_207E0E320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  sub_207CCB330((uint64_t)&a31);
  if (a30 < 0)
  {
    operator delete(__p);
    sub_207D04458(v31 - 184);
    _Unwind_Resume(a1);
  }
  sub_207D04458(v31 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_207E0E368(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C072430;
    __cxa_throw(exception, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_207E0E3A8(uint64_t a1)
{
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

uint64_t sub_207E0E3F8(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  size_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  size_t v26;
  void **v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_207C95C50();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = (void **)v11;
    v17 = (unsigned __int8 *)sub_2081F1A98(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_20806DC2C(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = v20;
  sub_2081F1FC0(v21, &v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_207E0E644(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20806DC2C(v13, a13);
  sub_207C9CFA4(a1);
}

void sub_207E0E660(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E0C500((uint64_t)v8, a2);
  sub_207E0E77C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E0E764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0E77C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const void **v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v39 = (uint64_t *)(v6 + 16);
    sub_208210C8C(&v39, 2u);
    sub_20820C2C0(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20821152C();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_208210F00((uint64_t)&v39, v6 + 8);
  sub_20820C2C0(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v39 = (uint64_t *)(v7 + 16);
  sub_208210FF0(&v39, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v39 = (uint64_t *)(v9 + 16);
    sub_2082100A4(&v39, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v39) = -52;
    BYTE1(v39) = v8;
  }
  else
  {
    LOBYTE(v39) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v15 + 40))
    {
      v39 = (uint64_t *)(v15 + 16);
      sub_2082100A4(&v39, 1);
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
        goto LABEL_19;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
LABEL_19:
        v39 = (uint64_t *)(v16 + 16);
        sub_208211D5C((uint64_t)&v38, &v39, (const void **)(a2 + 24));
        if (a3 < 4)
          return;
        goto LABEL_28;
      }
    }
    sub_208212184((uint64_t)&v39, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v39 = (uint64_t *)(v17 + 16);
      sub_2082100A4(&v39, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v39) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
  }
LABEL_28:
  sub_207E0EDEC(a1, a2 + 56);
  if (a3 != 5)
  {
    if (a3 < 6)
      return;
    if (!*(_BYTE *)(a2 + 104))
    {
      v23 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        v39 = (uint64_t *)(v23 + 16);
        sub_2082100A4(&v39, 0);
        if (!*(_BYTE *)(a2 + 136))
        {
LABEL_54:
          v26 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v26 + 40))
          {
            v39 = (uint64_t *)(v26 + 16);
            sub_2082100A4(&v39, 0);
            if (*(_BYTE *)(a2 + 168))
              goto LABEL_56;
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
            if (*(_BYTE *)(a2 + 168))
            {
LABEL_56:
              v27 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v27 + 40))
              {
                v39 = (uint64_t *)(v27 + 16);
                sub_2082100A4(&v39, 1);
              }
              else
              {
                LOBYTE(v39) = 1;
                std::ostream::write();
              }
              v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
              v29 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v29 + 40))
              {
                v39 = (uint64_t *)(v29 + 16);
                sub_20821166C(&v39, v28);
              }
              else
              {
                sub_208211974();
              }
              v31 = *(const void ***)(a2 + 144);
              v30 = *(const void ***)(a2 + 152);
              v32 = ((char *)v30 - (char *)v31) / 24;
              v33 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v33 + 40))
              {
                v39 = (uint64_t *)(v33 + 16);
                if (v30 != v31)
                {
                  v34 = 24 * v32;
                  do
                  {
                    sub_208211D5C((uint64_t)&v38, &v39, v31);
                    v31 += 3;
                    v34 -= 24;
                  }
                  while (v34);
                }
              }
              else if (v30 != v31)
              {
                v35 = v33 + 8;
                v36 = 24 * v32;
                do
                {
                  sub_208212184((uint64_t)&v39, v35, (uint64_t)v31);
                  v31 += 3;
                  v36 -= 24;
                }
                while (v36);
              }
              return;
            }
          }
LABEL_72:
          v37 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v37 + 40))
          {
            v39 = (uint64_t *)(v37 + 16);
            sub_2082100A4(&v39, 0);
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
          }
          return;
        }
      }
      else
      {
        LOBYTE(v39) = 0;
        std::ostream::write();
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
      }
LABEL_46:
      v24 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v24 + 40))
      {
        v39 = (uint64_t *)(v24 + 16);
        sub_2082100A4(&v39, 1);
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
          goto LABEL_48;
      }
      else
      {
        LOBYTE(v39) = 1;
        std::ostream::write();
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
        {
LABEL_48:
          v39 = (uint64_t *)(v25 + 16);
          sub_208211D5C((uint64_t)&v38, &v39, (const void **)(a2 + 112));
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_56;
          goto LABEL_72;
        }
      }
      sub_208212184((uint64_t)&v39, v25 + 8, a2 + 112);
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_56;
      goto LABEL_72;
    }
    v21 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v21 + 40))
    {
      v39 = (uint64_t *)(v21 + 16);
      sub_2082100A4(&v39, 1);
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
        goto LABEL_37;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
LABEL_37:
        v39 = (uint64_t *)(v22 + 16);
        sub_208211D5C((uint64_t)&v38, &v39, (const void **)(a2 + 80));
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
        goto LABEL_46;
      }
    }
    sub_208212184((uint64_t)&v39, v22 + 8, a2 + 80);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_54;
    goto LABEL_46;
  }
  if (!*(_BYTE *)(a2 + 104))
    goto LABEL_72;
  v18 = (const void **)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    v39 = (uint64_t *)(v19 + 16);
    sub_2082100A4(&v39, 1);
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
    {
LABEL_32:
      v39 = (uint64_t *)(v20 + 16);
      sub_208211D5C((uint64_t)&v38, &v39, v18);
      return;
    }
  }
  else
  {
    LOBYTE(v39) = 1;
    std::ostream::write();
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
      goto LABEL_32;
  }
  sub_208212184((uint64_t)&v39, v20 + 8, (uint64_t)v18);
}

void sub_207E0EDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v14 = (uint64_t *)(v2 + 16);
      sub_2082100A4(&v14, 0);
    }
    else
    {
      LOBYTE(v14) = 0;
      std::ostream::write();
    }
    return;
  }
  if (*(_BYTE *)(v2 + 40))
  {
    v14 = (uint64_t *)(v2 + 16);
    sub_2082100A4(&v14, 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_4;
  }
  else
  {
    LOBYTE(v14) = 1;
    std::ostream::write();
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
LABEL_4:
      v14 = (uint64_t *)(v5 + 16);
      sub_208210C8C(&v14, 2u);
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v6 + 40))
        goto LABEL_5;
LABEL_12:
      sub_20821152C();
      v7 = *(char *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
        goto LABEL_6;
LABEL_13:
      if (v7 < 0)
      {
        LOBYTE(v14) = -52;
        BYTE1(v14) = v7;
      }
      else
      {
        LOBYTE(v14) = v7;
      }
      std::ostream::write();
      goto LABEL_18;
    }
  }
  sub_208210F00((uint64_t)&v14, v5 + 8);
  sub_20820C2C0(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_12;
LABEL_5:
  v14 = (uint64_t *)(v6 + 16);
  sub_208210FF0(&v14, *(_QWORD *)a2);
  v7 = *(char *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v8 + 40))
    goto LABEL_13;
LABEL_6:
  v14 = (uint64_t *)(v8 + 16);
  sub_2082100A4(&v14, v7);
LABEL_18:
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
}

void sub_207E0F000(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  _BYTE v40[28];
  char v41[8];
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  std::ios_base v62;
  uint64_t v63;
  int v64;
  uint64_t (**v65)();
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  __int16 v72;

  *(_OWORD *)v40 = *(_OWORD *)a2;
  *(_OWORD *)&v40[12] = *(_OWORD *)(a2 + 12);
  v41[0] = 0;
  v49 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C076610[v3])(&v65, v41, a2 + 32);
    v49 = v3;
  }
  v4 = a1[3];
  if (*(_BYTE *)(v4 + 40))
  {
    v50 = (uint64_t (**)())(v4 + 16);
    sub_2082105A8((uint64_t **)&v50, *(unsigned __int16 *)v40);
  }
  else if (*(unsigned __int16 *)v40 > 0x7Fu)
  {
    if (*(unsigned __int16 *)v40 > 0xFFu)
    {
      LOBYTE(v50) = -51;
      *(_WORD *)((char *)&v50 + 1) = __rev16(*(unsigned __int16 *)v40);
    }
    else
    {
      LOBYTE(v50) = -52;
      BYTE1(v50) = v40[0];
    }
    std::ostream::write();
  }
  else
  {
    LOBYTE(v50) = v40[0];
    std::ostream::write();
  }
  v5 = a1[3];
  if (*(_BYTE *)(v5 + 40))
  {
    v50 = (uint64_t (**)())(v5 + 16);
    sub_208210C8C((uint64_t **)&v50, 2u);
  }
  else
  {
    LOBYTE(v50) = 2;
    std::ostream::write();
  }
  sub_20820C2C0(a1[3]);
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v50 = (uint64_t (**)())(v6 + 16);
    sub_20821166C((uint64_t **)&v50, *(unint64_t *)&v40[8]);
  }
  else
  {
    sub_208211974();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v50 = (uint64_t (**)())(v7 + 16);
    sub_208210C8C((uint64_t **)&v50, *(unsigned int *)&v40[16]);
    sub_208210C8C((uint64_t **)&v50, *(unsigned int *)&v40[20]);
  }
  else
  {
    v8 = v7 + 8;
    sub_208210F00((uint64_t)&v50, v7 + 8);
    sub_208210F00((uint64_t)&v50, v8);
  }
  v9 = a1[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  if (*(unsigned __int16 *)v40 == 1)
  {
    if (!v49)
    {
      v50 = off_24C06E878;
      v15 = v42;
      v16 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = v46;
        v20 = v47;
        v21 = v48;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      else
      {
        v19 = v46;
        v20 = v47;
        v21 = v48;
      }
      v51 = v15;
      v52 = v16;
      v53 = v44;
      v54 = v45;
      v55 = v19;
      v56 = v20;
      v57 = v21;
      if (v16)
      {
        v31 = (unint64_t *)&v16->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      goto LABEL_50;
    }
    if (v49 == 1)
    {
      v50 = off_24C06E878;
      sub_207F2CBA4((uint64_t)v41, (uint64_t)&v51);
LABEL_50:
      sub_207F25230(a1, (uint64_t)&v50);
      v33 = v52;
      if (!v52)
        goto LABEL_64;
      v34 = (unint64_t *)&v52->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_63;
    }
LABEL_69:
    sub_207CA9F48();
  }
  v14 = sub_207F24D0C(*(unsigned __int16 *)v40);
  if (v49)
  {
    if (v49 != 1)
      goto LABEL_69;
    v65 = off_24C06E878;
    sub_207F2CBA4((uint64_t)v41, (uint64_t)&v66);
  }
  else
  {
    v65 = off_24C06E878;
    v23 = v42;
    v24 = v43;
    if (v43)
    {
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = v46;
      v28 = v47;
      v29 = v48;
      do
        v30 = __ldxr(v25);
      while (__stxr(v30 + 1, v25));
    }
    else
    {
      v27 = v46;
      v28 = v47;
      v29 = v48;
    }
    v66 = v23;
    v67 = v24;
    v68 = v44;
    v69 = v45;
    v70 = v27;
    v71 = v28;
    v72 = v29;
    if (v24)
    {
      v36 = (unint64_t *)&v24->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v50 = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v51 = MEMORY[0x24BEDB848] + 16;
  v58 = 0u;
  v59 = 0u;
  v60 = 24;
  v61 = MEMORY[0x24BEDB828] + 24;
  v62.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v62, &v51);
  v63 = 0;
  v64 = -1;
  sub_207E0E02C(&v65, (char *)&v61, v14);
  sub_207E0F654((uint64_t)&v50);
  v33 = v67;
  if (!v67)
    goto LABEL_64;
  v38 = (unint64_t *)&v67->__shared_owners_;
  do
    v35 = __ldaxr(v38);
  while (__stlxr(v35 - 1, v38));
LABEL_63:
  if (v35)
  {
LABEL_64:
    v39 = v49;
    if (v49 == -1)
      return;
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v39 = v49;
  if (v49 != -1)
LABEL_65:
    ((void (*)(uint64_t (***)(), char *))off_24C076500[v39])(&v50, v41);
}

void sub_207E0F538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  sub_207E0F654((uint64_t)&a22);
  sub_207CA2C88(v22 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E0F55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x20BD027B8](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_207CA2C88(v37 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E0F5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C88(v9 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E0F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_207E02E04((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E0F654(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *__dst;
  size_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19[2];
  char v20;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_207C95C50();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = (uint64_t *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  if (v17 >= 0)
    v10 = HIBYTE(v17);
  else
    v10 = v16;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    v19[0] = (uint64_t *)(v11 + 16);
    sub_20821166C(v19, v10);
  }
  else
  {
    sub_208211974();
  }
  if (SHIBYTE(v17) < 0)
  {
    v12 = __dst;
    if (v10 && !__dst)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v12 = 0;
    }
  }
  else
  {
    v12 = (uint64_t *)&__dst;
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(v13 + 40))
  {
    v18 = (uint64_t *)(v13 + 16);
    LODWORD(v19[0]) = v10;
    v19[1] = v12;
    sub_20820FC60((uint64_t)&v20, &v18, (unsigned int *)v19);
  }
  else
  {
    if (v10 > 0xFF)
    {
      if (WORD1(v10))
      {
        LOBYTE(v19[0]) = -58;
        *(_DWORD *)((char *)v19 + 1) = bswap32(v10);
      }
      else
      {
        LOBYTE(v19[0]) = -59;
        *(_WORD *)((char *)v19 + 1) = bswap32(v10) >> 16;
      }
      std::ostream::write();
    }
    else
    {
      LOBYTE(v19[0]) = -60;
      BYTE1(v19[0]) = v10;
      std::ostream::write();
    }
    std::ostream::write();
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_207E0F904(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E0C500((uint64_t)v8, a2);
  sub_207E0FA20(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E0FA08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E0FA20(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2081F20F8(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2081F20F8(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_2081F133C(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_207D20660(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_207E10048(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2081F133C(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_207D20660(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_207E10150((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2081F133C(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_207D20660(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2081F25C0(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2081F133C(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_207D20660(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2081F25C0(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2081F133C(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_207D20660(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2081F25C0(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2081F133C(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_207D20660(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_2081F3B8C(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2081F25C0(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_207E0FFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E10000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E10018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E10030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E10048(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_207E0C834((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_207CA9F48();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
  sub_2081F25C0(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_207E1010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E10128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E1013C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E10150(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_2081F17E4(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_2081F20F8(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_2081F20F8(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2081F20F8(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_2081F133C(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = v19;
    sub_207D20660(&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_207E10488(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_207E10458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E10470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E10488(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  uint64_t v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_207E0C834((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_207CA9F48();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24C0765F8[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24C0765E0[v17])(&v19, v15);
    sub_2081F25C0(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = **a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_2081F133C(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = *((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_207D20660(&v16, v10);
    }
  }
}

void sub_207E105DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_207D20660(v13, a13);
  _Unwind_Resume(a1);
}

void sub_207E105F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E10610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E10624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E10638(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C076610[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_207E0DB44((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_207CA9F48();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C0765F8[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C0765E0[v52])(&v48, &v49);
  sub_2081F25C0(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_2081F17E4(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F20F8(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_207E0DDC0((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_207CA9F48();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C0765F8[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C0765E0[v52])(&v48, &v49);
  sub_2081F25C0(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_2081F2BB0(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)off_24C06E878;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)off_24C06E878;
      sub_207F2CBA4((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_207F25230((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_207CA9F48();
  }
  v11 = sub_207F24D0C(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = off_24C06E878;
    sub_207F2CBA4((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = off_24C06E878;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_207E0E02C(&v64, (char *)&v60, v11);
  sub_207E10DD8((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))off_24C076500[v36])(&v49, v38);
}

void sub_207E10C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_207E10DD8((uint64_t)&a24);
  sub_207CA2C88(v24 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E10C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x20BD027B8](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_207CA2C88(v39 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E10CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C88(v9 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E10CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_207E02E04((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E10DD8(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_207C95C50();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = v11;
    v17 = (unsigned __int8 *)sub_2081F133C(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_207D20660(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = (uint64_t)v20;
  sub_2081F1960(v21, (size_t *)&v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_207E11024(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_207D20660(v13, a13);
  sub_207C9CFA4(a1);
}

void sub_207E11040(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E0C500((uint64_t)v8, a2);
  sub_207E1115C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E11144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E1115C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_208208D08(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_207CBAB98(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    sub_208208DC4(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_207E115E4(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_208208D08(a1, (unsigned __int8 *)&__p);
      sub_208208DC4(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_208208D08(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    sub_208208DC4(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_208208D08(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_208208D08(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_208208D08(a1, (unsigned __int8 *)&__p);
  sub_208208DC4(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_207CAB69C(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_207E0CF98(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_208208D08(a1, (unsigned __int8 *)&v25);
  sub_208208DC4(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207E115C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E115E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*(_BYTE *)(a2 + 16))
  {
    v11 = 1;
    sub_208208D08(a1, &v11);
    if (*(_QWORD *)(a1 + 40))
    {
      v4 = *(_QWORD **)(a1 + 24);
      v13 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v4, (uint64_t)&v13, 1);
    }
    std::ostream::operator<<();
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5 + 1;
    if (v5 != -1)
    {
      v6 = *(_QWORD **)(a1 + 24);
      v14 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v6, (uint64_t)&v14, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    v12 = *(_BYTE *)(a2 + 8);
    sub_208208D08(a1, &v12);
    v7 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = *(_QWORD **)(a1 + 24);
      v15 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v8, (uint64_t)&v15, 1);
    }
    v9 = *(_QWORD **)(a1 + 24);
    v16 = v7;
    sub_207CBAB98(v9, (uint64_t)&v16, 1);
    ++*(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    sub_208208D08(a1, &v10);
  }
}

void sub_207E1170C(uint64_t (**a1)(), __int128 *a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  char v14;
  uint64_t (*v15)();
  uint64_t (*v16)();
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  __int128 v43;
  char v44[8];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  unsigned int v52;
  uint64_t (**v53)();
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  std::ios_base v65;
  uint64_t v66;
  int v67;
  uint64_t (**v68)();
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  __int16 v75;

  v43 = *a2;
  v44[0] = 0;
  v52 = -1;
  v3 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, __int128 *))off_24C076610[v3])(&v68, v44, a2 + 2);
    v52 = v3;
  }
  if (a1[5])
  {
    v4 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_207CBAB98(v4, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v5 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v5 + 1);
  if (v5 != (uint64_t (*)())-1)
  {
    v6 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_207CBAB98(v6, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v7 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v7 + 1);
  if (v7 != (uint64_t (*)())-1)
  {
    v8 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_207CBAB98(v8, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v9 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v9 + 1);
  if (v9 != (uint64_t (*)())-1)
  {
    v10 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_207CBAB98(v10, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v11 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v11 + 1);
  if (v11 != (uint64_t (*)())-1)
  {
    v12 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_207CBAB98(v12, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v13 = a1[5];
  v14 = *((_BYTE *)a1 + 34);
  a1[5] = (uint64_t (*)())((char *)v13 + 1);
  if (v13 != (uint64_t (*)())-1)
  {
    v15 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_207CBAB98(v15, (uint64_t)&v53, 1);
  }
  v16 = a1[3];
  LOBYTE(v53) = v14;
  sub_207CBAB98(v16, (uint64_t)&v53, 1);
  a1[5] = (uint64_t (*)())((char *)a1[5] + 1);
  if ((unsigned __int16)v43 == 1)
  {
    if (!v52)
    {
      v53 = off_24C06E878;
      v18 = v45;
      v19 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        v22 = v49;
        v23 = v50;
        v24 = v51;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      else
      {
        v22 = v49;
        v23 = v50;
        v24 = v51;
      }
      v54 = v18;
      v55 = v19;
      v56 = v47;
      v57 = v48;
      v58 = v22;
      v59 = v23;
      v60 = v24;
      if (v19)
      {
        v34 = (unint64_t *)&v19->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_40;
    }
    if (v52 == 1)
    {
      v53 = off_24C06E878;
      sub_207F2CBA4((uint64_t)v44, (uint64_t)&v54);
LABEL_40:
      sub_207F25230(a1, (uint64_t)&v53);
      v36 = v55;
      if (!v55)
        goto LABEL_54;
      v37 = (unint64_t *)&v55->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_53;
    }
LABEL_59:
    sub_207CA9F48();
  }
  v17 = sub_207F24D0C((unsigned __int16)v43);
  if (v52)
  {
    if (v52 != 1)
      goto LABEL_59;
    v68 = off_24C06E878;
    sub_207F2CBA4((uint64_t)v44, (uint64_t)&v69);
  }
  else
  {
    v68 = off_24C06E878;
    v26 = v45;
    v27 = v46;
    if (v46)
    {
      v28 = (unint64_t *)&v46->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = v49;
      v31 = v50;
      v32 = v51;
      do
        v33 = __ldxr(v28);
      while (__stxr(v33 + 1, v28));
    }
    else
    {
      v30 = v49;
      v31 = v50;
      v32 = v51;
    }
    v69 = v26;
    v70 = v27;
    v71 = v47;
    v72 = v48;
    v73 = v30;
    v74 = v31;
    v75 = v32;
    if (v27)
    {
      v39 = (unint64_t *)&v27->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v53 = a1;
  std::streambuf::basic_streambuf();
  v54 = MEMORY[0x24BEDB848] + 16;
  v61 = 0u;
  v62 = 0u;
  v63 = 24;
  v64 = MEMORY[0x24BEDB828] + 24;
  v65.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v65, &v54);
  v66 = 0;
  v67 = -1;
  sub_207E0E02C(&v68, (char *)&v64, v17);
  sub_207E11CEC((uint64_t *)&v53);
  v36 = v70;
  if (!v70)
    goto LABEL_54;
  v41 = (unint64_t *)&v70->__shared_owners_;
  do
    v38 = __ldaxr(v41);
  while (__stlxr(v38 - 1, v41));
LABEL_53:
  if (v38)
  {
LABEL_54:
    v42 = v52;
    if (v52 == -1)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  v42 = v52;
  if (v52 != -1)
LABEL_55:
    ((void (*)(uint64_t (***)(), char *))off_24C076500[v42])(&v53, v44);
}

void sub_207E11BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  sub_207E11CEC(&a22);
  sub_207CA2C88(v22 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E11BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x20BD027B8](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_207CA2C88(v37 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E11C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C88(v9 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E11C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_207E02E04((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_207E11CEC(uint64_t *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  std::string::size_type v16[2];
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_207C95C50();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  if (v19 >= 0)
    v10 = HIBYTE(v19);
  else
    v10 = v18;
  v11 = *a1;
  if (*(_QWORD *)(*a1 + 40))
  {
    v12 = *(_QWORD **)(v11 + 24);
    LOBYTE(v16[0]) = *(_BYTE *)(v11 + 32);
    sub_207CBAB98(v12, (uint64_t)v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(v11 + 40);
  if (SHIBYTE(v19) < 0)
  {
    v13 = __dst;
    if (v10 && !__dst)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v13 = 0;
    }
  }
  else
  {
    v13 = (void **)&__dst;
  }
  v14 = *a1;
  v16[0] = v10;
  v16[1] = (std::string::size_type)v13;
  sub_208209034(v14, v16);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

void sub_207E11EF8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E0C500((uint64_t)v8, a2);
  sub_207E12014(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E11FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_207E12014(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  uint64_t v14;
  char *p_src;
  int64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BOOL4 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  int64_t v33;
  char *v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t __src;
  uint64_t v40;

  v6 = (char *)(a2 + 8);
  LODWORD(__src) = 2;
  v7 = a1 + 24;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_208072A10((_QWORD *)a1);
  sub_207D0B114(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  LOBYTE(__src) = *(_BYTE *)(a2 + 16);
  sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(__src) = 1;
    sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v9 = *(unsigned __int8 *)(a2 + 47);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 32);
    __src = v9;
    sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
    if (*(char *)(a2 + 47) < 0)
    {
      v10 = *(char **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if (!v10)
      {
        if (v11)
        {
          v13 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
          v10 = 0;
          if (v13)
            goto LABEL_57;
        }
      }
    }
    else
    {
      v10 = (char *)(a2 + 24);
      v11 = *(unsigned __int8 *)(a2 + 47);
    }
    result = sub_207D0B114(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
    if (a3 < 4)
      return result;
  }
  else
  {
    LOBYTE(__src) = 0;
    result = sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (a3 < 4)
      return result;
  }
  result = sub_207E12624(a1, (char *)(a2 + 56));
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      LOBYTE(__src) = 1;
      sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v14 = *(unsigned __int8 *)(a2 + 103);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 88);
      __src = v14;
      sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if ((*(char *)(a2 + 103) & 0x80000000) == 0)
      {
        p_src = (char *)(a2 + 80);
        v16 = *(unsigned __int8 *)(a2 + 103);
LABEL_27:
        v21 = *(char **)(a1 + 32);
        v22 = &p_src[v16];
        v23 = v7;
        v24 = v16;
        return sub_207D0B114(v23, v21, p_src, v22, v24);
      }
      p_src = *(char **)(a2 + 80);
      v16 = *(_QWORD *)(a2 + 88);
      if (p_src)
        goto LABEL_27;
      if (!v16)
        goto LABEL_27;
      v20 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
      p_src = 0;
      if (!v20)
        goto LABEL_27;
LABEL_57:
      abort();
    }
LABEL_30:
    LOBYTE(__src) = 0;
    v21 = *(char **)(a1 + 32);
    v22 = (char *)&__src + 1;
    p_src = (char *)&__src;
    v23 = v7;
    v24 = 1;
    return sub_207D0B114(v23, v21, p_src, v22, v24);
  }
  if (a3 < 6)
    return result;
  if (!*(_BYTE *)(a2 + 104))
  {
    LOBYTE(__src) = 0;
    sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_37;
LABEL_29:
    LOBYTE(__src) = 0;
    sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (!*(_BYTE *)(a2 + 168))
      goto LABEL_30;
    goto LABEL_45;
  }
  LOBYTE(__src) = 1;
  sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v17 = *(unsigned __int8 *)(a2 + 103);
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a2 + 88);
  __src = v17;
  sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 103) < 0)
  {
    v18 = *(char **)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 88);
    if (!v18)
    {
      if (v19)
      {
        v25 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
        v18 = 0;
        if (v25)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v18 = (char *)(a2 + 80);
    v19 = *(unsigned __int8 *)(a2 + 103);
  }
  sub_207D0B114(v7, *(char **)(a1 + 32), v18, &v18[v19], v19);
  if (!*(_BYTE *)(a2 + 136))
    goto LABEL_29;
LABEL_37:
  LOBYTE(__src) = 1;
  sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v26 = *(unsigned __int8 *)(a2 + 135);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a2 + 120);
  __src = v26;
  sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 135) < 0)
  {
    v27 = *(char **)(a2 + 112);
    v28 = *(_QWORD *)(a2 + 120);
    if (!v27)
    {
      if (v28)
      {
        v29 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
        v27 = 0;
        if (v29)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v27 = (char *)(a2 + 112);
    v28 = *(unsigned __int8 *)(a2 + 135);
  }
  sub_207D0B114(v7, *(char **)(a1 + 32), v27, &v27[v28], v28);
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_30;
LABEL_45:
  LOBYTE(__src) = 1;
  sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
  result = sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&v38, (char *)&__src, 8);
  v30 = *(_QWORD *)(a2 + 144);
  v31 = *(_QWORD *)(a2 + 152) - v30;
  if (v31)
  {
    for (i = 24 * (v31 / 24); i; i -= 24)
    {
      v35 = *(unsigned __int8 *)(v30 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v30 + 8);
      __src = v35;
      sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if (*(char *)(v30 + 23) < 0)
      {
        v34 = *(char **)v30;
        v33 = *(_QWORD *)(v30 + 8);
        if (*(_QWORD *)v30)
          v36 = 1;
        else
          v36 = v33 == 0;
        if (!v36)
        {
          v37 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
          v34 = 0;
          if (v37)
            goto LABEL_57;
        }
      }
      else
      {
        v33 = *(unsigned __int8 *)(v30 + 23);
        v34 = (char *)v30;
      }
      result = sub_207D0B114(v7, *(char **)(a1 + 32), v34, &v34[v33], v33);
      v30 += 24;
    }
  }
  return result;
}

char *sub_207E12624(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *result;
  uint64_t v6;
  char v7;
  char __src;
  int v9;
  char v10[3];
  char v11;
  uint64_t v12;

  v3 = a1 + 24;
  if (a2[16])
  {
    __src = 1;
    sub_207D0B114(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
    v9 = 2;
    sub_207D0B114(v3, *(char **)(a1 + 32), (char *)&v9, v10, 4);
    sub_208072A10((_QWORD *)a1);
    sub_207D0B114(v3, *(char **)(a1 + 32), a2, a2 + 8, 8);
    v11 = a2[8];
    result = sub_207D0B114(v3, *(char **)(a1 + 32), &v11, (char *)&v12, 1);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    v7 = 0;
    return sub_207D0B114(a1 + 24, *(char **)(a1 + 32), &v7, &__src, 1);
  }
  return result;
}

void sub_207E12748(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _BYTE v31[28];
  char v32[8];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  uint64_t (**__src)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  std::ios_base v53;
  uint64_t v54;
  int v55;
  uint64_t (**v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int16 v63;

  *(_OWORD *)v31 = *(_OWORD *)a2;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a2 + 12);
  v32[0] = 0;
  v40 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C076610[v3])(&v56, v32, a2 + 32);
    v40 = v3;
  }
  LOWORD(__src) = *(_WORD *)v31;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 2, 2);
  LODWORD(__src) = 2;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_208072A10((_QWORD *)a1);
  __src = *(uint64_t (***)())&v31[8];
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v42, 8);
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), &v31[16], &v31[24], 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 10) = *(_QWORD *)(a1 + 32) - v4 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(unsigned __int16 *)v31 == 1)
  {
    if (!v40)
    {
      __src = off_24C06E878;
      v6 = v33;
      v7 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = v37;
        v11 = v38;
        v12 = v39;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      else
      {
        v10 = v37;
        v11 = v38;
        v12 = v39;
      }
      v42 = v6;
      v43 = v7;
      v44 = v35;
      v45 = v36;
      v46 = v10;
      v47 = v11;
      v48 = v12;
      if (v7)
      {
        v22 = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      goto LABEL_28;
    }
    if (v40 == 1)
    {
      __src = off_24C06E878;
      sub_207F2CBA4((uint64_t)v32, (uint64_t)&v42);
LABEL_28:
      sub_207F25230((const void *)a1, (uint64_t)&__src);
      v24 = v43;
      if (!v43)
        goto LABEL_42;
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_41;
    }
LABEL_47:
    sub_207CA9F48();
  }
  v5 = sub_207F24D0C(*(unsigned __int16 *)v31);
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_47;
    v56 = off_24C06E878;
    sub_207F2CBA4((uint64_t)v32, (uint64_t)&v57);
  }
  else
  {
    v56 = off_24C06E878;
    v14 = v33;
    v15 = v34;
    if (v34)
    {
      v16 = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = v37;
      v19 = v38;
      v20 = v39;
      do
        v21 = __ldxr(v16);
      while (__stxr(v21 + 1, v16));
    }
    else
    {
      v18 = v37;
      v19 = v38;
      v20 = v39;
    }
    v57 = v14;
    v58 = v15;
    v59 = v35;
    v60 = v36;
    v61 = v18;
    v62 = v19;
    v63 = v20;
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  __src = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v42 = MEMORY[0x24BEDB848] + 16;
  v49 = 0u;
  v50 = 0u;
  v51 = 24;
  v52 = MEMORY[0x24BEDB828] + 24;
  v53.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v53, &v42);
  v54 = 0;
  v55 = -1;
  sub_207E0E02C(&v56, (char *)&v52, v5);
  sub_207E12C90((uint64_t)&__src);
  v24 = v58;
  if (!v58)
    goto LABEL_42;
  v29 = (unint64_t *)&v58->__shared_owners_;
  do
    v26 = __ldaxr(v29);
  while (__stlxr(v26 - 1, v29));
LABEL_41:
  if (v26)
  {
LABEL_42:
    v30 = v40;
    if (v40 == -1)
      return;
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  v30 = v40;
  if (v40 != -1)
LABEL_43:
    ((void (*)(uint64_t (***)(), char *))off_24C076500[v30])(&__src, v32);
}

void sub_207E12B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  sub_207E12C90((uint64_t)&a22);
  sub_207CA2C88(v22 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E12B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x20BD027B8](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_207CA2C88(v37 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E12BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C88(v9 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E12BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_207E02E04((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E12C90(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  int64_t v12;
  int64_t v14;
  char *__dst;
  size_t v16;
  int64_t v17;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_207C95C50();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v17);
  if (v17 < 0)
    v10 = v16;
  v14 = v10;
  sub_207D0B114(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), (char *)&v14, (char *)&__dst, 8);
  if (SHIBYTE(v17) < 0)
  {
    v12 = v14;
    v11 = __dst;
    if (!__dst && v14)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (char *)&__dst;
    v12 = v14;
  }
  sub_207D0B114(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), v11, &v11[v12], v12);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_207E12E90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E0C500((uint64_t)v8, a2);
  sub_207E12FAC(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E12F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E12FAC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_207E13518((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_207E13518((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20823A149);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_207CAB69C(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_207E0CF98(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20823A149);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20823A149);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_207E134F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E13518(int *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    v6 = *(_QWORD *)a2;
LABEL_6:
    (*(void (**)(_BYTE *, uint64_t))(v6 + 72))(a2, a3);
    v7 = (unsigned __int8 *)(a3 + 8);
    sub_207E1362C(a2, &v7);
    return;
  }
  if (*a1 == 2)
  {
    LODWORD(v7) = 2;
    (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
    v6 = *(_QWORD *)a2;
    if (*a1 < 1)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD *)a2;
  }
  (*(void (**)(_BYTE *))(v6 + 16))(a2);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
  v7 = (unsigned __int8 *)(a3 + 8);
  sub_207E1362C(a2, &v7);
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_207E1362C(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_207E0C834((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_207CA9F48();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_207E13720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E1373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E13750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E13764(int *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _BYTE v31[28];
  char v32[8];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  char v41;
  char *v42;
  uint64_t (**v43)();
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  std::ios_base v55;
  uint64_t v56;
  int v57;
  uint64_t (**v58)();
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  __int16 v65;

  *(_OWORD *)v31 = *(_OWORD *)a2;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a2 + 12);
  v32[0] = 0;
  v40 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C076610[v3])(&v58, v32, a2 + 32);
    v40 = v3;
  }
  if ((a1[3] & 2) != 0)
  {
    LODWORD(v46) = 0;
    sub_207E0DB44((uint64_t)&v42, (uint64_t)&v43, (unsigned __int16 *)v31);
    if ((_DWORD)v46 == -1)
      sub_207CA9F48();
    v42 = &v41;
    ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t (***)()))off_24C0765F8[v46])(&v58, &v42, &v43);
    if ((_DWORD)v46 != -1)
      ((void (*)(char **, uint64_t (***)()))off_24C0765E0[v46])(&v42, &v43);
    (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 144))(a1, &v58);
    if (SHIBYTE(v60) < 0)
      operator delete(v58);
  }
  else
  {
    LOWORD(v43) = *(_WORD *)v31;
    (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 96))(a1, &v43);
  }
  v4 = a1[2];
  LODWORD(v43) = 2;
  (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v43);
  if (v4 < 1)
  {
    sub_207E13DE0(a1, (uint64_t *)&v31[8]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[16]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[20]);
  }
  else
  {
    if (v4 == 2)
    {
      LODWORD(v43) = 2;
      (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v43);
    }
    (*(void (**)(int *))(*(_QWORD *)a1 + 16))(a1);
    sub_207E13DE0(a1, (uint64_t *)&v31[8]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[16]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[20]);
    (*(void (**)(int *))(*(_QWORD *)a1 + 24))(a1);
  }
  if (*(unsigned __int16 *)v31 == 1)
  {
    if (!v40)
    {
      v43 = off_24C06E878;
      v6 = v33;
      v7 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = v37;
        v11 = v38;
        v12 = v39;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      else
      {
        v10 = v37;
        v11 = v38;
        v12 = v39;
      }
      v44 = v6;
      v45 = v7;
      v46 = v35;
      v47 = v36;
      v48 = v10;
      v49 = v11;
      v50 = v12;
      if (v7)
      {
        v22 = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      goto LABEL_40;
    }
    if (v40 == 1)
    {
      v43 = off_24C06E878;
      sub_207F2CBA4((uint64_t)v32, (uint64_t)&v44);
LABEL_40:
      sub_207F25230(a1, (uint64_t)&v43);
      v24 = v45;
      if (!v45)
        goto LABEL_54;
      v25 = (unint64_t *)&v45->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_53;
    }
LABEL_60:
    sub_207CA9F48();
  }
  v5 = sub_207F24D0C(*(unsigned __int16 *)v31);
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_60;
    v58 = off_24C06E878;
    sub_207F2CBA4((uint64_t)v32, (uint64_t)&v59);
  }
  else
  {
    v58 = off_24C06E878;
    v14 = v33;
    v15 = v34;
    if (v34)
    {
      v16 = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = v37;
      v19 = v38;
      v20 = v39;
      do
        v21 = __ldxr(v16);
      while (__stxr(v21 + 1, v16));
    }
    else
    {
      v18 = v37;
      v19 = v38;
      v20 = v39;
    }
    v59 = v14;
    v60 = v15;
    v61 = v35;
    v62 = v36;
    v63 = v18;
    v64 = v19;
    v65 = v20;
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v43 = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v44 = MEMORY[0x24BEDB848] + 16;
  v51 = 0u;
  v52 = 0u;
  v53 = 24;
  v54 = MEMORY[0x24BEDB828] + 24;
  v55.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v55, &v44);
  v56 = 0;
  v57 = -1;
  sub_207E0E02C(&v58, (char *)&v54, v5);
  sub_207E13F14(&v43);
  v24 = v60;
  if (!v60)
    goto LABEL_54;
  v29 = (unint64_t *)&v60->__shared_owners_;
  do
    v26 = __ldaxr(v29);
  while (__stlxr(v26 - 1, v29));
LABEL_53:
  if (v26)
  {
LABEL_54:
    v30 = v40;
    if (v40 == -1)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  v30 = v40;
  if (v40 != -1)
LABEL_55:
    ((void (*)(uint64_t (***)(), char *))off_24C076500[v30])(&v43, v32);
}

void sub_207E13C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  sub_207E13F14(&a24);
  sub_207CA2C88(v24 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E13CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x20BD027B8](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_207CA2C88(v39 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E13CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_207CA2C88(v9 - 120);
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E13D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_207E02E04((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_207E02E04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E13DE0(_BYTE *a1, uint64_t *a2)
{
  void *__p[2];
  char v4;
  _QWORD v5[3];
  int v6;
  char v7;
  char *v8;

  if ((a1[12] & 2) != 0)
  {
    v6 = 0;
    sub_207E0DDC0((uint64_t)&v8, (uint64_t)v5, a2);
    if (v6 == -1)
      sub_207CA9F48();
    v8 = &v7;
    ((void (*)(void **__return_ptr, char **, _QWORD *))off_24C0765F8[v6])(__p, &v8, v5);
    if (v6 != -1)
      ((void (*)(char **, _QWORD *))off_24C0765E0[v6])(&v8, v5);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5[0] = *a2;
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)a1 + 120))(a1, v5);
  }
}

void sub_207E13ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E13EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E13F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E13F14(_QWORD *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  size_t v12;
  uint64_t v13;
  _QWORD v15[2];
  size_t v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_207C95C50();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v19);
  if (v19 < 0)
    v10 = v18;
  v16 = v10;
  (*(void (**)(_QWORD, size_t *))(*(_QWORD *)*a1 + 120))(*a1, &v16);
  if (SHIBYTE(v19) < 0)
  {
    v12 = v16;
    v11 = __dst;
    if (!__dst && v16)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (void **)&__dst;
    v12 = v16;
  }
  v13 = *a1;
  v15[0] = v12;
  v15[1] = v11;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 272))(v13, v15);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

uint64_t sub_207E14108(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5F4C(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20809778C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_207E14204((uint64_t)&v11, a1, a2, v6);
  else
    sub_207E143F4(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_207E14204(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_207E158A4(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_207CA40D8(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_207E15690(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_207E143B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_207E143F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5F4C(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_20809778C(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_207E148D4(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_207E14BEC((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_207E14BEC((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2081F6204((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_2081F6204((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_207E14D0C((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E14BEC((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E14BEC((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E14BEC((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E153F8((uint64_t *)a1, a2 + 144);
  }
}

void sub_207E146B4(char *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  size_t v4;
  char *v5;
  _BYTE *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int v18;
  std::string v19;

  v3 = a1[23] < 0;
  if (a1[23] >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  if (a1[23] >= 0)
    v5 = a1;
  else
    v5 = *(char **)a1;
  if (!v4 || ((v7 = memchr(v5, 92, v4)) != 0 ? (v8 = v7 - v5 == -1) : (v8 = 1), v8))
  {
    sub_207CF75E4(v5, v4, ";", 1, 1, a2);
    return;
  }
  v9 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(&v19, 0, sizeof(v19));
  do
  {
    v11 = *(char **)a1;
    if (!v3)
      v11 = a1;
    v12 = v11[v9];
    if (v12 == 59)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if (v13 >= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 8) = sub_207CC08D4((char **)a2, (uint64_t)&v19);
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
      }
      else
      {
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_207CA40D8(*(_BYTE **)(a2 + 8), v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a2 + 8) = v13 + 24;
        *(_QWORD *)(a2 + 8) = v13 + 24;
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_27:
          *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
          v19.__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_17;
        }
      }
      v19.__r_.__value_.__l.__size_ = 0;
      *v19.__r_.__value_.__l.__data_ = 0;
    }
    else
    {
      if (v12 == 92)
        ++v9;
      std::string::push_back(&v19, v11[v9]);
    }
LABEL_17:
    ++v9;
    v3 = a1[23] < 0;
    v10 = a1[23];
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)a1 + 1);
  }
  while (v9 < v10);
  v15 = *(_QWORD *)(a2 + 8);
  if (v15 >= *(_QWORD *)(a2 + 16))
  {
    v17 = sub_207CA4674((void **)a2, (uint64_t)&v19);
    v18 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a2 + 8) = v17;
    if (v18 < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
    *(_OWORD *)v15 = v16;
    *(_QWORD *)(a2 + 8) = v15 + 24;
  }
}

void sub_207E148A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  sub_207C99DE0(v15);
  _Unwind_Resume(a1);
}

void sub_207E148D4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2080978D4(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_207E14A2C((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2080978D4(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_207E14A2C((uint64_t *)a1, &v13);
  }
}

void sub_207E14A2C(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F6204(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_208097C8C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_208208160((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E14B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E14BEC(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_2081F6204(a1))
  {
    v4 = (void **)sub_2081F6204(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_208097C8C(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_207E14CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E14D0C(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_2081F5F4C(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_20809778C(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2081F6204((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_20809778C(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_207E14E7C();
        sub_208212838((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_207E15078(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

__int128 *sub_207E14E7C()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C0D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C0D0))
    return &xmmword_25452C0B8;
  v2 = (char *)sub_207E14F58();
  if (v2[23] < 0)
  {
    sub_207CA40D8(&xmmword_25452C0B8, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25452C0C8 = *((_QWORD *)v2 + 2);
    xmmword_25452C0B8 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C0B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C0D0);
  return &xmmword_25452C0B8;
}

void sub_207E14F40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C0D0);
  _Unwind_Resume(a1);
}

void *sub_207E14F58()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C0F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25452C0F0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::timeio::TimestampSample]", qword_25452C0D8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C0D8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C0F0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25452C110);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C110))
    return &unk_25452C0F8;
  sub_208215C6C((uint64_t)qword_25452C0D8, (uint64_t)&unk_25452C0F8);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25452C0F8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C110);
  return &unk_25452C0F8;
}

void sub_207E15048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C110);
  _Unwind_Resume(a1);
}

void sub_207E15060(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C0F0);
  _Unwind_Resume(a1);
}

void sub_207E15078(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2080978D4(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_207E151D0(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2080978D4(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_207E151D0(a1, &v13);
  }
}

void sub_207E151D0(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_208097C8C(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = (char *)operator new(0x118uLL);
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_208215780((uint64_t)v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_208208160((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)&v9[*(_QWORD *)(v13 - 24)] = *(_QWORD *)(v12 + 64);
    *((_QWORD *)v9 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v9 + 2) = v14;
    if (v9[111] < 0)
      operator delete(*((void **)v9 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v9 + 128);
    operator delete(v9);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_20809778C(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C08F078;
      __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_207E1537C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E153F8(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_2081F6204(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (unsigned __int8 *)sub_2081F6204(a1);
    ++a1[14];
    sub_2081F77EC((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_207E15540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  _Unwind_Resume(a1);
}

void sub_207E15554(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v5 = *(void ***)(a1 + 8);
        v6 = *(void ***)a1;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0)
              operator delete(*(v5 - 3));
            v5 -= 3;
          }
          while (v5 != v4);
          v6 = *(void ***)a1;
        }
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v6);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v8 = *(void ***)(a1 + 8);
      v9 = *(void ***)a1;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

uint64_t sub_207E15690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a1 + 24;
  v6 = (__int128 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0)
        operator delete(*(void **)v5);
      v7 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v7;
      *(_BYTE *)(a2 + 47) = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v5);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v8 = *v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v9 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = (void **)(a1 + 80);
  v11 = (__int128 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
  {
    if (!*(_BYTE *)(a1 + 104))
    {
      v17 = *v11;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)v10 = v17;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(a1 + 104) = 1;
      v13 = a1 + 112;
      v14 = (__int128 *)(a2 + 112);
      v15 = *(unsigned __int8 *)(a1 + 136);
      if (v15 == *(unsigned __int8 *)(a2 + 136))
        goto LABEL_22;
LABEL_27:
      if (v15)
      {
        if (*(char *)(a1 + 135) < 0)
          operator delete(*(void **)v13);
        *(_BYTE *)(a1 + 136) = 0;
      }
      else
      {
        v18 = *v14;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v13 = v18;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *(_QWORD *)v14 = 0;
        *(_BYTE *)(a1 + 136) = 1;
      }
      goto LABEL_32;
    }
    if (*(char *)(a1 + 103) < 0)
      operator delete(*v10);
    *(_BYTE *)(a1 + 104) = 0;
LABEL_21:
    v13 = a1 + 112;
    v14 = (__int128 *)(a2 + 112);
    v15 = *(unsigned __int8 *)(a1 + 136);
    if (v15 == *(unsigned __int8 *)(a2 + 136))
      goto LABEL_22;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_21;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v10);
  v12 = *v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)v10 = v12;
  *(_BYTE *)(a2 + 103) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  v13 = a1 + 112;
  v14 = (__int128 *)(a2 + 112);
  v15 = *(unsigned __int8 *)(a1 + 136);
  if (v15 != *(unsigned __int8 *)(a2 + 136))
    goto LABEL_27;
LABEL_22:
  if (v15)
  {
    if (*(char *)(a1 + 135) < 0)
      operator delete(*(void **)v13);
    v16 = *v14;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v13 = v16;
    *(_BYTE *)(a2 + 135) = 0;
    *(_BYTE *)(a2 + 112) = 0;
  }
LABEL_32:
  sub_207E15554(a1 + 144, a2 + 144);
  return a1;
}

void sub_207E158A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5F4C(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_20809778C(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_207E148D4(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E14BEC((uint64_t *)a1, a2 + 24);
  }
}

uint64_t sub_207E159E0(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  double v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  double v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *exception;
  _QWORD *v60;
  _BYTE v61[24];
  __int128 v62;
  _BYTE v63[32];
  _BYTE v64[22];
  unsigned int v65;
  char v66;
  _BYTE v67[40];
  _BYTE v68[22];
  void *__p;
  char v70;
  int v71;
  _QWORD v72[21];
  unsigned __int16 *v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[22];
  char v77;

  sub_2081F5F4C(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v67 = 0;
  sub_20809778C(v5, v67);
  if (HIDWORD(*(_QWORD *)v67))
    goto LABEL_100;
  if (*(_DWORD *)v67 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v67;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v67 = a2;
    sub_207E16534((uint64_t *)a1, (_WORD **)v67);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_2081F5F4C(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5F4C(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v43)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v67 = 0;
    sub_20809778C(v10, v67);
    if (!HIDWORD(*(_QWORD *)v67))
    {
      if (*(_DWORD *)v67 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v67;
      if (v11 < 2)
      {
        *(_OWORD *)v61 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = v61;
        sub_207E166F4((uint64_t *)a1, (_QWORD **)v67);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = 2;
        *(_QWORD *)&v67[8] = &v61[8];
        v29 = (char *)sub_2081F6204((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_2081F71F0(v29, (uint64_t)v67);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v61;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = a2 + 4;
        sub_207E166F4((uint64_t *)a1, (_QWORD **)v67);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = 2;
        *(_QWORD *)&v67[8] = a2 + 8;
        v14 = (char *)sub_2081F6204((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_2081F71F0(v14, (uint64_t)v67);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_2081F5F4C(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_207F2245C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24C07B518[v33])(v61, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C0736D0;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v67[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v67[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v68;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v68[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_207F24EC8((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_2081F5F4C(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v44 = sub_207F24D0C(v32);
      sub_207E176E8((uint64_t)v67, (uint64_t *)a1);
      v45 = sub_207E168B0((uint64_t)v61, v72, v44);
      v46 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v46 != -1)
      {
        if ((_DWORD)v46 == 1)
        {
          v47 = *(_OWORD *)&v61[8];
          *(_QWORD *)&v61[8] = 0;
          *(_QWORD *)&v61[16] = 0;
          v48 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v47;
          if (v48)
          {
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(p_shared_owners);
            while (__stlxr(v50 - 1, p_shared_owners));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          *(_OWORD *)(a2 + 28) = v62;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
          v51 = *(std::__shared_weak_count **)&v61[16];
          if (*(_QWORD *)&v61[16])
          {
            v52 = (unint64_t *)(*(_QWORD *)&v61[16] + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *, double))off_24C076500[v46])(&v73, a2 + 16, v45);
      }
      *((_QWORD *)a2 + 4) = &off_24C0736D0;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v61[8];
      *(_OWORD *)(a2 + 28) = v62;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v67 = MEMORY[0x24BEDB848] + 16;
      if (v70 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v67 = &off_24C0736D0;
  sub_207E16F34((uint64_t)&v67[8]);
  sub_207F225F0((uint64_t)v61, (uint64_t)v67, 0);
  v15 = *(std::__shared_weak_count **)&v67[16];
  if (*(_QWORD *)&v67[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v67[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v62) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v67 = v61;
  sub_207E16534((uint64_t *)a1, (_WORD **)v67);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5F4C(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v67 = 0;
  sub_20809778C(v21, v67);
  if (*(_DWORD *)&v67[4])
  {
    v60 = __cxa_allocate_exception(8uLL);
    *v60 = &off_24C08F078;
    __cxa_throw(v60, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v67 = &v61[8];
  sub_207E166F4((uint64_t *)a1, (_QWORD **)v67);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v67 = 2;
  *(_QWORD *)&v67[8] = &v61[16];
  v24 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2081F71F0(v24, (uint64_t)v67);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5F4C(a1);
  if (*(unsigned __int16 *)v61 != 1)
  {
    v34 = sub_207F24D0C(*(unsigned __int16 *)v61);
    sub_207E176E8((uint64_t)v67, (uint64_t *)a1);
    v35 = sub_207E168B0((uint64_t)&v73, v72, v34);
    if (v65 != -1)
    {
      if (v65 == 1)
      {
        v36 = v74;
        v74 = 0uLL;
        v37 = *(std::__shared_weak_count **)&v63[8];
        *(_OWORD *)v63 = v36;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        *(_OWORD *)&v63[16] = v75;
        *(_OWORD *)v64 = *(_OWORD *)v76;
        *(_QWORD *)&v64[14] = *(_QWORD *)&v76[14];
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *, double))off_24C076500[v65])(&v77, (char *)&v62 + 8, v35);
    }
    *((_QWORD *)&v62 + 1) = &off_24C0736D0;
    *(_OWORD *)v63 = v74;
    *(_OWORD *)&v63[16] = v75;
    *(_OWORD *)v64 = *(_OWORD *)v76;
    *(_QWORD *)&v64[14] = *(_QWORD *)&v76[14];
    v65 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v67 = MEMORY[0x24BEDB848] + 16;
    if (v70 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_207F222C8((uint64_t *)&v61[8], v62);
  if (v65 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24C07B518[v65])(&v73, (char *)&v62 + 8);
  *((_QWORD *)&v62 + 1) = &off_24C0736D0;
  *(_OWORD *)v63 = *(_OWORD *)&v67[8];
  *(_OWORD *)&v63[16] = *(_OWORD *)&v67[24];
  *(_OWORD *)v64 = *(_OWORD *)v68;
  *(_QWORD *)&v64[14] = *(_QWORD *)&v68[14];
  v65 = 1;
  sub_207F24EC8((const void *)a1, (uint64_t)&v62 + 8);
LABEL_91:
  *(_WORD *)v67 = *(_WORD *)v61;
  *(_OWORD *)&v67[8] = *(_OWORD *)&v61[8];
  v54 = v65;
  *(_DWORD *)&v67[24] = v62;
  v67[32] = 0;
  v71 = -1;
  if (v65 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v67;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v67[12];
    v55 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v55 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24C076500[v55])(&v73, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24C0766B0[v65])(&v66, &v67[32], (char *)&v62 + 8);
    v71 = v54;
    *(_OWORD *)a2 = *(_OWORD *)v67;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v67[12];
    v73 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24C0766C0[v54])(&v73);
  }
  if (v71 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24C076500[v71])(&v73, &v67[32]);
  if (v65 != -1)
    ((void (*)(_BYTE *, char *))off_24C076500[v65])(v67, (char *)&v62 + 8);
LABEL_99:
  v56 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v56 - 8);
  v57 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v57 - 8);
  *(_QWORD *)(a1 + 48) = v56 - 8;
  *(_QWORD *)(a1 + 72) = v57 - 8;
  return a1;
}

void sub_207E163DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C076500[a21])(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_207E16534(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F6204(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_208097C8C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_207F24118((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E16678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E166F4(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F6204(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_208097C8C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_207F24784((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E16834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_207E168B0(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  double result;
  unint64_t v16;
  _BYTE *v17;
  int v18;
  _BYTE *v19;
  int v20;
  std::runtime_error *v21;
  _QWORD *exception;
  _BYTE v23[40];
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t (**v44)();
  _OWORD v45[2];
  _BYTE v46[22];
  void *v47;
  char v48;
  __int128 v49;
  __int128 v50;
  char v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  char v57;
  char v58;
  __int128 v59;
  void *__p;
  char v61;
  unsigned __int8 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char v68;
  char v69;
  std::string v70;
  char v71;
  unsigned __int8 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  int v81;
  _QWORD v82[2];
  _QWORD v83[3];
  _QWORD *v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v44 = &off_24C0736D0;
  sub_207E16F34((uint64_t)v45);
  v83[0] = &off_24C076630;
  v83[1] = &v44;
  v84 = v83;
  sub_207F151F4(v83, 0, a2, a3, (uint64_t)&v70);
  v6 = v84;
  if (v84 == v83)
  {
    v7 = 4;
    v6 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v80)
  {
    *(_QWORD *)v23 = &off_24C0736D0;
    *(_OWORD *)&v23[8] = v45[0];
    v45[0] = 0uLL;
    *(_OWORD *)&v23[24] = v45[1];
    *(_OWORD *)v24 = *(_OWORD *)v46;
    *(_QWORD *)&v24[14] = *(_QWORD *)&v46[14];
    v31 = 1;
    goto LABEL_8;
  }
  v82[0] = "load";
  v82[1] = 4;
  v81 = a3;
  sub_207F15AB0("Failure during ", (uint64_t)v82, (uint64_t)" from stream with file format ", &v81, (uint64_t)": ");
  if (v80)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C072430;
    __cxa_throw(exception, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
  }
  sub_208213E48(&v47, (__int128 *)&v70, (uint64_t)&v49);
  v59 = v49;
  v17 = sub_207CCB3BC(&__p, &v50);
  v32 = v59;
  LOBYTE(v33) = 0;
  v42 = 0;
  if (!v69)
  {
    v43 = 0;
    if (!v58)
      goto LABEL_43;
    goto LABEL_35;
  }
  v35 = 0;
  v18 = v62;
  if (v62)
  {
    v33 = *(_OWORD *)v17;
    v34 = *((_QWORD *)v17 + 2);
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *(_QWORD *)v17 = 0;
    v35 = 1;
  }
  LOBYTE(v36) = 0;
  v41 = 0;
  if (v68)
  {
    v37 = v64;
    v36 = v63;
    v63 = 0uLL;
    v38 = v65;
    *(_OWORD *)v39 = v66;
    v40 = v67;
    v64 = 0;
    v66 = 0uLL;
    v67 = 0;
    v41 = 1;
  }
  v42 = 1;
  v43 = 0;
  if (v18 && v61 < 0)
    operator delete(__p);
  if (v58)
  {
LABEL_35:
    if (v57)
    {
      if (v56 < 0)
        operator delete(v55);
      if (v54 < 0)
        operator delete(v53);
    }
    if (v52 && v51 < 0)
      operator delete((void *)v50);
  }
LABEL_43:
  if (v48 < 0)
  {
    operator delete(v47);
    if (!v80)
      goto LABEL_47;
  }
  else if (!v80)
  {
LABEL_47:
    if (v79)
    {
      if (v78)
      {
        if (SHIBYTE(v77) < 0)
          operator delete((void *)v76);
        if (SHIBYTE(v74) < 0)
          operator delete((void *)v73);
      }
      if (v72 && v71 < 0)
        operator delete((void *)v70.__r_.__value_.__r.__words[2]);
    }
  }
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v32;
  v19 = sub_207CCB3BC(&v70.__r_.__value_.__s.__data_[16], &v33);
  *(_OWORD *)v23 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
  v23[16] = 0;
  v30 = 0;
  if (v79)
  {
    v24[0] = 0;
    v20 = v72;
    if (v72)
    {
      *(_OWORD *)&v23[16] = *(_OWORD *)v19;
      *(_QWORD *)&v23[32] = *((_QWORD *)v19 + 2);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = 0;
      v24[0] = 1;
    }
    v24[8] = 0;
    v29 = 0;
    if (v78)
    {
      v25 = v74;
      *(_OWORD *)&v24[8] = v73;
      v73 = 0uLL;
      v26 = v75;
      v27 = v76;
      v28 = v77;
      v74 = 0;
      v76 = 0uLL;
      v77 = 0;
      v29 = 1;
    }
    v30 = 1;
    v31 = 0;
    if (v20 && v71 < 0)
      operator delete((void *)v70.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v31 = 0;
  }
  if (!v43 && v42)
  {
    if (v41)
    {
      if (SHIBYTE(v40) < 0)
        operator delete(v39[0]);
      if (SHIBYTE(v37) < 0)
        operator delete((void *)v36);
    }
    if (v35 && SHIBYTE(v34) < 0)
      operator delete((void *)v33);
  }
LABEL_8:
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v45[0] + 1);
  if (*((_QWORD *)&v45[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v45[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!v31)
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_207E0E368((uint64_t)v23);
    sub_208212E0C((uint64_t)v23, &v70);
    std::runtime_error::runtime_error(v21, &v70);
    __cxa_throw(v21, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v11 = *(_QWORD *)&v23[8];
  v12 = *(std::__shared_weak_count **)&v23[16];
  *(_QWORD *)a1 = &off_24C0736D0;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v23[24];
    result = *(double *)v24;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v24;
    *(_QWORD *)(a1 + 54) = *(_QWORD *)&v24[14];
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v23[24];
    result = *(double *)v24;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v24;
    *(_QWORD *)(a1 + 54) = *(_QWORD *)&v24[14];
  }
  return result;
}

void sub_207E16E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  void *v55;
  int v56;
  uint64_t v57;

  if (*(char *)(v57 - 233) < 0)
  {
    operator delete(*(void **)(v57 - 256));
    if ((v56 & 1) == 0)
    {
LABEL_6:
      sub_207E1760C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v56)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v55);
  goto LABEL_6;
}

void sub_207E16EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;

  v44 = *(_QWORD **)(v42 - 80);
  if (v44 == v41)
  {
    v45 = 4;
    v44 = (_QWORD *)(v42 - 104);
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_6:
  sub_207D56DC0((uint64_t)&a41);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E16F34@<X0>(uint64_t a1@<X8>)
{
  size_t v2;
  size_t v3;
  size_t v4;
  char *v5;
  _QWORD *result;
  __int128 v7;
  __int128 v8;
  _BYTE v9[28];
  size_t v10[3];
  __int128 v11;
  char v12;
  uint64_t v13;
  void *v14;

  v12 = 0;
  v9[24] = 0;
  memset(v9, 0, 17);
  v13 = 0;
  v14 = 0;
  sub_2081B2964(v10, &v13, &v14, 1, (void **)&v12, 1, 0);
  v8 = 0uLL;
  HIDWORD(v8) = (unsigned __int128)0 >> 96;
  v3 = v10[0];
  v2 = v10[1];
  v4 = v10[2];
  v7 = v11;
  v5 = (char *)operator new(0x50uLL);
  *(_QWORD *)v5 = &off_24C075360;
  *(_OWORD *)(v5 + 8) = v8;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v9[12];
  *((_QWORD *)v5 + 5) = v3;
  *((_QWORD *)v5 + 6) = v2;
  *((_QWORD *)v5 + 7) = v4;
  *((_OWORD *)v5 + 4) = v7;
  result = operator new(0x20uLL);
  *result = &off_24C073880;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  *(_WORD *)(a1 + 52) = 0;
  return result;
}

void sub_207E1702C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20818B594(v1);
  _Unwind_Resume(a1);
}

void sub_207E17040(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207E17060(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C076630;
  result[1] = v3;
  return result;
}

uint64_t sub_207E17094(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C076630;
  a2[1] = v2;
  return result;
}

double sub_207E170B0@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  double result;
  __int128 v33;
  _BYTE v34[38];
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  char v39;
  uint64_t *v40;
  _DWORD *v41;
  uint64_t *v42;

  v7 = *a3;
  if (!*a3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/ImageIO/include/Kit/ImageIO/ImageIO.h", 387, (uint64_t)"format != img::Format::Dynamic", 30, (uint64_t)"loader must specify the format to load as", 41, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v8 + 32) != *a2
    || (*(_DWORD *)(v8 + 56) == v7 ? (v9 = *(_DWORD *)(v8 + 36) == a2[1]) : (v9 = 0), !v9))
  {
    if (v7)
    {
      v11 = *(_QWORD *)(v8 + 8);
      v10 = *(std::__shared_weak_count **)(v8 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v35 = v11;
      v36 = v10;
      v40 = &v35;
      v41 = a2;
      v42 = &v37;
      sub_20817FE20(v7);
      v14 = v36;
      if (!v36)
        goto LABEL_24;
      v15 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
    }
    else
    {
      v18 = *(_QWORD *)(v8 + 8);
      v17 = *(std::__shared_weak_count **)(v8 + 16);
      if (v17)
      {
        v19 = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v37 = v18;
      v38 = v17;
      v21 = *(_DWORD *)(v8 + 56);
      v40 = &v37;
      v41 = a2;
      v42 = (uint64_t *)&v39;
      sub_20817FE20(v21);
      v14 = v38;
      if (!v38)
        goto LABEL_24;
      v22 = (unint64_t *)&v38->__shared_owners_;
      do
        v16 = __ldaxr(v22);
      while (__stlxr(v16 - 1, v22));
    }
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_24:
    v23 = *(_QWORD *)(a1 + 8);
    v24 = v33;
    v33 = 0uLL;
    v25 = *(std::__shared_weak_count **)(v23 + 16);
    *(_OWORD *)(v23 + 8) = v24;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = *(_OWORD *)v34;
    v29 = *(_OWORD *)&v34[16];
    *(_QWORD *)(v23 + 54) = *(_QWORD *)&v34[30];
    *(_OWORD *)(v23 + 40) = v29;
    *(_OWORD *)(v23 + 24) = v28;
    if (*((_QWORD *)&v33 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v33 + 1) + 16))(*((_QWORD *)&v33 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
      }
    }
    v8 = *(_QWORD *)(a1 + 8);
  }
  sub_207E173DC(v8, (uint64_t)&v33);
  *(_QWORD *)a4 = off_24C06F140;
  *(_OWORD *)(a4 + 8) = v33;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v34;
  result = *(double *)&v34[14];
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v34[14];
  *(_BYTE *)(a4 + 120) = 1;
  return result;
}

void sub_207E1731C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count **v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *v1;
  if (*v1)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E17364(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207E173D0()
{
  return &unk_24C0766A0;
}

void sub_207E173DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  if (v4)
  {
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v14 & 0xFFFFFFu) <= 0x10000)
      v15 = 0;
    else
      v15 = v14;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    v3 = v24;
    *(_WORD *)(a2 + 44) = v16 & 0xFF00 | v15;
    if (!v24)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v19 = v25;
    if (!v25)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v19 = v25;
  if (!v25)
    return;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_207E175B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_207E1760C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_207E176E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2081F6204(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_20809778C(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2081F6204(a2);
  ++a2[14];
  sub_2081F631C(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_207CC2D08(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_207E17884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_207E0E3A8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_207E178F0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C076500[v2])(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

__n128 sub_207E17948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = off_24C06E878;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_207E17974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C0736D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  v4 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v4;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_207E179A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24C076500[v5])(&v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = off_24C06E878;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    *(_OWORD *)(v4 + 38) = *(_OWORD *)(a3 + 38);
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 0;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_207E17AA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24C076500[v5])(&v14, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = &off_24C0736D0;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    v13 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(v4 + 54) = *(_QWORD *)(a3 + 54);
    *(_OWORD *)(v4 + 40) = v13;
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 1;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  v12 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v12;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_207E17BB8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 6;
  sub_20820BA20(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_207E17CA8(a2 + 2);
  if (v5 >= 6)
    v6 = 6;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_207E17DF0((uint64_t)&v10, a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_207E1804C(a2, a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

void sub_207E17CA8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;

  v16 = 0;
  sub_20820BBEC(a1[4], &v16);
  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v3 = v2;
  v4 = v16;
  v6 = (uint64_t *)a1[2];
  v5 = a1[3];
  if ((unint64_t)v6 < v5)
  {
    *v6 = v2;
    v6[1] = v4;
    v7 = (uint64_t)(v6 + 2);
    goto LABEL_18;
  }
  v8 = (uint64_t *)a1[1];
  v9 = ((char *)v6 - (char *)v8) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_207CA420C();
  v11 = v5 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_207CA3AB8();
    v13 = (char *)operator new(16 * v12);
    v14 = (uint64_t *)&v13[16 * v9];
    v15 = &v13[16 * v12];
    *v14 = v3;
    v14[1] = v4;
    v7 = (uint64_t)(v14 + 2);
    if (v6 == v8)
      goto LABEL_16;
    goto LABEL_14;
  }
  v14 = (uint64_t *)(16 * v9);
  v15 = 0;
  *v14 = v2;
  v14[1] = v4;
  v7 = 16 * v9 + 16;
  if (v6 != v8)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
      v14 -= 2;
      v6 -= 2;
    }
    while (v6 != v8);
    v6 = (uint64_t *)a1[1];
  }
LABEL_16:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_18:
  a1[2] = v7;
}

void sub_207E17DF0(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  char v10[8];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void **v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  sub_207E1832C((uint64_t)v10, a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    v10[0] = 0;
    sub_20820B6F8(a2[6], v10);
    if (v10[0])
    {
      if (!v29)
      {
        v27 = 0uLL;
        v28 = 0;
        v29 = 1;
      }
      sub_20820C000(a2[6], (void **)&v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v29 = 0;
    }
  }
  v11 = v26;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_207CA40D8(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      v12 = v27;
      v13 = v28;
    }
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v22 = 0;
  LOBYTE(__p) = 0;
  v25 = 0;
  sub_207E15690(a3, (uint64_t)v10);
  if (v25)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v24;
      v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0)
    operator delete(v20);
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
}

void sub_207E18008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_207E1804C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  sub_207E1832C((uint64_t)&v14, a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  v15 = 0;
  sub_20820B6F8(a1[6], &v15);
  if (v15)
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    sub_20820C000(a1[6], (void **)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    v16 = 0;
    sub_20820B6F8(a1[6], &v16);
    if (v16)
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      sub_207E1832C((uint64_t)&v17, a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      v18 = 0;
      sub_20820B6F8(a1[6], &v18);
      if (v18)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_20820C000(a1[6], (void **)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      v19 = 0;
      sub_20820B6F8(a1[6], &v19);
      if (v19)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v8 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_20820C000(a1[6], (void **)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v8);
        *(_BYTE *)(a2 + 104) = 0;
      }
      v9 = (void **)(a2 + 112);
      v20 = 0;
      sub_20820B6F8(a1[6], &v20);
      if (v20)
      {
        if (!*(_BYTE *)(a2 + 136))
        {
          *v9 = 0;
          *(_QWORD *)(a2 + 120) = 0;
          *(_QWORD *)(a2 + 128) = 0;
          *(_BYTE *)(a2 + 136) = 1;
        }
        sub_20820C000(a1[6], (void **)(a2 + 112));
      }
      else if (*(_BYTE *)(a2 + 136))
      {
        if (*(char *)(a2 + 135) < 0)
          operator delete(*v9);
        *(_BYTE *)(a2 + 136) = 0;
      }
      v10 = (void **)(a2 + 144);
      v21 = 0;
      sub_20820B6F8(a1[6], &v21);
      if (v21)
      {
        if (!*(_BYTE *)(a2 + 168))
        {
          *v10 = 0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 160) = 0;
          *(_BYTE *)(a2 + 168) = 1;
        }
        sub_207E18434((uint64_t)a1, (char **)(a2 + 144));
      }
      else if (*(_BYTE *)(a2 + 168))
      {
        v11 = (void **)*v10;
        if (*v10)
        {
          v12 = *(void ***)(a2 + 152);
          v13 = *v10;
          if (v12 != v11)
          {
            do
            {
              if (*((char *)v12 - 1) < 0)
                operator delete(*(v12 - 3));
              v12 -= 3;
            }
            while (v12 != v11);
            v13 = *v10;
          }
          *(_QWORD *)(a2 + 152) = v11;
          operator delete(v13);
        }
        *(_BYTE *)(a2 + 168) = 0;
      }
    }
  }
}

void sub_207E1832C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;

  LODWORD(v8) = 2;
  sub_20820BA20(a2[6], &v8);
  if (v8 <= 1)
  {
    v8 = 0;
    v9 = 0;
    sub_20820BB04(a2[6], &v8);
    v10 = 0;
    sub_20820B6F8(a2[6], &v10);
    v7 = v10;
    *(_QWORD *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v7;
  }
  else
  {
    sub_207E17CA8(a2 + 2);
    sub_20820BB04(a2[6], (_QWORD *)a3);
    LOBYTE(v8) = 0;
    sub_20820B6F8(a2[6], &v8);
    *(_BYTE *)(a3 + 8) = v8;
    v5 = a2[4];
    v6 = *(_QWORD *)(v5 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v5 - 8);
    if (v6)
      (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v6);
    a2[4] -= 16;
  }
}

void sub_207E18434(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20820BBEC(*(_QWORD *)(a1 + 48), &v13);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v13 > v5)
  {
    sub_207E18550(a2, v13 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v13 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[24 * v13];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0)
      operator delete(*((void **)v4 - 3));
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v11 = *(_QWORD *)(a1 + 48);
    v12 = 24 * (v9 / 24);
    do
    {
      sub_20820C000(v11, (void **)v6);
      v6 += 24;
      v12 -= 24;
    }
    while (v12);
  }
}

void sub_207E18550(char **a1, unint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  void **v18;

  v5 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v4 - v5) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 = (void **)((char *)v5 + v12);
    }
    a1[1] = (char *)v5;
  }
  else
  {
    v6 = (void **)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA420C();
    v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_207CA3AB8();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 3);
        *((_QWORD *)v13 - 1) = *(v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *(v5 - 2) = 0;
        *(v5 - 1) = 0;
        *(v5 - 3) = 0;
        v5 -= 3;
      }
      while (v5 != v6);
      v5 = (void **)*a1;
      v18 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      while (v18 != v5)
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_207E18720(_QWORD *a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[32];
  _BYTE v40[22];
  unsigned int v41;
  _BYTE v42[40];
  _BYTE v43[22];
  void *__p;
  char v45;
  int v46;
  _QWORD v47[22];
  unsigned __int16 *v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[22];
  char v52;

  if (a3 < 2)
  {
    *(_QWORD *)v42 = &off_24C0736D0;
    sub_207E16F34((uint64_t)&v42[8]);
    sub_207F225F0((uint64_t)&v36, (uint64_t)v42, 0);
    v19 = *(std::__shared_weak_count **)&v42[16];
    if (*(_QWORD *)&v42[16])
    {
      v20 = (unint64_t *)(*(_QWORD *)&v42[16] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    LODWORD(v38) = 0;
    *(_WORD *)v42 = 0;
    sub_20820B88C(a1[6], v42);
    LOWORD(v36) = *(_WORD *)v42;
    *(_DWORD *)v42 = 1;
    sub_20820BA20(a1[6], v42);
    *(_QWORD *)v42 = 0;
    sub_20820BBEC(a1[6], v42);
    *(_QWORD *)&v37 = *(_QWORD *)v42;
    v22 = a1[6];
    sub_20820BA20(v22, (_DWORD *)&v37 + 2);
    sub_20820BA20(v22, (_DWORD *)&v37 + 3);
    if ((unsigned __int16)v36 == 1)
    {
      sub_207F222C8((uint64_t *)&v37, v38);
      if (v41 != -1)
        ((void (*)(unsigned __int16 **, char *))off_24C07B518[v41])(&v48, (char *)&v38 + 8);
      *((_QWORD *)&v38 + 1) = &off_24C0736D0;
      *(_OWORD *)v39 = *(_OWORD *)&v42[8];
      *(_OWORD *)&v39[16] = *(_OWORD *)&v42[24];
      *(_OWORD *)v40 = *(_OWORD *)v43;
      *(_QWORD *)&v40[14] = *(_QWORD *)&v43[14];
      v41 = 1;
      sub_207F24EC8(a1, (uint64_t)&v38 + 8);
LABEL_53:
      *(_WORD *)v42 = v36;
      *(_OWORD *)&v42[8] = v37;
      v34 = v41;
      *(_DWORD *)&v42[24] = v38;
      v42[32] = 0;
      v46 = -1;
      if (v41 == -1)
      {
        *(_OWORD *)a2 = *(_OWORD *)v42;
        *(_OWORD *)(a2 + 6) = *(_OWORD *)&v42[12];
        v35 = *((unsigned int *)a2 + 24);
        if ((_DWORD)v35 != -1)
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24C076500[v35])(&v48, a2 + 16);
          *((_DWORD *)a2 + 24) = -1;
        }
      }
      else
      {
        ((void (*)(char *, _BYTE *, char *))off_24C0766B0[v41])(&v52, &v42[32], (char *)&v38 + 8);
        v46 = v34;
        *(_OWORD *)a2 = *(_OWORD *)v42;
        *(_OWORD *)(a2 + 6) = *(_OWORD *)&v42[12];
        v48 = a2 + 16;
        ((void (*)(unsigned __int16 **))off_24C0766C0[v34])(&v48);
      }
      if (v46 != -1)
        ((void (*)(unsigned __int16 **, _BYTE *))off_24C076500[v46])(&v48, &v42[32]);
      if (v41 != -1)
        ((void (*)(_BYTE *, char *))off_24C076500[v41])(v42, (char *)&v38 + 8);
      return;
    }
    v25 = sub_207F24D0C((unsigned __int16)v36);
    sub_207E18F54((uint64_t)v42, (uint64_t)a1);
    v26 = sub_207E168B0((uint64_t)&v48, v47, v25);
    if (v41 != -1)
    {
      if (v41 == 1)
      {
        v27 = v49;
        v49 = 0uLL;
        v28 = *(std::__shared_weak_count **)&v39[8];
        *(_OWORD *)v39 = v27;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        *(_OWORD *)&v39[16] = v50;
        *(_OWORD *)v40 = *(_OWORD *)v51;
        *(_QWORD *)&v40[14] = *(_QWORD *)&v51[14];
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
        if (*((_QWORD *)&v49 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        goto LABEL_50;
      }
      ((void (*)(char *, char *, double))off_24C076500[v41])(&v52, (char *)&v38 + 8, v26);
    }
    *((_QWORD *)&v38 + 1) = &off_24C0736D0;
    *(_OWORD *)v39 = v49;
    *(_OWORD *)&v39[16] = v50;
    *(_OWORD *)v40 = *(_OWORD *)v51;
    *(_QWORD *)&v40[14] = *(_QWORD *)&v51[14];
    v41 = 1;
LABEL_50:
    std::istream::~istream();
    *(_QWORD *)v42 = MEMORY[0x24BEDB848] + 16;
    if (v45 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_53;
  }
  *(_WORD *)v42 = 0;
  sub_20820B88C(a1[6], v42);
  *a2 = *(_WORD *)v42;
  *(_DWORD *)v42 = 2;
  sub_20820BA20(a1[6], v42);
  if (*(_DWORD *)v42 <= 1u)
  {
    *(_QWORD *)&v42[8] = 0;
    v36 = 0;
    sub_20820BBEC(a1[6], &v36);
    *(_QWORD *)v42 = v36;
    v23 = a1[6];
    sub_20820BA20(v23, &v42[8]);
    sub_20820BA20(v23, (_DWORD *)((unint64_t)v42 | 0xC));
    *(_OWORD *)(a2 + 4) = *(_OWORD *)v42;
    v8 = *a2;
    if (v8 != 1)
      goto LABEL_6;
  }
  else
  {
    sub_207E17CA8(a1 + 2);
    *(_QWORD *)v42 = 0;
    sub_20820BBEC(a1[6], v42);
    *((_QWORD *)a2 + 1) = *(_QWORD *)v42;
    v5 = a1[6];
    sub_20820BA20(v5, (_DWORD *)a2 + 4);
    sub_20820BA20(v5, (_DWORD *)a2 + 5);
    v6 = a1[4];
    v7 = *(_QWORD *)(v6 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v6 - 8);
    if (v7)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
    a1[4] -= 16;
    v8 = *a2;
    if (v8 != 1)
    {
LABEL_6:
      v9 = sub_207F24D0C(v8);
      sub_207E18F54((uint64_t)v42, (uint64_t)a1);
      v10 = sub_207E168B0((uint64_t)&v36, v47, v9);
      v11 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v11 != -1)
      {
        if ((_DWORD)v11 == 1)
        {
          v12 = v37;
          v37 = 0uLL;
          v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v12;
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          *(_OWORD *)(a2 + 28) = v38;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v39;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v39[14];
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
          if (*((_QWORD *)&v37 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          goto LABEL_45;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *, double))off_24C076500[v11])(&v48, a2 + 16, v10);
      }
      *((_QWORD *)a2 + 4) = &off_24C0736D0;
      *(_OWORD *)(a2 + 20) = v37;
      *(_OWORD *)(a2 + 28) = v38;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v39;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v39[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_45:
      std::istream::~istream();
      *(_QWORD *)v42 = MEMORY[0x24BEDB848] + 16;
      if (v45 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      return;
    }
  }
  sub_207F2245C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
  v24 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v24 != -1)
    ((void (*)(uint64_t *, unsigned __int16 *))off_24C07B518[v24])(&v36, a2 + 16);
  *((_QWORD *)a2 + 4) = &off_24C0736D0;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v42[8];
  *(_OWORD *)(a2 + 28) = *(_OWORD *)&v42[24];
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v43;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v43[14];
  *((_DWORD *)a2 + 24) = 1;
  sub_207F24EC8(a1, (uint64_t)(a2 + 16));
}

void sub_207E18E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_207E18EFC((uint64_t)va1);
  sub_207E178F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E18E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_207E18EFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E18E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_207E02E04((uint64_t)va1);
  sub_207E178F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E18E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a35 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C076500[a35])(v36 - 136, v35);
  sub_207E178F0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_207E18EFC(uint64_t a1)
{
  std::istream::~istream();
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

uint64_t sub_207E18F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  size_t v7;
  std::string *p_p;
  uint64_t v9;
  std::bad_cast *exception;
  std::bad_cast *v12;
  std::string __p;
  std::string::size_type __n;
  int v15;
  void *__src;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &__n);
  memset(&__p, 0, sizeof(__p));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&__p, __n, 0);
  v7 = __n;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    p_p = &__p;
    goto LABEL_9;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!__p.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    p_p = 0;
  }
LABEL_9:
  v9 = *(_QWORD *)(a2 + 48);
  v15 = 0;
  __src = 0;
  sub_20820C1BC(v9, (uint64_t)&v15);
  if (v7 != v15)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v12 = std::bad_cast::bad_cast(exception);
    v12->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
    __cxa_throw(v12, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
  }
  memcpy(p_p, __src, v7);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_207CC2D08(a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_207E1912C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_207E0E3A8(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_207E19198(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5AC0(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_208097288(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_207E19294((uint64_t)&v11, a1, a2, v6);
  else
    sub_207E19484(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_207E19294(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_207E1A1C8(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_207CA40D8(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_207E15690(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_207E19440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_207E19484(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5AC0(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_208097288(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_207E19744(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_207E19A5C((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_207E19A5C((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2081F5D78((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_2081F5D78((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_207E19B7C((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E19A5C((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E19A5C((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E19A5C((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E1A06C((uint64_t *)a1, a2 + 144);
  }
}

void sub_207E19744(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2080973D0(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_207E1989C((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2080973D0(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_207E1989C((uint64_t *)a1, &v13);
  }
}

void sub_207E1989C(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F5D78(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_207D21A34(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_208208160((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E199E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E19A5C(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_2081F5D78(a1))
  {
    v4 = (void **)sub_2081F5D78(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_207D21A34(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_207E19B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E19B7C(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_2081F5AC0(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_208097288(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_2081F5D78((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_208097288(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_207E14E7C();
        sub_208212838((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_207E19CEC(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

void sub_207E19CEC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_2080973D0(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_207E19E44(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_2080973D0(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_207E19E44(a1, &v13);
  }
}

void sub_207E19E44(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_207D21A34(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = (char *)operator new(0x118uLL);
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_208215780((uint64_t)v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_208208160((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)&v9[*(_QWORD *)(v13 - 24)] = *(_QWORD *)(v12 + 64);
    *((_QWORD *)v9 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v9 + 2) = v14;
    if (v9[111] < 0)
      operator delete(*((void **)v9 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v9 + 128);
    operator delete(v9);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_208097288(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C08F078;
      __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_207E19FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E1A06C(uint64_t *a1, uint64_t a2)
{
  char *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_2081F5D78(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (char *)sub_2081F5D78(a1);
    ++a1[14];
    sub_2081F6DA4((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_207E1A1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207C99DE0(&a9);
  _Unwind_Resume(a1);
}

void sub_207E1A1C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5AC0(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_208097288(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_207E19744(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_207E19A5C((uint64_t *)a1, a2 + 24);
  }
}

uint64_t sub_207E1A304(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  double v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  int v44;
  double v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *exception;
  _QWORD *v60;
  _BYTE v61[24];
  __int128 v62;
  _BYTE v63[32];
  _BYTE v64[22];
  unsigned int v65;
  char v66;
  _BYTE v67[40];
  _BYTE v68[22];
  void *__p;
  char v70;
  int v71;
  _QWORD v72[21];
  unsigned __int16 *v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[22];
  char v77;

  sub_2081F5AC0(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v67 = 0;
  sub_208097288(v5, v67);
  if (HIDWORD(*(_QWORD *)v67))
    goto LABEL_100;
  if (*(_DWORD *)v67 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v67;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v67 = a2;
    sub_207E1AE58((uint64_t *)a1, (_WORD **)v67);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_2081F5AC0(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_2081F5AC0(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v43)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v67 = 0;
    sub_208097288(v10, v67);
    if (!HIDWORD(*(_QWORD *)v67))
    {
      if (*(_DWORD *)v67 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v67;
      if (v11 < 2)
      {
        *(_OWORD *)v61 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = v61;
        sub_207E1B018((uint64_t *)a1, (_QWORD **)v67);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = 2;
        *(_QWORD *)&v67[8] = &v61[8];
        v29 = (char *)sub_2081F5D78((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_2081F6730(v29, (uint64_t)v67);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v61;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = a2 + 4;
        sub_207E1B018((uint64_t *)a1, (_QWORD **)v67);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v67 = 2;
        *(_QWORD *)&v67[8] = a2 + 8;
        v14 = (char *)sub_2081F5D78((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_2081F6730(v14, (uint64_t)v67);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_2081F5AC0(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_207F2245C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24C07B518[v33])(v61, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C0736D0;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v67[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v67[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v68;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v68[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_207F24EC8((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_2081F5AC0(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v44 = sub_207F24D0C(v32);
      sub_207E1B1D4((uint64_t)v67, (uint64_t *)a1);
      v45 = sub_207E168B0((uint64_t)v61, v72, v44);
      v46 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v46 != -1)
      {
        if ((_DWORD)v46 == 1)
        {
          v47 = *(_OWORD *)&v61[8];
          *(_QWORD *)&v61[8] = 0;
          *(_QWORD *)&v61[16] = 0;
          v48 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v47;
          if (v48)
          {
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(p_shared_owners);
            while (__stlxr(v50 - 1, p_shared_owners));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          *(_OWORD *)(a2 + 28) = v62;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
          v51 = *(std::__shared_weak_count **)&v61[16];
          if (*(_QWORD *)&v61[16])
          {
            v52 = (unint64_t *)(*(_QWORD *)&v61[16] + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *, double))off_24C076500[v46])(&v73, a2 + 16, v45);
      }
      *((_QWORD *)a2 + 4) = &off_24C0736D0;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v61[8];
      *(_OWORD *)(a2 + 28) = v62;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v67 = MEMORY[0x24BEDB848] + 16;
      if (v70 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v67 = &off_24C0736D0;
  sub_207E16F34((uint64_t)&v67[8]);
  sub_207F225F0((uint64_t)v61, (uint64_t)v67, 0);
  v15 = *(std::__shared_weak_count **)&v67[16];
  if (*(_QWORD *)&v67[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v67[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v62) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v67 = v61;
  sub_207E1AE58((uint64_t *)a1, (_WORD **)v67);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5AC0(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v67 = 0;
  sub_208097288(v21, v67);
  if (*(_DWORD *)&v67[4])
  {
    v60 = __cxa_allocate_exception(8uLL);
    *v60 = &off_24C08F078;
    __cxa_throw(v60, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v67 = &v61[8];
  sub_207E1B018((uint64_t *)a1, (_QWORD **)v67);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v67 = 2;
  *(_QWORD *)&v67[8] = &v61[16];
  v24 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2081F6730(v24, (uint64_t)v67);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_2081F5AC0(a1);
  if (*(unsigned __int16 *)v61 != 1)
  {
    v34 = sub_207F24D0C(*(unsigned __int16 *)v61);
    sub_207E1B1D4((uint64_t)v67, (uint64_t *)a1);
    v35 = sub_207E168B0((uint64_t)&v73, v72, v34);
    if (v65 != -1)
    {
      if (v65 == 1)
      {
        v36 = v74;
        v74 = 0uLL;
        v37 = *(std::__shared_weak_count **)&v63[8];
        *(_OWORD *)v63 = v36;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        *(_OWORD *)&v63[16] = v75;
        *(_OWORD *)v64 = *(_OWORD *)v76;
        *(_QWORD *)&v64[14] = *(_QWORD *)&v76[14];
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *, double))off_24C076500[v65])(&v77, (char *)&v62 + 8, v35);
    }
    *((_QWORD *)&v62 + 1) = &off_24C0736D0;
    *(_OWORD *)v63 = v74;
    *(_OWORD *)&v63[16] = v75;
    *(_OWORD *)v64 = *(_OWORD *)v76;
    *(_QWORD *)&v64[14] = *(_QWORD *)&v76[14];
    v65 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v67 = MEMORY[0x24BEDB848] + 16;
    if (v70 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_207F222C8((uint64_t *)&v61[8], v62);
  if (v65 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24C07B518[v65])(&v73, (char *)&v62 + 8);
  *((_QWORD *)&v62 + 1) = &off_24C0736D0;
  *(_OWORD *)v63 = *(_OWORD *)&v67[8];
  *(_OWORD *)&v63[16] = *(_OWORD *)&v67[24];
  *(_OWORD *)v64 = *(_OWORD *)v68;
  *(_QWORD *)&v64[14] = *(_QWORD *)&v68[14];
  v65 = 1;
  sub_207F24EC8((const void *)a1, (uint64_t)&v62 + 8);
LABEL_91:
  *(_WORD *)v67 = *(_WORD *)v61;
  *(_OWORD *)&v67[8] = *(_OWORD *)&v61[8];
  v54 = v65;
  *(_DWORD *)&v67[24] = v62;
  v67[32] = 0;
  v71 = -1;
  if (v65 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v67;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v67[12];
    v55 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v55 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24C076500[v55])(&v73, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24C0766B0[v65])(&v66, &v67[32], (char *)&v62 + 8);
    v71 = v54;
    *(_OWORD *)a2 = *(_OWORD *)v67;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v67[12];
    v73 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24C0766C0[v54])(&v73);
  }
  if (v71 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24C076500[v71])(&v73, &v67[32]);
  if (v65 != -1)
    ((void (*)(_BYTE *, char *))off_24C076500[v65])(v67, (char *)&v62 + 8);
LABEL_99:
  v56 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v56 - 8);
  v57 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v57 - 8);
  *(_QWORD *)(a1 + 48) = v56 - 8;
  *(_QWORD *)(a1 + 72) = v57 - 8;
  return a1;
}

void sub_207E1AD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24C076500[a21])(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_207E1AE58(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F5D78(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_207D21A34(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_207F24118((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E1AF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E1B018(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F5D78(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_207D21A34(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_207F24784((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E1B158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_207E1B1D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_2081F5D78(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_208097288(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_2081F5D78(a2);
  ++a2[14];
  sub_2081F5E90(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_207CC2D08(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_207E1B370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_207E0E3A8(v17);
  _Unwind_Resume(a1);
}

void sub_207E1B3DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_207E1C08C(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_207CA40D8(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_207E15690(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_207E1B588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_207E1B5CC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  void **v10;
  char v11;
  char v12;
  void **v13;
  void **v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  char v30;
  void *__p[2];
  uint64_t v32;
  char v33;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_208209DC8(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_20820A01C(a1, __p);
    LOBYTE(v28[0]) = 0;
    sub_208209484(a1, v28);
    v9 = (char)v28[0];
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v9;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20820B068(a1, (uint64_t)__p);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_24:
          v12 = 0;
          if (SHIBYTE(v32) < 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      else if (SHIBYTE(v32) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_24;
      }
      v12 = 1;
      if (SHIBYTE(v32) < 0)
LABEL_27:
        operator delete(__p[0]);
LABEL_13:
      if (*(_BYTE *)(a1 + 131))
        v11 = 0;
      else
        v11 = v12;
      if ((v11 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20820A01C(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_208209484(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  v10 = (void **)(a2 + 24);
  LOBYTE(v28[0]) = 0;
  sub_208209484(a1, v28);
  if (!LOBYTE(v28[0]))
  {
    if (*(_BYTE *)(a2 + 48))
    {
      if (*(char *)(a2 + 47) < 0)
        operator delete(*v10);
      *(_BYTE *)(a2 + 48) = 0;
      if (a3 < 4)
        return;
LABEL_41:
      sub_207E1BD68(a1, a2 + 56);
      if (a3 == 5)
      {
        v13 = (void **)(a2 + 80);
        LOBYTE(v28[0]) = 0;
        sub_208209484(a1, v28);
        if (LOBYTE(v28[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v13 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_20820B068(a1, (uint64_t)__p);
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v13);
            *(_OWORD *)v13 = *(_OWORD *)__p;
            *(_QWORD *)(a2 + 96) = v32;
            ++*(_QWORD *)(a1 + 104);
          }
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v13);
          *(_BYTE *)(a2 + 104) = 0;
        }
        return;
      }
      if (a3 < 6)
        return;
      v14 = (void **)(a2 + 80);
      LOBYTE(v28[0]) = 0;
      sub_208209484(a1, v28);
      if (LOBYTE(v28[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v14 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_20820B068(a1, (uint64_t)__p);
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_OWORD *)v14 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 96) = v32;
LABEL_73:
          ++*(_QWORD *)(a1 + 104);
LABEL_74:
          v15 = (void **)(a2 + 112);
          LOBYTE(v28[0]) = 0;
          sub_208209484(a1, v28);
          if (LOBYTE(v28[0]))
          {
            if (!*(_BYTE *)(a2 + 136))
            {
              *v15 = 0;
              *(_QWORD *)(a2 + 120) = 0;
              *(_QWORD *)(a2 + 128) = 0;
              *(_BYTE *)(a2 + 136) = 1;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_20820B068(a1, (uint64_t)__p);
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_OWORD *)v15 = *(_OWORD *)__p;
              *(_QWORD *)(a2 + 128) = v32;
              goto LABEL_102;
            }
          }
          else
          {
            if (*(_BYTE *)(a2 + 136))
            {
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_BYTE *)(a2 + 136) = 0;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_20820B068(a1, (uint64_t)__p);
              if (SHIBYTE(v32) < 0)
                operator delete(__p[0]);
LABEL_102:
              ++*(_QWORD *)(a1 + 104);
              LOBYTE(v26[0]) = 0;
              sub_208209484(a1, v26);
              if (!LOBYTE(v26[0]))
              {
LABEL_103:
                ++*(_QWORD *)(a1 + 80);
                if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
                {
                  *(_BYTE *)(a1 + 132) = 1;
                }
                else
                {
                  sub_20820B068(a1, (uint64_t)v28);
                  if (SHIBYTE(v29) < 0)
                    operator delete(v28[0]);
                  ++*(_QWORD *)(a1 + 104);
                }
                if (*(_BYTE *)(a2 + 168))
                {
                  v20 = *(_QWORD *)(a2 + 144);
                  if (v20)
                  {
                    v21 = *(_QWORD *)(a2 + 152);
                    v22 = *(void **)(a2 + 144);
                    if (v21 != v20)
                    {
                      do
                      {
                        if (*(char *)(v21 - 1) < 0)
                          operator delete(*(void **)(v21 - 24));
                        v21 -= 24;
                      }
                      while (v21 != v20);
                      v22 = *(void **)(a2 + 144);
                    }
                    *(_QWORD *)(a2 + 152) = v20;
                    operator delete(v22);
                  }
                  *(_BYTE *)(a2 + 168) = 0;
                }
                return;
              }
              goto LABEL_89;
            }
          }
          *(_BYTE *)(a1 + 132) = 1;
          LOBYTE(v26[0]) = 0;
          sub_208209484(a1, v26);
          if (!LOBYTE(v26[0]))
            goto LABEL_103;
LABEL_89:
          __p[0] = 0;
          __p[1] = 0;
          v32 = 0;
          v33 = 1;
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_20820B068(a1, (uint64_t)v28);
            v16 = *(_QWORD *)(a1 + 104);
            *(_OWORD *)__p = *(_OWORD *)v28;
            v32 = v29;
            *(_QWORD *)(a1 + 104) = v16 + 1;
          }
          sub_207E146B4((char *)__p, (uint64_t)v26);
          *(_OWORD *)v28 = *(_OWORD *)v26;
          v29 = v27;
          v26[1] = 0;
          v27 = 0;
          v26[0] = 0;
          v30 = 1;
          sub_207E15554(a2 + 144, (uint64_t)v28);
          if (v30)
          {
            v17 = (void **)v28[0];
            if (v28[0])
            {
              v18 = (void **)v28[1];
              v19 = v28[0];
              if (v28[1] != v28[0])
              {
                do
                {
                  if (*((char *)v18 - 1) < 0)
                    operator delete(*(v18 - 3));
                  v18 -= 3;
                }
                while (v18 != v17);
                v19 = v28[0];
              }
              v28[1] = v17;
              operator delete(v19);
            }
          }
          v23 = (void **)v26[0];
          if (v26[0])
          {
            v24 = (void **)v26[1];
            v25 = v26[0];
            if (v26[1] != v26[0])
            {
              do
              {
                if (*((char *)v24 - 1) < 0)
                  operator delete(*(v24 - 3));
                v24 -= 3;
              }
              while (v24 != v23);
              v25 = v26[0];
            }
            v26[1] = v23;
            operator delete(v25);
          }
          if (v33 && SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          return;
        }
      }
      else
      {
        if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_BYTE *)(a2 + 104) = 0;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_20820B068(a1, (uint64_t)__p);
          if (SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          goto LABEL_73;
        }
      }
      *(_BYTE *)(a1 + 132) = 1;
      goto LABEL_74;
    }
LABEL_36:
    if (a3 < 4)
      return;
    goto LABEL_41;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    *v10 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 1;
    ++*(_QWORD *)(a1 + 80);
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_38;
    goto LABEL_34;
  }
  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128))
  {
LABEL_34:
    if (!*(_BYTE *)(a1 + 131))
      goto LABEL_38;
    *(_BYTE *)(a1 + 132) = 1;
    goto LABEL_36;
  }
LABEL_38:
  sub_20820B068(a1, (uint64_t)__p);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v32;
  ++*(_QWORD *)(a1 + 104);
  if (a3 >= 4)
    goto LABEL_41;
}

void sub_207E1BD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E1BD68(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  void *__p;
  uint64_t v12;
  char v13;

  v9 = 0;
  sub_208209484(a1, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    LODWORD(__p) = 2;
    sub_208209DC8(a1, &__p);
    v4 = __p;
    if (__p >= 2)
      v5 = 2;
    else
      v5 = __p;
    if (v5 < 2)
    {
      __p = 0;
      LOBYTE(v12) = 0;
      sub_20820A01C(a1, &__p);
      v10 = 0;
      sub_208209484(a1, &v10);
      v6 = v10;
      *(_QWORD *)a2 = __p;
      *(_BYTE *)(a2 + 8) = v6;
      if (v4 < 2)
        return;
    }
    else
    {
      sub_20820A01C(a1, (_QWORD *)a2);
      LOBYTE(__p) = 0;
      sub_208209484(a1, &__p);
      *(_BYTE *)(a2 + 8) = (_BYTE)__p;
      if (v4 < 2)
        return;
    }
    if (!*(_BYTE *)(a1 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20820B068(a1, (uint64_t)&__p);
        if (v13 < 0)
        {
          if (v12 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_26:
            v8 = 0;
            if (v13 < 0)
              goto LABEL_29;
            goto LABEL_15;
          }
        }
        else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
        {
          goto LABEL_26;
        }
        v8 = 1;
        if (v13 < 0)
LABEL_29:
          operator delete(__p);
LABEL_15:
        if (*(_BYTE *)(a1 + 131))
          v7 = 0;
        else
          v7 = v8;
      }
      while ((v7 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
}

__n128 sub_207E1BF18(uint64_t a1, char **a2)
{
  __n128 result;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;

  v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20820A270(a1, &v14);
  v5 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v14 <= v6)
  {
    if (v14 >= v6)
    {
      v7 = *a2;
      v10 = v5 - v7;
      if (v5 == v7)
        return result;
    }
    else
    {
      v11 = (uint64_t)&(*a2)[24 * v14];
      while (v5 != (char *)v11)
      {
        if (*(v5 - 1) < 0)
          operator delete(*((void **)v5 - 3));
        v5 -= 24;
      }
      a2[1] = (char *)v11;
      v7 = *a2;
      v10 = v11 - (_QWORD)v7;
      if ((char *)v11 == v7)
        return result;
    }
  }
  else
  {
    sub_207E18550(a2, v14 - v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return result;
  }
  v12 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 131) == 0)
        break;
      *(_BYTE *)(a1 + 132) = 1;
      v7 += 24;
      v12 -= 24;
      if (!v12)
        return result;
    }
    sub_20820B068(a1, (uint64_t)&v15);
    if (v7[23] < 0)
      operator delete(*(void **)v7);
    result = v15;
    *((_QWORD *)v7 + 2) = v16;
    *(__n128 *)v7 = result;
    v7 += 24;
    ++*(_QWORD *)(a1 + 104);
    v12 -= 24;
  }
  while (v12);
  return result;
}

double sub_207E1C08C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  double result;
  char v10;
  void **v11;
  char v12;
  char v13;
  char v14;
  void *__p[2];
  uint64_t v16;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_208209DC8(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_20820A01C(a1, __p);
    v14 = 0;
    sub_208209484(a1, &v14);
    v10 = v14;
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v10;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20820B068(a1, (uint64_t)__p);
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          v13 = 0;
          if (SHIBYTE(v16) < 0)
            goto LABEL_28;
          goto LABEL_14;
        }
      }
      else if (SHIBYTE(v16) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      v13 = 1;
      if (SHIBYTE(v16) < 0)
LABEL_28:
        operator delete(__p[0]);
LABEL_14:
      if (*(_BYTE *)(a1 + 131))
        v12 = 0;
      else
        v12 = v13;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20820A01C(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_208209484(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  if (a3 < 2)
    return result;
  v11 = (void **)(a2 + 24);
  v14 = 0;
  sub_208209484(a1, &v14);
  if (v14)
  {
    if (*(_BYTE *)(a2 + 48))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_37;
    }
    else
    {
      *v11 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_37:
        sub_20820B068(a1, (uint64_t)__p);
        if (*(char *)(a2 + 47) < 0)
          operator delete(*v11);
        result = *(double *)__p;
        *(_OWORD *)v11 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 40) = v16;
        ++*(_QWORD *)(a1 + 104);
        return result;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_37;
  }
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v11);
    *(_BYTE *)(a2 + 48) = 0;
  }
  return result;
}

void sub_207E1C2F8(const void *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  double v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  __int128 v19;
  int v20;
  uint64_t (**v21)();
  __int128 v22;
  __int128 v23;
  _BYTE v24[22];
  unsigned int v25;
  _BYTE v26[40];
  _BYTE v27[22];
  void *__p;
  char v29;
  int v30;
  _QWORD v31[21];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[22];
  char v36;

  *(_QWORD *)v26 = &off_24C0736D0;
  sub_207E16F34((uint64_t)&v26[8]);
  sub_207F225F0((uint64_t)&v18, (uint64_t)v26, 0);
  v4 = *(std::__shared_weak_count **)&v26[16];
  if (*(_QWORD *)&v26[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v26[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v20 = 0;
  *(_WORD *)v26 = 0;
  sub_208209920((uint64_t)a1, v26);
  v18 = *(_WORD *)v26;
  *(_DWORD *)v26 = 1;
  sub_208209DC8((uint64_t)a1, v26);
  *(_QWORD *)v26 = 0;
  sub_20820A270((uint64_t)a1, v26);
  *(_QWORD *)&v19 = *(_QWORD *)v26;
  sub_208209DC8((uint64_t)a1, (_DWORD *)&v19 + 2);
  sub_208209DC8((uint64_t)a1, (_DWORD *)&v19 + 3);
  if (v18 == 1)
  {
    sub_207F222C8((uint64_t *)&v19, v20);
    if (v25 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24C07B518[v25])(&v32, &v21);
    v21 = &off_24C0736D0;
    v22 = *(_OWORD *)&v26[8];
    v23 = *(_OWORD *)&v26[24];
    *(_OWORD *)v24 = *(_OWORD *)v27;
    *(_QWORD *)&v24[14] = *(_QWORD *)&v27[14];
    v25 = 1;
    sub_207F24EC8(a1, (uint64_t)&v21);
    goto LABEL_27;
  }
  v7 = sub_207F24D0C(v18);
  sub_207E1CB68((uint64_t)v26, (uint64_t)a1);
  v8 = sub_207E168B0((uint64_t)&v32, v31, v7);
  if (v25 != -1)
  {
    if (v25 == 1)
    {
      v9 = v33;
      v33 = 0uLL;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      v22 = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v23 = v34;
      *(_OWORD *)v24 = *(_OWORD *)v35;
      *(_QWORD *)&v24[14] = *(_QWORD *)&v35[14];
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_24;
    }
    ((void (*)(char *, uint64_t (***)(), double))off_24C076500[v25])(&v36, &v21, v8);
  }
  v21 = &off_24C0736D0;
  v22 = v33;
  v23 = v34;
  *(_OWORD *)v24 = *(_OWORD *)v35;
  *(_QWORD *)&v24[14] = *(_QWORD *)&v35[14];
  v25 = 1;
LABEL_24:
  std::istream::~istream();
  *(_QWORD *)v26 = MEMORY[0x24BEDB848] + 16;
  if (v29 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_27:
  *(_WORD *)v26 = v18;
  *(_OWORD *)&v26[8] = v19;
  v16 = v25;
  *(_DWORD *)&v26[24] = v20;
  v26[32] = 0;
  v30 = -1;
  if (v25 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v26;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v26[12];
    v17 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24C076500[v17])(&v32, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24C0766B0[v25])(&v36, &v26[32], &v21);
    v30 = v16;
    *(_OWORD *)a2 = *(_OWORD *)v26;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v26[12];
    v32 = a2 + 32;
    ((void (*)(uint64_t *))off_24C0766C0[v16])(&v32);
  }
  if (v30 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24C076500[v30])(&v32, &v26[32]);
  if (v25 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))off_24C076500[v25])(v26, &v21);
}

void sub_207E1C6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_207E18EFC((uint64_t)&a22);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E1C718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_207E02E04((uint64_t)&a22);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E1C734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C076500[a34])(v35 - 120, v34);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E1C7BC(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  double v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE __p[24];
  __int128 v21;
  _BYTE v22[22];
  void *v23;
  char v24;
  _QWORD v25[22];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[22];
  char v30;

  *(_WORD *)__p = 0;
  sub_208209920(a1, __p);
  *a2 = *(_WORD *)__p;
  *(_DWORD *)__p = 2;
  sub_208209DC8(a1, __p);
  v4 = *(_DWORD *)__p;
  if (*(_DWORD *)__p >= 2u)
    v5 = 2;
  else
    v5 = *(_DWORD *)__p;
  if (v5 < 2)
  {
    *(_QWORD *)&__p[8] = 0;
    v26 = 0;
    sub_20820A270(a1, &v26);
    *(_QWORD *)__p = v26;
    sub_208209DC8(a1, &__p[8]);
    sub_208209DC8(a1, (_DWORD *)((unint64_t)__p | 0xC));
    *(_OWORD *)(a2 + 4) = *(_OWORD *)__p;
    if (v4 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20820B068(a1, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
      {
        if (*(_QWORD *)&__p[8] == 1 && *(unsigned __int8 *)(a1 + 72) == **(_BYTE **)__p)
        {
LABEL_24:
          v9 = 0;
          if ((__p[23] & 0x80000000) != 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      else if (__p[23] == 1 && *(unsigned __int8 *)(a1 + 72) == __p[0])
      {
        goto LABEL_24;
      }
      v9 = 1;
      if ((__p[23] & 0x80000000) != 0)
LABEL_27:
        operator delete(*(void **)__p);
LABEL_13:
      if (*(_BYTE *)(a1 + 131))
        v8 = 0;
      else
        v8 = v9;
      if ((v8 & 1) == 0)
        goto LABEL_9;
    }
  }
  *(_QWORD *)__p = 0;
  sub_20820A270(a1, __p);
  *((_QWORD *)a2 + 1) = *(_QWORD *)__p;
  sub_208209DC8(a1, (_DWORD *)a2 + 4);
  sub_208209DC8(a1, (_DWORD *)a2 + 5);
  if (v4 >= 2)
    goto LABEL_8;
LABEL_9:
  v6 = *a2;
  if (v6 == 1)
  {
    sub_207F2245C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
    v7 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v7 != -1)
      ((void (*)(uint64_t *, unsigned __int16 *))off_24C07B518[v7])(&v26, a2 + 16);
    *((_QWORD *)a2 + 4) = &off_24C0736D0;
    *(_OWORD *)(a2 + 20) = *(_OWORD *)&__p[8];
    *(_OWORD *)(a2 + 28) = v21;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v22;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v22[14];
    *((_DWORD *)a2 + 24) = 1;
    sub_207F24EC8((const void *)a1, (uint64_t)(a2 + 16));
    return;
  }
  v10 = sub_207F24D0C(v6);
  sub_207E1CB68((uint64_t)__p, a1);
  v11 = sub_207E168B0((uint64_t)&v26, v25, v10);
  v12 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v12 != -1)
  {
    if ((_DWORD)v12 == 1)
    {
      v13 = v27;
      v27 = 0uLL;
      v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
      *(_OWORD *)(a2 + 20) = v13;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      *(_OWORD *)(a2 + 28) = v28;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v29;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v29[14];
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
      if (*((_QWORD *)&v27 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      goto LABEL_42;
    }
    ((void (*)(char *, unsigned __int16 *, double))off_24C076500[v12])(&v30, a2 + 16, v11);
  }
  *((_QWORD *)a2 + 4) = &off_24C0736D0;
  *(_OWORD *)(a2 + 20) = v27;
  *(_OWORD *)(a2 + 28) = v28;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v29;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v29[14];
  *((_DWORD *)a2 + 24) = 1;
LABEL_42:
  std::istream::~istream();
  *(_QWORD *)__p = MEMORY[0x24BEDB848] + 16;
  if (v24 < 0)
    operator delete(v23);
  std::streambuf::~streambuf();
}

void sub_207E1CB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E18EFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E1CB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_20820A270(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  sub_20820B268(a2, (uint64_t)v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_207CC2D08(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_207E1CCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_207E0E3A8(v16);
  _Unwind_Resume(a1);
}

void sub_207E1CD58(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  char v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3)
    sub_208072ECC(a2);
  if (v9 >= 6)
    v10 = 6;
  else
    v10 = v9;
  if (v10 < 3)
  {
    sub_207E1CE6C((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3)
      return;
  }
  else
  {
    sub_207E1D07C(a2, a3, v10);
    if (v9 < 3)
      return;
  }
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_207E1CE58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1CE6C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  void **v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v25 = 0;
  BYTE8(v25) = 0;
  LOBYTE(v26) = 0;
  v28 = 0;
  sub_207E1D134((uint64_t)v10, a2, (uint64_t)&v25);
  if (a4 >= 2)
    sub_207E1D3E4(a2, (uint64_t)&v26);
  *(_OWORD *)&v10[8] = v25;
  LOBYTE(v11) = 0;
  v13 = 0;
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
    {
      sub_207CA40D8(&v11, (void *)v26, *((unint64_t *)&v26 + 1));
    }
    else
    {
      v11 = v26;
      v12 = v27;
    }
    v13 = 1;
  }
  v14 = 0;
  v15 = 0;
  LOBYTE(v16) = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  v21 = 0;
  LOBYTE(__p) = 0;
  v24 = 0;
  sub_207E15690(a3, (uint64_t)v10);
  if (v24)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
  }
  if (v21 && v20 < 0)
    operator delete(v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  if (v13 && SHIBYTE(v12) < 0)
    operator delete((void *)v11);
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
}

void sub_207E1D038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_207E1D07C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char v6;

  sub_207E1D134((uint64_t)&v6, a1, a2 + 8);
  sub_207E1D3E4(a1, a2 + 24);
  if (a3 >= 4)
  {
    sub_207E1D4B4(a1, a2 + 56);
    if (a3 == 5)
    {
      sub_207E1D3E4(a1, a2 + 80);
    }
    else if (a3 >= 6)
    {
      sub_207E1D3E4(a1, a2 + 80);
      sub_207E1D3E4(a1, a2 + 112);
      sub_207E1D578(a1, a2 + 144);
    }
  }
}

_QWORD *sub_207E1D134(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::logic_error *exception;
  uint64_t v15;
  char v16;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    v15 = 0;
    v16 = 0;
    result = sub_207E1D310(a2, (uint64_t)&v15);
    v13 = v16;
    *(_QWORD *)a3 = v15;
    *(_BYTE *)(a3 + 8) = v13;
  }
  else
  {
    sub_208072ECC(a2);
    result = sub_207E1D23C(a2, a3);
    v11 = a2[12];
    v12 = a2[9];
    a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
    a2[9] = v12 - 8;
    a2[12] = v11 - 8;
  }
  return result;
}

void sub_207E1D228(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E1D23C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_207E1D2E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1D2FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E1D310(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_207E1D3BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1D3D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1D3E4(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_20807321C(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_207E1D4A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E1D4B4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  std::logic_error *exception;
  char v5;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    return sub_207E1D134((uint64_t)&v5, result, a2);
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_207E1D564(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1D578(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  void **v5;
  void **v6;
  void **v7;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_207E1D690(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    v5 = *(void ***)a2;
    if (*(_QWORD *)a2)
    {
      v6 = *(void ***)(a2 + 8);
      v7 = *(void ***)a2;
      if (v6 != v5)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = *(void ***)a2;
      }
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v7);
    }
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_207E1D67C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1D690(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(_QWORD *)a2) >> 3);
  if (v8 > v10)
  {
    sub_207E18550((char **)a2, v8 - v10);
    v13 = a2;
    v11 = *(char **)a2;
    v12 = *(char **)(v13 + 8);
    v14 = v12 - v11;
    if (v12 == v11)
      return;
    goto LABEL_16;
  }
  if (v8 >= v10)
  {
    v11 = *(char **)a2;
    v14 = v9 - *(_QWORD *)a2;
    if (v9 == *(_QWORD *)a2)
      return;
    goto LABEL_16;
  }
  v15 = *(_QWORD *)a2 + 24 * v8;
  while (v9 != v15)
  {
    if (*(char *)(v9 - 1) < 0)
      operator delete(*(void **)(v9 - 24));
    v9 -= 24;
  }
  *(_QWORD *)(a2 + 8) = v15;
  v11 = *(char **)a2;
  v14 = v15 - (_QWORD)v11;
  if ((char *)v15 != v11)
  {
LABEL_16:
    v16 = 24 * (v14 / 24);
    do
    {
      sub_20807321C(a1, (uint64_t)v11);
      v11 += 24;
      v16 -= 24;
    }
    while (v16);
  }
}

void sub_207E1D7D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1D7E4(_QWORD *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  _OWORD *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  double v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::logic_error *exception;
  std::logic_error *v61;
  unsigned __int16 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];
  _BYTE v66[22];
  unsigned int v67;
  unsigned __int16 *v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[22];
  char v72;
  _BYTE v73[40];
  _BYTE v74[22];
  void *__p;
  char v76;
  int v77;
  _QWORD v78[21];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
    goto LABEL_82;
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 > 1)
  {
    sub_208072ECC(a1);
    v9 = a1[6];
    v10 = a1[7];
    v11 = v10 - v9;
    if (v10 < v9)
      v11 = 0;
    if (v11 > 1)
    {
      v12 = a1[3];
      v13 = *(_WORD *)(v12 + v9);
      a1[6] = v9 + 2;
      *a2 = v13;
      v14 = a2 + 4;
      v4 = v10 >= v9 + 2;
      v15 = v10 - (v9 + 2);
      if (!v4)
        v15 = 0;
      if (v15 > 3)
      {
        v16 = *(_DWORD *)(v12 + v9 + 2);
        a1[6] = v9 + 6;
        if (v16 <= 1)
        {
          *(_OWORD *)v73 = 1uLL;
          sub_207E1E160(a1, v73);
          *v14 = *(_OWORD *)v73;
          v26 = *a2;
          if (v26 != 1)
          {
LABEL_19:
            v27 = sub_207F24D0C(v26);
            sub_207E1E238((uint64_t)v73, a1);
            v28 = sub_207E168B0((uint64_t)&v62, v78, v27);
            v29 = *((unsigned int *)a2 + 24);
            if ((_DWORD)v29 != -1)
            {
              if ((_DWORD)v29 == 1)
              {
                v30 = v63;
                v63 = 0uLL;
                v31 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
                *(_OWORD *)(a2 + 20) = v30;
                if (v31)
                {
                  p_shared_owners = (unint64_t *)&v31->__shared_owners_;
                  do
                    v33 = __ldaxr(p_shared_owners);
                  while (__stlxr(v33 - 1, p_shared_owners));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                *(_OWORD *)(a2 + 28) = v64;
                *(_OWORD *)(a2 + 36) = *(_OWORD *)v65;
                *(_QWORD *)(a2 + 43) = *(_QWORD *)&v65[14];
                v34 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
                if (*((_QWORD *)&v63 + 1))
                {
                  v35 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                    std::__shared_weak_count::__release_weak(v34);
                  }
                }
                goto LABEL_64;
              }
              ((void (*)(unsigned __int16 **, unsigned __int16 *, double))off_24C076500[v29])(&v68, a2 + 16, v28);
            }
            *((_QWORD *)a2 + 4) = &off_24C0736D0;
            *(_OWORD *)(a2 + 20) = v63;
            *(_OWORD *)(a2 + 28) = v64;
            *(_OWORD *)(a2 + 36) = *(_OWORD *)v65;
            *(_QWORD *)(a2 + 43) = *(_QWORD *)&v65[14];
            *((_DWORD *)a2 + 24) = 1;
LABEL_64:
            std::istream::~istream();
            *(_QWORD *)v73 = MEMORY[0x24BEDB848] + 16;
            if (v76 < 0)
              operator delete(__p);
            std::streambuf::~streambuf();
LABEL_67:
            v56 = a1[12];
            v57 = a1[9];
            a1[6] = *(_QWORD *)(v56 - 8) + *(_QWORD *)(v57 - 8) + 8;
            a1[9] = v57 - 8;
            a1[12] = v56 - 8;
            return;
          }
LABEL_47:
          sub_207F2245C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v45 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v45 != -1)
            ((void (*)(unsigned __int16 *, unsigned __int16 *))off_24C07B518[v45])(&v62, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C0736D0;
          v46 = *(_OWORD *)&v73[24];
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v73[8];
          *(_OWORD *)(a2 + 28) = v46;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v74;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v74[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_207F24EC8(a1, (uint64_t)(a2 + 16));
          goto LABEL_67;
        }
        sub_208072ECC(a1);
        v18 = a1[6];
        v17 = a1[7];
        v19 = v17 - v18;
        if (v17 < v18)
          v19 = 0;
        if (v19 > 7)
        {
          v20 = a1[3];
          v21 = *(_QWORD *)(v20 + v18);
          v22 = v18 + 8;
          a1[6] = v22;
          *(_QWORD *)v14 = v21;
          v4 = v17 >= v22;
          v23 = v17 - v22;
          if (!v4)
            v23 = 0;
          if (v23 > 7)
          {
            *((_QWORD *)a2 + 2) = *(_QWORD *)(v20 + v22);
            a1[6] += 8;
            v24 = a1[12];
            v25 = a1[9];
            a1[6] = *(_QWORD *)(v24 - 8) + *(_QWORD *)(v25 - 8) + 8;
            a1[9] = v25 - 8;
            a1[12] = v24 - 8;
            v26 = *a2;
            if (v26 != 1)
              goto LABEL_19;
            goto LABEL_47;
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_207CA4068(exception, "Not enough data to read span");
LABEL_86:
          __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
        }
      }
    }
LABEL_82:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_86;
  }
  *(_QWORD *)v73 = &off_24C0736D0;
  sub_207E16F34((uint64_t)&v73[8]);
  sub_207F225F0((uint64_t)&v62, (uint64_t)v73, 0);
  v37 = *(std::__shared_weak_count **)&v73[16];
  if (*(_QWORD *)&v73[16])
  {
    v38 = (unint64_t *)(*(_QWORD *)&v73[16] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  LODWORD(v64) = 0;
  v40 = a1[6];
  v41 = a1[7];
  v42 = v41 - v40;
  if (v41 < v40)
    v42 = 0;
  if (v42 <= 1)
    goto LABEL_83;
  v43 = *(_WORD *)(a1[3] + v40);
  a1[6] = v40 + 2;
  v62 = v43;
  v4 = v41 >= v40 + 2;
  v44 = v41 - (v40 + 2);
  if (!v4)
    v44 = 0;
  if (v44 <= 3)
  {
LABEL_83:
    v61 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v61, "Not enough data to read");
    v61->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v61, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  a1[6] = v40 + 6;
  sub_207E1E160(a1, &v63);
  if (v62 != 1)
  {
    v47 = sub_207F24D0C(v62);
    sub_207E1E238((uint64_t)v73, a1);
    v48 = sub_207E168B0((uint64_t)&v68, v78, v47);
    if (v67 != -1)
    {
      if (v67 == 1)
      {
        v49 = v69;
        v69 = 0uLL;
        v50 = *(std::__shared_weak_count **)&v65[8];
        *(_OWORD *)v65 = v49;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        *(_OWORD *)&v65[16] = v70;
        *(_OWORD *)v66 = *(_OWORD *)v71;
        *(_QWORD *)&v66[14] = *(_QWORD *)&v71[14];
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
        if (*((_QWORD *)&v69 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        goto LABEL_70;
      }
      ((void (*)(char *, char *, double))off_24C076500[v67])(&v72, (char *)&v64 + 8, v48);
    }
    *((_QWORD *)&v64 + 1) = &off_24C0736D0;
    *(_OWORD *)v65 = v69;
    *(_OWORD *)&v65[16] = v70;
    *(_OWORD *)v66 = *(_OWORD *)v71;
    *(_QWORD *)&v66[14] = *(_QWORD *)&v71[14];
    v67 = 1;
LABEL_70:
    std::istream::~istream();
    *(_QWORD *)v73 = MEMORY[0x24BEDB848] + 16;
    if (v76 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_73;
  }
  sub_207F222C8((uint64_t *)&v63, v64);
  if (v67 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24C07B518[v67])(&v68, (char *)&v64 + 8);
  *((_QWORD *)&v64 + 1) = &off_24C0736D0;
  *(_OWORD *)v65 = *(_OWORD *)&v73[8];
  *(_OWORD *)&v65[16] = *(_OWORD *)&v73[24];
  *(_OWORD *)v66 = *(_OWORD *)v74;
  *(_QWORD *)&v66[14] = *(_QWORD *)&v74[14];
  v67 = 1;
  sub_207F24EC8(a1, (uint64_t)&v64 + 8);
LABEL_73:
  *(_WORD *)v73 = v62;
  *(_OWORD *)&v73[8] = v63;
  v58 = v67;
  *(_DWORD *)&v73[24] = v64;
  v73[32] = 0;
  v77 = -1;
  if (v67 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v73;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v73[12];
    v59 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v59 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))off_24C076500[v59])(&v68, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24C0766B0[v67])(&v72, &v73[32], (char *)&v64 + 8);
    v77 = v58;
    *(_OWORD *)a2 = *(_OWORD *)v73;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v73[12];
    v68 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24C0766C0[v58])(&v68);
  }
  if (v77 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))off_24C076500[v77])(&v68, &v73[32]);
  if (v67 != -1)
    ((void (*)(_BYTE *, char *))off_24C076500[v67])(v73, (char *)&v64 + 8);
}

void sub_207E1DFF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1E00C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1E028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_207E18EFC((uint64_t)&a31);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E1E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_207E18EFC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_207E1E058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E1E078(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1E08C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1E0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_207E02E04((uint64_t)&a31);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E1E0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  uint64_t v43;

  if (a43 != -1)
    ((void (*)(char *, uint64_t))off_24C076500[a43])(&a22, v43);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E1E160(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_10;
  }
  v5 = result[3];
  v6 = *(_QWORD *)(v5 + v3);
  v7 = v3 + 8;
  result[6] = v7;
  *a2 = v6;
  v8 = v2 >= v7;
  v9 = v2 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  a2[1] = *(_QWORD *)(v5 + v7);
  result[6] += 8;
  return result;
}

void sub_207E1E210(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E1E224(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207E1E238(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::logic_error *v18;
  std::string __dst;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = a2[6];
  v8 = a2[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v11 = *(_QWORD *)(a2[3] + v7);
  a2[6] = v7 + 8;
  memset(&__dst, 0, sizeof(__dst));
  if (v11 && (std::string::append(&__dst, v11, 0), SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0))
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0])
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      p_dst = 0;
    }
  }
  else
  {
    p_dst = &__dst;
  }
  v13 = a2[6];
  v14 = a2[7];
  v9 = v14 >= v13;
  v15 = v14 - v13;
  if (!v9)
    v15 = 0;
  if (v15 < v11)
  {
    v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v18, "Not enough data to read binary blob");
    v18->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v18, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  memcpy(p_dst, (const void *)(a2[3] + v13), v11);
  a2[6] += v11;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  sub_207CC2D08(a1);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_207E1E46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_207E0E3A8(v15);
  _Unwind_Resume(a1);
}

void sub_207E1E50C(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v7;
  int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v4 = a4;
  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v12 = 3;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 7)
    {
      v10 = v12;
      v11 = sub_207E1E62C();
      sub_208212838((std::string *)v11, v10, 6u);
    }
    v7 = *a1;
  }
  v9 = 0;
  if (v4 >= 3 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
  }
  if (v4 >= 6)
    a4 = 6;
  else
    a4 = v4;
  if (a4 < 3)
  {
LABEL_15:
    sub_207E1EB04((uint64_t)&v13, a2, a3, a4);
    if (!v9)
      return;
    goto LABEL_16;
  }
  sub_207E1ED78(a2, a3, a4);
  if (!v9)
    return;
LABEL_16:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_207E1E62C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C130);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C130))
    return &xmmword_25452C118;
  v2 = sub_207E1E708();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C118, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C128 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C118 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C118, &dword_207C77000);
  __cxa_guard_release(&qword_25452C130);
  return &xmmword_25452C118;
}

void sub_207E1E6F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C130);
  _Unwind_Resume(a1);
}

std::string *sub_207E1E708()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C150);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C150))
    return &stru_25452C138;
  sub_207E1E920((uint64_t)__p);
  sub_207E1E7F8((char *)__p, &stru_25452C138);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C138, &dword_207C77000);
  __cxa_guard_release(&qword_25452C150);
  return &stru_25452C138;
}

void sub_207E1E7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C150);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C150);
  _Unwind_Resume(a1);
}

void sub_207E1E7F8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207E02D0C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_207E1E8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E1E920(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C170);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C170))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::DataInfoSample<6>]", qword_25452C158);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C158, &dword_207C77000);
    __cxa_guard_release(&qword_25452C170);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C190);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C190))
  {
    v5 = sub_207D49434(qword_25452C158, "<", 0);
    sub_207D49330(qword_25452C158, 0, v5, qword_25452C178);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C178, &dword_207C77000);
    __cxa_guard_release(&qword_25452C190);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C1B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C1B0))
  {
    sub_208215C6C((uint64_t)qword_25452C178, (uint64_t)&xmmword_25452C198);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C198, &dword_207C77000);
    __cxa_guard_release(&qword_25452C1B0);
  }
  if (byte_25452C1AF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C198, *((unint64_t *)&xmmword_25452C198 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C198;
    *(_QWORD *)(a1 + 16) = unk_25452C1A8;
  }
}

void sub_207E1EABC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C1B0);
  _Unwind_Resume(a1);
}

void sub_207E1EAD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C190);
  _Unwind_Resume(a1);
}

void sub_207E1EAEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C170);
  _Unwind_Resume(a1);
}

void sub_207E1EB04(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void **v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  sub_207E1F3C0((int *)&v10, (_BYTE *)a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    LOBYTE(v10) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v10);
    if ((_BYTE)v10)
    {
      if (!v29)
      {
        v27 = 0uLL;
        v28 = 0;
        v29 = 1;
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 144))(a2, &v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v29 = 0;
    }
  }
  v11 = v26;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_207CA40D8(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      v12 = v27;
      v13 = v28;
    }
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v22 = 0;
  LOBYTE(__p) = 0;
  v25 = 0;
  sub_207E15690(a3, (uint64_t)&v10);
  if (v25)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v24;
      v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0)
    operator delete(v20);
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
}

void sub_207E1ED34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_207E1ED78(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void *v14;
  void **v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24[2];
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  void *__p[2];
  uint64_t v30;
  char v31;

  __p[0] = *(void **)(a1 + 8);
  sub_207E1F3C0((int *)__p, (_BYTE *)a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  LOBYTE(__p[0]) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
  if (LOBYTE(__p[0]))
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    LOBYTE(v26[0]) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
    if (LOBYTE(v26[0]))
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      __p[0] = *(void **)(a1 + 8);
      sub_207E1F3C0((int *)__p, (_BYTE *)a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
      if (LOBYTE(__p[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      if ((*(_BYTE *)(a1 + 12) & 4) != 0)
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else
        {
          if (*(_BYTE *)(a2 + 104))
          {
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v8);
            *(_BYTE *)(a2 + 104) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        v10 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v10 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else
        {
          if (*(_BYTE *)(a2 + 136))
          {
            if (*(char *)(a2 + 135) < 0)
              operator delete(*v10);
            *(_BYTE *)(a2 + 136) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        LOBYTE(__p[0]) = 0;
        v31 = 0;
        LOBYTE(v26[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
        if (LOBYTE(v26[0]))
        {
          if (!v31)
          {
            __p[0] = 0;
            __p[1] = 0;
            v30 = 0;
            v31 = 1;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
        }
        else
        {
          if (v31)
          {
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
            v31 = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v24);
        }
        if (v31)
        {
          sub_207E146B4((char *)__p, (uint64_t)v24);
          *(_OWORD *)v26 = *(_OWORD *)v24;
          v27 = v25;
          v24[1] = 0;
          v25 = 0;
          v24[0] = 0;
          v28 = 1;
          sub_207E15554(a2 + 144, (uint64_t)v26);
          if (v28)
          {
            v15 = (void **)v26[0];
            if (v26[0])
            {
              v16 = (void **)v26[1];
              v17 = v26[0];
              if (v26[1] != v26[0])
              {
                do
                {
                  if (*((char *)v16 - 1) < 0)
                    operator delete(*(v16 - 3));
                  v16 -= 3;
                }
                while (v16 != v15);
                v17 = v26[0];
              }
              v26[1] = v15;
              operator delete(v17);
            }
          }
          v21 = (void **)v24[0];
          if (v24[0])
          {
            v22 = (void **)v24[1];
            v23 = v24[0];
            if (v24[1] != v24[0])
            {
              do
              {
                if (*((char *)v22 - 1) < 0)
                  operator delete(*(v22 - 3));
                v22 -= 3;
              }
              while (v22 != v21);
              v23 = v24[0];
            }
            v24[1] = v21;
            operator delete(v23);
          }
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v18 = *(_QWORD *)(a2 + 144);
          if (v18)
          {
            v19 = *(_QWORD *)(a2 + 152);
            v20 = *(void **)(a2 + 144);
            if (v19 != v18)
            {
              do
              {
                if (*(char *)(v19 - 1) < 0)
                  operator delete(*(void **)(v19 - 24));
                v19 -= 24;
              }
              while (v19 != v18);
              v20 = *(void **)(a2 + 144);
            }
            *(_QWORD *)(a2 + 152) = v18;
            operator delete(v20);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
        if (v31 && SHIBYTE(v30) < 0)
          operator delete(__p[0]);
      }
      else
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v8);
          *(_BYTE *)(a2 + 104) = 0;
        }
        v9 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v9 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else if (*(_BYTE *)(a2 + 136))
        {
          if (*(char *)(a2 + 135) < 0)
            operator delete(*v9);
          *(_BYTE *)(a2 + 136) = 0;
        }
        v11 = (void **)(a2 + 144);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 168))
          {
            *v11 = 0;
            *(_QWORD *)(a2 + 152) = 0;
            *(_QWORD *)(a2 + 160) = 0;
            *(_BYTE *)(a2 + 168) = 1;
          }
          sub_207E1F7E0(a1, (char **)(a2 + 144));
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v12 = (void **)*v11;
          if (*v11)
          {
            v13 = *(void ***)(a2 + 152);
            v14 = *v11;
            if (v13 != v12)
            {
              do
              {
                if (*((char *)v13 - 1) < 0)
                  operator delete(*(v13 - 3));
                v13 -= 3;
              }
              while (v13 != v12);
              v14 = *v11;
            }
            *(_QWORD *)(a2 + 152) = v12;
            operator delete(v14);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
      }
    }
  }
}

void sub_207E1F398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E1F3C0(int *a1, _BYTE *a2, uint64_t a3)
{
  char v6;
  _BYTE *v7;
  char v8;
  char *v9;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    if (v7 < 2)
    {
      v7 = 0;
      v8 = 0;
      (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v7);
      v9 = &v8;
      sub_207E1F65C(a2, &v9);
      v6 = v8;
      *(_QWORD *)a3 = v7;
      *(_BYTE *)(a3 + 8) = v6;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
      v7 = (_BYTE *)(a3 + 8);
      sub_207E1F65C(a2, &v7);
    }
  }
  else
  {
    sub_207E1F4CC(a1, a2, a3, v7);
  }
}

void sub_207E1F4CC(int *a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  char v10;
  unsigned int v11;
  __int128 *v12;
  _BYTE *v13;
  char v14;
  char *v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v13) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_207E14E7C();
      sub_208212838((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_207E1F65C(a2, &v13);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    v13 = 0;
    v14 = 0;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v13);
    v15 = &v14;
    sub_207E1F65C(a2, &v15);
    v10 = v14;
    *(_QWORD *)a3 = v13;
    *(_BYTE *)(a3 + 8) = v10;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_207E1F65C(a2, &v13);
  }
}

void sub_207E1F65C(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  char *v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = (char *)operator new(0x118uLL);
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_208215780((uint64_t)v5, v7);
    v15 = v6;
    v14 = 0;
    sub_208208160((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v6[*(_QWORD *)(v10 - 24)] = *(_QWORD *)(v9 + 64);
    *((_QWORD *)v6 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v6 + 2) = v11;
    if (v6[111] < 0)
      operator delete(*((void **)v6 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v6 + 128);
    operator delete(v6);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_207E1F7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_2082155DC(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E1F7E0(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v12);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v12 > v5)
  {
    sub_207E18550(a2, v12 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v12 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[24 * v12];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0)
      operator delete(*((void **)v4 - 3));
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v11 = 24 * (v9 / 24);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 144))(a1, v6);
      v6 += 24;
      v11 -= 24;
    }
    while (v11);
  }
}

void sub_207E1F904(int *a1, _BYTE *a2, unsigned __int16 *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_207E1FA1C();
      sub_208212838((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    sub_207E202C0((uint64_t)a2, a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_207E1FDCC(a2, (uint64_t)a3);
  else
    sub_207E202C0((uint64_t)a2, a3);
}

__int128 *sub_207E1FA1C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C030);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C030))
    return &xmmword_25452C018;
  v2 = sub_207E1FAF8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452C018, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452C028 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452C018 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C018, &dword_207C77000);
  __cxa_guard_release(&qword_25452C030);
  return &xmmword_25452C018;
}

void sub_207E1FAE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C030);
  _Unwind_Resume(a1);
}

std::string *sub_207E1FAF8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C050);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C050))
    return &stru_25452C038;
  sub_207E1FBE8((uint64_t)__p);
  sub_207D50234((char *)__p, &stru_25452C038);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C038, &dword_207C77000);
  __cxa_guard_release(&qword_25452C050);
  return &stru_25452C038;
}

void sub_207E1FBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C050);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C050);
  _Unwind_Resume(a1);
}

void sub_207E1FBE8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452C070);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452C070))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageSample<>]", qword_25452C058);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C058, &dword_207C77000);
    __cxa_guard_release(&qword_25452C070);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452C090);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452C090))
  {
    v5 = sub_207D49434(qword_25452C058, "<", 0);
    sub_207D49330(qword_25452C058, 0, v5, qword_25452C078);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452C078, &dword_207C77000);
    __cxa_guard_release(&qword_25452C090);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C0B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C0B0))
  {
    sub_208215C6C((uint64_t)qword_25452C078, (uint64_t)&xmmword_25452C098);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452C098, &dword_207C77000);
    __cxa_guard_release(&qword_25452C0B0);
  }
  if (byte_25452C0AF < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452C098, *((unint64_t *)&xmmword_25452C098 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452C098;
    *(_QWORD *)(a1 + 16) = unk_25452C0A8;
  }
}

void sub_207E1FD84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C0B0);
  _Unwind_Resume(a1);
}

void sub_207E1FD9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C090);
  _Unwind_Resume(a1);
}

void sub_207E1FDB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C070);
  _Unwind_Resume(a1);
}

void sub_207E1FDCC(_BYTE *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  double v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  __int128 v19;
  int v20;
  uint64_t (**v21)();
  __int128 v22;
  __int128 v23;
  _BYTE v24[22];
  unsigned int v25;
  _BYTE v26[40];
  _BYTE v27[22];
  void *__p;
  char v29;
  int v30;
  _QWORD v31[21];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[22];
  char v36;

  *(_QWORD *)v26 = &off_24C0736D0;
  sub_207E16F34((uint64_t)&v26[8]);
  sub_207F225F0((uint64_t)&v18, (uint64_t)v26, 0);
  v4 = *(std::__shared_weak_count **)&v26[16];
  if (*(_QWORD *)&v26[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v26[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v20 = 0;
  *(_QWORD *)v26 = &v18;
  sub_207E206A0(a1, (_WORD **)v26);
  *(_DWORD *)v26 = 1;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v26);
  *(_QWORD *)v26 = &v19;
  sub_207E20BD4(a1, (_QWORD **)v26);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 104))(a1, (char *)&v19 + 8);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 104))(a1, (char *)&v19 + 12);
  if (v18 == 1)
  {
    sub_207F222C8((uint64_t *)&v19, v20);
    if (v25 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24C07B518[v25])(&v32, &v21);
    v21 = &off_24C0736D0;
    v22 = *(_OWORD *)&v26[8];
    v23 = *(_OWORD *)&v26[24];
    *(_OWORD *)v24 = *(_OWORD *)v27;
    *(_QWORD *)&v24[14] = *(_QWORD *)&v27[14];
    v25 = 1;
    sub_207F24EC8(a1, (uint64_t)&v21);
    goto LABEL_27;
  }
  v7 = sub_207F24D0C(v18);
  sub_207E20D54((uint64_t)v26, (uint64_t)a1);
  v8 = sub_207E168B0((uint64_t)&v32, v31, v7);
  if (v25 != -1)
  {
    if (v25 == 1)
    {
      v9 = v33;
      v33 = 0uLL;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      v22 = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v23 = v34;
      *(_OWORD *)v24 = *(_OWORD *)v35;
      *(_QWORD *)&v24[14] = *(_QWORD *)&v35[14];
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_24;
    }
    ((void (*)(char *, uint64_t (***)(), double))off_24C076500[v25])(&v36, &v21, v8);
  }
  v21 = &off_24C0736D0;
  v22 = v33;
  v23 = v34;
  *(_OWORD *)v24 = *(_OWORD *)v35;
  *(_QWORD *)&v24[14] = *(_QWORD *)&v35[14];
  v25 = 1;
LABEL_24:
  std::istream::~istream();
  *(_QWORD *)v26 = MEMORY[0x24BEDB848] + 16;
  if (v29 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_27:
  *(_WORD *)v26 = v18;
  *(_OWORD *)&v26[8] = v19;
  v16 = v25;
  *(_DWORD *)&v26[24] = v20;
  v26[32] = 0;
  v30 = -1;
  if (v25 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v26;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v26[12];
    v17 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24C076500[v17])(&v32, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24C0766B0[v25])(&v36, &v26[32], &v21);
    v30 = v16;
    *(_OWORD *)a2 = *(_OWORD *)v26;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v26[12];
    v32 = a2 + 32;
    ((void (*)(uint64_t *))off_24C0766C0[v16])(&v32);
  }
  if (v30 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_24C076500[v30])(&v32, &v26[32]);
  if (v25 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))off_24C076500[v25])(v26, &v21);
}

void sub_207E201F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_207E18EFC((uint64_t)&a22);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E2021C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_207E02E04((uint64_t)&a22);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E20238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))off_24C076500[a34])(v35 - 136, v34);
  sub_207E178F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E202C0(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  unsigned int v5;
  __int128 *v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _BYTE v20[22];
  void *__p;
  char v22;
  _QWORD v23[22];
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[22];
  char v28;

  v19[0] = a2;
  sub_207E206A0((_BYTE *)a1, (_WORD **)v19);
  v4 = *(_DWORD *)(a1 + 8);
  LODWORD(v19[0]) = 2;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, v19);
  if (v4 < 1)
  {
    if (LODWORD(v19[0]) >= 2)
    {
      v19[0] = a2 + 4;
      sub_207E20BD4((_BYTE *)a1, (_QWORD **)v19);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 8);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 10);
      v7 = *a2;
      if (v7 != 1)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if (v4 == 2)
  {
    if (LODWORD(v19[0]) >= 2)
    {
      LODWORD(v19[0]) = 2;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, v19);
      v5 = v19[0];
      if (LODWORD(v19[0]) >= 3)
      {
        v6 = sub_207E20824();
        sub_208212838((std::string *)v6, v5, 2u);
      }
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v19[0] = a2 + 4;
      sub_207E20BD4((_BYTE *)a1, (_QWORD **)v19);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 8);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 10);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v7 = *a2;
      if (v7 != 1)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if (LODWORD(v19[0]) > 1)
  {
    goto LABEL_10;
  }
  *(_OWORD *)v19 = 1uLL;
  v24 = v19;
  sub_207E20BD4((_BYTE *)a1, &v24);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, &v19[1]);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 104))(a1, (unint64_t)v19 | 0xC);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)v19;
  v7 = *a2;
  if (v7 != 1)
  {
LABEL_11:
    v8 = sub_207F24D0C(v7);
    sub_207E20D54((uint64_t)v19, a1);
    v9 = sub_207E168B0((uint64_t)&v24, v23, v8);
    v10 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v10 != -1)
    {
      if ((_DWORD)v10 == 1)
      {
        v11 = v25;
        v25 = 0uLL;
        v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
        *(_OWORD *)(a2 + 20) = v11;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(_OWORD *)(a2 + 28) = v26;
        *(_OWORD *)(a2 + 36) = *(_OWORD *)v27;
        *(_QWORD *)(a2 + 43) = *(_QWORD *)&v27[14];
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
        if (*((_QWORD *)&v25 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        goto LABEL_29;
      }
      ((void (*)(char *, unsigned __int16 *, double))off_24C076500[v10])(&v28, a2 + 16, v9);
    }
    *((_QWORD *)a2 + 4) = &off_24C0736D0;
    *(_OWORD *)(a2 + 20) = v25;
    *(_OWORD *)(a2 + 28) = v26;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v27;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v27[14];
    *((_DWORD *)a2 + 24) = 1;
LABEL_29:
    std::istream::~istream();
    v19[0] = MEMORY[0x24BEDB848] + 16;
    if (v22 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    return;
  }
LABEL_24:
  sub_207F2245C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
  v18 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v18 != -1)
    ((void (*)(_QWORD **, unsigned __int16 *))off_24C07B518[v18])(&v24, a2 + 16);
  *((_QWORD *)a2 + 4) = &off_24C0736D0;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v19[1];
  *(_OWORD *)(a2 + 28) = *(_OWORD *)&v19[3];
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v20[14];
  *((_DWORD *)a2 + 24) = 1;
  sub_207F24EC8((const void *)a1, (uint64_t)(a2 + 16));
}

void sub_207E2068C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E18EFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E206A0(_BYTE *a1, _WORD **a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int16 v14;
  char *v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = (char *)operator new(0x118uLL);
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_208215780((uint64_t)v5, v7);
    v15 = v6;
    v14 = 0;
    sub_207F24118((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v6[*(_QWORD *)(v10 - 24)] = *(_QWORD *)(v9 + 64);
    *((_QWORD *)v6 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v6 + 2) = v11;
    if (v6[111] < 0)
      operator delete(*((void **)v6 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v6 + 128);
    operator delete(v6);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 96))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_207E207E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_2082155DC(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *sub_207E20824()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BF90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BF90))
    return &xmmword_25452BF78;
  v2 = sub_207E20900();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(&xmmword_25452BF78, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25452BF88 = v2->__r_.__value_.__r.__words[2];
    xmmword_25452BF78 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BF78, &dword_207C77000);
  __cxa_guard_release(&qword_25452BF90);
  return &xmmword_25452BF78;
}

void sub_207E208E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BF90);
  _Unwind_Resume(a1);
}

std::string *sub_207E20900()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452BFB0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452BFB0))
    return &stru_25452BF98;
  sub_207E209F0((uint64_t)__p);
  sub_207D50234((char *)__p, &stru_25452BF98);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452BF98, &dword_207C77000);
  __cxa_guard_release(&qword_25452BFB0);
  return &stru_25452BF98;
}

void sub_207E209B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452BFB0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452BFB0);
  _Unwind_Resume(a1);
}

void sub_207E209F0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25452BFD0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25452BFD0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageStructureSample<>]", qword_25452BFB8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BFB8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BFD0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25452BFF0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25452BFF0))
  {
    v5 = sub_207D49434(qword_25452BFB8, "<", 0);
    sub_207D49330(qword_25452BFB8, 0, v5, qword_25452BFD8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25452BFD8, &dword_207C77000);
    __cxa_guard_release(&qword_25452BFF0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25452C010);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25452C010))
  {
    sub_208215C6C((uint64_t)qword_25452BFD8, (uint64_t)&xmmword_25452BFF8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25452BFF8, &dword_207C77000);
    __cxa_guard_release(&qword_25452C010);
  }
  if (byte_25452C00F < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)xmmword_25452BFF8, *((unint64_t *)&xmmword_25452BFF8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25452BFF8;
    *(_QWORD *)(a1 + 16) = unk_25452C008;
  }
}

void sub_207E20B8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452C010);
  _Unwind_Resume(a1);
}

void sub_207E20BA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BFF0);
  _Unwind_Resume(a1);
}

void sub_207E20BBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25452BFD0);
  _Unwind_Resume(a1);
}

void sub_207E20BD4(_BYTE *a1, _QWORD **a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[2];

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = (char *)operator new(0x118uLL);
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_208215780((uint64_t)v5, v7);
    v14[0] = 0;
    v14[1] = v6;
    sub_207F24784((uint64_t *)v6, v14);
    v8 = v14[0];
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v6[*(_QWORD *)(v10 - 24)] = *(_QWORD *)(v9 + 64);
    *((_QWORD *)v6 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v6 + 2) = v11;
    if (v6[111] < 0)
      operator delete(*((void **)v6 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v6 + 128);
    operator delete(v6);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 120))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_207E20D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_2082155DC(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_207E20D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)a2 + 120))(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 272))(a2, v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_207CC2D08(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_207E20EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_207E0E3A8(v16);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E20F54(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *result;
  __int128 v13;
  _OWORD v14[2];

  v6 = (char *)operator new(0x110uLL);
  sub_207D56E28(a2, (uint64_t)&v13);
  *(_QWORD *)v6 = off_24C073B78;
  *((_QWORD *)v6 + 1) = &off_24C073BC8;
  v7 = v13;
  v8 = v14[0];
  v13 = 0uLL;
  *((_OWORD *)v6 + 1) = v7;
  *((_OWORD *)v6 + 2) = v8;
  *(_OWORD *)(v6 + 46) = *(_OWORD *)((char *)v14 + 14);
  sub_207D47D34((uint64_t)(v6 + 64), a3);
  *(_QWORD *)v6 = off_24C073728;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)v6 = off_24C078EA0;
  *a1 = &off_24C078D18;
  a1[1] = v6;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a1[2] = result;
  return result;
}

void sub_207E21068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  _QWORD *v9;

  sub_207EFF84C(v9);
  sub_207D56CB8(&a9);
  _Unwind_Resume(a1);
}

void sub_207E21084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  v2[1] = v3;
  v5 = (std::__shared_weak_count *)v2[3];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_207D56D4C((uint64_t *)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_207E210DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_207E210F0(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076B88, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_2081F1E44((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2081F3DDC(v4, &v13);
    sub_207E0BDBC(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2081F1E44(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2081F3DDC(v4, &v13);
    sub_207E0D294(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_207E2129C(const void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;

  v3 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076BD0, 0);
  v4 = v3;
  if (v3)
  {
    v5 = v3[3];
    if (*(_BYTE *)(v5 + 40))
    {
      v19 = (uint64_t *)(v5 + 16);
      sub_208210C8C(&v19, 6u);
    }
    else
    {
      sub_208210F00((uint64_t)&v19, v5 + 8);
    }
    sub_20820C2C0(v4[3]);
    sub_207E0E660((uint64_t)v4, a2 + 16, 6u);
    v6 = v4[3];
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
    sub_20820C0E8((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
    v8 = *(_QWORD *)(v6 + 48);
    if (v8)
      memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
    *(_QWORD *)(v6 + 48) = 0;
    v9 = *(_QWORD *)(v6 + 80);
    v10 = *(_QWORD *)(v6 + 88) - 8;
    *(_QWORD *)(v6 + 88) = v10;
    if (v9 == v10)
    {
      std::ostream::write();
      if (*(_BYTE *)(v6 + 40))
      {
        free(*(void **)(v6 + 24));
        *(_BYTE *)(v6 + 40) = 0;
      }
    }
    v11 = a2 + 192;
    v12 = v4[3];
    if (*(_BYTE *)(v12 + 40))
    {
      v19 = (uint64_t *)(v12 + 16);
      sub_208210C8C(&v19, 2u);
    }
    else
    {
      sub_208210F00((uint64_t)&v19, v12 + 8);
    }
    sub_20820C2C0(v4[3]);
    sub_207E0F000(v4, v11);
    v13 = v4[3];
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_20820C0E8((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
    v15 = *(_QWORD *)(v13 + 48);
    if (v15)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
    *(_QWORD *)(v13 + 48) = 0;
    v16 = *(_QWORD *)(v13 + 80);
    v17 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v17;
    if (v16 == v17)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
    }
  }
  return v4 != 0;
}

BOOL sub_207E2146C(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076C58, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_2081F17E4((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2081F20F8(v4, &v13);
    sub_207E0F904(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2081F17E4(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_2081F20F8(v4, &v13);
    sub_207E10638(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_207E21618(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA50, (const struct __class_type_info *)&unk_24C076CA0, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (v3[5])
    {
      v5 = (_QWORD *)v3[3];
      v16 = *(_BYTE *)(v4 + 32);
      sub_207CBAB98(v5, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_207E11040(v4, a2 + 16, 6u);
    v6 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v7 = *(_QWORD **)(v4 + 24);
      v17 = *(_BYTE *)(v4 + 32);
      sub_207CBAB98(v7, (uint64_t)&v17, 1);
    }
    v8 = *(_QWORD **)(v4 + 24);
    v18 = v6;
    sub_207CBAB98(v8, (uint64_t)&v18, 1);
    v9 = *(_QWORD *)(v4 + 40);
    v10 = (__int128 *)(a2 + 192);
    *(_QWORD *)(v4 + 40) = v9 + 1;
    if (v9 != -1)
    {
      v11 = *(_QWORD **)(v4 + 24);
      v19 = *(_BYTE *)(v4 + 32);
      sub_207CBAB98(v11, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_207E1170C((uint64_t (**)())v4, v10);
    v12 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v13 = *(_QWORD **)(v4 + 24);
      v20 = *(_BYTE *)(v4 + 32);
      sub_207CBAB98(v13, (uint64_t)&v20, 1);
    }
    v14 = *(_QWORD **)(v4 + 24);
    v21 = v12;
    sub_207CBAB98(v14, (uint64_t)&v21, 1);
    ++*(_QWORD *)(v4 + 40);
  }
  return v4 != 0;
}

BOOL sub_207E21784(uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)();
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int __src;
  int v12;
  uint64_t v13;

  v2 = *(uint64_t (***)())a1;
  if (*(uint64_t (***)())a1 == &off_24C082C60)
  {
    v5 = a2 + 16;
    __src = 6;
    v6 = a1 + 24;
    sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_208072A10((_QWORD *)a1);
    sub_207E11EF8(a1, v5, v7);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v12 = 2;
    sub_207D0B114(v6, *(char **)(a1 + 32), (char *)&v12, (char *)&v13, 4);
    sub_208072A10((_QWORD *)a1);
    sub_207E12748(a1, a2 + 192);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  return v2 == &off_24C082C60;
}

void sub_207E218B4(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v4 = a1 + 16;
  v5 = a2[2];
  v9 = 6;
  (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  v6 = v9;
  if (v5 < 1)
  {
    sub_207E12E90((uint64_t)a2, v4, v9);
  }
  else
  {
    if (v5 == 2)
    {
      v9 = 3;
      (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(int *))(*(_QWORD *)a2 + 16))(a2);
    sub_207E12E90((uint64_t)a2, v4, v6);
    (*(void (**)(int *))(*(_QWORD *)a2 + 24))(a2);
  }
  v7 = a1 + 192;
  v8 = a2[2];
  v9 = 2;
  (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (v8 < 1)
  {
    sub_207E13764(a2, v7);
  }
  else
  {
    if (v8 == 2)
    {
      v9 = 2;
      (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(int *))(*(_QWORD *)a2 + 16))(a2);
    sub_207E13764(a2, v7);
    (*(void (**)(int *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_207E21A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9[3];
  unsigned int v10;

  v4 = a1 + 16;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v10 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v5 + 104))(a2, &v10);
  if (v9[0] < 1)
  {
    if (v10 < 3)
      sub_207E1EB04((uint64_t)&v10, a2, v4, v10);
    else
      sub_207E1ED78(a2, v4, v10);
  }
  else
  {
    sub_207E1E50C(v9, a2, v4, v10);
  }
  v6 = (unsigned __int16 *)(a1 + 192);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v8 = v9[0];
  v10 = 2;
  (*(void (**)(uint64_t, unsigned int *))(v7 + 104))(a2, &v10);
  if (v8 < 1)
  {
    if (v10 < 2)
      sub_207E1FDCC((_BYTE *)a2, (uint64_t)v6);
    else
      sub_207E202C0(a2, v6);
  }
  else
  {
    sub_207E1F904(v9, (_BYTE *)a2, v6, v10);
  }
}

uint64_t *sub_207E21B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_2081F1E44(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2081F3DDC(a2, v10);
  v6 = v10[0];
  sub_207E224F0((uint64_t)v9, a3);
  sub_207E21C24(a2, v9, v6);
  result = sub_207E080B8(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_207E21C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E080B8(&a9);
  _Unwind_Resume(a1);
}

void sub_207E21C24(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  float *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  float *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  float *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float **v36;
  float **v37;
  float *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  float **v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  float *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(float **)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = (uint64_t)v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_2081F50E4(a1, (float **)&v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E233E4(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(float **)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = (uint64_t)v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F50E4(a1, (float **)&v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E233E4(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(float **)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = (uint64_t)v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F50E4(a1, (float **)&v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E233E4(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_2081F1FC0(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_207E233E4(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_207E233E4(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_2081F1FC0(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(float **)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = (uint64_t)v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F4894(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v36 = (float **)a2[28];
  v37 = (float **)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = (uint64_t)v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F4894(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v41 = (float **)a2[32];
  v42 = (float **)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = (uint64_t)v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F50E4(a1, (float **)&v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(float **)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = (uint64_t)v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F4894(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_2081F1A98(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_20806DC2C((void ***)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_207E233E4(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_2081F50E4(a1, (float **)&v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_2081F1E44(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_2081F3DDC(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_2081F3DDC(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_2081F50E4(a1, (float **)&v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_2081F50E4(a1, (float **)&v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_2081F3DDC(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_2081F50E4(a1, (float **)&v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_207E224D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E224F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = sub_207E226A0((_QWORD *)a1, a2);
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a2 + 32);
  sub_207E226A0(v4 + 5, a2 + 40);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_207E226A0((_QWORD *)(a1 + 80), a2 + 80);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  sub_207E22908((_QWORD *)(a1 + 120), a2 + 120);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  sub_207E22908((_QWORD *)(a1 + 160), a2 + 160);
  sub_207E22B1C((_QWORD *)(a1 + 192), a2 + 192);
  sub_207E22D84((_QWORD *)(a1 + 224), a2 + 224);
  sub_207E22FA4((_QWORD *)(a1 + 256), a2 + 256);
  sub_207E22B1C((_QWORD *)(a1 + 288), a2 + 288);
  v5 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v5;
  sub_207E231C4((_QWORD *)(a1 + 352), a2 + 352);
  return a1;
}

void sub_207E225EC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  sub_207E08464(v9);
  sub_207E084F0(v8);
  sub_207E08570(v7);
  sub_207E08464(v6);
  sub_207E085F0(v5);
  sub_207E085F0(v4);
  sub_207E0866C(v3);
  sub_207E0866C(v2);
  sub_207E0866C(v1);
  _Unwind_Resume(a1);
}

void sub_207E22660()
{
  JUMPOUT(0x207E22638);
}

void sub_207E22668()
{
  JUMPOUT(0x207E22640);
}

void sub_207E22670(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_207E0866C(v2);
  sub_207E0866C(v1);
  _Unwind_Resume(a1);
}

void sub_207E2268C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_207E0866C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E226A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_207CA9F48();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C076700[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_207CA420C();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_207CA9F48();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C076710[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_207E227BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C076560[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E22830()
{
  return 0;
}

uint64_t sub_207E22838()
{
  return 0x100000000;
}

void *sub_207E22840(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_207E22870(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_207E22908(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_207CA9F48();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C076720[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v11 = v7;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_207CA9F48();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C076730[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[v7];
  }
  return a1;
}

void sub_207E22A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = *(_DWORD *)(v14 + 16) - v17;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C076550[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E22A64()
{
  return 0;
}

uint64_t sub_207E22A6C()
{
  return 0x100000000;
}

void *sub_207E22A74(unsigned int **a1)
{
  return operator new(**a1);
}

vm_address_t sub_207E22AA0(unsigned int **a1)
{
  vm_size_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 4095) & 0x1FFFFF000;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_207E22B1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_207CA9F48();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C076740[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_207CA420C();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_207CA9F48();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C076750[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_207E22C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C076520[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E22CAC()
{
  return 0;
}

uint64_t sub_207E22CB4()
{
  return 0x100000000;
}

void *sub_207E22CBC(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_207E22CEC(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_207E22D84(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_207CA9F48();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C076760[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_207CA420C();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_207CA9F48();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C076770[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_207E22E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C076540[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E22EEC()
{
  return 0;
}

uint64_t sub_207E22EF4()
{
  return 0x100000000;
}

void *sub_207E22EFC(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_207E22F28(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_207E22FA4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_207CA9F48();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C076780[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_207CA420C();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_207CA9F48();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C076790[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_207E230A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C076530[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E2310C()
{
  return 0;
}

uint64_t sub_207E23114()
{
  return 0x100000000;
}

void *sub_207E2311C(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_207E23148(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_207E231C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_207CA9F48();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C0767A0[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_207CA420C();
    v11 = (unint64_t)v7 >> 2;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_207CA9F48();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C0767B0[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_207E232C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C076510[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E2332C()
{
  return 0;
}

uint64_t sub_207E23334()
{
  return 0x100000000;
}

void *sub_207E2333C(unsigned int **a1)
{
  return operator new(4 * **a1);
}

vm_address_t sub_207E23368(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 1023) & 0x1FFFFFC00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 4 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_207E233E4(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_207E234E4((uint64_t)v5, a2);
  if (v6 == -1)
    sub_207CA9F48();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v6])(&v8, v5);
  sub_2081F42A4(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_207E234A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E234BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E234D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E234E4(uint64_t a1, _DWORD *a2)
{
  _OWORD *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  _QWORD v22[5];
  _QWORD *v23;

  v4 = operator new(0x118uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  *((_QWORD *)v4 + 34) = 0;
  sub_207CA2878((uint64_t)v4);
  v22[0] = v4;
  v5 = "unknown";
  v6 = 7;
  switch(*a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v5 = "per-vertex";
      v6 = 10;
      goto LABEL_4;
    case 2:
      v5 = "per-face";
      v6 = 8;
LABEL_4:
      sub_207CBAB98((_QWORD *)v4 + 2, (uint64_t)v5, v6);
      break;
    case 3:
      sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Mesh/src/TriMesh.cpp", 46, (uint64_t)"", 0, (uint64_t)"Unsupported type", 16, (void (*)(void **))sub_208216974);
      abort();
    default:
      break;
  }
  v7 = *((_DWORD *)v4 + 30);
  if ((v7 & 0x10) != 0)
  {
    v10 = *((_QWORD *)v4 + 14);
    v11 = *((_QWORD *)v4 + 9);
    if (v10 < v11)
    {
      *((_QWORD *)v4 + 14) = v11;
      v10 = v11;
    }
    v12 = (const void *)*((_QWORD *)v4 + 8);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v21) = 0;
      v9 = __dst;
      goto LABEL_18;
    }
    v12 = (const void *)*((_QWORD *)v4 + 5);
    v8 = *((_QWORD *)v4 + 7) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_207C95C50();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v21 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_17;
  }
  HIBYTE(v21) = v8;
  v9 = __dst;
  if (v8)
LABEL_17:
    memmove(v9, v12, v8);
LABEL_18:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v22[0];
  if (v22[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v22[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v15 + 128);
    operator delete((void *)v15);
  }
  v22[0] = a1;
  v22[1] = __dst;
  v22[2] = a1;
  v22[3] = __dst;
  v22[4] = __dst;
  v19 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v19 == -1)
    sub_207CA9F48();
  v23 = v22;
  ((void (*)(_QWORD **, uint64_t, uint64_t))off_24C0765C8[v19])(&v23, a1, v6);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_207E23794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E237BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E237D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11[48];

  v5 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v11[0] = (uint64_t *)(v5 + 16);
    sub_208210C8C(v11, 4u);
  }
  else
  {
    sub_208210F00((uint64_t)v11, v5 + 8);
  }
  sub_20820C2C0(*(_QWORD *)(a2 + 24));
  sub_207E224F0((uint64_t)v11, a3);
  sub_207E238F8(a2, (uint64_t)v11, 4u);
  sub_207E080B8((uint64_t *)v11);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
}

void sub_207E238E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E080B8(&a9);
  _Unwind_Resume(a1);
}

void sub_207E238F8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  BOOL v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *i;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *j;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  size_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  size_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  size_t v95;
  char *v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *k;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  size_t v149;
  size_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  size_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  std::bad_alloc *exception;
  std::bad_alloc *v198;
  uint64_t *v199;
  char v200;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v199 = (uint64_t *)(v7 + 16);
    sub_20821166C(&v199, v6);
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
      goto LABEL_7;
  }
  else
  {
    sub_208211974();
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
    {
      do
      {
LABEL_7:
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v13 + 40))
            break;
          v10 = *v8;
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v10);
          std::ostream::write();
          v11 = v8[1];
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v11);
          std::ostream::write();
          v12 = v8[2];
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v12);
          std::ostream::write();
          v8 += 3;
          if (v8 == v9)
            goto LABEL_43;
        }
        v14 = *v8;
        v15 = *(_QWORD *)(v13 + 32);
        v16 = *(_QWORD *)(v13 + 16);
        if ((unint64_t)(v15 - v16) >= 5)
        {
          v20 = *(char **)(v13 + 24);
        }
        else
        {
          if (v15)
            v17 = 2 * v15;
          else
            v17 = 0x2000;
          v18 = v16 + 5;
          while (v17 < v18)
          {
            v19 = (uint64_t)v17 <= 0;
            v17 *= 2;
            if (v19)
            {
              v17 = v18;
              break;
            }
          }
          v20 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v17, 0xAD6A59EEuLL);
          if (!v20)
          {
LABEL_316:
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v198 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v198, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v13 + 24) = v20;
          *(_QWORD *)(v13 + 32) = v17;
          v16 = *(_QWORD *)(v13 + 16);
        }
        v21 = &v20[v16];
        *v21 = -54;
        *(_DWORD *)(v21 + 1) = bswap32(v14);
        v22 = *(_QWORD *)(v13 + 16);
        v23 = v22 + 5;
        *(_QWORD *)(v13 + 16) = v22 + 5;
        v24 = v8[1];
        v25 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v25 - (v22 + 5)) >= 5)
        {
          v27 = *(char **)(v13 + 24);
        }
        else
        {
          if (v25)
            v26 = 2 * v25;
          else
            v26 = 0x2000;
          while (v26 < v22 + 10)
          {
            v19 = (uint64_t)v26 <= 0;
            v26 *= 2;
            if (v19)
            {
              v26 = v22 + 10;
              break;
            }
          }
          v27 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v26, 0xAD6A59EEuLL);
          if (!v27)
            goto LABEL_316;
          *(_QWORD *)(v13 + 24) = v27;
          *(_QWORD *)(v13 + 32) = v26;
          v23 = *(_QWORD *)(v13 + 16);
        }
        v28 = &v27[v23];
        *v28 = -54;
        *(_DWORD *)(v28 + 1) = bswap32(v24);
        v29 = *(_QWORD *)(v13 + 16);
        v30 = v29 + 5;
        *(_QWORD *)(v13 + 16) = v29 + 5;
        v31 = v8[2];
        v32 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v32 - (v29 + 5)) >= 5)
        {
          v34 = *(char **)(v13 + 24);
        }
        else
        {
          if (v32)
            v33 = 2 * v32;
          else
            v33 = 0x2000;
          while (v33 < v29 + 10)
          {
            v19 = (uint64_t)v33 <= 0;
            v33 *= 2;
            if (v19)
            {
              v33 = v29 + 10;
              break;
            }
          }
          v34 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v33, 0xAD6A59EEuLL);
          if (!v34)
            goto LABEL_316;
          *(_QWORD *)(v13 + 24) = v34;
          *(_QWORD *)(v13 + 32) = v33;
          v30 = *(_QWORD *)(v13 + 16);
        }
        v35 = &v34[v30];
        *v35 = -54;
        *(_DWORD *)(v35 + 1) = bswap32(v31);
        *(_QWORD *)(v13 + 16) += 5;
        v8 += 3;
      }
      while (v8 != v9);
    }
  }
LABEL_43:
  v36 = *(_DWORD *)(a2 + 32);
  v37 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v37 + 40))
  {
    v199 = (uint64_t *)(v37 + 16);
    sub_208210C8C(&v199, v36);
  }
  else
  {
    sub_208210F00((uint64_t)&v199, v37 + 8);
  }
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  v39 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v39 + 40))
  {
    v199 = (uint64_t *)(v39 + 16);
    sub_20821166C(&v199, v38);
    v40 = *(unsigned int **)(a2 + 40);
    i = *(unsigned int **)(a2 + 48);
    if (i != v40)
      goto LABEL_52;
  }
  else
  {
    sub_208211974();
    v40 = *(unsigned int **)(a2 + 40);
    for (i = *(unsigned int **)(a2 + 48); v40 != i; v40 += 3)
    {
LABEL_52:
      while (1)
      {
        v45 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v45 + 40))
          break;
        v42 = *v40;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v42);
        std::ostream::write();
        v43 = v40[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v43);
        std::ostream::write();
        v44 = v40[2];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v44);
        std::ostream::write();
        v40 += 3;
        if (v40 == i)
          goto LABEL_88;
      }
      v46 = *v40;
      v47 = *(_QWORD *)(v45 + 32);
      v48 = *(_QWORD *)(v45 + 16);
      if ((unint64_t)(v47 - v48) >= 5)
      {
        v51 = *(char **)(v45 + 24);
      }
      else
      {
        if (v47)
          v49 = 2 * v47;
        else
          v49 = 0x2000;
        v50 = v48 + 5;
        while (v49 < v50)
        {
          v19 = (uint64_t)v49 <= 0;
          v49 *= 2;
          if (v19)
          {
            v49 = v50;
            break;
          }
        }
        v51 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v49, 0xAD6A59EEuLL);
        if (!v51)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v51;
        *(_QWORD *)(v45 + 32) = v49;
        v48 = *(_QWORD *)(v45 + 16);
      }
      v52 = &v51[v48];
      *v52 = -54;
      *(_DWORD *)(v52 + 1) = bswap32(v46);
      v53 = *(_QWORD *)(v45 + 16);
      v54 = v53 + 5;
      *(_QWORD *)(v45 + 16) = v53 + 5;
      v55 = v40[1];
      v56 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v56 - (v53 + 5)) >= 5)
      {
        v58 = *(char **)(v45 + 24);
      }
      else
      {
        if (v56)
          v57 = 2 * v56;
        else
          v57 = 0x2000;
        while (v57 < v53 + 10)
        {
          v19 = (uint64_t)v57 <= 0;
          v57 *= 2;
          if (v19)
          {
            v57 = v53 + 10;
            break;
          }
        }
        v58 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v57, 0xAD6A59EEuLL);
        if (!v58)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v58;
        *(_QWORD *)(v45 + 32) = v57;
        v54 = *(_QWORD *)(v45 + 16);
      }
      v59 = &v58[v54];
      *v59 = -54;
      *(_DWORD *)(v59 + 1) = bswap32(v55);
      v60 = *(_QWORD *)(v45 + 16);
      v61 = v60 + 5;
      *(_QWORD *)(v45 + 16) = v60 + 5;
      v62 = v40[2];
      v63 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v63 - (v60 + 5)) >= 5)
      {
        v65 = *(char **)(v45 + 24);
      }
      else
      {
        if (v63)
          v64 = 2 * v63;
        else
          v64 = 0x2000;
        while (v64 < v60 + 10)
        {
          v19 = (uint64_t)v64 <= 0;
          v64 *= 2;
          if (v19)
          {
            v64 = v60 + 10;
            break;
          }
        }
        v65 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v64, 0xAD6A59EEuLL);
        if (!v65)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v65;
        *(_QWORD *)(v45 + 32) = v64;
        v61 = *(_QWORD *)(v45 + 16);
      }
      v66 = &v65[v61];
      *v66 = -54;
      *(_DWORD *)(v66 + 1) = bswap32(v62);
      *(_QWORD *)(v45 + 16) += 5;
    }
  }
LABEL_88:
  v67 = *(_DWORD *)(a2 + 72);
  v68 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v68 + 40))
  {
    v199 = (uint64_t *)(v68 + 16);
    sub_208210C8C(&v199, v67);
  }
  else
  {
    sub_208210F00((uint64_t)&v199, v68 + 8);
  }
  v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v70 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v70 + 40))
  {
    v199 = (uint64_t *)(v70 + 16);
    sub_20821166C(&v199, v69);
    v71 = *(unsigned int **)(a2 + 80);
    j = *(unsigned int **)(a2 + 88);
    if (j != v71)
      goto LABEL_97;
  }
  else
  {
    sub_208211974();
    v71 = *(unsigned int **)(a2 + 80);
    for (j = *(unsigned int **)(a2 + 88); v71 != j; v71 += 3)
    {
LABEL_97:
      while (1)
      {
        v76 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v76 + 40))
          break;
        v73 = *v71;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v73);
        std::ostream::write();
        v74 = v71[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v74);
        std::ostream::write();
        v75 = v71[2];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v75);
        std::ostream::write();
        v71 += 3;
        if (v71 == j)
          goto LABEL_133;
      }
      v77 = *v71;
      v78 = *(_QWORD *)(v76 + 32);
      v79 = *(_QWORD *)(v76 + 16);
      if ((unint64_t)(v78 - v79) >= 5)
      {
        v82 = *(char **)(v76 + 24);
      }
      else
      {
        if (v78)
          v80 = 2 * v78;
        else
          v80 = 0x2000;
        v81 = v79 + 5;
        while (v80 < v81)
        {
          v19 = (uint64_t)v80 <= 0;
          v80 *= 2;
          if (v19)
          {
            v80 = v81;
            break;
          }
        }
        v82 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v80, 0xAD6A59EEuLL);
        if (!v82)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v82;
        *(_QWORD *)(v76 + 32) = v80;
        v79 = *(_QWORD *)(v76 + 16);
      }
      v83 = &v82[v79];
      *v83 = -54;
      *(_DWORD *)(v83 + 1) = bswap32(v77);
      v84 = *(_QWORD *)(v76 + 16);
      v85 = v84 + 5;
      *(_QWORD *)(v76 + 16) = v84 + 5;
      v86 = v71[1];
      v87 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v87 - (v84 + 5)) >= 5)
      {
        v89 = *(char **)(v76 + 24);
      }
      else
      {
        if (v87)
          v88 = 2 * v87;
        else
          v88 = 0x2000;
        while (v88 < v84 + 10)
        {
          v19 = (uint64_t)v88 <= 0;
          v88 *= 2;
          if (v19)
          {
            v88 = v84 + 10;
            break;
          }
        }
        v89 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v88, 0xAD6A59EEuLL);
        if (!v89)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v89;
        *(_QWORD *)(v76 + 32) = v88;
        v85 = *(_QWORD *)(v76 + 16);
      }
      v90 = &v89[v85];
      *v90 = -54;
      *(_DWORD *)(v90 + 1) = bswap32(v86);
      v91 = *(_QWORD *)(v76 + 16);
      v92 = v91 + 5;
      *(_QWORD *)(v76 + 16) = v91 + 5;
      v93 = v71[2];
      v94 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v94 - (v91 + 5)) >= 5)
      {
        v96 = *(char **)(v76 + 24);
      }
      else
      {
        if (v94)
          v95 = 2 * v94;
        else
          v95 = 0x2000;
        while (v95 < v91 + 10)
        {
          v19 = (uint64_t)v95 <= 0;
          v95 *= 2;
          if (v19)
          {
            v95 = v91 + 10;
            break;
          }
        }
        v96 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v95, 0xAD6A59EEuLL);
        if (!v96)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v96;
        *(_QWORD *)(v76 + 32) = v95;
        v92 = *(_QWORD *)(v76 + 16);
      }
      v97 = &v96[v92];
      *v97 = -54;
      *(_DWORD *)(v97 + 1) = bswap32(v93);
      *(_QWORD *)(v76 + 16) += 5;
    }
  }
LABEL_133:
  v98 = *(_DWORD *)(a2 + 112);
  v99 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v99 + 40))
  {
    v199 = (uint64_t *)(v99 + 16);
    sub_208210C8C(&v199, v98);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
      goto LABEL_135;
  }
  else
  {
    sub_208210F00((uint64_t)&v199, v99 + 8);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
    {
LABEL_135:
      v199 = (uint64_t *)(v101 + 16);
      sub_20821166C(&v199, v100);
      v103 = *(char **)(a2 + 120);
      v102 = *(char **)(a2 + 128);
      v104 = v102 - v103;
      v105 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v105 + 40))
        goto LABEL_136;
      goto LABEL_141;
    }
  }
  sub_208211974();
  v103 = *(char **)(a2 + 120);
  v102 = *(char **)(a2 + 128);
  v104 = v102 - v103;
  v105 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v105 + 40))
  {
LABEL_136:
    v199 = (uint64_t *)(v105 + 16);
    if (v102 != v103)
    {
      do
      {
        v106 = *v103++;
        sub_2082100A4(&v199, v106);
        --v104;
      }
      while (v104);
    }
    goto LABEL_146;
  }
LABEL_141:
  if (v102 != v103)
  {
    do
    {
      while (1)
      {
        v107 = *v103;
        if ((v107 & 0x80000000) == 0)
          break;
        LOBYTE(v199) = -52;
        BYTE1(v199) = v107;
        std::ostream::write();
        ++v103;
        if (!--v104)
          goto LABEL_146;
      }
      LOBYTE(v199) = *v103;
      std::ostream::write();
      ++v103;
      --v104;
    }
    while (v104);
  }
LABEL_146:
  v108 = *(_DWORD *)(a2 + 152);
  v109 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v109 + 40))
  {
    v199 = (uint64_t *)(v109 + 16);
    sub_208210C8C(&v199, v108);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
      goto LABEL_148;
  }
  else
  {
    sub_208210F00((uint64_t)&v199, v109 + 8);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
    {
LABEL_148:
      v199 = (uint64_t *)(v111 + 16);
      sub_20821166C(&v199, v110);
      v113 = *(char **)(a2 + 160);
      v112 = *(char **)(a2 + 168);
      v114 = v112 - v113;
      v115 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v115 + 40))
        goto LABEL_149;
      goto LABEL_154;
    }
  }
  sub_208211974();
  v113 = *(char **)(a2 + 160);
  v112 = *(char **)(a2 + 168);
  v114 = v112 - v113;
  v115 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v115 + 40))
  {
LABEL_149:
    v199 = (uint64_t *)(v115 + 16);
    if (v112 != v113)
    {
      do
      {
        v116 = *v113++;
        sub_2082100A4(&v199, v116);
        --v114;
      }
      while (v114);
    }
    goto LABEL_159;
  }
LABEL_154:
  if (v112 != v113)
  {
    do
    {
      while (1)
      {
        v117 = *v113;
        if ((v117 & 0x80000000) == 0)
          break;
        LOBYTE(v199) = -52;
        BYTE1(v199) = v117;
        std::ostream::write();
        ++v113;
        if (!--v114)
          goto LABEL_159;
      }
      LOBYTE(v199) = *v113;
      std::ostream::write();
      ++v113;
      --v114;
    }
    while (v114);
  }
LABEL_159:
  v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  v119 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v119 + 40))
  {
    sub_208211974();
    v120 = *(_QWORD *)(a2 + 192);
    v121 = *(_QWORD *)(a2 + 200) - v120;
    if (!v121)
      goto LABEL_192;
    goto LABEL_163;
  }
  v199 = (uint64_t *)(v119 + 16);
  sub_20821166C(&v199, v118);
  v120 = *(_QWORD *)(a2 + 192);
  v121 = *(_QWORD *)(a2 + 200) - v120;
  if (v121)
  {
LABEL_163:
    v122 = (unsigned int *)(v120 + 8);
    v123 = 12 * (v121 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v125 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v125 + 40))
            break;
          v199 = (uint64_t *)(v125 + 16);
          sub_208210C8C(&v199, *(v122 - 2));
          sub_208210C8C(&v199, *(v122 - 1));
          v124 = *v122;
          v122 += 3;
          sub_208210C8C(&v199, v124);
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        v126 = *(v122 - 2);
        if (v126 > 0xFF)
          break;
        if (v126 > 0x7F)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v126;
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
        else
        {
          LOBYTE(v199) = *(v122 - 2);
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
LABEL_174:
        if (v127 >= 0x10000)
        {
          LOBYTE(v199) = -50;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v127);
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
        else
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v127) >> 16;
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
LABEL_186:
        if (v128 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        else
        {
          LOBYTE(v199) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
      }
      if (HIWORD(v126))
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v126);
        std::ostream::write();
        v127 = *(v122 - 1);
        if (v127 < 0x100)
          goto LABEL_178;
        goto LABEL_174;
      }
      LOBYTE(v199) = -51;
      *(_WORD *)((char *)&v199 + 1) = bswap32(v126) >> 16;
      std::ostream::write();
      v127 = *(v122 - 1);
      if (v127 >= 0x100)
        goto LABEL_174;
LABEL_178:
      if (v127 >= 0x80)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v127;
        std::ostream::write();
        v128 = *v122;
        if (*v122 >= 0x100)
          goto LABEL_182;
        goto LABEL_186;
      }
      LOBYTE(v199) = v127;
      std::ostream::write();
      v128 = *v122;
      if (*v122 < 0x100)
        goto LABEL_186;
LABEL_182:
      if (v128 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v128);
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v128) >> 16;
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
    }
  }
LABEL_192:
  v129 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  v130 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v130 + 40))
  {
    sub_208211974();
    v131 = *(_QWORD *)(a2 + 224);
    v132 = *(_QWORD *)(a2 + 232) - v131;
    if (!v132)
      goto LABEL_217;
    goto LABEL_196;
  }
  v199 = (uint64_t *)(v130 + 16);
  sub_20821166C(&v199, v129);
  v131 = *(_QWORD *)(a2 + 224);
  v132 = *(_QWORD *)(a2 + 232) - v131;
  if (v132)
  {
LABEL_196:
    v133 = (unsigned int *)(v131 + 4);
    v134 = 8 * (v132 >> 3);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v136 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v136 + 40))
            break;
          v199 = (uint64_t *)(v136 + 16);
          sub_208210C8C(&v199, *(v133 - 1));
          v135 = *v133;
          v133 += 2;
          sub_208210C8C(&v199, v135);
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        v137 = *(v133 - 1);
        if (v137 <= 0xFF)
          break;
        if (!HIWORD(v137))
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v137) >> 16;
          std::ostream::write();
          v138 = *v133;
          if (*v133 < 0x100)
            goto LABEL_211;
          goto LABEL_207;
        }
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v137);
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
LABEL_211:
        if (v138 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        else
        {
          LOBYTE(v199) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
      }
      if (v137 > 0x7F)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v137;
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
        goto LABEL_211;
      }
      LOBYTE(v199) = *(v133 - 1);
      std::ostream::write();
      v138 = *v133;
      if (*v133 < 0x100)
        goto LABEL_211;
LABEL_207:
      if (v138 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v138);
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v138) >> 16;
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
    }
  }
LABEL_217:
  v139 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  v140 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v140 + 40))
  {
    v199 = (uint64_t *)(v140 + 16);
    sub_20821166C(&v199, v139);
    v141 = *(unsigned int **)(a2 + 256);
    k = *(unsigned int **)(a2 + 264);
    if (k != v141)
      goto LABEL_223;
  }
  else
  {
    sub_208211974();
    v141 = *(unsigned int **)(a2 + 256);
    for (k = *(unsigned int **)(a2 + 264); v141 != k; v141 += 2)
    {
LABEL_223:
      while (1)
      {
        v145 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v145 + 40))
          break;
        v143 = *v141;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v143);
        std::ostream::write();
        v144 = v141[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v144);
        std::ostream::write();
        v141 += 2;
        if (v141 == k)
          goto LABEL_248;
      }
      v146 = *v141;
      v147 = *(_QWORD *)(v145 + 32);
      v148 = *(_QWORD *)(v145 + 16);
      if ((unint64_t)(v147 - v148) >= 5)
      {
        v151 = *(char **)(v145 + 24);
      }
      else
      {
        if (v147)
          v149 = 2 * v147;
        else
          v149 = 0x2000;
        v150 = v148 + 5;
        while (v149 < v150)
        {
          v19 = (uint64_t)v149 <= 0;
          v149 *= 2;
          if (v19)
          {
            v149 = v150;
            break;
          }
        }
        v151 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v149, 0xAD6A59EEuLL);
        if (!v151)
          goto LABEL_316;
        *(_QWORD *)(v145 + 24) = v151;
        *(_QWORD *)(v145 + 32) = v149;
        v148 = *(_QWORD *)(v145 + 16);
      }
      v152 = &v151[v148];
      *v152 = -54;
      *(_DWORD *)(v152 + 1) = bswap32(v146);
      v153 = *(_QWORD *)(v145 + 16);
      v154 = v153 + 5;
      *(_QWORD *)(v145 + 16) = v153 + 5;
      v155 = v141[1];
      v156 = *(_QWORD *)(v145 + 32);
      if ((unint64_t)(v156 - (v153 + 5)) >= 5)
      {
        v158 = *(char **)(v145 + 24);
      }
      else
      {
        if (v156)
          v157 = 2 * v156;
        else
          v157 = 0x2000;
        while (v157 < v153 + 10)
        {
          v19 = (uint64_t)v157 <= 0;
          v157 *= 2;
          if (v19)
          {
            v157 = v153 + 10;
            break;
          }
        }
        v158 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v157, 0xAD6A59EEuLL);
        if (!v158)
          goto LABEL_316;
        *(_QWORD *)(v145 + 24) = v158;
        *(_QWORD *)(v145 + 32) = v157;
        v154 = *(_QWORD *)(v145 + 16);
      }
      v159 = &v158[v154];
      *v159 = -54;
      *(_DWORD *)(v159 + 1) = bswap32(v155);
      *(_QWORD *)(v145 + 16) += 5;
    }
  }
LABEL_248:
  v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  v161 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v161 + 40))
  {
    sub_208211974();
    v162 = *(_QWORD *)(a2 + 288);
    v163 = *(_QWORD *)(a2 + 296) - v162;
    if (!v163)
      goto LABEL_281;
    goto LABEL_252;
  }
  v199 = (uint64_t *)(v161 + 16);
  sub_20821166C(&v199, v160);
  v162 = *(_QWORD *)(a2 + 288);
  v163 = *(_QWORD *)(a2 + 296) - v162;
  if (v163)
  {
LABEL_252:
    v164 = (unsigned int *)(v162 + 8);
    v165 = 12 * (v163 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v167 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v167 + 40))
            break;
          v199 = (uint64_t *)(v167 + 16);
          sub_208210C8C(&v199, *(v164 - 2));
          sub_208210C8C(&v199, *(v164 - 1));
          v166 = *v164;
          v164 += 3;
          sub_208210C8C(&v199, v166);
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        v168 = *(v164 - 2);
        if (v168 > 0xFF)
          break;
        if (v168 > 0x7F)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v168;
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
        else
        {
          LOBYTE(v199) = *(v164 - 2);
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
LABEL_263:
        if (v169 >= 0x10000)
        {
          LOBYTE(v199) = -50;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v169);
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
        else
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v169) >> 16;
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
LABEL_275:
        if (v170 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        else
        {
          LOBYTE(v199) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
      }
      if (HIWORD(v168))
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v168);
        std::ostream::write();
        v169 = *(v164 - 1);
        if (v169 < 0x100)
          goto LABEL_267;
        goto LABEL_263;
      }
      LOBYTE(v199) = -51;
      *(_WORD *)((char *)&v199 + 1) = bswap32(v168) >> 16;
      std::ostream::write();
      v169 = *(v164 - 1);
      if (v169 >= 0x100)
        goto LABEL_263;
LABEL_267:
      if (v169 >= 0x80)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v169;
        std::ostream::write();
        v170 = *v164;
        if (*v164 >= 0x100)
          goto LABEL_271;
        goto LABEL_275;
      }
      LOBYTE(v199) = v169;
      std::ostream::write();
      v170 = *v164;
      if (*v164 < 0x100)
        goto LABEL_275;
LABEL_271:
      if (v170 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v170);
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v170) >> 16;
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
    }
  }
LABEL_281:
  if (a3 < 2)
    return;
  v171 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 344))
  {
    if (*(_BYTE *)(v171 + 40))
    {
      v199 = (uint64_t *)(v171 + 16);
      sub_2082100A4(&v199, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v199) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
LABEL_301:
    v186 = *(_DWORD *)(a2 + 348);
    v187 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v187 + 40))
    {
      v199 = (uint64_t *)(v187 + 16);
      sub_208210C8C(&v199, v186);
      v188 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      v189 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v189 + 40))
        goto LABEL_303;
    }
    else
    {
      sub_208210F00((uint64_t)&v199, v187 + 8);
      v188 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      v189 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v189 + 40))
      {
LABEL_303:
        v199 = (uint64_t *)(v189 + 16);
        sub_20821166C(&v199, v188);
        v191 = *(unsigned int **)(a2 + 352);
        v190 = *(unsigned int **)(a2 + 360);
        v192 = v190 - v191;
        v193 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v193 + 40))
          goto LABEL_304;
LABEL_310:
        if (v190 != v191)
        {
          v195 = 4 * v192;
          do
          {
            v196 = *v191++;
            LOBYTE(v199) = -54;
            *(_DWORD *)((char *)&v199 + 1) = bswap32(v196);
            std::ostream::write();
            v195 -= 4;
          }
          while (v195);
        }
        return;
      }
    }
    sub_208211974();
    v191 = *(unsigned int **)(a2 + 352);
    v190 = *(unsigned int **)(a2 + 360);
    v192 = v190 - v191;
    v193 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v193 + 40))
    {
LABEL_304:
      v199 = (uint64_t *)(v193 + 16);
      if (v190 != v191)
      {
        v194 = 4 * v192;
        do
        {
          sub_208211A6C((uint64_t)&v200, &v199, v191++);
          v194 -= 4;
        }
        while (v194);
      }
      return;
    }
    goto LABEL_310;
  }
  if (*(_BYTE *)(v171 + 40))
  {
    v199 = (uint64_t *)(v171 + 16);
    sub_2082100A4(&v199, 1);
    v172 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v172 + 40))
      goto LABEL_285;
  }
  else
  {
    LOBYTE(v199) = 1;
    std::ostream::write();
    v172 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v172 + 40))
    {
LABEL_285:
      v199 = (uint64_t *)(v172 + 16);
      sub_208210C8C(&v199, 2u);
      sub_20820C2C0(*(_QWORD *)(a1 + 24));
      v173 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v173 + 40))
        goto LABEL_286;
LABEL_293:
      v175 = *(_DWORD *)(a2 + 320);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v175);
      std::ostream::write();
      v176 = *(_DWORD *)(a2 + 324);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v176);
      std::ostream::write();
      v177 = *(_DWORD *)(a2 + 328);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v177);
      std::ostream::write();
      v174 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v174 + 40))
        goto LABEL_287;
      goto LABEL_294;
    }
  }
  LOBYTE(v199) = 2;
  std::ostream::write();
  sub_20820C2C0(*(_QWORD *)(a1 + 24));
  v173 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v173 + 40))
    goto LABEL_293;
LABEL_286:
  v199 = (uint64_t *)(v173 + 16);
  sub_208211A6C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 320));
  sub_208211A6C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 324));
  sub_208211A6C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 328));
  v174 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v174 + 40))
  {
LABEL_287:
    v199 = (uint64_t *)(v174 + 16);
    sub_208211A6C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 332));
    sub_208211A6C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 336));
    sub_208211A6C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 340));
    goto LABEL_295;
  }
LABEL_294:
  v178 = *(_DWORD *)(a2 + 332);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v178);
  std::ostream::write();
  v179 = *(_DWORD *)(a2 + 336);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v179);
  std::ostream::write();
  v180 = *(_DWORD *)(a2 + 340);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v180);
  std::ostream::write();
LABEL_295:
  v181 = *(_QWORD *)(a1 + 24);
  v182 = *(_QWORD *)(*(_QWORD *)(v181 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v181 + 48), *(_QWORD *)(v181 + 16) - v182 - 9);
  v183 = *(_QWORD *)(v181 + 48);
  if (v183)
    memmove((void *)(*(_QWORD *)(v181 + 24) + v182), *(const void **)(v181 + 56), v183);
  *(_QWORD *)(v181 + 48) = 0;
  v184 = *(_QWORD *)(v181 + 80);
  v185 = *(_QWORD *)(v181 + 88) - 8;
  *(_QWORD *)(v181 + 88) = v185;
  if (v184 == v185)
  {
    std::ostream::write();
    if (*(_BYTE *)(v181 + 40))
    {
      free(*(void **)(v181 + 24));
      *(_BYTE *)(v181 + 40) = 0;
    }
  }
  if (a3 >= 4)
    goto LABEL_301;
}

uint64_t *sub_207E250F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_2081F17E4(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2081F20F8(a2, v10);
  v6 = v10[0];
  sub_207E224F0((uint64_t)v9, a3);
  sub_207E251D0(a2, v9, v6);
  result = sub_207E080B8(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_207E251BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E080B8(&a9);
  _Unwind_Resume(a1);
}

void sub_207E251D0(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  float *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  float *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  float *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float **v36;
  float **v37;
  float *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  float **v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  float *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(float **)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = (uint64_t)v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_2081F3400(a1, (float **)&v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E25A9C(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(float **)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = (uint64_t)v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F3400(a1, (float **)&v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E25A9C(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(float **)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = (uint64_t)v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F3400(a1, (float **)&v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_207E25A9C(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_2081F1960(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_207E25A9C(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_207E25A9C(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_2081F1960(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(float **)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = (uint64_t)v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F2BB0(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v36 = (float **)a2[28];
  v37 = (float **)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = (uint64_t)v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F2BB0(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v41 = (float **)a2[32];
  v42 = (float **)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = (uint64_t)v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F3400(a1, (float **)&v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(float **)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = (uint64_t)v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_2081F2BB0(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_2081F133C(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_207D20660((uint64_t *)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_207E25A9C(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_2081F3400(a1, (float **)&v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_2081F17E4(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_2081F20F8(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_2081F20F8(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_2081F3400(a1, (float **)&v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_2081F3400(a1, (float **)&v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_2081F20F8(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_2081F3400(a1, (float **)&v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_207E25A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E25A9C(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_207E234E4((uint64_t)v5, a2);
  if (v6 == -1)
    sub_207CA9F48();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v6])(&v8, v5);
  sub_2081F25C0(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_207E25B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E25B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E25B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E25B9C(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t m;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t n;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ii;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unsigned __int8 v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unsigned __int8 v108;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *a2;
  v9 = a2[1];
  if (v9 != *a2)
  {
    do
    {
      if (v7)
      {
        v10 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v10, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v11 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v11 + 1;
      if (v11 != -1)
      {
        v12 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v12, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v13 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v13 + 1;
      if (v13 != -1)
      {
        v14 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v14, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v7 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v7;
      v8 += 12;
    }
    while (v8 != v9);
  }
  if (v7)
  {
    v15 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v15, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16 + 1;
  if (v16 != -1)
  {
    v17 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v17, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v18 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v18;
  v19 = a2[5];
  for (i = a2[6]; v19 != i; v19 += 12)
  {
    if (v18)
    {
      v21 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v21, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v22 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v22 + 1;
    if (v22 != -1)
    {
      v23 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v23, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v24 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v24 + 1;
    if (v24 != -1)
    {
      v25 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v25, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v18 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v18;
  }
  if (v18)
  {
    v26 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v26, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v27 + 1;
  if (v27 != -1)
  {
    v28 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v28, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v29 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v29;
  v30 = a2[10];
  for (j = a2[11]; v30 != j; v30 += 12)
  {
    if (v29)
    {
      v32 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v32, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v33 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v33 + 1;
    if (v33 != -1)
    {
      v34 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v34, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v35 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v35 + 1;
    if (v35 != -1)
    {
      v36 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v36, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v29 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v29;
  }
  if (v29)
  {
    v37 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v37, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v38 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v38 + 1;
  if (v38 != -1)
  {
    v39 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v39, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v40 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v40;
  v42 = (unsigned __int8 *)a2[15];
  v41 = (unsigned __int8 *)a2[16];
  v43 = v41 - v42;
  if (v41 != v42)
  {
    do
    {
      sub_208208D08(a1, v42++);
      --v43;
    }
    while (v43);
    v40 = *(_QWORD *)(a1 + 40);
  }
  if (v40)
  {
    v44 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v44, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v45 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v45 + 1;
  if (v45 != -1)
  {
    v46 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v46, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v47 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v47;
  v49 = (unsigned __int8 *)a2[20];
  v48 = (unsigned __int8 *)a2[21];
  v50 = v48 - v49;
  if (v48 != v49)
  {
    do
    {
      sub_208208D08(a1, v49++);
      --v50;
    }
    while (v50);
    v47 = *(_QWORD *)(a1 + 40);
  }
  if (v47)
  {
    v51 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v51, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v52 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v52;
  v53 = a2[24];
  for (k = a2[25]; v53 != k; v53 += 12)
  {
    if (v52)
    {
      v63 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v63, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v64 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v64 + 1;
    if (v64 != -1)
    {
      v65 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v65, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v66 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v66 + 1;
    if (v66 != -1)
    {
      v67 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v67, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v52 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v52;
  }
  if (v52)
  {
    v55 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v55, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v56 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v56;
  v57 = a2[28];
  for (m = a2[29]; v57 != m; v57 += 8)
  {
    if (v56)
    {
      v68 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v68, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v69 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v69 + 1;
    if (v69 != -1)
    {
      v70 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v70, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v56 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v56;
  }
  if (v56)
  {
    v59 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v59, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v60 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v60;
  v61 = a2[32];
  for (n = a2[33]; v61 != n; v61 += 8)
  {
    if (v60)
    {
      v71 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v71, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v72 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v72 + 1;
    if (v72 != -1)
    {
      v73 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v73, (uint64_t)&v108, 1);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    v60 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v60;
  }
  if (v60)
  {
    v74 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v74, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  v75 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v75;
  v76 = a2[36];
  for (ii = a2[37]; v76 != ii; v76 += 12)
  {
    if (v75)
    {
      v95 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v95, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v96 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v96 + 1;
    if (v96 != -1)
    {
      v97 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v97, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v98 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v98 + 1;
    if (v98 != -1)
    {
      v99 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v99, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v75 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v75;
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      v108 = 1;
      sub_208208D08(a1, &v108);
      if (*(_QWORD *)(a1 + 40))
      {
        v78 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v78, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v79 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v79 + 1;
      if (v79 != -1)
      {
        v80 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v80, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v81 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v81 + 1;
      if (v81 != -1)
      {
        v82 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v82, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v83 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v83 + 1;
      if (v83 != -1)
      {
        v84 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v84, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v85 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v85 + 1;
      if (v85 != -1)
      {
        v86 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v86, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v87 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v87 + 1;
      if (v87 != -1)
      {
        v88 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v88, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v89 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v89 + 1;
      if (v89 != -1)
      {
        v90 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v90, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v91 = *(_QWORD *)(a1 + 40);
      v92 = *(_BYTE *)(a1 + 34);
      *(_QWORD *)(a1 + 40) = v91 + 1;
      if (v91 != -1)
      {
        v93 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_207CBAB98(v93, (uint64_t)&v108, 1);
      }
      v94 = *(_QWORD **)(a1 + 24);
      v108 = v92;
      sub_207CBAB98(v94, (uint64_t)&v108, 1);
      ++*(_QWORD *)(a1 + 40);
      if (a3 < 4)
        return;
    }
    else
    {
      v108 = 0;
      sub_208208D08(a1, &v108);
      if (a3 < 4)
        return;
    }
    if (*(_QWORD *)(a1 + 40))
    {
      v100 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v100, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v101 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v101 + 1;
    if (v101 != -1)
    {
      v102 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v102, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    v103 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v103;
    v104 = a2[44];
    v105 = a2[45] - v104;
    if (v105)
    {
      v106 = 4 * (v105 >> 2);
      do
      {
        if (v103)
        {
          v107 = *(_QWORD **)(a1 + 24);
          v108 = *(_BYTE *)(a1 + 32);
          sub_207CBAB98(v107, (uint64_t)&v108, 1);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
        v104 += 4;
        std::ostream::operator<<();
        v103 = *(_QWORD *)(a1 + 40) + 1;
        *(_QWORD *)(a1 + 40) = v103;
        v106 -= 4;
      }
      while (v106);
    }
  }
}

uint64_t *sub_207E26848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *result;
  uint64_t v35;
  char *__src;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char v58[12];
  char v59[12];
  char v60[4];
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  LODWORD(__src) = 4;
  v4 = a1 + 24;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v5 = __src;
  sub_208072A10((_QWORD *)a1);
  sub_207E224F0((uint64_t)&__src, a2);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v37 - __src) >> 2);
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v6 = __src;
  if (v37 != __src)
  {
    v7 = 12 * ((v37 - __src) / 12);
    do
    {
      v8 = v6 + 12;
      sub_207D0B114(v4, *(char **)(a1 + 32), v6, v6 + 12, 12);
      v6 = v8;
      v7 -= 12;
    }
    while (v7);
  }
  LODWORD(v64) = v38;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 2);
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v9 = v39;
  if (v40 != v39)
  {
    v10 = 12 * ((v40 - v39) / 12);
    do
    {
      v11 = v9 + 12;
      sub_207D0B114(v4, *(char **)(a1 + 32), v9, v9 + 12, 12);
      v9 = v11;
      v10 -= 12;
    }
    while (v10);
  }
  LODWORD(v64) = v41;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 2);
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v12 = v42;
  if (v43 != v42)
  {
    v13 = 12 * ((v43 - v42) / 12);
    do
    {
      v14 = v12 + 12;
      sub_207D0B114(v4, *(char **)(a1 + 32), v12, v12 + 12, 12);
      v12 = v14;
      v13 -= 12;
    }
    while (v13);
  }
  LODWORD(v64) = v44;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v46 - v45;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v16 = v45;
  v15 = v46;
  if (!v45
    && v46
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_38;
  }
  sub_207D0B114(v4, *(char **)(a1 + 32), v16, v15, v15 - v16);
  LODWORD(v64) = v47;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  v64 = v49 - v48;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v17 = v48;
  v18 = v49;
  if (!v48
    && v49
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    goto LABEL_38;
  }
  sub_207D0B114(v4, *(char **)(a1 + 32), v17, v18, v18 - v17);
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 2);
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v19 = v50;
  if (v51 != v50)
  {
    v20 = 12 * ((v51 - v50) / 12);
    do
    {
      v21 = v19 + 12;
      sub_207D0B114(v4, *(char **)(a1 + 32), v19, v19 + 12, 12);
      v19 = v21;
      v20 -= 12;
    }
    while (v20);
  }
  v64 = (v53 - v52) >> 3;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v22 = v52;
  if (v53 != v52)
  {
    v23 = 8 * ((v53 - v52) >> 3);
    do
    {
      v24 = v22 + 8;
      sub_207D0B114(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      v22 = v24;
      v23 -= 8;
    }
    while (v23);
  }
  v64 = (v55 - v54) >> 3;
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v25 = v54;
  if (v55 != v54)
  {
    v26 = 8 * ((v55 - v54) >> 3);
    do
    {
      v27 = v25 + 8;
      sub_207D0B114(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
      v25 = v27;
      v26 -= 8;
    }
    while (v26);
  }
  v64 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 2);
  sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  v28 = v56;
  if (v57 != v56)
  {
    v29 = 12 * ((v57 - v56) / 12);
    do
    {
      v30 = v28 + 12;
      sub_207D0B114(v4, *(char **)(a1 + 32), v28, v28 + 12, 12);
      v28 = v30;
      v29 -= 12;
    }
    while (v29);
  }
  if (v5 >= 2)
  {
    if (v60[0])
    {
      LOBYTE(v64) = 1;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
      LODWORD(v64) = 2;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      sub_208072A10((_QWORD *)a1);
      sub_207D0B114(v4, *(char **)(a1 + 32), v58, v59, 12);
      sub_207D0B114(v4, *(char **)(a1 + 32), v59, v60, 12);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v31 + 10) = *(_QWORD *)(a1 + 32) - v31 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
    }
    else
    {
      LOBYTE(v64) = 0;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
    }
    if (v5 >= 4)
    {
      LODWORD(v64) = v61;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      v64 = (v63 - v62) >> 2;
      sub_207D0B114(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
      v32 = v62;
      v33 = v63;
      if (v62
        || !v63
        || !sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        sub_207D0B114(v4, *(char **)(a1 + 32), v32, v33, v33 - v32);
        goto LABEL_37;
      }
LABEL_38:
      abort();
    }
  }
LABEL_37:
  result = sub_207E080B8((uint64_t *)&__src);
  v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v35 + 10) = *(_QWORD *)(a1 + 32) - v35 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

void sub_207E26F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E26F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E26FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E26FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E26FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E26FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E26FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207E27004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E080B8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207E27018(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  uint64_t *result;
  uint64_t v9[48];

  LODWORD(v9[0]) = 4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9);
  v6 = v9[0];
  if (*a1 < 1)
  {
    sub_207E224F0((uint64_t)v9, a3);
    sub_207E27168(a2, v9, v6);
    return sub_207E080B8(v9);
  }
  else
  {
    if (*a1 == 2
      && (LODWORD(v9[0]) = 3, (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, v9), *a1 < 1))
    {
      v7 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v7 = 1;
    }
    sub_207E224F0((uint64_t)v9, a3);
    sub_207E27168(a2, v9, v6);
    result = sub_207E080B8(v9);
    if (v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

void sub_207E27140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E080B8(&a9);
  _Unwind_Resume(a1);
}

void sub_207E27154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E080B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207E27168(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  uint64_t m;
  uint64_t v22;
  uint64_t n;
  uint64_t result;
  uint64_t v25;
  uint64_t ii;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v6 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6 + 8);
      v6 += 12;
    }
    while (v6 != v7);
  }
  sub_207E277E4((_BYTE *)a1, (_DWORD *)a2 + 8);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v8 = a2[5];
  for (i = a2[6]; v8 != i; v8 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8 + 8);
  }
  sub_207E277E4((_BYTE *)a1, (_DWORD *)a2 + 18);
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[11] - a2[10]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v10 = a2[10];
  for (j = a2[11]; v10 != j; v10 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10 + 8);
  }
  sub_207E277E4((_BYTE *)a1, (_DWORD *)a2 + 28);
  v31 = a2[16] - a2[15];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v13 = a2[15];
  v12 = a2[16];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v13++);
      --v14;
    }
    while (v14);
  }
  sub_207E277E4((_BYTE *)a1, (_DWORD *)a2 + 38);
  v31 = a2[21] - a2[20];
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v16 = a2[20];
  v15 = a2[21];
  v17 = v15 - v16;
  if (v15 != v16)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v16++);
      --v17;
    }
    while (v17);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[25] - a2[24]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v18 = a2[24];
  for (k = a2[25]; v18 != k; v18 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v18 + 8);
  }
  v31 = (a2[29] - a2[28]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v20 = a2[28];
  for (m = a2[29]; v20 != m; v20 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v20 + 4);
  }
  v31 = (a2[33] - a2[32]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v22 = a2[32];
  for (n = a2[33]; v22 != n; v22 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v22 + 4);
  }
  v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[37] - a2[36]) >> 2);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
  v25 = a2[36];
  for (ii = a2[37]; v25 != ii; v25 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 4);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 8);
  }
  if (a3 >= 2)
  {
    if (*((_BYTE *)a2 + 344))
    {
      LOBYTE(v31) = 1;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      v27 = *(_DWORD *)(a1 + 8);
      LODWORD(v31) = 2;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
      if (v27 < 1)
      {
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        if (a3 < 4)
          return result;
      }
      else
      {
        if (v27 == 2)
        {
          LODWORD(v31) = 2;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v31);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, a2 + 42);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, (uint64_t)a2 + 340);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (a3 < 4)
          return result;
      }
    }
    else
    {
      LOBYTE(v31) = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v31);
      if (a3 < 4)
        return result;
    }
    sub_207E277E4((_BYTE *)a1, (_DWORD *)a2 + 87);
    v31 = (a2[45] - a2[44]) >> 2;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v31);
    v28 = a2[44];
    v29 = a2[45] - v28;
    if (v29)
    {
      v30 = 4 * (v29 >> 2);
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v28);
        v28 += 4;
        v30 -= 4;
      }
      while (v30);
    }
  }
  return result;
}

void sub_207E277E4(_BYTE *a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _DWORD v5[6];
  int v6;
  char v7;
  char *v8;

  if ((a1[12] & 2) != 0)
  {
    v6 = 0;
    sub_207E234E4((uint64_t)v5, a2);
    if (v6 == -1)
      sub_207CA9F48();
    v8 = &v7;
    ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C0765F8[v6])(__p, &v8, v5);
    if (v6 != -1)
      ((void (*)(char **, _DWORD *))off_24C0765E0[v6])(&v8, v5);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5[0] = *a2;
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v5);
  }
}

void sub_207E278CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E278E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E278FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207E27910(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5F4C(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20809778C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 4)
    v6 = 4;
  else
    v6 = v12;
  if (v6 < 3)
    sub_207E27A0C((uint64_t)&v11, a1, a2, v6);
  else
    sub_207E280D4(a1, (uint64_t)a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

uint64_t *sub_207E27A0C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *exception;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  int v56;
  _BYTE v57[24];
  int v58;
  _BYTE v59[24];
  int v60;
  _BYTE v61[24];
  int v62;
  int v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)&v40 = "vertices";
  *((_QWORD *)&v40 + 1) = 8;
  v41 = v42;
  sub_207E28994(a2, (uint64_t)&v40);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "colors_type";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v43 + 4;
  sub_207E28CF8((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "colors";
  *((_QWORD *)&v40 + 1) = 6;
  v41 = v44;
  sub_207E28994(a2, (uint64_t)&v40);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "normals_type";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v45 + 4;
  sub_207E28CF8((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "normals";
  *((_QWORD *)&v40 + 1) = 7;
  v41 = v46;
  sub_207E28994(a2, (uint64_t)&v40);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v47 + 4;
  sub_207E28CF8((uint64_t *)a2, (_DWORD **)&v40);
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  v11 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a2);
  v12 = *v11;
  if (v12 == 2)
  {
    v13 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12 == 1)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 3);
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
LABEL_16:
    sub_207E28EB8((uint64_t)&v48, v17);
    v15 = v48;
    v14 = v49;
    goto LABEL_20;
  }
  if (!*v11)
  {
    v13 = 0;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    goto LABEL_18;
  }
  v13 = 1;
  v14 = v49;
  v15 = v48;
  v16 = v49 - v48;
  v17 = 1 - (v49 - v48);
  if (v49 == v48)
    goto LABEL_16;
LABEL_18:
  if (v16 > v13)
  {
    v14 = v15 + v13;
    v49 = v15 + v13;
  }
LABEL_20:
  *(_QWORD *)&v40 = v14 - v15;
  *((_QWORD *)&v40 + 1) = v15;
  v18 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F631C(v18, (uint64_t)&v40);
  v19 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v51 + 4;
  sub_207E28CF8((uint64_t *)a2, (_DWORD **)&v40);
  v20 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v20)
    *(_BYTE *)(a2 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a2);
  v22 = *v21;
  if (v22 == 2)
  {
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v22 == 1)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 3);
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
LABEL_31:
    sub_207E28EB8((uint64_t)&v52, v27);
    v25 = v52;
    v24 = v53;
    goto LABEL_35;
  }
  if (!*v21)
  {
    v23 = 0;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    goto LABEL_33;
  }
  v23 = 1;
  v24 = v53;
  v25 = v52;
  v26 = v53 - v52;
  v27 = 1 - (v53 - v52);
  if (v53 == v52)
    goto LABEL_31;
LABEL_33:
  if (v26 > v23)
  {
    v24 = v25 + v23;
    v53 = v25 + v23;
  }
LABEL_35:
  *(_QWORD *)&v40 = v24 - v25;
  *((_QWORD *)&v40 + 1) = v25;
  v28 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F631C(v28, (uint64_t)&v40);
  *(_QWORD *)&v40 = "faces";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v55[4];
  sub_207E2909C(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "edges";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v57[4];
  sub_207E29414(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_coords";
  *((_QWORD *)&v40 + 1) = 10;
  v41 = (uint64_t *)&v59[4];
  sub_207E29760(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_faces";
  *((_QWORD *)&v40 + 1) = 9;
  v41 = (uint64_t *)&v61[4];
  sub_207E2909C(a2, (uint64_t)&v40);
  if (a4 >= 2)
  {
    v29 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "box";
    *(_QWORD *)(a2 + 96) = 3;
    if (!v29)
      *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2081F6204((uint64_t *)a2))
    {
      v40 = 0uLL;
      v41 = 0;
      sub_2081F5F4C(a2);
      v30 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "version";
      *(_QWORD *)(a2 + 96) = 7;
      if (!v30)
        *(_BYTE *)(a2 + 104) = 1;
      v31 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v67 = 0;
      sub_20809778C(v31, &v67);
      if (HIDWORD(v67))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "min";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_2081F75DC(v33, (float *)&v40);
      v34 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "max";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v34)
        *(_BYTE *)(a2 + 104) = 1;
      v35 = sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_2081F75DC(v35, (float *)&v40 + 3);
      v36 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v36 - 8);
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(a2 + 48) = v36 - 8;
      *(_QWORD *)(a2 + 72) = v37 - 8;
      v65 = v41;
      v64 = v40;
      v66 = 1;
    }
    else
    {
      ++*(_QWORD *)(a2 + 112);
      if (v66)
        v66 = 0;
    }
    if (a4 >= 4)
    {
      if (!*(_BYTE *)(a2 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 88) = "confidences";
      *(_QWORD *)(a2 + 96) = 11;
    }
  }
  sub_207E2A010((uint64_t)&v40, (uint64_t)v42);
  sub_207E2A154(a3, (uint64_t)&v40);
  sub_207E080B8((uint64_t *)&v40);
  return sub_207E2A8E8(v42);
}

void sub_207E280AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E280C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E280D4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  float **v58;
  unint64_t v59;
  _QWORD *exception;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];

  *(_QWORD *)&v63[0] = "vertices";
  *((_QWORD *)&v63[0] + 1) = 8;
  *(_QWORD *)&v63[1] = a2;
  sub_207E28994(a1, (uint64_t)v63);
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "colors_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 32;
  sub_207E28CF8((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "colors";
  *((_QWORD *)&v63[0] + 1) = 6;
  *(_QWORD *)&v63[1] = a2 + 40;
  sub_207E28994(a1, (uint64_t)v63);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "normals_type";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 72;
  sub_207E28CF8((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "normals";
  *((_QWORD *)&v63[0] + 1) = 7;
  *(_QWORD *)&v63[1] = a2 + 80;
  sub_207E28994(a1, (uint64_t)v63);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 112;
  sub_207E28CF8((uint64_t *)a1, (_DWORD **)v63);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics";
  *(_QWORD *)(a1 + 96) = 9;
  if (v9)
  {
    v10 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
    v11 = *v10;
    if (v11 != 2)
      goto LABEL_9;
LABEL_13:
    v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 4;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v10 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
  v11 = *v10;
  if (v11 == 2)
    goto LABEL_13;
LABEL_9:
  if (v11 == 1)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 3);
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
  }
  else
  {
    if (!v11)
    {
      v12 = 0;
      v14 = (uint64_t *)(a2 + 128);
      v13 = *(_QWORD *)(a2 + 128);
      v15 = *(_QWORD *)(a2 + 120);
      v16 = v13 - v15;
      goto LABEL_16;
    }
    v12 = 1;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = 1 - (v13 - v15);
    if (v13 == v15)
    {
LABEL_19:
      sub_207E28EB8(a2 + 120, v17);
      v15 = *(_QWORD *)(a2 + 120);
      v13 = *v14;
      goto LABEL_20;
    }
  }
LABEL_16:
  if (v16 > v12)
  {
    v13 = v15 + v12;
    *v14 = v15 + v12;
  }
LABEL_20:
  *(_QWORD *)&v63[0] = v13 - v15;
  *((_QWORD *)&v63[0] + 1) = v15;
  v18 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2081F631C(v18, (uint64_t)v63);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 152;
  sub_207E28CF8((uint64_t *)a1, (_DWORD **)v63);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials";
  *(_QWORD *)(a1 + 96) = 9;
  if (v20)
  {
    v21 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
    v22 = *v21;
    if (v22 != 2)
      goto LABEL_24;
LABEL_28:
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
    goto LABEL_31;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
  v22 = *v21;
  if (v22 == 2)
    goto LABEL_28;
LABEL_24:
  if (v22 == 1)
  {
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 3);
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
  }
  else
  {
    if (!v22)
    {
      v23 = 0;
      v25 = (uint64_t *)(a2 + 168);
      v24 = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a2 + 160);
      v27 = v24 - v26;
      goto LABEL_31;
    }
    v23 = 1;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = 1 - (v24 - v26);
    if (v24 == v26)
    {
LABEL_34:
      sub_207E28EB8(a2 + 160, v28);
      v26 = *(_QWORD *)(a2 + 160);
      v24 = *v25;
      goto LABEL_35;
    }
  }
LABEL_31:
  if (v27 > v23)
  {
    v24 = v26 + v23;
    *v25 = v26 + v23;
  }
LABEL_35:
  *(_QWORD *)&v63[0] = v24 - v26;
  *((_QWORD *)&v63[0] + 1) = v26;
  v29 = (char *)sub_2081F6204((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2081F631C(v29, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "faces";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 192;
  sub_207E2909C(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "edges";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 224;
  sub_207E29414(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_coords";
  *((_QWORD *)&v63[0] + 1) = 10;
  *(_QWORD *)&v63[1] = a2 + 256;
  sub_207E29760(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_faces";
  *((_QWORD *)&v63[0] + 1) = 9;
  *(_QWORD *)&v63[1] = a2 + 288;
  sub_207E2909C(a1, (uint64_t)v63);
  if (a3 < 2)
    return;
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "box";
  *(_QWORD *)(a1 + 96) = 3;
  if (v30)
  {
    if (*(_BYTE *)sub_2081F6204((uint64_t *)a1))
      goto LABEL_38;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2081F6204((uint64_t *)a1))
    {
LABEL_38:
      v61 = 0uLL;
      v62 = 0;
      v31 = *(_DWORD *)(a1 + 8);
      sub_2081F5F4C(a1);
      v32 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v32)
        *(_BYTE *)(a1 + 104) = 1;
      v33 = (char *)sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v63[0] = 0;
      sub_20809778C(v33, v63);
      v34 = v63[0];
      if (!HIDWORD(*(_QWORD *)&v63[0]))
      {
        if (v31 < 1)
          goto LABEL_50;
        if (v31 != 2 || LODWORD(v63[0]) < 2)
        {
LABEL_48:
          if (v34 >= 2)
            v34 = 2;
LABEL_50:
          if (v34 < 2)
          {
            memset(v63, 0, 24);
            v42 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v42)
              *(_BYTE *)(a1 + 104) = 1;
            v43 = sub_2081F6204((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F75DC(v43, (float *)v63);
            v44 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v44)
              *(_BYTE *)(a1 + 104) = 1;
            v45 = sub_2081F6204((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F75DC(v45, (float *)((unint64_t)v63 | 0xC));
            v46 = v63[0];
            HIDWORD(v46) = HIDWORD(v63[0]);
            v61 = v46;
            LODWORD(v46) = vdup_lane_s32(*(int32x2_t *)((char *)v63 + 12), 1).u32[0];
            DWORD1(v46) = DWORD1(v63[1]);
            v62 = v46;
          }
          else
          {
            v38 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v38)
              *(_BYTE *)(a1 + 104) = 1;
            v39 = sub_2081F6204((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F75DC(v39, (float *)&v61);
            v40 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v40)
              *(_BYTE *)(a1 + 104) = 1;
            v41 = sub_2081F6204((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F75DC(v41, (float *)((unint64_t)&v61 | 0xC));
          }
          v47 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v47 - 8);
          v48 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(a1 + 48) = v47 - 8;
          *(_QWORD *)(a1 + 72) = v48 - 8;
          *(_OWORD *)(a2 + 320) = v61;
          *(_QWORD *)(a2 + 336) = v62;
          *(_BYTE *)(a2 + 344) = 1;
          if (a3 >= 4)
            goto LABEL_67;
          return;
        }
        v35 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "min_version";
        *(_QWORD *)(a1 + 96) = 11;
        if (!v35)
          *(_BYTE *)(a1 + 104) = 1;
        v36 = (char *)sub_2081F6204((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v63[0] = 0;
        sub_20809778C(v36, v63);
        v37 = v63[0];
        if (!HIDWORD(*(_QWORD *)&v63[0]))
        {
          if (LODWORD(v63[0]) >= 3)
          {
            sub_207E29A98();
            sub_208212838((std::string *)&xmmword_253E511E0, v37, 2u);
          }
          goto LABEL_48;
        }
      }
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C08F078;
      __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
    }
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 344))
    *(_BYTE *)(a2 + 344) = 0;
  if (a3 >= 4)
  {
LABEL_67:
    v49 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences_type";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v49)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v63[0] = a2 + 348;
    sub_207E28CF8((uint64_t *)a1, (_DWORD **)v63);
    v50 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v50)
      *(_BYTE *)(a1 + 104) = 1;
    v51 = (unsigned __int8 *)sub_2081F6204((uint64_t *)a1);
    v52 = *v51;
    if (v52 == 2)
    {
      v53 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 4;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else if (v52 == 1)
    {
      v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 3);
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else
    {
      if (!*v51)
      {
        v53 = 0;
        v54 = (_QWORD *)(a2 + 360);
        v55 = *(float **)(a2 + 352);
        if (!((uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2))
          goto LABEL_83;
        goto LABEL_80;
      }
      v53 = 1;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = 1 - v56;
      if (!v56)
      {
LABEL_82:
        v58 = (float **)(a2 + 352);
        sub_207E29E08((uint64_t)v58, v57);
        v55 = *v58;
        goto LABEL_83;
      }
    }
    v54 = (_QWORD *)(a2 + 360);
    if (v56 <= v53)
    {
LABEL_83:
      v59 = sub_2081F6204((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2081F75DC(v59, v55);
      return;
    }
LABEL_80:
    *v54 = &v55[v53];
    goto LABEL_83;
  }
}

void sub_207E28994(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2081F5F4C(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (float **)(v4 + 1);
      v9 = (float *)v4[1];
      v10 = (float *)*v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (float **)(v4 + 1);
  v9 = (float *)v4[1];
  v10 = (float *)*v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_207E28AF0(v4, v7 - v11);
    v10 = (float *)*v4;
    v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[3 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v12, v10);
    v10 += 3;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_207E28AF0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_207CA420C();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_207CA9F48();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24C076710[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_207CA9F48();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24C076560[v23])(&v26, a1 + 3);
    }
  }
}

void sub_207E28CF8(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F6204(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_208097C8C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20806E57C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E28E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E28EB8(uint64_t a1, size_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  unint64_t v19;
  _QWORD **v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  int v29;
  _QWORD *v30;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD ***)a1;
    v7 = v5 - *(_QWORD *)a1;
    v8 = v7 + a2;
    if ((uint64_t)(v7 + a2) < 0)
      sub_207CA420C();
    v9 = v4 - (_QWORD)v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    v10 = v9 >= 0x3FFFFFFFFFFFFFFFLL;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v8;
    if (v11)
    {
      LODWORD(v30) = v11;
      v12 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v12 == -1)
        sub_207CA9F48();
      v28 = &v30;
      v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C076730[v12])(&v28, a1 + 24);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v15 = v14 + v7;
    v16 = v14 + v13;
    bzero((void *)(v14 + v7), a2);
    v17 = *(_QWORD ***)a1;
    v18 = *(_QWORD ***)(a1 + 8);
    v19 = (unint64_t)v18 - *(_QWORD *)a1;
    if (v18 != *(_QWORD ***)a1)
    {
      if (v19 < 0x20)
        goto LABEL_31;
      if ((_QWORD **)((char *)v18 + (_QWORD)((char *)v6 - v14 - v5)) < (_QWORD **)0x20)
        goto LABEL_31;
      v20 = (_QWORD **)((char *)v18 - (v19 & 0xFFFFFFFFFFFFFFE0));
      v15 -= v19 & 0xFFFFFFFFFFFFFFE0;
      v21 = (_OWORD *)(v7 + v14 - 16);
      v22 = (__int128 *)(v18 - 2);
      v23 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 32;
      }
      while (v23);
      v18 = v20;
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_31:
        do
        {
          v25 = *((_BYTE *)v18 - 1);
          v18 = (_QWORD **)((char *)v18 - 1);
          *(_BYTE *)--v15 = v25;
        }
        while (v18 != v17);
      }
      v18 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14 + v7 + a2;
    v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v16;
    if (v18)
    {
      v28 = v18;
      v29 = v26 - (_DWORD)v18;
      v27 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v27 == -1)
        sub_207CA9F48();
      v30 = &v28;
      ((void (*)(_QWORD **, uint64_t))off_24C076550[v27])(&v30, a1 + 24);
    }
  }
}

void sub_207E2909C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2081F5F4C(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (unint64_t *)(v4 + 1);
      v9 = v4[1];
      v10 = *v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (unint64_t *)(v4 + 1);
  v9 = v4[1];
  v10 = *v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_207E2920C(v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 12 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    v12 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v12, (uint64_t)v15);
    v10 += 12;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_207E2920C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_207CA420C();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_207CA9F48();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24C076750[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_207CA9F48();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24C076520[v23])(&v26, a1 + 3);
    }
  }
}

void sub_207E29414(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2081F5F4C(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_207E29568((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 8 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    v12 = (char *)sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F71F0(v12, (uint64_t)v15);
    v10 += 8;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_207E29568(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_207CA420C();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_207CA9F48();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C076770[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_207CA9F48();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24C076540[v32])(&v35, a1 + 24);
    }
  }
}

void sub_207E29760(uint64_t a1, uint64_t a2)
{
  int v3;
  float **v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(float ***)(a2 + 16);
  sub_2081F5F4C(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_207E298A0((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[2 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2081F6204((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F75DC(v12, v10);
    v10 += 2;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_207E298A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_207CA420C();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_207CA9F48();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C076790[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_207CA9F48();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24C076530[v32])(&v35, a1 + 24);
    }
  }
}

void sub_207E29A98()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51138);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E51138))
  {
    sub_207E29B50();
    if (byte_253E5120F < 0)
    {
      sub_207CA40D8(&xmmword_253E511E0, (void *)qword_253E511F8, unk_253E51200);
    }
    else
    {
      xmmword_253E511E0 = *(_OWORD *)&qword_253E511F8;
      qword_253E511F0 = unk_253E51208;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E511E0, &dword_207C77000);
    __cxa_guard_release(&qword_253E51138);
  }
}

void sub_207E29B38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51138);
  _Unwind_Resume(a1);
}

void sub_207E29B50()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51140);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E51140))
  {
    sub_207E29C2C(__p);
    sub_207D50234((char *)__p, (std::string *)&qword_253E511F8);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E511F8, &dword_207C77000);
    __cxa_guard_release(&qword_253E51140);
  }
}

void sub_207E29BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_253E51140);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_253E51140);
  _Unwind_Resume(a1);
}

void sub_207E29C2C(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_253E51148);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51148))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshBoundingBoxSample<>]", qword_253E51210);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_253E51210, &dword_207C77000);
    __cxa_guard_release(&qword_253E51148);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_253E51150);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_253E51150))
  {
    v5 = sub_207D49434(qword_253E51210, "<", 0);
    sub_207D49330(qword_253E51210, 0, v5, qword_253E51228);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_253E51228, &dword_207C77000);
    __cxa_guard_release(&qword_253E51150);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_253E51158);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51158))
  {
    sub_208215C6C((uint64_t)qword_253E51228, (uint64_t)&xmmword_253E51240);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51240, &dword_207C77000);
    __cxa_guard_release(&qword_253E51158);
  }
  if (byte_253E51257 < 0)
  {
    sub_207CA40D8(__dst, (void *)xmmword_253E51240, *((unint64_t *)&xmmword_253E51240 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_253E51240;
    __dst[2] = unk_253E51250;
  }
}

void sub_207E29DC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51158);
  _Unwind_Resume(a1);
}

void sub_207E29DD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51150);
  _Unwind_Resume(a1);
}

void sub_207E29DF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51148);
  _Unwind_Resume(a1);
}

void sub_207E29E08(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  char **v33;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 > (v4 - (uint64_t)v5) >> 2)
  {
    v6 = *(char **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1];
    v8 = v7 >> 2;
    v9 = (v7 >> 2) + a2;
    if (v9 >> 62)
      sub_207CA420C();
    v10 = v4 - (_QWORD)v6;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      LODWORD(v33) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_207CA9F48();
      v31 = (char *)&v33;
      v15 = ((uint64_t (*)(char **, uint64_t))off_24C0767B0[v13])(&v31, a1 + 24);
      v6 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 4 * v8);
    v17 = 4 * a2;
    v18 = v15 + 4 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    if (v5 == v6)
      goto LABEL_23;
    v20 = v5 - v6 - 4;
    if (v20 >= 0x2C)
    {
      if ((unint64_t)&v5[-v15 - v7] >= 0x20)
      {
        v22 = (v20 >> 2) + 1;
        v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v5[-v23];
        v16 -= v23;
        v24 = (_OWORD *)(v15 + 4 * v8 - 16);
        v25 = (__int128 *)(v5 - 16);
        v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_23:
          *(_QWORD *)a1 = v16;
          *(_QWORD *)(a1 + 8) = v19;
          v29 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;
          if (v6)
          {
            v31 = v6;
            v32 = (unint64_t)(v29 - (_QWORD)v6) >> 2;
            v30 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v30 == -1)
              sub_207CA9F48();
            v33 = &v31;
            ((void (*)(char ***, uint64_t))off_24C076510[v30])(&v33, a1 + 24);
          }
          return;
        }
      }
      else
      {
        v21 = v5;
      }
    }
    else
    {
      v21 = v5;
    }
    do
    {
      v28 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v16 - 1) = v28;
      v16 -= 4;
    }
    while (v21 != v6);
    goto LABEL_23;
  }
  if (a2)
  {
    bzero(*(void **)(a1 + 8), 4 * a2);
    v5 += 4 * a2;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

uint64_t sub_207E2A010(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;

  LOBYTE(v11) = 0;
  v13 = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a2 + 320);
    DWORD2(v3) = *(_DWORD *)(a2 + 328);
    HIDWORD(v3) = *(_QWORD *)(a2 + 332);
    LODWORD(v4) = vdup_lane_s32(*(int32x2_t *)(a2 + 332), 1).u32[0];
    v11 = v3;
    HIDWORD(v4) = *(_DWORD *)(a2 + 340);
    v12 = v4;
    v13 = 1;
  }
  v10 = 0;
  HIDWORD(v9) = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_207E2A708(a1, a2, (_DWORD *)(a2 + 32), a2 + 40, (_DWORD *)(a2 + 72), a2 + 80, (_DWORD *)(a2 + 112), a2 + 120, (_DWORD *)(a2 + 152), a2 + 160, a2 + 192, a2 + 224, a2 + 256, a2 + 288, &v11, &v10, (uint64_t)&v6);
  if (v6)
  {
    v7 = v6;
    v14 = v6;
    v15 = (unint64_t)(v8 - v6) >> 2;
    if (HIDWORD(v9) == -1)
      sub_207CA9F48();
    v16 = &v14;
    ((void (*)(uint64_t **, uint64_t *))off_24C076510[HIDWORD(v9)])(&v16, &v9);
  }
  return a1;
}

void sub_207E2A13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_207E086F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207E2A154(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t *v38;

  v4 = *a1;
  if (*a1)
  {
    a1[1] = v4;
    v5 = -1431655765 * ((unint64_t)(a1[2] - v4) >> 2);
    v36 = v4;
    v37 = v5;
    v6 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v6 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v6])(&v38, a1 + 3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[5];
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  if (v7)
  {
    a1[6] = v7;
    v8 = -1431655765 * ((unint64_t)(a1[7] - v7) >> 2);
    v36 = v7;
    v37 = v8;
    v9 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v9 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v9])(&v38, a1 + 8);
    a1[5] = 0;
    a1[6] = 0;
    a1[7] = 0;
  }
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v10 = a1[10];
  *((_DWORD *)a1 + 18) = *(_DWORD *)(a2 + 72);
  if (v10)
  {
    a1[11] = v10;
    v11 = -1431655765 * ((unint64_t)(a1[12] - v10) >> 2);
    v36 = v10;
    v37 = v11;
    v12 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v12 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v12])(&v38, a1 + 13);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  a1[13] = *(_QWORD *)(a2 + 104);
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v13 = a1[15];
  *((_DWORD *)a1 + 28) = *(_DWORD *)(a2 + 112);
  if (v13)
  {
    a1[16] = v13;
    v14 = *((_DWORD *)a1 + 34) - v13;
    v36 = v13;
    v37 = v14;
    v15 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v15 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v15])(&v38, a1 + 18);
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
  }
  a1[18] = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v16 = a1[20];
  *((_DWORD *)a1 + 38) = *(_DWORD *)(a2 + 152);
  if (v16)
  {
    a1[21] = v16;
    v17 = *((_DWORD *)a1 + 44) - v16;
    v36 = v16;
    v37 = v17;
    v18 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v18 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v18])(&v38, a1 + 23);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  a1[23] = *(_QWORD *)(a2 + 184);
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v19 = a1[24];
  if (v19)
  {
    a1[25] = v19;
    v20 = -1431655765 * ((unint64_t)(a1[26] - v19) >> 2);
    v36 = v19;
    v37 = v20;
    v21 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v21 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076520[v21])(&v38, a1 + 27);
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
  a1[27] = *(_QWORD *)(a2 + 216);
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v22 = a1[28];
  if (v22)
  {
    a1[29] = v22;
    v23 = (unint64_t)(a1[30] - v22) >> 3;
    v36 = v22;
    v37 = v23;
    v24 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v24 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076540[v24])(&v38, a1 + 31);
    a1[28] = 0;
    a1[29] = 0;
    a1[30] = 0;
  }
  a1[31] = *(_QWORD *)(a2 + 248);
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  a1[30] = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  v25 = a1[32];
  if (v25)
  {
    a1[33] = v25;
    v26 = (unint64_t)(a1[34] - v25) >> 3;
    v36 = v25;
    v37 = v26;
    v27 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v27 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076530[v27])(&v38, a1 + 35);
    a1[32] = 0;
    a1[33] = 0;
    a1[34] = 0;
  }
  a1[35] = *(_QWORD *)(a2 + 280);
  *((_OWORD *)a1 + 16) = *(_OWORD *)(a2 + 256);
  a1[34] = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v28 = a1[36];
  if (v28)
  {
    a1[37] = v28;
    v29 = -1431655765 * ((unint64_t)(a1[38] - v28) >> 2);
    v36 = v28;
    v37 = v29;
    v30 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v30 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076520[v30])(&v38, a1 + 39);
    a1[36] = 0;
    a1[37] = 0;
    a1[38] = 0;
  }
  a1[39] = *(_QWORD *)(a2 + 312);
  *((_OWORD *)a1 + 18) = *(_OWORD *)(a2 + 288);
  a1[38] = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  v31 = *(_OWORD *)(a2 + 336);
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  *((_OWORD *)a1 + 21) = v31;
  v32 = a1[44];
  if (v32)
  {
    a1[45] = v32;
    v33 = (unint64_t)(a1[46] - v32) >> 2;
    v36 = v32;
    v37 = v33;
    v34 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v34 == -1)
      sub_207CA9F48();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24C076510[v34])(&v38, a1 + 47);
    a1[44] = 0;
    a1[45] = 0;
    a1[46] = 0;
  }
  a1[47] = *(_QWORD *)(a2 + 376);
  *((_OWORD *)a1 + 22) = *(_OWORD *)(a2 + 352);
  a1[46] = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  return a1;
}

uint64_t sub_207E2A708(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 *a15, _DWORD *a16, uint64_t a17)
{
  _QWORD *v24;
  __int128 v25;

  v24 = sub_207E226A0((_QWORD *)a1, a2);
  *((_DWORD *)v24 + 8) = *a3;
  sub_207E226A0(v24 + 5, a4);
  *(_DWORD *)(a1 + 72) = *a5;
  sub_207E226A0((_QWORD *)(a1 + 80), a6);
  *(_DWORD *)(a1 + 112) = *a7;
  sub_207E22908((_QWORD *)(a1 + 120), a8);
  *(_DWORD *)(a1 + 152) = *a9;
  sub_207E22908((_QWORD *)(a1 + 160), a10);
  sub_207E22B1C((_QWORD *)(a1 + 192), a11);
  sub_207E22D84((_QWORD *)(a1 + 224), a12);
  sub_207E22FA4((_QWORD *)(a1 + 256), a13);
  sub_207E22B1C((_QWORD *)(a1 + 288), a14);
  v25 = *a15;
  *(_OWORD *)(a1 + 332) = *(__int128 *)((char *)a15 + 12);
  *(_OWORD *)(a1 + 320) = v25;
  *(_DWORD *)(a1 + 348) = *a16;
  sub_207E231C4((_QWORD *)(a1 + 352), a17);
  return a1;
}

void sub_207E2A830(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v10 = v7;
  sub_207E08464(v10);
  sub_207E084F0(v9);
  sub_207E08570(v8);
  sub_207E08464(v6);
  sub_207E085F0(v5);
  sub_207E085F0(v4);
  sub_207E0866C(v3);
  sub_207E0866C(v2);
  sub_207E0866C(v1);
  _Unwind_Resume(a1);
}

void sub_207E2A8A8()
{
  JUMPOUT(0x207E2A880);
}

void sub_207E2A8B0()
{
  JUMPOUT(0x207E2A888);
}

void sub_207E2A8B8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_207E0866C(v2);
  sub_207E0866C(v1);
  _Unwind_Resume(a1);
}

void sub_207E2A8D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_207E0866C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207E2A8E8(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  uint64_t *v32;

  v2 = a1[36];
  if (v2)
  {
    a1[37] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[38] - v2) >> 2);
    v30 = v2;
    v31 = v3;
    v4 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v4 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076520[v4])(&v32, a1 + 39);
  }
  v5 = a1[32];
  if (v5)
  {
    a1[33] = v5;
    v6 = (unint64_t)(a1[34] - v5) >> 3;
    v30 = v5;
    v31 = v6;
    v7 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v7 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076530[v7])(&v32, a1 + 35);
  }
  v8 = a1[28];
  if (v8)
  {
    a1[29] = v8;
    v9 = (unint64_t)(a1[30] - v8) >> 3;
    v30 = v8;
    v31 = v9;
    v10 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v10 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076540[v10])(&v32, a1 + 31);
  }
  v11 = a1[24];
  if (v11)
  {
    a1[25] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[26] - v11) >> 2);
    v30 = v11;
    v31 = v12;
    v13 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v13 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076520[v13])(&v32, a1 + 27);
  }
  v14 = a1[20];
  if (v14)
  {
    a1[21] = v14;
    v15 = *((_DWORD *)a1 + 44) - v14;
    v30 = v14;
    v31 = v15;
    v16 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v16 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v16])(&v32, a1 + 23);
  }
  v17 = a1[15];
  if (v17)
  {
    a1[16] = v17;
    v18 = *((_DWORD *)a1 + 34) - v17;
    v30 = v17;
    v31 = v18;
    v19 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v19 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076550[v19])(&v32, a1 + 18);
  }
  v20 = a1[10];
  if (v20)
  {
    a1[11] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[12] - v20) >> 2);
    v30 = v20;
    v31 = v21;
    v22 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v22 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v22])(&v32, a1 + 13);
  }
  v23 = a1[5];
  if (v23)
  {
    a1[6] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[7] - v23) >> 2);
    v30 = v23;
    v31 = v24;
    v25 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v25 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v25])(&v32, a1 + 8);
  }
  v26 = *a1;
  if (*a1)
  {
    a1[1] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[2] - v26) >> 2);
    v30 = v26;
    v31 = v27;
    v28 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v28 == -1)
      sub_207CA9F48();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24C076560[v28])(&v32, a1 + 3);
  }
  return a1;
}

void sub_207E2AC3C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 4;
  sub_20820BA20(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_207E17CA8(a2 + 2);
  if (v5 >= 4)
    v6 = 4;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_207E2AD2C((uint64_t)&v10, (uint64_t)a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_207E2C298(a2, (uint64_t)a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

uint64_t *sub_207E2AD2C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  char *i1;
  uint64_t v106;
  void (*v107)(uint64_t);
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v111;
  char *i2;
  uint64_t v113;
  void (*v114)(uint64_t);
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  _DWORD *v118;
  unint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  _QWORD *v123;
  char *i3;
  uint64_t v125;
  void (*v126)(uint64_t);
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  char *i4;
  uint64_t v131;
  void (*v132)(uint64_t);
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  float *v136;
  unint64_t v137;
  float *v138;
  uint64_t v139;
  float v140;
  _QWORD *v141;
  char *i6;
  uint64_t v143;
  void (*v144)(uint64_t);
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  float v148;
  char *i5;
  uint64_t v150;
  void (*v151)(uint64_t);
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  _DWORD *v155;
  unint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  _QWORD *v160;
  char *i7;
  uint64_t v162;
  void (*v163)(uint64_t);
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  char *i8;
  uint64_t v168;
  void (*v169)(uint64_t);
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v173;
  char *i9;
  uint64_t v175;
  void (*v176)(uint64_t);
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  std::bad_cast *v182;
  std::bad_cast *v183;
  std::bad_cast *v184;
  std::bad_cast *v185;
  std::bad_cast *v186;
  std::bad_cast *v187;
  std::bad_cast *exception;
  std::bad_cast *v189;
  std::bad_cast *v190;
  std::bad_cast *v191;
  std::bad_cast *v192;
  std::bad_cast *v193;
  std::bad_cast *v194;
  std::bad_cast *v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  float *v199;
  float *v200;
  uint64_t v201;
  uint64_t v202;
  float *v203;
  float *v204;
  uint64_t v205;
  uint64_t v206;
  float *v207;
  float *v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  _BYTE *v216;
  uint64_t v217;
  _DWORD v218[33];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  unint64_t v223;

  v199 = 0;
  v200 = 0;
  v202 = 0;
  v201 = 0;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v210 = 0;
  v209 = 0;
  v211 = 0;
  v213 = 0;
  v212 = 0;
  v214 = 0;
  v216 = 0;
  v215 = 0;
  v217 = 0;
  v218[32] = 0;
  LOBYTE(v219) = 0;
  v222 = 0;
  memset(v218, 0, 28);
  memset(&v218[8], 0, 28);
  memset(&v218[16], 0, 28);
  memset(&v218[24], 0, 28);
  v223 = 0;
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v223);
  v8 = 0;
  v7 = 0;
  if (v223)
  {
    sub_207E28AF0((uint64_t *)&v199, v223);
    v8 = v199;
    v7 = v200;
  }
  if (v7 != v8)
  {
    v9 = v7;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + 48);
      sub_20820CA98(v10, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v8 = (float)v197;
        v12 = v198;
        v198 = 0;
        if (!v12)
          goto LABEL_21;
        goto LABEL_15;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_321;
      v11 = *(double *)&v197;
      *v8 = v11;
      v12 = v198;
      v198 = 0;
      if (v12)
        goto LABEL_15;
LABEL_21:
      sub_20820CA98(v10, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v8[1] = (float)(unint64_t)v197;
        v18 = v198;
        v198 = 0;
        if (!v18)
          goto LABEL_35;
LABEL_29:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_35;
      }
      if ((_DWORD)v196 == 4)
      {
        v19 = *(double *)&v197;
        v8[1] = v19;
        v18 = v198;
        v198 = 0;
        if (!v18)
          goto LABEL_35;
        goto LABEL_29;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_321;
      v8[1] = (float)v197;
      v18 = v198;
      v198 = 0;
      if (v18)
        goto LABEL_29;
LABEL_35:
      sub_20820CA98(v10, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v8[2] = (float)(unint64_t)v197;
          v25 = v198;
          v198 = 0;
          if (v25)
            goto LABEL_43;
          break;
        case 4:
          v26 = *(double *)&v197;
          v8[2] = v26;
          v25 = v198;
          v198 = 0;
          if (v25)
            goto LABEL_43;
          break;
        case 3:
          v8[2] = (float)v197;
          v25 = v198;
          v198 = 0;
          if (v25)
          {
LABEL_43:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_321:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v189 = std::bad_cast::bad_cast(exception);
          v189->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v189, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v8 += 3;
      if (v8 == v9)
        goto LABEL_49;
    }
    *v8 = (float)(unint64_t)v197;
    v12 = v198;
    v198 = 0;
    if (!v12)
      goto LABEL_21;
LABEL_15:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_21;
  }
LABEL_49:
  LODWORD(v196) = 0;
  sub_20820BA20(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v202) = v196;
  v223 = 0xAAAAAAAAAAAAAAABLL * (v204 - v203);
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v223);
  v33 = v203;
  v32 = v204;
  v34 = 0xAAAAAAAAAAAAAAABLL * (v204 - v203);
  if (v223 <= v34)
  {
    if (v223 < v34)
    {
      v32 = &v203[3 * v223];
      v204 = v32;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)&v203, v223 - v34);
    v33 = v203;
    v32 = v204;
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = *(_QWORD *)(a2 + 48);
      sub_20820CA98(v36, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v33 = (float)v197;
        v38 = v198;
        v198 = 0;
        if (!v38)
          goto LABEL_71;
        goto LABEL_65;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_322;
      v37 = *(double *)&v197;
      *v33 = v37;
      v38 = v198;
      v198 = 0;
      if (v38)
        goto LABEL_65;
LABEL_71:
      sub_20820CA98(v36, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v33[1] = (float)(unint64_t)v197;
        v44 = v198;
        v198 = 0;
        if (!v44)
          goto LABEL_85;
LABEL_79:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_85;
      }
      if ((_DWORD)v196 == 4)
      {
        v45 = *(double *)&v197;
        v33[1] = v45;
        v44 = v198;
        v198 = 0;
        if (!v44)
          goto LABEL_85;
        goto LABEL_79;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_322;
      v33[1] = (float)v197;
      v44 = v198;
      v198 = 0;
      if (v44)
        goto LABEL_79;
LABEL_85:
      sub_20820CA98(v36, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v33[2] = (float)(unint64_t)v197;
          v51 = v198;
          v198 = 0;
          if (v51)
            goto LABEL_93;
          break;
        case 4:
          v52 = *(double *)&v197;
          v33[2] = v52;
          v51 = v198;
          v198 = 0;
          if (v51)
            goto LABEL_93;
          break;
        case 3:
          v33[2] = (float)v197;
          v51 = v198;
          v198 = 0;
          if (v51)
          {
LABEL_93:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_322:
          v190 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v190->__vftable = 0;
          v191 = std::bad_cast::bad_cast(v190);
          v191->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v191, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_99;
    }
    *v33 = (float)(unint64_t)v197;
    v38 = v198;
    v198 = 0;
    if (!v38)
      goto LABEL_71;
LABEL_65:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_71;
  }
LABEL_99:
  LODWORD(v196) = 0;
  sub_20820BA20(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v206) = v196;
  v223 = 0xAAAAAAAAAAAAAAABLL * (v208 - v207);
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v223);
  v59 = v207;
  v58 = v208;
  v60 = 0xAAAAAAAAAAAAAAABLL * (v208 - v207);
  if (v223 <= v60)
  {
    if (v223 < v60)
    {
      v58 = &v207[3 * v223];
      v208 = v58;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)&v207, v223 - v60);
    v59 = v207;
    v58 = v208;
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = *(_QWORD *)(a2 + 48);
      sub_20820CA98(v62, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v59 = (float)v197;
        v64 = v198;
        v198 = 0;
        if (!v64)
          goto LABEL_121;
        goto LABEL_115;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_323;
      v63 = *(double *)&v197;
      *v59 = v63;
      v64 = v198;
      v198 = 0;
      if (v64)
        goto LABEL_115;
LABEL_121:
      sub_20820CA98(v62, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
      {
        v59[1] = (float)(unint64_t)v197;
        v70 = v198;
        v198 = 0;
        if (!v70)
          goto LABEL_135;
LABEL_129:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_135;
      }
      if ((_DWORD)v196 == 4)
      {
        v71 = *(double *)&v197;
        v59[1] = v71;
        v70 = v198;
        v198 = 0;
        if (!v70)
          goto LABEL_135;
        goto LABEL_129;
      }
      if ((_DWORD)v196 != 3)
        goto LABEL_323;
      v59[1] = (float)v197;
      v70 = v198;
      v198 = 0;
      if (v70)
        goto LABEL_129;
LABEL_135:
      sub_20820CA98(v62, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v59[2] = (float)(unint64_t)v197;
          v77 = v198;
          v198 = 0;
          if (v77)
            goto LABEL_143;
          break;
        case 4:
          v78 = *(double *)&v197;
          v59[2] = v78;
          v77 = v198;
          v198 = 0;
          if (v77)
            goto LABEL_143;
          break;
        case 3:
          v59[2] = (float)v197;
          v77 = v198;
          v198 = 0;
          if (v77)
          {
LABEL_143:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_323:
          v192 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v192->__vftable = 0;
          v193 = std::bad_cast::bad_cast(v192);
          v193->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v193, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_149;
    }
    *v59 = (float)(unint64_t)v197;
    v64 = v198;
    v198 = 0;
    if (!v64)
      goto LABEL_121;
LABEL_115:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_121;
  }
LABEL_149:
  LODWORD(v196) = 0;
  sub_20820BA20(*(_QWORD *)(a2 + 48), &v196);
  HIDWORD(v210) = v196;
  v196 = v212 - v211;
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v196);
  v84 = v212;
  v85 = v211;
  if (v196 <= v212 - v211)
  {
    if (v196 < v212 - v211)
    {
      v84 = &v211[v196];
      v212 = &v211[v196];
    }
  }
  else
  {
    sub_207E28EB8((uint64_t)&v211, v196 - (v212 - v211));
    v85 = v211;
    v84 = v212;
  }
  v86 = *(_QWORD *)(a2 + 48);
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_20820B6F8(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = *(_QWORD *)(a2 + 48);
  }
  LODWORD(v196) = 0;
  sub_20820BA20(v86, &v196);
  HIDWORD(v214) = v196;
  v196 = v216 - v215;
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v196);
  v88 = v216;
  v89 = v215;
  if (v196 <= v216 - v215)
  {
    if (v196 < v216 - v215)
    {
      v88 = &v215[v196];
      v216 = &v215[v196];
    }
  }
  else
  {
    sub_207E28EB8((uint64_t)&v215, v196 - (v216 - v215));
    v89 = v215;
    v88 = v216;
  }
  v90 = *(_QWORD *)(a2 + 48);
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_20820B6F8(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = *(_QWORD *)(a2 + 48);
  }
  v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[3] - *(_QWORD *)&v218[1]) >> 2);
  sub_20820BBEC(v90, &v223);
  v92 = *(_QWORD *)&v218[3];
  v93 = *(_DWORD **)&v218[1];
  v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[3] - *(_QWORD *)&v218[1]) >> 2);
  if (v223 <= v94)
  {
    if (v223 < v94)
    {
      v92 = *(_QWORD *)&v218[1] + 12 * v223;
      *(_QWORD *)&v218[3] = v92;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)&v218[1], v223 - v94);
    v93 = *(_DWORD **)&v218[1];
    v92 = *(_QWORD *)&v218[3];
  }
  if ((_DWORD *)v92 != v93)
  {
    v95 = (_DWORD *)v92;
    do
    {
      v96 = *(_QWORD *)(a2 + 48);
      sub_20820CA98(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_318;
      *v93 = v197;
      v98 = v198;
      v198 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_20820CA98(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
        goto LABEL_318;
      v93[1] = v197;
      v104 = v198;
      v198 = 0;
      if (v104)
      {
        for (i1 = (char *)v104[4]; i1 != (char *)v104[6]; i1 -= 16)
        {
          v107 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v106 = *((_QWORD *)i1 - 1);
          v107(v106);
        }
        free(i1);
        v108 = (_QWORD *)v104[3];
        if (v108)
        {
          do
          {
            v109 = (_QWORD *)*v108;
            free(v108);
            v108 = v109;
          }
          while (v109);
        }
        free(v104);
      }
      sub_20820CA98(v96, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
      {
LABEL_318:
        v182 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v182->__vftable = 0;
        v183 = std::bad_cast::bad_cast(v182);
        v183->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
        __cxa_throw(v183, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = v197;
      v111 = v198;
      v198 = 0;
      if (v111)
      {
        for (i2 = (char *)v111[4]; i2 != (char *)v111[6]; i2 -= 16)
        {
          v114 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v113 = *((_QWORD *)i2 - 1);
          v114(v113);
        }
        free(i2);
        v115 = (_QWORD *)v111[3];
        if (v115)
        {
          do
          {
            v116 = (_QWORD *)*v115;
            free(v115);
            v115 = v116;
          }
          while (v116);
        }
        free(v111);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v223 = (uint64_t)(*(_QWORD *)&v218[11] - *(_QWORD *)&v218[9]) >> 3;
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v223);
  v117 = *(_QWORD *)&v218[11];
  v118 = *(_DWORD **)&v218[9];
  v119 = (uint64_t)(*(_QWORD *)&v218[11] - *(_QWORD *)&v218[9]) >> 3;
  if (v223 <= v119)
  {
    if (v223 < v119)
    {
      v117 = *(_QWORD *)&v218[9] + 8 * v223;
      *(_QWORD *)&v218[11] = v117;
    }
  }
  else
  {
    sub_207E29568((uint64_t)&v218[9], v223 - v119);
    v118 = *(_DWORD **)&v218[9];
    v117 = *(_QWORD *)&v218[11];
  }
  if ((_DWORD *)v117 != v118)
  {
    v120 = (_DWORD *)v117;
    do
    {
      v121 = *(_QWORD *)(a2 + 48);
      sub_20820CA98(v121, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_320;
      *v118 = v197;
      v123 = v198;
      v198 = 0;
      if (v123)
      {
        for (i3 = (char *)v123[4]; i3 != (char *)v123[6]; i3 -= 16)
        {
          v126 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v125 = *((_QWORD *)i3 - 1);
          v126(v125);
        }
        free(i3);
        v127 = (_QWORD *)v123[3];
        if (v127)
        {
          do
          {
            v128 = (_QWORD *)*v127;
            free(v127);
            v127 = v128;
          }
          while (v128);
        }
        free(v123);
      }
      sub_20820CA98(v121, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
      {
LABEL_320:
        v186 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v186->__vftable = 0;
        v187 = std::bad_cast::bad_cast(v186);
        v187->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
        __cxa_throw(v187, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v118[1] = v197;
      v129 = v198;
      v198 = 0;
      if (v129)
      {
        for (i4 = (char *)v129[4]; i4 != (char *)v129[6]; i4 -= 16)
        {
          v132 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v131 = *((_QWORD *)i4 - 1);
          v132(v131);
        }
        free(i4);
        v133 = (_QWORD *)v129[3];
        if (v133)
        {
          do
          {
            v134 = (_QWORD *)*v133;
            free(v133);
            v133 = v134;
          }
          while (v134);
        }
        free(v129);
      }
      v118 += 2;
    }
    while (v118 != v120);
  }
  v223 = (uint64_t)(*(_QWORD *)&v218[19] - *(_QWORD *)&v218[17]) >> 3;
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v223);
  v135 = *(_QWORD *)&v218[19];
  v136 = *(float **)&v218[17];
  v137 = (uint64_t)(*(_QWORD *)&v218[19] - *(_QWORD *)&v218[17]) >> 3;
  if (v223 <= v137)
  {
    if (v223 < v137)
    {
      v135 = *(_QWORD *)&v218[17] + 8 * v223;
      *(_QWORD *)&v218[19] = v135;
    }
  }
  else
  {
    sub_207E298A0((uint64_t)&v218[17], v223 - v137);
    v136 = *(float **)&v218[17];
    v135 = *(_QWORD *)&v218[19];
  }
  if ((float *)v135 != v136)
  {
    v138 = (float *)v135;
    while (1)
    {
      v139 = *(_QWORD *)(a2 + 48);
      sub_20820CA98(v139, (uint64_t)&v196);
      if ((_DWORD)v196 == 2)
        break;
      if ((_DWORD)v196 == 3)
      {
        *v136 = (float)v197;
        v141 = v198;
        v198 = 0;
        if (!v141)
          goto LABEL_255;
        goto LABEL_249;
      }
      if ((_DWORD)v196 != 4)
        goto LABEL_324;
      v140 = *(double *)&v197;
      *v136 = v140;
      v141 = v198;
      v198 = 0;
      if (v141)
        goto LABEL_249;
LABEL_255:
      sub_20820CA98(v139, (uint64_t)&v196);
      switch((_DWORD)v196)
      {
        case 2:
          v136[1] = (float)(unint64_t)v197;
          v147 = v198;
          v198 = 0;
          if (v147)
            goto LABEL_263;
          break;
        case 4:
          v148 = *(double *)&v197;
          v136[1] = v148;
          v147 = v198;
          v198 = 0;
          if (v147)
            goto LABEL_263;
          break;
        case 3:
          v136[1] = (float)v197;
          v147 = v198;
          v198 = 0;
          if (v147)
          {
LABEL_263:
            for (i5 = (char *)v147[4]; i5 != (char *)v147[6]; i5 -= 16)
            {
              v151 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v150 = *((_QWORD *)i5 - 1);
              v151(v150);
            }
            free(i5);
            v152 = (_QWORD *)v147[3];
            if (v152)
            {
              do
              {
                v153 = (_QWORD *)*v152;
                free(v152);
                v152 = v153;
              }
              while (v153);
            }
            free(v147);
          }
          break;
        default:
LABEL_324:
          v194 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v194->__vftable = 0;
          v195 = std::bad_cast::bad_cast(v194);
          v195->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v195, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v136 += 2;
      if (v136 == v138)
        goto LABEL_269;
    }
    *v136 = (float)(unint64_t)v197;
    v141 = v198;
    v198 = 0;
    if (!v141)
      goto LABEL_255;
LABEL_249:
    for (i6 = (char *)v141[4]; i6 != (char *)v141[6]; i6 -= 16)
    {
      v144 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v143 = *((_QWORD *)i6 - 1);
      v144(v143);
    }
    free(i6);
    v145 = (_QWORD *)v141[3];
    if (v145)
    {
      do
      {
        v146 = (_QWORD *)*v145;
        free(v145);
        v145 = v146;
      }
      while (v146);
    }
    free(v141);
    goto LABEL_255;
  }
LABEL_269:
  v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[27] - *(_QWORD *)&v218[25]) >> 2);
  sub_20820BBEC(*(_QWORD *)(a2 + 48), &v223);
  v154 = *(_QWORD *)&v218[27];
  v155 = *(_DWORD **)&v218[25];
  v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v218[27] - *(_QWORD *)&v218[25]) >> 2);
  if (v223 <= v156)
  {
    if (v223 < v156)
    {
      v154 = *(_QWORD *)&v218[25] + 12 * v223;
      *(_QWORD *)&v218[27] = v154;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)&v218[25], v223 - v156);
    v155 = *(_DWORD **)&v218[25];
    v154 = *(_QWORD *)&v218[27];
  }
  if ((_DWORD *)v154 != v155)
  {
    v157 = (_DWORD *)v154;
    do
    {
      v158 = *(_QWORD *)(a2 + 48);
      sub_20820CA98(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
        goto LABEL_319;
      *v155 = v197;
      v160 = v198;
      v198 = 0;
      if (v160)
      {
        for (i7 = (char *)v160[4]; i7 != (char *)v160[6]; i7 -= 16)
        {
          v163 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v162 = *((_QWORD *)i7 - 1);
          v163(v162);
        }
        free(i7);
        v164 = (_QWORD *)v160[3];
        if (v164)
        {
          do
          {
            v165 = (_QWORD *)*v164;
            free(v164);
            v164 = v165;
          }
          while (v165);
        }
        free(v160);
      }
      sub_20820CA98(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197))
        goto LABEL_319;
      v155[1] = v197;
      v166 = v198;
      v198 = 0;
      if (v166)
      {
        for (i8 = (char *)v166[4]; i8 != (char *)v166[6]; i8 -= 16)
        {
          v169 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v168 = *((_QWORD *)i8 - 1);
          v169(v168);
        }
        free(i8);
        v170 = (_QWORD *)v166[3];
        if (v170)
        {
          do
          {
            v171 = (_QWORD *)*v170;
            free(v170);
            v170 = v171;
          }
          while (v171);
        }
        free(v166);
      }
      sub_20820CA98(v158, (uint64_t)&v196);
      if ((_DWORD)v196 != 2 || HIDWORD(v197) != 0)
      {
LABEL_319:
        v184 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v184->__vftable = 0;
        v185 = std::bad_cast::bad_cast(v184);
        v185->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
        __cxa_throw(v185, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v155[2] = v197;
      v173 = v198;
      v198 = 0;
      if (v173)
      {
        for (i9 = (char *)v173[4]; i9 != (char *)v173[6]; i9 -= 16)
        {
          v176 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v175 = *((_QWORD *)i9 - 1);
          v176(v175);
        }
        free(i9);
        v177 = (_QWORD *)v173[3];
        if (v177)
        {
          do
          {
            v178 = (_QWORD *)*v177;
            free(v177);
            v177 = v178;
          }
          while (v178);
        }
        free(v173);
      }
      v155 += 3;
    }
    while (v155 != v157);
  }
  if (a4 >= 2)
  {
    LOBYTE(v223) = 0;
    sub_20820B6F8(*(_QWORD *)(a2 + 48), &v223);
    if ((_BYTE)v223)
    {
      if (!v222)
      {
        v219 = 0;
        v220 = 0;
        v221 = 0;
        v222 = 1;
      }
      LODWORD(v196) = 1;
      sub_20820BA20(*(_QWORD *)(a2 + 48), &v196);
      v179 = *(_QWORD *)(a2 + 48);
      sub_20820BCC8(v179, (float *)&v219);
      sub_20820BCC8(v179, (float *)&v219 + 1);
      sub_20820BCC8(v179, (float *)&v220);
      v180 = *(_QWORD *)(a2 + 48);
      sub_20820BCC8(v180, (float *)&v220 + 1);
      sub_20820BCC8(v180, (float *)&v221);
      sub_20820BCC8(v180, (float *)&v221 + 1);
    }
    else if (v222)
    {
      v222 = 0;
    }
  }
  sub_207E2A010((uint64_t)&v196, (uint64_t)&v199);
  sub_207E2A154(a3, (uint64_t)&v196);
  sub_207E080B8((uint64_t *)&v196);
  return sub_207E2A8E8((uint64_t *)&v199);
}

void sub_207E2C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2C150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_20820EE04((uint64_t)&a10);
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2C210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2C224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2C238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2C298(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  float *v6;
  float *v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v105;
  char *i1;
  uint64_t v107;
  void (*v108)(uint64_t);
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v112;
  char *i2;
  uint64_t v114;
  void (*v115)(uint64_t);
  _QWORD *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v124;
  char *i3;
  uint64_t v126;
  void (*v127)(uint64_t);
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v131;
  char *i4;
  uint64_t v133;
  void (*v134)(uint64_t);
  _QWORD *v135;
  _QWORD *v136;
  float *v137;
  float *v138;
  unint64_t v139;
  float *v140;
  uint64_t v141;
  float v142;
  _QWORD *v143;
  char *i6;
  uint64_t v145;
  void (*v146)(uint64_t);
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  float v150;
  char *i5;
  uint64_t v152;
  void (*v153)(uint64_t);
  _QWORD *v154;
  _QWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  unint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  _QWORD *v162;
  char *i7;
  uint64_t v164;
  void (*v165)(uint64_t);
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v169;
  char *i8;
  uint64_t v171;
  void (*v172)(uint64_t);
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v176;
  char *i9;
  uint64_t v178;
  void (*v179)(uint64_t);
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  int32x2_t v189;
  float *v190;
  float *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::bad_cast *v196;
  std::bad_cast *v197;
  std::bad_cast *v198;
  std::bad_cast *v199;
  std::bad_cast *v200;
  std::bad_cast *v201;
  std::bad_cast *exception;
  std::bad_cast *v203;
  std::bad_cast *v204;
  std::bad_cast *v205;
  std::bad_cast *v206;
  std::bad_cast *v207;
  std::bad_cast *v208;
  std::bad_cast *v209;
  unint64_t v210;
  _BYTE v211[24];
  _QWORD *v212;

  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  sub_20820BBEC(a1[6], &v210);
  v7 = *(float **)a2;
  v6 = *(float **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (v210 <= v8)
  {
    if (v210 < v8)
    {
      v6 = &v7[3 * v210];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)a2, v210 - v8);
    v7 = *(float **)a2;
    v6 = *(float **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    while (1)
    {
      v10 = a1[6];
      sub_20820CA98(v10, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v7 = (float)*(uint64_t *)&v211[8];
        v12 = v212;
        v212 = 0;
        if (!v12)
          goto LABEL_23;
        goto LABEL_17;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_346;
      v11 = *(double *)&v211[8];
      *v7 = v11;
      v12 = v212;
      v212 = 0;
      if (v12)
        goto LABEL_17;
LABEL_23:
      sub_20820CA98(v10, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v7[1] = (float)*(unint64_t *)&v211[8];
        v18 = v212;
        v212 = 0;
        if (!v18)
          goto LABEL_37;
LABEL_31:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_37;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v19 = *(double *)&v211[8];
        v7[1] = v19;
        v18 = v212;
        v212 = 0;
        if (!v18)
          goto LABEL_37;
        goto LABEL_31;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_346;
      v7[1] = (float)*(uint64_t *)&v211[8];
      v18 = v212;
      v212 = 0;
      if (v18)
        goto LABEL_31;
LABEL_37:
      sub_20820CA98(v10, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v7[2] = (float)*(unint64_t *)&v211[8];
          v25 = v212;
          v212 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 4:
          v26 = *(double *)&v211[8];
          v7[2] = v26;
          v25 = v212;
          v212 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 3:
          v7[2] = (float)*(uint64_t *)&v211[8];
          v25 = v212;
          v212 = 0;
          if (v25)
          {
LABEL_45:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_346:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v203 = std::bad_cast::bad_cast(exception);
          v203->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v203, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v7 += 3;
      if (v7 == v9)
        goto LABEL_51;
    }
    *v7 = (float)*(unint64_t *)&v211[8];
    v12 = v212;
    v212 = 0;
    if (!v12)
      goto LABEL_23;
LABEL_17:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_23;
  }
LABEL_51:
  *(_DWORD *)v211 = 0;
  sub_20820BA20(a1[6], v211);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)v211;
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  sub_20820BBEC(a1[6], &v210);
  v33 = *(float **)(a2 + 40);
  v32 = *(float **)(a2 + 48);
  v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
  if (v210 <= v34)
  {
    if (v210 < v34)
    {
      v32 = &v33[3 * v210];
      *(_QWORD *)(a2 + 48) = v32;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)(a2 + 40), v210 - v34);
    v33 = *(float **)(a2 + 40);
    v32 = *(float **)(a2 + 48);
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = a1[6];
      sub_20820CA98(v36, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v33 = (float)*(uint64_t *)&v211[8];
        v38 = v212;
        v212 = 0;
        if (!v38)
          goto LABEL_73;
        goto LABEL_67;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_347;
      v37 = *(double *)&v211[8];
      *v33 = v37;
      v38 = v212;
      v212 = 0;
      if (v38)
        goto LABEL_67;
LABEL_73:
      sub_20820CA98(v36, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v33[1] = (float)*(unint64_t *)&v211[8];
        v44 = v212;
        v212 = 0;
        if (!v44)
          goto LABEL_87;
LABEL_81:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_87;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v45 = *(double *)&v211[8];
        v33[1] = v45;
        v44 = v212;
        v212 = 0;
        if (!v44)
          goto LABEL_87;
        goto LABEL_81;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_347;
      v33[1] = (float)*(uint64_t *)&v211[8];
      v44 = v212;
      v212 = 0;
      if (v44)
        goto LABEL_81;
LABEL_87:
      sub_20820CA98(v36, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v33[2] = (float)*(unint64_t *)&v211[8];
          v51 = v212;
          v212 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 4:
          v52 = *(double *)&v211[8];
          v33[2] = v52;
          v51 = v212;
          v212 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 3:
          v33[2] = (float)*(uint64_t *)&v211[8];
          v51 = v212;
          v212 = 0;
          if (v51)
          {
LABEL_95:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_347:
          v204 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v204->__vftable = 0;
          v205 = std::bad_cast::bad_cast(v204);
          v205->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v205, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_101;
    }
    *v33 = (float)*(unint64_t *)&v211[8];
    v38 = v212;
    v212 = 0;
    if (!v38)
      goto LABEL_73;
LABEL_67:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_73;
  }
LABEL_101:
  *(_DWORD *)v211 = 0;
  sub_20820BA20(a1[6], v211);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)v211;
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  sub_20820BBEC(a1[6], &v210);
  v59 = *(float **)(a2 + 80);
  v58 = *(float **)(a2 + 88);
  v60 = 0xAAAAAAAAAAAAAAABLL * (v58 - v59);
  if (v210 <= v60)
  {
    if (v210 < v60)
    {
      v58 = &v59[3 * v210];
      *(_QWORD *)(a2 + 88) = v58;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)(a2 + 80), v210 - v60);
    v59 = *(float **)(a2 + 80);
    v58 = *(float **)(a2 + 88);
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = a1[6];
      sub_20820CA98(v62, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v59 = (float)*(uint64_t *)&v211[8];
        v64 = v212;
        v212 = 0;
        if (!v64)
          goto LABEL_123;
        goto LABEL_117;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_348;
      v63 = *(double *)&v211[8];
      *v59 = v63;
      v64 = v212;
      v212 = 0;
      if (v64)
        goto LABEL_117;
LABEL_123:
      sub_20820CA98(v62, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
      {
        v59[1] = (float)*(unint64_t *)&v211[8];
        v70 = v212;
        v212 = 0;
        if (!v70)
          goto LABEL_137;
LABEL_131:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_137;
      }
      if (*(_DWORD *)v211 == 4)
      {
        v71 = *(double *)&v211[8];
        v59[1] = v71;
        v70 = v212;
        v212 = 0;
        if (!v70)
          goto LABEL_137;
        goto LABEL_131;
      }
      if (*(_DWORD *)v211 != 3)
        goto LABEL_348;
      v59[1] = (float)*(uint64_t *)&v211[8];
      v70 = v212;
      v212 = 0;
      if (v70)
        goto LABEL_131;
LABEL_137:
      sub_20820CA98(v62, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v59[2] = (float)*(unint64_t *)&v211[8];
          v77 = v212;
          v212 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 4:
          v78 = *(double *)&v211[8];
          v59[2] = v78;
          v77 = v212;
          v212 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 3:
          v59[2] = (float)*(uint64_t *)&v211[8];
          v77 = v212;
          v212 = 0;
          if (v77)
          {
LABEL_145:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_348:
          v206 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v206->__vftable = 0;
          v207 = std::bad_cast::bad_cast(v206);
          v207->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v207, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_151;
    }
    *v59 = (float)*(unint64_t *)&v211[8];
    v64 = v212;
    v212 = 0;
    if (!v64)
      goto LABEL_123;
LABEL_117:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_123;
  }
LABEL_151:
  *(_DWORD *)v211 = 0;
  sub_20820BA20(a1[6], v211);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)v211;
  *(_QWORD *)v211 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  sub_20820BBEC(a1[6], v211);
  v85 = *(_BYTE **)(a2 + 120);
  v84 = *(_BYTE **)(a2 + 128);
  if (*(_QWORD *)v211 <= (unint64_t)(v84 - v85))
  {
    if (*(_QWORD *)v211 < (unint64_t)(v84 - v85))
    {
      v84 = &v85[*(_QWORD *)v211];
      *(_QWORD *)(a2 + 128) = &v85[*(_QWORD *)v211];
    }
  }
  else
  {
    sub_207E28EB8(a2 + 120, *(_QWORD *)v211 - (v84 - v85));
    v85 = *(_BYTE **)(a2 + 120);
    v84 = *(_BYTE **)(a2 + 128);
  }
  v86 = a1[6];
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_20820B6F8(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = a1[6];
  }
  *(_DWORD *)v211 = 0;
  sub_20820BA20(v86, v211);
  *(_DWORD *)(a2 + 152) = *(_DWORD *)v211;
  *(_QWORD *)v211 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  sub_20820BBEC(a1[6], v211);
  v89 = *(_BYTE **)(a2 + 160);
  v88 = *(_BYTE **)(a2 + 168);
  if (*(_QWORD *)v211 <= (unint64_t)(v88 - v89))
  {
    if (*(_QWORD *)v211 < (unint64_t)(v88 - v89))
    {
      v88 = &v89[*(_QWORD *)v211];
      *(_QWORD *)(a2 + 168) = &v89[*(_QWORD *)v211];
    }
  }
  else
  {
    sub_207E28EB8(a2 + 160, *(_QWORD *)v211 - (v88 - v89));
    v89 = *(_BYTE **)(a2 + 160);
    v88 = *(_BYTE **)(a2 + 168);
  }
  v90 = a1[6];
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_20820B6F8(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = a1[6];
  }
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  sub_20820BBEC(v90, &v210);
  v93 = *(_DWORD **)(a2 + 192);
  v92 = *(_DWORD **)(a2 + 200);
  v94 = 0xAAAAAAAAAAAAAAABLL * (v92 - v93);
  if (v210 <= v94)
  {
    if (v210 < v94)
    {
      v92 = &v93[3 * v210];
      *(_QWORD *)(a2 + 200) = v92;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)(a2 + 192), v210 - v94);
    v93 = *(_DWORD **)(a2 + 192);
    v92 = *(_DWORD **)(a2 + 200);
  }
  if (v92 != v93)
  {
    v95 = v92;
    do
    {
      v96 = a1[6];
      sub_20820CA98(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_343;
      *v93 = *(_DWORD *)&v211[8];
      v98 = v212;
      v212 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_20820CA98(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_343;
      v93[1] = *(_DWORD *)&v211[8];
      v105 = v212;
      v212 = 0;
      if (v105)
      {
        for (i1 = (char *)v105[4]; i1 != (char *)v105[6]; i1 -= 16)
        {
          v108 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v107 = *((_QWORD *)i1 - 1);
          v108(v107);
        }
        free(i1);
        v109 = (_QWORD *)v105[3];
        if (v109)
        {
          do
          {
            v110 = (_QWORD *)*v109;
            free(v109);
            v109 = v110;
          }
          while (v110);
        }
        free(v105);
      }
      sub_20820CA98(v96, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_343:
        v196 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v196->__vftable = 0;
        v197 = std::bad_cast::bad_cast(v196);
        v197->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
        __cxa_throw(v197, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = *(_DWORD *)&v211[8];
      v112 = v212;
      v212 = 0;
      if (v112)
      {
        for (i2 = (char *)v112[4]; i2 != (char *)v112[6]; i2 -= 16)
        {
          v115 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v114 = *((_QWORD *)i2 - 1);
          v115(v114);
        }
        free(i2);
        v116 = (_QWORD *)v112[3];
        if (v116)
        {
          do
          {
            v117 = (_QWORD *)*v116;
            free(v116);
            v116 = v117;
          }
          while (v117);
        }
        free(v112);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v210 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  sub_20820BBEC(a1[6], &v210);
  v119 = *(char **)(a2 + 224);
  v118 = *(char **)(a2 + 232);
  v120 = (v118 - v119) >> 3;
  if (v210 <= v120)
  {
    if (v210 < v120)
    {
      v118 = &v119[8 * v210];
      *(_QWORD *)(a2 + 232) = v118;
    }
  }
  else
  {
    sub_207E29568(a2 + 224, v210 - v120);
    v119 = *(char **)(a2 + 224);
    v118 = *(char **)(a2 + 232);
  }
  if (v118 != v119)
  {
    v121 = v118;
    do
    {
      v122 = a1[6];
      sub_20820CA98(v122, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_345;
      *(_DWORD *)v119 = *(_DWORD *)&v211[8];
      v124 = v212;
      v212 = 0;
      if (v124)
      {
        for (i3 = (char *)v124[4]; i3 != (char *)v124[6]; i3 -= 16)
        {
          v127 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v126 = *((_QWORD *)i3 - 1);
          v127(v126);
        }
        free(i3);
        v128 = (_QWORD *)v124[3];
        if (v128)
        {
          do
          {
            v129 = (_QWORD *)*v128;
            free(v128);
            v128 = v129;
          }
          while (v129);
        }
        free(v124);
      }
      sub_20820CA98(v122, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_345:
        v200 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v200->__vftable = 0;
        v201 = std::bad_cast::bad_cast(v200);
        v201->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
        __cxa_throw(v201, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      *((_DWORD *)v119 + 1) = *(_DWORD *)&v211[8];
      v131 = v212;
      v212 = 0;
      if (v131)
      {
        for (i4 = (char *)v131[4]; i4 != (char *)v131[6]; i4 -= 16)
        {
          v134 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v133 = *((_QWORD *)i4 - 1);
          v134(v133);
        }
        free(i4);
        v135 = (_QWORD *)v131[3];
        if (v135)
        {
          do
          {
            v136 = (_QWORD *)*v135;
            free(v135);
            v135 = v136;
          }
          while (v136);
        }
        free(v131);
      }
      v119 += 8;
    }
    while (v119 != v121);
  }
  v210 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  sub_20820BBEC(a1[6], &v210);
  v138 = *(float **)(a2 + 256);
  v137 = *(float **)(a2 + 264);
  v139 = ((char *)v137 - (char *)v138) >> 3;
  if (v210 <= v139)
  {
    if (v210 < v139)
    {
      v137 = &v138[2 * v210];
      *(_QWORD *)(a2 + 264) = v137;
    }
  }
  else
  {
    sub_207E298A0(a2 + 256, v210 - v139);
    v138 = *(float **)(a2 + 256);
    v137 = *(float **)(a2 + 264);
  }
  if (v137 != v138)
  {
    v140 = v137;
    while (1)
    {
      v141 = a1[6];
      sub_20820CA98(v141, (uint64_t)v211);
      if (*(_DWORD *)v211 == 2)
        break;
      if (*(_DWORD *)v211 == 3)
      {
        *v138 = (float)*(uint64_t *)&v211[8];
        v143 = v212;
        v212 = 0;
        if (!v143)
          goto LABEL_263;
        goto LABEL_257;
      }
      if (*(_DWORD *)v211 != 4)
        goto LABEL_349;
      v142 = *(double *)&v211[8];
      *v138 = v142;
      v143 = v212;
      v212 = 0;
      if (v143)
        goto LABEL_257;
LABEL_263:
      sub_20820CA98(v141, (uint64_t)v211);
      switch(*(_DWORD *)v211)
      {
        case 2:
          v138[1] = (float)*(unint64_t *)&v211[8];
          v149 = v212;
          v212 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 4:
          v150 = *(double *)&v211[8];
          v138[1] = v150;
          v149 = v212;
          v212 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 3:
          v138[1] = (float)*(uint64_t *)&v211[8];
          v149 = v212;
          v212 = 0;
          if (v149)
          {
LABEL_271:
            for (i5 = (char *)v149[4]; i5 != (char *)v149[6]; i5 -= 16)
            {
              v153 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v152 = *((_QWORD *)i5 - 1);
              v153(v152);
            }
            free(i5);
            v154 = (_QWORD *)v149[3];
            if (v154)
            {
              do
              {
                v155 = (_QWORD *)*v154;
                free(v154);
                v154 = v155;
              }
              while (v155);
            }
            free(v149);
          }
          break;
        default:
LABEL_349:
          v208 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v208->__vftable = 0;
          v209 = std::bad_cast::bad_cast(v208);
          v209->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
          __cxa_throw(v209, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v138 += 2;
      if (v138 == v140)
        goto LABEL_277;
    }
    *v138 = (float)*(unint64_t *)&v211[8];
    v143 = v212;
    v212 = 0;
    if (!v143)
      goto LABEL_263;
LABEL_257:
    for (i6 = (char *)v143[4]; i6 != (char *)v143[6]; i6 -= 16)
    {
      v146 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v145 = *((_QWORD *)i6 - 1);
      v146(v145);
    }
    free(i6);
    v147 = (_QWORD *)v143[3];
    if (v147)
    {
      do
      {
        v148 = (_QWORD *)*v147;
        free(v147);
        v147 = v148;
      }
      while (v148);
    }
    free(v143);
    goto LABEL_263;
  }
LABEL_277:
  v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  sub_20820BBEC(a1[6], &v210);
  v157 = *(_DWORD **)(a2 + 288);
  v156 = *(_DWORD **)(a2 + 296);
  v158 = 0xAAAAAAAAAAAAAAABLL * (v156 - v157);
  if (v210 <= v158)
  {
    if (v210 < v158)
    {
      v156 = &v157[3 * v210];
      *(_QWORD *)(a2 + 296) = v156;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)(a2 + 288), v210 - v158);
    v157 = *(_DWORD **)(a2 + 288);
    v156 = *(_DWORD **)(a2 + 296);
  }
  if (v156 != v157)
  {
    v159 = v156;
    do
    {
      v160 = a1[6];
      sub_20820CA98(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_344;
      *v157 = *(_DWORD *)&v211[8];
      v162 = v212;
      v212 = 0;
      if (v162)
      {
        for (i7 = (char *)v162[4]; i7 != (char *)v162[6]; i7 -= 16)
        {
          v165 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v164 = *((_QWORD *)i7 - 1);
          v165(v164);
        }
        free(i7);
        v166 = (_QWORD *)v162[3];
        if (v166)
        {
          do
          {
            v167 = (_QWORD *)*v166;
            free(v166);
            v166 = v167;
          }
          while (v167);
        }
        free(v162);
      }
      sub_20820CA98(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
        goto LABEL_344;
      v157[1] = *(_DWORD *)&v211[8];
      v169 = v212;
      v212 = 0;
      if (v169)
      {
        for (i8 = (char *)v169[4]; i8 != (char *)v169[6]; i8 -= 16)
        {
          v172 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v171 = *((_QWORD *)i8 - 1);
          v172(v171);
        }
        free(i8);
        v173 = (_QWORD *)v169[3];
        if (v173)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            free(v173);
            v173 = v174;
          }
          while (v174);
        }
        free(v169);
      }
      sub_20820CA98(v160, (uint64_t)v211);
      if (*(_DWORD *)v211 != 2 || HIDWORD(*(_QWORD *)&v211[8]) != 0)
      {
LABEL_344:
        v198 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v198->__vftable = 0;
        v199 = std::bad_cast::bad_cast(v198);
        v199->__vftable = (std::bad_cast_vtbl *)&off_24C08EC20;
        __cxa_throw(v199, (struct type_info *)&unk_24C08EB40, (void (*)(void *))std::exception::~exception);
      }
      v157[2] = *(_DWORD *)&v211[8];
      v176 = v212;
      v212 = 0;
      if (v176)
      {
        for (i9 = (char *)v176[4]; i9 != (char *)v176[6]; i9 -= 16)
        {
          v179 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v178 = *((_QWORD *)i9 - 1);
          v179(v178);
        }
        free(i9);
        v180 = (_QWORD *)v176[3];
        if (v180)
        {
          do
          {
            v181 = (_QWORD *)*v180;
            free(v180);
            v180 = v181;
          }
          while (v181);
        }
        free(v176);
      }
      v157 += 3;
    }
    while (v157 != v159);
  }
  if (a3 >= 2)
  {
    LOBYTE(v210) = 0;
    sub_20820B6F8(a1[6], &v210);
    if ((_BYTE)v210)
    {
      if (!*(_BYTE *)(a2 + 344))
      {
        *(_QWORD *)(a2 + 320) = 0;
        *(_QWORD *)(a2 + 328) = 0;
        *(_QWORD *)(a2 + 336) = 0;
        *(_BYTE *)(a2 + 344) = 1;
      }
      *(_DWORD *)v211 = 2;
      sub_20820BA20(a1[6], v211);
      if (*(_DWORD *)v211 <= 1u)
      {
        memset(v211, 0, sizeof(v211));
        v186 = a1[6];
        sub_20820BCC8(v186, (float *)v211);
        sub_20820BCC8(v186, (float *)&v211[4]);
        sub_20820BCC8(v186, (float *)&v211[8]);
        v187 = a1[6];
        sub_20820BCC8(v187, (float *)((unint64_t)v211 | 0xC));
        sub_20820BCC8(v187, (float *)&v211[16]);
        sub_20820BCC8(v187, (float *)&v211[20]);
        v188 = *(_OWORD *)v211;
        v189 = *(int32x2_t *)&v211[12];
        HIDWORD(v188) = *(_DWORD *)&v211[12];
        *(_OWORD *)(a2 + 320) = v188;
        LODWORD(v188) = vdup_lane_s32(v189, 1).u32[0];
        DWORD1(v188) = *(_DWORD *)&v211[20];
        *(_QWORD *)(a2 + 336) = v188;
        if (a3 < 4)
          return;
      }
      else
      {
        sub_207E17CA8(a1 + 2);
        v182 = a1[6];
        sub_20820BCC8(v182, (float *)(a2 + 320));
        sub_20820BCC8(v182, (float *)(a2 + 324));
        sub_20820BCC8(v182, (float *)(a2 + 328));
        v183 = a1[6];
        sub_20820BCC8(v183, (float *)(a2 + 332));
        sub_20820BCC8(v183, (float *)(a2 + 336));
        sub_20820BCC8(v183, (float *)(a2 + 340));
        v184 = a1[4];
        v185 = *(_QWORD *)(v184 - 16)
             - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
             + *(_QWORD *)(v184 - 8);
        if (v185)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v185);
        a1[4] -= 16;
        if (a3 < 4)
          return;
      }
LABEL_335:
      *(_DWORD *)v211 = 0;
      sub_20820BA20(a1[6], v211);
      *(_DWORD *)(a2 + 348) = *(_DWORD *)v211;
      *(_QWORD *)v211 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      sub_20820BBEC(a1[6], v211);
      v191 = *(float **)(a2 + 352);
      v190 = *(float **)(a2 + 360);
      v192 = v190 - v191;
      if (*(_QWORD *)v211 <= v192)
      {
        if (*(_QWORD *)v211 < v192)
        {
          v190 = &v191[*(_QWORD *)v211];
          *(_QWORD *)(a2 + 360) = v190;
        }
      }
      else
      {
        sub_207E29E08(a2 + 352, *(_QWORD *)v211 - v192);
        v191 = *(float **)(a2 + 352);
        v190 = *(float **)(a2 + 360);
      }
      v193 = (char *)v190 - (char *)v191;
      if (v193)
      {
        v194 = a1[6];
        v195 = 4 * (v193 >> 2);
        do
        {
          sub_20820BCC8(v194, v191++);
          v195 -= 4;
        }
        while (v195);
      }
      return;
    }
    if (*(_BYTE *)(a2 + 344))
      *(_BYTE *)(a2 + 344) = 0;
    if (a3 >= 4)
      goto LABEL_335;
  }
}

void sub_207E2D730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20820EE04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E2D744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20820EE04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E2D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20820EE04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E2D76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20820EE04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E2D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20820EE04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E2D794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20820EE04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E2D7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20820EE04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207E2D808(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2081F5AC0(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_208097288(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 4)
    v6 = 4;
  else
    v6 = v12;
  if (v6 < 3)
    sub_207E2D904((uint64_t)&v11, a1, a2, v6);
  else
    sub_207E2DFA4(a1, (uint64_t)a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

uint64_t *sub_207E2D904(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  int v29;
  int v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *exception;
  __int128 v40;
  uint64_t *v41;
  uint64_t v42[3];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  int v56;
  _BYTE v57[24];
  int v58;
  _BYTE v59[24];
  int v60;
  _BYTE v61[24];
  int v62;
  int v63;
  __int128 v64;
  uint64_t *v65;
  char v66;
  uint64_t v67;

  memset(v42, 0, sizeof(v42));
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  v48 = 0;
  v50 = 0;
  v49 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v63 = 0;
  LOBYTE(v64) = 0;
  v66 = 0;
  memset(v55, 0, sizeof(v55));
  v56 = 0;
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v60 = 0;
  memset(v59, 0, sizeof(v59));
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  *(_QWORD *)&v40 = "vertices";
  *((_QWORD *)&v40 + 1) = 8;
  v41 = v42;
  sub_207E2E828(a2, (uint64_t)&v40);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "colors_type";
  *(_QWORD *)(a2 + 96) = 11;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v43 + 4;
  sub_207E2E970((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "colors";
  *((_QWORD *)&v40 + 1) = 6;
  v41 = v44;
  sub_207E2E828(a2, (uint64_t)&v40);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "normals_type";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v45 + 4;
  sub_207E2E970((uint64_t *)a2, (_DWORD **)&v40);
  *(_QWORD *)&v40 = "normals";
  *((_QWORD *)&v40 + 1) = 7;
  v41 = v46;
  sub_207E2E828(a2, (uint64_t)&v40);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v47 + 4;
  sub_207E2E970((uint64_t *)a2, (_DWORD **)&v40);
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "semantics";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  v11 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a2);
  v12 = *v11;
  if (v12 == 2)
  {
    v13 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v12 == 1)
  {
    v13 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 16);
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    v17 = v13 - (v49 - v48);
    if (v13 <= v49 - v48)
      goto LABEL_18;
LABEL_16:
    sub_207E28EB8((uint64_t)&v48, v17);
    v15 = v48;
    v14 = v49;
    goto LABEL_20;
  }
  if (!*v11)
  {
    v13 = 0;
    v14 = v49;
    v15 = v48;
    v16 = v49 - v48;
    goto LABEL_18;
  }
  v13 = 1;
  v14 = v49;
  v15 = v48;
  v16 = v49 - v48;
  v17 = 1 - (v49 - v48);
  if (v49 == v48)
    goto LABEL_16;
LABEL_18:
  if (v16 > v13)
  {
    v14 = v15 + v13;
    v49 = v15 + v13;
  }
LABEL_20:
  *(_QWORD *)&v40 = v14 - v15;
  *((_QWORD *)&v40 + 1) = v15;
  v18 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F5E90(v18, (uint64_t)&v40);
  v19 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials_type";
  *(_QWORD *)(a2 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v40 = (char *)&v51 + 4;
  sub_207E2E970((uint64_t *)a2, (_DWORD **)&v40);
  v20 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "materials";
  *(_QWORD *)(a2 + 96) = 9;
  if (!v20)
    *(_BYTE *)(a2 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a2);
  v22 = *v21;
  if (v22 == 2)
  {
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
    goto LABEL_31;
  }
  if (v22 == 1)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 16);
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    v27 = v23 - (v53 - v52);
    if (v23 <= v53 - v52)
      goto LABEL_33;
LABEL_31:
    sub_207E28EB8((uint64_t)&v52, v27);
    v25 = v52;
    v24 = v53;
    goto LABEL_35;
  }
  if (!*v21)
  {
    v23 = 0;
    v24 = v53;
    v25 = v52;
    v26 = v53 - v52;
    goto LABEL_33;
  }
  v23 = 1;
  v24 = v53;
  v25 = v52;
  v26 = v53 - v52;
  v27 = 1 - (v53 - v52);
  if (v53 == v52)
    goto LABEL_31;
LABEL_33:
  if (v26 > v23)
  {
    v24 = v25 + v23;
    v53 = v25 + v23;
  }
LABEL_35:
  *(_QWORD *)&v40 = v24 - v25;
  *((_QWORD *)&v40 + 1) = v25;
  v28 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2081F5E90(v28, (uint64_t)&v40);
  *(_QWORD *)&v40 = "faces";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v55[4];
  sub_207E2EB30(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "edges";
  *((_QWORD *)&v40 + 1) = 5;
  v41 = (uint64_t *)&v57[4];
  sub_207E2EC8C(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_coords";
  *((_QWORD *)&v40 + 1) = 10;
  v41 = (uint64_t *)&v59[4];
  sub_207E2EDCC(a2, (uint64_t)&v40);
  *(_QWORD *)&v40 = "tex_faces";
  *((_QWORD *)&v40 + 1) = 9;
  v41 = (uint64_t *)&v61[4];
  sub_207E2EB30(a2, (uint64_t)&v40);
  if (a4 >= 2)
  {
    v29 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "box";
    *(_QWORD *)(a2 + 96) = 3;
    if (!v29)
      *(_BYTE *)(a2 + 104) = 1;
    if (*(_BYTE *)sub_2081F5D78((uint64_t *)a2))
    {
      v40 = 0uLL;
      v41 = 0;
      sub_2081F5AC0(a2);
      v30 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "version";
      *(_QWORD *)(a2 + 96) = 7;
      if (!v30)
        *(_BYTE *)(a2 + 104) = 1;
      v31 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v67 = 0;
      sub_208097288(v31, &v67);
      if (HIDWORD(v67))
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "min";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_2081F6B44(v33, (float *)&v40);
      v34 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "max";
      *(_QWORD *)(a2 + 96) = 3;
      if (!v34)
        *(_BYTE *)(a2 + 104) = 1;
      v35 = sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      sub_2081F6B44(v35, (float *)&v40 + 3);
      v36 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v36 - 8);
      v37 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 112) = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(a2 + 48) = v36 - 8;
      *(_QWORD *)(a2 + 72) = v37 - 8;
      v65 = v41;
      v64 = v40;
      v66 = 1;
    }
    else
    {
      ++*(_QWORD *)(a2 + 112);
      if (v66)
        v66 = 0;
    }
    if (a4 >= 4)
    {
      if (!*(_BYTE *)(a2 + 104))
        *(_BYTE *)(a2 + 104) = 1;
      *(_QWORD *)(a2 + 88) = "confidences";
      *(_QWORD *)(a2 + 96) = 11;
    }
  }
  sub_207E2A010((uint64_t)&v40, (uint64_t)v42);
  sub_207E2A154(a3, (uint64_t)&v40);
  sub_207E080B8((uint64_t *)&v40);
  return sub_207E2A8E8(v42);
}

void sub_207E2DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2DF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2DFA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  char *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  float **v58;
  unint64_t v59;
  _QWORD *exception;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[2];

  *(_QWORD *)&v63[0] = "vertices";
  *((_QWORD *)&v63[0] + 1) = 8;
  *(_QWORD *)&v63[1] = a2;
  sub_207E2E828(a1, (uint64_t)v63);
  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "colors_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 32;
  sub_207E2E970((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "colors";
  *((_QWORD *)&v63[0] + 1) = 6;
  *(_QWORD *)&v63[1] = a2 + 40;
  sub_207E2E828(a1, (uint64_t)v63);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "normals_type";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 72;
  sub_207E2E970((uint64_t *)a1, (_DWORD **)v63);
  *(_QWORD *)&v63[0] = "normals";
  *((_QWORD *)&v63[0] + 1) = 7;
  *(_QWORD *)&v63[1] = a2 + 80;
  sub_207E2E828(a1, (uint64_t)v63);
  v8 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v8)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 112;
  sub_207E2E970((uint64_t *)a1, (_DWORD **)v63);
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "semantics";
  *(_QWORD *)(a1 + 96) = 9;
  if (v9)
  {
    v10 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
    v11 = *v10;
    if (v11 != 2)
      goto LABEL_9;
LABEL_13:
    v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 8) - **((_QWORD **)v10 + 1)) >> 4;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v10 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
  v11 = *v10;
  if (v11 == 2)
    goto LABEL_13;
LABEL_9:
  if (v11 == 1)
  {
    v12 = *(_QWORD *)(*((_QWORD *)v10 + 1) + 16);
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = v12 - (v13 - v15);
    if (v12 > v13 - v15)
      goto LABEL_19;
  }
  else
  {
    if (!v11)
    {
      v12 = 0;
      v14 = (uint64_t *)(a2 + 128);
      v13 = *(_QWORD *)(a2 + 128);
      v15 = *(_QWORD *)(a2 + 120);
      v16 = v13 - v15;
      goto LABEL_16;
    }
    v12 = 1;
    v14 = (uint64_t *)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = v13 - v15;
    v17 = 1 - (v13 - v15);
    if (v13 == v15)
    {
LABEL_19:
      sub_207E28EB8(a2 + 120, v17);
      v15 = *(_QWORD *)(a2 + 120);
      v13 = *v14;
      goto LABEL_20;
    }
  }
LABEL_16:
  if (v16 > v12)
  {
    v13 = v15 + v12;
    *v14 = v15 + v12;
  }
LABEL_20:
  *(_QWORD *)&v63[0] = v13 - v15;
  *((_QWORD *)&v63[0] + 1) = v15;
  v18 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2081F5E90(v18, (uint64_t)v63);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials_type";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)&v63[0] = a2 + 152;
  sub_207E2E970((uint64_t *)a1, (_DWORD **)v63);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "materials";
  *(_QWORD *)(a1 + 96) = 9;
  if (v20)
  {
    v21 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
    v22 = *v21;
    if (v22 != 2)
      goto LABEL_24;
LABEL_28:
    v23 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 8) - **((_QWORD **)v21 + 1)) >> 4;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
    goto LABEL_31;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v21 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
  v22 = *v21;
  if (v22 == 2)
    goto LABEL_28;
LABEL_24:
  if (v22 == 1)
  {
    v23 = *(_QWORD *)(*((_QWORD *)v21 + 1) + 16);
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = v23 - (v24 - v26);
    if (v23 > v24 - v26)
      goto LABEL_34;
  }
  else
  {
    if (!v22)
    {
      v23 = 0;
      v25 = (uint64_t *)(a2 + 168);
      v24 = *(_QWORD *)(a2 + 168);
      v26 = *(_QWORD *)(a2 + 160);
      v27 = v24 - v26;
      goto LABEL_31;
    }
    v23 = 1;
    v25 = (uint64_t *)(a2 + 168);
    v24 = *(_QWORD *)(a2 + 168);
    v26 = *(_QWORD *)(a2 + 160);
    v27 = v24 - v26;
    v28 = 1 - (v24 - v26);
    if (v24 == v26)
    {
LABEL_34:
      sub_207E28EB8(a2 + 160, v28);
      v26 = *(_QWORD *)(a2 + 160);
      v24 = *v25;
      goto LABEL_35;
    }
  }
LABEL_31:
  if (v27 > v23)
  {
    v24 = v26 + v23;
    *v25 = v26 + v23;
  }
LABEL_35:
  *(_QWORD *)&v63[0] = v24 - v26;
  *((_QWORD *)&v63[0] + 1) = v26;
  v29 = (char *)sub_2081F5D78((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2081F5E90(v29, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "faces";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 192;
  sub_207E2EB30(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "edges";
  *((_QWORD *)&v63[0] + 1) = 5;
  *(_QWORD *)&v63[1] = a2 + 224;
  sub_207E2EC8C(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_coords";
  *((_QWORD *)&v63[0] + 1) = 10;
  *(_QWORD *)&v63[1] = a2 + 256;
  sub_207E2EDCC(a1, (uint64_t)v63);
  *(_QWORD *)&v63[0] = "tex_faces";
  *((_QWORD *)&v63[0] + 1) = 9;
  *(_QWORD *)&v63[1] = a2 + 288;
  sub_207E2EB30(a1, (uint64_t)v63);
  if (a3 < 2)
    return;
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "box";
  *(_QWORD *)(a1 + 96) = 3;
  if (v30)
  {
    if (*(_BYTE *)sub_2081F5D78((uint64_t *)a1))
      goto LABEL_38;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_2081F5D78((uint64_t *)a1))
    {
LABEL_38:
      v61 = 0uLL;
      v62 = 0;
      v31 = *(_DWORD *)(a1 + 8);
      sub_2081F5AC0(a1);
      v32 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v32)
        *(_BYTE *)(a1 + 104) = 1;
      v33 = (char *)sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      *(_QWORD *)&v63[0] = 0;
      sub_208097288(v33, v63);
      v34 = v63[0];
      if (!HIDWORD(*(_QWORD *)&v63[0]))
      {
        if (v31 < 1)
          goto LABEL_50;
        if (v31 != 2 || LODWORD(v63[0]) < 2)
        {
LABEL_48:
          if (v34 >= 2)
            v34 = 2;
LABEL_50:
          if (v34 < 2)
          {
            memset(v63, 0, 24);
            v42 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v42)
              *(_BYTE *)(a1 + 104) = 1;
            v43 = sub_2081F5D78((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F6B44(v43, (float *)v63);
            v44 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v44)
              *(_BYTE *)(a1 + 104) = 1;
            v45 = sub_2081F5D78((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F6B44(v45, (float *)((unint64_t)v63 | 0xC));
            v46 = v63[0];
            HIDWORD(v46) = HIDWORD(v63[0]);
            v61 = v46;
            LODWORD(v46) = vdup_lane_s32(*(int32x2_t *)((char *)v63 + 12), 1).u32[0];
            DWORD1(v46) = DWORD1(v63[1]);
            v62 = v46;
          }
          else
          {
            v38 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "min";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v38)
              *(_BYTE *)(a1 + 104) = 1;
            v39 = sub_2081F5D78((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F6B44(v39, (float *)&v61);
            v40 = *(unsigned __int8 *)(a1 + 104);
            *(_QWORD *)(a1 + 88) = "max";
            *(_QWORD *)(a1 + 96) = 3;
            if (!v40)
              *(_BYTE *)(a1 + 104) = 1;
            v41 = sub_2081F5D78((uint64_t *)a1);
            ++*(_QWORD *)(a1 + 112);
            sub_2081F6B44(v41, (float *)((unint64_t)&v61 | 0xC));
          }
          v47 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v47 - 8);
          v48 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(a1 + 48) = v47 - 8;
          *(_QWORD *)(a1 + 72) = v48 - 8;
          *(_OWORD *)(a2 + 320) = v61;
          *(_QWORD *)(a2 + 336) = v62;
          *(_BYTE *)(a2 + 344) = 1;
          if (a3 >= 4)
            goto LABEL_67;
          return;
        }
        v35 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "min_version";
        *(_QWORD *)(a1 + 96) = 11;
        if (!v35)
          *(_BYTE *)(a1 + 104) = 1;
        v36 = (char *)sub_2081F5D78((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        *(_QWORD *)&v63[0] = 0;
        sub_208097288(v36, v63);
        v37 = v63[0];
        if (!HIDWORD(*(_QWORD *)&v63[0]))
        {
          if (LODWORD(v63[0]) >= 3)
          {
            sub_207E29A98();
            sub_208212838((std::string *)&xmmword_253E511E0, v37, 2u);
          }
          goto LABEL_48;
        }
      }
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C08F078;
      __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
    }
  }
  ++*(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 344))
    *(_BYTE *)(a2 + 344) = 0;
  if (a3 >= 4)
  {
LABEL_67:
    v49 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences_type";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v49)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)&v63[0] = a2 + 348;
    sub_207E2E970((uint64_t *)a1, (_DWORD **)v63);
    v50 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "confidences";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v50)
      *(_BYTE *)(a1 + 104) = 1;
    v51 = (unsigned __int8 *)sub_2081F5D78((uint64_t *)a1);
    v52 = *v51;
    if (v52 == 2)
    {
      v53 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) - **((_QWORD **)v51 + 1)) >> 4;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else if (v52 == 1)
    {
      v53 = *(_QWORD *)(*((_QWORD *)v51 + 1) + 16);
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = v53 - v56;
      if (v53 > v56)
        goto LABEL_82;
    }
    else
    {
      if (!*v51)
      {
        v53 = 0;
        v54 = (_QWORD *)(a2 + 360);
        v55 = *(float **)(a2 + 352);
        if (!((uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2))
          goto LABEL_83;
        goto LABEL_80;
      }
      v53 = 1;
      v55 = *(float **)(a2 + 352);
      v56 = (uint64_t)(*(_QWORD *)(a2 + 360) - (_QWORD)v55) >> 2;
      v57 = 1 - v56;
      if (!v56)
      {
LABEL_82:
        v58 = (float **)(a2 + 352);
        sub_207E29E08((uint64_t)v58, v57);
        v55 = *v58;
        goto LABEL_83;
      }
    }
    v54 = (_QWORD *)(a2 + 360);
    if (v56 <= v53)
    {
LABEL_83:
      v59 = sub_2081F5D78((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      sub_2081F6B44(v59, v55);
      return;
    }
LABEL_80:
    *v54 = &v55[v53];
    goto LABEL_83;
  }
}

void sub_207E2E828(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2081F5AC0(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (float **)(v4 + 1);
      v9 = (float *)v4[1];
      v10 = (float *)*v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (float **)(v4 + 1);
  v9 = (float *)v4[1];
  v10 = (float *)*v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_207E28AF0(v4, v7 - v11);
    v10 = (float *)*v4;
    v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[3 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v12, v10);
    v10 += 3;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_207E2E970(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F5D78(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_207D21A34(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20806E57C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E2EAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E2EB30(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2081F5AC0(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = (unint64_t *)(v4 + 1);
      v9 = v4[1];
      v10 = *v4;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = (unint64_t *)(v4 + 1);
  v9 = v4[1];
  v10 = *v4;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_207E2920C(v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 12 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    v12 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v12, (uint64_t)v15);
    v10 += 12;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_207E2EC8C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(uint64_t **)(a2 + 16);
  sub_2081F5AC0(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_207E29568((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = v10 + 8 * v7;
    *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    v12 = (char *)sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6730(v12, (uint64_t)v15);
    v10 += 8;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

void sub_207E2EDCC(uint64_t a1, uint64_t a2)
{
  int v3;
  float **v4;
  unsigned __int8 *v5;
  int v6;
  unint64_t v7;
  float **v8;
  float *v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3)
    *(_BYTE *)(a1 + 104) = 1;
  v4 = *(float ***)(a2 + 16);
  sub_2081F5AC0(a1);
  v5 = *(unsigned __int8 **)(a1 + 32);
  v6 = *v5;
  if (v6 == 2)
  {
    v7 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) - **((_QWORD **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    v7 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      v7 = 0;
      v8 = v4 + 1;
      v9 = v4[1];
      v10 = *v4;
      v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = v4 + 1;
  v9 = v4[1];
  v10 = *v4;
  v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_207E298A0((uint64_t)v4, v7 - v11);
    v10 = *v4;
    v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    v9 = &v10[2 * v7];
    *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    v12 = sub_2081F5D78((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2081F6B44(v12, v10);
    v10 += 2;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(a1 + 48) = v13 - 8;
  *(_QWORD *)(a1 + 72) = v14 - 8;
}

uint64_t *sub_207E2EEF8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v49[48];
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _DWORD v69[33];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;

  v50 = 0;
  v51 = 0;
  v53 = 0;
  v52 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v61 = 0;
  v60 = 0;
  v62 = 0;
  v64 = 0;
  v63 = 0;
  v65 = 0;
  v67 = 0;
  v66 = 0;
  v68 = 0;
  v69[32] = 0;
  LOBYTE(v70) = 0;
  v73 = 0;
  memset(v69, 0, 28);
  memset(&v69[8], 0, 28);
  memset(&v69[16], 0, 28);
  memset(&v69[24], 0, 28);
  v49[0] = 0;
  sub_20820A270(a2, v49);
  v8 = v50;
  v7 = v51;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v51 - v50);
  if (v49[0] <= v9)
  {
    if (v49[0] < v9)
    {
      v7 = &v50[3 * v49[0]];
      v51 = v7;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)&v50, v49[0] - v9);
    v8 = v50;
    v7 = v51;
  }
  if (v7 != v8)
  {
    v10 = v7;
    do
    {
      sub_20820A740(a2, v8);
      v11 = v8 + 1;
      sub_20820A740(a2, v11++);
      sub_20820A740(a2, v11);
      v8 = v11 + 1;
    }
    while (v8 != v10);
  }
  LODWORD(v49[0]) = 0;
  sub_208209DC8(a2, v49);
  HIDWORD(v53) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  sub_20820A270(a2, v49);
  v13 = v54;
  v12 = v55;
  v14 = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  if (v49[0] <= v14)
  {
    if (v49[0] < v14)
    {
      v12 = &v54[3 * v49[0]];
      v55 = v12;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)&v54, v49[0] - v14);
    v13 = v54;
    v12 = v55;
  }
  if (v12 != v13)
  {
    v15 = v12;
    do
    {
      sub_20820A740(a2, v13);
      v16 = v13 + 1;
      sub_20820A740(a2, v16++);
      sub_20820A740(a2, v16);
      v13 = v16 + 1;
    }
    while (v13 != v15);
  }
  LODWORD(v49[0]) = 0;
  sub_208209DC8(a2, v49);
  HIDWORD(v57) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  sub_20820A270(a2, v49);
  v18 = v58;
  v17 = v59;
  v19 = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  if (v49[0] <= v19)
  {
    if (v49[0] < v19)
    {
      v17 = &v58[3 * v49[0]];
      v59 = v17;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)&v58, v49[0] - v19);
    v18 = v58;
    v17 = v59;
  }
  if (v17 != v18)
  {
    v20 = v17;
    do
    {
      sub_20820A740(a2, v18);
      v21 = v18 + 1;
      sub_20820A740(a2, v21++);
      sub_20820A740(a2, v21);
      v18 = v21 + 1;
    }
    while (v18 != v20);
  }
  LODWORD(v49[0]) = 0;
  sub_208209DC8(a2, v49);
  HIDWORD(v61) = v49[0];
  v49[0] = v63 - v62;
  sub_20820A270(a2, v49);
  v22 = v63;
  v23 = v62;
  if (v49[0] <= (unint64_t)(v63 - v62))
  {
    if (v49[0] < (unint64_t)(v63 - v62))
    {
      v22 = &v62[v49[0]];
      v63 = &v62[v49[0]];
    }
  }
  else
  {
    sub_207E28EB8((uint64_t)&v62, v49[0] - (v63 - v62));
    v23 = v62;
    v22 = v63;
  }
  v24 = v22 - v23;
  if (v22 != v23)
  {
    do
    {
      sub_208209484(a2, v23++);
      --v24;
    }
    while (v24);
  }
  LODWORD(v49[0]) = 0;
  sub_208209DC8(a2, v49);
  HIDWORD(v65) = v49[0];
  v49[0] = v67 - v66;
  sub_20820A270(a2, v49);
  v25 = v67;
  v26 = v66;
  if (v49[0] <= (unint64_t)(v67 - v66))
  {
    if (v49[0] < (unint64_t)(v67 - v66))
    {
      v25 = &v66[v49[0]];
      v67 = &v66[v49[0]];
    }
  }
  else
  {
    sub_207E28EB8((uint64_t)&v66, v49[0] - (v67 - v66));
    v26 = v66;
    v25 = v67;
  }
  v27 = v25 - v26;
  if (v25 != v26)
  {
    do
    {
      sub_208209484(a2, v26++);
      --v27;
    }
    while (v27);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[3] - *(_QWORD *)&v69[1]) >> 2);
  sub_20820A270(a2, v49);
  v28 = *(_QWORD *)&v69[3];
  v29 = *(_DWORD **)&v69[1];
  v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[3] - *(_QWORD *)&v69[1]) >> 2);
  if (v49[0] <= v30)
  {
    if (v49[0] < v30)
    {
      v28 = *(_QWORD *)&v69[1] + 12 * v49[0];
      *(_QWORD *)&v69[3] = v28;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)&v69[1], v49[0] - v30);
    v29 = *(_DWORD **)&v69[1];
    v28 = *(_QWORD *)&v69[3];
  }
  if ((_DWORD *)v28 != v29)
  {
    v31 = (_DWORD *)v28;
    do
    {
      sub_208209DC8(a2, v29);
      v32 = v29 + 1;
      sub_208209DC8(a2, v32++);
      sub_208209DC8(a2, v32);
      v29 = v32 + 1;
    }
    while (v29 != v31);
  }
  v49[0] = (uint64_t)(*(_QWORD *)&v69[11] - *(_QWORD *)&v69[9]) >> 3;
  sub_20820A270(a2, v49);
  v33 = *(_QWORD *)&v69[11];
  v34 = *(_DWORD **)&v69[9];
  v35 = (uint64_t)(*(_QWORD *)&v69[11] - *(_QWORD *)&v69[9]) >> 3;
  if (v49[0] <= v35)
  {
    if (v49[0] < v35)
    {
      v33 = *(_QWORD *)&v69[9] + 8 * v49[0];
      *(_QWORD *)&v69[11] = v33;
    }
  }
  else
  {
    sub_207E29568((uint64_t)&v69[9], v49[0] - v35);
    v34 = *(_DWORD **)&v69[9];
    v33 = *(_QWORD *)&v69[11];
  }
  if ((_DWORD *)v33 != v34)
  {
    v36 = (_DWORD *)v33;
    do
    {
      sub_208209DC8(a2, v34);
      v37 = v34 + 1;
      sub_208209DC8(a2, v37);
      v34 = v37 + 1;
    }
    while (v34 != v36);
  }
  v49[0] = (uint64_t)(*(_QWORD *)&v69[19] - *(_QWORD *)&v69[17]) >> 3;
  sub_20820A270(a2, v49);
  v38 = *(_QWORD *)&v69[19];
  v39 = *(_DWORD **)&v69[17];
  v40 = (uint64_t)(*(_QWORD *)&v69[19] - *(_QWORD *)&v69[17]) >> 3;
  if (v49[0] <= v40)
  {
    if (v49[0] < v40)
    {
      v38 = *(_QWORD *)&v69[17] + 8 * v49[0];
      *(_QWORD *)&v69[19] = v38;
    }
  }
  else
  {
    sub_207E298A0((uint64_t)&v69[17], v49[0] - v40);
    v39 = *(_DWORD **)&v69[17];
    v38 = *(_QWORD *)&v69[19];
  }
  if ((_DWORD *)v38 != v39)
  {
    v41 = (_DWORD *)v38;
    do
    {
      sub_20820A740(a2, v39);
      v42 = v39 + 1;
      sub_20820A740(a2, v42);
      v39 = v42 + 1;
    }
    while (v39 != v41);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[27] - *(_QWORD *)&v69[25]) >> 2);
  sub_20820A270(a2, v49);
  v43 = *(_QWORD *)&v69[27];
  v44 = *(_DWORD **)&v69[25];
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v69[27] - *(_QWORD *)&v69[25]) >> 2);
  if (v49[0] <= v45)
  {
    if (v49[0] < v45)
    {
      v43 = *(_QWORD *)&v69[25] + 12 * v49[0];
      *(_QWORD *)&v69[27] = v43;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)&v69[25], v49[0] - v45);
    v44 = *(_DWORD **)&v69[25];
    v43 = *(_QWORD *)&v69[27];
  }
  if ((_DWORD *)v43 != v44)
  {
    v46 = (_DWORD *)v43;
    do
    {
      sub_208209DC8(a2, v44);
      v47 = v44 + 1;
      sub_208209DC8(a2, v47++);
      sub_208209DC8(a2, v47);
      v44 = v47 + 1;
    }
    while (v44 != v46);
  }
  if (a4 >= 2)
  {
    v74 = 0;
    sub_208209484(a2, &v74);
    if (v74)
    {
      if (!v73)
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 1;
      }
      LODWORD(v49[0]) = 1;
      sub_208209DC8(a2, v49);
      sub_20820A740(a2, &v70);
      sub_20820A740(a2, (_DWORD *)&v70 + 1);
      sub_20820A740(a2, &v71);
      sub_20820A740(a2, (_DWORD *)&v71 + 1);
      sub_20820A740(a2, &v72);
      sub_20820A740(a2, (_DWORD *)&v72 + 1);
    }
    else if (v73)
    {
      v73 = 0;
    }
  }
  sub_207E2A010((uint64_t)v49, (uint64_t)&v50);
  sub_207E2A154(a3, (uint64_t)v49);
  sub_207E080B8(v49);
  return sub_207E2A8E8((uint64_t *)&v50);
}

void sub_207E2F694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E2F770(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unint64_t v26;
  _DWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  int32x2_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *__p[4];

  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
  sub_20820A270(a1, __p);
  v7 = *(_DWORD **)a2;
  v6 = *(_DWORD **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (__p[0] <= (void *)v8)
  {
    if (__p[0] < (void *)v8)
    {
      v6 = &v7[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)a2, (unint64_t)__p[0] - v8);
    v7 = *(_DWORD **)a2;
    v6 = *(_DWORD **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      sub_20820A740(a1, v7);
      sub_20820A740(a1, v7 + 1);
      sub_20820A740(a1, v7 + 2);
      v7 += 3;
    }
    while (v7 != v9);
  }
  LODWORD(__p[0]) = 0;
  sub_208209DC8(a1, __p);
  *(_DWORD *)(a2 + 32) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2));
  sub_20820A270(a1, __p);
  v11 = *(_DWORD **)(a2 + 40);
  v10 = *(_DWORD **)(a2 + 48);
  v12 = 0xAAAAAAAAAAAAAAABLL * (v10 - v11);
  if (__p[0] <= (void *)v12)
  {
    if (__p[0] < (void *)v12)
    {
      v10 = &v11[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 48) = v10;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)(a2 + 40), (unint64_t)__p[0] - v12);
    v11 = *(_DWORD **)(a2 + 40);
    v10 = *(_DWORD **)(a2 + 48);
  }
  if (v10 != v11)
  {
    v13 = v10;
    do
    {
      sub_20820A740(a1, v11);
      sub_20820A740(a1, v11 + 1);
      sub_20820A740(a1, v11 + 2);
      v11 += 3;
    }
    while (v11 != v13);
  }
  LODWORD(__p[0]) = 0;
  sub_208209DC8(a1, __p);
  *(_DWORD *)(a2 + 72) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
  sub_20820A270(a1, __p);
  v15 = *(_DWORD **)(a2 + 80);
  v14 = *(_DWORD **)(a2 + 88);
  v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - v15);
  if (__p[0] <= (void *)v16)
  {
    if (__p[0] < (void *)v16)
    {
      v14 = &v15[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 88) = v14;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)(a2 + 80), (unint64_t)__p[0] - v16);
    v15 = *(_DWORD **)(a2 + 80);
    v14 = *(_DWORD **)(a2 + 88);
  }
  if (v14 != v15)
  {
    v17 = v14;
    do
    {
      sub_20820A740(a1, v15);
      sub_20820A740(a1, v15 + 1);
      sub_20820A740(a1, v15 + 2);
      v15 += 3;
    }
    while (v15 != v17);
  }
  LODWORD(__p[0]) = 0;
  sub_208209DC8(a1, __p);
  *(_DWORD *)(a2 + 112) = __p[0];
  __p[0] = (void *)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120));
  sub_20820A270(a1, __p);
  v19 = *(_BYTE **)(a2 + 120);
  v18 = *(char **)(a2 + 128);
  if (__p[0] <= (void *)(v18 - v19))
  {
    if (__p[0] < (void *)(v18 - v19))
    {
      v18 = &v19[(unint64_t)__p[0]];
      *(_QWORD *)(a2 + 128) = &v19[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_207E28EB8(a2 + 120, (size_t)__p[0] - (v18 - v19));
    v19 = *(_BYTE **)(a2 + 120);
    v18 = *(char **)(a2 + 128);
  }
  v20 = v18 - v19;
  if (v18 != v19)
  {
    do
    {
      sub_208209484(a1, v19++);
      --v20;
    }
    while (v20);
  }
  LODWORD(__p[0]) = 0;
  sub_208209DC8(a1, __p);
  *(_DWORD *)(a2 + 152) = __p[0];
  __p[0] = (void *)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160));
  sub_20820A270(a1, __p);
  v22 = *(_BYTE **)(a2 + 160);
  v21 = *(char **)(a2 + 168);
  if (__p[0] <= (void *)(v21 - v22))
  {
    if (__p[0] < (void *)(v21 - v22))
    {
      v21 = &v22[(unint64_t)__p[0]];
      *(_QWORD *)(a2 + 168) = &v22[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_207E28EB8(a2 + 160, (size_t)__p[0] - (v21 - v22));
    v22 = *(_BYTE **)(a2 + 160);
    v21 = *(char **)(a2 + 168);
  }
  v23 = v21 - v22;
  if (v21 != v22)
  {
    do
    {
      sub_208209484(a1, v22++);
      --v23;
    }
    while (v23);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2));
  sub_20820A270(a1, __p);
  v25 = *(_DWORD **)(a2 + 192);
  v24 = *(_DWORD **)(a2 + 200);
  v26 = 0xAAAAAAAAAAAAAAABLL * (v24 - v25);
  if (__p[0] <= (void *)v26)
  {
    if (__p[0] < (void *)v26)
    {
      v24 = &v25[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 200) = v24;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)(a2 + 192), (unint64_t)__p[0] - v26);
    v25 = *(_DWORD **)(a2 + 192);
    v24 = *(_DWORD **)(a2 + 200);
  }
  if (v24 != v25)
  {
    v27 = v24;
    do
    {
      sub_208209DC8(a1, v25);
      sub_208209DC8(a1, v25 + 1);
      sub_208209DC8(a1, v25 + 2);
      v25 += 3;
    }
    while (v25 != v27);
  }
  __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
  sub_20820A270(a1, __p);
  v29 = *(char **)(a2 + 224);
  v28 = *(char **)(a2 + 232);
  v30 = (v28 - v29) >> 3;
  if (__p[0] <= (void *)v30)
  {
    if (__p[0] < (void *)v30)
    {
      v28 = &v29[8 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 232) = v28;
    }
  }
  else
  {
    sub_207E29568(a2 + 224, (unint64_t)__p[0] - v30);
    v29 = *(char **)(a2 + 224);
    v28 = *(char **)(a2 + 232);
  }
  if (v28 != v29)
  {
    v31 = v28;
    do
    {
      sub_208209DC8(a1, v29);
      sub_208209DC8(a1, (_DWORD *)v29 + 1);
      v29 += 8;
    }
    while (v29 != v31);
  }
  __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3);
  sub_20820A270(a1, __p);
  v33 = *(char **)(a2 + 256);
  v32 = *(char **)(a2 + 264);
  v34 = (v32 - v33) >> 3;
  if (__p[0] <= (void *)v34)
  {
    if (__p[0] < (void *)v34)
    {
      v32 = &v33[8 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 264) = v32;
    }
  }
  else
  {
    sub_207E298A0(a2 + 256, (unint64_t)__p[0] - v34);
    v33 = *(char **)(a2 + 256);
    v32 = *(char **)(a2 + 264);
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      sub_20820A740(a1, v33);
      sub_20820A740(a1, (_DWORD *)v33 + 1);
      v33 += 8;
    }
    while (v33 != v35);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2));
  sub_20820A270(a1, __p);
  v37 = *(_DWORD **)(a2 + 288);
  v36 = *(_DWORD **)(a2 + 296);
  v38 = 0xAAAAAAAAAAAAAAABLL * (v36 - v37);
  if (__p[0] <= (void *)v38)
  {
    if (__p[0] < (void *)v38)
    {
      v36 = &v37[3 * (uint64_t)__p[0]];
      *(_QWORD *)(a2 + 296) = v36;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)(a2 + 288), (unint64_t)__p[0] - v38);
    v37 = *(_DWORD **)(a2 + 288);
    v36 = *(_DWORD **)(a2 + 296);
  }
  if (v36 != v37)
  {
    v39 = v36;
    do
    {
      sub_208209DC8(a1, v37);
      sub_208209DC8(a1, v37 + 1);
      sub_208209DC8(a1, v37 + 2);
      v37 += 3;
    }
    while (v37 != v39);
  }
  if (a3 >= 2)
  {
    v51 = 0;
    sub_208209484(a1, &v51);
    if (!v51)
    {
      if (*(_BYTE *)(a2 + 344))
        *(_BYTE *)(a2 + 344) = 0;
      goto LABEL_76;
    }
    if (!*(_BYTE *)(a2 + 344))
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_BYTE *)(a2 + 344) = 1;
    }
    LODWORD(__p[0]) = 2;
    sub_208209DC8(a1, __p);
    v40 = __p[0];
    if (LODWORD(__p[0]) >= 2)
      v41 = 2;
    else
      v41 = __p[0];
    if (v41 < 2)
    {
      memset(__p, 0, 24);
      sub_20820A740(a1, __p);
      sub_20820A740(a1, (_DWORD *)__p + 1);
      sub_20820A740(a1, &__p[1]);
      sub_20820A740(a1, (_DWORD *)((unint64_t)__p | 0xC));
      sub_20820A740(a1, &__p[2]);
      sub_20820A740(a1, (_DWORD *)&__p[2] + 1);
      v42 = *(_OWORD *)__p;
      v43 = *(int32x2_t *)((char *)&__p[1] + 4);
      HIDWORD(v42) = HIDWORD(__p[1]);
      *(_OWORD *)(a2 + 320) = v42;
      LODWORD(v42) = vdup_lane_s32(v43, 1).u32[0];
      DWORD1(v42) = HIDWORD(__p[2]);
      *(_QWORD *)(a2 + 336) = v42;
      if (v40 < 2)
        goto LABEL_76;
    }
    else
    {
      sub_20820A740(a1, (_DWORD *)(a2 + 320));
      sub_20820A740(a1, (_DWORD *)(a2 + 324));
      sub_20820A740(a1, (_DWORD *)(a2 + 328));
      sub_20820A740(a1, (_DWORD *)(a2 + 332));
      sub_20820A740(a1, (_DWORD *)(a2 + 336));
      sub_20820A740(a1, (_DWORD *)(a2 + 340));
      if (v40 < 2)
      {
LABEL_76:
        if (a3 >= 4)
        {
          LODWORD(__p[0]) = 0;
          sub_208209DC8(a1, __p);
          *(_DWORD *)(a2 + 348) = __p[0];
          __p[0] = (void *)((uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
          sub_20820A270(a1, __p);
          v45 = *(char **)(a2 + 352);
          v44 = *(char **)(a2 + 360);
          v46 = (v44 - v45) >> 2;
          if (__p[0] <= (void *)v46)
          {
            if (__p[0] < (void *)v46)
            {
              v44 = &v45[4 * (uint64_t)__p[0]];
              *(_QWORD *)(a2 + 360) = v44;
            }
          }
          else
          {
            sub_207E29E08(a2 + 352, (unint64_t)__p[0] - v46);
            v45 = *(char **)(a2 + 352);
            v44 = *(char **)(a2 + 360);
          }
          v49 = v44 - v45;
          if (v49)
          {
            v50 = 4 * (v49 >> 2);
            do
            {
              sub_20820A740(a1, v45);
              v45 += 4;
              v50 -= 4;
            }
            while (v50);
          }
        }
        return;
      }
    }
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_76;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_76;
      sub_20820B068(a1, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_90:
          v48 = 0;
          if (SHIBYTE(__p[2]) < 0)
            goto LABEL_93;
          goto LABEL_79;
        }
      }
      else if (SHIBYTE(__p[2]) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_90;
      }
      v48 = 1;
      if (SHIBYTE(__p[2]) < 0)
LABEL_93:
        operator delete(__p[0]);
LABEL_79:
      if (*(_BYTE *)(a1 + 131))
        v47 = 0;
      else
        v47 = v48;
      if ((v47 & 1) == 0)
        goto LABEL_76;
    }
  }
}

void sub_207E2FFBC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  char v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3)
    sub_208072ECC(a2);
  if (v9 >= 4)
    v10 = 4;
  else
    v10 = v9;
  if (v10 < 3)
  {
    sub_207E300D0((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3)
      return;
  }
  else
  {
    sub_207E30478(a2, (uint64_t)a3, v10);
    if (v9 < 3)
      return;
  }
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_207E300BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207E300D0(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  std::logic_error *exception;
  uint64_t v31[48];
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  _QWORD v40[19];
  int v41;
  _BYTE v42[24];
  char v43;

  memset(v32, 0, sizeof(v32));
  v33 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  memset(v40, 0, 24);
  v41 = 0;
  v42[0] = 0;
  v43 = 0;
  memset((char *)&v40[3] + 4, 0, 28);
  memset((char *)&v40[7] + 4, 0, 28);
  memset((char *)&v40[11] + 4, 0, 28);
  memset((char *)&v40[15] + 4, 0, 28);
  sub_207E309FC(a2, v32);
  v7 = a2[6];
  v8 = a2[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 <= 3)
    goto LABEL_25;
  v11 = *(_DWORD *)(a2[3] + v7);
  a2[6] = v7 + 4;
  HIDWORD(v33) = v11;
  sub_207E309FC(a2, v34);
  v12 = a2[6];
  v13 = a2[7];
  v9 = v13 >= v12;
  v14 = v13 - v12;
  if (!v9)
    v14 = 0;
  if (v14 <= 3)
    goto LABEL_25;
  v15 = *(_DWORD *)(a2[3] + v12);
  a2[6] = v12 + 4;
  HIDWORD(v35) = v15;
  sub_207E309FC(a2, v36);
  v16 = a2[6];
  v17 = a2[7];
  v9 = v17 >= v16;
  v18 = v17 - v16;
  if (!v9)
    v18 = 0;
  if (v18 <= 3)
    goto LABEL_25;
  v19 = *(_DWORD *)(a2[3] + v16);
  a2[6] = v16 + 4;
  HIDWORD(v37) = v19;
  sub_207E30B60(a2, v38);
  v20 = a2[6];
  v21 = a2[7];
  v9 = v21 >= v20;
  v22 = v21 - v20;
  if (!v9)
    v22 = 0;
  if (v22 <= 3)
    goto LABEL_25;
  v23 = *(_DWORD *)(a2[3] + v20);
  a2[6] = v20 + 4;
  HIDWORD(v39) = v23;
  sub_207E30B60(a2, v40);
  sub_207E30C78(a2, &v40[4]);
  sub_207E30DDC(a2, (char **)&v40[8]);
  sub_207E30F0C(a2, (char **)&v40[12]);
  sub_207E30C78(a2, &v40[16]);
  if (a4 >= 2)
  {
    v24 = a2[6];
    v25 = a2[7];
    if (v25 <= v24)
      goto LABEL_25;
    v26 = *(unsigned __int8 *)(a2[3] + v24);
    v27 = v24 + 1;
    a2[6] = v24 + 1;
    if (v26)
    {
      if (!v43)
      {
        memset(v42, 0, sizeof(v42));
        v43 = 1;
      }
      v9 = v25 >= v27;
      v28 = v25 - v27;
      if (!v9)
        v28 = 0;
      if (v28 > 3)
      {
        a2[6] = v24 + 5;
        sub_207E3103C(a2, (uint64_t)v42);
        goto LABEL_24;
      }
LABEL_25:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Not enough data to read");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
    }
    if (v43)
      v43 = 0;
  }
LABEL_24:
  sub_207E2A010((uint64_t)v31, (uint64_t)v32);
  sub_207E2A154(a3, (uint64_t)v31);
  sub_207E080B8(v31);
  return sub_207E2A8E8(v32);
}

void sub_207E30420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  void *v57;

  __cxa_free_exception(v57);
  sub_207E2A8E8(&a57);
  _Unwind_Resume(a1);
}

void sub_207E30450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_207E2A8E8(&a57);
  _Unwind_Resume(a1);
}

void sub_207E30464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_207E2A8E8(&a57);
  _Unwind_Resume(a1);
}

void sub_207E30478(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int32x2_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::logic_error *exception;
  _OWORD v58[2];

  sub_207E309FC(a1, (uint64_t *)a2);
  v6 = a1[6];
  v7 = a1[7];
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
    v9 = 0;
  if (v9 <= 3)
    goto LABEL_49;
  v10 = *(_DWORD *)(a1[3] + v6);
  a1[6] = v6 + 4;
  *(_DWORD *)(a2 + 32) = v10;
  sub_207E309FC(a1, (uint64_t *)(a2 + 40));
  v11 = a1[6];
  v12 = a1[7];
  v8 = v12 >= v11;
  v13 = v12 - v11;
  if (!v8)
    v13 = 0;
  if (v13 <= 3)
    goto LABEL_49;
  v14 = *(_DWORD *)(a1[3] + v11);
  a1[6] = v11 + 4;
  *(_DWORD *)(a2 + 72) = v14;
  sub_207E309FC(a1, (uint64_t *)(a2 + 80));
  v15 = a1[6];
  v16 = a1[7];
  v8 = v16 >= v15;
  v17 = v16 - v15;
  if (!v8)
    v17 = 0;
  if (v17 <= 3)
    goto LABEL_49;
  v18 = *(_DWORD *)(a1[3] + v15);
  a1[6] = v15 + 4;
  *(_DWORD *)(a2 + 112) = v18;
  sub_207E30B60(a1, (_QWORD *)(a2 + 120));
  v19 = a1[6];
  v20 = a1[7];
  v8 = v20 >= v19;
  v21 = v20 - v19;
  if (!v8)
    v21 = 0;
  if (v21 <= 3)
    goto LABEL_49;
  v22 = *(_DWORD *)(a1[3] + v19);
  a1[6] = v19 + 4;
  *(_DWORD *)(a2 + 152) = v22;
  sub_207E30B60(a1, (_QWORD *)(a2 + 160));
  sub_207E30C78(a1, (uint64_t *)(a2 + 192));
  sub_207E30DDC(a1, (char **)(a2 + 224));
  sub_207E30F0C(a1, (char **)(a2 + 256));
  sub_207E30C78(a1, (uint64_t *)(a2 + 288));
  if (a3 < 2)
    return;
  v24 = a1[6];
  v23 = a1[7];
  if (v23 <= v24)
    goto LABEL_49;
  v25 = *(unsigned __int8 *)(a1[3] + v24);
  v26 = v24 + 1;
  a1[6] = v26;
  if (!v25)
  {
    if (*(_BYTE *)(a2 + 344))
      *(_BYTE *)(a2 + 344) = 0;
    if (a3 >= 4)
      goto LABEL_35;
    return;
  }
  v27 = (_QWORD *)(a2 + 320);
  if (!*(_BYTE *)(a2 + 344))
  {
    *v27 = 0;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    *(_BYTE *)(a2 + 344) = 1;
    v26 = a1[6];
    v23 = a1[7];
  }
  v8 = v23 >= v26;
  v28 = v23 - v26;
  if (!v8)
    v28 = 0;
  if (v28 <= 3)
  {
LABEL_49:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_57;
  }
  v29 = *(_DWORD *)(a1[3] + v26);
  a1[6] = v26 + 4;
  if (v29 <= 1)
  {
    memset(v58, 0, 24);
    sub_207E3103C(a1, (uint64_t)v58);
    v42 = v58[0];
    v43 = *(int32x2_t *)((char *)v58 + 12);
    HIDWORD(v42) = HIDWORD(v58[0]);
    *(_OWORD *)(a2 + 320) = v42;
    LODWORD(v42) = vdup_lane_s32(v43, 1).u32[0];
    DWORD1(v42) = DWORD1(v58[1]);
    *(_QWORD *)(a2 + 336) = v42;
    if (a3 >= 4)
      goto LABEL_35;
  }
  else
  {
    sub_208072ECC(a1);
    v30 = a1[6];
    v31 = a1[7];
    v8 = v31 >= v30;
    v32 = v31 - v30;
    if (!v8)
      v32 = 0;
    if (v32 <= 0xB)
      goto LABEL_56;
    v33 = (uint64_t *)(a1[3] + v30);
    v34 = *v33;
    *(_DWORD *)(a2 + 328) = *((_DWORD *)v33 + 2);
    *v27 = v34;
    v35 = a1[7];
    v36 = a1[6] + 12;
    a1[6] = v36;
    v8 = v35 >= v36;
    v37 = v35 - v36;
    if (!v8)
      v37 = 0;
    if (v37 <= 0xB)
    {
LABEL_56:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_207CA4068(exception, "Not enough data to read span");
      goto LABEL_57;
    }
    v38 = a1[3] + v36;
    v39 = *(_QWORD *)v38;
    *(_DWORD *)(a2 + 340) = *(_DWORD *)(v38 + 8);
    *(_QWORD *)(a2 + 332) = v39;
    a1[6] += 12;
    v40 = a1[12];
    v41 = a1[9];
    a1[6] = *(_QWORD *)(v40 - 8) + *(_QWORD *)(v41 - 8) + 8;
    a1[9] = v41 - 8;
    a1[12] = v40 - 8;
    if (a3 >= 4)
    {
LABEL_35:
      v45 = a1[6];
      v44 = a1[7];
      v46 = v44 - v45;
      if (v44 < v45)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_53;
      v47 = a1[3];
      v48 = *(_DWORD *)(v47 + v45);
      a1[6] = v45 + 4;
      *(_DWORD *)(a2 + 348) = v48;
      v49 = v44 - (v45 + 4);
      if (v44 < v45 + 4)
        v49 = 0;
      if (v49 <= 7)
      {
LABEL_53:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_207CA4068(exception, "Not enough data to read");
      }
      else
      {
        v50 = *(_QWORD *)(v47 + v45 + 4);
        v51 = v45 + 12;
        a1[6] = v51;
        v52 = *(char **)(a2 + 352);
        v53 = *(char **)(a2 + 360);
        v54 = (v53 - v52) >> 2;
        if (v50 <= v54)
        {
          if (v50 < v54)
          {
            v53 = &v52[4 * v50];
            *(_QWORD *)(a2 + 360) = v53;
          }
        }
        else
        {
          sub_207E29E08(a2 + 352, v50 - v54);
          v52 = *(char **)(a2 + 352);
          v53 = *(char **)(a2 + 360);
          v51 = a1[6];
          v44 = a1[7];
        }
        v55 = v53 - v52;
        v8 = v44 >= v51;
        v56 = v44 - v51;
        if (!v8)
          v56 = 0;
        if (v56 >= v55)
        {
          memcpy(v52, (const void *)(a1[3] + v51), v53 - v52);
          a1[6] += v55;
          return;
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_207CA4068(exception, "Not enough data to read span");
      }
LABEL_57:
      __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
    }
  }
}

void sub_207E30920(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30934(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E3095C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30970(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30984(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30998(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E309AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E309C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E309D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E309E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E309FC(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_207E28AF0(a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 12 * (v12 / 12);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0xB)
        break;
      v17 = a1[3] + v13;
      v18 = *(_QWORD *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(_QWORD *)v9 = v18;
      v9 += 12;
      v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
}

void sub_207E30B38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30B4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_207E30B60(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *result;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(a1[3] + v3);
  v8 = v3 + 8;
  a1[6] = v8;
  v9 = (char *)*a2;
  v10 = (char *)a2[1];
  v11 = &v10[-*a2];
  if (v7 <= (unint64_t)v11)
  {
    if (v7 < (unint64_t)v11)
    {
      v10 = &v9[v7];
      a2[1] = &v9[v7];
    }
  }
  else
  {
    sub_207E28EB8((uint64_t)a2, v7 - (_QWORD)v11);
    v9 = (char *)*a2;
    v10 = (char *)a2[1];
    v8 = a1[6];
    v2 = a1[7];
  }
  v12 = v10 - v9;
  v13 = v2 >= v8;
  v14 = v2 - v8;
  if (!v13)
    v14 = 0;
  if (v14 < v12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
LABEL_14:
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  result = memcpy(v9, (const void *)(a1[3] + v8), v10 - v9);
  a1[6] += v12;
  return result;
}

void sub_207E30C50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30C64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30C78(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_207E2920C(a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 12 * (v12 / 12);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 0xB)
        break;
      v17 = a1[3] + v13;
      v18 = *(_QWORD *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(_QWORD *)v9 = v18;
      v9 += 12;
      v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
}

void sub_207E30DB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30DC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30DDC(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_207E29568((uint64_t)a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 8 * (v12 >> 3);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 7)
        break;
      *(_QWORD *)v9 = *(_QWORD *)(a1[3] + v13);
      v9 += 8;
      v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
}

void sub_207E30EE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30EF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E30F0C(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  a1[6] = v2 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_207E298A0((uint64_t)a2, v8 - v11);
    v9 = *a2;
    v10 = a2[1];
  }
  v12 = v10 - v9;
  if (v12)
  {
    v13 = a1[6];
    v14 = 8 * (v12 >> 3);
    while (1)
    {
      v15 = a1[7];
      v4 = v15 >= v13;
      v16 = v15 - v13;
      if (!v4)
        v16 = 0;
      if (v16 <= 7)
        break;
      *(_QWORD *)v9 = *(_QWORD *)(a1[3] + v13);
      v9 += 8;
      v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14)
        return;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
}

void sub_207E31014(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E31028(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E3103C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xB)
    goto LABEL_8;
  v6 = (uint64_t *)(result[3] + v2);
  v7 = *v6;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)v6 + 2);
  *(_QWORD *)a2 = v7;
  v8 = result[7];
  v9 = result[6] + 12;
  result[6] = v9;
  v4 = v8 >= v9;
  v10 = v8 - v9;
  if (!v4)
    v10 = 0;
  if (v10 <= 0xB)
  {
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v11 = result[3] + v9;
  v12 = *(_QWORD *)v11;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
  *(_QWORD *)(a2 + 12) = v12;
  result[6] += 12;
  return result;
}

void sub_207E3110C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E31120(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E31134(int *a1, _BYTE *a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      v9 = 0;
      goto LABEL_9;
    }
    v12 = 3;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 5)
    {
      v11 = v12;
      sub_207E31238();
      sub_208212838((std::string *)&xmmword_253E51258, v11, 4u);
    }
    v7 = *a1;
  }
  v9 = 0;
  if (a4 >= 3 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
  }
LABEL_9:
  if (a4 >= 4)
    v10 = 4;
  else
    v10 = a4;
  if (v10 < 3)
  {
    sub_207E317C8(a2, a3, v10);
    if (!v9)
      return;
  }
  else
  {
    sub_207E32164((uint64_t)a2, (uint64_t)a3, v10);
    if (!v9)
      return;
  }
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_207E31238()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51160);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E51160))
  {
    sub_207E312F0();
    if (byte_253E51287 < 0)
    {
      sub_207CA40D8(&xmmword_253E51258, (void *)qword_253E51270, unk_253E51278);
    }
    else
    {
      xmmword_253E51258 = *(_OWORD *)&qword_253E51270;
      qword_253E51268 = unk_253E51280;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51258, &dword_207C77000);
    __cxa_guard_release(&qword_253E51160);
  }
}

void sub_207E312D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51160);
  _Unwind_Resume(a1);
}

void sub_207E312F0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51168);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E51168))
  {
    sub_207E314F4(__p);
    sub_207E313CC((char *)__p, (std::string *)&qword_253E51270);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51270, &dword_207C77000);
    __cxa_guard_release(&qword_253E51168);
  }
}

void sub_207E3138C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_253E51168);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_253E51168);
  _Unwind_Resume(a1);
}

void sub_207E313CC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207E316D0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_207E314C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E314F4(_QWORD *__dst)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_253E51170);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E51170))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshDataSample<>]", qword_253E51288);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_253E51288, &dword_207C77000);
    __cxa_guard_release(&qword_253E51170);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_253E51178);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_253E51178))
  {
    v5 = sub_207D49434(qword_253E51288, "<", 0);
    sub_207D49330(qword_253E51288, 0, v5, qword_253E512A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_253E512A0, &dword_207C77000);
    __cxa_guard_release(&qword_253E51178);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_253E51180);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51180))
  {
    sub_208215C6C((uint64_t)qword_253E512A0, (uint64_t)&xmmword_253E512B8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E512B8, &dword_207C77000);
    __cxa_guard_release(&qword_253E51180);
  }
  if (byte_253E512CF < 0)
  {
    sub_207CA40D8(__dst, (void *)xmmword_253E512B8, *((unint64_t *)&xmmword_253E512B8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_253E512B8;
    __dst[2] = unk_253E512C8;
  }
}

void sub_207E31688(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51180);
  _Unwind_Resume(a1);
}

void sub_207E316A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51178);
  _Unwind_Resume(a1);
}

void sub_207E316B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51170);
  _Unwind_Resume(a1);
}

std::string *sub_207E316D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25452C5D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25452C5D0))
    return &stru_25452C5B8;
  sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 4U]", __p);
  sub_208215E98((uint64_t)__p, &stru_25452C5B8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25452C5B8, &dword_207C77000);
  __cxa_guard_release(&qword_25452C5D0);
  return &stru_25452C5B8;
}

void sub_207E31788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25452C5D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25452C5D0);
  _Unwind_Resume(a1);
}

uint64_t *sub_207E317C8(_BYTE *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v48[48];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _DWORD v68[33];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;

  v49 = 0;
  v50 = 0;
  v52 = 0;
  v51 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v60 = 0;
  v59 = 0;
  v61 = 0;
  v63 = 0;
  v62 = 0;
  v64 = 0;
  v66 = 0;
  v65 = 0;
  v67 = 0;
  v68[32] = 0;
  LOBYTE(v69) = 0;
  v72 = 0;
  memset(v68, 0, 28);
  memset(&v68[8], 0, 28);
  memset(&v68[16], 0, 28);
  memset(&v68[24], 0, 28);
  v48[0] = 0;
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v7 = v49;
  v6 = v50;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 2);
  if (v48[0] <= (_DWORD *)v8)
  {
    if (v48[0] < (_DWORD *)v8)
    {
      v6 = v49 + 12 * (uint64_t)v48[0];
      v50 = v6;
    }
  }
  else
  {
    sub_207E28AF0(&v49, (unint64_t)v48[0] - v8);
    v7 = v49;
    v6 = v50;
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
      v10 = v7 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      v10 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      v7 = v10 + 4;
    }
    while (v7 != v9);
  }
  v48[0] = (_DWORD *)&v52 + 1;
  sub_207E32A24(a1, v48);
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v12 = v53;
  v11 = v54;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 2);
  if (v48[0] <= (_DWORD *)v13)
  {
    if (v48[0] < (_DWORD *)v13)
    {
      v11 = v53 + 12 * (uint64_t)v48[0];
      v54 = v11;
    }
  }
  else
  {
    sub_207E28AF0(&v53, (unint64_t)v48[0] - v13);
    v12 = v53;
    v11 = v54;
  }
  if (v11 != v12)
  {
    v14 = v11;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12);
      v15 = v12 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      v15 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      v12 = v15 + 4;
    }
    while (v12 != v14);
  }
  v48[0] = (_DWORD *)&v56 + 1;
  sub_207E32A24(a1, v48);
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v17 = v57;
  v16 = v58;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 2);
  if (v48[0] <= (_DWORD *)v18)
  {
    if (v48[0] < (_DWORD *)v18)
    {
      v16 = v57 + 12 * (uint64_t)v48[0];
      v58 = v16;
    }
  }
  else
  {
    sub_207E28AF0(&v57, (unint64_t)v48[0] - v18);
    v17 = v57;
    v16 = v58;
  }
  if (v16 != v17)
  {
    v19 = v16;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v17);
      v20 = v17 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
      v20 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v20);
      v17 = v20 + 4;
    }
    while (v17 != v19);
  }
  v48[0] = (_DWORD *)&v60 + 1;
  sub_207E32A24(a1, v48);
  v48[0] = (_DWORD *)(v62 - v61);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v21 = v62;
  v22 = v61;
  if (v48[0] <= (_DWORD *)(v62 - v61))
  {
    if (v48[0] < (_DWORD *)(v62 - v61))
    {
      v21 = &v61[(unint64_t)v48[0]];
      v62 = &v61[(unint64_t)v48[0]];
    }
  }
  else
  {
    sub_207E28EB8((uint64_t)&v61, (size_t)v48[0] - (v62 - v61));
    v22 = v61;
    v21 = v62;
  }
  if (v21 != v22)
  {
    v23 = (char *)(v21 - v22);
    do
    {
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, v22++);
      --v23;
    }
    while (v23);
  }
  v48[0] = (_DWORD *)&v64 + 1;
  sub_207E32A24(a1, v48);
  v48[0] = (_DWORD *)(v66 - v65);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v24 = v66;
  v25 = v65;
  if (v48[0] <= (_DWORD *)(v66 - v65))
  {
    if (v48[0] < (_DWORD *)(v66 - v65))
    {
      v24 = &v65[(unint64_t)v48[0]];
      v66 = &v65[(unint64_t)v48[0]];
    }
  }
  else
  {
    sub_207E28EB8((uint64_t)&v65, (size_t)v48[0] - (v66 - v65));
    v25 = v65;
    v24 = v66;
  }
  if (v24 != v25)
  {
    v26 = (char *)(v24 - v25);
    do
    {
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, v25++);
      --v26;
    }
    while (v26);
  }
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[3] - *(_QWORD *)&v68[1]) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v27 = *(_QWORD *)&v68[3];
  v28 = *(_QWORD *)&v68[1];
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[3] - *(_QWORD *)&v68[1]) >> 2);
  if (v48[0] <= (_DWORD *)v29)
  {
    if (v48[0] < (_DWORD *)v29)
    {
      v27 = *(_QWORD *)&v68[1] + 12 * (uint64_t)v48[0];
      *(_QWORD *)&v68[3] = v27;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)&v68[1], (unint64_t)v48[0] - v29);
    v28 = *(_QWORD *)&v68[1];
    v27 = *(_QWORD *)&v68[3];
  }
  if (v27 != v28)
  {
    v30 = v27;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v28);
      v31 = v28 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v31);
      v31 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v31);
      v28 = v31 + 4;
    }
    while (v28 != v30);
  }
  v48[0] = (_DWORD *)((uint64_t)(*(_QWORD *)&v68[11] - *(_QWORD *)&v68[9]) >> 3);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v32 = *(_QWORD *)&v68[11];
  v33 = *(_QWORD *)&v68[9];
  v34 = (uint64_t)(*(_QWORD *)&v68[11] - *(_QWORD *)&v68[9]) >> 3;
  if (v48[0] <= (_DWORD *)v34)
  {
    if (v48[0] < (_DWORD *)v34)
    {
      v32 = *(_QWORD *)&v68[9] + 8 * (uint64_t)v48[0];
      *(_QWORD *)&v68[11] = v32;
    }
  }
  else
  {
    sub_207E29568((uint64_t)&v68[9], (unint64_t)v48[0] - v34);
    v33 = *(_QWORD *)&v68[9];
    v32 = *(_QWORD *)&v68[11];
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v33);
      v36 = v33 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v36);
      v33 = v36 + 4;
    }
    while (v33 != v35);
  }
  v48[0] = (_DWORD *)((uint64_t)(*(_QWORD *)&v68[19] - *(_QWORD *)&v68[17]) >> 3);
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v37 = *(_QWORD *)&v68[19];
  v38 = *(_QWORD *)&v68[17];
  v39 = (uint64_t)(*(_QWORD *)&v68[19] - *(_QWORD *)&v68[17]) >> 3;
  if (v48[0] <= (_DWORD *)v39)
  {
    if (v48[0] < (_DWORD *)v39)
    {
      v37 = *(_QWORD *)&v68[17] + 8 * (uint64_t)v48[0];
      *(_QWORD *)&v68[19] = v37;
    }
  }
  else
  {
    sub_207E298A0((uint64_t)&v68[17], (unint64_t)v48[0] - v39);
    v38 = *(_QWORD *)&v68[17];
    v37 = *(_QWORD *)&v68[19];
  }
  if (v37 != v38)
  {
    v40 = v37;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v38);
      v41 = v38 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v41);
      v38 = v41 + 4;
    }
    while (v38 != v40);
  }
  v48[0] = (_DWORD *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[27] - *(_QWORD *)&v68[25]) >> 2));
  (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 120))(a1, v48);
  v42 = *(_QWORD *)&v68[27];
  v43 = *(_QWORD *)&v68[25];
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v68[27] - *(_QWORD *)&v68[25]) >> 2);
  if (v48[0] <= (_DWORD *)v44)
  {
    if (v48[0] < (_DWORD *)v44)
    {
      v42 = *(_QWORD *)&v68[25] + 12 * (uint64_t)v48[0];
      *(_QWORD *)&v68[27] = v42;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)&v68[25], (unint64_t)v48[0] - v44);
    v43 = *(_QWORD *)&v68[25];
    v42 = *(_QWORD *)&v68[27];
  }
  if (v42 != v43)
  {
    v45 = v42;
    do
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v43);
      v46 = v43 + 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v46);
      v46 += 4;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v46);
      v43 = v46 + 4;
    }
    while (v43 != v45);
  }
  if (a3 >= 2)
  {
    v73 = 0;
    (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 80))(a1, &v73);
    if (v73)
    {
      if (!v72)
      {
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 1;
      }
      LODWORD(v48[0]) = 1;
      (*(void (**)(_BYTE *, _DWORD **))(*(_QWORD *)a1 + 104))(a1, v48);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v69);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v69 + 4);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v70);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v70 + 4);
      (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v71);
      (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v71 + 4);
    }
    else if (v72)
    {
      v72 = 0;
    }
  }
  sub_207E2A010((uint64_t)v48, (uint64_t)&v49);
  sub_207E2A154(a2, (uint64_t)v48);
  sub_207E080B8((uint64_t *)v48);
  return sub_207E2A8E8(&v49);
}

void sub_207E32088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E3209C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E320B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E320C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E320D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E320EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E32100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E32114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E32128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E3213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E32150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_207E2A8E8(&a58);
  _Unwind_Resume(a1);
}

void sub_207E32164(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;

  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v7 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 2);
  if (v47 <= v8)
  {
    if (v47 < v8)
    {
      v6 = v7 + 12 * v47;
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)a2, v47 - v8);
    v7 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v7 + 8);
      v7 += 12;
    }
    while (v7 != v9);
  }
  v47 = a2 + 32;
  sub_207E32A24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 2);
  if (v47 <= v12)
  {
    if (v47 < v12)
    {
      v10 = v11 + 12 * v47;
      *(_QWORD *)(a2 + 48) = v10;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)(a2 + 40), v47 - v12);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
  }
  if (v10 != v11)
  {
    v13 = v10;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v11 + 8);
      v11 += 12;
    }
    while (v11 != v13);
  }
  v47 = a2 + 72;
  sub_207E32A24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v15 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 2);
  if (v47 <= v16)
  {
    if (v47 < v16)
    {
      v14 = v15 + 12 * v47;
      *(_QWORD *)(a2 + 88) = v14;
    }
  }
  else
  {
    sub_207E28AF0((uint64_t *)(a2 + 80), v47 - v16);
    v15 = *(_QWORD *)(a2 + 80);
    v14 = *(_QWORD *)(a2 + 88);
  }
  if (v14 != v15)
  {
    v17 = v14;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v15 + 8);
      v15 += 12;
    }
    while (v15 != v17);
  }
  v47 = a2 + 112;
  sub_207E32A24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v19 = *(char **)(a2 + 120);
  v18 = *(char **)(a2 + 128);
  if (v47 <= v18 - v19)
  {
    if (v47 < v18 - v19)
    {
      v18 = &v19[v47];
      *(_QWORD *)(a2 + 128) = &v19[v47];
    }
  }
  else
  {
    sub_207E28EB8(a2 + 120, v47 - (v18 - v19));
    v19 = *(char **)(a2 + 120);
    v18 = *(char **)(a2 + 128);
  }
  if (v18 != v19)
  {
    v20 = (char *)(v18 - v19);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, v19++);
      --v20;
    }
    while (v20);
  }
  v47 = a2 + 152;
  sub_207E32A24((_BYTE *)a1, (_DWORD **)&v47);
  v47 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v22 = *(char **)(a2 + 160);
  v21 = *(char **)(a2 + 168);
  if (v47 <= v21 - v22)
  {
    if (v47 < v21 - v22)
    {
      v21 = &v22[v47];
      *(_QWORD *)(a2 + 168) = &v22[v47];
    }
  }
  else
  {
    sub_207E28EB8(a2 + 160, v47 - (v21 - v22));
    v22 = *(char **)(a2 + 160);
    v21 = *(char **)(a2 + 168);
  }
  if (v21 != v22)
  {
    v23 = (char *)(v21 - v22);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, v22++);
      --v23;
    }
    while (v23);
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v25 = *(_QWORD *)(a2 + 192);
  v24 = *(_QWORD *)(a2 + 200);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v25) >> 2);
  if (v47 <= v26)
  {
    if (v47 < v26)
    {
      v24 = v25 + 12 * v47;
      *(_QWORD *)(a2 + 200) = v24;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)(a2 + 192), v47 - v26);
    v25 = *(_QWORD *)(a2 + 192);
    v24 = *(_QWORD *)(a2 + 200);
  }
  if (v24 != v25)
  {
    v27 = v24;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v25 + 8);
      v25 += 12;
    }
    while (v25 != v27);
  }
  v47 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v29 = *(_QWORD *)(a2 + 224);
  v28 = *(_QWORD *)(a2 + 232);
  v30 = (v28 - v29) >> 3;
  if (v47 <= v30)
  {
    if (v47 < v30)
    {
      v28 = v29 + 8 * v47;
      *(_QWORD *)(a2 + 232) = v28;
    }
  }
  else
  {
    sub_207E29568(a2 + 224, v47 - v30);
    v29 = *(_QWORD *)(a2 + 224);
    v28 = *(_QWORD *)(a2 + 232);
  }
  if (v28 != v29)
  {
    v31 = v28;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v29);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v29 + 4);
      v29 += 8;
    }
    while (v29 != v31);
  }
  v47 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v33 = *(_QWORD *)(a2 + 256);
  v32 = *(_QWORD *)(a2 + 264);
  v34 = (v32 - v33) >> 3;
  if (v47 <= v34)
  {
    if (v47 < v34)
    {
      v32 = v33 + 8 * v47;
      *(_QWORD *)(a2 + 264) = v32;
    }
  }
  else
  {
    sub_207E298A0(a2 + 256, v47 - v34);
    v33 = *(_QWORD *)(a2 + 256);
    v32 = *(_QWORD *)(a2 + 264);
  }
  if (v32 != v33)
  {
    v35 = v32;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v33);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v33 + 4);
      v33 += 8;
    }
    while (v33 != v35);
  }
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
  v37 = *(_QWORD *)(a2 + 288);
  v36 = *(_QWORD *)(a2 + 296);
  v38 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 2);
  if (v47 <= v38)
  {
    if (v47 < v38)
    {
      v36 = v37 + 12 * v47;
      *(_QWORD *)(a2 + 296) = v36;
    }
  }
  else
  {
    sub_207E2920C((uint64_t *)(a2 + 288), v47 - v38);
    v37 = *(_QWORD *)(a2 + 288);
    v36 = *(_QWORD *)(a2 + 296);
  }
  if (v36 != v37)
  {
    v39 = v36;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, v37 + 8);
      v37 += 12;
    }
    while (v37 != v39);
  }
  v46 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 80))(a1, &v46);
  if (v46)
  {
    if (!*(_BYTE *)(a2 + 344))
    {
      *(_QWORD *)(a2 + 320) = 0;
      *(_QWORD *)(a2 + 328) = 0;
      *(_QWORD *)(a2 + 336) = 0;
      *(_BYTE *)(a2 + 344) = 1;
    }
    v40 = *(_DWORD *)(a1 + 8);
    LODWORD(v47) = 2;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v47);
    if (v40 >= 1)
    {
      if (v40 == 2)
      {
        if (v47 >= 2)
        {
          LODWORD(v47) = 2;
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 104))(a1, &v47);
          v41 = v47;
          if (v47 >= 3)
          {
            sub_207E29A98();
            sub_208212838((std::string *)&xmmword_253E511E0, v41, 2u);
          }
          goto LABEL_75;
        }
      }
      else if (v47 > 1)
      {
LABEL_75:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 320);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 324);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 328);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 332);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 336);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 340);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        goto LABEL_77;
      }
    }
    sub_207E32BA8(a1, a2 + 320, v47);
  }
  else if (*(_BYTE *)(a2 + 344))
  {
    *(_BYTE *)(a2 + 344) = 0;
  }
LABEL_77:
  if (a3 >= 4)
  {
    v47 = a2 + 348;
    sub_207E32A24((_BYTE *)a1, (_DWORD **)&v47);
    v47 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v47);
    v43 = *(_QWORD *)(a2 + 352);
    v42 = *(_QWORD *)(a2 + 360);
    v44 = (v42 - v43) >> 2;
    if (v47 <= v44)
    {
      if (v47 < v44)
      {
        v42 = v43 + 4 * v47;
        *(_QWORD *)(a2 + 360) = v42;
      }
    }
    else
    {
      sub_207E29E08(a2 + 352, v47 - v44);
      v43 = *(_QWORD *)(a2 + 352);
      v42 = *(_QWORD *)(a2 + 360);
    }
    if (v42 != v43)
    {
      v45 = 4 * ((v42 - v43) >> 2);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v43);
        v43 += 4;
        v45 -= 4;
      }
      while (v45);
    }
  }
}

void sub_207E32A24(_BYTE *a1, _DWORD **a2)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  int v14;
  char *v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = (char *)operator new(0x118uLL);
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_208215780((uint64_t)v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20806E57C((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v6[*(_QWORD *)(v10 - 24)] = *(_QWORD *)(v9 + 64);
    *((_QWORD *)v6 + 3) = MEMORY[0x24BEDB848] + 16;
    *((_QWORD *)v6 + 2) = v11;
    if (v6[111] < 0)
      operator delete(*((void **)v6 + 11));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v6 + 128);
    operator delete(v6);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 104))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_207E32B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17)
{
  sub_2082155DC(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n64 sub_207E32BA8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __n64 result;
  __int128 v6;
  int32x2_t v7;
  _OWORD v8[2];

  if (a3 < 2)
  {
    memset(v8, 0, 24);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)v8 + 4);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)v8 + 8);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 128))(a1, (unint64_t)v8 | 0xC);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 128))(a1, &v8[1]);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 128))(a1, (char *)&v8[1] + 4);
    v6 = v8[0];
    v7 = *(int32x2_t *)((char *)v8 + 12);
    HIDWORD(v6) = HIDWORD(v8[0]);
    *(_OWORD *)a2 = v6;
    result.n64_u32[0] = vdup_lane_s32(v7, 1).u32[0];
    result.n64_u32[1] = DWORD1(v8[1]);
    *(__n64 *)(a2 + 16) = result;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
  }
  return result;
}

_QWORD *sub_207E32D24(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7 = operator new(0xF0uLL);
  *v7 = off_24C076820;
  v7[1] = v5;
  v7[2] = v6;
  sub_207D47D34((uint64_t)(v7 + 4), a3);
  *v7 = off_24C0767D0;
  *a1 = &off_24C078D18;
  a1[1] = v7;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a1[2] = result;
  return result;
}

void sub_207E32DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_207E32E9C(v9);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E32DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;

  sub_207C99D78(v10);
  operator delete(v9);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E32E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E32E24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076820;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E32E9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076820;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E32F14(float ***a1, float ***lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C078D58, (const struct __class_type_info *)&unk_24C0789F0, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_207F0BD18(a1 + 1, (float ***)(result + 8));
  }
  return result;
}

void sub_207E32F78(uint64_t a1)
{
  unsigned __int8 v2;
  int64x2_t v3;
  int8x16_t v4;
  void *v5[3];
  void *v6[2];
  char v7;
  void *__p[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253E511C8);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_253E511C8))
    goto LABEL_2;
  sub_207C96EE8(v6, "viz::PackageData");
  sub_207E34258();
  if (byte_253E51317 < 0)
  {
    sub_207CA40D8(__p, (void *)xmmword_253E51300, *((unint64_t *)&xmmword_253E51300 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_253E51300;
    v9 = unk_253E51310;
  }
  *(_OWORD *)v10 = *(_OWORD *)"viz::Package";
  v11 = 0xC00000000000000;
  sub_207E34410();
  if (byte_253E513BF < 0)
  {
    sub_207CA40D8(&v12, (void *)xmmword_253E513A8, *((unint64_t *)&xmmword_253E513A8 + 1));
  }
  else
  {
    v12 = xmmword_253E513A8;
    v13 = unk_253E513B8;
  }
  *(_OWORD *)v14 = *(_OWORD *)"void";
  v15 = 0x400000000000000;
  sub_207CAA110(v5, (uint64_t)__p, 4uLL);
  sub_208215D20((char *)v6, (uint64_t *)v5, &stru_253E51390, v3, v4);
  sub_207C99DE0(v5);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(v14[0]);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)v12);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_21:
    operator delete(__p[0]);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_22:
    operator delete(v6[0]);
    goto LABEL_17;
  }
LABEL_20:
  operator delete(v10[0]);
  if (SHIBYTE(v9) < 0)
    goto LABEL_21;
LABEL_16:
  if (v7 < 0)
    goto LABEL_22;
LABEL_17:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_253E51390, &dword_207C77000);
  __cxa_guard_release(&qword_253E511C8);
LABEL_2:
  sub_207E332D8(a1);
  sub_207D49528((__int128 *)&stru_253E51390, (uint64_t)"{", (uint64_t)__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_207E331CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  sub_207C99DE0((void **)&a9);
  if (a41 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a29 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a23 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a24);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a17 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_253E511C8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a12);
  __cxa_guard_abort(&qword_253E511C8);
  _Unwind_Resume(a1);
}

void sub_207E332B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E332D8(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  void ***v10;
  const char *v11;
  __int128 *v12;
  const char *v13;
  const char *v14;
  void **v15;

  v2 = atomic_load((unsigned __int8 *)&qword_253E511D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_253E511D8))
  {
    sub_207E34258();
    if (byte_253E51317 >= 0)
      v4 = byte_253E51317;
    else
      v4 = *((_QWORD *)&xmmword_253E51300 + 1);
    if (byte_253E51317 >= 0)
      v5 = (char *)&xmmword_253E51300;
    else
      v5 = (char *)xmmword_253E51300;
    sub_207CF75E4(v5, v4, "::", 2, 0, (uint64_t)&v10);
    if (*(v11 - 1) < 0)
    {
      sub_207CA40D8(&xmmword_253E513C0, *((void **)v11 - 3), *((_QWORD *)v11 - 2));
    }
    else
    {
      v6 = *(_OWORD *)(v11 - 24);
      unk_253E513D0 = *((_QWORD *)v11 - 1);
      xmmword_253E513C0 = v6;
    }
    sub_207C99DE0((void **)&v10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E513C0, &dword_207C77000);
    __cxa_guard_release(&qword_253E511D8);
  }
  v9 = -1;
  if (byte_253E513D7 < 0)
  {
    sub_207CA40D8(&v7, (void *)xmmword_253E513C0, *((unint64_t *)&xmmword_253E513C0 + 1));
  }
  else
  {
    v7 = xmmword_253E513C0;
    v8 = unk_253E513D0;
  }
  v9 = 1;
  v10 = (void ***)&v7;
  v11 = "{";
  v12 = &v7;
  v13 = "{";
  v14 = "{";
  sub_207CD45F4((uint64_t *)&v12, (uint64_t)&v7);
  sub_207E33FEC((uint64_t)&v7, (uint64_t *)(a1 + 8));
  v10 = (void ***)&v7;
  v11 = "}";
  v12 = &v7;
  v13 = "}";
  v14 = "}";
  if (v9 == -1)
    sub_207CA9F48();
  v15 = (void **)&v10;
  ((void (*)(void ***, __int128 *))off_24C0766E8[v9])(&v15, &v7);
  if (v9 == -1)
    sub_207CA9F48();
  v10 = &v15;
  result = ((uint64_t (*)(void ****, __int128 *))off_24C0765F8[v9])(&v10, &v7);
  if (v9 != -1)
    return ((uint64_t (*)(void ****, __int128 *))off_24C0765E0[v9])(&v10, &v7);
  return result;
}

void sub_207E334F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207C99DE0((void **)va);
  __cxa_guard_abort(&qword_253E511D8);
  _Unwind_Resume(a1);
}

void sub_207E33514(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E511D8);
  _Unwind_Resume(a1);
}

void sub_207E3352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E33544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E33558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E3356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E33580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CA9EF0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207E33594(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 7;
}

void sub_207E335C0(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_207F0677C(lpsrc, 7, a2);
}

_QWORD *sub_207E335F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076820;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207E33670(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_24C076820;
  sub_207D49CF4((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

uint64_t sub_207E336E8(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  __int128 *v8;
  __int128 v9;
  int64x2_t v10;
  int8x16_t v11;
  void **v12;
  void **v13;
  void *v14;
  size_t v15;
  uint64_t *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t *v19;
  _BYTE *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  int v27;
  void *__dst[2];
  uint64_t v29;
  char v30;
  std::string __s;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_253E51188);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_253E51188))
    goto LABEL_2;
  v4 = atomic_load((unsigned __int8 *)&qword_253E51190);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253E51190))
  {
    v5 = atomic_load((unsigned __int8 *)&qword_253E511B0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_253E511B0))
    {
      sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TriMesh>]", &qword_253E51348);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E51348, &dword_207C77000);
      __cxa_guard_release(&qword_253E511B0);
    }
    v6 = atomic_load((unsigned __int8 *)&qword_253E511B8);
    if ((v6 & 1) != 0 || !__cxa_guard_acquire(&qword_253E511B8))
    {
LABEL_23:
      v7 = atomic_load((unsigned __int8 *)&qword_253E511C0);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_253E511C0))
      {
        if (byte_253E51360[23] < 0)
          sub_207CA40D8(&__s, *(void **)byte_253E51360, *(unint64_t *)&byte_253E51360[8]);
        else
          __s = *(std::string *)byte_253E51360;
        sub_2082144D8(&__s, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_253E51378);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51378, &dword_207C77000);
        __cxa_guard_release(&qword_253E511C0);
      }
      if (byte_253E5138F < 0)
      {
        sub_207CA40D8(__dst, (void *)xmmword_253E51378, *((unint64_t *)&xmmword_253E51378 + 1));
      }
      else
      {
        *(_OWORD *)__dst = xmmword_253E51378;
        v29 = unk_253E51388;
      }
      sub_207E34258();
      if (byte_253E51300[23] < 0)
        sub_207CA40D8(&__s, *(void **)byte_253E51300, *(unint64_t *)&byte_253E51300[8]);
      else
        __s = *(std::string *)byte_253E51300;
      v8 = sub_207D49134();
      if (*((char *)v8 + 23) < 0)
      {
        sub_207CA40D8(&v32, *(void **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v33 = *((_QWORD *)v8 + 2);
        v32 = v9;
      }
      sub_207CAA110(__p, (uint64_t)&__s, 2uLL);
      sub_208215D20((char *)__dst, (uint64_t *)__p, (std::string *)&qword_253E512E8, v10, v11);
      v12 = (void **)__p[0];
      if (__p[0])
      {
        v13 = (void **)__p[1];
        v14 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v13 - 1) < 0)
              operator delete(*(v13 - 3));
            v13 -= 3;
          }
          while (v13 != v12);
          v14 = __p[0];
        }
        __p[1] = v12;
        operator delete(v14);
      }
      if (SHIBYTE(v33) < 0)
      {
        operator delete((void *)v32);
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_43:
          if ((SHIBYTE(v29) & 0x80000000) == 0)
          {
LABEL_44:
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_253E512E8, &dword_207C77000);
            __cxa_guard_release(&qword_253E51190);
            goto LABEL_13;
          }
LABEL_47:
          operator delete(__dst[0]);
          goto LABEL_44;
        }
      }
      else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_43;
      }
      operator delete(__s.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_47;
    }
    if (byte_253E5135F >= 0)
      v15 = byte_253E5135F;
    else
      v15 = unk_253E51350;
    if (byte_253E5135F >= 0)
      v16 = &qword_253E51348;
    else
      v16 = (uint64_t *)qword_253E51348;
    v17 = (char *)v16 + v15;
    if ((uint64_t)v15 >= 1)
    {
      v18 = v15;
      v19 = v16;
      do
      {
        v20 = memchr(v19, 60, v18);
        if (!v20)
          break;
        if (*v20 == 60)
          goto LABEL_63;
        v19 = (uint64_t *)(v20 + 1);
        v18 = v17 - (_BYTE *)v19;
      }
      while (v17 - (_BYTE *)v19 > 0);
    }
    v20 = (char *)v16 + v15;
LABEL_63:
    v21 = v20 - (_BYTE *)v16;
    if (v20 == v17)
      v21 = -1;
    if (v15 >= v21)
      v15 = v21;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v15 >= 0x17)
    {
      v23 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v23 = v15 | 7;
      v24 = v23 + 1;
      v22 = (char *)operator new(v23 + 1);
      *(_QWORD *)&byte_253E51360[8] = v15;
      *(_QWORD *)&byte_253E51360[16] = v24 | 0x8000000000000000;
      *(_QWORD *)byte_253E51360 = v22;
    }
    else
    {
      v22 = byte_253E51360;
      byte_253E51360[23] = v15;
      if (!v15)
        goto LABEL_83;
    }
    memmove(v22, v16, v15);
LABEL_83:
    v22[v15] = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_253E51360, &dword_207C77000);
    __cxa_guard_release(&qword_253E511B8);
    goto LABEL_23;
  }
LABEL_13:
  if (byte_253E512FF < 0)
  {
    sub_207CA40D8(&xmmword_253E512D0, (void *)qword_253E512E8, unk_253E512F0);
  }
  else
  {
    xmmword_253E512D0 = *(_OWORD *)&qword_253E512E8;
    unk_253E512E0 = unk_253E512F8;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E512D0, &dword_207C77000);
  __cxa_guard_release(&qword_253E51188);
LABEL_2:
  v27 = -1;
  if (byte_253E512E7 < 0)
  {
    sub_207CA40D8(__p, (void *)xmmword_253E512D0, *((unint64_t *)&xmmword_253E512D0 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_253E512D0;
    v26 = unk_253E512E0;
  }
  v27 = 1;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)"{";
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)__p;
  *(_QWORD *)&v32 = "{";
  *((_QWORD *)&v32 + 1) = "{";
  sub_207CD45F4((uint64_t *)&__s.__r_.__value_.__r.__words[2], (uint64_t)__p);
  sub_207E33FEC((uint64_t)__p, (uint64_t *)(a1 + 8));
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)",";
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)__p;
  *(_QWORD *)&v32 = ",";
  *((_QWORD *)&v32 + 1) = ",";
  if (v27 == -1)
    sub_207CA9F48();
  __dst[0] = &__s;
  ((void (*)(void **, void **))off_24C0766E8[v27])(__dst, __p);
  sub_207D48768((uint64_t)&v30, (uint64_t)__p, a1 + 32);
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  __s.__r_.__value_.__l.__size_ = (std::string::size_type)"}";
  __s.__r_.__value_.__r.__words[2] = (std::string::size_type)__p;
  *(_QWORD *)&v32 = "}";
  *((_QWORD *)&v32 + 1) = "}";
  if (v27 == -1)
    sub_207CA9F48();
  __dst[0] = &__s;
  ((void (*)(void **, void **))off_24C0766E8[v27])(__dst, __p);
  if (v27 == -1)
    sub_207CA9F48();
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  result = ((uint64_t (*)(std::string *, void **))off_24C0765F8[v27])(&__s, __p);
  if (v27 != -1)
    return ((uint64_t (*)(std::string *, void **))off_24C0765E0[v27])(&__s, __p);
  return result;
}

void sub_207E33D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_253E511C0);
  __cxa_guard_abort(&qword_253E51190);
  __cxa_guard_abort(&qword_253E51188);
  _Unwind_Resume(a1);
}

void sub_207E33E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a12 != -1)
    ((void (*)(char *, uint64_t *))off_24C0765E0[a12])(&a19, &a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E33EF4(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_207E33FEC((uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_207CA9F48();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765F8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C0765E0[v3])(v5, v2);
  return result;
}

void sub_207E33F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C0765E0[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_207E33FC0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_207E33FEC(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new(0x118uLL);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[16] = 0u;
  *((_QWORD *)v4 + 34) = 0;
  sub_207CA2878((uint64_t)v4);
  v20[0] = v4;
  sub_207F0C258((_QWORD *)v4 + 2, a2);
  v5 = *((_DWORD *)v4 + 30);
  if ((v5 & 0x10) != 0)
  {
    v8 = *((_QWORD *)v4 + 14);
    v9 = *((_QWORD *)v4 + 9);
    if (v8 < v9)
    {
      *((_QWORD *)v4 + 14) = v9;
      v8 = v9;
    }
    v10 = (const void *)*((_QWORD *)v4 + 8);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = (const void *)*((_QWORD *)v4 + 5);
    v6 = *((_QWORD *)v4 + 7) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v13 + 128);
    operator delete((void *)v13);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_207CA9F48();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_207E3421C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E34244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E34258()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253E51198);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E51198))
  {
    sub_207E34310();
    if (byte_253E51347 < 0)
    {
      sub_207CA40D8(&xmmword_253E51300, (void *)xmmword_253E51330, *((unint64_t *)&xmmword_253E51330 + 1));
    }
    else
    {
      xmmword_253E51300 = xmmword_253E51330;
      unk_253E51310 = unk_253E51340;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51300, &dword_207C77000);
    __cxa_guard_release(&qword_253E51198);
  }
}

void sub_207E342F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E51198);
  _Unwind_Resume(a1);
}

void sub_207E34310()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_253E511A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E511A0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TriMesh]", qword_253E51318);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_253E51318, &dword_207C77000);
    __cxa_guard_release(&qword_253E511A0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_253E511A8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_253E511A8))
    {
      sub_208215C6C((uint64_t)qword_253E51318, (uint64_t)&xmmword_253E51330);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E51330, &dword_207C77000);
      __cxa_guard_release(&qword_253E511A8);
    }
  }
}

void sub_207E343E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E511A8);
  _Unwind_Resume(a1);
}

void sub_207E343F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253E511A0);
  _Unwind_Resume(a1);
}

void sub_207E34410()
{
  unsigned __int8 v0;
  void *__p[2];
  char v2;

  v0 = atomic_load((unsigned __int8 *)&qword_253E511D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E511D0))
  {
    sub_2082159F8("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 7U]", __p);
    sub_208215E98((uint64_t)__p, (std::string *)&xmmword_253E513A8);
    if (v2 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_253E513A8, &dword_207C77000);
    __cxa_guard_release(&qword_253E511D0);
  }
}

void sub_207E344B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_253E511D0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_253E511D0);
  _Unwind_Resume(a1);
}

BOOL sub_207E344F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float *v4;
  uint64_t v5;
  float v6;
  _BOOL8 result;
  BOOL v8;
  _QWORD v9[14];
  _DWORD *v10;
  uint64_t v11;
  _QWORD v12[14];
  _DWORD *v13;
  uint64_t *v14;
  char v15;

  v12[0] = a1;
  v12[1] = a1 + 32;
  v12[2] = a1 + 40;
  v12[3] = a1 + 72;
  v12[4] = a1 + 80;
  v12[5] = a1 + 112;
  v12[6] = a1 + 120;
  v12[7] = a1 + 152;
  v12[8] = a1 + 160;
  v12[9] = a1 + 192;
  v12[10] = a1 + 224;
  v12[11] = a1 + 256;
  v12[12] = a1 + 288;
  v12[13] = a1 + 320;
  v13 = (_DWORD *)(a1 + 348);
  v14 = (uint64_t *)(a1 + 352);
  v9[0] = a2;
  v9[1] = a2 + 32;
  v9[2] = a2 + 40;
  v9[3] = a2 + 72;
  v9[4] = a2 + 80;
  v9[5] = a2 + 112;
  v9[6] = a2 + 120;
  v9[7] = a2 + 152;
  v9[8] = a2 + 160;
  v9[9] = a2 + 192;
  v9[10] = a2 + 224;
  v9[11] = a2 + 256;
  v9[12] = a2 + 288;
  v9[13] = a2 + 320;
  v10 = (_DWORD *)(a2 + 348);
  v11 = a2 + 352;
  if (!sub_207E34668((uint64_t)&v15, (uint64_t)v12, (uint64_t)v9))
    return 0;
  if (*v13 != *v10)
    return 0;
  v3 = *v14;
  v2 = v14[1];
  v4 = *(float **)v11;
  if (v2 - *v14 != *(_QWORD *)(v11 + 8) - *(_QWORD *)v11)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 4;
  do
  {
    v6 = *v4++;
    result = *(float *)(v5 - 4) == v6;
    v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

BOOL sub_207E34668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  float *v6;
  uint64_t v7;
  float *v8;
  float v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL8 result;
  _BOOL4 v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  char v26;

  if (!sub_207E34820((uint64_t)&v26, a2, a3))
    return 0;
  v6 = **(float ***)(a2 + 88);
  v5 = *(float **)(*(_QWORD *)(a2 + 88) + 8);
  v7 = **(_QWORD **)(a3 + 88);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(*(_QWORD *)(a3 + 88) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    v8 = (float *)(v7 + 4);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v6 == v9;
      if (*v6 == v9)
        v10 = v6[1] == *v8;
      if (!v10)
        return 0;
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v5);
  }
  v12 = **(_QWORD **)(a2 + 96);
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8);
  v13 = **(_QWORD **)(a3 + 96);
  if (v11 - v12 != *(_QWORD *)(*(_QWORD *)(a3 + 96) + 8) - v13)
    return 0;
  if (v12 != v11)
  {
    while (*(_QWORD *)v12 == *(_QWORD *)v13 && *(_DWORD *)(v12 + 8) == (unint64_t)*(unsigned int *)(v13 + 8))
    {
      v12 += 12;
      v13 += 12;
      if (v12 == v11)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a3 + 104);
  if (*(_BYTE *)(v15 + 24))
    v17 = *(_BYTE *)(v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (*(_BYTE *)(v15 + 24) != 0) == (*(_BYTE *)(v16 + 24) != 0);
  v19 = *(float *)v15 == *(float *)v16;
  if (*(float *)v15 == *(float *)v16)
  {
    v20 = *(float *)(v15 + 4);
    v21 = *(float *)(v16 + 4);
    v19 = v20 == v21;
    if (v20 == v21)
      v19 = *(float *)(v15 + 8) == *(float *)(v16 + 8);
  }
  if (!v19)
    return 0;
  v22 = *(float *)(v15 + 12);
  v23 = *(float *)(v16 + 12);
  result = v22 == v23;
  if (v22 == v23)
  {
    v24 = *(float *)(v15 + 16);
    v25 = *(float *)(v16 + 16);
    result = v24 == v25;
    if (v24 == v25)
      return *(float *)(v15 + 20) == *(float *)(v16 + 20);
  }
  return result;
}

BOOL sub_207E34820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  char v17;

  if (!sub_207E34910((uint64_t)&v17, a2, a3))
    return 0;
  v6 = **(_QWORD **)(a2 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8);
  v7 = **(_QWORD **)(a3 + 72);
  if (v5 - v6 != *(_QWORD *)(*(_QWORD *)(a3 + 72) + 8) - v7)
    return 0;
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 == *(_QWORD *)v7 && *(_DWORD *)(v6 + 8) == (unint64_t)*(unsigned int *)(v7 + 8))
    {
      v6 += 12;
      v7 += 12;
      if (v6 == v5)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  v10 = **(char ***)(a2 + 80);
  v9 = *(char **)(*(_QWORD *)(a2 + 80) + 8);
  v11 = **(uint64_t ***)(a3 + 80);
  if (v9 - v10 != *(_QWORD *)(*(_QWORD *)(a3 + 80) + 8) - (_QWORD)v11)
    return 0;
  if (v10 == v9)
    return 1;
  do
  {
    v13 = *(_QWORD *)v10;
    v10 += 8;
    v12 = v13;
    v14 = *v11++;
    result = v12 == v14;
  }
  while (v12 == v14 && v10 != v9);
  return result;
}

BOOL sub_207E34910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v12;

  if (sub_207E349DC((uint64_t)&v12, a2, (uint64_t **)a3)
    && **(_DWORD **)(a2 + 40) == **(_DWORD **)(a3 + 40)
    && (v5 = *(_QWORD *)(a2 + 48),
        v6 = *(_QWORD *)(a3 + 48),
        v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5,
        v7 == *(_QWORD *)(v6 + 8) - *(_QWORD *)v6)
    && !memcmp(*(const void **)v5, *(const void **)v6, v7)
    && **(_DWORD **)(a2 + 56) == **(_DWORD **)(a3 + 56)
    && (v8 = *(_QWORD *)(a2 + 64),
        v9 = *(_QWORD *)(a3 + 64),
        v10 = *(_QWORD *)(v8 + 8) - *(_QWORD *)v8,
        v10 == *(_QWORD *)(v9 + 8) - *(_QWORD *)v9))
  {
    return memcmp(*(const void **)v8, *(const void **)v9, v10) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_207E349DC(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  float *v3;
  float *v4;
  uint64_t v5;
  float *v6;
  float v7;
  _BOOL4 v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float v14;
  _BOOL4 v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  _BOOL8 result;
  BOOL v23;
  float v24;
  float v25;
  float v26;

  v4 = **(float ***)a2;
  v3 = *(float **)(*(_QWORD *)a2 + 8);
  v5 = **a3;
  if ((char *)v3 - (char *)v4 != (*a3)[1] - v5)
    return 0;
  if (v4 != v3)
  {
    v6 = (float *)(v5 + 4);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v4 == v7;
      if (*v4 == v7)
      {
        v9 = v4[1];
        v8 = v9 == *v6;
        if (v9 == *v6)
          v8 = v4[2] == v6[1];
      }
      if (!v8)
        return 0;
      v4 += 3;
      v6 += 3;
    }
    while (v4 != v3);
  }
  if (**(_DWORD **)(a2 + 8) != *(_DWORD *)a3[1])
    return 0;
  v11 = **(float ***)(a2 + 16);
  v10 = *(float **)(*(_QWORD *)(a2 + 16) + 8);
  v12 = *a3[2];
  if ((char *)v10 - (char *)v11 != a3[2][1] - v12)
    return 0;
  if (v11 != v10)
  {
    v13 = (float *)(v12 + 4);
    do
    {
      v14 = *(v13 - 1);
      v15 = *v11 == v14;
      if (*v11 == v14)
      {
        v16 = v11[1];
        v15 = v16 == *v13;
        if (v16 == *v13)
          v15 = v11[2] == v13[1];
      }
      if (!v15)
        return 0;
      v11 += 3;
      v13 += 3;
    }
    while (v11 != v10);
  }
  if (**(_DWORD **)(a2 + 24) != *(_DWORD *)a3[3])
    return 0;
  v18 = **(_QWORD **)(a2 + 32);
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v19 = *a3[4];
  if (v17 - v18 != a3[4][1] - v19)
    return 0;
  if (v18 == v17)
    return 1;
  v20 = v18 + 12;
  v21 = (float *)(v19 + 4);
  do
  {
    v24 = *(float *)(v20 - 12);
    v25 = *(v21 - 1);
    result = v24 == v25;
    if (v24 == v25)
    {
      v26 = *(float *)(v20 - 8);
      result = v26 == *v21;
      if (v26 == *v21)
        result = *(float *)(v20 - 4) == v21[1];
    }
    v23 = !result || v20 == v17;
    v20 += 12;
    v21 += 3;
  }
  while (!v23);
  return result;
}

void sub_207E34B90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v6 = a2 + 16;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "info";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v14 = (unint64_t)"version";
  v15 = 7;
  v16 = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F3DDC(a1, &v16);
  sub_207E0BDBC(a1, v6, v16);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v11 = a2 + 192;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "value";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
    sub_207E21B44((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  else
  {
    sub_207E21B44((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "textures";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = *(_QWORD *)(a2 + 576);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 584) - v13) >> 3);
  v15 = v13;
  sub_2081F5870(a1, &v14);
}

void sub_207E34D3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;

  v6 = a2 + 16;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v22 = (uint64_t *)(v7 + 16);
    sub_208210C8C(&v22, 6u);
  }
  else
  {
    sub_208210F00((uint64_t)&v22, v7 + 8);
  }
  sub_20820C2C0(*(_QWORD *)(a1 + 24));
  sub_207E0E660(a1, v6, 6u);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
  sub_207E237D0((uint64_t)&v22, a1, a2 + 192);
  if (a3 >= 3)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v14 + 40))
    {
      v22 = (uint64_t *)(v14 + 16);
      sub_20821166C(&v22, v13);
    }
    else
    {
      sub_208211974();
    }
    v15 = *(const void ***)(a2 + 576);
    v16 = *(const void ***)(a2 + 584);
    v17 = ((char *)v16 - (char *)v15) / 24;
    v18 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v18 + 40))
    {
      v22 = (uint64_t *)(v18 + 16);
      if (v16 != v15)
      {
        v19 = 24 * v17;
        do
        {
          sub_208211D5C((uint64_t)&v23, &v22, v15);
          v15 += 3;
          v19 -= 24;
        }
        while (v19);
      }
    }
    else if (v16 != v15)
    {
      v20 = v18 + 8;
      v21 = 24 * v17;
      do
      {
        sub_208212184((uint64_t)&v22, v20, (uint64_t)v15);
        v15 += 3;
        v21 -= 24;
      }
      while (v21);
    }
  }
}

void sub_207E34F2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v6 = a2 + 16;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "info";
    *(_QWORD *)(a1 + 80) = 4;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v14 = (unint64_t)"version";
  v15 = 7;
  v16 = 6;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F20F8(a1, &v16);
  sub_207E0F904(a1, v6, v16);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  v11 = a2 + 192;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "value";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
    sub_207E250F0((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  else
  {
    sub_207E250F0((uint64_t)&v14, a1, v11);
    if (a3 < 3)
      return;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "textures";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = *(_QWORD *)(a2 + 576);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 584) - v13) >> 3);
  v15 = v13;
  sub_2081F3B8C(a1, &v14);
}

void sub_207E350D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[48];

  v6 = a2 + 16;
  if (*(_QWORD *)(a1 + 40))
  {
    v7 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v7, (uint64_t)v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_207E11040(a1, v6, 6u);
  v8 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v9 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v9, (uint64_t)v21, 1);
  }
  v10 = *(_QWORD **)(a1 + 24);
  LOBYTE(v21[0]) = v8;
  sub_207CBAB98(v10, (uint64_t)v21, 1);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11 + 1;
  if (v11 != -1)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v12, (uint64_t)v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  sub_207E224F0((uint64_t)v21, a2 + 192);
  sub_207E25B9C(a1, v21, 4u);
  sub_207E080B8(v21);
  v13 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = *(_QWORD **)(a1 + 24);
    LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v14, (uint64_t)v21, 1);
  }
  v15 = *(_QWORD **)(a1 + 24);
  LOBYTE(v21[0]) = v13;
  sub_207CBAB98(v15, (uint64_t)v21, 1);
  v16 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v16;
  if (a3 >= 3)
  {
    if (v16)
    {
      v17 = *(_QWORD **)(a1 + 24);
      LOBYTE(v21[0]) = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v17, (uint64_t)v21, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a2 + 576);
    v19 = *(_QWORD *)(a2 + 584) - v18;
    if (v19)
    {
      v20 = 24 * (v19 / 24);
      do
      {
        sub_208208DC4(a1, v18);
        v18 += 24;
        v20 -= 24;
      }
      while (v20);
    }
  }
}

void sub_207E352E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207E080B8(&a9);
  _Unwind_Resume(a1);
}

void *sub_207E352F8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t __src;
  uint64_t v21;

  v6 = a2 + 16;
  LODWORD(__src) = 6;
  v7 = a1 + 24;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  v8 = __src;
  sub_208072A10((_QWORD *)a1);
  sub_207E11EF8(a1, v6, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  result = sub_207E26848(a1, a2 + 192);
  if (a3 >= 3)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    result = sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&v19, (char *)&__src, 8);
    v11 = *(_QWORD *)(a2 + 576);
    v12 = *(_QWORD *)(a2 + 584) - v11;
    if (v12)
    {
      v13 = 24 * (v12 / 24);
      do
      {
        v16 = *(unsigned __int8 *)(v11 + 23);
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v11 + 8);
        __src = v16;
        sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v21, 8);
        if (*(char *)(v11 + 23) < 0)
        {
          v15 = *(char **)v11;
          v14 = *(_QWORD *)(v11 + 8);
          if (*(_QWORD *)v11)
            v17 = 1;
          else
            v17 = v14 == 0;
          if (!v17)
          {
            v18 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
            v15 = 0;
            if (v18)
              abort();
          }
        }
        else
        {
          v14 = *(unsigned __int8 *)(v11 + 23);
          v15 = (char *)v11;
        }
        result = sub_207D0B114(v7, *(char **)(a1 + 32), v15, &v15[v14], v14);
        v11 += 24;
        v13 -= 24;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t *sub_207E354FC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = a2 + 16;
  v7 = *((_DWORD *)a1 + 2);
  LODWORD(v13) = 6;
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 104))(a1, &v13);
  v8 = v13;
  if (v7 < 1)
  {
    sub_207E12E90((uint64_t)a1, v6, v13);
  }
  else
  {
    if (v7 == 2)
    {
      LODWORD(v13) = 3;
      (*(void (**)(_QWORD *, unint64_t *))(*a1 + 104))(a1, &v13);
    }
    (*(void (**)(_QWORD *))(*a1 + 16))(a1);
    sub_207E12E90((uint64_t)a1, v6, v8);
    (*(void (**)(_QWORD *))(*a1 + 24))(a1);
  }
  v13 = a1[1];
  result = sub_207E27018((int *)&v13, (uint64_t)a1, a2 + 192);
  if (a3 >= 3)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 584) - *(_QWORD *)(a2 + 576)) >> 3);
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v13);
    v10 = *(_QWORD *)(a2 + 576);
    v11 = *(_QWORD *)(a2 + 584) - v10;
    if (v11)
    {
      v12 = 24 * (v11 / 24);
      do
      {
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 144))(a1, v10);
        v10 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
  return result;
}

BOOL sub_207E35670(const void *a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  int v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  char v15;

  v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076D28, 0);
  v6 = (uint64_t)v5;
  if (v5)
  {
    v7 = *a3;
    v8 = *((unsigned __int8 *)v5 + 104);
    v5[11] = "info";
    v5[12] = 4;
    if (!v8)
      *((_BYTE *)v5 + 104) = 1;
    sub_207E14108((uint64_t)v5, a2 + 16);
    v9 = (uint64_t *)(a2 + 192);
    v10 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "value";
    *(_QWORD *)(v6 + 96) = 5;
    if (v10)
    {
      sub_207E27910(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    else
    {
      *(_BYTE *)(v6 + 104) = 1;
      sub_207E27910(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    v11 = (void **)(a2 + 576);
    v12 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "textures";
    *(_QWORD *)(v6 + 96) = 8;
    if (!v12)
      *(_BYTE *)(v6 + 104) = 1;
    v15 = 0;
    v13 = (unsigned __int8 *)sub_2081F6204((uint64_t *)v6);
    ++*(_QWORD *)(v6 + 112);
    sub_2081F77EC((uint64_t)&v15, v13, v11);
  }
  return v6 != 0;
}

BOOL sub_207E3578C(const void *a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  int v10;
  void **v11;
  int v12;
  char *v13;
  char v15;

  v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C08EA38, (const struct __class_type_info *)&unk_24C076DE8, 0);
  v6 = (uint64_t)v5;
  if (v5)
  {
    v7 = *a3;
    v8 = *((unsigned __int8 *)v5 + 104);
    v5[11] = "info";
    v5[12] = 4;
    if (!v8)
      *((_BYTE *)v5 + 104) = 1;
    sub_207E19198((uint64_t)v5, a2 + 16);
    v9 = (uint64_t *)(a2 + 192);
    v10 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "value";
    *(_QWORD *)(v6 + 96) = 5;
    if (v10)
    {
      sub_207E2D808(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    else
    {
      *(_BYTE *)(v6 + 104) = 1;
      sub_207E2D808(v6, v9);
      if (v7 < 3)
        return v6 != 0;
    }
    v11 = (void **)(a2 + 576);
    v12 = *(unsigned __int8 *)(v6 + 104);
    *(_QWORD *)(v6 + 88) = "textures";
    *(_QWORD *)(v6 + 96) = 8;
    if (!v12)
      *(_BYTE *)(v6 + 104) = 1;
    v15 = 0;
    v13 = (char *)sub_2081F5D78((uint64_t *)v6);
    ++*(_QWORD *)(v6 + 112);
    sub_2081F6DA4((uint64_t)&v15, v13, v11);
  }
  return v6 != 0;
}

double sub_207E358A8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  double result;
  char v12;
  char v13;
  char v14;
  char v15;
  void *__p;
  uint64_t v17;
  char v18;

  v6 = a2 + 16;
  LODWORD(__p) = 6;
  sub_208209DC8(a1, &__p);
  v7 = __p;
  if (__p >= 6)
    v8 = 6;
  else
    v8 = __p;
  if (v8 < 3)
  {
    sub_207E1B3DC((uint64_t)&__p, a1, v6, v8);
    if (v7 < 3)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20820B068(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_26:
          v13 = 0;
          if (v18 < 0)
            goto LABEL_29;
          goto LABEL_15;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_26;
      }
      v13 = 1;
      if (v18 < 0)
LABEL_29:
        operator delete(__p);
LABEL_15:
      if (*(_BYTE *)(a1 + 131))
        v12 = 0;
      else
        v12 = v13;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_207E1B5CC(a1, v6, v8);
  if (v7 >= 3)
    goto LABEL_8;
LABEL_9:
  LODWORD(__p) = 4;
  sub_208209DC8(a1, &__p);
  v9 = __p;
  if (__p >= 4)
    v10 = 4;
  else
    v10 = __p;
  if (v10 < 3)
  {
    sub_207E2EEF8((uint64_t)&__p, a1, (uint64_t *)(a2 + 192), v10);
    if (v9 < 3)
      goto LABEL_32;
LABEL_31:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_32;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_32;
      sub_20820B068(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_46:
          v15 = 0;
          if (v18 < 0)
            goto LABEL_49;
          goto LABEL_35;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_46;
      }
      v15 = 1;
      if (v18 < 0)
LABEL_49:
        operator delete(__p);
LABEL_35:
      if (*(_BYTE *)(a1 + 131))
        v14 = 0;
      else
        v14 = v15;
      if ((v14 & 1) == 0)
        goto LABEL_32;
    }
  }
  sub_207E2F770(a1, a2 + 192, v10);
  if (v9 >= 3)
    goto LABEL_31;
LABEL_32:
  if (a3 >= 3)
    *(_QWORD *)&result = sub_207E1BF18(a1, (char **)(a2 + 576)).n128_u64[0];
  return result;
}

void sub_207E35AFC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11[3];
  unsigned int v12;

  v6 = a2 + 16;
  v7 = *(_QWORD *)a1;
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  v12 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v7 + 104))(a1, &v12);
  if (v11[0] < 1)
  {
    if (v12 < 3)
      sub_207E1EB04((uint64_t)&v12, a1, v6, v12);
    else
      sub_207E1ED78(a1, v6, v12);
  }
  else
  {
    sub_207E1E50C(v11, a1, v6, v12);
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  v9 = v11[0];
  v12 = 4;
  (*(void (**)(uint64_t, unsigned int *))(v8 + 104))(a1, &v12);
  if (v9 >= 1)
  {
    sub_207E31134(v11, (_BYTE *)a1, (uint64_t *)(a2 + 192), v12);
    if (a3 < 3)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t *)(a2 + 192);
  if (v12 < 3)
  {
    sub_207E317C8((_BYTE *)a1, v10, v12);
    if (a3 < 3)
      return;
    goto LABEL_13;
  }
  sub_207E32164(a1, (uint64_t)v10, v12);
  if (a3 >= 3)
LABEL_13:
    sub_207E1F7E0(a1, (char **)(a2 + 576));
}

uint64_t sub_207E35C2C(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;

  v10 = a2;
  v11 = "{";
  v12 = a2;
  v13 = "{";
  v14 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **))off_24C0766E8[v3])(&v15);
  sub_207E36388((uint64_t)&v10, a2, a3);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C0766E8[v6])(&v15, a2);
  sub_207E36388((uint64_t)&v10, a2, a3 + 1);
  v10 = a2;
  v11 = ",";
  v12 = a2;
  v13 = ",";
  v14 = ",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_6;
  v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_24C0766E8[v7])(&v15, a2);
  sub_207E36388((uint64_t)&v10, a2, a3 + 2);
  v10 = a2;
  v11 = "}";
  v12 = a2;
  v13 = "}";
  v14 = "}";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
LABEL_6:
    sub_207CA9F48();
  v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C0766E8[v8])(&v15, a2);
}

_DWORD *sub_207E35D7C(_DWORD ***a1)
{
  return sub_207E35D98(**a1, (char *)(*a1)[1]);
}

void sub_207E35D88(uint64_t a1, uint64_t a2)
{
  sub_207E35E88((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_207E35D98(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C0765E0[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_207E35E88(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C0765E0[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_207CAA110((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_207E3603C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_207E36080(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_207E36178((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_207E36170(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207E36178(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_207E36374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E36388(uint64_t a1, uint64_t a2, float *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  char *v8;
  int v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  std::string v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  uint64_t *v28;

  std::to_string(&v22, *a3);
  v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v22;
  else
    v6 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v8 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
    {
      size = -1;
      if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (size != HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v22;
        goto LABEL_17;
      }
LABEL_15:
      v23 = a2;
      v24 = &v22;
      v25 = a2;
      v26 = &v22;
      v27 = &v22;
      v10 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v10 == -1)
        sub_207CA9F48();
      goto LABEL_16;
    }
    v9 = v8[size--];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (size == v22.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_17:
  if (strtof((const char *)v5, 0) != *a3)
  {
    v23 = a2;
    v24 = &v22;
    v25 = a2;
    v26 = &v22;
    v27 = &v22;
    v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10 == -1)
      sub_207CA9F48();
LABEL_16:
    __p[0] = &v23;
    ((void (*)(void **, uint64_t))*(&off_24C076860 + v10))(__p, a2);
    goto LABEL_40;
  }
  v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v22;
  else
    v12 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v22.__r_.__value_.__l.__size_;
  v13 = 1;
  if (v12->__r_.__value_.__s.__data_[size] == 46)
    v13 = 2;
  v14 = v13 + size;
  if (v11 >= v14)
    v15 = v14;
  else
    v15 = v11;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = (void *)v15;
    v21 = v18 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_37;
  }
  HIBYTE(v21) = v15;
  v16 = __p;
  if (v15)
LABEL_37:
    memmove(v16, v12, v15);
  *((_BYTE *)v16 + v15) = 0;
  v23 = a2;
  v24 = (std::string *)__p;
  v25 = a2;
  v26 = (std::string *)__p;
  v27 = (std::string *)__p;
  v19 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v19 == -1)
    sub_207CA9F48();
  v28 = &v23;
  ((void (*)(uint64_t **, uint64_t))off_24C0765C8[v19])(&v28, a2);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_43;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_207E36600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E3666C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  uint64_t *v19;

  v14 = a2;
  v15 = (std::string *)"{";
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_24C0766E8[v3])(&v13);
  std::to_string(&v13, *a3);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0765C8[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0766E8[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_16;
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0765C8[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)",";
  v16 = a2;
  v17 = (std::string *)",";
  v18 = (std::string *)",";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_15:
    sub_207CA9F48();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_24C0766E8[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  v14 = a2;
  v15 = &v13;
  v16 = a2;
  v17 = &v13;
  v18 = &v13;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
LABEL_16:
    sub_207CA9F48();
  v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_24C0765C8[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = (std::string *)"}";
  v11 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v11 == -1)
    goto LABEL_15;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0766E8[v11])(&v13, a2);
}

void sub_207E36888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E368AC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C0766E8[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0765C8[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C0766E8[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C0765C8[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_207CA9F48();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C0766E8[v9])(&v11, a2);
}

void sub_207E36A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E36A68(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t *v14;

  v9 = a2;
  v10 = "{";
  v11 = a2;
  v12 = "{";
  v13 = "{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **))off_24C0766E8[v3])(&v14);
  sub_207E36388((uint64_t)&v9, a2, a3);
  v9 = a2;
  v10 = ",";
  v11 = a2;
  v12 = ",";
  v13 = ",";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_5;
  v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_24C0766E8[v6])(&v14, a2);
  sub_207E36388((uint64_t)&v9, a2, a3 + 1);
  v9 = a2;
  v10 = "}";
  v11 = a2;
  v12 = "}";
  v13 = "}";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
LABEL_5:
    sub_207CA9F48();
  v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_24C0766E8[v7])(&v14, a2);
}

void sub_207E36B6C(uint64_t a1, _QWORD **a2, float *a3)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  void *p_p;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *__p;
  size_t v21;
  int64_t v22;
  std::string v23;

  std::to_string(&v23, *a3);
  v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v23;
  else
    v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v8 = size;
  do
  {
    if (!v8)
    {
      v8 = -1;
      if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_14;
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_207CBAB98(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_51;
    }
    v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) == 0)
    goto LABEL_11;
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1)
    goto LABEL_15;
LABEL_16:
  if (strtof((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    goto LABEL_15;
  }
  v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v23;
  else
    v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v23.__r_.__value_.__l.__size_;
  v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46)
    v12 = 2;
  v13 = v12 + v8;
  if (v10 >= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v21 = v14;
    v22 = v17 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14)
LABEL_40:
    memmove(p_p, v11, v14);
  *((_BYTE *)p_p + v14) = 0;
  if (v22 >= 0)
    v18 = &__p;
  else
    v18 = __p;
  if (v22 >= 0)
    v19 = HIBYTE(v22);
  else
    v19 = v21;
  sub_207CBAB98(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
    goto LABEL_48;
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_207E36D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_207E36DD8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_207DC9454();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_207CAA110(&__p, (uint64_t)__dst, 1uLL);
  sub_208215D20(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_207E36ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_207C99DE0(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_207E36F00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new(0x100uLL);
  v5 = v4;
  *(_QWORD *)v4 = off_24C0732D8;
  v4[8] = *(_BYTE *)(a1 + 8);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a1 + 48);
  v4[64] = 0;
  v4[88] = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 64);
    *((_QWORD *)v4 + 10) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v4[88] = 1;
  }
  v4[96] = 0;
  v4[120] = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    *((_OWORD *)v4 + 6) = *(_OWORD *)(a1 + 96);
    *((_QWORD *)v4 + 14) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    v4[120] = 1;
  }
  v4[160] = 0;
  *((_OWORD *)v4 + 8) = *(_OWORD *)(a1 + 128);
  *((_QWORD *)v4 + 18) = *(_QWORD *)(a1 + 144);
  v4[208] = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    *((_OWORD *)v4 + 10) = *(_OWORD *)(a1 + 160);
    *((_QWORD *)v4 + 22) = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v6 = (unsigned __int128 *)(a1 + 192);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *((_OWORD *)v4 + 12) = v7;
    v4[208] = 1;
  }
  v4[224] = 0;
  v4[248] = 0;
  if (*(_BYTE *)(a1 + 248))
  {
    *((_OWORD *)v4 + 14) = *(_OWORD *)(a1 + 224);
    *((_QWORD *)v4 + 30) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    v4[248] = 1;
  }
  *(_QWORD *)v4 = off_24C073258;
  *a2 = &off_24C078D18;
  a2[1] = v4;
  result = operator new(0x20uLL);
  *result = &off_24C078E28;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_207E3708C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_207D4784C(v1);
  _Unwind_Resume(a1);
}

double sub_207E370A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_207CA40D8(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_207CA40D8((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_207CA40D8(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_207E374D0((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_207E3724C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_207E372B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_207CA40D8(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_207CA40D8((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_207CA40D8(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_207E37794((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_207E37464(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_207E374D0@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_207E0B52C((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_207EFE140(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_207E0B76C(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_207E3767C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

double sub_207E37794@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_207E0B52C((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_207EFE140(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_207E0B76C(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_207E37940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E37A58(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E3819C((uint64_t)v8, a2);
  sub_207E37B74(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E37B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E37B74(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2081F3DDC(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2081F3DDC(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_2081F1A98(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_20806DC2C((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_207E0C72C(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2081F1A98(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_20806DC2C((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_207E0CAB0((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2081F1A98(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_20806DC2C((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2081F42A4(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2081F1A98(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_20806DC2C((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2081F42A4(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2081F1A98(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_20806DC2C((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2081F42A4(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2081F1A98(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_20806DC2C((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_2081F5870(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2081F42A4(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_207E3811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E38154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E38184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_207E3819C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_207CA5698((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_207E3830C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E383C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E38878((uint64_t)v8, a2);
  sub_207E384E4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E384CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E384E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  void **v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F1E44(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2081F3DDC(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2081F3DDC(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_2081F1A98(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = (uint64_t)v17;
    sub_20806DC2C((void ***)&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_207E0C72C(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_2081F1A98(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = (uint64_t)v23;
    sub_20806DC2C((void ***)&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_207E0CAB0((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_2081F1A98(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = (void **)*((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = (uint64_t)v27;
    sub_20806DC2C((void ***)&v29, v26);
    return;
  }
  sub_2081F42A4(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_207E38830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E38848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E38860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20806DC2C(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_207E38878(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_207CA5698((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_207E389E8(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E38AA4(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  _BYTE *v13;

  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v12 = &v6[v5];
    memcpy(v6, v4, v5);
    v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = v9;
  sub_207E392A0(a1, &v13);
  sub_207E38BB0(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E38B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E38BB0(int a1, uint64_t a2, uint64_t a3)
{
  void **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v20;
  int v21;
  int v22;
  int *v24;
  int v25;
  int v26;
  unsigned __int8 *v28;
  int *v29;
  int v30;
  int v31;
  int *v33;
  int v34;
  int v35;
  int *v37;
  int v38;
  int v39;
  int *v41;
  int v42;
  int v43;
  int v45;
  void **v46;
  int *v47;
  int v48;
  int v49;
  int *v51;
  int v52;
  int v53;
  uint64_t v55;
  void **v56;

  switch(a1)
  {
    case 0:
      v4 = (void **)*(unsigned __int8 *)sub_2082062F0(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v5 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v5)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v16 = *(int **)(a3 + 72);
      v17 = *v16;
      v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 1:
      v4 = (void **)*(unsigned __int16 *)sub_2082065D0(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v6 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v6)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v20 = *(int **)(a3 + 72);
      v21 = *v20;
      v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_2082066B8(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v7)
          *(_BYTE *)(a3 + 88) = 1;
      }
      sub_2081F3DDC(a3, &v55);
      return;
    case 3:
      v4 = *(void ***)sub_2082067A0(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_54:
          LOBYTE(v55) = 6;
          v56 = v4;
          v28 = (unsigned __int8 *)sub_2081F1A98(a3);
          goto LABEL_83;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v8)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v24 = *(int **)(a3 + 72);
      v25 = *v24;
      v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 5:
      v9 = (void **)*(char *)sub_208206888(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v10 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v10)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v29 = *(int **)(a3 + 72);
      v30 = *v29;
      v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 6:
      v9 = (void **)*(__int16 *)sub_208206970(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v11 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v11)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v33 = *(int **)(a3 + 72);
      v34 = *v33;
      v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 7:
      v9 = (void **)*(int *)sub_208206A58(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v12)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v37 = *(int **)(a3 + 72);
      v38 = *v37;
      v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 8:
      v9 = *(void ***)sub_208206B40(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v13 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v13)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) == 7)
      {
        v41 = *(int **)(a3 + 72);
        v42 = *v41;
        v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion")
          return;
      }
LABEL_82:
      LOBYTE(v55) = 5;
      v56 = v9;
      v28 = (unsigned __int8 *)sub_2081F1A98(a3);
LABEL_83:
      v45 = *v28;
      *v28 = v55;
      LOBYTE(v55) = v45;
      v46 = (void **)*((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = v56;
      v56 = v46;
      sub_20806DC2C(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_208206C28(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_90:
          sub_2081F3EB8(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_90;
      v47 = *(int **)(a3 + 72);
      v48 = *v47;
      v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion")
        goto LABEL_90;
      return;
    case 12:
      v55 = *(_QWORD *)sub_208206D10(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_97:
          sub_2081F40B0(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_97;
      v51 = *(int **)(a3 + 72);
      v52 = *v51;
      v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion")
        goto LABEL_97;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E391F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E39210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E39228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E39240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E39258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E39270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E39288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20806DC2C(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E392A0(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_207E393A8((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_207CA9F48();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
  sub_2081F42A4(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_207E39364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E39380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E39394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E393A8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _OWORD *v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new(0x118uLL);
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  *((_QWORD *)v5 + 34) = 0;
  sub_207CA2878((uint64_t)v5);
  v21[0] = v5;
  sub_208205930((_QWORD *)v5 + 2, a3);
  v6 = *((_DWORD *)v5 + 30);
  if ((v6 & 0x10) != 0)
  {
    v9 = *((_QWORD *)v5 + 14);
    v10 = *((_QWORD *)v5 + 9);
    if (v9 < v10)
    {
      *((_QWORD *)v5 + 14) = v10;
      v9 = v10;
    }
    v11 = (const void *)*((_QWORD *)v5 + 8);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = (const void *)*((_QWORD *)v5 + 5);
    v7 = *((_QWORD *)v5 + 7) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_207C95C50();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD027B8](v14 + 128);
    operator delete((void *)v14);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_207CA9F48();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C0765C8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_207E395D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207E39600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_207E39614(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E3819C((uint64_t)v8, a2);
  sub_207E0E77C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E39718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E39730(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E38878((uint64_t)v8, a2);
  sub_207E3984C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E39834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3984C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v19 = (uint64_t *)(v6 + 16);
    sub_208210C8C(&v19, 2u);
    sub_20820C2C0(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20821152C();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_208210F00((uint64_t)&v19, v6 + 8);
  sub_20820C2C0(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v19 = (uint64_t *)(v7 + 16);
  sub_208210FF0(&v19, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v19 = (uint64_t *)(v9 + 16);
    sub_2082100A4(&v19, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v8;
  }
  else
  {
    LOBYTE(v19) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_20820C0E8((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v19 = (uint64_t *)(v17 + 16);
      sub_2082100A4(&v19, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v19) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
    goto LABEL_26;
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v19 = (uint64_t *)(v15 + 16);
    sub_2082100A4(&v19, 1);
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
      goto LABEL_19;
LABEL_25:
    sub_208212184((uint64_t)&v19, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
    goto LABEL_26;
  }
  LOBYTE(v19) = 1;
  std::ostream::write();
  v16 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v16 + 40))
    goto LABEL_25;
LABEL_19:
  v19 = (uint64_t *)(v16 + 16);
  sub_208211D5C((uint64_t)&v18, &v19, (const void **)(a2 + 24));
  if (a3 < 4)
    return;
LABEL_26:
  sub_207E0EDEC(a1, a2 + 56);
}

void sub_207E39ACC(uint64_t a1, char *a2)
{
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[16];
  void *__p;
  void *v12;
  char *v13;
  uint64_t *v14;

  v3 = *a2;
  v10[0] = *a2;
  v10[8] = a2[8];
  v12 = 0;
  v13 = 0;
  __p = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v4 = (_BYTE *)*((_QWORD *)a2 + 3);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v13 = &v7[v6];
    memcpy(v7, v5, v6);
    v12 = v8;
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    v14 = (uint64_t *)(v9 + 16);
    sub_2082100A4(&v14, v3);
  }
  else
  {
    if (v3 < 0)
    {
      LOBYTE(v14) = -52;
      BYTE1(v14) = v3;
    }
    else
    {
      LOBYTE(v14) = v3;
    }
    std::ostream::write();
  }
  sub_207E39BF8(v10[0], (uint64_t)v10, a1);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_207E39BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_207E39BF8(int a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _BYTE v28[9];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v4 = (char *)sub_2082062F0(a2 + 8);
      v5 = *v4;
      v6 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v6 + 40))
      {
        *(_QWORD *)v28 = v6 + 16;
        return sub_2082100A4((uint64_t **)v28, v5);
      }
      if (v5 < 0)
      {
        v28[0] = -52;
        v28[1] = v5;
      }
      else
      {
        v28[0] = *v4;
      }
      return (char *)std::ostream::write();
    case 1:
      v8 = *(unsigned __int16 *)sub_2082065D0(a2 + 8);
      v9 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        *(_QWORD *)v28 = v9 + 16;
        return sub_2082105A8((uint64_t **)v28, v8);
      }
      if (v8 <= 0x7F)
      {
        v28[0] = v8;
        return (char *)std::ostream::write();
      }
      if (v8 > 0xFF)
      {
        v28[0] = -51;
        *(_WORD *)&v28[1] = __rev16(v8);
      }
      else
      {
        v28[0] = -52;
        v28[1] = v8;
      }
      return (char *)std::ostream::write();
    case 2:
      v10 = *(_DWORD *)sub_2082066B8(a2 + 8);
      v11 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v11 + 40))
        return (char *)sub_208210F00((uint64_t)v28, v11 + 8);
      *(_QWORD *)v28 = v11 + 16;
      return sub_208210C8C((uint64_t **)v28, v10);
    case 3:
      v12 = *(_QWORD *)sub_2082067A0(a2 + 8);
      v13 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v13 + 40))
        return (char *)sub_208211974();
      *(_QWORD *)v28 = v13 + 16;
      return sub_20821166C((uint64_t **)v28, v12);
    case 5:
      v14 = *(char *)sub_208206888(a2 + 8);
      v15 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v15 + 40))
      {
        *(_QWORD *)v28 = v15 + 16;
        return sub_20820FF5C((uint64_t **)v28, v14);
      }
      else
      {
        if (v14 > -33)
        {
          v28[0] = v14;
        }
        else
        {
          v28[0] = -48;
          v28[1] = v14;
        }
        return (char *)std::ostream::write();
      }
    case 6:
      v16 = *(_WORD *)sub_208206970(a2 + 8);
      v17 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v17 + 40))
        return (char *)sub_2082104AC();
      *(_QWORD *)v28 = v17 + 16;
      return sub_2082101E8((uint64_t **)v28, v16);
    case 7:
      v18 = *(_DWORD *)sub_208206A58(a2 + 8);
      v19 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v19 + 40))
        return (char *)sub_208210B90();
      *(_QWORD *)v28 = v19 + 16;
      return sub_208210774((uint64_t **)v28, v18);
    case 8:
      v20 = *(_QWORD *)sub_208206B40(a2 + 8);
      v21 = *(_QWORD *)(a3 + 24);
      if (!*(_BYTE *)(v21 + 40))
        return (char *)sub_20821152C();
      *(_QWORD *)v28 = v21 + 16;
      return sub_208210FF0((uint64_t **)v28, v20);
    case 11:
      v22 = *(_DWORD *)sub_208206C28(a2 + 8);
      LODWORD(v26) = v22;
      v23 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        *(_QWORD *)v28 = v23 + 16;
        return (char *)sub_208211A6C((uint64_t)&v27, (uint64_t **)v28, (unsigned int *)&v26);
      }
      else
      {
        v28[0] = -54;
        *(_DWORD *)&v28[1] = bswap32(v22);
        return (char *)std::ostream::write();
      }
    case 12:
      v24 = *(_QWORD *)sub_208206D10(a2 + 8);
      v26 = v24;
      v25 = *(_QWORD *)(a3 + 24);
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)v28 = v25 + 16;
        return (char *)sub_208211B48((uint64_t)&v27, (uint64_t **)v28, &v26);
      }
      else
      {
        v28[0] = -53;
        *(_QWORD *)&v28[1] = bswap64(v24);
        return (char *)std::ostream::write();
      }
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3A048(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E3819C((uint64_t)v8, a2);
  sub_207E3A164(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3A14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3A164(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2081F20F8(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2081F20F8(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_2081F133C(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_207D20660(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_207E10048(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_2081F133C(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_207D20660(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_207E10150((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_2081F133C(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_207D20660(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_2081F25C0(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_2081F133C(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_207D20660(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_2081F25C0(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_2081F133C(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_207D20660(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_2081F25C0(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_2081F133C(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_207D20660(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_2081F3B8C(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_2081F25C0(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_207E3A70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3A744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3A75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3A774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3A78C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E38878((uint64_t)v8, a2);
  sub_207E3A8A8(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3A890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3A8A8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_2081F17E4(a1);
  v28 = "version";
  v29 = 7;
  v30 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_2081F20F8(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_2081F20F8(a1, &v30);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v28) = 5;
    v29 = v14;
    v15 = (unsigned __int8 *)sub_2081F133C(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v28) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v29;
    v29 = v17;
    sub_207D20660(&v29, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v28 = (const char *)(a2 + 16);
  sub_207E10048(a1, (unsigned __int8 **)&v28);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v28) = 0;
    v29 = 0;
    v21 = (unsigned __int8 *)sub_2081F133C(a1);
    v22 = *v21;
    *v21 = v28;
    LOBYTE(v28) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v29;
    v29 = v23;
    sub_207D20660(&v29, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v28 = *(const char **)(a1 + 8);
        sub_207E10150((int *)&v28, a1, (__int128 *)(a2 + 56));
        return;
      }
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    LOBYTE(v28) = 0;
    v29 = 0;
    v25 = (unsigned __int8 *)sub_2081F133C(a1);
    v26 = *v25;
    *v25 = v28;
    LOBYTE(v28) = v26;
    v27 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = v29;
    v29 = v27;
    sub_207D20660(&v29, v26);
    return;
  }
  sub_2081F25C0(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_207E3ABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3AC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_207D20660(v10, a10);
  _Unwind_Resume(a1);
}

void sub_207E3AC3C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  int v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  _BYTE *v13;

  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v12 = &v6[v5];
    memcpy(v6, v4, v5);
    v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v13 = v9;
  sub_207E3B438(a1, &v13);
  sub_207E3AD48(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E3AD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E3AD48(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  int *v20;
  int v21;
  int v22;
  int *v24;
  int v25;
  int v26;
  unsigned __int8 *v28;
  int *v29;
  int v30;
  int v31;
  int *v33;
  int v34;
  int v35;
  int *v37;
  int v38;
  int v39;
  int *v41;
  int v42;
  int v43;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  int *v51;
  int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;

  switch(a1)
  {
    case 0:
      v4 = *(unsigned __int8 *)sub_2082062F0(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v5 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v5)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v16 = *(int **)(a3 + 72);
      v17 = *v16;
      v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 1:
      v4 = *(unsigned __int16 *)sub_2082065D0(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_54;
      }
      else
      {
        v6 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v6)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v20 = *(int **)(a3 + 72);
      v21 = *v20;
      v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_2082066B8(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v7)
          *(_BYTE *)(a3 + 88) = 1;
      }
      sub_2081F20F8(a3, &v55);
      return;
    case 3:
      v4 = *(_QWORD *)sub_2082067A0(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_54:
          LOBYTE(v55) = 6;
          v56 = v4;
          v28 = (unsigned __int8 *)sub_2081F133C(a3);
          goto LABEL_83;
        }
      }
      else
      {
        v8 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v8)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_54;
      v24 = *(int **)(a3 + 72);
      v25 = *v24;
      v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion")
        goto LABEL_54;
      return;
    case 5:
      v9 = *(char *)sub_208206888(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v10 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v10)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v29 = *(int **)(a3 + 72);
      v30 = *v29;
      v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 6:
      v9 = *(__int16 *)sub_208206970(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v11 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v11)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v33 = *(int **)(a3 + 72);
      v34 = *v33;
      v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 7:
      v9 = *(int *)sub_208206A58(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v12)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_82;
      v37 = *(int **)(a3 + 72);
      v38 = *v37;
      v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion")
        goto LABEL_82;
      return;
    case 8:
      v9 = *(_QWORD *)sub_208206B40(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
          goto LABEL_82;
      }
      else
      {
        v13 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v13)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) == 7)
      {
        v41 = *(int **)(a3 + 72);
        v42 = *v41;
        v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion")
          return;
      }
LABEL_82:
      LOBYTE(v55) = 5;
      v56 = v9;
      v28 = (unsigned __int8 *)sub_2081F133C(a3);
LABEL_83:
      v45 = *v28;
      *v28 = v55;
      LOBYTE(v55) = v45;
      v46 = *((_QWORD *)v28 + 1);
      *((_QWORD *)v28 + 1) = v56;
      v56 = v46;
      sub_207D20660(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_208206C28(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_90:
          sub_2081F21D4(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        v14 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v14)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_90;
      v47 = *(int **)(a3 + 72);
      v48 = *v47;
      v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion")
        goto LABEL_90;
      return;
    case 12:
      v55 = *(_QWORD *)sub_208206D10(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(_BYTE *)(a3 + 88))
        {
LABEL_97:
          sub_2081F23CC(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(a3 + 88);
        *(_QWORD *)(a3 + 72) = "number";
        *(_QWORD *)(a3 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a3 + 88) = 1;
      }
      if (*(_QWORD *)(a3 + 80) != 7)
        goto LABEL_97;
      v51 = *(int **)(a3 + 72);
      v52 = *v51;
      v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion")
        goto LABEL_97;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3B390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E3B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E3B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E3B3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E3B3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E3B408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E3B420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_207D20660(v9, a9);
  _Unwind_Resume(a1);
}

void sub_207E3B438(uint64_t a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_207E393A8((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_207CA9F48();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
  sub_2081F25C0(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_207E3B4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E3B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3B52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3B540(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E3819C((uint64_t)v8, a2);
  sub_207E3B65C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3B644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3B65C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_208208D08(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_207CBAB98(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    sub_208208DC4(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_207E115E4(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_208208D08(a1, (unsigned __int8 *)&__p);
      sub_208208DC4(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_208208D08(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    sub_208208DC4(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_208208D08(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_208208D08(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_207CBAB98(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_208208D08(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_208208D08(a1, (unsigned __int8 *)&__p);
  sub_208208DC4(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_207CAB69C(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_207E0CF98(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_208208D08(a1, (unsigned __int8 *)&v25);
  sub_208208DC4(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_207E3BAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E3BAE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E38878((uint64_t)v8, a2);
  sub_207E3BC00(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3BBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3BC00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    v15 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v6, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v16 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v8, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a2 + 16);
  sub_208208D08(a1, &v12);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    v17 = *(_BYTE *)(a1 + 32);
    sub_207CBAB98(v10, (uint64_t)&v17, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  v18 = v9;
  sub_207CBAB98(v11, (uint64_t)&v18, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    v14 = 1;
    sub_208208D08(a1, &v14);
    sub_208208DC4(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v13 = 0;
    sub_208208D08(a1, &v13);
    if (a3 < 4)
      return;
  }
  sub_207E115E4(a1, a2 + 56);
}

void sub_207E3BD5C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  unsigned __int8 v13;

  v3 = *(_BYTE *)a2;
  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v12 = &v7[v6];
    memcpy(v7, v5, v6);
    v11 = v8;
  }
  v13 = v3;
  sub_208208D08(a1, &v13);
  sub_207E3BE3C(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E3BE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E3BE3C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  switch(a1)
  {
    case 0:
      v12 = *(_BYTE *)sub_2082062F0(a2 + 8);
      sub_208208D08(a3, &v12);
      return;
    case 1:
      sub_2082065D0(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v4 = *(_QWORD **)(a3 + 24);
        v14 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v4, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 2:
      sub_2082066B8(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v5 = *(_QWORD **)(a3 + 24);
        v15 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v5, (uint64_t)&v15, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 3:
      sub_2082067A0(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v6 = *(_QWORD **)(a3 + 24);
        v16 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 5:
      v13 = *(_BYTE *)sub_208206888(a2 + 8);
      sub_208208B24(a3, &v13);
      return;
    case 6:
      sub_208206970(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v7 = *(_QWORD **)(a3 + 24);
        v17 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v7, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 7:
      sub_208206A58(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v8 = *(_QWORD **)(a3 + 24);
        v18 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v8, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 8:
      sub_208206B40(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v9 = *(_QWORD **)(a3 + 24);
        v19 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v9, (uint64_t)&v19, 1);
      }
      std::ostream::operator<<();
      goto LABEL_28;
    case 11:
      sub_208206C28(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v10 = *(_QWORD **)(a3 + 24);
        v20 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v10, (uint64_t)&v20, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_28;
    case 12:
      sub_208206D10(a2 + 8);
      if (*(_QWORD *)(a3 + 40))
      {
        v11 = *(_QWORD **)(a3 + 24);
        v21 = *(_BYTE *)(a3 + 32);
        sub_207CBAB98(v11, (uint64_t)&v21, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(**(_QWORD **)(a3 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
LABEL_28:
      ++*(_QWORD *)(a3 + 40);
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3C100(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E3819C((uint64_t)v8, a2);
  sub_207E12014(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3C204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3C21C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E38878((uint64_t)v8, a2);
  sub_207E3C338(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3C320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_207E3C338(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  int v14;
  char v15;
  char __src;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (char *)(a2 + 8);
  v14 = 2;
  v7 = a1 + 24;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), (char *)&v14, &v15, 4);
  sub_208072A10((_QWORD *)a1);
  sub_207D0B114(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  __src = *(_BYTE *)(a2 + 16);
  sub_207D0B114(v7, *(char **)(a1 + 32), &__src, &v17, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (!*(_BYTE *)(a2 + 48))
  {
    v17 = 0;
    result = sub_207D0B114(v7, *(char **)(a1 + 32), &v17, &v18, 1);
    if (a3 < 4)
      return result;
    return sub_207E12624(a1, (char *)(a2 + 56));
  }
  v18 = 1;
  sub_207D0B114(v7, *(char **)(a1 + 32), &v18, (char *)&v19, 1);
  v9 = *(unsigned __int8 *)(a2 + 47);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 32);
  v19 = v9;
  sub_207D0B114(v7, *(char **)(a1 + 32), (char *)&v19, (char *)&v20, 8);
  if (*(char *)(a2 + 47) < 0)
  {
    v10 = *(char **)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (!v10 && v11)
    {
      v13 = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_208224846, 0, (void (*)(void **))sub_208216974);
      v10 = 0;
      if (v13)
        abort();
    }
  }
  else
  {
    v10 = (char *)(a2 + 24);
    v11 = *(unsigned __int8 *)(a2 + 47);
  }
  result = sub_207D0B114(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
  if (a3 >= 4)
    return sub_207E12624(a1, (char *)(a2 + 56));
  return result;
}

void sub_207E3C51C(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _BYTE v9[16];
  void *__p;
  void *v11;
  char *v12;
  char __src;
  uint64_t v14;

  v3 = *(_BYTE *)a2;
  v9[0] = *(_BYTE *)a2;
  v9[8] = *(_BYTE *)(a2 + 8);
  v11 = 0;
  v12 = 0;
  __p = 0;
  v5 = *(_BYTE **)(a2 + 16);
  v4 = *(_BYTE **)(a2 + 24);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[v6];
    __p = v7;
    v12 = &v7[v6];
    memcpy(v7, v5, v6);
    v11 = v8;
  }
  __src = v3;
  sub_207D0B114(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v14, 1);
  sub_207E3C60C(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_207E3C5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_207E3C60C(int a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  _WORD *v5;
  _DWORD *v6;
  uint64_t *v7;
  char *result;
  uint64_t __src;
  uint64_t v10;

  switch(a1)
  {
    case 0:
      v4 = (_BYTE *)sub_2082062F0(a2 + 8);
      goto LABEL_7;
    case 1:
      v5 = (_WORD *)sub_2082065D0(a2 + 8);
      goto LABEL_9;
    case 2:
      v6 = (_DWORD *)sub_2082066B8(a2 + 8);
      goto LABEL_11;
    case 3:
      v7 = (uint64_t *)sub_2082067A0(a2 + 8);
      goto LABEL_13;
    case 5:
      v4 = (_BYTE *)sub_208206888(a2 + 8);
LABEL_7:
      LOBYTE(__src) = *v4;
      return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 1, 1);
    case 6:
      v5 = (_WORD *)sub_208206970(a2 + 8);
LABEL_9:
      LOWORD(__src) = *v5;
      return sub_207D0B114(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 2, 2);
    case 7:
      v6 = (_DWORD *)sub_208206A58(a2 + 8);
LABEL_11:
      LODWORD(__src) = *v6;
      goto LABEL_15;
    case 8:
      v7 = (uint64_t *)sub_208206B40(a2 + 8);
LABEL_13:
      __src = *v7;
      goto LABEL_17;
    case 11:
      LODWORD(__src) = *(_DWORD *)sub_208206C28(a2 + 8);
LABEL_15:
      result = sub_207D0B114(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 4, 4);
      break;
    case 12:
      __src = *(_QWORD *)sub_208206D10(a2 + 8);
LABEL_17:
      result = sub_207D0B114(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&v10, 8);
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

void sub_207E3C790(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E3819C((uint64_t)v8, a2);
  sub_207E3C8AC(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3C894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3C8AC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_207E13518((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_207E13518((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20823A149);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_207CAB69C(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_207E0CF98(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20823A149);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20823A149);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_207E3CDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207E3CE18(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_207E38878((uint64_t)v8, a2);
  sub_207E3CF34(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_207E3CF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207E07F28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3CF34(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  sub_207E13518((int *)&v6, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    LOBYTE(v6) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
    v6 = *(_QWORD *)(a1 + 8);
    sub_207E13518((int *)&v6, (_BYTE *)a1, a2 + 56);
  }
  else
  {
    LOBYTE(v6) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
  }
}

void sub_207E3D064(_BYTE *a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;
  _BYTE v8[16];
  void *__p;
  void *v10;
  char *v11;
  _BYTE *v12;

  v8[0] = *(_BYTE *)a2;
  v8[8] = *(_BYTE *)(a2 + 8);
  v10 = 0;
  v11 = 0;
  __p = 0;
  v4 = *(_BYTE **)(a2 + 16);
  v3 = *(_BYTE **)(a2 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[v5];
    __p = v6;
    v11 = &v6[v5];
    memcpy(v6, v4, v5);
    v10 = v7;
  }
  v12 = v8;
  sub_207E3D2B0(a1, &v12);
  sub_207E3D144(v8[0], (uint64_t)v8, (uint64_t)a1);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_207E3D124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207E3D144(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  switch(a1)
  {
    case 0:
      LOBYTE(v5) = *(_BYTE *)sub_2082062F0(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 80))(a3, &v5);
      break;
    case 1:
      LOWORD(v5) = *(_WORD *)sub_2082065D0(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 96))(a3, &v5);
      break;
    case 2:
      LODWORD(v5) = *(_DWORD *)sub_2082066B8(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 104))(a3, &v5);
      break;
    case 3:
      v5 = *(_QWORD *)sub_2082067A0(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 120))(a3, &v5);
      break;
    case 5:
      LOBYTE(v5) = *(_BYTE *)sub_208206888(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 88))(a3, &v5);
      break;
    case 6:
      LOWORD(v5) = *(_WORD *)sub_208206970(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 48))(a3, &v5);
      break;
    case 7:
      LODWORD(v5) = *(_DWORD *)sub_208206A58(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 56))(a3, &v5);
      break;
    case 8:
      v5 = *(_QWORD *)sub_208206B40(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 72))(a3, &v5);
      break;
    case 11:
      LODWORD(v5) = *(_DWORD *)sub_208206C28(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 128))(a3, &v5);
      break;
    case 12:
      v5 = *(_QWORD *)sub_208206D10(a2 + 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 136))(a3, &v5);
      break;
    default:
      sub_2082056D4(a1);
  }
  return result;
}

void sub_207E3D2B0(_BYTE *a1, _BYTE **a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_207E393A8((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_207CA9F48();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C0765F8[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24C0765E0[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_207E3D3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207E3D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3D3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207E3D3E8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_2081F5F4C(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2081F6204((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v12 = 0;
  sub_20809778C(v6, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v7 = 2;
  else
    v7 = v12;
  if (v7 < 2)
  {
    sub_207E3D514((uint64_t)&v12, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v12 = (unint64_t)a3;
    sub_207E3DB44((uint64_t *)a2, (_BYTE **)&v12);
    sub_207E3D6B8(*a3, a2, (uint64_t)a3);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_207E3D514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  char v21;
  char *v22;
  char *v23;
  _DWORD *v24;

  v20[0] = 7;
  v21 = 7;
  v5 = (char *)operator new(4uLL);
  v22 = v5;
  *(_DWORD *)v5 = 0;
  v23 = v5 + 4;
  v24 = v5 + 4;
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v15 = v20;
  sub_207E3DB44((uint64_t *)a2, &v15);
  sub_207E3DD04(v20[0], a2, (uint64_t)v20);
  v7 = v20[0];
  LOBYTE(v15) = v20[0];
  v8 = v21;
  v16 = v21;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v9 = v22;
  v10 = v23 - v22;
  if (v23 == v22)
  {
    v12 = 0;
    v11 = 0;
    *(_BYTE *)a3 = v20[0];
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
    {
LABEL_6:
      *(_QWORD *)(a3 + 24) = v13;
      operator delete(v13);
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v9 = v22;
    }
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v11 = (char *)operator new(v23 - v22);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
    *(_BYTE *)a3 = v7;
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
      goto LABEL_6;
  }
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v12;
  if (v9)
  {
    v23 = v9;
    operator delete(v9);
  }
}

void sub_207E3D66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_207E3D6B8(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_2081FAD2C(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_2081FAE0C(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3DB44(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F6204(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_208097C8C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_208205A04((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E3DC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E3DD04(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_20809778C(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080978D4(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_2081FAD2C(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2081F6204((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_2081FAE0C(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3E190(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, unsigned int a4)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;

  if (a4 < 2)
  {
    sub_207E3E25C((uint64_t)&v10, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_207E17CA8(a2 + 2);
    v11 = 0;
    sub_20820B6F8(a2[6], &v11);
    v7 = v11;
    *a3 = v11;
    sub_207E3E3E0(v7, (uint64_t)a2, (uint64_t)a3);
    v8 = a2[4];
    v9 = *(_QWORD *)(v8 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v8 - 8);
    if (v9)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    a2[4] -= 16;
  }
}

void sub_207E3E25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  char v19;
  char *v20;
  char *v21;
  _DWORD *v22;

  v18[0] = 7;
  v19 = 7;
  v5 = (char *)operator new(4uLL);
  v20 = v5;
  *(_DWORD *)v5 = 0;
  v21 = v5 + 4;
  v22 = v5 + 4;
  v14[0] = 0;
  sub_20820B6F8(*(_QWORD *)(a2 + 48), v14);
  v18[0] = v14[0];
  sub_207E3E6A4(v14[0], a2, (uint64_t)v18);
  v6 = v18[0];
  v14[0] = v18[0];
  v7 = v19;
  v14[8] = v19;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v8 = v20;
  v9 = v21 - v20;
  if (v21 == v20)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v18[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v10 = (char *)operator new(v21 - v20);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v21 = v8;
    operator delete(v8);
  }
}

void sub_207E3E394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_207E3E3E0(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20820B6F8(*(_QWORD *)(a2 + 48), &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20820B88C(*(_QWORD *)(a2 + 48), &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20820BA20(*(_QWORD *)(a2 + 48), &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20820BBEC(*(_QWORD *)(a2 + 48), &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20820B648(*(_QWORD *)(a2 + 48), &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20820B7DC(*(_QWORD *)(a2 + 48), &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20820B970(*(_QWORD *)(a2 + 48), &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20820BB04(*(_QWORD *)(a2 + 48), &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20820BCC8(*(_QWORD *)(a2 + 48), (float *)&v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20820BDF8(*(_QWORD *)(a2 + 48), (double *)&v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3E6A4(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_20820B6F8(*(_QWORD *)(a2 + 48), &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_20820B88C(*(_QWORD *)(a2 + 48), &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_20820BA20(*(_QWORD *)(a2 + 48), &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20820BBEC(*(_QWORD *)(a2 + 48), &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20820B648(*(_QWORD *)(a2 + 48), &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_20820B7DC(*(_QWORD *)(a2 + 48), &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_20820B970(*(_QWORD *)(a2 + 48), &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20820BB04(*(_QWORD *)(a2 + 48), &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20820BCC8(*(_QWORD *)(a2 + 48), (float *)&v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20820BDF8(*(_QWORD *)(a2 + 48), (double *)&v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3E968(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  unint64_t v12;

  sub_2081F5AC0(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2081F5D78((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v12 = 0;
  sub_208097288(v6, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C08F078;
    __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v7 = 2;
  else
    v7 = v12;
  if (v7 < 2)
  {
    sub_207E3EA94((uint64_t)&v12, a2, (uint64_t)a3);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "value_type";
    *(_QWORD *)(a2 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 104) = 1;
    v12 = (unint64_t)a3;
    sub_207E3F0C4((uint64_t *)a2, (_BYTE **)&v12);
    sub_207E3EC38(*a3, a2, (uint64_t)a3);
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 48) = v9 - 8;
  *(_QWORD *)(a2 + 72) = v10 - 8;
}

void sub_207E3EA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  char v21;
  char *v22;
  char *v23;
  _DWORD *v24;

  v20[0] = 7;
  v21 = 7;
  v5 = (char *)operator new(4uLL);
  v22 = v5;
  *(_DWORD *)v5 = 0;
  v23 = v5 + 4;
  v24 = v5 + 4;
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v15 = v20;
  sub_207E3F0C4((uint64_t *)a2, &v15);
  sub_207E3F284(v20[0], a2, (uint64_t)v20);
  v7 = v20[0];
  LOBYTE(v15) = v20[0];
  v8 = v21;
  v16 = v21;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v9 = v22;
  v10 = v23 - v22;
  if (v23 == v22)
  {
    v12 = 0;
    v11 = 0;
    *(_BYTE *)a3 = v20[0];
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
    {
LABEL_6:
      *(_QWORD *)(a3 + 24) = v13;
      operator delete(v13);
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v9 = v22;
    }
  }
  else
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v11 = (char *)operator new(v23 - v22);
    v12 = &v11[v10];
    memcpy(v11, v9, v10);
    *(_BYTE *)a3 = v7;
    *(_BYTE *)(a3 + 8) = v8;
    v14 = (_QWORD *)(a3 + 16);
    v13 = *(void **)(a3 + 16);
    if (v13)
      goto LABEL_6;
  }
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v12;
  if (v9)
  {
    v23 = v9;
    operator delete(v9);
  }
}

void sub_207E3EBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_207E3EC38(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_2081FA584(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_2081FA664(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3F0C4(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2081F5D78(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_207D21A34(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = (char *)operator new(0x118uLL);
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_208215780((uint64_t)v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_208205A04((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)&v8[*(_QWORD *)(v12 - 24)] = *(_QWORD *)(v11 + 64);
  *((_QWORD *)v8 + 3) = MEMORY[0x24BEDB848] + 16;
  *((_QWORD *)v8 + 2) = v13;
  if (v8[111] < 0)
    operator delete(*((void **)v8 + 11));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD027B8](v8 + 128);
  operator delete(v8);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_207E3F208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2082155DC(&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E3F284(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  char *v11;
  __int16 v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  int v20;
  char *v21;
  char v22;
  int v23;
  char *v24;
  __int16 v25;
  int v26;
  char *v27;
  int v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  float v34;
  int v35;
  uint64_t *v36;
  double v37;
  void *v38;
  _QWORD *exception;
  unint64_t v40;

  switch(a1)
  {
    case 0:
      v5 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v5)
        *(_BYTE *)(a2 + 104) = 1;
      v6 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v6, &v40);
      v7 = v40;
      if (v40 >= 0x100)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v7;
      v9 = v8 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      goto LABEL_39;
    case 1:
      v10 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v10)
        *(_BYTE *)(a2 + 104) = 1;
      v11 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v11, &v40);
      v12 = v40;
      if (v40 >= 0x10000)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v12;
      v9 = v8 + 2;
      v13 = 1;
      goto LABEL_38;
    case 2:
      v14 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v14)
        *(_BYTE *)(a2 + 104) = 1;
      v15 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v15, &v40);
      v16 = v40;
      if (HIDWORD(v40))
        goto LABEL_42;
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v16;
      v9 = v8 + 4;
      v13 = 2;
      goto LABEL_38;
    case 3:
      v17 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v17)
        *(_BYTE *)(a2 + 104) = 1;
      v18 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_208097288(v18, &v40);
      v19 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v19;
      v9 = v8 + 8;
      v13 = 3;
      goto LABEL_38;
    case 5:
      v20 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v20)
        *(_BYTE *)(a2 + 104) = 1;
      v21 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v21, &v40);
      v22 = v40;
      if (v40 != (char)v40)
        goto LABEL_42;
      v8 = operator new(1uLL);
      *v8 = v22;
      v9 = v8 + 1;
      v13 = 5;
      goto LABEL_38;
    case 6:
      v23 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v23)
        *(_BYTE *)(a2 + 104) = 1;
      v24 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v24, &v40);
      v25 = v40;
      if (v40 != (__int16)v40)
        goto LABEL_42;
      v8 = operator new(2uLL);
      *(_WORD *)v8 = v25;
      v9 = v8 + 2;
      v13 = 6;
      goto LABEL_38;
    case 7:
      v26 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a2 + 104) = 1;
      v27 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v27, &v40);
      v28 = v40;
      if (v40 != (int)v40)
      {
LABEL_42:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C08F078;
        __cxa_throw(exception, (struct type_info *)&unk_24C08F090, (void (*)(void *))std::exception::~exception);
      }
      v8 = operator new(4uLL);
      *(_DWORD *)v8 = v28;
      v9 = v8 + 4;
      v13 = 7;
      goto LABEL_38;
    case 8:
      v29 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v29)
        *(_BYTE *)(a2 + 104) = 1;
      v30 = (char *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v40 = 0;
      sub_2080973D0(v30, &v40);
      v31 = v40;
      v8 = operator new(8uLL);
      *(_QWORD *)v8 = v31;
      v9 = v8 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      goto LABEL_39;
    case 11:
      v32 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v32)
        *(_BYTE *)(a2 + 104) = 1;
      v33 = (uint64_t *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v34 = sub_2081FA584(v33);
      v8 = operator new(4uLL);
      *(float *)v8 = v34;
      v9 = v8 + 4;
      v13 = 11;
      goto LABEL_38;
    case 12:
      v35 = *(unsigned __int8 *)(a2 + 104);
      *(_QWORD *)(a2 + 88) = "number";
      *(_QWORD *)(a2 + 96) = 6;
      if (!v35)
        *(_BYTE *)(a2 + 104) = 1;
      v36 = (uint64_t *)sub_2081F5D78((uint64_t *)a2);
      ++*(_QWORD *)(a2 + 112);
      v37 = sub_2081FA664(v36);
      v8 = operator new(8uLL);
      *(double *)v8 = v37;
      v9 = v8 + 8;
      v13 = 12;
LABEL_38:
      *(_BYTE *)(a3 + 8) = v13;
LABEL_39:
      v38 = *(void **)(a3 + 16);
      if (v38)
      {
        *(_QWORD *)(a3 + 24) = v38;
        operator delete(v38);
      }
      *(_QWORD *)(a3 + 16) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v9;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3F710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;
  char v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18[8];
  char v19;
  char *v20;
  char *v21;
  _DWORD *v22;

  v18[0] = 7;
  v19 = 7;
  v5 = (char *)operator new(4uLL);
  v20 = v5;
  *(_DWORD *)v5 = 0;
  v21 = v5 + 4;
  v22 = v5 + 4;
  v14[0] = 0;
  sub_208209484(a2, v14);
  v18[0] = v14[0];
  sub_207E3FB5C(v14[0], a2, (uint64_t)v18);
  v6 = v18[0];
  v14[0] = v18[0];
  v7 = v19;
  v14[8] = v19;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v8 = v20;
  v9 = v21 - v20;
  if (v21 == v20)
  {
    v11 = 0;
    v10 = 0;
    *(_BYTE *)a3 = v18[0];
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(_QWORD *)(a3 + 24) = v12;
      operator delete(v12);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v10 = (char *)operator new(v21 - v20);
    v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(_BYTE *)a3 = v6;
    *(_BYTE *)(a3 + 8) = v7;
    v13 = (_QWORD *)(a3 + 16);
    v12 = *(void **)(a3 + 16);
    if (v12)
      goto LABEL_4;
  }
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v11;
  if (v8)
  {
    v21 = v8;
    operator delete(v8);
  }
}

void sub_207E3F848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_207E3F894(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_208209484(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_208209920(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_208209DC8(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20820A270(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20820923C(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_2082096CC(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_208209B74(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20820A01C(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20820A740(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20820A994(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3FB5C(int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_208209484(a2, &v17);
      v4 = v17;
      v5 = operator new(1uLL);
      *v5 = v4;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 0;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 1:
      LOWORD(v17) = 0;
      sub_208209920(a2, &v17);
      v8 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v8;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 2:
      LODWORD(v17) = 0;
      sub_208209DC8(a2, &v17);
      v9 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v9;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 2;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 3:
      v17 = 0;
      sub_20820A270(a2, &v17);
      v10 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v10;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 3;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 5:
      LOBYTE(v17) = 0;
      sub_20820923C(a2, &v17);
      v11 = v17;
      v5 = operator new(1uLL);
      *v5 = v11;
      v6 = v5 + 1;
      *(_BYTE *)(a3 + 8) = 5;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 6:
      LOWORD(v17) = 0;
      sub_2082096CC(a2, &v17);
      v12 = v17;
      v5 = operator new(2uLL);
      *(_WORD *)v5 = v12;
      v6 = v5 + 2;
      *(_BYTE *)(a3 + 8) = 6;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 7:
      LODWORD(v17) = 0;
      sub_208209B74(a2, &v17);
      v13 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v13;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 7;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 8:
      v17 = 0;
      sub_20820A01C(a2, &v17);
      v14 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v14;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 8;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 11:
      LODWORD(v17) = 0;
      sub_20820A740(a2, &v17);
      v15 = v17;
      v5 = operator new(4uLL);
      *(_DWORD *)v5 = v15;
      v6 = v5 + 4;
      *(_BYTE *)(a3 + 8) = 11;
      v7 = *(void **)(a3 + 16);
      if (!v7)
        goto LABEL_22;
      goto LABEL_21;
    case 12:
      v17 = 0;
      sub_20820A994(a2, &v17);
      v16 = v17;
      v5 = operator new(8uLL);
      *(_QWORD *)v5 = v16;
      v6 = v5 + 8;
      *(_BYTE *)(a3 + 8) = 12;
      v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_21:
        *(_QWORD *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_22:
      *(_QWORD *)(a3 + 16) = v5;
      *(_QWORD *)(a3 + 24) = v6;
      *(_QWORD *)(a3 + 32) = v6;
      return;
    default:
      sub_2082056D4(a1);
  }
}

void sub_207E3FE24(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::logic_error *exception;
  char v15;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
    goto LABEL_8;
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 > 1)
  {
    sub_208072ECC(a2);
    v10 = a2[6];
    if (a2[7] > v10)
    {
      v11 = *(unsigned __int8 *)(a2[3] + v10);
      a2[6] = v10 + 1;
      *a3 = v11;
      sub_207E4014C(v11, a2, (uint64_t)a3);
      v12 = a2[12];
      v13 = a2[9];
      a2[6] = *(_QWORD *)(v12 - 8) + *(_QWORD *)(v13 - 8) + 8;
      a2[9] = v13 - 8;
      a2[12] = v12 - 8;
      return;
    }
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_207CA4068(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  sub_207E3FF64((uint64_t)&v15, a2, (uint64_t)a3);
}

void sub_207E3FF3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E3FF50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E3FF64(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  int v7;
  char v8;
  char v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  std::logic_error *exception;
  char v17[8];
  char v18;
  char *v19;
  char *v20;
  _DWORD *v21;

  v17[0] = 7;
  v18 = 7;
  v5 = (char *)operator new(4uLL);
  v19 = v5;
  *(_DWORD *)v5 = 0;
  v20 = v5 + 4;
  v21 = v5 + 4;
  v6 = a2[6];
  if (a2[7] <= v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
  }
  v7 = *(unsigned __int8 *)(a2[3] + v6);
  a2[6] = v6 + 1;
  v17[0] = v7;
  sub_207E406CC(v7, a2, (uint64_t)v17);
  v8 = v17[0];
  v9 = v18;
  v10 = v19;
  v11 = v20 - v19;
  if (v20 == v19)
  {
    v13 = 0;
    v12 = 0;
    *(_BYTE *)a3 = v17[0];
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
    {
LABEL_5:
      *(_QWORD *)(a3 + 24) = v14;
      operator delete(v14);
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      v10 = v19;
    }
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_207CA420C();
    v12 = (char *)operator new(v20 - v19);
    v13 = &v12[v11];
    memcpy(v12, v10, v11);
    *(_BYTE *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v9;
    v15 = (_QWORD *)(a3 + 16);
    v14 = *(void **)(a3 + 16);
    if (v14)
      goto LABEL_5;
  }
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v13;
  if (v10)
  {
    v20 = v10;
    operator delete(v10);
  }
}

void sub_207E400E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207E4014C(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_207CA4068(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_2082056D4(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

void sub_207E40604(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40618(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E4062C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40640(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40654(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40668(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E4067C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E40690(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E406A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E406B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_207E406CC(int a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  std::logic_error *exception;

  switch(a1)
  {
    case 0:
      v4 = a2[6];
      if (a2[7] <= v4)
        goto LABEL_54;
      v5 = *(_BYTE *)(a2[3] + v4);
      a2[6] = v4 + 1;
      v6 = operator new(1uLL);
      *v6 = v5;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 0;
      if (v7)
        goto LABEL_4;
      goto LABEL_5;
    case 1:
      v10 = a2[6];
      v11 = a2[7];
      v12 = v11 >= v10;
      v13 = v11 - v10;
      if (!v12)
        v13 = 0;
      if (v13 <= 1)
        goto LABEL_54;
      v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v14;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 1;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    case 2:
      v16 = a2[6];
      v17 = a2[7];
      v12 = v17 >= v16;
      v18 = v17 - v16;
      if (!v12)
        v18 = 0;
      if (v18 <= 3)
        goto LABEL_54;
      v19 = *(_DWORD *)(a2[3] + v16);
      a2[6] = v16 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v19;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 2;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 3:
      v21 = a2[6];
      v22 = a2[7];
      v12 = v22 >= v21;
      v23 = v22 - v21;
      if (!v12)
        v23 = 0;
      if (v23 <= 7)
        goto LABEL_54;
      v24 = *(_QWORD *)(a2[3] + v21);
      a2[6] = v21 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v24;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 3;
      if (!v25)
        goto LABEL_35;
      goto LABEL_34;
    case 5:
      v26 = a2[6];
      if (a2[7] <= v26)
        goto LABEL_54;
      v27 = *(_BYTE *)(a2[3] + v26);
      a2[6] = v26 + 1;
      v6 = operator new(1uLL);
      *v6 = v27;
      v8 = (_QWORD *)(a3 + 16);
      v7 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 5;
      if (!v7)
        goto LABEL_5;
LABEL_4:
      *(_QWORD *)(a3 + 24) = v7;
      operator delete(v7);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
LABEL_5:
      v9 = v6 + 1;
      break;
    case 6:
      v28 = a2[6];
      v29 = a2[7];
      v12 = v29 >= v28;
      v30 = v29 - v28;
      if (!v12)
        v30 = 0;
      if (v30 <= 1)
        goto LABEL_54;
      v31 = *(_WORD *)(a2[3] + v28);
      a2[6] = v28 + 2;
      v6 = operator new(2uLL);
      *(_WORD *)v6 = v31;
      v8 = (_QWORD *)(a3 + 16);
      v15 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_28:
        *(_QWORD *)(a3 + 24) = v15;
        operator delete(v15);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_29:
      v9 = v6 + 2;
      break;
    case 7:
      v44 = a2[6];
      v45 = a2[7];
      v12 = v45 >= v44;
      v46 = v45 - v44;
      if (!v12)
        v46 = 0;
      if (v46 <= 3)
        goto LABEL_54;
      v47 = *(_DWORD *)(a2[3] + v44);
      a2[6] = v44 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v47;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 7;
      if (!v20)
        goto LABEL_41;
      goto LABEL_40;
    case 8:
      v32 = a2[6];
      v33 = a2[7];
      v12 = v33 >= v32;
      v34 = v33 - v32;
      if (!v12)
        v34 = 0;
      if (v34 <= 7)
        goto LABEL_54;
      v35 = *(_QWORD *)(a2[3] + v32);
      a2[6] = v32 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v35;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 8;
      if (v25)
        goto LABEL_34;
      goto LABEL_35;
    case 11:
      v36 = a2[6];
      v37 = a2[7];
      v12 = v37 >= v36;
      v38 = v37 - v36;
      if (!v12)
        v38 = 0;
      if (v38 <= 3)
        goto LABEL_54;
      v39 = *(_DWORD *)(a2[3] + v36);
      a2[6] = v36 + 4;
      v6 = operator new(4uLL);
      *(_DWORD *)v6 = v39;
      v8 = (_QWORD *)(a3 + 16);
      v20 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 11;
      if (v20)
      {
LABEL_40:
        *(_QWORD *)(a3 + 24) = v20;
        operator delete(v20);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_41:
      v9 = v6 + 4;
      break;
    case 12:
      v40 = a2[6];
      v41 = a2[7];
      v12 = v41 >= v40;
      v42 = v41 - v40;
      if (!v12)
        v42 = 0;
      if (v42 <= 7)
      {
LABEL_54:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_207CA4068(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C06DDA8, MEMORY[0x24BEDAB00]);
      }
      v43 = *(_QWORD *)(a2[3] + v40);
      a2[6] = v40 + 8;
      v6 = operator new(8uLL);
      *(_QWORD *)v6 = v43;
      v8 = (_QWORD *)(a3 + 16);
      v25 = *(void **)(a3 + 16);
      *(_BYTE *)(a3 + 8) = 12;
      if (v25)
      {
LABEL_34:
        *(_QWORD *)(a3 + 24) = v25;
        operator delete(v25);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
      }
LABEL_35:
      v9 = v6 + 8;
      break;
    default:
      sub_2082056D4(a1);
  }
  *v8 = v6;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v9;
}

