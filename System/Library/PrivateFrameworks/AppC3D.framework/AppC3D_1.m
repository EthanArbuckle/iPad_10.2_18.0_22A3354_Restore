void sub_207CD548C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v23, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v25, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_207CD310C(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_207CD4AF4((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_207CD5768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_207CD5794(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x207CD55A0);
    JUMPOUT(0x207CD5570);
  }
  sub_207CD3824(3u);
}

void sub_207CD57F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_207CD581C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_207CD4AF4(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207CD5908(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE25Enqueue"
                     "MessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0"
                                "EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD5974()
{
  return &unk_24C070230;
}

_QWORD *sub_207CD5980(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = off_24C070250;
  v2 = (std::__shared_weak_count *)a1[34];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_207CD2AF0((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_207CD2AF0((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_207CD5A0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = off_24C070250;
  v2 = (std::__shared_weak_count *)a1[34];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_207CD2AF0((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_207CD2AF0((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

_QWORD *sub_207CD5A98(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = operator new(0x118uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = off_24C070250;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_207CD2698((uint64_t)(v2 + 3), a1 + 24);
  v8 = *(_QWORD *)(a1 + 88);
  v3[10] = *(_QWORD *)(a1 + 80);
  v3[11] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)v3 + 8) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)v3 + 9) = v11;
  *((_OWORD *)v3 + 10) = *(_OWORD *)(a1 + 160);
  v12 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)v3 + 7) = v12;
  v13 = *(_QWORD *)(a1 + 184);
  v3[22] = *(_QWORD *)(a1 + 176);
  v3[23] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(_OWORD *)(a1 + 240);
  *((_OWORD *)v3 + 14) = *(_OWORD *)(a1 + 224);
  *((_OWORD *)v3 + 15) = v16;
  *((_DWORD *)v3 + 64) = *(_DWORD *)(a1 + 256);
  v17 = *(_OWORD *)(a1 + 208);
  *((_OWORD *)v3 + 12) = *(_OWORD *)(a1 + 192);
  *((_OWORD *)v3 + 13) = v17;
  v18 = *(_QWORD *)(a1 + 272);
  v3[33] = *(_QWORD *)(a1 + 264);
  v3[34] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  return v3;
}

void sub_207CD5B8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207CD5BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count_vtbl **result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_24C070250;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_207CD2698(a2 + 24, a1 + 24);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 112);
  v13 = *(_OWORD *)(a1 + 128);
  v14 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 160) = v14;
  *(_OWORD *)(a2 + 112) = v12;
  *(_OWORD *)(a2 + 128) = v13;
  v15 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 184) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
  v18 = *(_OWORD *)(a1 + 208);
  v19 = *(_OWORD *)(a1 + 224);
  v20 = *(_OWORD *)(a1 + 240);
  *(_DWORD *)(a2 + 256) = *(_DWORD *)(a1 + 256);
  *(_OWORD *)(a2 + 224) = v19;
  *(_OWORD *)(a2 + 240) = v20;
  *(_OWORD *)(a2 + 208) = v18;
  v21 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a2 + 264) = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a2 + 272) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  return result;
}

void sub_207CD5C9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_207CD5CB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 272);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_207CD2AF0(a1 + 24);
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_207CD2AF0(a1 + 24);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_207CD5D34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[34];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_207CD2AF0((uint64_t)(a1 + 3));
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_207CD2AF0((uint64_t)(a1 + 3));
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

void sub_207CD5DB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v9, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[33];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_207CD310C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_207CD4AF4((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_207CD5EC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_207CD5F3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x207CD5F70);
  JUMPOUT(0x207CD5FA0);
}

uint64_t sub_207CD5FA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE7ProcessE"
                     "RKS6_NSt3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0"
                                "EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE7ProcessERKS6_NSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD6014()
{
  return &unk_24C0702B0;
}

_QWORD *sub_207CD6020(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C0702D0;
  v2 = a1[4];
  a1[3] = &off_24C070640;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207CD6078(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *__p = &off_24C0702D0;
  v2 = __p[4];
  __p[3] = &off_24C070640;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

_QWORD *sub_207CD60D0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C0702D0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C070640;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_207CD6148(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CD6168(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C0702D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C070640;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_207CD61D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_207CD61E8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C070640;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_207CD6238(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C070640;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_207CD6284(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C070640;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CD6338(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD6374(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE9Subscribe"
                     "ENS1_12ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0E"
                                "E9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD63E0()
{
  return &unk_24C070330;
}

_QWORD *sub_207CD63EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C070350;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CD6424(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C070350;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CD645C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C070350;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_207CD64AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C070350;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_207CD64DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CD64EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CD6518(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CD65AC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD65E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE15AddError"
                     "HandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0E"
                                "E15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD6654()
{
  return &unk_24C0703B0;
}

void sub_207CD6660(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_207CD66AC(uint64_t a1)
{
  std::exception_ptr *v2;
  void *v3;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete(v3);
}

uint64_t sub_207CD66FC(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

_QWORD *sub_207CD673C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C070418;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CD6774(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C070418;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CD67AC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C070418;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_207CD6804(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C070418;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_207CD683C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CD684C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CD6878(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_207CA420C();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_207CD6B94((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_207CD6ADC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_207CD3824(3u);
    }
  }
}

void sub_207CD69F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD6A64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE16OutputH"
                     "andlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0"
                                "EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD6AD0()
{
  return &unk_24C070478;
}

void sub_207CD6ADC(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_207CD3824(2u);
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_207CD6B80(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CD6B94(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_207CA420C();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_207CA3AB8();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_207CD6D04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_207CD6DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CD6DD8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x20BD02194](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_207CD6EC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x20BD021A0](&a11);
  JUMPOUT(0x207CD6E20);
}

_QWORD *sub_207CD6F00(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C070498;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CD6F38(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C070498;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CD6F70(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C070498;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_207CD6FC8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C070498;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_207CD7000(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CD7010(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CD703C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_207CD3824(3u);
        sub_207CD6ADC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CD70F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CD7140(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE15ErrorHa"
                     "ndlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0"
                                "EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api17AppCodeUpdateDataES6_vS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CD71AC()
{
  return &unk_24C0704F8;
}

void sub_207CD71BC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CD71D0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CD71E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api17AppCodeUpdateDataES8"
                     "_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api17AppCodeUp"
                                "dateDataES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api17AppCodeUpdateDataES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api17AppCodeUpdateDataES8_vS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CD7258(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CD7284(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CD72B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C070568;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_207CD7308(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CD7398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD73AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CD743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CD7450(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CD7514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CD7528(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CD75EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CD7600(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CD76A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CD76B8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = off_24C0706A8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2081FD738(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C0705D0;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C070608;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C070640;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_207CD789C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = off_24C070678;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = (void *)sub_207CD76B8(v2);
    operator delete(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = (void *)sub_207CD76B8(v7);
    operator delete(v8);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_207CD79B4@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v6;
  __int128 *v7;
  _BOOL4 v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t **v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _BYTE v63[24];
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  std::error_condition v70;
  uint64_t v71[3];
  std::__shared_weak_count *v72;
  __int128 v73;
  char v74;

  kdebug_trace();
  v6 = (__int128 *)operator new(0x18uLL, MEMORY[0x24BEDB6B8]);
  if (v6)
  {
    v7 = v6;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = sub_207CDA164;
    *((_BYTE *)v6 + 16) = 1;
    v8 = *(_BYTE *)(a1 + 136) == 0;
    memset(v63, 0, sizeof(v63));
    v70.__val_ = v8;
    v70.__cat_ = (const std::error_category *)v71;
    memset(v71, 0, sizeof(v71));
    v72 = 0;
    sub_2081FDD20((uint64_t)&v70, (uint64_t *)v63);
    sub_207CE3DF0((uint64_t)&v70, (__int128 *)a1, a2, (uint64_t)v63);
    if (!v69)
    {
      sub_207CCBAD4((std::__shared_weak_count_vtbl **)&v73, (uint64_t)v63);
      *(_OWORD *)v57 = v73;
      v73 = 0uLL;
      v57[16] = 0;
      sub_207CDB2E8((uint64_t *)v57, v7);
      if (v57[16])
      {
        v19 = *(_QWORD *)v57;
        *(_QWORD *)v57 = 0;
        if (v19)
          (*(void (**)(void))&v57[8])();
      }
      else
      {
        v51 = *(std::__shared_weak_count **)&v57[8];
        if (*(_QWORD *)&v57[8])
        {
          v52 = (unint64_t *)(*(_QWORD *)&v57[8] + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      goto LABEL_35;
    }
    sub_207CCFC0C((uint64_t)&v70, (uint64_t)v57);
    v9 = *(_DWORD *)(a1 + 144);
    v10 = (char *)operator new(0xD0uLL);
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = off_24C0706E8;
    *((_OWORD *)v10 + 1) = *(_OWORD *)&v63[8];
    v11 = v66;
    *((_QWORD *)v10 + 4) = v64;
    *(_QWORD *)&v63[8] = 0;
    *(_QWORD *)&v63[16] = 0;
    *(_OWORD *)(v10 + 40) = v65;
    *((_QWORD *)v10 + 7) = v11;
    v64 = 0;
    v65 = 0uLL;
    v66 = 0;
    *((_OWORD *)v10 + 4) = v67;
    v67 = 0uLL;
    v12 = v68;
    v68 = 0;
    *((_QWORD *)v10 + 10) = v12;
    *((_QWORD *)v10 + 11) = off_24C070678;
    v13 = *(_OWORD *)&v57[8];
    *((_QWORD *)v10 + 14) = v58;
    *((_OWORD *)v10 + 6) = v13;
    *(_QWORD *)&v57[8] = 0;
    *(_QWORD *)&v57[16] = 0;
    v14 = v59;
    *((_QWORD *)v10 + 17) = v60;
    *(_OWORD *)(v10 + 120) = v14;
    v58 = 0;
    v59 = 0uLL;
    v60 = 0;
    *((_OWORD *)v10 + 9) = v61;
    v61 = 0uLL;
    v15 = v62;
    v62 = 0;
    *((_QWORD *)v10 + 20) = v15;
    *((_QWORD *)v10 + 24) = 0;
    *((_DWORD *)v10 + 50) = v9;
    *(_QWORD *)&v73 = v10;
    *((_QWORD *)&v73 + 1) = sub_207CDA164;
    v74 = 1;
    sub_207CDB2E8((uint64_t *)&v73, v7);
    if (v74)
    {
      v16 = v73;
      *(_QWORD *)&v73 = 0;
      if (v16)
        (*((void (**)(void))&v73 + 1))();
    }
    else
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
          if (v9 == 1)
            goto LABEL_16;
          goto LABEL_30;
        }
      }
    }
    if (v9 == 1)
    {
LABEL_16:
      v73 = xmmword_20822EBB8;
      v23 = operator new(0x88uLL);
      sub_207CDC934((uint64_t)v23, "AppCodeInputSyncNode", (unint64_t *)&v73, 1, 0.01);
      v24 = **(char ***)v7;
      **(_QWORD **)v7 = v23;
      if (v24)
      {
        v25 = *((_QWORD *)v24 + 16);
        *((_QWORD *)v24 + 16) = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 + 15);
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *(_QWORD *)&v73 = v24 + 48;
        sub_207CDA9D4((void ***)&v73);
        v29 = *(void **)v24;
        if (*(_QWORD *)v24)
        {
          *((_QWORD *)v24 + 1) = v29;
          operator delete(v29);
        }
        operator delete(v24);
      }
      v30 = *(char ***)v7;
      v31 = **(_QWORD **)v7;
      v32 = operator new(0x28uLL);
      *v32 = &off_24C0707E8;
      v32[1] = &off_24C070860;
      v32[2] = v30;
      v32[4] = v32 + 1;
      v33 = *(_QWORD *)(*(_QWORD *)(v31 + 128) + 72);
      *(_QWORD *)&v73 = &off_24C070A60;
      v34 = operator new(0x28uLL);
      *v34 = &off_24C0707E8;
      v34[1] = &off_24C070860;
      v34[4] = v34 + 1;
      v34[2] = v30;
      *((_QWORD *)&v73 + 1) = v34;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v33 + 456) + 16))(v33 + 456, &v73);
      v35 = *((_QWORD *)&v73 + 1);
      *(_QWORD *)&v73 = &off_24C070A60;
      *((_QWORD *)&v73 + 1) = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      (*(void (**)(_QWORD *))(*v32 + 8))(v32);
    }
LABEL_30:
    v36 = *(_QWORD *)(*(_QWORD *)v7 + 80);
    v37 = *(_QWORD *)(*(_QWORD *)v7 + 160);
    *(_QWORD *)&v73 = &off_24C070640;
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v37 + 96) + 16))((_QWORD *)&v73 + 1);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v36 + 120) + 16))(v36 + 120, &v73);
    v38 = *((_QWORD *)&v73 + 1);
    *(_QWORD *)&v73 = &off_24C070640;
    *((_QWORD *)&v73 + 1) = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = *(char ***)v7;
    v40 = *(_QWORD *)(*(_QWORD *)v7 + 160);
    v41 = operator new(0x28uLL);
    *v41 = &off_24C0708F0;
    v41[1] = &off_24C070958;
    v41[2] = v39;
    v41[4] = v41 + 1;
    *(_QWORD *)&v73 = &off_24C070640;
    v42 = operator new(0x28uLL);
    *v42 = &off_24C0708F0;
    v42[1] = &off_24C070958;
    v42[4] = v42 + 1;
    v42[2] = v39;
    *((_QWORD *)&v73 + 1) = v42;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v40 + 120) + 16))(v40 + 120, &v73);
    v43 = *((_QWORD *)&v73 + 1);
    *(_QWORD *)&v73 = &off_24C070640;
    *((_QWORD *)&v73 + 1) = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    (*(void (**)(_QWORD *))(*v41 + 8))(v41);
    sub_207CD789C((uint64_t)v57);
LABEL_35:
    if (v69)
    {
      (**(void (***)(_BYTE *))v63)(v63);
    }
    else
    {
      v47 = *(std::__shared_weak_count **)&v63[8];
      if (*(_QWORD *)&v63[8])
      {
        v48 = (unint64_t *)(*(_QWORD *)&v63[8] + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
    v44 = v72;
    if (!v72)
      goto LABEL_41;
    v45 = (unint64_t *)&v72->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      sub_207CDAB44((uint64_t)&v70.__cat_, v71[0]);
      if (*((_BYTE *)v7 + 16))
        goto LABEL_42;
    }
    else
    {
LABEL_41:
      sub_207CDAB44((uint64_t)&v70.__cat_, v71[0]);
      if (*((_BYTE *)v7 + 16))
      {
LABEL_42:
        *(_QWORD *)a3 = v7;
        *(_BYTE *)(a3 + 16) = 1;
        return kdebug_trace();
      }
    }
    sub_207CCBAD4((std::__shared_weak_count_vtbl **)v63, (uint64_t)v7);
    *(_OWORD *)a3 = *(_OWORD *)v63;
    *(_BYTE *)(a3 + 16) = 0;
    v18 = sub_207CDA04C((uint64_t **)v7);
LABEL_50:
    operator delete(v18);
    return kdebug_trace();
  }
  *(_QWORD *)v63 = operator new(0x20uLL);
  *(_OWORD *)&v63[8] = xmmword_20822E350;
  strcpy(*(char **)v63, "AppCodeContext creation failed");
  *(_QWORD *)&v70.__val_ = 12;
  v70.__cat_ = std::generic_category();
  sub_207D01528(&v70, (uint64_t)v63, (CFErrorRef *)&v73);
  v17 = v73;
  v73 = 0uLL;
  *(_OWORD *)a3 = v17;
  *(_BYTE *)(a3 + 16) = 0;
  if ((v63[23] & 0x80000000) != 0)
  {
    v18 = *(uint64_t ***)v63;
    goto LABEL_50;
  }
  return kdebug_trace();
}

void sub_207CD80AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t *v41;

  v40 = *(_QWORD *)(v38 - 120);
  *(_QWORD *)(v38 - 128) = v37;
  *(_QWORD *)(v38 - 120) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  sub_207CD789C((uint64_t)&a20);
  sub_207CD8310((uint64_t)&__p);
  sub_207CD8390(v38 - 176);
  v41 = sub_207CD83F4(v35);
  MEMORY[0x20BD0289C](v41, MEMORY[0x24BEDB6B8]);
  sub_207CD822C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_207CD81BC()
{
  JUMPOUT(0x207CD8188);
}

void sub_207CD81C4()
{
  JUMPOUT(0x207CD8190);
}

void sub_207CD81CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_207C99D78(v28);
  sub_207CDAB44(v27, *(_QWORD *)(v29 - 160));
  sub_207CD8260(&a27);
  JUMPOUT(0x207CD8198);
}

uint64_t ***sub_207CD81F8(uint64_t ***a1)
{
  uint64_t **v2;
  uint64_t **v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_207CDA04C(v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_207CD822C(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

void **sub_207CD8260(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0)
          operator delete(*(v3 - 5));
        v3 -= 5;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_207CD82D0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C070A60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_207CD8310(uint64_t a1)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 80))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_207CD8390(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_207CDAB44(a1 + 8, *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t *sub_207CD83F4(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*((_BYTE *)a1 + 16))
  {
    v2 = *a1;
    *a1 = 0;
    if (v2)
      ((void (*)(void))a1[1])();
    return a1;
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_207CD847C(std::__shared_weak_count_vtbl *cf@<X3>, uint64_t a2@<X0>, int a3@<W1>, int a4@<W2>, uint64_t *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, std::__shared_weak_count_vtbl *a8@<X7>, uint64_t a9@<X8>)
{
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  OSType PixelFormatType;
  __int32 *v20;
  char *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE __p[56];
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  void *v83[2];
  __int128 v84;
  void *v85[2];
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  char v109;
  std::__shared_weak_count *v110;
  _DWORD v111[2];
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  char v114[16];
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  char v131;
  uint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  std::error_condition v137;
  void *v138[2];
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  std::__shared_weak_count *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  if (!cf)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20822CA00;
    strcpy(*(char **)__p, "Image pixel buffer is null");
    *(_QWORD *)&v137.__val_ = 22;
    v137.__cat_ = std::generic_category();
    sub_207D01528(&v137, (uint64_t)__p, (CFErrorRef *)a9);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return;
  }
  CFRetain(cf);
  v169 = cf;
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v77 = a2;
  v17->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0709D8;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = cf;
  v170 = v17;
  PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
  v20 = wmemchr((__int32 *)"f024N4cv3d3kit11concurrency4NodeIJFNS_7appcode3api17AppCodeUpdateDataENS1_19ChannelLimitedInputIRKNS4_21AppCodeProcessorInputELm1ELb0EEEEFvNS4_15PerformanceModeEEEEE", PixelFormatType, 1uLL);
  v21 = "N4cv3d3kit11concurrency4NodeIJFNS_7appcode3api17AppCodeUpdateDataENS1_19ChannelLimitedInputIRKNS4_21AppCodeProcessorInputELm1ELb0EEEEFvNS4_15PerformanceModeEEEEE";
  if (v20)
    v21 = (char *)v20;
  if (v21
     - "f024N4cv3d3kit11concurrency4NodeIJFNS_7appcode3api17AppCodeUpdateDataENS1_19ChannelLimitedInputIRKNS4_21AppCodePr"
       "ocessorInputELm1ELb0EEEEFvNS4_15PerformanceModeEEEEE" == 4)
  {
    *(_QWORD *)__p = operator new(0x28uLL);
    *(_OWORD *)&__p[8] = xmmword_20822E360;
    strcpy(*(char **)__p, "Invalid image pixel buffer format");
    *(_QWORD *)&v137.__val_ = 22;
    v137.__cat_ = std::generic_category();
    sub_207D01528(&v137, (uint64_t)__p, (CFErrorRef *)a9);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
LABEL_112:
    v75 = (unint64_t *)&v17->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    return;
  }
  if (*(_BYTE *)(a6 + 8))
  {
    sub_207CD8E00((uint64_t)__p, (CVPixelBufferRef)cf, *(__int128 **)a6);
    *(_QWORD *)&v137.__val_ = *(_QWORD *)__p;
    LODWORD(v137.__cat_) = *(_DWORD *)&__p[8];
    *(_OWORD *)v138 = *(_OWORD *)&__p[16];
    memset(&__p[16], 0, 40);
    v140 = *(_OWORD *)&__p[40];
    v139 = *(_QWORD *)&__p[32];
    v141 = v80;
    v80 = 0;
    v145 = v84;
    v144 = *(_OWORD *)v83;
    v143 = v82;
    v142 = v81;
    v148 = v87;
    v147 = v86;
    v146 = *(_OWORD *)v85;
    v150 = v89;
    v89 = 0uLL;
    v155 = v94;
    v152 = v91;
    v151 = v90;
    v149 = v88;
    v156 = v95;
    v154 = v93;
    v153 = v92;
    v158 = v97;
    v157 = v96;
    v162 = v101;
    v161 = v100;
    v159 = v98;
    v160 = v99;
    v163 = v102;
    v164 = v103;
    v22 = v104;
    v103 = 0;
    v104 = 0;
    v165 = v22;
    v166 = v105;
    v167 = v106;
    v168 = 1;
    if (!a8)
      goto LABEL_14;
    goto LABEL_13;
  }
  LOBYTE(v137.__val_) = 0;
  v168 = 0;
  if (a8)
LABEL_13:
    CFRetain(a8);
LABEL_14:
  v135 = a8;
  v23 = (std::__shared_weak_count *)operator new(0x20uLL);
  v23->__shared_owners_ = 0;
  v24 = (unint64_t *)&v23->__shared_owners_;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = a8;
  v136 = v23;
  v111[0] = a3;
  v111[1] = a4;
  v112 = cf;
  v113 = v17;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  v114[0] = 0;
  v131 = 0;
  if (v168)
  {
    sub_207CDAFE4((uint64_t)v114, (uint64_t *)&v137.__val_);
    v124 = v161;
    v125 = v162;
    v120 = v157;
    v121 = v158;
    v122 = v159;
    v123 = v160;
    v126 = v163;
    v127 = v164;
    v128 = v165;
    if (v165)
    {
      v26 = (unint64_t *)&v165->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v129 = v166;
    v130 = v167;
    if (v167)
    {
      v28 = (unint64_t *)&v167->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v131 = 1;
  }
  v30 = *a5;
  v132 = *a5;
  v133 = a8;
  v134 = v23;
  do
    v31 = __ldxr(v24);
  while (__stxr(v31 + 1, v24));
  v32 = a7[1];
  v171 = *a7;
  v172 = v32;
  v173 = a7[2];
  *(_OWORD *)__p = v171;
  *(_OWORD *)&__p[16] = v32;
  *(_OWORD *)&__p[32] = v173;
  *(_QWORD *)&__p[48] = v30;
  LOBYTE(v80) = 1;
  sub_207CDB17C((uint64_t)&v81, (uint64_t)v111);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v77 + 80) + 88) + 16))(*(_QWORD *)(*(_QWORD *)v77 + 80) + 88, __p);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v33 = v110;
  if (v110)
  {
    v34 = (unint64_t *)&v110->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v109)
  {
    v36 = v108;
    if (v108)
    {
      v37 = (unint64_t *)&v108->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v107;
    if (v107)
    {
      v40 = (unint64_t *)&v107->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = v95;
    if (v95)
    {
      v43 = (unint64_t *)&v95->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v85[0])
    {
      v85[1] = v85[0];
      operator delete(v85[0]);
    }
    if (v83[1])
    {
      *(void **)&v84 = v83[1];
      operator delete(v83[1]);
    }
  }
  v45 = (std::__shared_weak_count *)v82;
  if ((_QWORD)v82)
  {
    v46 = (unint64_t *)(v82 + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v134;
  if (v134)
  {
    v49 = (unint64_t *)&v134->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v131)
  {
    v51 = v130;
    if (v130)
    {
      v52 = (unint64_t *)&v130->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = v128;
    if (v128)
    {
      v55 = (unint64_t *)&v128->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v119;
    if (v119)
    {
      v58 = (unint64_t *)&v119->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
  }
  v60 = v113;
  if (v113)
  {
    v61 = (unint64_t *)&v113->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v136;
  if (v136)
  {
    v64 = (unint64_t *)&v136->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v168)
  {
    v66 = v167;
    if (v167)
    {
      v67 = (unint64_t *)&v167->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = v165;
    if (v165)
    {
      v70 = (unint64_t *)&v165->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
    if (*((_QWORD *)&v150 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    if ((_QWORD)v140)
    {
      *((_QWORD *)&v140 + 1) = v140;
      operator delete((void *)v140);
    }
    if (v138[0])
    {
      v138[1] = v138[0];
      operator delete(v138[0]);
    }
  }
  v17 = v170;
  if (v170)
    goto LABEL_112;
}

void sub_207CD8CE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (LOBYTE(STACK[0x3F0]))
    sub_207CDAEE4(v1);
  sub_207C99D78(v2);
  sub_207C99D78((uint64_t)&STACK[0x410]);
  if (LOBYTE(STACK[0x5C8]))
    sub_207CDAEE4(&STACK[0x420]);
  sub_207C99D78(v3 - 176);
  _Unwind_Resume(a1);
}

void sub_207CD8DC4(void *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    CFRelease(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x207CD8DBCLL);
}

void sub_207CD8DE4()
{
  __cxa_end_catch();
  JUMPOUT(0x207CD8DBCLL);
}

void sub_207CD8E00(uint64_t a1, CVPixelBufferRef pixelBuffer, __int128 *a3)
{
  int Width;
  int Height;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11[2];
  void *v12;
  void *v13;
  void *__p;
  void *v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  _OWORD v18[2];

  memset(v18, 0, sizeof(v18));
  v17 = 0uLL;
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  sub_207CDAC68((uint64_t)v11, Width, Height, 6, 4, (char *)v18, &v17, a3);
  sub_207CDAFE4(a1, v11);
  *(_QWORD *)(a1 + 288) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = xmmword_20822E370;
  *(_QWORD *)(a1 + 384) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_207CD8F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CDABE4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CD8F34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 536);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*(_BYTE *)(a1 + 512))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*(_BYTE *)(a1 + 512))
LABEL_6:
    sub_207CDAEE4((_QWORD *)(a1 + 88));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_207CD8FF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 472);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*(_BYTE *)(a1 + 448))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*(_BYTE *)(a1 + 448))
LABEL_6:
    sub_207CDAEE4((_QWORD *)(a1 + 24));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_207CD90AC(std::__shared_weak_count_vtbl *cf@<X3>, uint64_t a2@<X0>, int a3@<W1>, int a4@<W2>, uint64_t *a5@<X4>, uint64_t a6@<X5>, std::__shared_weak_count_vtbl *a7@<X6>, CFErrorRef *a8@<X8>)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  OSType PixelFormatType;
  __int32 *v19;
  char *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  CFErrorRef *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  CFErrorRef *v76;
  void *__p;
  _BYTE v78[24];
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  void *v84[2];
  __int128 v85;
  void *v86[2];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  char v110;
  std::__shared_weak_count *v111;
  _DWORD v112[2];
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  char v115[16];
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  std::__shared_weak_count *v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  char v132;
  uint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  std::error_condition v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  char v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;

  if (!cf)
  {
    __p = operator new(0x20uLL);
    *(_OWORD *)v78 = xmmword_20822CA00;
    strcpy((char *)__p, "Image pixel buffer is null");
    *(_QWORD *)&v138.__val_ = 22;
    v138.__cat_ = std::generic_category();
    sub_207D01528(&v138, (uint64_t)&__p, a8);
    if ((v78[15] & 0x80000000) != 0)
      operator delete(__p);
    return;
  }
  CFRetain(cf);
  v170 = cf;
  v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v76 = a8;
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0709D8;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = cf;
  v171 = v16;
  PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf);
  v19 = wmemchr((__int32 *)"f024N4cv3d3kit11concurrency4NodeIJFNS_7appcode3api17AppCodeUpdateDataENS1_19ChannelLimitedInputIRKNS4_21AppCodeProcessorInputELm1ELb0EEEEFvNS4_15PerformanceModeEEEEE", PixelFormatType, 1uLL);
  v20 = "N4cv3d3kit11concurrency4NodeIJFNS_7appcode3api17AppCodeUpdateDataENS1_19ChannelLimitedInputIRKNS4_21AppCodeProcessorInputELm1ELb0EEEEFvNS4_15PerformanceModeEEEEE";
  if (v19)
    v20 = (char *)v19;
  if (v20
     - "f024N4cv3d3kit11concurrency4NodeIJFNS_7appcode3api17AppCodeUpdateDataENS1_19ChannelLimitedInputIRKNS4_21AppCodePr"
       "ocessorInputELm1ELb0EEEEFvNS4_15PerformanceModeEEEEE" == 4)
  {
    __p = operator new(0x28uLL);
    *(_OWORD *)v78 = xmmword_20822E360;
    strcpy((char *)__p, "Invalid image pixel buffer format");
    *(_QWORD *)&v138.__val_ = 22;
    v138.__cat_ = std::generic_category();
    sub_207D01528(&v138, (uint64_t)&__p, v76);
    if ((v78[15] & 0x80000000) != 0)
      operator delete(__p);
LABEL_117:
    v74 = (unint64_t *)&v16->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    return;
  }
  if (*(_BYTE *)(a6 + 8))
  {
    sub_207CD8E00((uint64_t)&__p, (CVPixelBufferRef)cf, *(__int128 **)a6);
    *(_QWORD *)&v138.__val_ = __p;
    LODWORD(v138.__cat_) = *(_DWORD *)v78;
    v139 = *(_OWORD *)&v78[8];
    *(_QWORD *)&v78[8] = 0;
    *(_QWORD *)&v78[16] = 0;
    v141 = v80;
    v140 = v79;
    v142 = v81;
    v79 = 0;
    v80 = 0uLL;
    v81 = 0;
    v146 = v85;
    v145 = *(_OWORD *)v84;
    v144 = v83;
    v143 = v82;
    v149 = v88;
    v148 = v87;
    v147 = *(_OWORD *)v86;
    v151 = v90;
    v90 = 0uLL;
    v156 = v95;
    v153 = v92;
    v152 = v91;
    v150 = v89;
    v157 = v96;
    v155 = v94;
    v154 = v93;
    v159 = v98;
    v158 = v97;
    v163 = v102;
    v162 = v101;
    v160 = v99;
    v161 = v100;
    v164 = v103;
    v165 = v104;
    v21 = v105;
    v104 = 0;
    v105 = 0;
    v166 = v21;
    v167 = v106;
    v168 = v107;
    v169 = 1;
    if (!a7)
      goto LABEL_14;
    goto LABEL_13;
  }
  LOBYTE(v138.__val_) = 0;
  v169 = 0;
  if (a7)
LABEL_13:
    CFRetain(a7);
LABEL_14:
  v136 = a7;
  v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__shared_owners_ = 0;
  v23 = (unint64_t *)&v22->__shared_owners_;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = a7;
  v137 = v22;
  v112[0] = a3;
  v112[1] = a4;
  v113 = cf;
  v114 = v16;
  do
    v24 = __ldxr(p_shared_owners);
  while (__stxr(v24 + 1, p_shared_owners));
  v115[0] = 0;
  v132 = 0;
  if (v169)
  {
    sub_207CDAFE4((uint64_t)v115, (uint64_t *)&v138.__val_);
    v125 = v162;
    v126 = v163;
    v121 = v158;
    v122 = v159;
    v123 = v160;
    v124 = v161;
    v127 = v164;
    v128 = v165;
    v129 = v166;
    if (v166)
    {
      v25 = (unint64_t *)&v166->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v130 = v167;
    v131 = v168;
    if (v168)
    {
      v27 = (unint64_t *)&v168->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v132 = 1;
  }
  v133 = *a5;
  v134 = a7;
  v135 = v22;
  do
    v29 = __ldxr(v23);
  while (__stxr(v29 + 1, v23));
  v30 = *(_DWORD *)(*(_QWORD *)a2 + 200);
  if (!v30)
  {
    LOBYTE(__p) = 0;
    LOBYTE(v81) = 0;
    sub_207CDB17C((uint64_t)&v82, (uint64_t)v112);
    v31 = v76;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 80) + 88) + 16))(*(_QWORD *)(*(_QWORD *)a2 + 80) + 88, &__p);
    v33 = v111;
    if (v111)
    {
      v34 = (unint64_t *)&v111->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v110)
    {
      v36 = v109;
      if (v109)
      {
        v37 = (unint64_t *)&v109->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = v108;
      if (v108)
      {
        v40 = (unint64_t *)&v108->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v96;
      if (v96)
      {
        v43 = (unint64_t *)&v96->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v86[0])
      {
        v86[1] = v86[0];
        operator delete(v86[0]);
      }
      if (v84[1])
      {
        *(void **)&v85 = v84[1];
        operator delete(v84[1]);
      }
    }
    v45 = (std::__shared_weak_count *)v83;
    if ((_QWORD)v83)
    {
      v46 = (unint64_t *)(v83 + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_59:
    v22 = v135;
    *v31 = 0;
    v31[1] = 0;
    if (!v22)
      goto LABEL_66;
    goto LABEL_62;
  }
  v31 = v76;
  if (v30 == 1)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)a2 + 128) + 72) + 256;
    (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v32 + 16))(v32, v112);
    goto LABEL_59;
  }
  *v76 = 0;
  v76[1] = 0;
LABEL_62:
  v48 = (unint64_t *)&v22->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_66:
  if (v132)
  {
    v50 = v131;
    if (v131)
    {
      v51 = (unint64_t *)&v131->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v129;
    if (v129)
    {
      v54 = (unint64_t *)&v129->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = v120;
    if (v120)
    {
      v57 = (unint64_t *)&v120->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
    if (v116)
    {
      v117 = v116;
      operator delete(v116);
    }
  }
  v59 = v114;
  if (v114)
  {
    v60 = (unint64_t *)&v114->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = v137;
  if (v137)
  {
    v63 = (unint64_t *)&v137->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (v169)
  {
    v65 = v168;
    if (v168)
    {
      v66 = (unint64_t *)&v168->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v68 = v166;
    if (v166)
    {
      v69 = (unint64_t *)&v166->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
    if (*((_QWORD *)&v151 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if ((_QWORD)v141)
    {
      *((_QWORD *)&v141 + 1) = v141;
      operator delete((void *)v141);
    }
    if ((_QWORD)v139)
    {
      *((_QWORD *)&v139 + 1) = v139;
      operator delete((void *)v139);
    }
  }
  v16 = v171;
  if (v171)
    goto LABEL_117;
}

void sub_207CD9988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list __p;

  va_start(__p, a2);
  sub_207CD8F34((uint64_t)__p);
  sub_207CD8FF0((uint64_t)&STACK[0x228]);
  sub_207C99D78((uint64_t)&STACK[0x408]);
  if (LOBYTE(STACK[0x5C0]))
  {
    sub_207CDAEE4(&STACK[0x418]);
    sub_207C99D78(v2 - 104);
    _Unwind_Resume(a1);
  }
  sub_207C99D78(v2 - 104);
  _Unwind_Resume(a1);
}

void sub_207CD9A7C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CD9A90()
{
  __cxa_end_catch();
  JUMPOUT(0x207CD9A98);
}

void sub_207CD9AA4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unsigned __int8 v8;
  _BYTE __p[32];
  __int128 v10;
  uint64_t v11;
  std::error_condition v12;

  if (*(_DWORD *)(*(_QWORD *)a1 + 200) == 1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 128) + 72);
    v6 = *a2;
    v7 = a2[2];
    *(_OWORD *)&__p[16] = a2[1];
    v10 = v7;
    *(_OWORD *)__p = v6;
    v11 = *a3;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v5 + 88) + 16))(v5 + 88, __p);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    v8 = atomic_load((unsigned __int8 *)&qword_253E50C40);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C40))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C38, &dword_207C77000);
      __cxa_guard_release(&qword_253E50C40);
    }
    *(_QWORD *)&v12.__val_ = 2;
    v12.__cat_ = (const std::error_category *)&off_253E50C38;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20822ABB0;
    strcpy(*(char **)__p, "Config is set to camera mode");
    sub_207D01528(&v12, (uint64_t)__p, (CFErrorRef *)a4);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
}

void sub_207CD9BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_207CD9BF4(_BYTE *a1)
{
  _QWORD *v1;
  int v2;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD **v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[64];
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *v46;
  void *v47;
  void *__p;
  void *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  char v53;
  std::__shared_weak_count *v54;
  _QWORD v55[2];
  std::__shared_weak_count *v56;
  char v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v1 = *(_QWORD **)a1;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 200);
  if (v2 != 1)
  {
    if (a1[16])
    {
      if (*v1)
      {
        v4 = *(_QWORD ***)(*(_QWORD *)(*v1 + 128) + 72);
        (*(void (**)(_QWORD *))(*v4[9] + 64))(v4[9]);
        (*(void (**)(_QWORD *))(*v4[30] + 64))(v4[30]);
        (*(void (**)(_QWORD *))(*v4[51] + 64))(v4[51]);
        v1 = *(_QWORD **)a1;
      }
      v5 = v1[10];
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 64))(*(_QWORD *)(v5 + 72));
      (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 64))(*(_QWORD *)(v5 + 240));
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 160) + 72);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    }
    v65 = 0;
    v56 = 0;
    v55[0] = 0;
    v55[1] = 0;
    v57 = 0;
    v68 = 0;
    v66 = 0;
    v67 = 0;
    v43[0] = 0;
    v43[56] = 0;
    sub_207CDB17C((uint64_t)&v44, (uint64_t)v55);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 80) + 88) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 80) + 88, v43);
    v7 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v53)
    {
      v10 = v52;
      if (v52)
      {
        v11 = (unint64_t *)&v52->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = v51;
      if (v51)
      {
        v14 = (unint64_t *)&v51->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = v50;
      if (v50)
      {
        v17 = (unint64_t *)&v50->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (__p)
      {
        v49 = __p;
        operator delete(__p);
      }
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
    }
    v19 = v45;
    if (v45)
    {
      v20 = (unint64_t *)&v45->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v68;
    if (v68)
    {
      v23 = (unint64_t *)&v68->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v65)
    {
      v25 = v64;
      if (v64)
      {
        v26 = (unint64_t *)&v64->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v63;
      if (v63)
      {
        v29 = (unint64_t *)&v63->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v62;
      if (v62)
      {
        v32 = (unint64_t *)&v62->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
    }
    v34 = v56;
    if (v56)
    {
      v35 = (unint64_t *)&v56->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (a1[16])
    {
      v37 = *(_QWORD **)a1;
      v38 = **(_QWORD **)a1;
      if (v38)
      {
        v39 = *(_QWORD ***)(*(_QWORD *)(v38 + 128) + 72);
        (*(void (**)(_QWORD *))(*v39[9] + 64))(v39[9]);
        (*(void (**)(_QWORD *))(*v39[30] + 64))(v39[30]);
        (*(void (**)(_QWORD *))(*v39[51] + 64))(v39[51]);
        v37 = *(_QWORD **)a1;
      }
      v40 = v37[10];
      (*(void (**)(_QWORD))(**(_QWORD **)(v40 + 72) + 64))(*(_QWORD *)(v40 + 72));
      (*(void (**)(_QWORD))(**(_QWORD **)(v40 + 240) + 64))(*(_QWORD *)(v40 + 240));
      v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 160) + 72);
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 64))(v41);
    }
  }
  return v2 != 1;
}

void sub_207CDA01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CD8F34((uint64_t)&a9);
  sub_207CD8FF0((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

void sub_207CDA038(_Unwind_Exception *a1)
{
  sub_207CD8FF0((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t **sub_207CDA04C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (*((_BYTE *)a1 + 16))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = *(_QWORD ***)(*(_QWORD *)(v3 + 128) + 72);
      (*(void (**)(_QWORD *))(*v4[9] + 64))(v4[9]);
      (*(void (**)(_QWORD *))(*v4[30] + 64))(v4[30]);
      (*(void (**)(_QWORD *))(*v4[51] + 64))(v4[51]);
      v2 = *a1;
    }
    v5 = v2[10];
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 64))(*(_QWORD *)(v5 + 72));
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 64))(*(_QWORD *)(v5 + 240));
    v6 = *(_QWORD *)((*a1)[20] + 72);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    if (*((_BYTE *)a1 + 16))
    {
      v7 = *a1;
      *a1 = 0;
      if (v7)
        ((void (*)(void))a1[1])();
      return a1;
    }
  }
  v9 = (std::__shared_weak_count *)a1[1];
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_207CDA164(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void **v11;

  if (!a1)
    return;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_207CD789C((uint64_t)(a1 + 11));
  sub_207CDA264((uint64_t)(a1 + 1));
  v5 = (char *)*a1;
  *a1 = 0;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 16);
    *((_QWORD *)v5 + 16) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 15);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v11 = (void **)(v5 + 48);
    sub_207CDA9D4(&v11);
    v10 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      *((_QWORD *)v5 + 1) = v10;
      operator delete(v10);
    }
    operator delete(v5);
  }
  operator delete(a1);
}

uint64_t sub_207CDA264(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = off_24C0706E8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_207CDA3AC(v2 + 168);
    v3 = (void *)sub_207CDA74C(v2);
    operator delete(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_207CDA3AC(v7 + 168);
    v8 = (void *)sub_207CDA74C(v7);
    operator delete(v8);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_207CDA394(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CDA264(a1);
  operator delete(v1);
}

uint64_t sub_207CDA3AC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = off_24C070718;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2081FD738(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C0705D0;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C070A28;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C070748;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_207CDA590(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C070A28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_207CDA5C8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C070748;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_207CDA608(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CDA3AC(a1);
  operator delete(v1);
}

void sub_207CDA61C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C070A28;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CDA654(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CDA6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CDA6F8(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_24C070748;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_207CDA738(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_207CDA74C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = off_24C070780;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2081FD738(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C0705D0;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C070608;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C0707B0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_207CDA930(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0707B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_207CDA970(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CDA74C(a1);
  operator delete(v1);
}

void sub_207CDA984(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_24C0707B0;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_207CDA9C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_207CDA9D4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
      return;
    }
    while (1)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      if (*(v4 - 32))
        goto LABEL_10;
LABEL_11:
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 58);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 -= 480;
      if (v4 == v2)
      {
        v12 = **a1;
        v1[1] = v2;
        operator delete(v12);
        return;
      }
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!*(v4 - 32))
      goto LABEL_11;
LABEL_10:
    sub_207CDAEE4((_QWORD *)v4 - 57);
    goto LABEL_11;
  }
}

void sub_207CDAAF4(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_24C070A60;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_207CDAB34(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_207CDAB44(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_207CDAB44(a1, *(_QWORD *)a2);
    sub_207CDAB44(a1, *(_QWORD *)(a2 + 8));
    v4 = *(std::__shared_weak_count **)(a2 + 64);
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
LABEL_6:
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_7:
        operator delete((void *)a2);
        return;
      }
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

_QWORD *sub_207CDABE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;

  v2 = (std::__shared_weak_count *)a1[24];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[5];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[5];
  if (v5)
  {
LABEL_6:
    a1[6] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_207CDAC68(uint64_t a1, int a2, int a3, int a4, uint64_t a5, char *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  v13 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v14 = operator new(0x20uLL);
  *v13 = v14;
  *v14 = 0u;
  v14[1] = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v14 + 2;
  *(_QWORD *)(a1 + 32) = v14 + 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v15 = *a7;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = v15;
  v16 = a8[2];
  v17 = a8[3];
  v18 = *((_QWORD *)a8 + 8);
  v20 = *a8;
  v19 = a8[1];
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 144) = v16;
  *(_OWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 280) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 248) = xmmword_20822E5B8;
  *(_OWORD *)(a1 + 264) = unk_20822E5C8;
  *(_OWORD *)(a1 + 216) = xmmword_20822E598;
  *(_OWORD *)(a1 + 232) = unk_20822E5A8;
  *(_OWORD *)(a1 + 200) = 0u;
  sub_207CDADA0(v13, a6, &a6[8 * a5], (8 * a5) >> 3);
  return a1;
}

void sub_207CDAD5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;

  sub_207C99D78(v3);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 48) = v6;
    operator delete(v6);
    v7 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v7 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 24) = v7;
  operator delete(v7);
  _Unwind_Resume(a1);
}

_QWORD *sub_207CDADA0(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_207CA420C();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_207CDAEE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  void *v12;

  v2 = (std::__shared_weak_count *)a1[52];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[24];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    v11 = (void *)a1[5];
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (void *)a1[5];
  if (v11)
  {
LABEL_16:
    a1[6] = v11;
    operator delete(v11);
  }
LABEL_17:
  v12 = (void *)a1[2];
  if (v12)
  {
    a1[3] = v12;
    operator delete(v12);
  }
  return a1;
}

uint64_t sub_207CDAFE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_BYTE *)a2[2];
  v5 = (_BYTE *)a2[3];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_207CA420C();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 24) = v9;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = (_BYTE *)a2[5];
  v10 = (_BYTE *)a2[6];
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_207CA420C();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 48) = v14;
  }
  v15 = *((_OWORD *)a2 + 4);
  v16 = *((_OWORD *)a2 + 5);
  v17 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  v18 = *((_OWORD *)a2 + 8);
  v19 = *((_OWORD *)a2 + 9);
  v20 = *((_OWORD *)a2 + 10);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_OWORD *)(a1 + 144) = v19;
  *(_OWORD *)(a1 + 160) = v20;
  *(_OWORD *)(a1 + 128) = v18;
  v21 = a2[24];
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_QWORD *)(a1 + 192) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v24;
  v25 = *(_OWORD *)(a2 + 29);
  v26 = *(_OWORD *)(a2 + 31);
  v27 = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_OWORD *)(a1 + 264) = v27;
  *(_OWORD *)(a1 + 248) = v26;
  *(_OWORD *)(a1 + 232) = v25;
  return a1;
}

void sub_207CDB148(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CDB17C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  if (*(_BYTE *)(a2 + 448))
  {
    sub_207CDAFE4(a1 + 24, (uint64_t *)(a2 + 24));
    v7 = *(_OWORD *)(a2 + 312);
    v8 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v8;
    *(_OWORD *)(a1 + 312) = v7;
    v9 = *(_OWORD *)(a2 + 360);
    v10 = *(_OWORD *)(a2 + 376);
    v11 = *(_OWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 376) = v10;
    *(_OWORD *)(a1 + 392) = v11;
    *(_OWORD *)(a1 + 360) = v9;
    v12 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    *(_BYTE *)(a1 + 448) = 1;
  }
  v18 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v18;
  v19 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 472) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  return a1;
}

void sub_207CDB290(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(v1 + 448))
    sub_207CDAEE4(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207CDB2E8(uint64_t *a1, __int128 *a2)
{
  BOOL v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;

  if (*((_BYTE *)a1 + 16))
    v4 = *((_BYTE *)a2 + 16) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v9 = *a1;
    *a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v9;
    v10 = a1[1];
    a1[1] = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v10;
    return;
  }
  if (*((_BYTE *)a1 + 16))
  {
    if (!*((_BYTE *)a2 + 16))
    {
      v5 = *a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v6 = *a1;
      *a1 = 0;
      *(_QWORD *)a2 = v6;
      *((_QWORD *)a2 + 1) = a1[1];
      v7 = *a1;
      *a1 = 0;
      if (v7)
      {
        v23 = v5;
        ((void (*)(void))a1[1])();
        v8 = *((_BYTE *)a2 + 16);
        v5 = v23;
      }
      else
      {
        v8 = 0;
      }
      *(_OWORD *)a1 = v5;
      v22 = *((_BYTE *)a1 + 16);
      *((_BYTE *)a1 + 16) = v8;
      *((_BYTE *)a2 + 16) = v22;
      return;
    }
  }
  else if (*((_BYTE *)a2 + 16))
  {
    v11 = *(_QWORD *)a2;
    v12 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a2 = 0;
    *a2 = *(_OWORD *)a1;
    *a1 = 0;
    a1[1] = 0;
    v13 = *((_BYTE *)a2 + 16);
    *a1 = v11;
    a1[1] = v12;
    *((_BYTE *)a1 + 16) = v13;
    *((_BYTE *)a2 + 16) = 0;
    return;
  }
  v14 = *(_OWORD *)a1;
  *a1 = 0;
  a1[1] = 0;
  v15 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v16 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v15;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      v24 = v14;
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v14 = v24;
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  *a2 = v14;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

uint64_t sub_207CDB49C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_207CDB4EC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_207CDB53C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = operator new(0x28uLL);
  *v4 = &off_24C0707E8;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_207CDB5CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CDB5E0()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_208216974);
  abort();
}

void sub_207CDB61C()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_208216974);
  abort();
}

uint64_t sub_207CDB658()
{
  return 1;
}

uint64_t sub_207CDB664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_207CA408C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

_QWORD *sub_207CDB6E4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C070860;
  result[1] = v3;
  return result;
}

uint64_t sub_207CDB718(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C070860;
  a2[1] = v2;
  return result;
}

void sub_207CDB734(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (*a2)
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 88) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 88);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CDB7C8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CDB804(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CDB870()
{
  return &unk_24C0708D0;
}

uint64_t sub_207CDB87C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_207CDB8CC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_207CDB91C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = operator new(0x28uLL);
  *v4 = &off_24C0708F0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_207CDB9AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CDB9C0()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_208216974);
  abort();
}

void sub_207CDB9FC()
{
  sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_208216974);
  abort();
}

uint64_t sub_207CDBA38()
{
  return 1;
}

uint64_t sub_207CDBA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_207CA408C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

_QWORD *sub_207CDBAC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C070958;
  result[1] = v3;
  return result;
}

uint64_t sub_207CDBAF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C070958;
  a2[1] = v2;
  return result;
}

uint64_t sub_207CDBB14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 192);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_207CDBB30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d7appcode3api14AppCodeContextC1ERKNS1_6ConfigERKNS1_18AppCodeCalibrationEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CDBB9C()
{
  return &unk_24C0709B8;
}

void sub_207CDBBAC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CDBBC0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CDBBE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CDBC54(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CDBC68(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CDBC88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK14__CFDictionaryEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CDBCF8(char ***a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, char *a8@<X7>, _QWORD *a9@<X8>, unint64_t a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, __int128 *a14, __int128 *a15, unsigned int a16)
{
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41[2];
  void *v42;
  void *v43;
  void *__p;
  void *v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (a16 >= 3)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/AppCodeAPI/src/AppCodeContextTypes.cpp", 43, (uint64_t)"", 0, (uint64_t)"Unexpected LensDistortionModel value", 36, (void (*)(void **))sub_208216974);
    abort();
  }
  v21 = dword_20822EBA8[a16];
  v62 = a10;
  v63 = a12;
  v64 = 0;
  v65 = a11;
  v66 = a13;
  v67 = 0;
  v68 = 0;
  v69 = 0x3FF0000000000000;
  sub_207CDAC68((uint64_t)v56, a5, a6, v21, a7, a8, a14, &v62);
  sub_207CDAFE4((uint64_t)v41, v56);
  v22 = a15[1];
  v47 = *a15;
  v48 = v22;
  v23 = a15[2];
  v24 = a15[3];
  v25 = a15[5];
  v51 = a15[4];
  v52 = v25;
  v49 = v23;
  v50 = v24;
  v53 = 0xBFF0000000000000;
  v54 = 0u;
  v55 = 0u;
  sub_20810D4E4(*a1, a3);
  v26 = **a1;
  v27 = (*a1)[1];
  if (v26 != v27)
  {
    while (*(_DWORD *)v26 != a3)
    {
      v26 += 856;
      if (v26 == v27)
      {
        v28 = 0;
        goto LABEL_9;
      }
    }
  }
  if (v26 == v27)
    v28 = 0;
  else
    v28 = (uint64_t)v26;
LABEL_9:
  if (a2 >= 2)
  {
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/AppCodeAPI/src/AppCodeContextTypes.cpp", 59, (uint64_t)"", 0, (uint64_t)"Unexpected CameraMode value", 27, (void (*)(void **))sub_208216974);
    abort();
  }
  sub_20810D3E8(v28, v41, a2, a4);
  *a9 = 0;
  a9[1] = 0;
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v38 = v61;
  if (v61)
  {
    v39 = (unint64_t *)&v61->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
}

void sub_207CDBFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  sub_207CDAEE4(&a9);
  sub_207CDABE4(&a62);
  _Unwind_Resume(a1);
}

const char *sub_207CDC004()
{
  return "Context";
}

void sub_207CDC010(int a1@<W1>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  switch(a1)
  {
    case 1:
      *(_BYTE *)(a2 + 23) = 5;
      *(_DWORD *)a2 = 1869771333;
      *(_BYTE *)(a2 + 4) = 114;
      *(_BYTE *)(a2 + 5) = 0;
      break;
    case 2:
      v3 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v3;
      *(_OWORD *)(a2 + 8) = xmmword_20822CF20;
      strcpy(v3, "API not supported by specified configuration");
      break;
    case 3:
      v4 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_20822EB60;
      strcpy(v4, "Feature not supported on current build");
      break;
    case 4:
      v5 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_20822EB50;
      strcpy(v5, "Update dropped due to flush message");
      break;
    case 5:
      v6 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_20822AB90;
      strcpy(v6, "Context could not be initialized");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "Unknown Error");
      break;
  }
}

uint64_t sub_207CDC1B4(uint64_t a1, unsigned int a2)
{
  return a2;
}

BOOL sub_207CDC1C4(uint64_t a1, int a2, uint64_t a3)
{
  return *(_DWORD *)a3 == a2 && *(_QWORD *)(a3 + 8) == a1;
}

BOOL sub_207CDC1DC(uint64_t a1, uint64_t a2, int a3)
{
  return *(_DWORD *)a2 == a3 && *(_QWORD *)(a2 + 8) == a1;
}

void sub_207CDC1F4(std::error_category *a1)
{
  void *v1;

  std::error_category::~error_category(a1);
  operator delete(v1);
}

uint64_t sub_207CDC208(uint64_t result, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;

  v6 = a2;
  v7 = result;
  v9 = result + 16;
  v8 = *(_QWORD *)(result + 16);
  v10 = *(_QWORD **)result;
  if (0x77A04C8F8D28AC43 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v10)
    {
      v11 = *(_QWORD **)(result + 8);
      v12 = *(_QWORD **)result;
      if (v11 != v10)
      {
        do
        {
          sub_207CDAEE4(v11 - 53);
          sub_207CDAEE4(v11 - 106);
          v11 -= 107;
        }
        while (v11 != v10);
        v12 = *(_QWORD **)v7;
      }
      *(_QWORD *)(v7 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (a4 > 0x4C8F8D28AC42FDLL)
      goto LABEL_29;
    v13 = 0x77A04C8F8D28AC43 * (v8 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= a4)
      v14 = a4;
    v15 = v13 >= 0x2647C69456217ELL ? 0x4C8F8D28AC42FDLL : v14;
    if (v15 > 0x4C8F8D28AC42FDLL)
LABEL_29:
      sub_207CA420C();
    v16 = 856 * v15;
    v17 = (char *)operator new(856 * v15);
    *(_QWORD *)v7 = v17;
    *(_QWORD *)(v7 + 8) = v17;
    *(_QWORD *)(v7 + 16) = &v17[v16];
    result = sub_207CDC47C(v9, (uint64_t)v6, a3, (uint64_t)v17);
LABEL_20:
    *(_QWORD *)(v7 + 8) = result;
    return result;
  }
  v18 = *(_QWORD **)(result + 8);
  if (0x77A04C8F8D28AC43 * (v18 - v10) < a4)
  {
    v19 = (uint64_t)&a2[v18 - v10];
    if (v18 != v10)
    {
      do
      {
        *v10 = *v6;
        sub_207CDC6A4((uint64_t)(v10 + 1), v6 + 1);
        sub_207CDC6A4((uint64_t)(v10 + 54), v6 + 54);
        v6 += 107;
        v10 += 107;
      }
      while (v6 != (_QWORD *)v19);
      v10 = *(_QWORD **)(v7 + 8);
    }
    result = sub_207CDC47C(v9, v19, a3, (uint64_t)v10);
    goto LABEL_20;
  }
  if (a2 != (_QWORD *)a3)
  {
    v20 = *(_QWORD **)result;
    do
    {
      *v10 = *v6;
      sub_207CDC6A4((uint64_t)(v10 + 1), v6 + 1);
      result = sub_207CDC6A4((uint64_t)(v10 + 54), v6 + 54);
      v20 += 107;
      v6 += 107;
      v10 += 107;
    }
    while (v6 != (_QWORD *)a3);
    v18 = *(_QWORD **)(v7 + 8);
    if (v18 == v20)
      goto LABEL_26;
    goto LABEL_25;
  }
  v20 = *(_QWORD **)result;
  if (v18 != v10)
  {
    do
    {
LABEL_25:
      sub_207CDAEE4(v18 - 53);
      result = (uint64_t)sub_207CDAEE4(v18 - 106);
      v18 -= 107;
    }
    while (v18 != v20);
  }
LABEL_26:
  *(_QWORD *)(v7 + 8) = v20;
  return result;
}

void sub_207CDC46C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_207CDC474(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_207CDC47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;

  v4 = a4;
  v30 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)v6;
      sub_207CDAFE4(v4 + 8, (uint64_t *)(v6 + 8));
      v7 = *(_OWORD *)(v6 + 296);
      v8 = *(_OWORD *)(v6 + 328);
      *(_OWORD *)(v4 + 312) = *(_OWORD *)(v6 + 312);
      *(_OWORD *)(v4 + 328) = v8;
      *(_OWORD *)(v4 + 296) = v7;
      v9 = *(_OWORD *)(v6 + 344);
      v10 = *(_OWORD *)(v6 + 360);
      v11 = *(_OWORD *)(v6 + 376);
      *(_QWORD *)(v4 + 392) = *(_QWORD *)(v6 + 392);
      *(_OWORD *)(v4 + 360) = v10;
      *(_OWORD *)(v4 + 376) = v11;
      *(_OWORD *)(v4 + 344) = v9;
      *(_QWORD *)(v4 + 400) = *(_QWORD *)(v6 + 400);
      v12 = *(_QWORD *)(v6 + 408);
      *(_QWORD *)(v4 + 408) = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      *(_QWORD *)(v4 + 416) = *(_QWORD *)(v6 + 416);
      v15 = *(_QWORD *)(v6 + 424);
      *(_QWORD *)(v4 + 424) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      sub_207CDAFE4(v4 + 432, (uint64_t *)(v6 + 432));
      v18 = *(_OWORD *)(v6 + 720);
      v19 = *(_OWORD *)(v6 + 752);
      *(_OWORD *)(v4 + 736) = *(_OWORD *)(v6 + 736);
      *(_OWORD *)(v4 + 752) = v19;
      *(_OWORD *)(v4 + 720) = v18;
      v20 = *(_OWORD *)(v6 + 768);
      v21 = *(_OWORD *)(v6 + 784);
      v22 = *(_OWORD *)(v6 + 800);
      *(_QWORD *)(v4 + 816) = *(_QWORD *)(v6 + 816);
      *(_OWORD *)(v4 + 784) = v21;
      *(_OWORD *)(v4 + 800) = v22;
      *(_OWORD *)(v4 + 768) = v20;
      *(_QWORD *)(v4 + 824) = *(_QWORD *)(v6 + 824);
      v23 = *(_QWORD *)(v6 + 832);
      *(_QWORD *)(v4 + 832) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      *(_QWORD *)(v4 + 840) = *(_QWORD *)(v6 + 840);
      v26 = *(_QWORD *)(v6 + 848);
      *(_QWORD *)(v4 + 848) = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v6 += 856;
      v4 = v30 + 856;
      v30 += 856;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_207CDC610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_207CDAEE4(v9);
  sub_207CDC640((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CDC62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CDC640((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CDC640(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    for (i = *v3; v4 != i; v4 -= 856)
    {
      sub_207CDAEE4((_QWORD *)(v4 - 424));
      sub_207CDAEE4((_QWORD *)(v4 - 848));
    }
  }
  return a1;
}

uint64_t sub_207CDC6A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if ((uint64_t *)a1 != a2)
  {
    sub_207CDADA0((_QWORD *)(a1 + 16), (char *)a2[2], (char *)a2[3], (a2[3] - a2[2]) >> 3);
    sub_207CDADA0((_QWORD *)(a1 + 40), (char *)a2[5], (char *)a2[6], (a2[6] - a2[5]) >> 3);
  }
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = *((_OWORD *)a2 + 8);
  v9 = *((_OWORD *)a2 + 9);
  v10 = *((_OWORD *)a2 + 10);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  v12 = a2[23];
  v11 = a2[24];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a1 + 192) = v11;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v18;
  v19 = *(_OWORD *)(a2 + 29);
  v20 = *(_OWORD *)(a2 + 31);
  v21 = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_OWORD *)(a1 + 264) = v21;
  *(_OWORD *)(a1 + 248) = v20;
  *(_OWORD *)(a1 + 232) = v19;
  v23 = *((_OWORD *)a2 + 22);
  v22 = *((_OWORD *)a2 + 23);
  v24 = *((_OWORD *)a2 + 21);
  *(_QWORD *)(a1 + 384) = a2[48];
  *(_OWORD *)(a1 + 352) = v23;
  *(_OWORD *)(a1 + 368) = v22;
  *(_OWORD *)(a1 + 336) = v24;
  v25 = *((_OWORD *)a2 + 18);
  v26 = *((_OWORD *)a2 + 20);
  *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 320) = v26;
  *(_OWORD *)(a1 + 288) = v25;
  v28 = a2[49];
  v27 = a2[50];
  if (v27)
  {
    v29 = (unint64_t *)(v27 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 400);
  *(_QWORD *)(a1 + 392) = v28;
  *(_QWORD *)(a1 + 400) = v27;
  if (!v31)
    goto LABEL_18;
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v35 = a2[51];
    v34 = a2[52];
    if (!v34)
      goto LABEL_21;
  }
  else
  {
LABEL_18:
    v35 = a2[51];
    v34 = a2[52];
    if (!v34)
      goto LABEL_21;
  }
  v36 = (unint64_t *)(v34 + 8);
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
LABEL_21:
  v38 = *(std::__shared_weak_count **)(a1 + 416);
  *(_QWORD *)(a1 + 408) = v35;
  *(_QWORD *)(a1 + 416) = v34;
  if (!v38)
    return a1;
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
    return a1;
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  return a1;
}

void sub_207CDC8C0(void **__p)
{
  char *v2;
  char *v3;
  void *v4;

  if (__p)
  {
    v2 = (char *)*__p;
    if (*__p)
    {
      v3 = (char *)__p[1];
      v4 = *__p;
      if (v3 != v2)
      {
        do
        {
          sub_207CDAEE4((_QWORD *)v3 - 53);
          sub_207CDAEE4((_QWORD *)v3 - 106);
          v3 -= 856;
        }
        while (v3 != v2);
        v4 = *__p;
      }
      __p[1] = v2;
      operator delete(v4);
    }
    operator delete(__p);
  }
}

uint64_t sub_207CDC934(uint64_t a1, const char *a2, unint64_t *a3, __int16 a4, double a5)
{
  unint64_t v10;
  char *v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  size_t v44;
  size_t v45;
  __int128 *p_dst;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  void (__cdecl *v51)(std::__shared_weak_count *__hidden);
  unint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  void (__cdecl *v54)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *p_shared_weak_owners;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void (__cdecl *v90)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  void (__cdecl *v126)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  unint64_t *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  char *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  void **v193;
  const char *v194;
  unint64_t v195;
  char *v196;
  __int128 __dst;
  unint64_t v198;
  _DWORD v199[2];
  _QWORD v200[7];
  __int128 v201;
  __int128 v202;
  uint64_t (**v203)();
  __int128 v204;
  uint64_t v205;
  uint64_t (**v206)();
  __int128 v207;
  uint64_t (**v208)();
  __int128 v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  _QWORD v212[7];
  __int128 v213;
  __int128 v214;
  uint64_t (**v215)();
  __int128 v216;
  uint64_t v217;
  uint64_t (**v218)();
  __int128 v219;
  uint64_t (**v220)();
  __int128 v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  _QWORD v224[7];
  __int128 v225;
  __int128 v226;
  uint64_t (**v227)();
  __int128 v228;
  uint64_t v229;
  uint64_t (**v230)();
  __int128 v231;
  uint64_t (**v232)();
  __int128 v233;
  _QWORD *v234;
  std::__shared_weak_count *v235;
  __int128 v236;
  __int128 v237;
  _QWORD v238[4];
  _QWORD v239[4];
  __int128 v240;
  _QWORD v241[2];
  _QWORD v242[2];
  __int128 v243;
  uint64_t v244;

  v244 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v10 = *a3;
  if (*a3)
  {
    if (v10 >= 0x492492492492493)
      sub_207CA420C();
    v11 = (char *)operator new(56 * v10);
    v12 = 56 * ((56 * v10 - 56) / 0x38) + 56;
    bzero(v11, v12);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = &v11[v12];
    *(_QWORD *)(a1 + 16) = &v11[56 * v10];
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v13 = a3[1];
  if (!v13)
    goto LABEL_46;
  memset(v212, 0, 24);
  if (v13 >= 0x88888888888889)
    sub_207CA420C();
  v194 = a2;
  v224[4] = &v212[2];
  v14 = (char *)operator new(480 * v13);
  v193 = (void **)(a1 + 48);
  bzero(v14, 480 * ((480 * v13 - 480) / 0x1E0) + 480);
  v212[0] = v14;
  v212[1] = &v14[480 * ((480 * v13 - 480) / 0x1E0) + 480];
  v212[2] = &v14[480 * v13];
  memset(v224, 0, 32);
  sub_207CDE3C8((uint64_t)v224);
  v15 = 0;
  v16 = v14;
  v17 = *(_QWORD *)(a1 + 88);
  if (v17 >= v13)
    v18 = v13;
  else
    v18 = *(_QWORD *)(a1 + 88);
  v195 = v18;
  v19 = v17 == 0;
  while (v19)
  {
    if (v17 <= v13)
      goto LABEL_26;
LABEL_16:
    v20 = *(_QWORD *)(a1 + 48);
    v21 = (*(_QWORD *)(a1 + 72) + v15) % (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 56) - v20) >> 5));
    v22 = v20 + 480 * v21;
    *(_QWORD *)v16 = *(_QWORD *)v22;
    v23 = *(_OWORD *)(v22 + 8);
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 16) = 0;
    v24 = (std::__shared_weak_count *)*((_QWORD *)v16 + 2);
    *(_OWORD *)(v16 + 8) = v23;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    sub_207CDE4AC((uint64_t)(v16 + 24), (uint64_t *)(v20 + 480 * v21 + 24));
    v27 = v20 + 480 * v21;
    *((_QWORD *)v16 + 57) = *(_QWORD *)(v27 + 456);
    v28 = *(_OWORD *)(v27 + 464);
    *(_QWORD *)(v27 + 464) = 0;
    *(_QWORD *)(v27 + 472) = 0;
    v29 = (std::__shared_weak_count *)*((_QWORD *)v16 + 59);
    *((_OWORD *)v16 + 29) = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v19 = ++v15 == *(_QWORD *)(a1 + 88);
    v16 += 480;
  }
  if (v17 <= v13 || v15 != v195)
    goto LABEL_16;
LABEL_26:
  v32 = (char *)*v193;
  if (!*v193)
    goto LABEL_45;
  v33 = *(char **)(a1 + 56);
  v34 = *v193;
  if (v33 != v32)
  {
    while (1)
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)v33 - 1);
      if (!v35)
        break;
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (v37)
        break;
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if (*(v33 - 32))
        goto LABEL_35;
LABEL_36:
      v38 = (std::__shared_weak_count *)*((_QWORD *)v33 - 58);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v33 -= 480;
      if (v33 == v32)
      {
        v34 = *v193;
        goto LABEL_44;
      }
    }
    if (!*(v33 - 32))
      goto LABEL_36;
LABEL_35:
    sub_207CDAEE4((_QWORD *)v33 - 57);
    goto LABEL_36;
  }
LABEL_44:
  *(_QWORD *)(a1 + 56) = v32;
  operator delete(v34);
  *v193 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_45:
  v41 = v212[0];
  *(_QWORD *)(a1 + 48) = v212[0];
  v42 = v212[1];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v212[1];
  memset(v212, 0, 24);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v195 % (0xEEEEEEEEEEEEEEEFLL * ((v42 - v41) >> 5));
  *(_QWORD *)(a1 + 88) = v195;
  v224[0] = v212;
  sub_207CDA9D4((void ***)v224);
  a2 = v194;
LABEL_46:
  *(_QWORD *)(a1 + 112) = 0;
  *(double *)(a1 + 96) = a5;
  *(_WORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  if (!a4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/SynchronizerNode.h", 142, (uint64_t)"std::any_of(trigger_sync_flags.begin(), trigger_sync_flags.end(), [](BOOL b) { return b; })",
         91,
         (uint64_t)"",
         0,
         (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v43 = (char *)operator new(0x50uLL);
  v44 = strlen(a2);
  if (v44 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    p_dst = (__int128 *)operator new(v47 + 1);
    *((_QWORD *)&__dst + 1) = v45;
    v198 = v48 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v198) = v44;
    p_dst = &__dst;
    if (!v44)
      goto LABEL_56;
  }
  memcpy(p_dst, a2, v45);
LABEL_56:
  *((_BYTE *)p_dst + v45) = 0;
  *(_QWORD *)v43 = off_24C070B48;
  *(_OWORD *)(v43 + 8) = __dst;
  *((_QWORD *)v43 + 3) = v198;
  __dst = 0uLL;
  v198 = 0;
  *((_OWORD *)v43 + 2) = 0u;
  *((_OWORD *)v43 + 3) = 0u;
  *((_QWORD *)v43 + 8) = 0;
  v196 = v43;
  v49 = (std::__shared_weak_count *)operator new(0x58uLL);
  v49->__shared_owners_ = 0;
  v50 = (unint64_t *)&v49->__shared_owners_;
  v49->__shared_weak_owners_ = 0;
  v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C070B78;
  v51 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v49[1];
  MEMORY[0x20BD023EC](&v49[1]);
  v234 = &v49[1].__vftable;
  v235 = v49;
  do
    v52 = __ldxr(v50);
  while (__stxr(v52 + 1, v50));
  v222 = 0;
  v223 = 0;
  v200[0] = v49 + 1;
  v200[1] = v49;
  v236 = 0uLL;
  v53 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v200[0] = 0;
  v200[1] = 0;
  LOBYTE(v53->~__shared_weak_count_0) = 1;
  v53[1].~__shared_weak_count_0 = 0;
  v53->__on_zero_shared_weak = 0;
  v53[1].~__shared_weak_count = 0;
  v53->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C070D38;
  v53->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&unk_24C070DB0;
  v53->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))&unk_24C070DF0;
  v53[1].__on_zero_shared = 0;
  v53[1].__get_deleter = 0;
  v53[1].__on_zero_shared_weak = v51;
  v53[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v49;
  v212[0] = 0;
  v212[1] = 0;
  v54 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new(0x10uLL);
  *(_QWORD *)v54 = &off_24C070EE8;
  *((_QWORD *)v54 + 1) = a1;
  v53[2].~__shared_weak_count_0 = v54;
  v53[2].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v53[2].__on_zero_shared;
  v53[2].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))&v53[2].__on_zero_shared;
  v53[2].__on_zero_shared_weak = 0;
  v53[3].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v53[3];
  v53[3].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v53[3];
  v53[3].__on_zero_shared = 0;
  v55 = (std::__shared_weak_count *)operator new(0x20uLL);
  v56 = v55;
  v55->__shared_owners_ = 0;
  v57 = (unint64_t *)&v55->__shared_owners_;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070F88;
  v55->__shared_weak_owners_ = 0;
  v55[1].__vftable = v53;
  do
    v58 = __ldxr(v57);
  while (__stxr(v58 + 1, v57));
  p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
  do
    v60 = __ldxr(p_shared_weak_owners);
  while (__stxr(v60 + 1, p_shared_weak_owners));
  v53->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v53;
  v53[1].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v55;
  do
    v61 = __ldaxr(v57);
  while (__stlxr(v61 - 1, v57));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v56);
  }
  v62 = (std::__shared_weak_count *)v212[1];
  if (v212[1])
  {
    v63 = (unint64_t *)(v212[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v212[0] = v53;
  v212[1] = v56;
  v65 = (std::__shared_weak_count *)v200[1];
  if (v200[1])
  {
    v66 = (unint64_t *)(v200[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v224[0] = off_24C070BC8;
  strcpy((char *)&v224[1], "channel");
  v224[2] = v243;
  *(_QWORD *)((char *)&v224[2] + 7) = *(_QWORD *)((char *)&v243 + 7);
  HIBYTE(v224[3]) = 7;
  *(_QWORD *)&v243 = 0;
  *(_QWORD *)((char *)&v243 + 7) = 0;
  v224[4] = 0x7974706D45;
  v224[5] = v240;
  *(_QWORD *)((char *)&v224[5] + 7) = *(_QWORD *)((char *)&v240 + 7);
  HIBYTE(v224[6]) = 5;
  *(_QWORD *)&v240 = 0;
  *(_QWORD *)((char *)&v240 + 7) = 0;
  v225 = 0uLL;
  v200[0] = 0;
  v200[1] = 0;
  v68 = v212[0];
  v69 = v212[1];
  v226 = *(_OWORD *)v212;
  v212[0] = 0;
  v212[1] = 0;
  if (*((_QWORD *)&v226 + 1))
  {
    v70 = (unint64_t *)(v69 + 16);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v227 = &off_24C070BF8;
  v72 = operator new(0x18uLL);
  *v72 = &off_24C070FD8;
  v72[1] = v68;
  v72[2] = v69;
  *(_QWORD *)&v228 = v72;
  v74 = *((_QWORD *)&v226 + 1);
  v73 = v226;
  if (!*((_QWORD *)&v226 + 1))
  {
    *((_QWORD *)&v228 + 1) = v226;
    v229 = 0;
    if ((_QWORD)v226)
      v78 = v226 + 16;
    else
      v78 = 0;
    goto LABEL_96;
  }
  v75 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 16);
  do
    v76 = __ldxr(v75);
  while (__stxr(v76 + 1, v75));
  v77 = *((_QWORD *)&v226 + 1);
  *((_QWORD *)&v228 + 1) = v73;
  v229 = v74;
  if ((_QWORD)v226)
    v78 = v226 + 16;
  else
    v78 = 0;
  if (!*((_QWORD *)&v226 + 1))
  {
    v73 = v226;
LABEL_96:
    v81 = 0;
    v230 = &off_24C070A28;
    v231 = v78;
    goto LABEL_97;
  }
  v79 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 16);
  do
    v80 = __ldxr(v79);
  while (__stxr(v80 + 1, v79));
  v81 = *((_QWORD *)&v226 + 1);
  v73 = v226;
  v230 = &off_24C070A28;
  *(_QWORD *)&v231 = v78;
  *((_QWORD *)&v231 + 1) = v77;
  if (*((_QWORD *)&v226 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v226 + 1) + 16);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
LABEL_97:
  if (v73)
    v84 = v73 + 24;
  else
    v84 = 0;
  v232 = &off_24C0705D0;
  *(_QWORD *)&v233 = v84;
  *((_QWORD *)&v233 + 1) = v81;
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  LODWORD(v239[3]) = v199[0];
  *(_DWORD *)((char *)&v239[3] + 3) = *(_DWORD *)((char *)v199 + 3);
  do
    v88 = __ldxr(v50);
  while (__stxr(v88 + 1, v50));
  *(_QWORD *)&v240 = v239[2];
  *(_QWORD *)((char *)&v240 + 7) = *(_QWORD *)((char *)&v239[2] + 7);
  memset(&v239[2], 0, 15);
  *(_QWORD *)&v237 = v239[0];
  *(_QWORD *)((char *)&v237 + 7) = *(_QWORD *)((char *)v239 + 7);
  v239[0] = 0;
  *(_QWORD *)((char *)v239 + 7) = 0;
  v210 = 0;
  v211 = 0;
  *(_QWORD *)&v236 = v49 + 1;
  *((_QWORD *)&v236 + 1) = v49;
  v243 = 0uLL;
  v89 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v236 = 0uLL;
  LOBYTE(v89->~__shared_weak_count_0) = 1;
  v89[1].~__shared_weak_count_0 = 0;
  v89->__on_zero_shared_weak = 0;
  v89[1].~__shared_weak_count = 0;
  v89->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C071050;
  v89->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&unk_24C0710C8;
  v89->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))&unk_24C071108;
  v89[1].__on_zero_shared = 0;
  v89[1].__get_deleter = 0;
  v89[1].__on_zero_shared_weak = v51;
  v89[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v49;
  v200[0] = 0;
  v200[1] = 0;
  v90 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new(0x10uLL);
  *(_QWORD *)v90 = &off_24C0711F0;
  *((_QWORD *)v90 + 1) = a1;
  v89[2].~__shared_weak_count_0 = v90;
  v89[2].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v89[2].__on_zero_shared;
  v89[2].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))&v89[2].__on_zero_shared;
  v89[2].__on_zero_shared_weak = 0;
  v89[3].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v89[3];
  v89[3].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v89[3];
  v89[3].__on_zero_shared = 0;
  v91 = (std::__shared_weak_count *)operator new(0x20uLL);
  v92 = v91;
  v91->__shared_owners_ = 0;
  v93 = (unint64_t *)&v91->__shared_owners_;
  v91->__vftable = (std::__shared_weak_count_vtbl *)&off_24C071240;
  v91->__shared_weak_owners_ = 0;
  v91[1].__vftable = v89;
  do
    v94 = __ldxr(v93);
  while (__stxr(v94 + 1, v93));
  v95 = (unint64_t *)&v91->__shared_weak_owners_;
  do
    v96 = __ldxr(v95);
  while (__stxr(v96 + 1, v95));
  v89->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v89;
  v89[1].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v91;
  do
    v97 = __ldaxr(v93);
  while (__stlxr(v97 - 1, v93));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v92);
  }
  v98 = (std::__shared_weak_count *)v200[1];
  if (v200[1])
  {
    v99 = (unint64_t *)(v200[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v200[0] = v89;
  v200[1] = v92;
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v212[0] = off_24C070C30;
  strcpy((char *)&v212[1], "channel");
  v212[2] = v240;
  *(_QWORD *)((char *)&v212[2] + 7) = *(_QWORD *)((char *)&v240 + 7);
  HIBYTE(v212[3]) = 7;
  *(_QWORD *)&v240 = 0;
  *(_QWORD *)((char *)&v240 + 7) = 0;
  v212[4] = 0x7974706D45;
  v212[5] = v237;
  *(_QWORD *)((char *)&v212[5] + 7) = *(_QWORD *)((char *)&v237 + 7);
  HIBYTE(v212[6]) = 5;
  *(_QWORD *)&v237 = 0;
  *(_QWORD *)((char *)&v237 + 7) = 0;
  v213 = 0uLL;
  v236 = 0uLL;
  v104 = v200[0];
  v105 = v200[1];
  v214 = *(_OWORD *)v200;
  v200[0] = 0;
  v200[1] = 0;
  if (*((_QWORD *)&v214 + 1))
  {
    v106 = (unint64_t *)(v105 + 16);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  v215 = &off_24C070C60;
  v108 = operator new(0x18uLL);
  *v108 = &off_24C071290;
  v108[1] = v104;
  v108[2] = v105;
  *(_QWORD *)&v216 = v108;
  v110 = *((_QWORD *)&v214 + 1);
  v109 = v214;
  if (!*((_QWORD *)&v214 + 1))
  {
    *((_QWORD *)&v216 + 1) = v214;
    v217 = 0;
    if ((_QWORD)v214)
      v114 = v214 + 16;
    else
      v114 = 0;
    goto LABEL_145;
  }
  v111 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 16);
  do
    v112 = __ldxr(v111);
  while (__stxr(v112 + 1, v111));
  v113 = *((_QWORD *)&v214 + 1);
  *((_QWORD *)&v216 + 1) = v109;
  v217 = v110;
  if ((_QWORD)v214)
    v114 = v214 + 16;
  else
    v114 = 0;
  if (!*((_QWORD *)&v214 + 1))
  {
    v109 = v214;
LABEL_145:
    v117 = 0;
    v218 = &off_24C070A28;
    v219 = v114;
    goto LABEL_146;
  }
  v115 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 16);
  do
    v116 = __ldxr(v115);
  while (__stxr(v116 + 1, v115));
  v117 = *((_QWORD *)&v214 + 1);
  v109 = v214;
  v218 = &off_24C070A28;
  *(_QWORD *)&v219 = v114;
  *((_QWORD *)&v219 + 1) = v113;
  if (*((_QWORD *)&v214 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 16);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
LABEL_146:
  if (v109)
    v120 = v109 + 24;
  else
    v120 = 0;
  v220 = &off_24C0705D0;
  *(_QWORD *)&v221 = v120;
  *((_QWORD *)&v221 + 1) = v117;
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  LODWORD(v238[3]) = v199[0];
  *(_DWORD *)((char *)&v238[3] + 3) = *(_DWORD *)((char *)v199 + 3);
  do
    v124 = __ldxr(v50);
  while (__stxr(v124 + 1, v50));
  v242[0] = v238[2];
  *(_QWORD *)((char *)v242 + 7) = *(_QWORD *)((char *)&v238[2] + 7);
  memset(&v238[2], 0, 15);
  v241[0] = v238[0];
  *(_QWORD *)((char *)v241 + 7) = *(_QWORD *)((char *)v238 + 7);
  v238[0] = 0;
  *(_QWORD *)((char *)v238 + 7) = 0;
  v237 = 0uLL;
  *(_QWORD *)&v243 = v49 + 1;
  *((_QWORD *)&v243 + 1) = v49;
  v240 = 0uLL;
  v125 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v243 = 0uLL;
  LOBYTE(v125->~__shared_weak_count_0) = 1;
  v125[1].~__shared_weak_count_0 = 0;
  v125->__on_zero_shared_weak = 0;
  v125[1].~__shared_weak_count = 0;
  v125->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24C071308;
  v125->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&unk_24C071380;
  v125->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))&unk_24C0713C0;
  v125[1].__on_zero_shared = 0;
  v125[1].__get_deleter = 0;
  v125[1].__on_zero_shared_weak = v51;
  v125[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v49;
  v236 = 0uLL;
  v126 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new(0x10uLL);
  *(_QWORD *)v126 = &off_24C0714B8;
  *((_QWORD *)v126 + 1) = a1;
  v125[2].~__shared_weak_count_0 = v126;
  v125[2].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v125[2].__on_zero_shared;
  v125[2].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))&v125[2].__on_zero_shared;
  v125[2].__on_zero_shared_weak = 0;
  v125[3].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v125[3];
  v125[3].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v125[3];
  v125[3].__on_zero_shared = 0;
  v127 = (std::__shared_weak_count *)operator new(0x20uLL);
  v128 = v127;
  v127->__shared_owners_ = 0;
  v129 = (unint64_t *)&v127->__shared_owners_;
  v127->__vftable = (std::__shared_weak_count_vtbl *)&off_24C071508;
  v127->__shared_weak_owners_ = 0;
  v127[1].__vftable = v125;
  do
    v130 = __ldxr(v129);
  while (__stxr(v130 + 1, v129));
  v131 = (unint64_t *)&v127->__shared_weak_owners_;
  do
    v132 = __ldxr(v131);
  while (__stxr(v132 + 1, v131));
  v125->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v125;
  v125[1].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v127;
  do
    v133 = __ldaxr(v129);
  while (__stlxr(v133 - 1, v129));
  if (!v133)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v128);
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  *(_QWORD *)&v236 = v125;
  *((_QWORD *)&v236 + 1) = v128;
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v200[0] = off_24C070C98;
  strcpy((char *)&v200[1], "channel");
  v200[2] = v242[0];
  *(_QWORD *)((char *)&v200[2] + 7) = *(_QWORD *)((char *)v242 + 7);
  HIBYTE(v200[3]) = 7;
  v242[0] = 0;
  *(_QWORD *)((char *)v242 + 7) = 0;
  v200[4] = 0x7974706D45;
  v200[5] = v241[0];
  *(_QWORD *)((char *)&v200[5] + 7) = *(_QWORD *)((char *)v241 + 7);
  HIBYTE(v200[6]) = 5;
  v241[0] = 0;
  *(_QWORD *)((char *)v241 + 7) = 0;
  v201 = 0uLL;
  v243 = 0uLL;
  v140 = v236;
  v202 = v236;
  v236 = 0uLL;
  if (*((_QWORD *)&v202 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 16);
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
  }
  v203 = &off_24C070CC8;
  v143 = (char *)operator new(0x18uLL);
  *(_QWORD *)v143 = &off_24C071558;
  *(_OWORD *)(v143 + 8) = v140;
  *(_QWORD *)&v204 = v143;
  v145 = *((_QWORD *)&v202 + 1);
  v144 = v202;
  if (!*((_QWORD *)&v202 + 1))
  {
    *((_QWORD *)&v204 + 1) = v202;
    v205 = 0;
    if ((_QWORD)v202)
      v149 = v202 + 16;
    else
      v149 = 0;
    goto LABEL_194;
  }
  v146 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 16);
  do
    v147 = __ldxr(v146);
  while (__stxr(v147 + 1, v146));
  v148 = *((_QWORD *)&v202 + 1);
  *((_QWORD *)&v204 + 1) = v144;
  v205 = v145;
  if ((_QWORD)v202)
    v149 = v202 + 16;
  else
    v149 = 0;
  if (!*((_QWORD *)&v202 + 1))
  {
    v144 = v202;
LABEL_194:
    v152 = 0;
    v206 = &off_24C070D00;
    v207 = v149;
    goto LABEL_195;
  }
  v150 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 16);
  do
    v151 = __ldxr(v150);
  while (__stxr(v151 + 1, v150));
  v152 = *((_QWORD *)&v202 + 1);
  v144 = v202;
  v206 = &off_24C070D00;
  *(_QWORD *)&v207 = v149;
  *((_QWORD *)&v207 + 1) = v148;
  if (*((_QWORD *)&v202 + 1))
  {
    v153 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 16);
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
  }
LABEL_195:
  if (v144)
    v155 = v144 + 24;
  else
    v155 = 0;
  v208 = &off_24C0705D0;
  *(_QWORD *)&v209 = v155;
  *((_QWORD *)&v209 + 1) = v152;
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v240 + 1);
  if (*((_QWORD *)&v240 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v240 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = (char *)operator new(0x1F8uLL);
  *(_QWORD *)v159 = off_24C070BC8;
  *((_QWORD *)v159 + 3) = v224[3];
  v160 = *(_OWORD *)&v224[1];
  memset(&v224[1], 0, 24);
  *((_QWORD *)v159 + 6) = v224[6];
  v161 = *(_OWORD *)&v224[4];
  memset(&v224[4], 0, 24);
  v162 = v225;
  v225 = 0uLL;
  v163 = v226;
  v226 = 0uLL;
  *((_QWORD *)v159 + 11) = &off_24C070BF8;
  v164 = v228;
  v165 = v229;
  *((_QWORD *)&v228 + 1) = 0;
  v229 = 0;
  v166 = v233;
  v233 = 0uLL;
  *((_QWORD *)v159 + 21) = off_24C070C30;
  *((_QWORD *)v159 + 24) = v212[3];
  v167 = *(_OWORD *)&v212[1];
  memset(&v212[1], 0, 24);
  *((_QWORD *)v159 + 27) = v212[6];
  v168 = *(_OWORD *)&v212[4];
  memset(&v212[4], 0, 24);
  v169 = v213;
  v213 = 0uLL;
  v170 = v214;
  v214 = 0uLL;
  *((_QWORD *)v159 + 32) = &off_24C070C60;
  *((_QWORD *)v159 + 35) = v217;
  v171 = v216;
  *((_QWORD *)&v216 + 1) = 0;
  v217 = 0;
  *((_QWORD *)v159 + 14) = v165;
  *((_QWORD *)v159 + 15) = &off_24C070A28;
  *((_QWORD *)v159 + 36) = &off_24C070A28;
  v172 = v219;
  v173 = v221;
  v221 = 0uLL;
  *((_QWORD *)v159 + 42) = off_24C070C98;
  *((_QWORD *)v159 + 45) = v200[3];
  *(_OWORD *)(v159 + 344) = *(_OWORD *)&v200[1];
  memset(&v200[1], 0, 24);
  *((_QWORD *)v159 + 48) = v200[6];
  v174 = *(_OWORD *)&v200[4];
  memset(&v200[4], 0, 24);
  v175 = v201;
  v201 = 0uLL;
  v176 = v202;
  v202 = 0uLL;
  *((_QWORD *)v159 + 53) = &off_24C070CC8;
  *(_OWORD *)(v159 + 264) = v171;
  *(_OWORD *)(v159 + 296) = v172;
  *(_OWORD *)(v159 + 392) = v175;
  *(_OWORD *)(v159 + 408) = v176;
  *(_OWORD *)(v159 + 488) = v209;
  v177 = v204;
  v178 = v205;
  *((_QWORD *)&v204 + 1) = 0;
  v205 = 0;
  *((_QWORD *)v159 + 56) = v178;
  *((_QWORD *)v159 + 57) = &off_24C070D00;
  *((_QWORD *)v159 + 18) = &off_24C0705D0;
  *((_QWORD *)v159 + 39) = &off_24C0705D0;
  *((_QWORD *)v159 + 60) = &off_24C0705D0;
  v209 = 0uLL;
  *(_OWORD *)(v159 + 8) = v160;
  *((_OWORD *)v159 + 2) = v161;
  *(_OWORD *)(v159 + 56) = v162;
  *(_OWORD *)(v159 + 72) = v163;
  *((_OWORD *)v159 + 6) = v164;
  *((_OWORD *)v159 + 8) = v231;
  *(_OWORD *)(v159 + 152) = v166;
  *((_OWORD *)v159 + 11) = v167;
  *(_OWORD *)(v159 + 200) = v168;
  *((_OWORD *)v159 + 14) = v169;
  *((_OWORD *)v159 + 15) = v170;
  *((_OWORD *)v159 + 20) = v173;
  *((_OWORD *)v159 + 23) = v174;
  *((_OWORD *)v159 + 27) = v177;
  *((_OWORD *)v159 + 29) = v207;
  *((_QWORD *)v196 + 9) = v159;
  *(_QWORD *)&v228 = 0;
  v231 = 0uLL;
  v219 = 0uLL;
  *(_QWORD *)&v216 = 0;
  v207 = 0uLL;
  *(_QWORD *)&v204 = 0;
  sub_207CE3704((uint64_t)v200);
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v237 + 1);
  if (*((_QWORD *)&v237 + 1))
  {
    v180 = (unint64_t *)(*((_QWORD *)&v237 + 1) + 8);
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  sub_207CE38E8((uint64_t)v212);
  v182 = v211;
  if (v211)
  {
    v183 = (unint64_t *)&v211->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  sub_207CE3ACC((uint64_t)v224);
  v185 = v223;
  if (v223)
  {
    v186 = (unint64_t *)&v223->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v235;
  if (!v235)
    goto LABEL_222;
  v189 = (unint64_t *)&v235->__shared_owners_;
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 - 1, v189));
  if (!v190)
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
    if (SHIBYTE(v198) < 0)
LABEL_223:
      operator delete((void *)__dst);
  }
  else
  {
LABEL_222:
    if (SHIBYTE(v198) < 0)
      goto LABEL_223;
  }
  v191 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v196;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  return a1;
}

void sub_207CDDCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(v11 + 128);
  *(_QWORD *)(v11 + 128) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_207C99D78(a11);
  sub_207CDE19C(v11);
  _Unwind_Resume(a1);
}

void sub_207CDE148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  a27 = (void **)&a50;
  sub_207CDA9D4(&a27);
  JUMPOUT(0x207CDE108);
}

void sub_207CDE160()
{
  JUMPOUT(0x207CDE108);
}

void sub_207CDE168(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v20;
  uint64_t v21;

  operator delete(v20);
  v21 = *(_QWORD *)(v19 + 128);
  *(_QWORD *)(v19 + 128) = 0;
  if (!v21)
    JUMPOUT(0x207CDE100);
  JUMPOUT(0x207CDE0F4);
}

void sub_207CDE184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_object)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_207C9CFA4(a1);
}

uint64_t sub_207CDE19C(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 48);
  sub_207CDA9D4(&v4);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207CDE1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  result = a6;
  if (a2 != a4)
  {
    v7 = 0;
    do
    {
      v8 = a6 + v7;
      v9 = a2 + v7;
      *(_QWORD *)(a6 + v7 - 480) = *(_QWORD *)(a2 + v7 - 480);
      v10 = (_OWORD *)(a2 + v7 - 472);
      *(_OWORD *)(a6 + v7 - 472) = *v10;
      *(_QWORD *)(a2 + v7 - 464) = 0;
      *(_QWORD *)v10 = 0;
      v11 = (_BYTE *)(a6 + v7 - 456);
      *v11 = 0;
      *(_BYTE *)(a6 + v7 - 32) = 0;
      if (*(_BYTE *)(a2 + v7 - 32))
      {
        v12 = *(_QWORD *)(v9 - 456);
        *(_DWORD *)(a6 + v7 - 448) = *(_DWORD *)(v9 - 448);
        *(_QWORD *)v11 = v12;
        v13 = (_QWORD *)(v8 - 440);
        v14 = (_QWORD *)(v9 - 440);
        *(_QWORD *)(v8 - 432) = 0;
        *v13 = 0;
        v13[2] = 0;
        *(_OWORD *)v13 = *(_OWORD *)(v9 - 440);
        *(_QWORD *)(v8 - 424) = *(_QWORD *)(v9 - 424);
        *(_QWORD *)(v9 - 432) = 0;
        *v14 = 0;
        v14[2] = 0;
        v15 = (_QWORD *)(v8 - 416);
        v16 = (_QWORD *)(v9 - 416);
        *(_QWORD *)(v8 - 408) = 0;
        *v15 = 0;
        v15[2] = 0;
        *(_OWORD *)v15 = *(_OWORD *)(v9 - 416);
        *(_QWORD *)(v8 - 400) = *(_QWORD *)(v9 - 400);
        v16[2] = 0;
        *(_QWORD *)(v9 - 408) = 0;
        *v16 = 0;
        v17 = v8 - 392;
        v19 = *(_OWORD *)(v9 - 312);
        v18 = *(_OWORD *)(v9 - 296);
        v20 = *(_OWORD *)(v9 - 328);
        *(_QWORD *)(v17 + 112) = *(_QWORD *)(v9 - 280);
        *(_OWORD *)(v17 + 80) = v19;
        *(_OWORD *)(v17 + 96) = v18;
        *(_OWORD *)(v17 + 64) = v20;
        v21 = *(_OWORD *)(v9 - 392);
        v22 = *(_OWORD *)(v9 - 376);
        v23 = *(_OWORD *)(v9 - 344);
        *(_OWORD *)(v17 + 32) = *(_OWORD *)(v9 - 360);
        *(_OWORD *)(v17 + 48) = v23;
        *(_OWORD *)v17 = v21;
        *(_OWORD *)(v17 + 16) = v22;
        *(_OWORD *)(v8 - 272) = *(_OWORD *)(v9 - 272);
        *(_QWORD *)(v9 - 264) = 0;
        *(_QWORD *)(v9 - 272) = 0;
        v25 = *(_OWORD *)(v9 - 208);
        v24 = *(_OWORD *)(v9 - 192);
        v26 = *(_OWORD *)(v9 - 224);
        *(_QWORD *)(v8 - 176) = *(_QWORD *)(v9 - 176);
        *(_OWORD *)(v8 - 208) = v25;
        *(_OWORD *)(v8 - 192) = v24;
        *(_OWORD *)(v8 - 224) = v26;
        v27 = *(_OWORD *)(v9 - 240);
        *(_OWORD *)(v8 - 256) = *(_OWORD *)(v9 - 256);
        *(_OWORD *)(v8 - 240) = v27;
        v28 = *(_OWORD *)(v9 - 104);
        v29 = *(_OWORD *)(v9 - 88);
        v30 = *(_QWORD *)(v9 - 72);
        *(_OWORD *)(v8 - 120) = *(_OWORD *)(v9 - 120);
        *(_QWORD *)(v8 - 72) = v30;
        *(_OWORD *)(v8 - 88) = v29;
        *(_OWORD *)(v8 - 104) = v28;
        v31 = *(_OWORD *)(v9 - 168);
        v32 = *(_OWORD *)(v9 - 152);
        *(_OWORD *)(v8 - 136) = *(_OWORD *)(v9 - 136);
        *(_OWORD *)(v8 - 152) = v32;
        *(_OWORD *)(v8 - 168) = v31;
        *(_OWORD *)(v8 - 64) = *(_OWORD *)(v9 - 64);
        *(_QWORD *)(v9 - 64) = 0;
        *(_QWORD *)(v9 - 56) = 0;
        *(_OWORD *)(v8 - 48) = *(_OWORD *)(v9 - 48);
        *(_QWORD *)(v9 - 48) = 0;
        *(_QWORD *)(v9 - 40) = 0;
        *(_BYTE *)(v8 - 32) = 1;
      }
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(v9 - 24);
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(v9 - 16);
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 -= 480;
    }
    while (a2 + v7 != a4);
    return a6 + v7;
  }
  return result;
}

uint64_t sub_207CDE3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 480;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (!v4)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (v6)
    {
LABEL_8:
      if (!*(_BYTE *)(i - 32))
        goto LABEL_10;
LABEL_9:
      sub_207CDAEE4((_QWORD *)(i - 456));
      goto LABEL_10;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (*(_BYTE *)(i - 32))
      goto LABEL_9;
LABEL_10:
    v7 = *(std::__shared_weak_count **)(i - 464);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_207CDE4AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _OWORD *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;

  if (*(unsigned __int8 *)(a1 + 424) == *((unsigned __int8 *)a2 + 424))
  {
    if (!*(_BYTE *)(a1 + 424))
      return;
    v4 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)a1 = v4;
    v6 = (_QWORD *)(a1 + 16);
    v5 = *(void **)(a1 + 16);
    v7 = a2 + 2;
    if (v5)
    {
      *(_QWORD *)(a1 + 24) = v5;
      operator delete(v5);
      *v6 = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *v7 = 0;
    a2[3] = 0;
    a2[4] = 0;
    v8 = *(void **)(a1 + 40);
    if (v8)
    {
      *(_QWORD *)(a1 + 48) = v8;
      operator delete(v8);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
    }
    v9 = (_OWORD *)(a1 + 392);
    v10 = (__int128 *)(a2 + 49);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    a2[6] = 0;
    a2[7] = 0;
    a2[5] = 0;
    v12 = *((_OWORD *)a2 + 9);
    v11 = *((_OWORD *)a2 + 10);
    v13 = *((_OWORD *)a2 + 8);
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_OWORD *)(a1 + 144) = v12;
    *(_OWORD *)(a1 + 160) = v11;
    *(_OWORD *)(a1 + 128) = v13;
    v14 = *((_OWORD *)a2 + 4);
    v15 = *((_OWORD *)a2 + 5);
    v16 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v16;
    *(_OWORD *)(a1 + 64) = v14;
    *(_OWORD *)(a1 + 80) = v15;
    v17 = *(_OWORD *)(a2 + 23);
    a2[23] = 0;
    a2[24] = 0;
    v18 = *(std::__shared_weak_count **)(a1 + 192);
    *(_OWORD *)(a1 + 184) = v17;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = v21;
    v22 = *(_OWORD *)(a2 + 29);
    v23 = *(_OWORD *)(a2 + 31);
    v24 = *(_OWORD *)(a2 + 33);
    *(_QWORD *)(a1 + 280) = a2[35];
    *(_OWORD *)(a1 + 264) = v24;
    *(_OWORD *)(a1 + 248) = v23;
    *(_OWORD *)(a1 + 232) = v22;
    v26 = *((_OWORD *)a2 + 22);
    v25 = *((_OWORD *)a2 + 23);
    v27 = *((_OWORD *)a2 + 21);
    *(_QWORD *)(a1 + 384) = a2[48];
    *(_OWORD *)(a1 + 352) = v26;
    *(_OWORD *)(a1 + 368) = v25;
    *(_OWORD *)(a1 + 336) = v27;
    v28 = *((_OWORD *)a2 + 18);
    v29 = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
    *(_OWORD *)(a1 + 320) = v29;
    *(_OWORD *)(a1 + 288) = v28;
    v30 = *v10;
    *(_QWORD *)v10 = 0;
    a2[50] = 0;
    v31 = *(std::__shared_weak_count **)(a1 + 400);
    *v9 = v30;
    if (!v31)
      goto LABEL_16;
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      v56 = v10[1];
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      v35 = *(std::__shared_weak_count **)(a1 + 416);
      v9[1] = v56;
      if (!v35)
        return;
    }
    else
    {
LABEL_16:
      v34 = v10[1];
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      v35 = *(std::__shared_weak_count **)(a1 + 416);
      v9[1] = v34;
      if (!v35)
        return;
    }
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  else if (*(_BYTE *)(a1 + 424))
  {
    sub_207CDAEE4((_QWORD *)a1);
    *(_BYTE *)(a1 + 424) = 0;
  }
  else
  {
    v38 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)a1 = v38;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    a2[2] = 0;
    a2[3] = 0;
    a2[4] = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    a2[6] = 0;
    a2[7] = 0;
    a2[5] = 0;
    v40 = *((_OWORD *)a2 + 9);
    v39 = *((_OWORD *)a2 + 10);
    v41 = *((_OWORD *)a2 + 8);
    *(_QWORD *)(a1 + 176) = a2[22];
    *(_OWORD *)(a1 + 144) = v40;
    *(_OWORD *)(a1 + 160) = v39;
    *(_OWORD *)(a1 + 128) = v41;
    v42 = *((_OWORD *)a2 + 4);
    v43 = *((_OWORD *)a2 + 5);
    v44 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v44;
    *(_OWORD *)(a1 + 64) = v42;
    *(_OWORD *)(a1 + 80) = v43;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
    a2[23] = 0;
    a2[24] = 0;
    v45 = *(_OWORD *)(a2 + 31);
    v46 = *(_OWORD *)(a2 + 33);
    v47 = a2[35];
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 29);
    *(_QWORD *)(a1 + 280) = v47;
    *(_OWORD *)(a1 + 264) = v46;
    *(_OWORD *)(a1 + 248) = v45;
    v48 = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 200) = v48;
    v50 = *((_OWORD *)a2 + 22);
    v49 = *((_OWORD *)a2 + 23);
    v51 = *((_OWORD *)a2 + 21);
    *(_QWORD *)(a1 + 384) = a2[48];
    *(_OWORD *)(a1 + 352) = v50;
    *(_OWORD *)(a1 + 368) = v49;
    *(_OWORD *)(a1 + 336) = v51;
    v52 = *((_OWORD *)a2 + 18);
    v53 = *((_OWORD *)a2 + 20);
    *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
    *(_OWORD *)(a1 + 320) = v53;
    *(_OWORD *)(a1 + 288) = v52;
    v54 = a2[50];
    *(_QWORD *)(a1 + 392) = a2[49];
    *(_QWORD *)(a1 + 400) = v54;
    a2[49] = 0;
    a2[50] = 0;
    v55 = a2[52];
    *(_QWORD *)(a1 + 408) = a2[51];
    *(_QWORD *)(a1 + 416) = v55;
    a2[51] = 0;
    a2[52] = 0;
    *(_BYTE *)(a1 + 424) = 1;
  }
}

void sub_207CDE834(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE3CB0(a1);
  operator delete(v1);
}

uint64_t sub_207CDE84C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207CDE8BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C070B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CDE8D0(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C070B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CDE8F4(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

void sub_207CDE900(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE3ACC(a1);
  operator delete(v1);
}

_QWORD *sub_207CDE914(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C070BF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_207CDE954(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_24C070BF8;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_207CDE994(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_207CDE9A4(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE38E8(a1);
  operator delete(v1);
}

_QWORD *sub_207CDE9B8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C070C60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_207CDE9F8(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_24C070C60;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_207CDEA38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_207CDEA48(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE3704(a1);
  operator delete(v1);
}

_QWORD *sub_207CDEA5C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C070CC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_207CDEA9C(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_24C070CC8;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_207CDEADC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_207CDEAEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C070D00;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CDEB24(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C070D00;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CDEB5C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24C070A60;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24C070A60;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CDEC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CDEC60(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE0490(a1);
  operator delete(v1);
}

void sub_207CDEC74(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_207CE05D8(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x20BD0277C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_207CDED30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x20BD0277C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_207CDED58(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CDED68(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CDED74(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_207CDED84(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_207CAC8F4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v13, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_207CE05D8(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x20BD0277C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_207CDEF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x207CDEE48);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CDEFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x20BD0277C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_207CDEFDC(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_207CDF060(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_207CDF0F0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CDF104(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_207CDF194(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CDF1A8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_207CDF1DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_207CDF210(uint64_t a1)
{
  return sub_207CE0490(a1 - 16);
}

void sub_207CDF218(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE0490(a1 - 16);
  operator delete(v1);
}

void sub_207CDF230(uint64_t a1)
{
  sub_207CDF060(a1 - 16);
}

void sub_207CDF238(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_207CDF26C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_207CDF2A0(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_207CDF2A8(uint64_t a1)
{
  return sub_207CE0490(a1 - 24);
}

void sub_207CDF2B0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE0490(a1 - 24);
  operator delete(v1);
}

void sub_207CDF2C8(uint64_t a1)
{
  sub_207CDF104(a1 - 24);
}

uint64_t sub_207CDF2D0(uint64_t a1)
{
  return a1 - 24;
}

void sub_207CDF2E0(uint64_t a1, __int128 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  double v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  _DWORD *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD v68[4];
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  void *v73[2];
  uint64_t v74;
  void *__p[2];
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2 + 56 * v2[4];
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(v3 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)v3 = v4;
  v7 = *v2;
  v8 = 0x6DB6DB6DB6DB6DB7 * ((v2[1] - *v2) >> 3);
  v9 = v2[5];
  v10 = v2[4] + 1;
  if (v10 >= v8)
    v11 = 0x6DB6DB6DB6DB6DB7 * ((v2[1] - *v2) >> 3);
  else
    v11 = 0;
  v12 = v10 - v11;
  v2[4] = v10 - v11;
  if (v9 == v8)
  {
    v13 = v2[3] + 1;
    if (v13 >= v8)
      v14 = v8;
    else
      v14 = 0;
    v2[3] = v13 - v14;
    v15 = v8;
    if (!*((_BYTE *)v2 + 104))
      return;
  }
  else
  {
    v15 = v9 + 1;
    v2[5] = v9 + 1;
    if (!*((_BYTE *)v2 + 104))
      return;
  }
  if (v10 == v11)
    v12 = v8;
  v16 = *(double *)(v7 + 56 * v12 - 8);
  v17 = *((double *)v2 + 12);
  v18 = v15 - 1;
  while (1)
  {
    v19 = __OFSUB__(v15--, 1);
    if (v15 < 0 != v19)
      break;
    v20 = vabdd_f64(*(double *)(v7 + 56 * ((v2[3] + (unint64_t)v18--) % v8) + 48), v16);
    if (v20 < v17)
      goto LABEL_18;
  }
  v15 = -1;
LABEL_18:
  v21 = operator new(4uLL);
  *v21 = v15;
  v22 = v2[11];
  v23 = v22 - 1;
  while (1)
  {
    v19 = __OFSUB__((_DWORD)v22, 1);
    LODWORD(v22) = v22 - 1;
    if ((int)v22 < 0 != v19)
      break;
    v24 = vabdd_f64(*(double *)(v2[6]+ 480* ((v2[9] + (unint64_t)v23--)% (0xEEEEEEEEEEEEEEEFLL * ((v2[7] - v2[6]) >> 5)))+ 456), v16);
    if (v24 < v17)
      goto LABEL_23;
  }
  LODWORD(v22) = -1;
LABEL_23:
  v25 = operator new(8uLL);
  *v25 = v15;
  v25[1] = v22;
  operator delete(v21);
  if ((*v25 & 0x80000000) == 0 && (v25[1] & 0x80000000) == 0)
  {
    v104 = *(_QWORD *)v25;
    sub_207CDF998((uint64_t)v68, v2, (int *)&v104);
    v26 = (char *)operator new(0x238uLL);
    v27 = v68[1];
    *(_OWORD *)(v26 + 24) = v68[0];
    *(_OWORD *)(v26 + 40) = v27;
    v28 = v68[3];
    *(_OWORD *)(v26 + 56) = v68[2];
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = 0;
    *(_QWORD *)v26 = off_24C070F38;
    *(_OWORD *)(v26 + 72) = v28;
    *((_QWORD *)v26 + 11) = v69;
    *((_OWORD *)v26 + 6) = v70;
    v70 = 0uLL;
    v26[112] = 0;
    v26[536] = 0;
    if (v101)
    {
      *((_QWORD *)v26 + 14) = v71;
      *((_DWORD *)v26 + 30) = v72;
      *((_OWORD *)v26 + 8) = *(_OWORD *)v73;
      *((_QWORD *)v26 + 18) = v74;
      v73[0] = 0;
      v73[1] = 0;
      *(_OWORD *)(v26 + 152) = *(_OWORD *)__p;
      v29 = v84;
      *((_QWORD *)v26 + 21) = v76;
      v74 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v76 = 0;
      v30 = v77;
      v31 = v78;
      v32 = v80;
      *((_OWORD *)v26 + 13) = v79;
      *((_OWORD *)v26 + 14) = v32;
      *((_OWORD *)v26 + 11) = v30;
      *((_OWORD *)v26 + 12) = v31;
      v33 = v81;
      v34 = v82;
      v35 = v83;
      *((_QWORD *)v26 + 36) = v29;
      *((_OWORD *)v26 + 16) = v34;
      *((_OWORD *)v26 + 17) = v35;
      *((_OWORD *)v26 + 15) = v33;
      v36 = v86;
      *(_OWORD *)(v26 + 296) = v85;
      v85 = 0uLL;
      v37 = v87;
      v38 = v88;
      *(_OWORD *)(v26 + 312) = v36;
      *(_OWORD *)(v26 + 328) = v37;
      v39 = v89;
      v40 = v90;
      v41 = v98;
      *((_QWORD *)v26 + 49) = v91;
      *(_OWORD *)(v26 + 360) = v39;
      *(_OWORD *)(v26 + 376) = v40;
      *(_OWORD *)(v26 + 344) = v38;
      v42 = v93;
      *((_OWORD *)v26 + 25) = v92;
      *((_OWORD *)v26 + 26) = v42;
      v43 = v94;
      v44 = v95;
      v45 = v96;
      v46 = v97;
      *((_QWORD *)v26 + 62) = v41;
      *((_OWORD *)v26 + 29) = v45;
      *((_OWORD *)v26 + 30) = v46;
      *((_OWORD *)v26 + 27) = v43;
      *((_OWORD *)v26 + 28) = v44;
      v47 = v99;
      v48 = v100;
      v99 = 0uLL;
      *(_OWORD *)(v26 + 504) = v47;
      *(_OWORD *)(v26 + 520) = v48;
      v100 = 0uLL;
      v26[536] = 1;
    }
    *((_QWORD *)v26 + 68) = v102;
    *(_OWORD *)(v26 + 552) = v103;
    v103 = 0uLL;
    v49 = (std::__shared_weak_count *)v2[15];
    v2[14] = (uint64_t)(v26 + 24);
    v2[15] = (uint64_t)v26;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    if (*((_QWORD *)&v103 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v101)
    {
      v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
      if (*((_QWORD *)&v100 + 1))
      {
        v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
      if (*((_QWORD *)&v99 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v73[0])
      {
        v73[1] = v73[0];
        operator delete(v73[0]);
      }
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = *(_QWORD *)(v2[16] + 72);
    LOBYTE(v68[0]) = 1;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(v67 + 424) + 16))(v67 + 424, v68);
  }
  operator delete(v25);
}

void sub_207CDF804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CDF818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a71;
  void *v71;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;

  v73 = (std::__shared_weak_count *)STACK[0x220];
  if (STACK[0x220])
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (LOBYTE(STACK[0x208]))
  {
    v76 = (std::__shared_weak_count *)STACK[0x200];
    if (STACK[0x200])
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (a71)
    {
      v79 = (unint64_t *)&a71->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))a71->__on_zero_shared)(a71);
        std::__shared_weak_count::__release_weak(a71);
      }
    }
    if (a45)
    {
      v81 = (unint64_t *)&a45->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
        std::__shared_weak_count::__release_weak(a45);
      }
    }
    if (__p)
      operator delete(__p);
    if (a23)
      operator delete(a23);
  }
  if (a20)
  {
    v83 = (unint64_t *)&a20->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
      operator delete(v71);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v71);
  _Unwind_Resume(a1);
}

void sub_207CDF998(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unint64_t v127;
  __int128 v129;
  _QWORD v130[2];
  _OWORD v131[2];
  _QWORD *v132;
  void *v133;
  void *v134;
  void *__p;
  void *v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  char v140;
  uint64_t v141;
  __int128 v142;

  v4 = *a3;
  v5 = v4 + 1;
  if (v4 == -1)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    if (v5 > 0x492492492492492)
      sub_207CA420C();
    v8 = 56 * v5;
    v6 = (char *)operator new(56 * v5);
    v7 = &v6[v8];
  }
  v9 = 0;
  v10 = a2[3];
  v11 = *a2;
  v12 = a2[1];
  v13 = v6;
  do
  {
    v20 = (__int128 *)(v11 + 56 * (v10 % (0x6DB6DB6DB6DB6DB7 * ((v12 - v11) >> 3))));
    if (v13 < v7)
    {
      v14 = *v20;
      v15 = v20[1];
      v16 = v20[2];
      *((_QWORD *)v13 + 6) = *((_QWORD *)v20 + 6);
      *((_OWORD *)v13 + 1) = v15;
      *((_OWORD *)v13 + 2) = v16;
      *(_OWORD *)v13 = v14;
      v13 += 56;
      goto LABEL_7;
    }
    v21 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v6) >> 3) + 1;
    if (v21 > 0x492492492492492)
      sub_207CA420C();
    if (0xDB6DB6DB6DB6DB6ELL * ((v7 - v6) >> 3) > v21)
      v21 = 0xDB6DB6DB6DB6DB6ELL * ((v7 - v6) >> 3);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3)) >= 0x249249249249249)
      v22 = 0x492492492492492;
    else
      v22 = v21;
    if (v22)
    {
      if (v22 > 0x492492492492492)
        sub_207CA3AB8();
      v23 = (char *)operator new(56 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[8 * ((v13 - v6) >> 3)];
    v25 = *v20;
    v26 = v20[1];
    v27 = v20[2];
    *((_QWORD *)v24 + 6) = *((_QWORD *)v20 + 6);
    *((_OWORD *)v24 + 1) = v26;
    *((_OWORD *)v24 + 2) = v27;
    *(_OWORD *)v24 = v25;
    if (v13 == v6)
    {
      v32 = &v23[8 * ((v13 - v6) >> 3)];
      v7 = &v23[56 * v22];
      v13 = v24 + 56;
      if (!v6)
        goto LABEL_26;
    }
    else
    {
      v28 = &v23[8 * ((v13 - v6) >> 3)];
      do
      {
        v29 = *(_OWORD *)(v13 - 56);
        v30 = *(_OWORD *)(v13 - 40);
        v31 = *(_OWORD *)(v13 - 24);
        v32 = v28 - 56;
        *((_QWORD *)v28 - 1) = *((_QWORD *)v13 - 1);
        *(_OWORD *)(v28 - 24) = v31;
        *(_OWORD *)(v28 - 40) = v30;
        *(_OWORD *)(v28 - 56) = v29;
        v13 -= 56;
        v28 -= 56;
      }
      while (v13 != v6);
      v7 = &v23[56 * v22];
      v13 = v24 + 56;
      if (!v6)
        goto LABEL_26;
    }
    operator delete(v6);
LABEL_26:
    v6 = v32;
LABEL_7:
    v17 = *a2 + 56 * a2[3];
    *(_QWORD *)(v17 + 48) = 0;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)v17 = 0u;
    v11 = *a2;
    v12 = a2[1];
    v18 = 0x6DB6DB6DB6DB6DB7 * ((v12 - *a2) >> 3);
    v19 = a2[3] + 1;
    if (v19 < v18)
      v18 = 0;
    v10 = v19 - v18;
    a2[3] = v10;
    --a2[5];
    ++v9;
  }
  while (v9 <= v4);
  v33 = a3[1];
  v130[0] = 0;
  v129 = 0uLL;
  v127 = v33;
  v34 = v33 + 1;
  if (v33 != -1)
  {
    if (v34 > 0x88888888888888)
      sub_207CA420C();
    v132 = v130;
    *(_QWORD *)&v129 = operator new(480 * v34);
    *((_QWORD *)&v129 + 1) = v129;
    v130[0] = v129 + 480 * v34;
    memset(v131, 0, sizeof(v131));
    sub_207CDE3C8((uint64_t)v131);
  }
  v35 = 0;
  v36 = a2[9];
  v38 = a2[6];
  v37 = a2[7];
  while (2)
  {
    v41 = v36 % (0xEEEEEEEEEEEEEEEFLL * ((v37 - v38) >> 5));
    v42 = (_QWORD *)(v38 + 480 * v41);
    v43 = *((_QWORD *)&v129 + 1);
    if (*((_QWORD *)&v129 + 1) >= v130[0])
    {
      v64 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 5);
      v65 = v64 + 1;
      if (v64 + 1 > 0x88888888888888)
        sub_207CA420C();
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v130[0] - v129) >> 5) > v65)
        v65 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v130[0] - v129) >> 5);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v130[0] - v129) >> 5) >= 0x44444444444444)
        v66 = 0x88888888888888;
      else
        v66 = v65;
      v132 = v130;
      if (v66)
      {
        if (v66 > 0x88888888888888)
          sub_207CA3AB8();
        v67 = (char *)operator new(480 * v66);
      }
      else
      {
        v67 = 0;
      }
      v68 = (uint64_t)&v67[32 * ((uint64_t)(*((_QWORD *)&v129 + 1) - v129) >> 5)];
      *(_QWORD *)v68 = *v42;
      v69 = v38 + 480 * v41;
      *(_OWORD *)(v68 + 8) = *(_OWORD *)(v69 + 8);
      *(_QWORD *)(v69 + 8) = 0;
      *(_QWORD *)(v69 + 16) = 0;
      v70 = &v67[480 * v64];
      v70[24] = 0;
      v71 = v70 + 24;
      *(_BYTE *)(v68 + 448) = 0;
      if (*(_BYTE *)(v69 + 448))
      {
        v72 = v38 + 480 * v41;
        v73 = *(_QWORD *)(v72 + 24);
        v72 += 24;
        *((_DWORD *)v71 + 2) = *(_DWORD *)(v72 + 8);
        *(_QWORD *)v71 = v73;
        v74 = &v67[480 * v64];
        *((_QWORD *)v74 + 6) = 0;
        *((_QWORD *)v74 + 7) = 0;
        *(_OWORD *)(v74 + 40) = *(_OWORD *)(v72 + 16);
        *((_QWORD *)v74 + 7) = *(_QWORD *)(v72 + 32);
        *(_QWORD *)(v72 + 16) = 0;
        *(_QWORD *)(v72 + 24) = 0;
        *(_QWORD *)(v72 + 32) = 0;
        *((_QWORD *)v74 + 9) = 0;
        *((_QWORD *)v74 + 10) = 0;
        *((_OWORD *)v74 + 4) = *(_OWORD *)(v72 + 40);
        *((_QWORD *)v74 + 10) = *(_QWORD *)(v72 + 56);
        *(_QWORD *)(v72 + 48) = 0;
        *(_QWORD *)(v72 + 56) = 0;
        *(_QWORD *)(v72 + 40) = 0;
        v76 = *(_OWORD *)(v72 + 144);
        v75 = *(_OWORD *)(v72 + 160);
        v77 = *(_QWORD *)(v72 + 176);
        *(_OWORD *)(v74 + 152) = *(_OWORD *)(v72 + 128);
        *((_QWORD *)v74 + 25) = v77;
        *(_OWORD *)(v74 + 184) = v75;
        *(_OWORD *)(v74 + 168) = v76;
        v78 = *(_OWORD *)(v72 + 64);
        v79 = *(_OWORD *)(v72 + 80);
        v80 = *(_OWORD *)(v72 + 96);
        *(_OWORD *)(v74 + 136) = *(_OWORD *)(v72 + 112);
        *(_OWORD *)(v74 + 120) = v80;
        *(_OWORD *)(v74 + 104) = v79;
        *(_OWORD *)(v74 + 88) = v78;
        *((_OWORD *)v74 + 13) = *(_OWORD *)(v72 + 184);
        *(_QWORD *)(v72 + 184) = 0;
        *(_QWORD *)(v72 + 192) = 0;
        v81 = *(_OWORD *)(v72 + 248);
        v82 = *(_OWORD *)(v72 + 264);
        v83 = *(_OWORD *)(v72 + 232);
        *((_QWORD *)v74 + 38) = *(_QWORD *)(v72 + 280);
        *((_OWORD *)v74 + 17) = v81;
        *((_OWORD *)v74 + 18) = v82;
        *((_OWORD *)v74 + 16) = v83;
        v84 = *(_OWORD *)(v72 + 216);
        *((_OWORD *)v74 + 14) = *(_OWORD *)(v72 + 200);
        *((_OWORD *)v74 + 15) = v84;
        v86 = *(_OWORD *)(v72 + 352);
        v85 = *(_OWORD *)(v72 + 368);
        v87 = *(_OWORD *)(v72 + 336);
        *((_QWORD *)v74 + 51) = *(_QWORD *)(v72 + 384);
        *(_OWORD *)(v74 + 376) = v86;
        *(_OWORD *)(v74 + 392) = v85;
        *(_OWORD *)(v74 + 360) = v87;
        v88 = *(_OWORD *)(v72 + 288);
        v89 = *(_OWORD *)(v72 + 320);
        *(_OWORD *)(v74 + 328) = *(_OWORD *)(v72 + 304);
        *(_OWORD *)(v74 + 344) = v89;
        *(_OWORD *)(v74 + 312) = v88;
        *((_OWORD *)v74 + 26) = *(_OWORD *)(v72 + 392);
        *(_QWORD *)(v72 + 392) = 0;
        *(_QWORD *)(v72 + 400) = 0;
        *((_OWORD *)v74 + 27) = *(_OWORD *)(v72 + 408);
        *(_QWORD *)(v72 + 408) = 0;
        *(_QWORD *)(v72 + 416) = 0;
        *(_BYTE *)(v68 + 448) = 1;
      }
      v90 = &v67[480 * v66];
      v91 = &v67[480 * v64];
      v92 = v38 + 480 * v41;
      *((_QWORD *)v91 + 57) = *(_QWORD *)(v92 + 456);
      *((_OWORD *)v91 + 29) = *(_OWORD *)(v92 + 464);
      *(_QWORD *)(v92 + 464) = 0;
      *(_QWORD *)(v92 + 472) = 0;
      v63 = v68 + 480;
      v93 = sub_207CDE1E4(*((uint64_t *)&v129 + 1), *((uint64_t *)&v129 + 1), v129, v129, v68, v68);
      v94 = v129;
      *(_QWORD *)&v129 = v93;
      *((_QWORD *)&v129 + 1) = v63;
      *(_OWORD *)((char *)v131 + 8) = v94;
      v95 = v130[0];
      v130[0] = v90;
      *((_QWORD *)&v131[1] + 1) = v95;
      *(_QWORD *)&v131[0] = v94;
      sub_207CDE3C8((uint64_t)v131);
    }
    else
    {
      **((_QWORD **)&v129 + 1) = *v42;
      v44 = v38 + 480 * v41;
      *(_OWORD *)(v43 + 8) = *(_OWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v44 + 16) = 0;
      *(_BYTE *)(v43 + 24) = 0;
      *(_BYTE *)(v43 + 448) = 0;
      if (*(_BYTE *)(v44 + 448))
      {
        v45 = v38 + 480 * v41;
        v46 = *(_QWORD *)(v45 + 24);
        v45 += 24;
        *(_DWORD *)(v43 + 32) = *(_DWORD *)(v45 + 8);
        *(_QWORD *)(v43 + 24) = v46;
        *(_QWORD *)(v43 + 48) = 0;
        *(_QWORD *)(v43 + 56) = 0;
        *(_QWORD *)(v43 + 40) = 0;
        *(_OWORD *)(v43 + 40) = *(_OWORD *)(v45 + 16);
        *(_QWORD *)(v43 + 56) = *(_QWORD *)(v45 + 32);
        *(_QWORD *)(v45 + 16) = 0;
        *(_QWORD *)(v45 + 24) = 0;
        *(_QWORD *)(v45 + 32) = 0;
        *(_QWORD *)(v43 + 64) = 0;
        *(_QWORD *)(v43 + 72) = 0;
        *(_QWORD *)(v43 + 80) = 0;
        *(_OWORD *)(v43 + 64) = *(_OWORD *)(v45 + 40);
        *(_QWORD *)(v43 + 80) = *(_QWORD *)(v45 + 56);
        *(_QWORD *)(v45 + 48) = 0;
        *(_QWORD *)(v45 + 56) = 0;
        *(_QWORD *)(v45 + 40) = 0;
        v48 = *(_OWORD *)(v45 + 144);
        v47 = *(_OWORD *)(v45 + 160);
        v49 = *(_QWORD *)(v45 + 176);
        *(_OWORD *)(v43 + 152) = *(_OWORD *)(v45 + 128);
        *(_QWORD *)(v43 + 200) = v49;
        *(_OWORD *)(v43 + 184) = v47;
        *(_OWORD *)(v43 + 168) = v48;
        v50 = *(_OWORD *)(v45 + 64);
        v51 = *(_OWORD *)(v45 + 80);
        v52 = *(_OWORD *)(v45 + 96);
        *(_OWORD *)(v43 + 136) = *(_OWORD *)(v45 + 112);
        *(_OWORD *)(v43 + 120) = v52;
        *(_OWORD *)(v43 + 104) = v51;
        *(_OWORD *)(v43 + 88) = v50;
        *(_OWORD *)(v43 + 208) = *(_OWORD *)(v45 + 184);
        *(_QWORD *)(v45 + 184) = 0;
        *(_QWORD *)(v45 + 192) = 0;
        v53 = *(_OWORD *)(v45 + 248);
        v54 = *(_OWORD *)(v45 + 264);
        v55 = *(_OWORD *)(v45 + 232);
        *(_QWORD *)(v43 + 304) = *(_QWORD *)(v45 + 280);
        *(_OWORD *)(v43 + 272) = v53;
        *(_OWORD *)(v43 + 288) = v54;
        *(_OWORD *)(v43 + 256) = v55;
        v56 = *(_OWORD *)(v45 + 216);
        *(_OWORD *)(v43 + 224) = *(_OWORD *)(v45 + 200);
        *(_OWORD *)(v43 + 240) = v56;
        v58 = *(_OWORD *)(v45 + 352);
        v57 = *(_OWORD *)(v45 + 368);
        v59 = *(_OWORD *)(v45 + 336);
        *(_QWORD *)(v43 + 408) = *(_QWORD *)(v45 + 384);
        *(_OWORD *)(v43 + 376) = v58;
        *(_OWORD *)(v43 + 392) = v57;
        *(_OWORD *)(v43 + 360) = v59;
        v60 = *(_OWORD *)(v45 + 288);
        v61 = *(_OWORD *)(v45 + 320);
        *(_OWORD *)(v43 + 328) = *(_OWORD *)(v45 + 304);
        *(_OWORD *)(v43 + 344) = v61;
        *(_OWORD *)(v43 + 312) = v60;
        *(_OWORD *)(v43 + 416) = *(_OWORD *)(v45 + 392);
        *(_QWORD *)(v45 + 392) = 0;
        *(_QWORD *)(v45 + 400) = 0;
        *(_OWORD *)(v43 + 432) = *(_OWORD *)(v45 + 408);
        *(_QWORD *)(v45 + 408) = 0;
        *(_QWORD *)(v45 + 416) = 0;
        *(_BYTE *)(v43 + 448) = 1;
      }
      v62 = v38 + 480 * v41;
      *(_QWORD *)(v43 + 456) = *(_QWORD *)(v62 + 456);
      *(_OWORD *)(v43 + 464) = *(_OWORD *)(v62 + 464);
      *(_QWORD *)(v62 + 464) = 0;
      *(_QWORD *)(v62 + 472) = 0;
      v63 = v43 + 480;
    }
    *((_QWORD *)&v129 + 1) = v63;
    v140 = 0;
    memset(v131, 0, 25);
    v142 = 0uLL;
    v141 = 0;
    v96 = a2[9];
    v97 = a2[6];
    v98 = (_QWORD *)(v97 + 480 * v96);
    *v98 = 0;
    *((_QWORD *)&v131[0] + 1) = 0;
    *(_QWORD *)&v131[1] = 0;
    v99 = (std::__shared_weak_count *)v98[2];
    v98[1] = 0;
    v98[2] = 0;
    if (v99)
    {
      p_shared_owners = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(p_shared_owners);
      while (__stlxr(v101 - 1, p_shared_owners));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    sub_207CDE4AC(v97 + 480 * v96 + 24, (uint64_t *)&v131[1] + 1);
    v102 = v97 + 480 * v96;
    *(_QWORD *)(v102 + 456) = v141;
    v103 = v142;
    v142 = 0uLL;
    v104 = *(std::__shared_weak_count **)(v102 + 472);
    *(_OWORD *)(v102 + 464) = v103;
    if (!v104)
      goto LABEL_62;
    v105 = (unint64_t *)&v104->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
      v107 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
LABEL_63:
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
    }
    else
    {
LABEL_62:
      v107 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
        goto LABEL_63;
    }
    if (v140)
    {
      v110 = v139;
      if (!v139)
        goto LABEL_73;
      v111 = (unint64_t *)&v139->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
        v113 = v138;
        if (v138)
        {
LABEL_74:
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
      }
      else
      {
LABEL_73:
        v113 = v138;
        if (v138)
          goto LABEL_74;
      }
      v116 = v137;
      if (!v137)
        goto LABEL_83;
      v117 = (unint64_t *)&v137->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
        v119 = __p;
        if (__p)
        {
LABEL_84:
          v136 = v119;
          operator delete(v119);
        }
      }
      else
      {
LABEL_83:
        v119 = __p;
        if (__p)
          goto LABEL_84;
      }
      if (v133)
      {
        v134 = v133;
        operator delete(v133);
      }
    }
    v120 = *(std::__shared_weak_count **)&v131[1];
    if (*(_QWORD *)&v131[1])
    {
      v121 = (unint64_t *)(*(_QWORD *)&v131[1] + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v38 = a2[6];
    v37 = a2[7];
    v39 = 0xEEEEEEEEEEEEEEEFLL * ((v37 - v38) >> 5);
    v40 = a2[9] + 1;
    if (v40 < v39)
      v39 = 0;
    v36 = v40 - v39;
    a2[9] = v36;
    --a2[11];
    if (++v35 <= v127)
      continue;
    break;
  }
  v123 = *(_OWORD *)(v13 - 56);
  v124 = *(_OWORD *)(v13 - 40);
  v125 = *(_OWORD *)(v13 - 24);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)v13 - 1);
  *(_OWORD *)(a1 + 16) = v124;
  *(_OWORD *)(a1 + 32) = v125;
  *(_OWORD *)a1 = v123;
  *(_BYTE *)(a1 + 56) = 1;
  sub_207CDB17C(a1 + 64, *((_QWORD *)&v129 + 1) - 480);
  *(_QWORD *)&v131[0] = &v129;
  sub_207CDA9D4((void ***)v131);
  if (v6)
    operator delete(v6);
}

void sub_207CE0354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  void *v21;

  a21 = (void **)&a17;
  sub_207CDA9D4(&a21);
  if (v21)
    operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_207CE03AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C070F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CE03BC(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C070F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CE03DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 536))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 536))
LABEL_6:
    sub_207CDAEE4((_QWORD *)(a1 + 112));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 104);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t sub_207CE0490(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = off_24C070D38;
  *(_QWORD *)(a1 + 16) = &unk_24C070DB0;
  *(_QWORD *)(a1 + 24) = &unk_24C070DF0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207CE05D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_207CE0670()
{
  __break(1u);
}

void sub_207CE071C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x207CE073CLL);
}

void sub_207CE074C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CE0760(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CE0778(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3api8SLAMDataE"
                     "vvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3ap"
                                "i8SLAMDataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3api8SLAMDataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3api8SLAMDataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CE07E8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CE0814(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CE0840@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C070FD8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_207CE0898(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CE0928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE093C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CE09CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE09E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CE0AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE0AB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CE0B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE0B90(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CE0C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE0C4C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE1B78(a1);
  operator delete(v1);
}

void sub_207CE0C60(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _BYTE v5[8];
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    v5[0] = 0;
    v6 = 0;
    sub_207CE1CC0(a1 + 11, a2, (uint64_t)v5);
    if (v6)
      MEMORY[0x20BD0277C](v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_207CE0D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    MEMORY[0x20BD0277C](&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE0D44(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CE0D54(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CE0D60(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_207CE0D70(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_207CAC8F4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v13, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_207CE1CC0(a1 + 11, a2, (uint64_t)&v14);
  if (v15)
    MEMORY[0x20BD0277C](&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_207CE0F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19)
{
  std::promise<void> *v19;
  std::exception_ptr v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v20.__ptr_ = &a19;
    std::promise<void>::set_exception(v19, v20);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (a17 < 0)
      operator delete(__p);
    JUMPOUT(0x207CE0E34);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CE0FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::recursive_mutex *v14;

  if ((_BYTE)a12)
    MEMORY[0x20BD0277C](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_207CE0FC8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_207CE104C(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 96);
  v4 = (_QWORD *)(a1 + 96);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_207CE10DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CE10F0(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_207CE1180(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CE1194(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_207CE11C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_207CE11FC(uint64_t a1)
{
  return sub_207CE1B78(a1 - 16);
}

void sub_207CE1204(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE1B78(a1 - 16);
  operator delete(v1);
}

void sub_207CE121C(uint64_t a1)
{
  sub_207CE104C(a1 - 16);
}

void sub_207CE1224(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

void sub_207CE1258(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_207CE128C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_207CE1294(uint64_t a1)
{
  return sub_207CE1B78(a1 - 24);
}

void sub_207CE129C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE1B78(a1 - 24);
  operator delete(v1);
}

void sub_207CE12B4(uint64_t a1)
{
  sub_207CE10F0(a1 - 24);
}

uint64_t sub_207CE12BC(uint64_t a1)
{
  return a1 - 24;
}

void sub_207CE12CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  double v44;
  _DWORD *v45;
  uint64_t v46;
  double v47;
  _DWORD *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE v91[32];
  __int128 v92;
  __int128 v93;
  void *__p;
  __int128 v95;
  uint64_t v96;
  int v97;
  void *v98[2];
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[24];
  __int128 v123;
  __int128 v124;
  char v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 48);
  v5 = v4 + 480 * v3;
  sub_207CDB17C((uint64_t)v91, a2);
  *(_QWORD *)v5 = *(_QWORD *)v91;
  v6 = *(_OWORD *)&v91[8];
  *(_QWORD *)&v91[8] = 0;
  *(_QWORD *)&v91[16] = 0;
  v7 = *(std::__shared_weak_count **)(v5 + 16);
  *(_OWORD *)(v5 + 8) = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_207CDE4AC(v4 + 480 * v3 + 24, (uint64_t *)&v91[24]);
  v10 = v4 + 480 * v3;
  *(_QWORD *)(v10 + 456) = *(_QWORD *)v122;
  v11 = *(_OWORD *)&v122[8];
  *(_QWORD *)&v122[8] = 0;
  *(_QWORD *)&v122[16] = 0;
  v12 = *(std::__shared_weak_count **)(v10 + 472);
  *(_OWORD *)(v10 + 464) = v11;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(std::__shared_weak_count **)&v122[16];
  if (*(_QWORD *)&v122[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v122[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (BYTE8(v121))
  {
    v18 = (std::__shared_weak_count *)v121;
    if ((_QWORD)v121)
    {
      v19 = (unint64_t *)(v121 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)v120;
    if ((_QWORD)v120)
    {
      v22 = (unint64_t *)(v120 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (std::__shared_weak_count *)v106;
    if ((_QWORD)v106)
    {
      v25 = (unint64_t *)(v106 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (__p)
    {
      *(_QWORD *)&v95 = __p;
      operator delete(__p);
    }
    if (*((_QWORD *)&v92 + 1))
    {
      *(_QWORD *)&v93 = *((_QWORD *)&v92 + 1);
      operator delete(*((void **)&v92 + 1));
    }
  }
  v27 = *(std::__shared_weak_count **)&v91[16];
  if (*(_QWORD *)&v91[16])
  {
    v28 = (unint64_t *)(*(_QWORD *)&v91[16] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = *(_QWORD *)(v2 + 48);
  v31 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v2 + 56) - v30) >> 5);
  v32 = *(_QWORD *)(v2 + 88);
  v33 = *(_QWORD *)(v2 + 80) + 1;
  if (v33 >= v31)
    v34 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v2 + 56) - v30) >> 5);
  else
    v34 = 0;
  *(_QWORD *)(v2 + 80) = v33 - v34;
  if (v32 == v31)
  {
    v35 = *(_QWORD *)(v2 + 72) + 1;
    if (v35 >= v31)
      v36 = v31;
    else
      v36 = 0;
    *(_QWORD *)(v2 + 72) = v35 - v36;
    v37 = v31;
    if (!*(_BYTE *)(v2 + 105))
      return;
  }
  else
  {
    v37 = v32 + 1;
    *(_QWORD *)(v2 + 88) = v32 + 1;
    if (!*(_BYTE *)(v2 + 105))
      return;
  }
  if (v33 == v34)
    v38 = v31;
  else
    v38 = v33 - v34;
  v39 = *(double *)(v30 + 480 * v38 - 24);
  v40 = *(double *)(v2 + 96);
  v41 = *(_QWORD *)(v2 + 40);
  v42 = v41 - 1;
  while (1)
  {
    v43 = __OFSUB__((_DWORD)v41, 1);
    LODWORD(v41) = v41 - 1;
    if ((int)v41 < 0 != v43)
      break;
    v44 = vabdd_f64(*(double *)(*(_QWORD *)v2+ 56* ((*(_QWORD *)(v2 + 24) + (unint64_t)v42--)% (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3)))+ 48), v39);
    if (v44 < v40)
      goto LABEL_59;
  }
  LODWORD(v41) = -1;
LABEL_59:
  v45 = operator new(4uLL);
  *v45 = v41;
  v46 = v37 - 1;
  while (1)
  {
    v43 = __OFSUB__(v37--, 1);
    if (v37 < 0 != v43)
      break;
    v47 = vabdd_f64(*(double *)(v30 + 480 * ((*(_QWORD *)(v2 + 72) + (unint64_t)v46--) % v31) + 456), v39);
    if (v47 < v40)
      goto LABEL_64;
  }
  v37 = -1;
LABEL_64:
  v48 = operator new(8uLL);
  *v48 = v41;
  v48[1] = v37;
  operator delete(v45);
  if ((*v48 & 0x80000000) == 0 && (v48[1] & 0x80000000) == 0)
  {
    v128 = *(_QWORD *)v48;
    sub_207CDF998((uint64_t)v91, (uint64_t *)v2, (int *)&v128);
    v49 = (char *)operator new(0x238uLL);
    v50 = *(_OWORD *)&v91[16];
    *(_OWORD *)(v49 + 24) = *(_OWORD *)v91;
    *(_OWORD *)(v49 + 40) = v50;
    v51 = v93;
    *(_OWORD *)(v49 + 56) = v92;
    *((_QWORD *)v49 + 1) = 0;
    *((_QWORD *)v49 + 2) = 0;
    *(_QWORD *)v49 = off_24C070F38;
    *(_OWORD *)(v49 + 72) = v51;
    *((_QWORD *)v49 + 11) = __p;
    *((_OWORD *)v49 + 6) = v95;
    v95 = 0uLL;
    v49[112] = 0;
    v49[536] = 0;
    if (v125)
    {
      *((_QWORD *)v49 + 14) = v96;
      *((_DWORD *)v49 + 30) = v97;
      *((_OWORD *)v49 + 8) = *(_OWORD *)v98;
      *((_QWORD *)v49 + 18) = v99;
      v98[0] = 0;
      v98[1] = 0;
      *(_OWORD *)(v49 + 152) = *(_OWORD *)v100;
      v52 = v109;
      *((_QWORD *)v49 + 21) = v101;
      v99 = 0;
      v100[0] = 0;
      v100[1] = 0;
      v101 = 0;
      v53 = v102;
      v54 = v103;
      v55 = v105;
      *((_OWORD *)v49 + 13) = v104;
      *((_OWORD *)v49 + 14) = v55;
      *((_OWORD *)v49 + 11) = v53;
      *((_OWORD *)v49 + 12) = v54;
      v56 = v106;
      v57 = v107;
      v58 = v108;
      *((_QWORD *)v49 + 36) = v52;
      *((_OWORD *)v49 + 16) = v57;
      *((_OWORD *)v49 + 17) = v58;
      *((_OWORD *)v49 + 15) = v56;
      v59 = v111;
      *(_OWORD *)(v49 + 296) = v110;
      v110 = 0uLL;
      v60 = v112;
      v61 = v113;
      *(_OWORD *)(v49 + 312) = v59;
      *(_OWORD *)(v49 + 328) = v60;
      v62 = v114;
      v63 = v115;
      v64 = *(_QWORD *)&v122[16];
      *((_QWORD *)v49 + 49) = v116;
      *(_OWORD *)(v49 + 360) = v62;
      *(_OWORD *)(v49 + 376) = v63;
      *(_OWORD *)(v49 + 344) = v61;
      v65 = v118;
      *((_OWORD *)v49 + 25) = v117;
      *((_OWORD *)v49 + 26) = v65;
      v66 = v119;
      v67 = v120;
      v68 = v121;
      v69 = *(_OWORD *)v122;
      *((_QWORD *)v49 + 62) = v64;
      *((_OWORD *)v49 + 29) = v68;
      *((_OWORD *)v49 + 30) = v69;
      *((_OWORD *)v49 + 27) = v66;
      *((_OWORD *)v49 + 28) = v67;
      v70 = v123;
      v71 = v124;
      v123 = 0uLL;
      *(_OWORD *)(v49 + 504) = v70;
      *(_OWORD *)(v49 + 520) = v71;
      v124 = 0uLL;
      v49[536] = 1;
    }
    *((_QWORD *)v49 + 68) = v126;
    *(_OWORD *)(v49 + 552) = v127;
    v127 = 0uLL;
    v72 = *(std::__shared_weak_count **)(v2 + 120);
    *(_QWORD *)(v2 + 112) = v49 + 24;
    *(_QWORD *)(v2 + 120) = v49;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
    if (*((_QWORD *)&v127 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    if (v125)
    {
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
      if (*((_QWORD *)&v124 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
      if (*((_QWORD *)&v110 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v100[0])
      {
        v100[1] = v100[0];
        operator delete(v100[0]);
      }
      if (v98[0])
      {
        v98[1] = v98[0];
        operator delete(v98[0]);
      }
    }
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
    if (*((_QWORD *)&v95 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 72);
    v91[0] = 1;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v90 + 424) + 16))(v90 + 424, v91);
  }
  operator delete(v48);
}

void sub_207CE19E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207CE19F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a71;
  void *v71;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;

  v73 = (std::__shared_weak_count *)STACK[0x220];
  if (STACK[0x220])
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (LOBYTE(STACK[0x208]))
  {
    v76 = (std::__shared_weak_count *)STACK[0x200];
    if (STACK[0x200])
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (a71)
    {
      v79 = (unint64_t *)&a71->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))a71->__on_zero_shared)(a71);
        std::__shared_weak_count::__release_weak(a71);
      }
    }
    if (a45)
    {
      v81 = (unint64_t *)&a45->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))a45->__on_zero_shared)(a45);
        std::__shared_weak_count::__release_weak(a45);
      }
    }
    if (__p)
      operator delete(__p);
    if (a23)
      operator delete(a23);
  }
  if (a20)
  {
    v83 = (unint64_t *)&a20->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))a20->__on_zero_shared)(a20);
      std::__shared_weak_count::__release_weak(a20);
      operator delete(v71);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v71);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE1B78(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = off_24C071050;
  *(_QWORD *)(a1 + 16) = &unk_24C0710C8;
  *(_QWORD *)(a1 + 24) = &unk_24C071108;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v8 = *(_QWORD *)(a1 + 96);
    v7 = *(uint64_t **)(a1 + 104);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v7 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207CE1CC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_207CE1D58()
{
  __break(1u);
}

void sub_207CE1E04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x207CE1E24);
}

void sub_207CE1E34(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CE1E48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CE1E60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3api15CameraFr"
                     "ameDataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3ap"
                                "i15CameraFrameDataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3api15CameraFrameDataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorINS1_7appcode3api15CameraFrameDataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CE1ED0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CE1EFC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CE1F28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C071290;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_207CE1F80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CE2010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE2024(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CE20B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE20C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CE218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE21A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CE2264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE2278(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CE231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE2334(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE2AE8(a1);
  operator delete(v1);
}

void sub_207CE2348(uint64_t *a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  char v6;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 48))(a1))
  {
    v4 = (std::recursive_mutex *)a1[9];
    if (!v4)
    {
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 177, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
      v4 = (std::recursive_mutex *)a1[9];
    }
    std::recursive_mutex::lock(v4);
    LOBYTE(v5) = 0;
    v6 = 0;
    sub_207CE2C44(a1 + 11, a2, &v5);
    if (v6)
      sub_207CE2FE0(&v5);
    std::recursive_mutex::unlock(v4);
  }
}

void sub_207CE2404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  if (a10)
    sub_207CE2FE0(&a9);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE242C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CE243C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CE2448(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_207CE2458(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  uint64_t v14;
  char v15;
  std::string v16;
  std::runtime_error v17;
  _QWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1) & 1) == 0)
  {
    v18[0] = "Invalid operation. Interface is disabled for ";
    v18[1] = 45;
    v9 = a1[6];
    v8 = a1 + 6;
    v7 = (_QWORD *)v9;
    v10 = *((unsigned __int8 *)v8 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = v8[1];
    else
      v7 = v8;
    v18[2] = v7;
    v18[3] = v10;
    sub_207CAC8F4((uint64_t)v18, (uint64_t)&v19, 0, 0, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v17, (const char *)v11);
    v17.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = std::runtime_error::runtime_error(exception, &v17);
    v13->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v13, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (std::recursive_mutex *)a1[9];
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 211, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = (std::recursive_mutex *)a1[9];
  }
  std::recursive_mutex::lock(v6);
  v14 = *a3;
  *a3 = 0;
  v15 = 1;
  sub_207CE2C44(a1 + 11, a2, &v14);
  if (v15)
    sub_207CE2FE0(&v14);
  std::recursive_mutex::unlock(v6);
}

void sub_207CE25F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::__assoc_sub_state **v20;
  std::__assoc_sub_state *v21;
  std::exception_ptr v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v21 = *v20;
    if (v21)
    {
      std::exception_ptr::exception_ptr(&a20, &a19);
      v22.__ptr_ = &a20;
      std::__assoc_sub_state::set_exception(v21, v22);
      std::exception_ptr::~exception_ptr(&a20);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (a17 < 0)
        operator delete(__p);
      JUMPOUT(0x207CE251CLL);
    }
    sub_207CD3824(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CE2664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18, std::exception_ptr a19, std::exception_ptr a20)
{
  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207CE26C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  std::recursive_mutex *v13;

  if ((_BYTE)a11)
    sub_207CE2FE0(&a10);
  std::recursive_mutex::unlock(v13);
  _Unwind_Resume(a1);
}

void sub_207CE26E8(uint64_t a1)
{
  std::recursive_mutex *v1;
  std::recursive_mutex *v3;

  v1 = *(std::recursive_mutex **)(a1 + 72);
  if (v1)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 72));
    std::recursive_mutex::unlock(v1);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 138, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v3 = *(std::recursive_mutex **)(a1 + 72);
    std::recursive_mutex::lock(v3);
    std::recursive_mutex::unlock(v3);
  }
}

void sub_207CE276C(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  if (!v4)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 148, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v4 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v4);
  v5 = operator new(0x20uLL);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5[2] = &off_24C070A60;
  v5[3] = v6;
  v8 = *(_QWORD *)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  *v5 = v8;
  v5[1] = v7;
  *(_QWORD *)(v8 + 8) = v5;
  *v7 = v5;
  ++v7[2];
  std::recursive_mutex::unlock(v4);
}

void sub_207CE281C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CE2830(uint64_t a1)
{
  std::recursive_mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(std::recursive_mutex **)(a1 + 72);
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/SynchronousProcessor.h", 159, (uint64_t)"sync_", 5, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = *(std::recursive_mutex **)(a1 + 72);
  }
  std::recursive_mutex::lock(v2);
  v3 = operator new(0x18uLL);
  v5 = *(_QWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 120);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  ++v4[2];
  std::recursive_mutex::unlock(v2);
}

void sub_207CE28C0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CE28D4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v4);
  sub_207CE3108(a2, a1 + 96);
  std::recursive_mutex::unlock(v4);
}

void sub_207CE2918(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CE292C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 72);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_207CE2960(uint64_t a1)
{
  return sub_207CE2AE8(a1 - 16);
}

void sub_207CE2968(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE2AE8(a1 - 16);
  operator delete(v1);
}

void sub_207CE2980(uint64_t a1, uint64_t a2)
{
  sub_207CE276C(a1 - 16, a2);
}

void sub_207CE2988(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::recursive_mutex *v4;

  v4 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v4);
  sub_207CE3108(a2, a1 + 80);
  std::recursive_mutex::unlock(v4);
}

void sub_207CE29CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_207CE29E0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v3;

  v3 = *(std::recursive_mutex **)(a1 + 56);
  std::recursive_mutex::lock(v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::recursive_mutex::unlock(v3);
}

uint64_t sub_207CE2A14(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_207CE2A1C(uint64_t a1)
{
  return sub_207CE2AE8(a1 - 24);
}

void sub_207CE2A24(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CE2AE8(a1 - 24);
  operator delete(v1);
}

void sub_207CE2A3C(uint64_t a1)
{
  sub_207CE2830(a1 - 24);
}

uint64_t sub_207CE2A44(uint64_t a1)
{
  return a1 - 24;
}

void sub_207CE2A54(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 112);
  v4 = *(std::__shared_weak_count **)(v2 + 120);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a2 = v3;
    a2[1] = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a2 = v3;
    a2[1] = 0;
  }
}

uint64_t sub_207CE2AE8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a1 = off_24C071308;
  *(_QWORD *)(a1 + 16) = &unk_24C071380;
  *(_QWORD *)(a1 + 24) = &unk_24C0713C0;
  if (*(_QWORD *)(a1 + 136))
  {
    v2 = (uint64_t *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 120);
    v3 = *(uint64_t **)(a1 + 128);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 136) = 0;
    if (v3 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v7 = *(_QWORD *)(a1 + 96);
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    *(_QWORD *)(a1 + 112) = 0;
    if (v8 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != (uint64_t *)(a1 + 96));
    }
  }
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_13:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v15)
      return a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_18;
LABEL_14:
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
LABEL_15:
    std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207CE2C44(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::exception_ptr v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v6 = *a1;
  if (!v6)
  {
    sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
    v7 = atomic_load((unsigned __int8 *)&qword_254530A20);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
    {
      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
      __cxa_guard_release(&qword_254530A20);
    }
    if (byte_254530A10)
      v8 = byte_254530A18 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_2545309E8;
      for (i = qword_2545309F0; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254530A20);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
    {
      __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
      __cxa_guard_release(&qword_254530A20);
    }
    if (!byte_254530A10)
      abort();
    qword_254530A00(*(_QWORD *)algn_254530A08, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v20, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v20);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_207CD3824(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v19.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v19), v15))
    {
      sub_207CD3824(2u);
    }
    v16 = v21;
    *(_QWORD *)(v14 + 144) = v20;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_207CE2ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, uint64_t a18, std::__shared_weak_count *a19)
{
  std::mutex *v19;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  std::mutex::unlock(v19);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a2 == 1)
  {
    v22 = (uint64_t *)__cxa_begin_catch(a1);
    v23 = *v22;
    a11 = *(_QWORD *)(*(_QWORD *)(*v22 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v23 + 16))();
    sub_207CD34F4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v24 = (uint64_t *)&a12;
    else
      v24 = a12;
    if ((a17 & 0x80u) == 0)
      v25 = a17;
    else
      v25 = a13;
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v24, v25, (void (*)(void **))sub_208216974);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_207CE2FB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x207CE2FD4);
}

uint64_t *sub_207CE2FE0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x20BD02194](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_207CE30CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x20BD021A0](&a11);
  JUMPOUT(0x207CE3028);
}

char *sub_207CE3108(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *result;
  char *v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t *v12;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = 0;
  v9 = 0uLL;
  if (v4)
  {
    if (v4 >> 61)
      sub_207CA420C();
    result = (char *)operator new(8 * v4);
    v6 = &result[8 * v4];
    v9.i64[0] = (uint64_t)result;
    v9.i64[1] = (uint64_t)result;
    v10 = v6;
    v7 = *(_QWORD *)(a2 + 8);
    v12 = &v9;
    if (v7 != a2)
      goto LABEL_4;
LABEL_7:
    v8 = vdupq_n_s64((unint64_t)result);
    goto LABEL_8;
  }
  v6 = 0;
  result = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v12 = &v9;
  if (v7 == a2)
    goto LABEL_7;
  do
  {
LABEL_4:
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 48))(*(_QWORD *)(v7 + 24));
    result = (char *)sub_207CD6B94((uint64_t *)&v12, &v11);
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a2);
  v8 = v9;
  v6 = v10;
LABEL_8:
  *a1 = v8;
  a1[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_207CE31E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207CE3208(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CE321C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CE3234(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbNS_8weak_ptrINS1_7appcode"
                     "3api21AppCodeProcessorInputEEEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbNS_8weak_ptrIN"
                                "S1_7appcode3api21AppCodeProcessorInputEEEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbNS_8weak_ptrINS1_7appcode3api21AppCodeProcessorInputEEEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail20SynchronousProcessorIbNS_8weak_ptrINS1_7appcode3api21AppCodeProcessorInputEEEvSA_Lb0EEEE27__shared_ptr_default_deleteISB_SB_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CE32A4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CE32D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CE32FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C071558;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_207CE3354(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CE33E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE33F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CE3488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE349C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CE3560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE3574(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CE3638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE364C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CE36F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE3704(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = off_24C070C98;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2081FD738(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C0705D0;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C070D00;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C070CC8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_207CE38E8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = off_24C070C30;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2081FD738(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C0705D0;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C070A28;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C070C60;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_207CE3ACC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = off_24C070BC8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2081FD738(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24C0705D0;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24C070A28;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24C070BF8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_207CE3CB0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = off_24C070B48;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_207CE3704(v2 + 336);
    sub_207CE38E8(v2 + 168);
    v3 = (void *)sub_207CE3ACC(v2);
    operator delete(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    sub_207CE3704(v7 + 336);
    sub_207CE38E8(v7 + 168);
    v8 = (void *)sub_207CE3ACC(v7);
    operator delete(v8);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_207CE3DF0(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  int v10;
  int v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  float64x2_t v39;
  __int128 v40;
  float64x2_t v41;
  float64x2_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  char *v60;
  char *v61;
  _OWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _OWORD *v70;
  _QWORD *v71;
  int64_t v72;
  unint64_t v73;
  int64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unsigned __int8 v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  char ***v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  char ***v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  int v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  char *v117;
  void *v118;
  _QWORD *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  std::__shared_weak_count *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *p_shared_weak_owners;
  unint64_t v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char ***v145;
  std::__shared_weak_count *v146;
  _QWORD *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  std::__shared_weak_count *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void **v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void **v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192;
  _QWORD *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  char *v198;
  void *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  void **v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  char *v207;
  _QWORD *exception;
  uint64_t v209;
  uint64_t v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count_vtbl *v213;
  uint64_t v214;
  _BYTE v215[24];
  __int128 v216;
  uint64_t v217;
  __int128 v218;
  char *v219;
  char ***v220;
  std::__shared_weak_count *v221;
  void *v222;
  char v223;
  char v224;
  void *v225;
  char v226;
  void *v227;
  char v228;
  char v229;
  char v230;
  char v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  char v237;
  __int128 v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  char v242;
  __int128 v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  char v249;
  int v250;
  uint64_t v251;
  char v252;
  char v253;
  __int128 v254;
  char v255;
  BOOL v256;
  char ***v257;
  std::__shared_weak_count *v258;
  char ***v259;
  std::__shared_weak_count *v260;
  void *v261;
  void (*v262)(void **);
  int v263;
  void *v264;
  void *v265;
  char ***v266;
  std::__shared_weak_count *v267;
  void *v268;
  char *v269;
  void *v270;
  char v271;
  char ***v272;
  std::__shared_weak_count *v273;
  void *v274;
  void (*v275)(void **);
  int v276;
  void *v277;
  _OWORD v278[3];
  _BYTE v279[40];
  __int128 v280;
  __int128 v281;
  __int128 v282;
  _BYTE v283[32];
  uint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  __int128 v287;
  __int128 v288;
  float64x2_t v289;
  __int128 v290;
  float64x2_t v291;
  uint64_t v292;
  float64x2_t v293;
  _QWORD v294[4];
  float64x2_t v295;
  _QWORD v296[6];
  __int16 v297;
  char v298;
  char v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  char v303;
  char v304;
  int v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  char ***v308;
  std::__shared_weak_count *v309;
  __int128 v310;
  void *v311;
  void (*v312)(void **);
  int v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  _DWORD v316[2];
  void *v317[3];
  uint64_t v318;
  _BYTE v319[24];
  std::__shared_weak_count_vtbl *v320;
  std::__shared_weak_count *v321;
  char *v322;
  std::__shared_weak_count *v323;
  uint64_t (**v324)();
  _QWORD *v325;
  char *v326;
  std::__shared_weak_count *v327;
  uint64_t (**v328)();
  char *v329;
  std::__shared_weak_count *v330;
  uint64_t (**v331)();
  char *v332;
  std::__shared_weak_count *v333;
  _QWORD v334[2];
  _QWORD v335[2];
  _QWORD v336[2];
  _QWORD v337[5];

  v337[2] = *MEMORY[0x24BDAC8D0];
  v7 = *((_DWORD *)a2 + 35);
  if (v7 == 2)
    v8 = 1;
  else
    v8 = 2 * (v7 == 1);
  LODWORD(v232) = v8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(&v233, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v233 = *a2;
    v234 = *((_QWORD *)a2 + 2);
  }
  LOBYTE(v235) = 0;
  v237 = 0;
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_207CA40D8(&v235, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
      v235 = *(__int128 *)((char *)a2 + 24);
      v236 = *((_QWORD *)a2 + 5);
    }
    v237 = 1;
  }
  if (*((char *)a2 + 79) < 0)
  {
    sub_207CA40D8(&v238, *((void **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v238 = *(__int128 *)((char *)a2 + 56);
    v239 = *((_QWORD *)a2 + 9);
  }
  LOBYTE(v240) = 0;
  v242 = 0;
  if (*((_BYTE *)a2 + 104))
  {
    if (*((char *)a2 + 103) < 0)
    {
      sub_207CA40D8(&v240, *((void **)a2 + 10), *((_QWORD *)a2 + 11));
    }
    else
    {
      v240 = a2[5];
      v241 = *((_QWORD *)a2 + 12);
    }
    v242 = 1;
  }
  if (*((char *)a2 + 135) < 0)
  {
    sub_207CA40D8(&v243, *((void **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v243 = a2[7];
    v244 = *((_QWORD *)a2 + 16);
  }
  v245 = *((_BYTE *)a2 + 137);
  v246 = *((_QWORD *)a2 + 19);
  v247 = *((_BYTE *)a2 + 160);
  v248 = *((_QWORD *)a2 + 21);
  v249 = *((_BYTE *)a2 + 176);
  v253 = 1;
  v254 = xmmword_2082301F0;
  v255 = 1;
  v251 = *((_QWORD *)a2 + 23);
  v252 = *((_BYTE *)a2 + 192);
  v256 = *((_DWORD *)a2 + 36) == 1;
  if (*((_DWORD *)a2 + 50))
    _ZF = *((_BYTE *)a2 + 204) == 0;
  else
    _ZF = 1;
  if (_ZF)
    v10 = 3;
  else
    v10 = 2;
  v250 = v10;
  sub_207D02E34(&v232, (uint64_t)&v220);
  if (!v231)
  {
    v83 = atomic_load((unsigned __int8 *)&qword_253E50C40);
    if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C40))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C38, &dword_207C77000);
      __cxa_guard_release(&qword_253E50C40);
    }
    v214 = 5;
    *(_QWORD *)v215 = &off_253E50C38;
    if (v231)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C072430;
      __cxa_throw(exception, (struct type_info *)&unk_24C06FB68, (void (*)(void *))std::exception::~exception);
    }
    sub_208212E0C((uint64_t)&v220, (std::string *)&v277);
    sub_207D01528((const std::error_condition *)&v214, (uint64_t)&v277, (CFErrorRef *)&v310);
    v84 = v310;
    v310 = 0uLL;
    *(_OWORD *)a4 = v84;
    *(_BYTE *)(a4 + 80) = 0;
    if (SHIBYTE(v278[0]) < 0)
    {
      operator delete(v277);
      if (!v231)
        goto LABEL_262;
    }
    else if (!v231)
    {
      goto LABEL_262;
    }
    goto LABEL_92;
  }
  v11 = *((_DWORD *)a2 + 36);
  v272 = v220;
  v273 = v221;
  if (v221)
  {
    p_shared_owners = (unint64_t *)&v221->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (uint64_t *)operator new(0x18uLL);
  v15 = v14;
  *v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  v274 = v14;
  v275 = sub_207CDC8C0;
  v209 = a4;
  if (v14 == *a3)
  {
    v276 = v11;
    v91 = *v14;
    v90 = v14[1];
    memset(v317, 0, sizeof(v317));
    v18 = v90 - v91;
    if (v18)
      goto LABEL_36;
  }
  else
  {
    sub_207CDC208((uint64_t)v14, (_QWORD *)**a3, (*a3)[1], 0x77A04C8F8D28AC43 * (((*a3)[1] - **a3) >> 3));
    v15 = *a3;
    v276 = v11;
    if (!v15)
    {
      LOBYTE(v268) = 0;
      v271 = 0;
      v89 = v220;
      v88 = v221;
      v266 = v220;
      v267 = v221;
      if (!v221)
        goto LABEL_108;
      goto LABEL_106;
    }
    v17 = *v15;
    v16 = v15[1];
    memset(v317, 0, sizeof(v317));
    v18 = v16 - v17;
    if (v18)
    {
LABEL_36:
      v19 = 0x77A04C8F8D28AC43 * (v18 >> 3);
      if (v19 >> 60)
        sub_207CA420C();
      v20 = (char *)operator new(0x7A04C8F8D28AC430 * (v18 >> 3));
      v18 = (uint64_t)&v20[16 * v19];
      v317[0] = v20;
      v317[1] = v20;
      v317[2] = (void *)v18;
      v22 = *v15;
      v21 = v15[1];
      if (*v15 != v21)
        goto LABEL_38;
LABEL_103:
      v268 = v20;
      v269 = v20;
      v270 = (void *)v18;
      v271 = 1;
      v89 = v220;
      v88 = v221;
      v266 = v220;
      v267 = v221;
      if (!v221)
        goto LABEL_108;
      goto LABEL_106;
    }
  }
  v20 = 0;
  v22 = *v15;
  v21 = v15[1];
  if (*v15 == v21)
    goto LABEL_103;
LABEL_38:
  v23 = &v278[2];
  v211 = v21;
  do
  {
    v25 = operator new(0x20uLL);
    *v25 = 0u;
    v25[1] = 0u;
    *((_QWORD *)&v278[0] + 1) = v25;
    *(_QWORD *)&v278[1] = v25 + 2;
    *v23 = 0u;
    v23[1] = 0u;
    v23[2] = 0u;
    v23[3] = 0u;
    v23[4] = 0u;
    v23[5] = 0u;
    v23[6] = 0u;
    v23[7] = 0u;
    v23[8] = 0u;
    v23[9] = 0u;
    v23[10] = 0u;
    v292 = 0x3FF0000000000000;
    v290 = xmmword_208230250;
    v291 = (float64x2_t)unk_208230260;
    v288 = xmmword_208230230;
    v289 = (float64x2_t)unk_208230240;
    v293 = 0u;
    memset(v294, 0, sizeof(v294));
    v295 = 0u;
    memset(v296, 0, 40);
    *((_QWORD *)&v278[1] + 1) = v25 + 2;
    v296[5] = 0xBFF0000000000000;
    v297 = 0;
    v298 = 0;
    v299 = 0;
    v300 = 0x3FF0000000000000;
    v301 = 0x3F847AE147AE147BLL;
    v302 = 0;
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v306 = 0;
    v307 = 0;
    v277 = *(void **)(v22 + 8);
    LODWORD(v278[0]) = *(_DWORD *)(v22 + 16);
    if (&v277 != (void **)(v22 + 8))
    {
      sub_207CDADA0((_QWORD *)v278 + 1, *(char **)(v22 + 24), *(char **)(v22 + 32), (uint64_t)(*(_QWORD *)(v22 + 32) - *(_QWORD *)(v22 + 24)) >> 3);
      sub_207CDADA0(v23, *(char **)(v22 + 48), *(char **)(v22 + 56), (uint64_t)(*(_QWORD *)(v22 + 56) - *(_QWORD *)(v22 + 48)) >> 3);
    }
    v26 = *(_OWORD *)(v22 + 136);
    v27 = *(_OWORD *)(v22 + 152);
    v28 = *(_OWORD *)(v22 + 168);
    v29 = *(_QWORD *)(v22 + 192);
    v284 = *(_QWORD *)(v22 + 184);
    v30 = *(_OWORD *)(v22 + 72);
    v31 = *(_OWORD *)(v22 + 88);
    v32 = *(_OWORD *)(v22 + 120);
    v280 = *(_OWORD *)(v22 + 104);
    v281 = v32;
    *(_OWORD *)&v279[8] = v30;
    *(_OWORD *)&v279[24] = v31;
    *(_OWORD *)v283 = v27;
    *(_OWORD *)&v283[16] = v28;
    v282 = v26;
    v33 = *(std::__shared_weak_count **)(v22 + 200);
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v36 = v286;
    v285 = v29;
    v286 = v33;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(float64x2_t *)(v22 + 240);
    v40 = *(_OWORD *)(v22 + 256);
    v41 = *(float64x2_t *)(v22 + 272);
    v292 = *(_QWORD *)(v22 + 288);
    v42 = *(float64x2_t *)(v22 + 224);
    v287 = *(_OWORD *)(v22 + 208);
    v288 = (__int128)v42;
    v290 = v40;
    v291 = v41;
    v289 = v39;
    *(float *)v39.f64 = *(double *)(v22 + 296);
    *(float *)v41.f64 = *(double *)(v22 + 328);
    *(float *)v42.f64 = *(double *)(v22 + 360);
    *(float *)&v40 = *(double *)(v22 + 304);
    v43 = *(double *)(v22 + 336);
    v44 = *(double *)(v22 + 368);
    v45 = *(double *)(v22 + 312);
    v46 = *(double *)(v22 + 344);
    v47 = *(double *)(v22 + 376);
    v48 = *(double *)(v22 + 320);
    v49 = *(double *)(v22 + 352);
    v50 = *(double *)(v22 + 384);
    v39.f64[0] = *(float *)v39.f64;
    v41.f64[0] = *(float *)v41.f64;
    v42.f64[0] = *(float *)v42.f64;
    _D16 = v46;
    _D18 = v47;
    _Q7.f64[0] = v48;
    _D19 = v50;
    _Q7.f64[1] = v49;
    v42.f64[1] = v44;
    v39.f64[1] = *(float *)&v40;
    v41.f64[1] = v43;
    __asm
    {
      FMLS            D3, D16, V7.D[1]
      FMLS            D3, D18, V19.D[0]
    }
    *(double *)&v294[3] = v45;
    *(float64x2_t *)&v294[1] = v39;
    *(double *)v296 = _D16;
    v295 = v41;
    *(double *)&v296[3] = _D18;
    *(float64x2_t *)&v296[1] = v42;
    v293 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v39, vnegq_f64(_Q7).f64[0]), v41, _Q7, 1), v42, _D19, 0);
    v294[0] = _D3;
    v60 = (char *)operator new(0x220uLL);
    *((_QWORD *)v60 + 1) = 0;
    *((_QWORD *)v60 + 2) = 0;
    *(_QWORD *)v60 = off_24C0715D0;
    v61 = v60 + 24;
    bzero(v60 + 24, 0x208uLL);
    *((_DWORD *)v60 + 8) = -1;
    *((_QWORD *)v60 + 6) = 0;
    *((_QWORD *)v60 + 7) = 0;
    *((_QWORD *)v60 + 5) = 0;
    v62 = operator new(0x20uLL);
    *((_QWORD *)v60 + 6) = v62 + 2;
    *((_QWORD *)v60 + 7) = v62 + 2;
    *v62 = 0u;
    v62[1] = 0u;
    *((_QWORD *)v60 + 5) = v62;
    *((_OWORD *)v60 + 4) = 0u;
    *((_OWORD *)v60 + 5) = 0u;
    *((_OWORD *)v60 + 6) = 0u;
    *((_OWORD *)v60 + 7) = 0u;
    *((_OWORD *)v60 + 8) = 0u;
    *((_OWORD *)v60 + 9) = 0u;
    *((_OWORD *)v60 + 10) = 0u;
    *((_OWORD *)v60 + 11) = 0u;
    *((_OWORD *)v60 + 12) = 0u;
    *((_OWORD *)v60 + 13) = 0u;
    *((_QWORD *)v60 + 38) = 0x3FF0000000000000;
    *((_OWORD *)v60 + 17) = xmmword_208230250;
    *((_OWORD *)v60 + 18) = unk_208230260;
    *((_OWORD *)v60 + 14) = 0u;
    *((_OWORD *)v60 + 15) = xmmword_208230230;
    *((_OWORD *)v60 + 16) = unk_208230240;
    *(_OWORD *)(v60 + 312) = 0u;
    *(_OWORD *)(v60 + 328) = 0u;
    *(_OWORD *)(v60 + 344) = 0u;
    *(_OWORD *)(v60 + 360) = 0u;
    *(_OWORD *)(v60 + 376) = 0u;
    *(_OWORD *)(v60 + 392) = 0u;
    *((_QWORD *)v60 + 51) = 0;
    *((_QWORD *)v60 + 52) = 0xBFF0000000000000;
    *((_WORD *)v60 + 212) = 0;
    v60[432] = 0;
    v60[456] = 0;
    *((_OWORD *)v60 + 29) = xmmword_208230200;
    v60[480] = 0;
    v60[488] = 0;
    v60[512] = 0;
    *((_DWORD *)v60 + 130) = 0;
    *((_QWORD *)v60 + 66) = 0;
    *((_QWORD *)v60 + 67) = 0;
    sub_207CE6480((uint64_t)(v60 + 24), (uint64_t *)&v277);
    v63 = v307;
    if (!v307)
      goto LABEL_55;
    v64 = (unint64_t *)&v307->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      v66 = v286;
      if (!v286)
        goto LABEL_61;
    }
    else
    {
LABEL_55:
      v66 = v286;
      if (!v286)
        goto LABEL_61;
    }
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
LABEL_61:
    if (*(_QWORD *)&v278[2])
    {
      *((_QWORD *)&v278[2] + 1) = *(_QWORD *)&v278[2];
      operator delete(*(void **)&v278[2]);
    }
    if (*((_QWORD *)&v278[0] + 1))
    {
      *(_QWORD *)&v278[1] = *((_QWORD *)&v278[0] + 1);
      operator delete(*((void **)&v278[0] + 1));
    }
    v69 = v317[1];
    if (v317[1] < v317[2])
    {
      *(_QWORD *)v317[1] = v61;
      v69[1] = v60;
      v24 = (char *)(v69 + 2);
      goto LABEL_40;
    }
    v70 = v23;
    v71 = v317[0];
    v72 = ((char *)v317[1] - (char *)v317[0]) >> 4;
    v73 = v72 + 1;
    if ((unint64_t)(v72 + 1) >> 60)
      sub_207CA420C();
    v74 = (char *)v317[2] - (char *)v317[0];
    if (((char *)v317[2] - (char *)v317[0]) >> 3 > v73)
      v73 = v74 >> 3;
    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
      v75 = 0xFFFFFFFFFFFFFFFLL;
    else
      v75 = v73;
    if (v75 >> 60)
      sub_207CA3AB8();
    v76 = (char *)operator new(16 * v75);
    v77 = &v76[16 * v72];
    *(_QWORD *)v77 = v61;
    *((_QWORD *)v77 + 1) = v60;
    v24 = v77 + 16;
    if (v69 == v71)
    {
      v317[0] = &v76[16 * v72];
      v317[1] = v77 + 16;
      v317[2] = &v76[16 * v75];
      v23 = v70;
      v21 = v211;
      goto LABEL_84;
    }
    do
    {
      v78 = *((_OWORD *)v69 - 1);
      v69 -= 2;
      *((_OWORD *)v77 - 1) = v78;
      v77 -= 16;
      *v69 = 0;
      v69[1] = 0;
    }
    while (v69 != v71);
    v69 = v317[0];
    v79 = v317[1];
    v317[0] = v77;
    v317[1] = v24;
    v317[2] = &v76[16 * v75];
    v23 = v70;
    if (v79 != v69)
    {
      v21 = v211;
      do
      {
        v80 = (std::__shared_weak_count *)*(v79 - 1);
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v79 -= 2;
      }
      while (v79 != v69);
LABEL_84:
      if (!v69)
        goto LABEL_40;
LABEL_85:
      operator delete(v69);
      goto LABEL_40;
    }
    v21 = v211;
    if (v69)
      goto LABEL_85;
LABEL_40:
    v317[1] = v24;
    v22 += 856;
  }
  while (v22 != v21);
  v268 = v317[0];
  v269 = v24;
  v270 = v317[2];
  v271 = 1;
  if (v317[0] != v24)
    sub_207D08450(*v220, (uint64_t **)&v268);
  v89 = v220;
  v88 = v221;
  v266 = v220;
  v267 = v221;
  if (v221)
  {
LABEL_106:
    v92 = (unint64_t *)&v88->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
LABEL_108:
  sub_2081FE31C(a1, "AppCodeProcessorNodeQueue", 1, &v265);
  v94 = (std::__shared_weak_count_vtbl *)v265;
  v265 = 0;
  v213 = v94;
  v264 = v94;
  v95 = v272;
  v96 = v273;
  v259 = v272;
  v260 = v273;
  if (v273)
  {
    v97 = (unint64_t *)&v273->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = operator new(0x18uLL);
  v100 = v99;
  *v99 = 0;
  v99[1] = 0;
  v99[2] = 0;
  v261 = v99;
  v262 = sub_207CDC8C0;
  if (v99 != v274)
    sub_207CDC208((uint64_t)v99, *(_QWORD **)v274, *((_QWORD *)v274 + 1), 0x77A04C8F8D28AC43 * ((uint64_t)(*((_QWORD *)v274 + 1) - *(_QWORD *)v274) >> 3));
  v101 = v276;
  v263 = v276;
  v257 = v89;
  v258 = v88;
  if (v88)
  {
    v102 = (unint64_t *)&v88->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v314 = v213;
  if (v213)
  {
    v104 = (std::__shared_weak_count *)operator new(0x20uLL);
    v104->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FD40;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v213;
    v315 = v104;
    v264 = 0;
    *(_QWORD *)&v310 = v95;
    *((_QWORD *)&v310 + 1) = v96;
    if (!v96)
      goto LABEL_122;
  }
  else
  {
    v104 = 0;
    v315 = 0;
    v264 = 0;
    *(_QWORD *)&v310 = v95;
    *((_QWORD *)&v310 + 1) = v96;
    if (!v96)
      goto LABEL_122;
  }
  v105 = (unint64_t *)&v96->__shared_owners_;
  do
    v106 = __ldxr(v105);
  while (__stxr(v106 + 1, v105));
LABEL_122:
  v107 = operator new(0x18uLL);
  v108 = v107;
  *v107 = 0;
  v107[1] = 0;
  v107[2] = 0;
  v311 = v107;
  v312 = sub_207CDC8C0;
  if (v107 != v100)
    sub_207CDC208((uint64_t)v107, (_QWORD *)*v100, v100[1], 0x77A04C8F8D28AC43 * ((uint64_t)(v100[1] - *v100) >> 3));
  v313 = v101;
  v308 = v89;
  v309 = v88;
  if (v88)
  {
    v109 = (unint64_t *)&v88->__shared_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  v214 = (uint64_t)off_24C0706E8;
  strcpy(v215, "AppCodeProcessorNode");
  *(_WORD *)&v215[21] = 0;
  v215[23] = 20;
  v216 = 0uLL;
  v217 = 0;
  *(_QWORD *)&v218 = v213;
  *((_QWORD *)&v218 + 1) = v104;
  v315 = 0;
  v314 = 0;
  if (v104)
  {
    v111 = (unint64_t *)&v104->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
    do
      v113 = __ldxr(v111);
    while (__stxr(v113 + 1, v111));
  }
  v114 = v334[0];
  v336[0] = v334[0];
  *(_QWORD *)((char *)v336 + 7) = *(_QWORD *)((char *)v334 + 7);
  *(_QWORD *)((char *)v335 + 7) = *(_QWORD *)((char *)v334 + 7);
  HIBYTE(v335[0]) = HIBYTE(v334[0]);
  v334[0] = 0;
  *(_QWORD *)((char *)v334 + 7) = 0;
  v337[0] = v114;
  *(_QWORD *)((char *)v337 + 7) = *(_QWORD *)((char *)v335 + 7);
  *(_QWORD *)((char *)v335 + 7) = 0;
  v335[0] = 0;
  if (v104)
  {
    v115 = (unint64_t *)&v104->__shared_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v212 = v104;
  v117 = (char *)operator new(0x98uLL);
  v317[0] = (void *)v337[0];
  *(void **)((char *)v317 + 7) = *(void **)((char *)v337 + 7);
  v337[0] = 0;
  *(_QWORD *)((char *)v337 + 7) = 0;
  v117[8] = 1;
  *((_QWORD *)v117 + 2) = &unk_24C071698;
  *((_QWORD *)v117 + 3) = &unk_24C0716D8;
  *((_QWORD *)v117 + 4) = 0;
  *((_QWORD *)v117 + 5) = 0;
  *(_QWORD *)v117 = off_24C071620;
  *(void **)(v117 + 63) = *(void **)((char *)v317 + 7);
  v118 = v317[0];
  *((_QWORD *)v117 + 6) = 0x6C656E6E616863;
  *((_QWORD *)v117 + 7) = v118;
  v117[71] = 7;
  v317[0] = 0;
  *(void **)((char *)v317 + 7) = 0;
  *((_QWORD *)v117 + 9) = v213;
  *((_QWORD *)v117 + 10) = v104;
  v119 = operator new(0x30uLL);
  *v119 = &off_24C0717C0;
  v119[1] = v95;
  v119[2] = v96;
  if (v96)
  {
    v120 = (unint64_t *)&v96->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  v122 = operator new(0x18uLL);
  *v122 = 0;
  v122[1] = 0;
  v122[2] = 0;
  v119[3] = v122;
  v119[4] = sub_207CDC8C0;
  if (v122 != v108)
    sub_207CDC208((uint64_t)v122, (_QWORD *)*v108, v108[1], 0x77A04C8F8D28AC43 * ((uint64_t)(v108[1] - *v108) >> 3));
  *((_DWORD *)v119 + 10) = v101;
  *((_QWORD *)v117 + 11) = v119;
  *((_QWORD *)v117 + 12) = v117 + 96;
  *((_QWORD *)v117 + 13) = v117 + 96;
  *((_QWORD *)v117 + 14) = 0;
  *((_QWORD *)v117 + 15) = v117 + 120;
  *((_QWORD *)v117 + 16) = v117 + 120;
  *((_QWORD *)v117 + 17) = 0;
  v123 = operator new(0x78uLL);
  v124 = operator new(0x10uLL);
  *v124 = 0;
  v124[1] = 0;
  *v123 = v124;
  v123[1] = v124 + 2;
  v123[2] = v124 + 2;
  v123[3] = 0;
  v123[4] = 0;
  v123[5] = 0;
  *((_BYTE *)v123 + 48) = 1;
  v123[7] = 850045863;
  *((_OWORD *)v123 + 4) = 0u;
  *((_OWORD *)v123 + 5) = 0u;
  *((_OWORD *)v123 + 6) = 0u;
  v123[14] = 0;
  *((_QWORD *)v117 + 18) = v123;
  if (!*((_QWORD *)v117 + 9)
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v125 = (std::__shared_weak_count *)operator new(0x20uLL);
  v125->__shared_owners_ = 0;
  v126 = (unint64_t *)&v125->__shared_owners_;
  v125->__vftable = (std::__shared_weak_count_vtbl *)&off_24C071C10;
  v125->__shared_weak_owners_ = 0;
  v125[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  v127 = (std::__shared_weak_count *)*((_QWORD *)v117 + 5);
  if (!v127)
  {
    do
      v131 = __ldxr(v126);
    while (__stxr(v131 + 1, v126));
    p_shared_weak_owners = (unint64_t *)&v125->__shared_weak_owners_;
    do
      v133 = __ldxr(p_shared_weak_owners);
    while (__stxr(v133 + 1, p_shared_weak_owners));
    *((_QWORD *)v117 + 4) = v117;
    *((_QWORD *)v117 + 5) = v125;
    goto LABEL_151;
  }
  if (v127->__shared_owners_ == -1)
  {
    do
      v128 = __ldxr(v126);
    while (__stxr(v128 + 1, v126));
    v129 = (unint64_t *)&v125->__shared_weak_owners_;
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 1, v129));
    *((_QWORD *)v117 + 4) = v117;
    *((_QWORD *)v117 + 5) = v125;
    std::__shared_weak_count::__release_weak(v127);
    do
LABEL_151:
      v134 = __ldaxr(v126);
    while (__stlxr(v134 - 1, v126));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v277 = off_24C070780;
  strcpy((char *)v278, "channel");
  *((_QWORD *)&v278[0] + 1) = v336[0];
  *(_QWORD *)((char *)v278 + 15) = *(_QWORD *)((char *)v336 + 7);
  BYTE7(v278[1]) = 7;
  v336[0] = 0;
  *(_QWORD *)((char *)v336 + 7) = 0;
  *((_QWORD *)&v278[1] + 1) = 0x7974706D45;
  *(void **)&v278[2] = v317[0];
  *(void **)((char *)&v278[2] + 7) = *(void **)((char *)v317 + 7);
  HIBYTE(v278[2]) = 5;
  v317[0] = 0;
  *(void **)((char *)v317 + 7) = 0;
  *(_QWORD *)v279 = v213;
  *(_QWORD *)&v279[8] = v104;
  v135 = (unint64_t *)&v125->__shared_weak_owners_;
  *(_QWORD *)&v279[16] = v117;
  *(_QWORD *)&v279[24] = v125;
  do
    v136 = __ldxr(v135);
  while (__stxr(v136 + 1, v135));
  *(_QWORD *)&v279[32] = &off_24C0707B0;
  v137 = operator new(0x18uLL);
  *v137 = &off_24C071C60;
  v137[1] = v117;
  v137[2] = v125;
  *(_QWORD *)&v280 = v137;
  do
    v138 = __ldxr(v135);
  while (__stxr(v138 + 1, v135));
  *((_QWORD *)&v280 + 1) = v117;
  *(_QWORD *)&v281 = v125;
  do
    v139 = __ldxr(v135);
  while (__stxr(v139 + 1, v135));
  *((_QWORD *)&v281 + 1) = &off_24C070608;
  *(_QWORD *)&v282 = v117 + 16;
  *((_QWORD *)&v282 + 1) = v125;
  do
    v140 = __ldxr(v135);
  while (__stxr(v140 + 1, v135));
  *(_QWORD *)v283 = &off_24C0705D0;
  *(_QWORD *)&v283[8] = v117 + 24;
  *(_QWORD *)&v283[16] = v125;
  if (v104)
  {
    v141 = (unint64_t *)&v104->__shared_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
    LODWORD(v336[0]) = v316[0];
    *(_DWORD *)((char *)v336 + 3) = *(_DWORD *)((char *)v316 + 3);
    do
      v143 = __ldxr(v141);
    while (__stxr(v143 + 1, v141));
  }
  else
  {
    LODWORD(v336[0]) = v316[0];
    *(_DWORD *)((char *)v336 + 3) = *(_DWORD *)((char *)v316 + 3);
  }
  v144 = (char *)operator new(0x98uLL);
  v144[8] = 1;
  *((_QWORD *)v144 + 2) = &unk_24C071D50;
  *((_QWORD *)v144 + 3) = &unk_24C071D90;
  *((_QWORD *)v144 + 4) = 0;
  *((_QWORD *)v144 + 5) = 0;
  *(_QWORD *)v144 = off_24C071CD8;
  *((_QWORD *)v144 + 6) = 0x6C656E6E616863;
  *((_QWORD *)v144 + 7) = 0;
  *((_DWORD *)v144 + 16) = v316[0];
  *(_DWORD *)(v144 + 67) = *(_DWORD *)((char *)v316 + 3);
  v144[71] = 7;
  *((_QWORD *)v144 + 9) = v213;
  *((_QWORD *)v144 + 10) = v104;
  v145 = v308;
  v146 = v309;
  v147 = operator new(0x18uLL);
  *v147 = &off_24C071E78;
  v147[1] = v145;
  v147[2] = v146;
  if (v146)
  {
    v148 = (unint64_t *)&v146->__shared_owners_;
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
  *((_QWORD *)v144 + 17) = 0;
  *((_QWORD *)v144 + 11) = v147;
  *((_QWORD *)v144 + 12) = v144 + 96;
  *((_QWORD *)v144 + 13) = v144 + 96;
  *((_QWORD *)v144 + 14) = 0;
  *((_QWORD *)v144 + 15) = v144 + 120;
  *((_QWORD *)v144 + 16) = v144 + 120;
  *((_QWORD *)v144 + 18) = 0;
  if (!v213
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v150 = (std::__shared_weak_count *)operator new(0x20uLL);
  v150->__shared_owners_ = 0;
  v151 = (unint64_t *)&v150->__shared_owners_;
  v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072368;
  v150->__shared_weak_owners_ = 0;
  v150[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  v152 = (std::__shared_weak_count *)*((_QWORD *)v144 + 5);
  if (!v152)
  {
    do
      v156 = __ldxr(v151);
    while (__stxr(v156 + 1, v151));
    v157 = (unint64_t *)&v150->__shared_weak_owners_;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v150;
    goto LABEL_184;
  }
  if (v152->__shared_owners_ == -1)
  {
    do
      v153 = __ldxr(v151);
    while (__stxr(v153 + 1, v151));
    v154 = (unint64_t *)&v150->__shared_weak_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
    *((_QWORD *)v144 + 4) = v144;
    *((_QWORD *)v144 + 5) = v150;
    std::__shared_weak_count::__release_weak(v152);
    do
LABEL_184:
      v159 = __ldaxr(v151);
    while (__stlxr(v159 - 1, v151));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v317[0] = off_24C070718;
  strcpy((char *)&v317[1], "channel");
  v317[2] = 0;
  LODWORD(v318) = v336[0];
  *(_DWORD *)((char *)&v318 + 3) = *(_DWORD *)((char *)v336 + 3);
  HIBYTE(v318) = 7;
  LODWORD(v336[0]) = 0;
  *(_DWORD *)((char *)v336 + 3) = 0;
  *(_QWORD *)v319 = 0x7974706D45;
  *(_QWORD *)&v319[8] = v337[0];
  *(_QWORD *)&v319[15] = *(_QWORD *)((char *)v337 + 7);
  v319[23] = 5;
  v337[0] = 0;
  *(_QWORD *)((char *)v337 + 7) = 0;
  v320 = v213;
  v321 = v104;
  v160 = (unint64_t *)&v150->__shared_weak_owners_;
  v322 = v144;
  v323 = v150;
  do
    v161 = __ldxr(v160);
  while (__stxr(v161 + 1, v160));
  v324 = &off_24C070748;
  v162 = operator new(0x18uLL);
  *v162 = &off_24C0723B8;
  v162[1] = v144;
  v162[2] = v150;
  v325 = v162;
  do
    v163 = __ldxr(v160);
  while (__stxr(v163 + 1, v160));
  v326 = v144;
  v327 = v150;
  do
    v164 = __ldxr(v160);
  while (__stxr(v164 + 1, v160));
  v328 = &off_24C070A28;
  v329 = v144 + 16;
  v330 = v150;
  do
    v165 = __ldxr(v160);
  while (__stxr(v165 + 1, v160));
  v331 = &off_24C0705D0;
  v332 = v144 + 24;
  v333 = v150;
  v166 = (char *)operator new(0x150uLL);
  *(_QWORD *)v166 = off_24C070780;
  *(_OWORD *)(v166 + 8) = v278[0];
  *((_QWORD *)v166 + 3) = *(_QWORD *)&v278[1];
  memset(v278, 0, 24);
  *((_OWORD *)v166 + 2) = *(_OWORD *)((char *)&v278[1] + 8);
  *((_QWORD *)v166 + 6) = *((_QWORD *)&v278[2] + 1);
  memset((char *)&v278[1] + 8, 0, 24);
  *(_OWORD *)(v166 + 56) = *(_OWORD *)v279;
  *(_QWORD *)v279 = 0;
  *(_QWORD *)&v279[8] = 0;
  *(_OWORD *)(v166 + 72) = *(_OWORD *)&v279[16];
  *(_QWORD *)&v279[16] = 0;
  *(_QWORD *)&v279[24] = 0;
  *((_QWORD *)v166 + 11) = &off_24C0707B0;
  v167 = v280;
  *(_QWORD *)&v280 = 0;
  *((_OWORD *)v166 + 6) = v167;
  v168 = v281;
  *((_QWORD *)&v280 + 1) = 0;
  *(_QWORD *)&v281 = 0;
  *((_QWORD *)v166 + 14) = v168;
  *((_QWORD *)v166 + 15) = &off_24C070608;
  *((_OWORD *)v166 + 8) = v282;
  v282 = 0uLL;
  *((_QWORD *)v166 + 18) = &off_24C0705D0;
  *(_OWORD *)(v166 + 152) = *(_OWORD *)&v283[8];
  *(_QWORD *)&v283[8] = 0;
  *(_QWORD *)&v283[16] = 0;
  *((_QWORD *)v166 + 21) = off_24C070718;
  v169 = *(_OWORD *)&v317[1];
  *((_QWORD *)v166 + 24) = v318;
  *((_OWORD *)v166 + 11) = v169;
  v317[1] = 0;
  v317[2] = 0;
  v318 = 0;
  v170 = *(_QWORD *)&v319[16];
  *(_OWORD *)(v166 + 200) = *(_OWORD *)v319;
  memset(v319, 0, sizeof(v319));
  *((_QWORD *)v166 + 27) = v170;
  *((_QWORD *)v166 + 28) = v213;
  v320 = 0;
  v321 = 0;
  *((_QWORD *)v166 + 29) = v212;
  *((_QWORD *)v166 + 30) = v144;
  v322 = 0;
  v323 = 0;
  *((_QWORD *)v166 + 31) = v150;
  *((_QWORD *)v166 + 32) = &off_24C070748;
  v325 = 0;
  *((_QWORD *)v166 + 33) = v162;
  *((_QWORD *)v166 + 34) = v144;
  v326 = 0;
  v327 = 0;
  *((_QWORD *)v166 + 35) = v150;
  *((_QWORD *)v166 + 36) = &off_24C070A28;
  *((_QWORD *)v166 + 37) = v144 + 16;
  *((_QWORD *)v166 + 38) = v150;
  v329 = 0;
  v330 = 0;
  *((_QWORD *)v166 + 39) = &off_24C0705D0;
  *((_QWORD *)v166 + 40) = v144 + 24;
  *((_QWORD *)v166 + 41) = v150;
  v332 = 0;
  v333 = 0;
  v219 = v166;
  sub_207CDA3AC((uint64_t)v317);
  sub_207CDA74C((uint64_t)&v277);
  if (!v212)
    goto LABEL_199;
  v171 = (unint64_t *)&v212->__shared_owners_;
  do
    v172 = __ldaxr(v171);
  while (__stlxr(v172 - 1, v171));
  if (!v172)
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
    if (!(_QWORD)v218)
      goto LABEL_200;
  }
  else
  {
LABEL_199:
    if (!(_QWORD)v218)
    {
LABEL_200:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
      {
        abort();
      }
    }
  }
  v173 = v309;
  if (!v309)
    goto LABEL_207;
  v174 = (unint64_t *)&v309->__shared_owners_;
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
    v176 = (void **)v311;
    v311 = 0;
    if (v176)
LABEL_208:
      v312(v176);
  }
  else
  {
LABEL_207:
    v176 = (void **)v311;
    v311 = 0;
    if (v176)
      goto LABEL_208;
  }
  v177 = (std::__shared_weak_count *)*((_QWORD *)&v310 + 1);
  if (*((_QWORD *)&v310 + 1))
  {
    v178 = (unint64_t *)(*((_QWORD *)&v310 + 1) + 8);
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v315;
  if (v315)
  {
    v181 = (unint64_t *)&v315->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
      v183 = v258;
      if (v258)
        goto LABEL_219;
      goto LABEL_222;
    }
  }
  v183 = v258;
  if (!v258)
    goto LABEL_222;
LABEL_219:
  v184 = (unint64_t *)&v183->__shared_owners_;
  do
    v185 = __ldaxr(v184);
  while (__stlxr(v185 - 1, v184));
  if (v185)
  {
LABEL_222:
    v186 = (void **)v261;
    v261 = 0;
    if (v186)
      goto LABEL_223;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
    v186 = (void **)v261;
    v261 = 0;
    if (v186)
LABEL_223:
      v262(v186);
  }
  v187 = v260;
  if (v260)
  {
    v188 = (unint64_t *)&v260->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = v264;
  v264 = 0;
  if (v190)
  {
    v191 = (_QWORD *)*v190;
    *v190 = 0;
    if (v191)
      sub_2081FDC68((int)v190, v191);
    operator delete(v190);
  }
  v192 = v265;
  if (v265)
  {
    v193 = *(_QWORD **)v265;
    *(_QWORD *)v265 = 0;
    if (v193)
      sub_2081FDC68((int)v192, v193);
    operator delete(v192);
  }
  v194 = v267;
  if (v267)
  {
    v195 = (unint64_t *)&v267->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  if (v271)
  {
    v197 = (char *)v268;
    if (v268)
    {
      v198 = v269;
      v199 = v268;
      if (v269 != v268)
      {
        do
        {
          v200 = (std::__shared_weak_count *)*((_QWORD *)v198 - 1);
          if (v200)
          {
            v201 = (unint64_t *)&v200->__shared_owners_;
            do
              v202 = __ldaxr(v201);
            while (__stlxr(v202 - 1, v201));
            if (!v202)
            {
              ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
              std::__shared_weak_count::__release_weak(v200);
            }
          }
          v198 -= 16;
        }
        while (v198 != v197);
        v199 = v268;
      }
      v269 = v197;
      operator delete(v199);
    }
  }
  v203 = (void **)v274;
  v274 = 0;
  if (v203)
    v275(v203);
  v204 = v273;
  if (v273)
  {
    v205 = (unint64_t *)&v273->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  *(_QWORD *)v209 = off_24C0706E8;
  *(_OWORD *)(v209 + 8) = *(_OWORD *)v215;
  *(_QWORD *)(v209 + 24) = *(_QWORD *)&v215[16];
  memset(v215, 0, sizeof(v215));
  *(_OWORD *)(v209 + 32) = v216;
  *(_QWORD *)(v209 + 48) = v217;
  v216 = 0uLL;
  v217 = 0;
  *(_OWORD *)(v209 + 56) = v218;
  v218 = 0uLL;
  v207 = v219;
  v219 = 0;
  *(_QWORD *)(v209 + 72) = v207;
  *(_BYTE *)(v209 + 80) = 1;
  sub_207CDA264((uint64_t)&v214);
  if (!v231)
  {
LABEL_262:
    if (v230)
    {
      if (v229)
      {
        if (v228 < 0)
          operator delete(v227);
        if (v226 < 0)
          operator delete(v225);
      }
      if (v224 && v223 < 0)
        operator delete(v222);
    }
    goto LABEL_271;
  }
LABEL_92:
  v85 = v221;
  if (v221)
  {
    v86 = (unint64_t *)&v221->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_271:
  if (SHIBYTE(v244) < 0)
    operator delete((void *)v243);
  if (v242 && SHIBYTE(v241) < 0)
    operator delete((void *)v240);
  if (SHIBYTE(v239) < 0)
    operator delete((void *)v238);
  if (v237 && SHIBYTE(v236) < 0)
    operator delete((void *)v235);
  if (SHIBYTE(v234) < 0)
    operator delete((void *)v233);
}

void sub_207CE586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  sub_207CE63E0((char **)&STACK[0x2D0]);
  sub_207CE6360((uint64_t)&STACK[0x2F0]);
  sub_207CF3924((uint64_t)&a42);
  sub_207CE6248((uint64_t)&a58);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE6248(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if (!*(_BYTE *)(a1 + 112))
      goto LABEL_6;
  }
  else if (!*(_BYTE *)(a1 + 112))
  {
LABEL_6:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    goto LABEL_6;
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_7:
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 64));
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_12;
LABEL_11:
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_12:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_15:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void **sub_207CE6300(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 160;
        sub_207CCD214(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207CE6360(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 24))();
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

char **sub_207CE63E0(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_207CE6480(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if ((uint64_t *)a1 != a2)
  {
    sub_207CDADA0((_QWORD *)(a1 + 16), (char *)a2[2], (char *)a2[3], (a2[3] - a2[2]) >> 3);
    sub_207CDADA0((_QWORD *)(a1 + 40), (char *)a2[5], (char *)a2[6], (a2[6] - a2[5]) >> 3);
  }
  v5 = *((_OWORD *)a2 + 4);
  v6 = *((_OWORD *)a2 + 5);
  v7 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = *((_OWORD *)a2 + 8);
  v9 = *((_OWORD *)a2 + 9);
  v10 = *((_OWORD *)a2 + 10);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  v12 = a2[23];
  v11 = a2[24];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v12;
  *(_QWORD *)(a1 + 192) = v11;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v18;
  v19 = *(_OWORD *)(a2 + 29);
  v20 = *(_OWORD *)(a2 + 31);
  v21 = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_OWORD *)(a1 + 264) = v21;
  *(_OWORD *)(a1 + 248) = v20;
  *(_OWORD *)(a1 + 232) = v19;
  v22 = *((_OWORD *)a2 + 18);
  *(_QWORD *)(a1 + 304) = a2[38];
  *(_OWORD *)(a1 + 288) = v22;
  v24 = *(_OWORD *)(a2 + 43);
  v23 = *(_OWORD *)(a2 + 45);
  v25 = *(_OWORD *)(a2 + 41);
  *(_QWORD *)(a1 + 376) = a2[47];
  *(_OWORD *)(a1 + 344) = v24;
  *(_OWORD *)(a1 + 360) = v23;
  *(_OWORD *)(a1 + 328) = v25;
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 39);
  v27 = *((_OWORD *)a2 + 29);
  v26 = *((_OWORD *)a2 + 30);
  v28 = *((_OWORD *)a2 + 28);
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  *(_OWORD *)(a1 + 464) = v27;
  *(_OWORD *)(a1 + 480) = v26;
  *(_OWORD *)(a1 + 448) = v28;
  v29 = *((_OWORD *)a2 + 24);
  v30 = *((_OWORD *)a2 + 25);
  v31 = *((_OWORD *)a2 + 27);
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  *(_OWORD *)(a1 + 432) = v31;
  *(_OWORD *)(a1 + 384) = v29;
  *(_OWORD *)(a1 + 400) = v30;
  v33 = a2[63];
  v32 = a2[64];
  if (v32)
  {
    v34 = (unint64_t *)(v32 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(std::__shared_weak_count **)(a1 + 512);
  *(_QWORD *)(a1 + 504) = v33;
  *(_QWORD *)(a1 + 512) = v32;
  if (!v36)
    return a1;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
    return a1;
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  return a1;
}

void sub_207CE6670(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0715D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CE6680(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0715D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CE66A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;

  v2 = (std::__shared_weak_count *)a1[67];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[27];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[27];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (void *)a1[8];
  if (v8)
  {
    a1[9] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[5];
  if (v9)
  {
    a1[6] = v9;
    operator delete(v9);
  }
}

void sub_207CE6768(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CEC814(a1);
  operator delete(v1);
}

void sub_207CE677C(_QWORD *a1, _OWORD *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  unint64_t *v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::mutex **v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t **v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  void *v97[2];
  uint64_t v98;
  void *__p[2];
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  char v125;
  uint64_t v126;
  __int128 v127;
  char *v128;
  std::__shared_weak_count *v129;
  __int128 v130;
  uint64_t v131;
  __int128 *v132;
  _BYTE v133[24];
  _BYTE *v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (char *)operator new(0x238uLL);
    v5 = a2[1];
    *(_OWORD *)(v4 + 24) = *a2;
    *(_OWORD *)(v4 + 40) = v5;
    v6 = a2[3];
    *(_OWORD *)(v4 + 56) = a2[2];
    *((_QWORD *)v4 + 1) = 0;
    v7 = (unint64_t *)(v4 + 8);
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = off_24C070F38;
    *(_OWORD *)(v4 + 72) = v6;
    sub_207CDB17C((uint64_t)(v4 + 88), (uint64_t)(a2 + 4));
    v8 = v4 + 24;
    v128 = v4 + 24;
    v129 = (std::__shared_weak_count *)v4;
    v9 = (unint64_t *)(v4 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = (uint64_t *)a1[18];
    v12 = operator new(8uLL);
    *v12 = v11 + 7;
    std::mutex::lock((std::mutex *)(v11 + 7));
    *(_QWORD *)&v130 = v12;
    *((_QWORD *)&v130 + 1) = v11;
    if (!*((_BYTE *)v11 + 48))
      sub_207CA2A4C();
    v13 = v11[4];
    v14 = *v11;
    v15 = (_QWORD *)(*v11 + 16 * v13);
    do
      v16 = __ldxr(v7);
    while (__stxr(v16 + 1, v7));
    *v15 = v8;
    v17 = v14 + 16 * v13;
    v18 = *(std::__shared_weak_count **)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v4;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (v11[1] - *v11) >> 4;
    v22 = v11[5];
    v23 = v11[4] + 1;
    if (v23 >= v21)
      v24 = (v11[1] - *v11) >> 4;
    else
      v24 = 0;
    v11[4] = v23 - v24;
    if (v22 == v21)
    {
      v25 = v11[3] + 1;
      if (v25 < v21)
        v21 = 0;
      v11[3] = v25 - v21;
      v26 = (std::mutex **)v130;
      if (!(_QWORD)v130)
      {
LABEL_33:
        v36 = (uint64_t **)a1[9];
        v130 = 0uLL;
        v37 = (std::__shared_weak_count *)a1[5];
        if (v37)
        {
          v38 = std::__shared_weak_count::lock(v37);
          if (v38)
          {
            v39 = v38;
            v40 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
            do
              v42 = __ldxr(p_shared_weak_owners);
            while (__stxr(v42 + 1, p_shared_weak_owners));
            *(_QWORD *)&v130 = v40;
            *((_QWORD *)&v130 + 1) = v38;
            v43 = (unint64_t *)&v38->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          else
          {
            v130 = 0uLL;
          }
        }
        v45 = (char *)operator new(0x30uLL);
        *(_QWORD *)v45 = &off_24C071810;
        *(_OWORD *)(v45 + 8) = v130;
        v130 = 0uLL;
        *((_QWORD *)v45 + 3) = v8;
        *((_QWORD *)v45 + 4) = v4;
        v131 = 0;
        v132 = 0;
        v134 = v45;
        sub_2081FD62C(*v36, (uint64_t)v133);
        v46 = v134;
        if (v134 == v133)
        {
          v47 = 4;
          v46 = v133;
        }
        else
        {
          if (!v134)
            goto LABEL_47;
          v47 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_47:
        if (v129)
        {
          v48 = &v129->__shared_owners_;
          do
            v49 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v49 - 1, (unint64_t *)v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        return;
      }
    }
    else
    {
      v11[5] = v22 + 1;
      v26 = (std::mutex **)v130;
      if (!(_QWORD)v130)
        goto LABEL_33;
    }
    std::mutex::unlock(*v26);
    operator delete(v26);
    goto LABEL_33;
  }
  v27 = (uint64_t **)a1[9];
  *(_OWORD *)v88 = 0uLL;
  v28 = (std::__shared_weak_count *)a1[5];
  if (v28)
  {
    v29 = std::__shared_weak_count::lock(v28);
    if (v29)
    {
      v30 = v29;
      v31 = (std::__shared_weak_count *)a1[4];
      v32 = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v88[0] = v31;
      v88[1] = v29;
      v34 = (unint64_t *)&v29->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    else
    {
      *(_OWORD *)v88 = 0uLL;
    }
  }
  v89 = *a2;
  v90 = a2[1];
  v91 = a2[2];
  v92 = a2[3];
  sub_207CDB17C((uint64_t)&v93, (uint64_t)(a2 + 4));
  v132 = 0;
  v50 = (char *)operator new(0x238uLL);
  *(_OWORD *)(v50 + 8) = *(_OWORD *)v88;
  *(_OWORD *)(v50 + 24) = v89;
  *(_OWORD *)(v50 + 40) = v90;
  *(_OWORD *)(v50 + 56) = v91;
  *(_QWORD *)v50 = &off_24C071890;
  *(_OWORD *)(v50 + 72) = v92;
  *((_QWORD *)v50 + 11) = v93;
  *((_OWORD *)v50 + 6) = v94;
  v94 = 0uLL;
  v50[112] = 0;
  v50[536] = 0;
  if (v125)
  {
    *((_QWORD *)v50 + 14) = v95;
    *((_DWORD *)v50 + 30) = v96;
    *((_QWORD *)v50 + 18) = v98;
    v51 = v108;
    *((_QWORD *)v50 + 21) = v100;
    *((_OWORD *)v50 + 8) = *(_OWORD *)v97;
    v97[0] = 0;
    v97[1] = 0;
    *(_OWORD *)(v50 + 152) = *(_OWORD *)__p;
    v98 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v100 = 0;
    v52 = v101;
    v53 = v102;
    v54 = v104;
    *((_OWORD *)v50 + 13) = v103;
    *((_OWORD *)v50 + 14) = v54;
    *((_OWORD *)v50 + 11) = v52;
    *((_OWORD *)v50 + 12) = v53;
    v55 = v107;
    v56 = v105;
    v57 = v106;
    *((_QWORD *)v50 + 36) = v51;
    *((_OWORD *)v50 + 16) = v57;
    *((_OWORD *)v50 + 17) = v55;
    *((_OWORD *)v50 + 15) = v56;
    v58 = v110;
    *(_OWORD *)(v50 + 296) = v109;
    v109 = 0uLL;
    v59 = v111;
    v60 = v112;
    *(_OWORD *)(v50 + 312) = v58;
    *(_OWORD *)(v50 + 328) = v59;
    v61 = v113;
    v62 = v114;
    v63 = v122;
    *((_QWORD *)v50 + 49) = v115;
    *(_OWORD *)(v50 + 360) = v61;
    *(_OWORD *)(v50 + 376) = v62;
    *(_OWORD *)(v50 + 344) = v60;
    v64 = v117;
    *((_OWORD *)v50 + 25) = v116;
    *((_OWORD *)v50 + 26) = v64;
    v65 = v118;
    v66 = v119;
    v67 = v120;
    v68 = v121;
    *((_QWORD *)v50 + 62) = v63;
    *((_OWORD *)v50 + 29) = v67;
    *((_OWORD *)v50 + 30) = v68;
    *((_OWORD *)v50 + 27) = v65;
    *((_OWORD *)v50 + 28) = v66;
    v69 = v123;
    v70 = v124;
    v123 = 0uLL;
    *(_OWORD *)(v50 + 504) = v69;
    *(_OWORD *)(v50 + 520) = v70;
    v124 = 0uLL;
    v50[536] = 1;
  }
  *((_QWORD *)v50 + 68) = v126;
  *(_OWORD *)(v50 + 552) = v127;
  v127 = 0uLL;
  v132 = (__int128 *)v50;
  sub_2081FD62C(*v27, (uint64_t)&v130);
  v71 = v132;
  if (v132 == &v130)
  {
    v72 = 4;
    v71 = &v130;
  }
  else
  {
    if (!v132)
      goto LABEL_60;
    v72 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v71 + 8 * v72))(v71);
LABEL_60:
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v125)
  {
    v76 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
    if (*((_QWORD *)&v124 + 1))
    {
      v77 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
    if (*((_QWORD *)&v123 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v97[0])
    {
      v97[1] = v97[0];
      operator delete(v97[0]);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_207CE6E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_207CECA04((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_207CECA04((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE6E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CE6F80(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CE6F90(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CE6F9C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_207CE6FAC(_QWORD *a1, _OWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  unint64_t *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  std::mutex **v31;
  uint64_t **v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *p_shared_weak_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  __int128 *v106;
  std::string *v107;
  std::runtime_error *exception;
  std::runtime_error *v109;
  std::__shared_weak_count *v110[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  int v118;
  void *v119[2];
  uint64_t v120;
  void *__p[2];
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  char v147;
  uint64_t v148;
  __int128 v149;
  _QWORD *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  std::runtime_error v156;
  char *v157;
  std::__shared_weak_count *v158;
  __int128 v159;
  _QWORD *v160;
  __int128 *v161;
  _QWORD v162[3];
  std::string v163;
  std::string *v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v159 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v159 + 1) = 45;
    v105 = (_QWORD *)a1[6];
    v104 = a1 + 6;
    v103 = v105;
    v106 = (__int128 *)*((unsigned __int8 *)v104 + 23);
    if ((char)v106 < 0)
      v106 = (__int128 *)v104[1];
    else
      v103 = v104;
    v160 = v103;
    v161 = v106;
    sub_207CAC8F4((uint64_t)&v159, (uint64_t)v162, 0, 0, &v163);
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v107 = &v163;
    else
      v107 = (std::string *)v163.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v156, (const char *)v107);
    v156.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v109 = std::runtime_error::runtime_error(exception, &v156);
    v109->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v109, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_24C070180;
    v6[1].__vftable = *a3;
    v154 = v6 + 1;
    v155 = v6;
    v152 = v6 + 1;
    v153 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v9 = (char *)operator new(0x238uLL);
    v10 = a2[1];
    *(_OWORD *)(v9 + 24) = *a2;
    *(_OWORD *)(v9 + 40) = v10;
    v11 = a2[3];
    *(_OWORD *)(v9 + 56) = a2[2];
    *((_QWORD *)v9 + 1) = 0;
    v12 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = off_24C070F38;
    *(_OWORD *)(v9 + 72) = v11;
    sub_207CDB17C((uint64_t)(v9 + 88), (uint64_t)(a2 + 4));
    v13 = v9 + 24;
    v157 = v9 + 24;
    v158 = (std::__shared_weak_count *)v9;
    v14 = (unint64_t *)(v9 + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = (uint64_t *)a1[18];
    v17 = operator new(8uLL);
    *v17 = v16 + 7;
    std::mutex::lock((std::mutex *)(v16 + 7));
    *(_QWORD *)&v159 = v17;
    *((_QWORD *)&v159 + 1) = v16;
    if (!*((_BYTE *)v16 + 48))
      sub_207CA2A4C();
    v18 = v16[4];
    v19 = *v16;
    v20 = (_QWORD *)(*v16 + 16 * v18);
    do
      v21 = __ldxr(v12);
    while (__stxr(v21 + 1, v12));
    *v20 = v13;
    v22 = v19 + 16 * v18;
    v23 = *(std::__shared_weak_count **)(v22 + 8);
    *(_QWORD *)(v22 + 8) = v9;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (v16[1] - *v16) >> 4;
    v27 = v16[5];
    v28 = v16[4] + 1;
    if (v28 >= v26)
      v29 = (v16[1] - *v16) >> 4;
    else
      v29 = 0;
    v16[4] = v28 - v29;
    if (v27 == v26)
    {
      v30 = v16[3] + 1;
      if (v30 < v26)
        v26 = 0;
      v16[3] = v30 - v26;
      v31 = (std::mutex **)v159;
      if (!(_QWORD)v159)
      {
LABEL_37:
        v41 = (uint64_t **)a1[9];
        v159 = 0uLL;
        v42 = (std::__shared_weak_count *)a1[5];
        if (v42)
        {
          v43 = std::__shared_weak_count::lock(v42);
          if (v43)
          {
            v44 = v43;
            v45 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
            do
              v47 = __ldxr(p_shared_weak_owners);
            while (__stxr(v47 + 1, p_shared_weak_owners));
            *(_QWORD *)&v159 = v45;
            *((_QWORD *)&v159 + 1) = v43;
            v48 = (unint64_t *)&v43->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          else
          {
            v159 = 0uLL;
          }
        }
        v50 = v152;
        v51 = v153;
        v152 = 0;
        v153 = 0;
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C071910;
        *(_OWORD *)(v52 + 8) = v159;
        v159 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v9;
        v160 = 0;
        v161 = 0;
        *((_QWORD *)v52 + 5) = v50;
        *((_QWORD *)v52 + 6) = v51;
        v162[0] = 0;
        v162[1] = 0;
        v164 = (std::string *)v52;
        sub_2081FD62C(*v41, (uint64_t)&v163);
        v53 = v164;
        if (v164 == &v163)
        {
          v54 = 4;
          v53 = &v163;
        }
        else
        {
          if (!v164)
            goto LABEL_51;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_51:
        if (v158)
        {
          v55 = &v158->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
        if (v153)
        {
          v57 = &v153->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        if (v155)
        {
          v59 = &v155->__shared_owners_;
          do
            v60 = __ldaxr((unint64_t *)v59);
          while (__stlxr(v60 - 1, (unint64_t *)v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
        return;
      }
    }
    else
    {
      v16[5] = v27 + 1;
      v31 = (std::mutex **)v159;
      if (!(_QWORD)v159)
        goto LABEL_37;
    }
    std::mutex::unlock(*v31);
    operator delete(v31);
    goto LABEL_37;
  }
  v32 = (uint64_t **)a1[9];
  *(_OWORD *)v110 = 0uLL;
  v33 = (std::__shared_weak_count *)a1[5];
  if (v33)
  {
    v34 = std::__shared_weak_count::lock(v33);
    if (v34)
    {
      v35 = v34;
      v36 = (std::__shared_weak_count *)a1[4];
      v37 = (unint64_t *)&v34->__shared_weak_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v110[0] = v36;
      v110[1] = v34;
      v39 = (unint64_t *)&v34->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    else
    {
      *(_OWORD *)v110 = 0uLL;
    }
  }
  v111 = *a2;
  v112 = a2[1];
  v113 = a2[2];
  v114 = a2[3];
  sub_207CDB17C((uint64_t)&v115, (uint64_t)(a2 + 4));
  v61 = (std::__shared_weak_count *)operator new(0x20uLL);
  v61->__shared_owners_ = 0;
  v61->__shared_weak_owners_ = 0;
  v61->__vftable = (std::__shared_weak_count_vtbl *)off_24C070180;
  v61[1].__vftable = *a3;
  *a3 = 0;
  v150 = &v61[1].__vftable;
  v151 = v61;
  v161 = 0;
  v62 = (char *)operator new(0x248uLL);
  *(_OWORD *)(v62 + 8) = *(_OWORD *)v110;
  *(_OWORD *)(v62 + 24) = v111;
  *(_OWORD *)(v62 + 40) = v112;
  *(_OWORD *)(v62 + 56) = v113;
  *(_QWORD *)v62 = off_24C071990;
  *(_OWORD *)(v62 + 72) = v114;
  *((_QWORD *)v62 + 11) = v115;
  *((_OWORD *)v62 + 6) = v116;
  v116 = 0uLL;
  v62[112] = 0;
  v62[536] = 0;
  if (v147)
  {
    *((_QWORD *)v62 + 14) = v117;
    *((_DWORD *)v62 + 30) = v118;
    *((_QWORD *)v62 + 18) = v120;
    v63 = v130;
    *((_QWORD *)v62 + 21) = v122;
    *((_OWORD *)v62 + 8) = *(_OWORD *)v119;
    v119[0] = 0;
    v119[1] = 0;
    *(_OWORD *)(v62 + 152) = *(_OWORD *)__p;
    v120 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v122 = 0;
    v64 = v123;
    v65 = v124;
    v66 = v126;
    *((_OWORD *)v62 + 13) = v125;
    *((_OWORD *)v62 + 14) = v66;
    *((_OWORD *)v62 + 11) = v64;
    *((_OWORD *)v62 + 12) = v65;
    v67 = v129;
    v68 = v127;
    v69 = v128;
    *((_QWORD *)v62 + 36) = v63;
    *((_OWORD *)v62 + 16) = v69;
    *((_OWORD *)v62 + 17) = v67;
    *((_OWORD *)v62 + 15) = v68;
    v70 = v132;
    *(_OWORD *)(v62 + 296) = v131;
    v131 = 0uLL;
    v71 = v133;
    v72 = v134;
    *(_OWORD *)(v62 + 312) = v70;
    *(_OWORD *)(v62 + 328) = v71;
    v73 = v135;
    v74 = v136;
    v75 = v144;
    *((_QWORD *)v62 + 49) = v137;
    *(_OWORD *)(v62 + 360) = v73;
    *(_OWORD *)(v62 + 376) = v74;
    *(_OWORD *)(v62 + 344) = v72;
    v76 = v139;
    *((_OWORD *)v62 + 25) = v138;
    *((_OWORD *)v62 + 26) = v76;
    v77 = v140;
    v78 = v141;
    v79 = v142;
    v80 = v143;
    *((_QWORD *)v62 + 62) = v75;
    *((_OWORD *)v62 + 29) = v79;
    *((_OWORD *)v62 + 30) = v80;
    *((_OWORD *)v62 + 27) = v77;
    *((_OWORD *)v62 + 28) = v78;
    v81 = v145;
    v82 = v146;
    v145 = 0uLL;
    *(_OWORD *)(v62 + 504) = v81;
    *(_OWORD *)(v62 + 520) = v82;
    v146 = 0uLL;
    v62[536] = 1;
  }
  *((_QWORD *)v62 + 68) = v148;
  *(_OWORD *)(v62 + 552) = v149;
  v149 = 0uLL;
  *((_QWORD *)v62 + 71) = v61 + 1;
  *((_QWORD *)v62 + 72) = v61;
  v150 = 0;
  v151 = 0;
  v161 = (__int128 *)v62;
  sub_2081FD62C(*v32, (uint64_t)&v159);
  v83 = v161;
  if (v161 == &v159)
  {
    v84 = 4;
    v83 = &v159;
  }
  else
  {
    if (!v161)
      goto LABEL_74;
    v84 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v83 + 8 * v84))(v83);
LABEL_74:
  v85 = v151;
  if (v151)
  {
    v86 = (unint64_t *)&v151->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v147)
  {
    v91 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    if (*((_QWORD *)&v146 + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
    if (*((_QWORD *)&v145 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
    if (*((_QWORD *)&v131 + 1))
    {
      v98 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v119[0])
    {
      v119[1] = v119[0];
      operator delete(v119[0]);
    }
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
}

void sub_207CE78A8(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 160), (const std::exception_ptr *)(v3 - 184));
      v5.__ptr_ = (void *)(v3 - 160);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 184));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 200));
      if (*(char *)(v3 - 81) < 0)
        operator delete(*(void **)(v3 - 104));
      JUMPOUT(0x207CE77BCLL);
    }
    sub_207CD3824(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CE791C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 184));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 200));
  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207CE7970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_207CED958((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_207CED958((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CE79C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  sub_207CD8F34(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_207CE79F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_207CD5104((_QWORD *)(v2 - 160));
  sub_207C99D78(v2 - 176);
  sub_207C99D78(v2 - 232);
  sub_207C99D78(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_207CE7A88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_207C99D78(v2 - 232);
  sub_207C99D78(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_207CE7AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 232);
  sub_207C99D78(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_207CE7ACC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2081FD738(*v1);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    sub_2081FD738(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_207CE7B40(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C071A10;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C070640;
  v10[4] = v9;
  v14 = v10;
  sub_2081FD62C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_207CE7C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CE7CE4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C071A90;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2081FD62C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_207CE7DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_207CE7E58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 3) = 850045863;
  *((_QWORD *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = off_24C0703D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *((_DWORD *)v4 + 34);
  if ((v6 & 2) != 0)
    sub_207CD3824(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *((_DWORD *)v4 + 34) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C071B10;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2081FD62C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_207CD6D04((uint64_t)v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
  return sub_207CD6DD8((uint64_t *)&v22);
}

void sub_207CE8060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_207CD6DD8(&a9);
    _Unwind_Resume(a1);
  }
  sub_207CD6DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CE8128@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 3) = 850045863;
  *((_QWORD *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = off_24C0703D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *((_DWORD *)v4 + 34);
  if ((v6 & 2) != 0)
    sub_207CD3824(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *((_DWORD *)v4 + 34) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C071B90;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2081FD62C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_207CD6D04((uint64_t)v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
  return sub_207CD6DD8((uint64_t *)&v22);
}

void sub_207CE8330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_207CD6DD8(&a9);
    _Unwind_Resume(a1);
  }
  sub_207CD6DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CE83F8(uint64_t a1)
{
  return sub_207CEC814(a1 - 16);
}

void sub_207CE8400(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CEC814(a1 - 16);
  operator delete(v1);
}

_QWORD *sub_207CE8418(uint64_t a1, uint64_t a2)
{
  return sub_207CE7B40((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_207CE8420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_207CE7E58((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_207CE8428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_207CE8128((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_207CE8430(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_207CE8438(uint64_t a1)
{
  return sub_207CEC814(a1 - 24);
}

void sub_207CE8440(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CEC814(a1 - 24);
  operator delete(v1);
}

_QWORD *sub_207CE8458(uint64_t a1)
{
  return sub_207CE7CE4((_QWORD *)(a1 - 24));
}

uint64_t sub_207CE8460(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_207CE8468(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 32))();
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207CE84E8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = __p[3];
  __p[3] = 0;
  if (v2)
    ((void (*)(void))__p[4])();
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_7:
    operator delete(__p);
  }
}

uint64_t sub_207CE8568@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  __int128 v19;
  double v20;
  __int128 v21;
  __int128 v22;
  char *v27;
  std::__shared_weak_count *v28;
  float32x2_t v29;
  float32x2_t v30;
  int8x16_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float v35;
  unint64_t *v36;
  char *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned __int8 v44;
  std::error_condition v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *cat;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  int v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD **v103;
  double v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  int64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  BOOL v134;
  BOOL v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  const double *v144;
  double *v145;
  uint64_t v146;
  const double *v147;
  double *v148;
  size_t v149;
  size_t v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  float v155;
  float v156;
  unint64_t v157;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  unsigned __int8 v163;
  uint64_t v164;
  uint64_t i;
  unsigned __int8 v166;
  std::error_condition v167;
  __int128 v168;
  float v169;
  float v170;
  uint64_t v171;
  float32x4_t v172;
  float32x2_t v173;
  float32x2_t v174;
  float32x2_t v175;
  char *v176;
  float32x2_t *v177;
  float32x4_t v178;
  CGPoint v179;
  float32x2_t v180;
  double v181;
  CFDictionaryRef DictionaryRepresentation;
  const __CFDictionary *v183;
  int8x16_t v184;
  const __CFDictionary *v185;
  char *v186;
  char *v187;
  int64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  CFDictionaryRef *v193;
  char *v194;
  float32x4_t v195;
  char *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  char *v200;
  float32x2_t v201;
  double v202;
  int v203;
  int v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  int8x16_t v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  const char *v211;
  size_t v212;
  unsigned __int8 v213;
  __int128 v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  const UInt8 *p_dst;
  CFIndex v219;
  __CFString *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  void *v226;
  std::__shared_weak_count *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  char v233;
  const UInt8 *v234;
  const UInt8 *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t v239;
  unsigned __int8 v240;
  __int128 v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  void *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  const __CFAllocator *Default;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  int32x2_t v264;
  float64x2_t v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  unint64_t v277;
  unint64_t v278;
  char *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t v286;
  char *v287;
  __int128 v288;
  __int128 v289;
  uint64_t *v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  char *v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  int64_t v313;
  _QWORD *v314;
  char *v315;
  uint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  char *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  char *v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  _QWORD *v327;
  char *v328;
  uint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  int v340;
  std::__shared_weak_count_vtbl *v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  std::__shared_weak_count_vtbl *v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t *v362;
  char *v363;
  char *v364;
  int64_t v365;
  _QWORD *v366;
  uint64_t v367;
  unint64_t *v368;
  unint64_t v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  unint64_t *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  const __CFAllocator *v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  const __CFData *v392;
  char *v393;
  _QWORD *v394;
  uint64_t v395;
  std::error_category *v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v400;
  uint64_t v401;
  _QWORD *v402;
  const std::error_category *v403;
  std::error_category *v404;
  __int128 *v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  void *v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  const std::error_category *v416;
  uint64_t v417;
  std::error_category *v418;
  uint64_t v419;
  char *v420;
  void *v421;
  uint64_t v422;
  unint64_t *v423;
  unint64_t v424;
  __int128 v425;
  double v426;
  __int128 v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t *v430;
  unint64_t v431;
  void *v432;
  uint64_t v433;
  void *v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  char *v441;
  void *v442;
  char *v443;
  void (***v444)(char *);
  void (**v445)(char *);
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  void *v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  __int128 v460;
  uint64_t v461;
  __int128 v462;
  __int128 v463;
  uint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  char v474;
  uint64_t v475;
  __int128 *v476;
  void *key;
  _QWORD *v478;
  const __CFAllocator *allocator;
  int v480;
  uint64_t v481;
  int8x16_t v482;
  float32x2_t v483;
  float64x2_t v484;
  char v485;
  __int16 v486;
  __int16 v487;
  uint64_t v488;
  char v489;
  float v490;
  std::__shared_weak_count *v491;
  float cfb;
  uint64_t cf;
  CFDataRef cfa;
  int8x16_t v495;
  int8x16_t v496;
  char *v497;
  float64x2_t v498;
  int8x16_t v499;
  int8x16_t v500;
  float32x2_t v501;
  float64x2_t v502;
  int8x16_t v503;
  int8x16_t v504;
  float32x2_t v505;
  float64x2_t v506;
  float v507;
  __int128 v508;
  float32x2_t v509;
  char *v510;
  unint64_t v511;
  char *v512;
  void *v513;
  char *v514;
  unint64_t v515;
  char v516[16];
  void *v517;
  _QWORD *v518;
  void *v519[2];
  void *v520[2];
  __int128 v521;
  char v522;
  uint64_t v523;
  std::__shared_weak_count *v524;
  void *v525;
  void *v526;
  char *v527;
  void *v528;
  char *v529;
  _QWORD *v530;
  _QWORD v531[2];
  std::__shared_weak_count *v532;
  _BYTE v533[32];
  float64x2_t v534;
  __int128 v535;
  char v536;
  _QWORD v537[5];
  void *v538;
  void *v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  double v544;
  std::__shared_weak_count *v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  std::__shared_weak_count *v554;
  uint64_t v555;
  std::__shared_weak_count *v556;
  char v557;
  float v558[14];
  int v559;
  __int16 v560;
  __int128 __dst;
  char v562;
  unint64_t v563;
  const __CFData *v564;
  std::error_condition v565;
  void *__p;
  char *v567;
  char *v568;
  char *v569;
  char **v570;
  __int128 theDict;
  __int128 v572;
  std::error_condition v573[3];
  __int128 v574;
  _BYTE v575[48];
  __int128 v576;
  uint64_t v577;
  float64x2x2_t v578;
  float64x2x2_t v579;

  v577 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v476 = a2;
  if (!*((_QWORD *)a2 + 9))
  {
    v44 = atomic_load((unsigned __int8 *)&qword_253E50C40);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C40))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C38, &dword_207C77000);
      __cxa_guard_release(&qword_253E50C40);
    }
    *(_QWORD *)v575 = 4;
    *(_QWORD *)&v575[8] = &off_253E50C38;
    HIBYTE(v537[2]) = 17;
    strcpy((char *)v537, "Sentinal received");
    *(_QWORD *)v533 = operator new(0x68uLL);
    *(_OWORD *)&v533[8] = xmmword_208230210;
    strcpy(*(char **)v533, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/AppCodeAPI/src/AppCodeProcessorNode.cpp");
    sub_207D01528((const std::error_condition *)v575, (uint64_t)v537, (CFErrorRef *)v573);
    v45 = v573[0];
    v573[0].__cat_ = 0;
    *(_QWORD *)&v573[0].__val_ = 0;
    *(std::error_condition *)a3 = v45;
    *(_BYTE *)(a3 + 48) = 0;
    v46 = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a3 + 56) = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a3 + 64) = v46;
    if (v46)
    {
      v47 = (unint64_t *)(v46 + 8);
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    *(_QWORD *)(a3 + 72) = *((_QWORD *)a2 + 65);
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    v49 = *((_QWORD *)a2 + 66);
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 152) = v49;
    v50 = *((_QWORD *)a2 + 67);
    *(_QWORD *)(a3 + 160) = v50;
    if (v50)
    {
      v51 = (unint64_t *)(v50 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    *(_BYTE *)(a3 + 168) = 0;
    *(_BYTE *)(a3 + 232) = 0;
    cat = (std::__shared_weak_count *)v573[0].__cat_;
    if (!v573[0].__cat_)
      goto LABEL_31;
    v54 = (unint64_t *)&v573[0].__cat_[1];
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
      std::__shared_weak_count::__release_weak(cat);
      if ((v533[23] & 0x80000000) == 0)
      {
LABEL_32:
        if ((SHIBYTE(v537[2]) & 0x80000000) == 0)
          return kdebug_trace();
LABEL_600:
        v449 = (void *)v537[0];
        goto LABEL_623;
      }
    }
    else
    {
LABEL_31:
      if ((v533[23] & 0x80000000) == 0)
        goto LABEL_32;
    }
    operator delete(*(void **)v533);
    if ((SHIBYTE(v537[2]) & 0x80000000) == 0)
      return kdebug_trace();
    goto LABEL_600;
  }
  if (*((_BYTE *)a2 + 512))
  {
    v475 = a3;
    LOBYTE(v537[0]) = 0;
    v557 = 0;
    sub_207CDAFE4((uint64_t)v537, (uint64_t *)a2 + 11);
    v6 = *(__int128 *)((char *)a2 + 456);
    v550 = *(__int128 *)((char *)a2 + 440);
    v551 = v6;
    v7 = *(__int128 *)((char *)a2 + 392);
    v546 = *(__int128 *)((char *)a2 + 376);
    v547 = v7;
    v8 = *(__int128 *)((char *)a2 + 424);
    v548 = *(__int128 *)((char *)a2 + 408);
    v549 = v8;
    v9 = *((_QWORD *)a2 + 60);
    v552 = *((_QWORD *)a2 + 59);
    v553 = v9;
    v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 61);
    v554 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 63);
    v555 = *((_QWORD *)a2 + 62);
    v556 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    goto LABEL_9;
  }
  v56 = *(uint64_t **)(a1 + 24);
  if (!v56)
    goto LABEL_76;
  v57 = *((_DWORD *)a2 + 17);
  v58 = a2;
  v60 = *v56;
  v59 = v56[1];
  if (v60 != v59)
  {
    v61 = *((_DWORD *)v58 + 16);
    while (*(_DWORD *)v60 != v61)
    {
      v60 += 856;
      if (v60 == v59)
        goto LABEL_76;
    }
  }
  if (v60 == v59 || !v60)
    goto LABEL_76;
  if (v57 != 1)
  {
    if (!v57)
    {
      v475 = a3;
      sub_207CDAFE4((uint64_t)v537, (uint64_t *)(v60 + 8));
      v80 = *(_OWORD *)(v60 + 344);
      v81 = *(_OWORD *)(v60 + 360);
      v82 = *(_OWORD *)(v60 + 376);
      v83 = *(_QWORD *)(v60 + 400);
      v552 = *(_QWORD *)(v60 + 392);
      v84 = *(_OWORD *)(v60 + 312);
      v85 = *(_OWORD *)(v60 + 328);
      v546 = *(_OWORD *)(v60 + 296);
      v547 = v84;
      v550 = v81;
      v551 = v82;
      v548 = v85;
      v549 = v80;
      v86 = *(std::__shared_weak_count **)(v60 + 408);
      v553 = v83;
      v554 = v86;
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      v89 = *(std::__shared_weak_count **)(v60 + 424);
      v555 = *(_QWORD *)(v60 + 416);
      v556 = v89;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      goto LABEL_9;
    }
LABEL_76:
    LOBYTE(v537[0]) = 0;
    v557 = 0;
    *(_QWORD *)v533 = operator new(0x20uLL);
    *(_OWORD *)&v533[8] = xmmword_20822CA00;
    strcpy(*(char **)v533, "Camera calibration is null");
    *(_QWORD *)v575 = operator new(0x68uLL);
    *(_OWORD *)&v575[8] = xmmword_208230210;
    strcpy(*(char **)v575, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/AppCodeAPI/src/AppCodeProcessorNode.cpp");
    *(_QWORD *)&v573[0].__val_ = 22;
    v573[0].__cat_ = std::generic_category();
    sub_207D01528(v573, (uint64_t)v533, (CFErrorRef *)v519);
    v92 = *(_OWORD *)v519;
    v519[0] = 0;
    v519[1] = 0;
    *(_OWORD *)a3 = v92;
    *(_BYTE *)(a3 + 48) = 0;
    v93 = *((_QWORD *)v476 + 10);
    *(_QWORD *)(a3 + 56) = *((_QWORD *)v476 + 9);
    *(_QWORD *)(a3 + 64) = v93;
    if (v93)
    {
      v94 = (unint64_t *)(v93 + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    *(_QWORD *)(a3 + 72) = *((_QWORD *)v476 + 65);
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    v96 = *((_QWORD *)v476 + 66);
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 152) = v96;
    v97 = *((_QWORD *)v476 + 67);
    *(_QWORD *)(a3 + 160) = v97;
    if (v97)
    {
      v98 = (unint64_t *)(v97 + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    *(_BYTE *)(a3 + 168) = 0;
    *(_BYTE *)(a3 + 232) = 0;
    v100 = (std::__shared_weak_count *)v519[1];
    if (v519[1])
    {
      v101 = (unint64_t *)((char *)v519[1] + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if ((v575[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v575);
      if ((v533[23] & 0x80000000) == 0)
        goto LABEL_603;
    }
    else if ((v533[23] & 0x80000000) == 0)
    {
      goto LABEL_603;
    }
    operator delete(*(void **)v533);
    goto LABEL_603;
  }
  v475 = a3;
  sub_207CDAFE4((uint64_t)v537, (uint64_t *)(v60 + 432));
  v460 = *(_OWORD *)(v60 + 800);
  v550 = *(_OWORD *)(v60 + 784);
  v551 = v460;
  v461 = *(_QWORD *)(v60 + 816);
  v462 = *(_OWORD *)(v60 + 736);
  v546 = *(_OWORD *)(v60 + 720);
  v547 = v462;
  v463 = *(_OWORD *)(v60 + 768);
  v548 = *(_OWORD *)(v60 + 752);
  v549 = v463;
  v464 = *(_QWORD *)(v60 + 824);
  v552 = v461;
  v553 = v464;
  v465 = *(std::__shared_weak_count **)(v60 + 832);
  v554 = v465;
  if (v465)
  {
    v466 = (unint64_t *)&v465->__shared_owners_;
    do
      v467 = __ldxr(v466);
    while (__stxr(v467 + 1, v466));
  }
  v468 = *(std::__shared_weak_count **)(v60 + 848);
  v555 = *(_QWORD *)(v60 + 840);
  v556 = v468;
  if (v468)
  {
    v469 = (unint64_t *)&v468->__shared_owners_;
    do
      v470 = __ldxr(v469);
    while (__stxr(v470 + 1, v469));
  }
LABEL_9:
  v557 = 1;
  v16.f64[0] = *((float64_t *)&v540 + 1);
  *(_QWORD *)&v17.f64[0] = v540;
  v17.f64[1] = *((float64_t *)&v541 + 1);
  *(_QWORD *)&v18.f64[0] = v541;
  *(_QWORD *)&v16.f64[1] = v542;
  v502 = v16;
  v506 = v17;
  v18.f64[1] = *((float64_t *)&v542 + 1);
  v498 = v18;
  v19 = v543;
  v20 = v544;
  v533[0] = 0;
  v536 = 0;
  if (*((_BYTE *)v476 + 56))
  {
    LODWORD(v21) = *(_QWORD *)v476;
    DWORD1(v21) = *((_DWORD *)v476 + 4);
    *((_QWORD *)&v21 + 1) = *((unsigned int *)v476 + 8);
    LODWORD(v22) = HIDWORD(*(_QWORD *)v476);
    DWORD1(v22) = *((_DWORD *)v476 + 5);
    *((_QWORD *)&v22 + 1) = *((unsigned int *)v476 + 9);
    LODWORD(v17.f64[0]) = *((_DWORD *)v476 + 2);
    HIDWORD(v17.f64[0]) = *((_DWORD *)v476 + 6);
    LODWORD(v17.f64[1]) = *((_DWORD *)v476 + 10);
    __asm { FMOV            V3.4S, #1.0 }
    LODWORD(_Q3) = *((_DWORD *)v476 + 3);
    DWORD1(_Q3) = *((_DWORD *)v476 + 7);
    DWORD2(_Q3) = *((_DWORD *)v476 + 11);
    *(_OWORD *)v533 = v21;
    *(_OWORD *)&v533[16] = v22;
    v534 = v17;
    v535 = _Q3;
    v536 = 1;
  }
  v531[0] = &off_24C08A5D8;
  v27 = (char *)operator new(0xA0uLL);
  v28 = (std::__shared_weak_count *)v27;
  v29 = vcvt_f32_f64(v506);
  v30 = vcvt_f32_f64(v502);
  v31.i64[1] = *(_QWORD *)&v498.f64[1];
  v32 = vcvt_f32_f64(v498);
  v33 = *(double *)&v19;
  v34 = *((double *)&v19 + 1);
  v35 = v20;
  *(float32x2_t *)v31.i8 = v29;
  v503 = v31;
  *(float32x2_t *)v31.i8 = v30;
  v499 = v31;
  *(float32x2_t *)v31.i8 = v32;
  v495 = v31;
  *((_QWORD *)v27 + 1) = 0;
  v36 = (unint64_t *)(v27 + 8);
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = off_24C08A688;
  v37 = v27 + 24;
  v38 = *((_QWORD *)v476 + 9);
  v39 = (std::__shared_weak_count *)*((_QWORD *)v476 + 10);
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    *((_QWORD *)v27 + 3) = v38;
    *((_QWORD *)v27 + 4) = v39;
    do
      v42 = __ldxr(v40);
    while (__stxr(v42 + 1, v40));
    *((_DWORD *)v27 + 10) = 0;
    *((_QWORD *)v27 + 6) = 0;
    *((_QWORD *)v27 + 7) = 0;
    *((_QWORD *)v27 + 8) = 850045863;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *((_QWORD *)v27 + 15) = 0;
    do
      v43 = __ldaxr(v40);
    while (__stlxr(v43 - 1, v40));
    if (!v43)
    {
      v507 = v20;
      v490 = *(double *)&v19;
      cfb = *((double *)&v19 + 1);
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      v33 = v490;
      v34 = cfb;
      v35 = v507;
    }
  }
  else
  {
    *((_QWORD *)v27 + 3) = v38;
    *((_QWORD *)v27 + 4) = 0;
    *((_DWORD *)v27 + 10) = 0;
    *((_QWORD *)v27 + 6) = 0;
    *((_QWORD *)v27 + 7) = 0;
    *((_QWORD *)v27 + 8) = 850045863;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *((_QWORD *)v27 + 15) = 0;
  }
  v62 = v503;
  *(float *)&v62.i32[2] = v33;
  v504 = v62;
  v63 = v499;
  *(float *)&v63.i32[2] = v34;
  v500 = v63;
  v64 = v495;
  *(float *)&v64.i32[2] = v35;
  v496 = v64;
  *(_OWORD *)&v28[5].__shared_owners_ = 0u;
  v28[6].std::__shared_count = 0u;
  v531[1] = v37;
  v532 = v28;
  *(_QWORD *)v575 = &off_24C08A5D8;
  *(_QWORD *)&v575[8] = v37;
  *(_QWORD *)&v575[16] = v28;
  do
    v65 = __ldxr(v36);
  while (__stxr(v65 + 1, v36));
  v529 = 0;
  v66 = operator new(0x18uLL);
  v528 = v66;
  v530 = v66 + 3;
  *v66 = &off_24C08A5D8;
  v66[1] = v37;
  v66[2] = v28;
  do
    v67 = __ldxr(v36);
  while (__stxr(v67 + 1, v36));
  v529 = (char *)(v66 + 3);
  *(_QWORD *)v575 = &off_24C08A5D8;
  do
    v68 = __ldaxr(v36);
  while (__stlxr(v68 - 1, v36));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  v69 = (char *)operator new(0x24uLL);
  v526 = v69 + 36;
  v527 = v69 + 36;
  *((_DWORD *)v69 + 2) = v504.i32[2];
  *(_QWORD *)v69 = v504.i64[0];
  *((_DWORD *)v69 + 5) = v500.i32[2];
  *(_QWORD *)(v69 + 12) = v500.i64[0];
  *((_DWORD *)v69 + 8) = v496.i32[2];
  *((_QWORD *)v69 + 3) = v496.i64[0];
  v525 = v69;
  sub_207CF9D84((std::__shared_weak_count_vtbl **)v575, *((std::__shared_weak_count_vtbl **)v476 + 66), 1);
  v70 = *(_QWORD *)v575;
  v71 = *(std::__shared_weak_count **)&v575[8];
  if (*(_QWORD *)&v575[8])
  {
    v72 = (unint64_t *)(*(_QWORD *)&v575[8] + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    v523 = v70;
    v524 = v71;
    do
      v74 = __ldxr(v72);
    while (__stxr(v74 + 1, v72));
    do
      v75 = __ldaxr(v72);
    while (__stlxr(v75 - 1, v72));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    v76 = *(std::__shared_weak_count **)&v575[8];
    if (*(_QWORD *)&v575[8])
    {
      v77 = (unint64_t *)(*(_QWORD *)&v575[8] + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
        v79 = 0uLL;
        if (v536)
          goto LABEL_64;
LABEL_91:
        v474 = 0;
        v473 = 0u;
        goto LABEL_92;
      }
    }
  }
  else
  {
    v523 = *(_QWORD *)v575;
    v524 = 0;
  }
  v79 = 0uLL;
  if (!v536)
    goto LABEL_91;
LABEL_64:
  v472 = v476[1];
  v473 = *v476;
  v474 = 1;
  v471 = v476[2];
LABEL_92:
  v521 = v79;
  *(_OWORD *)v519 = v79;
  *(_OWORD *)v520 = v79;
  v522 = 1;
  cf = a1;
  v103 = *(_QWORD ***)(a1 + 8);
  v104 = *((double *)v476 + 65);
  *(_WORD *)v575 = 0;
  sub_207D0452C(v103, &v528, (uint64_t *)&v525, (uint64_t)v533, (uint64_t)v575, 0, 0, (uint64_t)v516, v104);
  v105 = v518;
  v514 = 0;
  v515 = 0;
  v513 = 0;
  if (v518)
  {
    v106 = 0;
    v107 = v518;
    do
    {
      v106 -= 0x30C30C30C30C30C3 * ((uint64_t)(v107[4] - v107[3]) >> 6);
      v107 = (_QWORD *)*v107;
    }
    while (v107);
    if (v106)
    {
      if (v106 >> 60)
LABEL_637:
        sub_207CA420C();
      v108 = (char *)operator new(16 * v106);
      v106 = (unint64_t)&v108[16 * v106];
      v513 = v108;
      v514 = v108;
      v515 = v106;
    }
    else
    {
      v108 = 0;
    }
    v109 = v108;
    while (1)
    {
      v110 = v105[3];
      v111 = v105[4];
      if (v110 != v111)
        break;
LABEL_100:
      v105 = (_QWORD *)*v105;
      if (!v105)
        goto LABEL_165;
    }
    v112 = v108;
    while (1)
    {
      if (**(_DWORD **)(v110 + 1104))
        goto LABEL_105;
      if ((unint64_t)v109 >= v106)
        break;
      *(_OWORD *)v109 = *(_OWORD *)(v110 + 128);
      v113 = v109 + 16;
LABEL_104:
      v514 = v113;
      v109 = v113;
LABEL_105:
      v110 += 1344;
      if (v110 == v111)
        goto LABEL_100;
    }
    v114 = v109 - v112;
    v115 = (v109 - v112) >> 4;
    v116 = v115 + 1;
    if ((unint64_t)(v115 + 1) >> 60)
      goto LABEL_637;
    v508 = *(_OWORD *)(v110 + 128);
    if ((uint64_t)(v106 - (_QWORD)v112) >> 3 > v116)
      v116 = (uint64_t)(v106 - (_QWORD)v112) >> 3;
    if (v106 - (unint64_t)v112 >= 0x7FFFFFFFFFFFFFF0)
      v117 = 0xFFFFFFFFFFFFFFFLL;
    else
      v117 = v116;
    if (v117 >> 60)
      sub_207CA3AB8();
    v118 = (char *)operator new(16 * v117);
    v119 = &v118[16 * v115];
    *(_OWORD *)v119 = v508;
    v113 = v119 + 16;
    if (v109 == v112)
    {
      v108 = v119;
      v106 = (unint64_t)&v118[16 * v117];
      v513 = v119;
      v515 = v106;
      if (!v112)
        goto LABEL_121;
      goto LABEL_120;
    }
    v120 = v109 - v112 - 16;
    if (v120 < 0x3F0)
      goto LABEL_117;
    v123 = v109 - 16;
    v124 = v109 - 16 - v112;
    v125 = v124 & 0xFFFFFFFFFFFFFFF0;
    if (&v118[v114 - 16 - (v124 & 0xFFFFFFFFFFFFFFF0)] > &v118[v114 - 16])
      goto LABEL_117;
    if (&v118[v114 - 8 - v125] > &v118[v114 - 8])
      goto LABEL_117;
    if (&v123[-v125] > v123)
      goto LABEL_117;
    v126 = v109 - 8;
    if (&v109[-v125 - 8] > v109 - 8)
      goto LABEL_117;
    v127 = v124 & 0xFFFFFFFFFFFFFFF0;
    v128 = (unint64_t)&v118[v114 - v127 - 16];
    v129 = &v118[v114 - 8];
    v130 = (unint64_t)&v118[v114 - v127 - 8];
    v131 = (unint64_t)&v123[-v127];
    v132 = (unint64_t)&v126[-v127];
    _CF = v128 >= (unint64_t)v126 || v131 >= (unint64_t)v129;
    v134 = !_CF;
    v135 = v128 >= (unint64_t)v109 || v132 >= (unint64_t)v129;
    v136 = !v135;
    v137 = v130 >= (unint64_t)v126 || v131 >= (unint64_t)v119;
    v138 = !v137;
    v139 = v130 >= (unint64_t)v109 || v132 >= (unint64_t)v119;
    v140 = !v139;
    v141 = v130 >= (unint64_t)v129 || v128 >= (unint64_t)v119;
    if (!v141 || v134 || v136 || v138 || v140)
    {
LABEL_117:
      v121 = v109;
      v108 = v119;
    }
    else
    {
      v142 = (v120 >> 4) + 1;
      v143 = 16 * (v142 & 0x1FFFFFFFFFFFFFFCLL);
      v121 = &v109[-v143];
      v108 = &v119[-v143];
      v144 = (const double *)(v109 - 32);
      v145 = (double *)(v119 - 32);
      v146 = v142 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v578 = vld2q_f64(v144);
        v147 = v144 - 4;
        v579 = vld2q_f64(v147);
        vst2q_f64(v145, v578);
        v148 = v145 - 4;
        vst2q_f64(v148, v579);
        v145 -= 8;
        v144 -= 8;
        v146 -= 4;
      }
      while (v146);
      if (v142 == (v142 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_119:
        v106 = (unint64_t)&v118[16 * v117];
        v513 = v108;
        v515 = v106;
        if (!v112)
        {
LABEL_121:
          v112 = v108;
          goto LABEL_104;
        }
LABEL_120:
        operator delete(v112);
        goto LABEL_121;
      }
    }
    do
    {
      v122 = *((_QWORD *)v121 - 2);
      v121 -= 16;
      *((_QWORD *)v108 - 2) = v122;
      v108 -= 16;
      *((_QWORD *)v108 + 1) = *((_QWORD *)v121 + 1);
    }
    while (v121 != v112);
    goto LABEL_119;
  }
LABEL_165:
  v480 = *(_DWORD *)(cf + 40);
  v149 = sub_20815C130((uint64_t)v531);
  v150 = sub_20815C3B0((uint64_t)v531);
  v510 = 0;
  v511 = 0;
  v512 = 0;
  v151 = v518;
  if (!v518)
    goto LABEL_518;
  v152 = v150;
  v153 = 0;
  v154 = v518;
  do
  {
    v153 -= 0x30C30C30C30C30C3 * ((uint64_t)(v151[4] - v151[3]) >> 6);
    v151 = (_QWORD *)*v151;
  }
  while (v151);
  if (v153)
  {
    if (v153 > 0x199999999999999)
      sub_207CA420C();
    v510 = (char *)operator new(160 * v153);
    v511 = (unint64_t)v510;
    v512 = &v510[160 * v153];
  }
  v155 = (float)v149;
  v156 = (float)v152;
  allocator = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  key = (void *)*MEMORY[0x24BDBD3A8];
  v157 = vextq_s8(v504, v504, 8uLL).u64[0];
  v505 = (float32x2_t)vextq_s8(v500, v500, 8uLL).u64[0];
  v509 = (float32x2_t)v157;
  v501 = (float32x2_t)vextq_s8(v496, v496, 8uLL).u64[0];
  __asm { FMOV            V13.2S, #1.0 }
  while (2)
  {
    v160 = v154[3];
    v159 = v154[4];
    v478 = v154;
    if (v160 == v159)
      goto LABEL_172;
    v481 = v154[4];
    while (2)
    {
      if (**(_DWORD **)(v160 + 1104) != 2)
        goto LABEL_176;
      v161 = *(_QWORD *)(v160 + 40);
      v573[0] = *(std::error_condition *)(v160 + 456);
      v573[1] = *(std::error_condition *)(v160 + 472);
      v573[2] = *(std::error_condition *)(v160 + 488);
      v574 = *(_OWORD *)(v160 + 504);
      if (v480 == 1)
      {
        v162 = *(_BYTE *)(v160 + 1024) != 0;
        if (!v536)
        {
          sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/AppCodeAPI/src/AppCodeProcessorNode.cpp", 391, (uint64_t)"vio_to_cam_opt", 14, (uint64_t)"Pose unavailable for world tracking congifuration", 49, (void (*)(void **))sub_208216974);
          v163 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10 || byte_254530A18)
          {
            v164 = qword_2545309E8;
            for (i = qword_2545309F0; v164 != i; v164 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v164)(*(_QWORD *)(v164 + 8), "vio_to_cam_opt", 14, "Pose unavailable for world tracking congifuration", 49);
          }
          v166 = atomic_load((unsigned __int8 *)&qword_254530A20);
          if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
          {
            __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
            __cxa_guard_release(&qword_254530A20);
          }
          if (!byte_254530A10)
            abort();
          qword_254530A00(*(_QWORD *)algn_254530A08, "vio_to_cam_opt", 14, "Pose unavailable for world tracking congifuration", 49);
        }
        if (!*(_BYTE *)(v160 + 652))
          sub_207CA2A4C();
        v167 = *(std::error_condition *)(v160 + 604);
        v573[0] = *(std::error_condition *)(v160 + 588);
        v573[1] = v167;
        v168 = *(_OWORD *)(v160 + 636);
        v573[2] = *(std::error_condition *)(v160 + 620);
        v574 = v168;
        v486 = 1;
      }
      else
      {
        v162 = 0;
        v486 = 0;
      }
      v487 = v162;
      v488 = v161;
      v169 = *(float *)(v160 + 156);
      v170 = *(float *)(v160 + 160);
      v558[0] = -v169;
      v558[1] = -v170;
      v558[2] = 0.0;
      v558[3] = v169;
      v558[4] = -v170;
      v558[5] = 0.0;
      v558[6] = v169;
      v558[7] = v170;
      v558[8] = 0.0;
      v558[9] = -v169;
      v558[10] = v170;
      v558[11] = 0.0;
      v567 = 0;
      __p = 0;
      v568 = 0;
      v171 = 0;
      __p = operator new(0x40uLL);
      v567 = (char *)__p;
      v568 = (char *)__p + 64;
      do
      {
        v177 = (float32x2_t *)&v558[3 * v171];
        v172.i32[0] = v177[1].i32[0];
        v173.i32[0] = *(_DWORD *)(v160 + 464);
        v174.i32[0] = *(_DWORD *)(v160 + 480);
        v175.i32[0] = *(_DWORD *)(v160 + 496);
        *(float32x2_t *)v178.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v160 + 456), COERCE_FLOAT(*v177)), *(float32x2_t *)(v160 + 472), *v177, 1), *(float32x2_t *)(v160 + 488), v172.f32[0]);
        *(float32x2_t *)&v178.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v173, *v177), v174, *v177, 1), *(float32x2_t *)v172.f32, v175);
        v172.i64[0] = *(_QWORD *)(v160 + 504);
        v172.i32[2] = *(_DWORD *)(v160 + 512);
        v179 = (CGPoint)vaddq_f32(v178, v172);
        v180 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v29, *(float *)&v179.x), v30, *(float32x2_t *)&v179.x, 1), v32, (float32x4_t)v179, 2);
        v178.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(v509, *(float32x2_t *)&v179.x), v505, *(float32x2_t *)&v179.x, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL), v501).f32[0];
        v179.x = (float)(v180.f32[0] / (float)(v155 * v178.f32[0]));
        v181 = (float)(v180.f32[1] / (float)(v156 * v178.f32[0]));
        DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v179);
        v183 = (const __CFDictionary *)operator new(0x20uLL);
        v185 = v183;
        *((_QWORD *)v183 + 1) = 0;
        *(_QWORD *)v183 = &off_24C070A98;
        *((_QWORD *)v183 + 2) = 0;
        *((_QWORD *)v183 + 3) = DictionaryRepresentation;
        v186 = v567;
        if (v567 < v568)
        {
          *(_QWORD *)v567 = DictionaryRepresentation;
          *((_QWORD *)v186 + 1) = v183;
          v176 = v186 + 16;
          goto LABEL_193;
        }
        v187 = (char *)__p;
        v188 = (v567 - (_BYTE *)__p) >> 4;
        v189 = v188 + 1;
        if ((unint64_t)(v188 + 1) >> 60)
          sub_207CA420C();
        v190 = v568 - (_BYTE *)__p;
        if ((v568 - (_BYTE *)__p) >> 3 > v189)
          v189 = v190 >> 3;
        if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0)
          v191 = 0xFFFFFFFFFFFFFFFLL;
        else
          v191 = v189;
        if (v191)
        {
          if (v191 >> 60)
            sub_207CA3AB8();
          v192 = (char *)operator new(16 * v191);
          v193 = (CFDictionaryRef *)&v192[16 * v188];
          v194 = &v192[16 * v191];
          *v193 = DictionaryRepresentation;
          v193[1] = v185;
          v176 = (char *)(v193 + 2);
          if (v186 != v187)
          {
            do
            {
LABEL_206:
              v195 = *((float32x4_t *)v186 - 1);
              v186 -= 16;
              v172 = v195;
              *((float32x4_t *)v193 - 1) = v195;
              v193 -= 2;
              *(_QWORD *)v186 = 0;
              *((_QWORD *)v186 + 1) = 0;
            }
            while (v186 != v187);
            v186 = (char *)__p;
            v196 = v567;
            __p = v193;
            v567 = v176;
            v568 = v194;
            while (v196 != v186)
            {
              v197 = (std::__shared_weak_count *)*((_QWORD *)v196 - 1);
              if (v197)
              {
                v198 = (unint64_t *)&v197->__shared_owners_;
                do
                  v199 = __ldaxr(v198);
                while (__stlxr(v199 - 1, v198));
                if (!v199)
                {
                  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                  std::__shared_weak_count::__release_weak(v197);
                }
              }
              v196 -= 16;
            }
            goto LABEL_216;
          }
        }
        else
        {
          v193 = (CFDictionaryRef *)(16 * v188);
          v194 = 0;
          *v193 = DictionaryRepresentation;
          v193[1] = v183;
          v176 = (char *)(16 * v188 + 16);
          if (v186 != v187)
            goto LABEL_206;
        }
        __p = v193;
        v568 = v194;
LABEL_216:
        if (v186)
          operator delete(v186);
LABEL_193:
        v567 = v176;
        ++v171;
      }
      while (v171 != 4);
      v200 = (char *)__p;
      *(std::error_condition *)v575 = v573[0];
      *(std::error_condition *)&v575[16] = v573[1];
      *(std::error_condition *)&v575[32] = v573[2];
      v576 = v574;
      v201 = *(float32x2_t *)(v160 + 156);
      v202 = *(double *)(v160 + 1016);
      v184.i8[0] = *(_BYTE *)(v160 + 1024);
      v203 = *(_DWORD *)(v160 + 88);
      v497 = (char *)__p;
      v482 = v184;
      v483 = *(float32x2_t *)(v160 + 144);
      if (!*(_BYTE *)(v160 + 1080))
      {
        if (*(unsigned __int8 *)(v160 + 1040) == 255)
          v211 = "Not Decoded";
        else
          v211 = "Decoding Error";
        if (*(unsigned __int8 *)(v160 + 1040) == 255)
          v212 = 11;
        else
          v212 = 14;
        v562 = v212;
        memcpy(&__dst, v211, v212);
        *((_BYTE *)&__dst + v212) = 0;
        v213 = atomic_load((unsigned __int8 *)&qword_253E50C40);
        if ((v213 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C40))
        {
          __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C38, &dword_207C77000);
          __cxa_guard_release(&qword_253E50C40);
        }
        *(_QWORD *)&v565.__val_ = 1;
        v565.__cat_ = (const std::error_category *)&off_253E50C38;
        v567 = 0;
        v568 = 0;
        __p = &v567;
        sub_207D006CC(&__p, (std::__shared_weak_count_vtbl **)&v572);
        theDict = v572;
        sub_207CFF9E4((uint64_t)&__p, v567);
        v214 = theDict;
        if (!*((_QWORD *)&theDict + 1))
          goto LABEL_237;
        v215 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
        do
          v216 = __ldxr(v215);
        while (__stxr(v216 + 1, v215));
        do
          v217 = __ldaxr(v215);
        while (__stlxr(v217 - 1, v215));
        if (!v217)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v214 + 1) + 16))(*((_QWORD *)&v214 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v214 + 1));
          if (!(_QWORD)v214)
            goto LABEL_298;
        }
        else
        {
LABEL_237:
          if (!(_QWORD)v214)
            goto LABEL_298;
        }
        if (v562 >= 0)
          p_dst = (const UInt8 *)&__dst;
        else
          p_dst = (const UInt8 *)__dst;
        if (v562 >= 0)
          v219 = v562;
        else
          v219 = *((_QWORD *)&__dst + 1);
        v220 = (__CFString *)CFStringCreateWithBytes(allocator, p_dst, v219, 0x8000100u, 0);
        v221 = (std::__shared_weak_count *)operator new(0x20uLL);
        v222 = v221;
        v221->__shared_owners_ = 0;
        v223 = (unint64_t *)&v221->__shared_owners_;
        v221->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727A0;
        v221->__shared_weak_owners_ = 0;
        v221[1].__vftable = (std::__shared_weak_count_vtbl *)v220;
        __p = v220;
        v567 = (char *)v221;
        do
          v224 = __ldxr(v223);
        while (__stxr(v224 + 1, v223));
        do
          v225 = __ldaxr(v223);
        while (__stlxr(v225 - 1, v223));
        if (v225)
        {
          v226 = __p;
          v227 = (std::__shared_weak_count *)v567;
          if (!v567)
            goto LABEL_291;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v222);
          v226 = __p;
          v227 = (std::__shared_weak_count *)v567;
          if (!v567)
            goto LABEL_291;
        }
        v253 = (unint64_t *)&v227->__shared_owners_;
        do
          v254 = __ldxr(v253);
        while (__stxr(v254 + 1, v253));
        do
          v255 = __ldaxr(v253);
        while (__stlxr(v255 - 1, v253));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
          if (!v226)
            goto LABEL_293;
          goto LABEL_292;
        }
LABEL_291:
        if (!v226)
        {
LABEL_293:
          v256 = (std::__shared_weak_count *)v567;
          if (v567)
          {
            v257 = (unint64_t *)(v567 + 8);
            do
              v258 = __ldaxr(v257);
            while (__stlxr(v258 - 1, v257));
            if (!v258)
            {
              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
              std::__shared_weak_count::__release_weak(v256);
            }
          }
LABEL_298:
          Default = CFAllocatorGetDefault();
          sub_207D00BEC((CFErrorRef *)&v563, &v565, (std::string::size_type *)&theDict, Default);
          v260 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
          if (!*((_QWORD *)&theDict + 1))
            goto LABEL_302;
          v261 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
          do
            v262 = __ldaxr(v261);
          while (__stlxr(v262 - 1, v261));
          if (!v262)
          {
            ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
            std::__shared_weak_count::__release_weak(v260);
            v263 = v563;
            cfa = v564;
            if ((v562 & 0x80000000) == 0)
              goto LABEL_304;
          }
          else
          {
LABEL_302:
            v263 = v563;
            cfa = v564;
            if ((v562 & 0x80000000) == 0)
            {
LABEL_304:
              v485 = 0;
              v491 = 0;
              v205 = v263;
              v239 = v263 >> 8;
              v233 = 1;
              goto LABEL_305;
            }
          }
LABEL_303:
          operator delete((void *)__dst);
          goto LABEL_304;
        }
LABEL_292:
        CFDictionarySetValue((CFMutableDictionaryRef)theDict, key, __p);
        goto LABEL_293;
      }
      v204 = *(_DWORD *)(v160 + 1040);
      if (v204 == 2)
      {
        v228 = *(unsigned __int8 *)(v160 + 1044);
        v229 = (std::__shared_weak_count *)operator new(0x20uLL);
        v229->__shared_owners_ = 0;
        v230 = (unint64_t *)&v229->__shared_owners_;
        v205 = v228 | 0x80;
        v229->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
        v229->__shared_weak_owners_ = 0;
        v229[1].__vftable = 0;
        v491 = v229;
        do
          v231 = __ldxr(v230);
        while (__stxr(v231 + 1, v230));
        do
          v232 = __ldaxr(v230);
        while (__stlxr(v232 - 1, v230));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v491);
        }
        v233 = 0;
        cfa = 0;
        goto LABEL_264;
      }
      if (v204 == 1)
      {
        v205 = *(unsigned __int8 *)(v160 + 1044);
        cfa = CFDataCreate(allocator, 0, 0);
        v206 = (std::__shared_weak_count *)operator new(0x20uLL);
        v206->__shared_owners_ = 0;
        v208 = (unint64_t *)&v206->__shared_owners_;
        v206->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
        v491 = v206;
        v206->__shared_weak_owners_ = 0;
        v206[1].__vftable = (std::__shared_weak_count_vtbl *)cfa;
        do
          v209 = __ldxr(v208);
        while (__stxr(v209 + 1, v208));
        do
          v210 = __ldaxr(v208);
        while (__stlxr(v210 - 1, v208));
        goto LABEL_261;
      }
      if (!*(_BYTE *)(v160 + 1072)
        || (v234 = *(const UInt8 **)(v160 + 1048), v235 = *(const UInt8 **)(v160 + 1056), v234 == v235))
      {
        v240 = atomic_load((unsigned __int8 *)&qword_253E50C40);
        if ((v240 & 1) == 0 && __cxa_guard_acquire(&qword_253E50C40))
        {
          __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C38, &dword_207C77000);
          __cxa_guard_release(&qword_253E50C40);
        }
        *(_QWORD *)&v565.__val_ = 1;
        v565.__cat_ = (const std::error_category *)&off_253E50C38;
        v562 = 10;
        strcpy((char *)&__dst, "No Message");
        v567 = 0;
        v568 = 0;
        __p = &v567;
        sub_207D006CC(&__p, (std::__shared_weak_count_vtbl **)&v572);
        theDict = v572;
        sub_207CFF9E4((uint64_t)&__p, v567);
        v241 = theDict;
        if (!*((_QWORD *)&theDict + 1))
          goto LABEL_271;
        v242 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
        do
          v243 = __ldxr(v242);
        while (__stxr(v243 + 1, v242));
        do
          v244 = __ldaxr(v242);
        while (__stlxr(v244 - 1, v242));
        if (!v244)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v241 + 1) + 16))(*((_QWORD *)&v241 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v241 + 1));
          if (!(_QWORD)v241)
            goto LABEL_501;
        }
        else
        {
LABEL_271:
          if (!(_QWORD)v241)
            goto LABEL_501;
        }
        sub_207CF8F18((uint64_t)&__dst, (CFStringRef *)&__p);
        v245 = __p;
        v246 = (std::__shared_weak_count *)v567;
        if (!v567)
          goto LABEL_277;
        v247 = (unint64_t *)(v567 + 8);
        do
          v248 = __ldxr(v247);
        while (__stxr(v248 + 1, v247));
        do
          v249 = __ldaxr(v247);
        while (__stlxr(v249 - 1, v247));
        if (!v249)
        {
          ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
          std::__shared_weak_count::__release_weak(v246);
          if (!v245)
            goto LABEL_279;
        }
        else
        {
LABEL_277:
          if (!v245)
          {
LABEL_279:
            v250 = (std::__shared_weak_count *)v567;
            if (v567)
            {
              v251 = (unint64_t *)(v567 + 8);
              do
                v252 = __ldaxr(v251);
              while (__stlxr(v252 - 1, v251));
              if (!v252)
              {
                ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                std::__shared_weak_count::__release_weak(v250);
              }
            }
LABEL_501:
            v388 = CFAllocatorGetDefault();
            sub_207D00BEC((CFErrorRef *)&v563, &v565, (std::string::size_type *)&theDict, v388);
            v389 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
            if (*((_QWORD *)&theDict + 1))
            {
              v390 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
              do
                v391 = __ldaxr(v390);
              while (__stlxr(v391 - 1, v390));
              if (!v391)
              {
                ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
                std::__shared_weak_count::__release_weak(v389);
              }
            }
            v263 = v563;
            v392 = v564;
            v563 = 0;
            v564 = 0;
            cfa = v392;
            if ((v562 & 0x80000000) == 0)
              goto LABEL_304;
            goto LABEL_303;
          }
        }
        CFDictionarySetValue((CFMutableDictionaryRef)theDict, key, __p);
        goto LABEL_279;
      }
      v205 = *(unsigned __int8 *)(v160 + 1044);
      cfa = CFDataCreate(allocator, v234, v235 - v234);
      v236 = (std::__shared_weak_count *)operator new(0x20uLL);
      v236->__shared_owners_ = 0;
      v237 = (unint64_t *)&v236->__shared_owners_;
      v236->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
      v491 = v236;
      v236->__shared_weak_owners_ = 0;
      v236[1].__vftable = (std::__shared_weak_count_vtbl *)cfa;
      do
        v238 = __ldxr(v237);
      while (__stxr(v238 + 1, v237));
      do
        v210 = __ldaxr(v237);
      while (__stlxr(v210 - 1, v237));
LABEL_261:
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
        std::__shared_weak_count::__release_weak(v491);
      }
      v233 = 0;
LABEL_264:
      v239 = 0;
      v485 = 1;
LABEL_305:
      v207.i32[0] = 0;
      v264.i32[1] = v482.i32[1];
      *(float *)v264.i32 = v202;
      v265 = vcvtq_f64_f32(vmul_f32(vsub_f32(v201, v483), (float32x2_t)vbsl_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v482, v207), 0), _D13, (int8x8_t)vdup_lane_s32(v264, 0))));
      v489 = v233;
      if (v511 >= (unint64_t)v512)
      {
        v277 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v511 - (_QWORD)v510) >> 5) + 1;
        if (v277 > 0x199999999999999)
          sub_207CA420C();
        if (0x999999999999999ALL * ((v512 - v510) >> 5) > v277)
          v277 = 0x999999999999999ALL * ((v512 - v510) >> 5);
        if (0xCCCCCCCCCCCCCCCDLL * ((v512 - v510) >> 5) >= 0xCCCCCCCCCCCCCCLL)
          v278 = 0x199999999999999;
        else
          v278 = v277;
        v570 = &v512;
        if (v278)
        {
          v484 = v265;
          if (v278 > 0x199999999999999)
            sub_207CA3AB8();
          v279 = (char *)operator new(160 * v278);
          v265 = v484;
        }
        else
        {
          v279 = 0;
        }
        v287 = &v279[32 * ((uint64_t)(v511 - (_QWORD)v510) >> 5)];
        __p = v279;
        v567 = v287;
        v568 = v287;
        v569 = &v279[160 * v278];
        v288 = *(_OWORD *)&v575[16];
        *(_OWORD *)v287 = *(_OWORD *)v575;
        *((_OWORD *)v287 + 1) = v288;
        v289 = v576;
        *((_OWORD *)v287 + 2) = *(_OWORD *)&v575[32];
        *((_OWORD *)v287 + 3) = v289;
        *((_WORD *)v287 + 32) = v487 | (v486 << 8);
        *(_DWORD *)(v287 + 66) = v559;
        *((_WORD *)v287 + 35) = v560;
        *((_QWORD *)v287 + 9) = v488;
        *((float64x2_t *)v287 + 5) = v265;
        *((_DWORD *)v287 + 24) = v203;
        v287[104] = 0;
        v290 = (uint64_t *)(v287 + 104);
        v287[128] = v485;
        if ((v233 & 1) != 0)
        {
          v291 = v205 | (v239 << 8);
          *(_QWORD *)&__dst = v291;
          *((_QWORD *)&__dst + 1) = cfa;
          if (cfa)
          {
            v292 = (unint64_t *)((char *)cfa + 8);
            do
              v293 = __ldxr(v292);
            while (__stxr(v293 + 1, v292));
          }
          if (v291)
            CFRetain((CFTypeRef)(v205 | (v239 << 8)));
          v294 = (std::__shared_weak_count *)operator new(0x20uLL);
          v295 = v294;
          v294->__shared_owners_ = 0;
          v296 = (unint64_t *)&v294->__shared_owners_;
          v294->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC80;
          v294->__shared_weak_owners_ = 0;
          v294[1].__vftable = (std::__shared_weak_count_vtbl *)v291;
          *v290 = v291;
          *((_QWORD *)v287 + 14) = v294;
          do
            v297 = __ldxr(v296);
          while (__stxr(v297 + 1, v296));
          do
            v298 = __ldaxr(v296);
          while (__stlxr(v298 - 1, v296));
          if (v298)
          {
            v299 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
            if (!*((_QWORD *)&__dst + 1))
              goto LABEL_390;
            goto LABEL_382;
          }
          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
          std::__shared_weak_count::__release_weak(v295);
          v299 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (*((_QWORD *)&__dst + 1))
          {
LABEL_382:
            v320 = (unint64_t *)&v299->__shared_owners_;
            do
              v321 = __ldaxr(v320);
            while (__stlxr(v321 - 1, v320));
            goto LABEL_388;
          }
LABEL_390:
          v323 = &v279[32 * ((uint64_t)(v511 - (_QWORD)v510) >> 5)];
          *((_QWORD *)v323 + 17) = 0;
          v324 = v323 + 136;
          v324[1] = 0;
          v325 = v324 + 1;
          v324[2] = 0;
          v326 = v176 - v200;
          if (v176 != v200)
          {
            if (v326 < 0)
              sub_207CA420C();
            v327 = operator new(v176 - v200);
            *v324 = v327;
            *v325 = v327;
            v324[2] = &v327[2 * (v326 >> 4)];
            v328 = v200;
            do
            {
              *v327 = *(_QWORD *)v328;
              v329 = *((_QWORD *)v328 + 1);
              v327[1] = v329;
              if (v329)
              {
                v330 = (unint64_t *)(v329 + 8);
                do
                  v331 = __ldxr(v330);
                while (__stxr(v331 + 1, v330));
              }
              v328 += 16;
              v327 += 2;
            }
            while (v328 != v176);
            *v325 = v327;
          }
          v332 = v567;
          v319 = v568 + 160;
          v568 += 160;
          v333 = (char *)v511;
          if ((char *)v511 == v510)
          {
            v510 = v567;
            v512 = v569;
            v268 = (std::__shared_weak_count *)cfa;
LABEL_469:
            v266 = v491;
            if (!v333)
              goto LABEL_471;
            goto LABEL_470;
          }
          v334 = 0;
          while (1)
          {
            v335 = *((_OWORD *)v333 - 10);
            v336 = *((_OWORD *)v333 - 8);
            *((_OWORD *)v332 - 9) = *((_OWORD *)v333 - 9);
            *((_OWORD *)v332 - 8) = v336;
            *((_OWORD *)v332 - 10) = v335;
            v337 = *((_OWORD *)v333 - 7);
            v338 = *((_OWORD *)v333 - 6);
            v339 = *((_OWORD *)v333 - 5);
            *((_DWORD *)v332 - 16) = *((_DWORD *)v333 - 16);
            *((_OWORD *)v332 - 6) = v338;
            *((_OWORD *)v332 - 5) = v339;
            *((_OWORD *)v332 - 7) = v337;
            *(v332 - 56) = 0;
            v340 = *(v333 - 32);
            *(v332 - 32) = v340;
            if (v340)
            {
              *(v332 - 56) = *(v333 - 56);
              v341 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v333 - 6);
              *(_QWORD *)&__dst = v341;
              v342 = *((_QWORD *)v333 - 5);
              *((_QWORD *)&__dst + 1) = v342;
              if (v342)
              {
                v343 = (unint64_t *)(v342 + 8);
                do
                  v344 = __ldxr(v343);
                while (__stxr(v344 + 1, v343));
              }
              if (v341)
                CFRetain(v341);
              v345 = (std::__shared_weak_count *)operator new(0x20uLL);
              v346 = v345;
              v345->__shared_owners_ = 0;
              v347 = (unint64_t *)&v345->__shared_owners_;
              v345->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
              v345->__shared_weak_owners_ = 0;
              v345[1].__vftable = v341;
              *((_QWORD *)v332 - 6) = v341;
              *((_QWORD *)v332 - 5) = v345;
              do
                v348 = __ldxr(v347);
              while (__stxr(v348 + 1, v347));
              do
                v349 = __ldaxr(v347);
              while (__stlxr(v349 - 1, v347));
              if (v349)
              {
                v350 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                if (!*((_QWORD *)&__dst + 1))
                  goto LABEL_434;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                std::__shared_weak_count::__release_weak(v346);
                v350 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                if (!*((_QWORD *)&__dst + 1))
                  goto LABEL_434;
              }
              v360 = (unint64_t *)&v350->__shared_owners_;
              do
                v361 = __ldaxr(v360);
              while (__stlxr(v361 - 1, v360));
            }
            else
            {
              v351 = (std::__shared_weak_count_vtbl *)*((_QWORD *)v333 - 7);
              *(_QWORD *)&__dst = v351;
              v352 = *((_QWORD *)v333 - 6);
              *((_QWORD *)&__dst + 1) = v352;
              if (v352)
              {
                v353 = (unint64_t *)(v352 + 8);
                do
                  v354 = __ldxr(v353);
                while (__stxr(v354 + 1, v353));
              }
              if (v351)
                CFRetain(v351);
              v355 = (std::__shared_weak_count *)operator new(0x20uLL);
              v356 = v355;
              v355->__shared_owners_ = 0;
              v357 = (unint64_t *)&v355->__shared_owners_;
              v355->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC80;
              v355->__shared_weak_owners_ = 0;
              v355[1].__vftable = v351;
              *((_QWORD *)v332 - 7) = v351;
              *((_QWORD *)v332 - 6) = v355;
              do
                v358 = __ldxr(v357);
              while (__stxr(v358 + 1, v357));
              do
                v359 = __ldaxr(v357);
              while (__stlxr(v359 - 1, v357));
              if (v359)
              {
                v350 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                if (!*((_QWORD *)&__dst + 1))
                  goto LABEL_434;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
                std::__shared_weak_count::__release_weak(v356);
                v350 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                if (!*((_QWORD *)&__dst + 1))
                  goto LABEL_434;
              }
              v362 = (unint64_t *)&v350->__shared_owners_;
              do
                v361 = __ldaxr(v362);
              while (__stlxr(v361 - 1, v362));
            }
            if (v361)
            {
LABEL_434:
              *((_QWORD *)v332 - 3) = 0;
              *((_QWORD *)v332 - 2) = 0;
              *((_QWORD *)v332 - 1) = 0;
              v364 = (char *)*((_QWORD *)v333 - 3);
              v363 = (char *)*((_QWORD *)v333 - 2);
              v365 = v363 - v364;
              if (v363 != v364)
                goto LABEL_435;
              goto LABEL_402;
            }
            ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
            std::__shared_weak_count::__release_weak(v350);
            *((_QWORD *)v332 - 3) = 0;
            *((_QWORD *)v332 - 2) = 0;
            *((_QWORD *)v332 - 1) = 0;
            v364 = (char *)*((_QWORD *)v333 - 3);
            v363 = (char *)*((_QWORD *)v333 - 2);
            v365 = v363 - v364;
            if (v363 != v364)
            {
LABEL_435:
              if (v365 < 0)
                sub_207CA420C();
              v366 = operator new(v365);
              *((_QWORD *)v332 - 3) = v366;
              *((_QWORD *)v332 - 2) = v366;
              *((_QWORD *)v332 - 1) = &v366[2 * (v365 >> 4)];
              do
              {
                *v366 = *(_QWORD *)v364;
                v367 = *((_QWORD *)v364 + 1);
                v366[1] = v367;
                if (v367)
                {
                  v368 = (unint64_t *)(v367 + 8);
                  do
                    v369 = __ldxr(v368);
                  while (__stxr(v369 + 1, v368));
                }
                v364 += 16;
                v366 += 2;
              }
              while (v364 != v363);
              *((_QWORD *)v332 - 2) = v366;
            }
LABEL_402:
            v332 -= 160;
            v333 -= 160;
            v334 -= 160;
            v200 = v497;
            if (v333 == v510)
            {
              v333 = v510;
              v370 = (char *)v511;
              v510 = v332;
              v512 = v569;
              v319 = v568;
              if ((char *)v511 != v333)
              {
                v268 = (std::__shared_weak_count *)cfa;
                while (1)
                {
                  v371 = *((_QWORD *)v370 - 3);
                  if (v371)
                  {
                    v372 = *((_QWORD *)v370 - 2);
                    v373 = (void *)*((_QWORD *)v370 - 3);
                    if (v372 != v371)
                    {
                      do
                      {
                        v374 = *(std::__shared_weak_count **)(v372 - 8);
                        if (v374)
                        {
                          v375 = (unint64_t *)&v374->__shared_owners_;
                          do
                            v376 = __ldaxr(v375);
                          while (__stlxr(v376 - 1, v375));
                          if (!v376)
                          {
                            ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                            std::__shared_weak_count::__release_weak(v374);
                          }
                        }
                        v372 -= 16;
                      }
                      while (v372 != v371);
                      v373 = (void *)*((_QWORD *)v370 - 3);
                    }
                    *((_QWORD *)v370 - 2) = v371;
                    operator delete(v373);
                  }
                  if (*(v370 - 32))
                  {
                    v377 = (std::__shared_weak_count *)*((_QWORD *)v370 - 5);
                    v200 = v497;
                    if (v377)
                    {
                      v378 = (unint64_t *)&v377->__shared_owners_;
                      do
                        v379 = __ldaxr(v378);
                      while (__stlxr(v379 - 1, v378));
                      goto LABEL_466;
                    }
                  }
                  else
                  {
                    v377 = (std::__shared_weak_count *)*((_QWORD *)v370 - 6);
                    v200 = v497;
                    if (v377)
                    {
                      v380 = (unint64_t *)&v377->__shared_owners_;
                      do
                        v379 = __ldaxr(v380);
                      while (__stlxr(v379 - 1, v380));
LABEL_466:
                      if (!v379)
                      {
                        ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                        std::__shared_weak_count::__release_weak(v377);
                      }
                    }
                  }
                  v370 -= 160;
                  if (v370 == v333)
                    goto LABEL_469;
                }
              }
              v268 = (std::__shared_weak_count *)cfa;
              v266 = v491;
              if (!v333)
                goto LABEL_471;
LABEL_470:
              operator delete(v333);
              goto LABEL_471;
            }
          }
        }
        *(_BYTE *)v290 = v205;
        *(_QWORD *)&__dst = cfa;
        *((_QWORD *)&__dst + 1) = v491;
        if (v491)
        {
          v300 = (unint64_t *)&v491->__shared_owners_;
          do
            v301 = __ldxr(v300);
          while (__stxr(v301 + 1, v300));
        }
        if (cfa)
          CFRetain(cfa);
        v302 = (std::__shared_weak_count *)operator new(0x20uLL);
        v303 = v302;
        v302->__shared_owners_ = 0;
        v304 = (unint64_t *)&v302->__shared_owners_;
        v302->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
        v305 = &v279[32 * ((uint64_t)(v511 - (_QWORD)v510) >> 5)];
        v302->__shared_weak_owners_ = 0;
        v302[1].__vftable = (std::__shared_weak_count_vtbl *)cfa;
        *((_QWORD *)v305 + 14) = cfa;
        *((_QWORD *)v305 + 15) = v302;
        do
          v306 = __ldxr(v304);
        while (__stxr(v306 + 1, v304));
        do
          v307 = __ldaxr(v304);
        while (__stlxr(v307 - 1, v304));
        if (v307)
        {
          v299 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (!*((_QWORD *)&__dst + 1))
            goto LABEL_390;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
          std::__shared_weak_count::__release_weak(v303);
          v299 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
          if (!*((_QWORD *)&__dst + 1))
            goto LABEL_390;
        }
        v322 = (unint64_t *)&v299->__shared_owners_;
        do
          v321 = __ldaxr(v322);
        while (__stlxr(v321 - 1, v322));
LABEL_388:
        if (!v321)
        {
          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
          std::__shared_weak_count::__release_weak(v299);
        }
        goto LABEL_390;
      }
      *(_OWORD *)v511 = *(_OWORD *)v575;
      *(_OWORD *)(v511 + 16) = *(_OWORD *)&v575[16];
      *(_OWORD *)(v511 + 32) = *(_OWORD *)&v575[32];
      *(_OWORD *)(v511 + 48) = v576;
      *(_WORD *)(v511 + 64) = v487 | (v486 << 8);
      *(_DWORD *)(v511 + 66) = v559;
      *(_WORD *)(v511 + 70) = v560;
      *(_QWORD *)(v511 + 72) = v488;
      *(float64x2_t *)(v511 + 80) = v265;
      *(_DWORD *)(v511 + 96) = v203;
      *(_BYTE *)(v511 + 104) = 0;
      *(_BYTE *)(v511 + 128) = v485;
      v266 = v491;
      if ((v233 & 1) != 0)
      {
        v267 = (std::__shared_weak_count_vtbl *)(v205 | (v239 << 8));
        __p = v267;
        v268 = (std::__shared_weak_count *)cfa;
        v567 = (char *)cfa;
        if (cfa)
        {
          v269 = (unint64_t *)((char *)cfa + 8);
          do
            v270 = __ldxr(v269);
          while (__stxr(v270 + 1, v269));
        }
        if (v267)
          CFRetain(v267);
        v271 = (std::__shared_weak_count *)operator new(0x20uLL);
        v272 = v271;
        v271->__shared_owners_ = 0;
        v273 = (unint64_t *)&v271->__shared_owners_;
        v271->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC80;
        v271->__shared_weak_owners_ = 0;
        v271[1].__vftable = v267;
        *(_QWORD *)(v511 + 104) = v267;
        *(_QWORD *)(v511 + 112) = v271;
        do
          v274 = __ldxr(v273);
        while (__stxr(v274 + 1, v273));
        do
          v275 = __ldaxr(v273);
        while (__stlxr(v275 - 1, v273));
        if (v275)
        {
          v276 = v567;
          if (!v567)
            goto LABEL_371;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
          std::__shared_weak_count::__release_weak(v272);
          v276 = v567;
          if (!v567)
            goto LABEL_371;
        }
        v308 = (unint64_t *)(v276 + 8);
        do
          v309 = __ldaxr(v308);
        while (__stlxr(v309 - 1, v308));
        if (!v309)
        {
          (*(void (**)(char *))(*(_QWORD *)v276 + 16))(v276);
          v310 = (std::__shared_weak_count *)v276;
          goto LABEL_496;
        }
        goto LABEL_371;
      }
      *(_BYTE *)(v511 + 104) = v205;
      if (v491)
      {
        v280 = (unint64_t *)&v491->__shared_owners_;
        do
          v281 = __ldxr(v280);
        while (__stxr(v281 + 1, v280));
      }
      v268 = (std::__shared_weak_count *)cfa;
      if (cfa)
        CFRetain(cfa);
      v282 = (std::__shared_weak_count *)operator new(0x20uLL);
      v283 = v282;
      v282->__shared_owners_ = 0;
      v284 = (unint64_t *)&v282->__shared_owners_;
      v282->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
      v282->__shared_weak_owners_ = 0;
      v282[1].__vftable = (std::__shared_weak_count_vtbl *)cfa;
      *(_QWORD *)(v511 + 112) = cfa;
      *(_QWORD *)(v511 + 120) = v282;
      do
        v285 = __ldxr(v284);
      while (__stxr(v285 + 1, v284));
      do
        v286 = __ldaxr(v284);
      while (__stlxr(v286 - 1, v284));
      if (v286)
      {
        if (!v491)
          goto LABEL_371;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
        std::__shared_weak_count::__release_weak(v283);
        if (!v491)
          goto LABEL_371;
      }
      v311 = (unint64_t *)&v491->__shared_owners_;
      do
        v312 = __ldaxr(v311);
      while (__stlxr(v312 - 1, v311));
      if (v312)
      {
LABEL_371:
        *(_QWORD *)(v511 + 136) = 0;
        *(_QWORD *)(v511 + 144) = 0;
        *(_QWORD *)(v511 + 152) = 0;
        v313 = v176 - v200;
        if (v176 != v200)
          goto LABEL_372;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
        v310 = v491;
LABEL_496:
        std::__shared_weak_count::__release_weak(v310);
        *(_QWORD *)(v511 + 136) = 0;
        *(_QWORD *)(v511 + 144) = 0;
        *(_QWORD *)(v511 + 152) = 0;
        v313 = v176 - v200;
        if (v176 != v200)
        {
LABEL_372:
          if (v313 < 0)
            sub_207CA420C();
          v314 = operator new(v313);
          *(_QWORD *)(v511 + 136) = v314;
          *(_QWORD *)(v511 + 144) = v314;
          *(_QWORD *)(v511 + 152) = &v314[2 * (v313 >> 4)];
          v315 = v200;
          do
          {
            *v314 = *(_QWORD *)v315;
            v316 = *((_QWORD *)v315 + 1);
            v314[1] = v316;
            if (v316)
            {
              v317 = (unint64_t *)(v316 + 8);
              do
                v318 = __ldxr(v317);
              while (__stxr(v318 + 1, v317));
            }
            v315 += 16;
            v314 += 2;
          }
          while (v315 != v176);
          *(_QWORD *)(v511 + 144) = v314;
        }
      }
      v319 = (char *)(v511 + 160);
LABEL_471:
      v511 = (unint64_t)v319;
      v159 = v481;
      if (v200)
      {
        while (v176 != v200)
        {
          v383 = (std::__shared_weak_count *)*((_QWORD *)v176 - 1);
          if (v383)
          {
            v384 = (unint64_t *)&v383->__shared_owners_;
            do
              v385 = __ldaxr(v384);
            while (__stlxr(v385 - 1, v384));
            if (!v385)
            {
              ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
              std::__shared_weak_count::__release_weak(v383);
            }
          }
          v176 -= 16;
        }
        operator delete(v200);
        if ((v489 & 1) == 0)
          goto LABEL_486;
LABEL_473:
        if (v268)
        {
          v381 = (unint64_t *)&v268->__shared_owners_;
          do
            v382 = __ldaxr(v381);
          while (__stlxr(v382 - 1, v381));
          v266 = v268;
          if (!v382)
          {
LABEL_175:
            ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
            std::__shared_weak_count::__release_weak(v266);
          }
        }
      }
      else
      {
        if ((v489 & 1) != 0)
          goto LABEL_473;
LABEL_486:
        if (v266)
        {
          v386 = (unint64_t *)&v266->__shared_owners_;
          do
            v387 = __ldaxr(v386);
          while (__stlxr(v387 - 1, v386));
          if (!v387)
            goto LABEL_175;
        }
      }
LABEL_176:
      v160 += 1344;
      if (v160 != v159)
        continue;
      break;
    }
LABEL_172:
    v154 = (_QWORD *)*v478;
    if (*v478)
      continue;
    break;
  }
LABEL_518:
  memset(v573, 0, 24);
  v394 = v513;
  v393 = v514;
  v395 = v514 - (_BYTE *)v513;
  if (v514 != v513)
  {
    if (v395 < 0)
      sub_207CA420C();
    v396 = (std::error_category *)operator new(v514 - (_BYTE *)v513);
    *(_QWORD *)&v573[0].__val_ = v396;
    v573[0].__cat_ = v396;
    *(_QWORD *)&v573[1].__val_ = &v396[2 * (v395 >> 4)];
    v397 = v395 - 16;
    if ((unint64_t)(v395 - 16) < 0x90)
      goto LABEL_649;
    v398 = (v397 & 0xFFFFFFFFFFFFFFF0) + 16;
    if (v396 < (std::error_category *)((char *)v394 + v398)
      && v394 < (std::error_category_vtbl **)((char *)&v396->__vftable + v398))
    {
      goto LABEL_649;
    }
    v400 = (v397 >> 4) + 1;
    v401 = 2 * (v400 & 0x1FFFFFFFFFFFFFFCLL);
    v402 = &v394[v401];
    v403 = &v396[v401];
    v404 = v396 + 4;
    v405 = (__int128 *)(v394 + 4);
    v406 = v400 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v408 = *(v405 - 2);
      v407 = *(v405 - 1);
      v410 = *v405;
      v409 = v405[1];
      v405 += 4;
      *(_OWORD *)&v404[-4].__vftable = v408;
      *(_OWORD *)&v404[-2].__vftable = v407;
      *(_OWORD *)&v404->__vftable = v410;
      *(_OWORD *)&v404[2].__vftable = v409;
      v404 += 8;
      v406 -= 4;
    }
    while (v406);
    v394 = v402;
    v396 = (std::error_category *)v403;
    if (v400 != (v400 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_649:
      do
      {
        v396->__vftable = *(std::error_category_vtbl **)v394;
        v396[1].__vftable = (std::error_category_vtbl *)v394[1];
        v396 += 2;
        v394 += 2;
      }
      while (v394 != (_QWORD *)v393);
      v403 = v396;
    }
    v573[0].__cat_ = v403;
  }
  memset(&v573[1].__cat_, 0, 24);
  sub_207CCCC78((uint64_t)&v573[1].__cat_, (uint64_t)v510, v511, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v511 - (_QWORD)v510) >> 5));
  *(std::error_condition *)v575 = v573[0];
  memset(v573, 0, sizeof(v573));
  *(std::error_condition *)&v575[24] = *(std::error_condition *)&v573[1].__cat_;
  *(_QWORD *)&v575[16] = *(_QWORD *)&v573[1].__val_;
  *(_QWORD *)&v575[40] = v573[2].__cat_;
  LOBYTE(v576) = 1;
  sub_207CEC374((__int128 *)v575, (__int128 *)v519);
  if ((_BYTE)v576)
  {
    v411 = *(void **)&v575[24];
    if (*(_QWORD *)&v575[24])
    {
      v412 = *(_QWORD *)&v575[32];
      if (*(_QWORD *)&v575[32] != *(_QWORD *)&v575[24])
      {
        do
        {
          v412 -= 160;
          sub_207CCD214(v412);
        }
        while ((void *)v412 != v411);
      }
      operator delete(v411);
    }
    if (*(_QWORD *)v575)
      operator delete(*(void **)v575);
  }
  else
  {
    v413 = *(std::__shared_weak_count **)&v575[8];
    if (*(_QWORD *)&v575[8])
    {
      v414 = (unint64_t *)(*(_QWORD *)&v575[8] + 8);
      do
        v415 = __ldaxr(v414);
      while (__stlxr(v415 - 1, v414));
      if (!v415)
      {
        ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
        std::__shared_weak_count::__release_weak(v413);
      }
    }
  }
  v416 = v573[1].__cat_;
  if (v573[1].__cat_)
  {
    v417 = *(_QWORD *)&v573[2].__val_;
    v418 = (std::error_category *)v573[1].__cat_;
    if (*(const std::error_category **)&v573[2].__val_ != v573[1].__cat_)
    {
      do
      {
        v417 -= 160;
        sub_207CCD214(v417);
      }
      while ((const std::error_category *)v417 != v416);
      v418 = (std::error_category *)v573[1].__cat_;
    }
    *(_QWORD *)&v573[2].__val_ = v416;
    operator delete(v418);
  }
  if (*(_QWORD *)&v573[0].__val_)
  {
    v573[0].__cat_ = *(const std::error_category **)&v573[0].__val_;
    operator delete(*(void **)&v573[0].__val_);
  }
  if (v510)
  {
    v419 = v511;
    v420 = v510;
    if ((char *)v511 != v510)
    {
      do
      {
        v419 -= 160;
        sub_207CCD214(v419);
      }
      while ((char *)v419 != v510);
      v420 = v510;
    }
    operator delete(v420);
  }
  if (v513)
  {
    v514 = (char *)v513;
    operator delete(v513);
  }
  sub_207CEC654((uint64_t)&v517, v518);
  v421 = v517;
  v517 = 0;
  if (v421)
    operator delete(v421);
  sub_207CD2698(v475, (uint64_t)v519);
  v422 = *((_QWORD *)v476 + 10);
  *(_QWORD *)(v475 + 56) = *((_QWORD *)v476 + 9);
  *(_QWORD *)(v475 + 64) = v422;
  if (v422)
  {
    v423 = (unint64_t *)(v422 + 8);
    do
      v424 = __ldxr(v423);
    while (__stxr(v424 + 1, v423));
  }
  *(_QWORD *)(v475 + 72) = *((_QWORD *)v476 + 65);
  v425 = v543;
  *(_OWORD *)(v475 + 112) = v542;
  *(_OWORD *)(v475 + 128) = v425;
  v426 = v544;
  v427 = v541;
  *(_OWORD *)(v475 + 80) = v540;
  *(_OWORD *)(v475 + 96) = v427;
  v428 = *((_QWORD *)v476 + 66);
  *(double *)(v475 + 144) = v426;
  *(_QWORD *)(v475 + 152) = v428;
  v429 = *((_QWORD *)v476 + 67);
  *(_QWORD *)(v475 + 160) = v429;
  if (v429)
  {
    v430 = (unint64_t *)(v429 + 8);
    do
      v431 = __ldxr(v430);
    while (__stxr(v431 + 1, v430));
  }
  *(_OWORD *)(v475 + 168) = v473;
  *(_OWORD *)(v475 + 184) = v472;
  *(_OWORD *)(v475 + 200) = v471;
  *(_OWORD *)(v475 + 216) = xmmword_208230220;
  *(_BYTE *)(v475 + 232) = v474;
  if (v522)
  {
    v432 = v520[1];
    if (v520[1])
    {
      v433 = v521;
      v434 = v520[1];
      if ((void *)v521 != v520[1])
      {
        do
        {
          v433 -= 160;
          sub_207CCD214(v433);
        }
        while ((void *)v433 != v432);
        v434 = v520[1];
      }
      *(_QWORD *)&v521 = v432;
      operator delete(v434);
    }
    if (v519[0])
    {
      v519[1] = v519[0];
      operator delete(v519[0]);
    }
  }
  else
  {
    v435 = (std::__shared_weak_count *)v519[1];
    if (v519[1])
    {
      v436 = (unint64_t *)((char *)v519[1] + 8);
      do
        v437 = __ldaxr(v436);
      while (__stlxr(v437 - 1, v436));
      if (!v437)
      {
        ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
        std::__shared_weak_count::__release_weak(v435);
      }
    }
  }
  v438 = v524;
  if (v524)
  {
    v439 = (unint64_t *)&v524->__shared_owners_;
    do
      v440 = __ldaxr(v439);
    while (__stlxr(v440 - 1, v439));
    if (!v440)
    {
      ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
      std::__shared_weak_count::__release_weak(v438);
    }
  }
  if (v525)
  {
    v526 = v525;
    operator delete(v525);
  }
  v441 = (char *)v528;
  if (v528)
  {
    v442 = v528;
    if (v529 != v528)
    {
      v443 = v529 - 24;
      v444 = (void (***)(char *))(v529 - 24);
      do
      {
        v445 = *v444;
        v444 -= 3;
        (*v445)(v443);
        _ZF = v443 == v441;
        v443 = (char *)v444;
      }
      while (!_ZF);
      v442 = v528;
    }
    v529 = v441;
    operator delete(v442);
  }
  v531[0] = &off_24C08A5D8;
  v446 = v532;
  if (v532)
  {
    v447 = (unint64_t *)&v532->__shared_owners_;
    do
      v448 = __ldaxr(v447);
    while (__stlxr(v448 - 1, v447));
    if (!v448)
    {
      ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
      std::__shared_weak_count::__release_weak(v446);
    }
  }
LABEL_603:
  if (v557)
  {
    v450 = v556;
    if (v556)
    {
      v451 = (unint64_t *)&v556->__shared_owners_;
      do
        v452 = __ldaxr(v451);
      while (__stlxr(v452 - 1, v451));
      if (!v452)
      {
        ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
        std::__shared_weak_count::__release_weak(v450);
      }
    }
    v453 = v554;
    if (v554)
    {
      v454 = (unint64_t *)&v554->__shared_owners_;
      do
        v455 = __ldaxr(v454);
      while (__stlxr(v455 - 1, v454));
      if (!v455)
      {
        ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
        std::__shared_weak_count::__release_weak(v453);
      }
    }
    v456 = v545;
    if (v545)
    {
      v457 = (unint64_t *)&v545->__shared_owners_;
      do
        v458 = __ldaxr(v457);
      while (__stlxr(v458 - 1, v457));
      if (!v458)
      {
        ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
        std::__shared_weak_count::__release_weak(v456);
      }
    }
    if (v538)
    {
      v539 = v538;
      operator delete(v538);
    }
    v449 = (void *)v537[2];
    if (v537[2])
    {
      v537[3] = v537[2];
LABEL_623:
      operator delete(v449);
    }
  }
  return kdebug_trace();
}

void sub_207CEAFF4(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_207CEBBD8()
{
  __cxa_end_catch();
  JUMPOUT(0x207CEBBF8);
}

void sub_207CEBBEC()
{
  JUMPOUT(0x207CEBBF4);
}

void sub_207CEC04C()
{
  uint64_t v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = (std::__shared_weak_count *)STACK[0x438];
  if (STACK[0x438])
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  v4 = (std::__shared_weak_count *)STACK[0x478];
  if (STACK[0x478])
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  if (*(char *)(v0 - 217) < 0)
    operator delete(*(void **)(v0 - 240));
  __cxa_end_catch();
  JUMPOUT(0x207CEB0BCLL);
}

__int128 *sub_207CEC1BC(__int128 *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9[2];
  void *__p;
  void *v11;
  char v12;

  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = 0;
  sub_207CEC374((__int128 *)v9, a1);
  if (v12)
  {
    v3 = __p;
    if (__p)
    {
      v4 = (uint64_t)v11;
      if (v11 != __p)
      {
        do
        {
          v4 -= 160;
          sub_207CCD214(v4);
        }
        while ((void *)v4 != v3);
      }
      operator delete(v3);
    }
    if (v9[0])
      operator delete(v9[0]);
    return a1;
  }
  v6 = (std::__shared_weak_count *)v9[1];
  if (!v9[1])
    return a1;
  v7 = (unint64_t *)((char *)v9[1] + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_207CEC29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CEC2B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CEC2B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = *(void **)(a1 + 24);
      if (v3 != v2)
      {
        do
        {
          v3 -= 160;
          sub_207CCD214(v3);
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v4);
    }
    v5 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v5;
      operator delete(v5);
    }
    return a1;
  }
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v7)
    return a1;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_207CEC374(__int128 *a1, __int128 *a2)
{
  int v4;
  BOOL v5;
  __int128 v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = *((unsigned __int8 *)a2 + 48);
  if (*((_BYTE *)a1 + 48))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v10 = *(void **)a1;
    v9 = *((_QWORD *)a1 + 1);
    v11 = *((_QWORD *)a1 + 2);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    v12 = (void **)a1 + 3;
    v35 = *(__int128 *)((char *)a1 + 24);
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 2) = 0;
    v13 = *((_QWORD *)a1 + 5);
    *((_QWORD *)a1 + 4) = 0;
    *((_QWORD *)a1 + 5) = 0;
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v14 = *((_QWORD *)a1 + 3);
    if (v14)
    {
      v15 = *((_QWORD *)a1 + 4);
      v16 = (void *)*((_QWORD *)a1 + 3);
      if (v15 != v14)
      {
        do
        {
          v15 -= 160;
          sub_207CCD214(v15);
        }
        while (v15 != v14);
        v16 = *v12;
      }
      *((_QWORD *)a1 + 4) = v14;
      operator delete(v16);
      *v12 = 0;
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
    }
    *(__int128 *)((char *)a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v17 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *((_QWORD *)a2 + 1) = v17;
      operator delete(v17);
      v18 = (void *)*((_QWORD *)a2 + 3);
      *(_QWORD *)a2 = v10;
      *((_QWORD *)a2 + 1) = v9;
      *((_QWORD *)a2 + 2) = v11;
      if (v18)
      {
        v19 = *((_QWORD *)a2 + 4);
        v20 = v18;
        if ((void *)v19 != v18)
        {
          do
          {
            v19 -= 160;
            sub_207CCD214(v19);
          }
          while ((void *)v19 != v18);
          v20 = (void *)*((_QWORD *)a2 + 3);
        }
        *((_QWORD *)a2 + 4) = v18;
        operator delete(v20);
      }
    }
    else
    {
      *(_QWORD *)a2 = v10;
      *((_QWORD *)a2 + 1) = v9;
      *((_QWORD *)a2 + 2) = v11;
    }
    *(__int128 *)((char *)a2 + 24) = v35;
    *((_QWORD *)a2 + 5) = v13;
    return;
  }
  if (*((_BYTE *)a1 + 48))
  {
    if (!*((_BYTE *)a2 + 48))
    {
      v6 = *a2;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *a2 = *a1;
      *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *(__int128 *)((char *)a2 + 24) = *(__int128 *)((char *)a1 + 24);
      *((_QWORD *)a2 + 5) = *((_QWORD *)a1 + 5);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      v7 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *((_QWORD *)a1 + 1) = v7;
        v34 = v6;
        operator delete(v7);
        v6 = v34;
      }
      *a1 = v6;
      v8 = *((_BYTE *)a1 + 48);
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      *((_BYTE *)a2 + 48) = v8;
      return;
    }
  }
  else if (*((_BYTE *)a2 + 48))
  {
    v21 = *((_QWORD *)a2 + 2);
    v22 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v23 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v24 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *a2 = *a1;
    v25 = *((_BYTE *)a1 + 48);
    *a1 = v22;
    *((_QWORD *)a1 + 2) = v21;
    *(__int128 *)((char *)a1 + 24) = v23;
    *((_QWORD *)a1 + 5) = v24;
    *((_BYTE *)a1 + 48) = v4;
    *((_BYTE *)a2 + 48) = v25;
    return;
  }
  v26 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v27 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *a1 = v27;
  if (!v28)
    goto LABEL_28;
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    v36 = v26;
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    *a2 = v36;
    if (!v31)
      return;
  }
  else
  {
LABEL_28:
    v31 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
    *a2 = v26;
    if (!v31)
      return;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
}

void sub_207CEC654(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;

  if (a2)
  {
    v2 = a2;
    while (1)
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      if (!v5)
        goto LABEL_5;
      v6 = v2[4];
      v3 = (void *)v2[3];
      if (v6 != v5)
        break;
LABEL_4:
      v2[4] = v5;
      operator delete(v3);
LABEL_5:
      operator delete(v2);
      v2 = v4;
      if (!v4)
        return;
    }
    while (1)
    {
      v7 = *(std::__shared_weak_count **)(v6 - 232);
      if (!v7)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v10 = *(std::__shared_weak_count **)(v6 - 248);
        if (!v10)
          goto LABEL_20;
      }
      else
      {
LABEL_14:
        v10 = *(std::__shared_weak_count **)(v6 - 248);
        if (!v10)
          goto LABEL_20;
      }
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_20:
      if (*(_BYTE *)(v6 - 264))
      {
        if (*(_BYTE *)(v6 - 272))
        {
          v13 = *(void **)(v6 - 296);
          if (v13)
          {
            *(_QWORD *)(v6 - 288) = v13;
            operator delete(v13);
          }
        }
      }
      v14 = *(void **)(v6 - 392);
      if (v14)
      {
        *(_QWORD *)(v6 - 384) = v14;
        operator delete(v14);
      }
      v15 = *(void **)(v6 - 960);
      if (v15)
      {
        *(_QWORD *)(v6 - 952) = v15;
        operator delete(v15);
      }
      v16 = *(void **)(v6 - 984);
      if (v16)
      {
        *(_QWORD *)(v6 - 976) = v16;
        operator delete(v16);
      }
      if (*(_BYTE *)(v6 - 1264) && *(char *)(v6 - 1265) < 0)
      {
        operator delete(*(void **)(v6 - 1288));
        v17 = v6 - 1344;
        v18 = *(void **)(v6 - 1344);
        if (!v18)
          goto LABEL_9;
LABEL_33:
        *(_QWORD *)(v6 - 1336) = v18;
        operator delete(v18);
        goto LABEL_9;
      }
      v17 = v6 - 1344;
      v18 = *(void **)(v6 - 1344);
      if (v18)
        goto LABEL_33;
LABEL_9:
      v6 = v17;
      if (v17 == v5)
      {
        v3 = (void *)v2[3];
        goto LABEL_4;
      }
    }
  }
}

uint64_t sub_207CEC814(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = off_24C071620;
  *(_QWORD *)(a1 + 16) = &unk_24C071698;
  *(_QWORD *)(a1 + 24) = &unk_24C0716D8;
  v2 = *(char **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    if (v2[48])
    {
      v3 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
      {
        v4 = *((_QWORD *)v2 + 1);
        v5 = *(void **)v2;
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *(void **)v2;
        }
        *((_QWORD *)v2 + 1) = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_207CECA04(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(std::__shared_weak_count **)(a1 + 552);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*(_BYTE *)(a1 + 528))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*(_BYTE *)(a1 + 528))
LABEL_6:
    sub_207CDAEE4((_QWORD *)(a1 + 104));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v8)
        return a1;
      goto LABEL_12;
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
LABEL_12:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

_QWORD *sub_207CECAC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C071810;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207CECB0C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *__p = &off_24C071810;
  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

_QWORD *sub_207CECB50(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C071810;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_207CECBC0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C071810;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_207CECC10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_207CECC4C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_207CECC84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_207CECFA8((uint64_t *)(v8 + 88), v5, (uint64_t)&v20);
      if (v21)
        sub_207CD4AF4(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_207CECE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_207CD4AF4(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CECF30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpda"
                     "teDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17"
                                "AppCodeUpdateDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CECF9C()
{
  return &unk_24C071870;
}

void sub_207CECFA8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  void *__p;
  char *v34;
  char v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  v6 = *a1;
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v31, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, &v31);
  if (*(_BYTE *)(a3 + 8))
  {
    if (!*(_QWORD *)a3)
      sub_207CD3824(3u);
    sub_207CD3880(*(_QWORD *)a3, (uint64_t)&v31);
  }
  v9 = v37;
  if (!v37)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = v36;
    if (!v36)
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v12 = v36;
    if (!v36)
      goto LABEL_17;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v35)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_17:
  if (v35)
  {
LABEL_18:
    v15 = (char *)__p;
    if (!__p)
      goto LABEL_45;
    v16 = v34;
    v17 = __p;
    if (v34 == __p)
    {
LABEL_44:
      v34 = v15;
      operator delete(v17);
LABEL_45:
      if (v31)
      {
        v32 = (std::__shared_weak_count *)v31;
        operator delete(v31);
      }
      return;
    }
    while (1)
    {
      v18 = *((_QWORD *)v16 - 3);
      if (v18)
      {
        v19 = *((_QWORD *)v16 - 2);
        v20 = (void *)*((_QWORD *)v16 - 3);
        if (v19 != v18)
        {
          do
          {
            v21 = *(std::__shared_weak_count **)(v19 - 8);
            if (v21)
            {
              v22 = (unint64_t *)&v21->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            v19 -= 16;
          }
          while (v19 != v18);
          v20 = (void *)*((_QWORD *)v16 - 3);
        }
        *((_QWORD *)v16 - 2) = v18;
        operator delete(v20);
      }
      if (*(v16 - 32))
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v16 - 5);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          goto LABEL_41;
        }
      }
      else
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v16 - 6);
        if (v24)
        {
          v27 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v27);
          while (__stlxr(v26 - 1, v27));
LABEL_41:
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v16 -= 160;
      if (v16 == v15)
      {
        v17 = __p;
        goto LABEL_44;
      }
    }
  }
LABEL_50:
  v28 = v32;
  if (v32)
  {
    v29 = (unint64_t *)&v32->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_207CED2A0(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  uint64_t *v5;
  uint64_t v6;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;
  va_list v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, va_list);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  sub_207CD2AF0((uint64_t)va3);
  if (a2 == 1)
  {
    v5 = (uint64_t *)__cxa_begin_catch(a1);
    v6 = *v5;
    v11 = *(_QWORD *)(*(_QWORD *)(*v5 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    v9 = (*(uint64_t (**)(void))(v6 + 16))();
    sub_207CD34F4("Caught unexpected exception of type: ", va1, "\n", "message: ", va, "\n");
    if (v16 >= 0)
      va_copy(v7, va2);
    else
      v7 = v13;
    if (v16 >= 0)
      v8 = HIBYTE(v16);
    else
      v8 = v15;
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v7, v8, (void (*)(void **))sub_208216974);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_207CED364(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x207CED384);
}

uint64_t sub_207CED390(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)a1 = &off_24C071890;
  v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*(_BYTE *)(a1 + 536))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*(_BYTE *)(a1 + 536))
LABEL_6:
    sub_207CDAEE4((_QWORD *)(a1 + 112));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 104);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v8)
        return a1;
      goto LABEL_12;
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
LABEL_12:
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_207CED460(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *__p = &off_24C071890;
  v2 = (std::__shared_weak_count *)__p[70];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*((_BYTE *)__p + 536))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*((_BYTE *)__p + 536))
LABEL_6:
    sub_207CDAEE4(__p + 14);
LABEL_7:
  v5 = (std::__shared_weak_count *)__p[13];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)__p[2];
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
LABEL_12:
    std::__shared_weak_count::__release_weak(v8);
LABEL_13:
  operator delete(__p);
}

char *sub_207CED530(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x238uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C071890;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  sub_207CDB17C((uint64_t)(v2 + 88), a1 + 88);
  return v3;
}

void sub_207CED5B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CED5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C071890;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v8;
  *(_OWORD *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 24) = v6;
  return sub_207CDB17C(a2 + 88, a1 + 88);
}

void sub_207CED64C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_207CED664(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*(_BYTE *)(a1 + 536))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*(_BYTE *)(a1 + 536))
LABEL_6:
    sub_207CDAEE4((_QWORD *)(a1 + 112));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v5)
    goto LABEL_11;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
  {
LABEL_11:
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      return;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
LABEL_12:
    std::__shared_weak_count::__release_weak(v8);
}

void sub_207CED728(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[70];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if (!*((_BYTE *)__p + 536))
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (*((_BYTE *)__p + 536))
LABEL_6:
    sub_207CDAEE4(__p + 14);
LABEL_7:
  v5 = (std::__shared_weak_count *)__p[13];
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)__p[2];
      if (!v8)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
LABEL_12:
    std::__shared_weak_count::__release_weak(v8);
LABEL_13:
  operator delete(__p);
}

void sub_207CED7EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_207CECFA8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)&v8);
        if (v9)
          sub_207CD4AF4(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CED894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_207CD4AF4(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CED8E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpda"
                     "teDataEvS7_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17"
                                "AppCodeUpdateDataEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CED94C()
{
  return &unk_24C0718F0;
}

uint64_t sub_207CED958(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = *(std::__shared_weak_count **)(a1 + 568);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 552);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 552);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(_BYTE *)(a1 + 528))
    sub_207CDAEE4((_QWORD *)(a1 + 104));
  v8 = *(std::__shared_weak_count **)(a1 + 96);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v11)
        return a1;
      goto LABEL_18;
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (v11)
LABEL_18:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_207CEDA54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C071910;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_207CEDADC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *__p = &off_24C071910;
  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

_QWORD *sub_207CEDB64(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C071910;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_207CEDBF4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C071910;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_207CEDC64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_207CEDCE4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_207CEDD60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v23, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v25, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_207CECFA8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_207CD4AF4((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_207CEE03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_207CEE068(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x207CEDE74);
    JUMPOUT(0x207CEDE44);
  }
  sub_207CD3824(3u);
}

void sub_207CEE0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_207CEE0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_207CD4AF4(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207CEE1DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpda"
                     "teDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17"
                                "AppCodeUpdateDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promi"
                                "seIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CEE248()
{
  return &unk_24C071970;
}

void sub_207CEE258(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CEE68C(a1);
  operator delete(v1);
}

char *sub_207CEE26C(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)operator new(0x248uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = off_24C071990;
  *((_QWORD *)v2 + 1) = v5;
  *((_QWORD *)v2 + 2) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  sub_207CDB17C((uint64_t)(v2 + 88), a1 + 88);
  *((_QWORD *)v3 + 71) = *(_QWORD *)(a1 + 568);
  v8 = *(_QWORD *)(a1 + 576);
  *((_QWORD *)v3 + 72) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_207CEE318(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CEE338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = off_24C071990;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_OWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v10;
  *(_OWORD *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 24) = v8;
  result = sub_207CDB17C(a2 + 88, a1 + 88);
  *(_QWORD *)(a2 + 568) = *(_QWORD *)(a1 + 568);
  v12 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a2 + 576) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_207CEE3D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_207CEE3F0(uint64_t a1)
{
  sub_207CEE794(a1 + 8);
}

void sub_207CEE3F8(void *a1)
{
  sub_207CEE794((uint64_t)a1 + 8);
  operator delete(a1);
}

void sub_207CEE420(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v9, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[71];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_207CECFA8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_207CD4AF4((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_207CEE530(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_207CEE5A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x207CEE5DCLL);
  JUMPOUT(0x207CEE60CLL);
}

uint64_t sub_207CEE614(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpda"
                     "teDataEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17"
                                "AppCodeUpdateDataEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CEE680()
{
  return &unk_24C0719F0;
}

uint64_t sub_207CEE68C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)a1 = off_24C071990;
  v2 = *(std::__shared_weak_count **)(a1 + 576);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 560);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 560);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(_BYTE *)(a1 + 536))
    sub_207CDAEE4((_QWORD *)(a1 + 112));
  v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v11)
        return a1;
      goto LABEL_18;
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
LABEL_18:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_207CEE794(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = *(std::__shared_weak_count **)(a1 + 568);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 552);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 552);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(_BYTE *)(a1 + 528))
    sub_207CDAEE4((_QWORD *)(a1 + 104));
  v8 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v8)
    goto LABEL_17;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_17:
    v11 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v11)
      return;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = *(std::__shared_weak_count **)(a1 + 8);
  if (v11)
LABEL_18:
    std::__shared_weak_count::__release_weak(v11);
}

_QWORD *sub_207CEE890(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C071A10;
  v2 = a1[4];
  a1[3] = &off_24C070640;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207CEE8E8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *__p = &off_24C071A10;
  v2 = __p[4];
  __p[3] = &off_24C070640;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

_QWORD *sub_207CEE940(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C071A10;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C070640;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_207CEE9B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207CEE9D8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C071A10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C070640;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_207CEEA40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_207CEEA58(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C070640;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_207CEEAA8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C070640;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_207CEEAF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C070640;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CEEBA8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CEEBE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdat"
                     "eDataEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17A"
                                "ppCodeUpdateDataEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CEEC50()
{
  return &unk_24C071A70;
}

_QWORD *sub_207CEEC5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C071A90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CEEC94(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C071A90;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CEECCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C071A90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_207CEED1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C071A90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_207CEED4C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CEED5C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CEED88(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CEEE1C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CEEE58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdat"
                     "eDataEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17A"
                                "ppCodeUpdateDataEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CEEEC4()
{
  return &unk_24C071AF0;
}

_QWORD *sub_207CEEED0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C071B10;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CEEF08(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C071B10;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CEEF40(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C071B10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_207CEEF98(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C071B10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_207CEEFD0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CEEFE0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CEF00C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_207CA420C();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_207CD6B94((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_207CD6ADC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_207CD3824(3u);
    }
  }
}

void sub_207CEF188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CEF1F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpda"
                     "teDataEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17"
                                "AppCodeUpdateDataEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CEF264()
{
  return &unk_24C071B70;
}

_QWORD *sub_207CEF270(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C071B90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CEF2A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C071B90;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CEF2E0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C071B90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_207CEF338(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C071B90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_207CEF370(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CEF380(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CEF3AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_207CD3824(3u);
        sub_207CD6ADC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CEF464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CEF4B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpda"
                     "teDataEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17"
                                "AppCodeUpdateDataEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api21AppCodeProcessorInputENS5_17AppCodeUpdateDataEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CEF51C()
{
  return &unk_24C071BF0;
}

void sub_207CEF52C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CEF540(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CEF558(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api21AppCodeProcessorInpu"
                     "tENS7_17AppCodeUpdateDataEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api21AppCodePr"
                                "ocessorInputENS7_17AppCodeUpdateDataEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api21AppCodeProcessorInputENS7_17AppCodeUpdateDataEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api21AppCodeProcessorInputENS7_17AppCodeUpdateDataEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CEF5C8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CEF5F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CEF620@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C071C60;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_207CEF678(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CEF708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CEF71C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CEF7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CEF7C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CEF884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CEF898(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CEF95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CEF970(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CEFA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CEFA2C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CF1190(a1);
  operator delete(v1);
}

void sub_207CEFA40(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)off_24C071EC8;
    LODWORD(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = operator new(8uLL);
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_207CA2A4C();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C071F18;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2081FD62C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    operator delete(v24);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C071F98;
  v49[1] = v29;
  v49[2] = v28;
  *((_DWORD *)v49 + 6) = v48;
  v54 = (__int128 *)v49;
  sub_2081FD62C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_207CEFE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CEFF18(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CEFF28(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_207CEFF34(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_207CEFF44(_QWORD *a1, _DWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  int v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_207CAC8F4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v69, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_24C072018;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)off_24C071EC8;
    LODWORD(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = operator new(8uLL);
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_207CA2A4C();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C072068;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2081FD62C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    operator delete(v29);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = off_24C072018;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C0720E8;
  *(_OWORD *)(v56 + 8) = v70;
  *((_DWORD *)v56 + 6) = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2081FD62C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_207CF0540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::promise<void> *v25;
  uint64_t v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v27.__ptr_ = &a19;
    std::promise<void>::set_exception(v25, v27);
    std::exception_ptr::~exception_ptr(&a19);
    std::runtime_error::~runtime_error(&a18);
    if (*(char *)(v26 - 81) < 0)
      operator delete(*(void **)(v26 - 104));
    JUMPOUT(0x207CF0454);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CF0648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_207CD5104((uint64_t *)va3);
  sub_207C99D78((uint64_t)va2);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207CF06D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_207CF06F4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2081FD738(*v1);
  }
  else
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    sub_2081FD738(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_207CF0768(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C072168;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2081FD62C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_207CF0878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207CF08DC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C0721E8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2081FD62C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_207CF09EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_207CF0A50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 3) = 850045863;
  *((_QWORD *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = off_24C0703D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *((_DWORD *)v4 + 34);
  if ((v6 & 2) != 0)
    sub_207CD3824(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *((_DWORD *)v4 + 34) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C072268;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2081FD62C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_207CD6D04((uint64_t)v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
  return sub_207CD6DD8((uint64_t *)&v22);
}

void sub_207CF0C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_207CD6DD8(&a9);
    _Unwind_Resume(a1);
  }
  sub_207CD6DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_207CF0D20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 3) = 850045863;
  *((_QWORD *)v4 + 2) = 0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 1018212795;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = off_24C0703D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *((_DWORD *)v4 + 34);
  if ((v6 & 2) != 0)
    sub_207CD3824(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *((_DWORD *)v4 + 34) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C0722E8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2081FD62C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_207CD6D04((uint64_t)v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(char *))(*(_QWORD *)v4 + 16))(v4);
  return sub_207CD6DD8((uint64_t *)&v22);
}

void sub_207CF0F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_207CD6DD8(&a9);
    _Unwind_Resume(a1);
  }
  sub_207CD6DD8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CF0FF0(uint64_t a1)
{
  return sub_207CF1190(a1 - 16);
}

void sub_207CF0FF8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CF1190(a1 - 16);
  operator delete(v1);
}

_QWORD *sub_207CF1010(uint64_t a1)
{
  return sub_207CF0768((_QWORD *)(a1 - 16));
}

uint64_t *sub_207CF1018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_207CF0A50((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_207CF1020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_207CF0D20((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_207CF1028(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_207CF1030(uint64_t a1)
{
  return sub_207CF1190(a1 - 24);
}

void sub_207CF1038(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207CF1190(a1 - 24);
  operator delete(v1);
}

_QWORD *sub_207CF1050(uint64_t a1)
{
  return sub_207CF08DC((_QWORD *)(a1 - 24));
}

uint64_t sub_207CF1058(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_207CF1060(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207CF10C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

long double sub_207CF1130(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  long double result;

  if (*a2 == 2)
    v2 = 2;
  else
    v2 = *a2 == 1;
  v3 = *(_QWORD *)(***(_QWORD ***)(a1 + 8) + 8);
  v4 = *(_DWORD *)(v3 + 1088);
  if (v2 != v4)
  {
    result = ldexp(1.0, v2 - v4) * *(double *)(v3 + 928);
    *(long double *)(v3 + 928) = result;
    *(_DWORD *)(v3 + 1088) = v2;
  }
  return result;
}

uint64_t sub_207CF1190(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = off_24C071CD8;
  *(_QWORD *)(a1 + 16) = &unk_24C071D50;
  *(_QWORD *)(a1 + 24) = &unk_24C071D90;
  v2 = *(char **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 56));
    if (v2[48])
    {
      v3 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
      {
        v4 = *((_QWORD *)v2 + 1);
        v5 = *(void **)v2;
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *(void **)v2;
        }
        *((_QWORD *)v2 + 1) = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_207CF136C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C071EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CF137C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C071EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

_QWORD *sub_207CF13A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C071F18;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207CF13E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *__p = &off_24C071F18;
  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

_QWORD *sub_207CF142C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C071F18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_207CF149C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C071F18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_207CF14EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_207CF1528(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_207CF1560(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_207CF1884((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x20BD0277C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_207CF1728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x20BD0277C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF180C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25EnqueueMessag"
                     "eAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25En"
                                "queueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF1878()
{
  return &unk_24C071F78;
}

void sub_207CF1884(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_207CF191C()
{
  __break(1u);
}

void sub_207CF19C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x207CF19E8);
}

_QWORD *sub_207CF19F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C071F98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CF1A2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C071F98;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CF1A64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C071F98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_207CF1ABC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C071F98;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_207CF1AF4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CF1B04(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CF1B30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_207CF1884((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x20BD0277C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CF1BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x20BD0277C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF1C24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF1C90()
{
  return &unk_24C071FF8;
}

uint64_t sub_207CF1C9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_207CF1D0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C072018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CF1D1C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C072018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF1D3C()
{
  JUMPOUT(0x20BD0277CLL);
}

_QWORD *sub_207CF1D48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C072068;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_207CF1DD0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *__p = &off_24C072068;
  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

_QWORD *sub_207CF1E58(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C072068;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_207CF1EE8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C072068;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_207CF1F58(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_207CF1FD8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_207CF2054(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v23, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v25, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_207CF1884(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x20BD0277C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_207CF2308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207CF2460(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25EnqueueMessag"
                     "eAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25En"
                                "queueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF24CC()
{
  return &unk_24C0720C8;
}

_QWORD *sub_207CF24D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C0720E8;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_207CF2554(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *__p = &off_24C0720E8;
  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

_QWORD *sub_207CF25D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C0720E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_207CF2648(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C0720E8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_207CF26A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_207CF2710(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_207CF2780(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24C08DCF0;
    __cxa_throw(v9, (struct type_info *)&unk_24C08DD08, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_207CF1884((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x20BD0277C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_207CF2894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x20BD0277C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF293C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE7ProcessERKS6_N"
                     "St3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE7Pro"
                                "cessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF29A8()
{
  return &unk_24C072148;
}

_QWORD *sub_207CF29B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C072168;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CF29EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C072168;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CF2A24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C072168;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_207CF2A74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C072168;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_207CF2AA4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CF2AB4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CF2AE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CF2B74(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF2BB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE9SubscribeENS1_1"
                     "2ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE9Subs"
                                "cribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF2C1C()
{
  return &unk_24C0721C8;
}

_QWORD *sub_207CF2C28(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C0721E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CF2C60(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C0721E8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CF2C98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C0721E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_207CF2CE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C0721E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_207CF2D18(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CF2D28(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CF2D54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CF2DE8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF2E24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15AddErrorHandle"
                     "rENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15Add"
                                "ErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF2E90()
{
  return &unk_24C072248;
}

_QWORD *sub_207CF2E9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C072268;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CF2ED4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C072268;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CF2F0C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C072268;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_207CF2F64(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C072268;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_207CF2F9C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CF2FAC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CF2FD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_207CD3824(3u);
        sub_207CD6ADC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CF3090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF30DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE16Ou"
                                "tputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF3148()
{
  return &unk_24C0722C8;
}

_QWORD *sub_207CF3154(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C0722E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CF318C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_24C0722E8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CF31C4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C0722E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_207CF321C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C0722E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_207CF3254(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_207CF3264(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_207CF3290(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_207CD3824(3u);
        sub_207CD6ADC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CF3348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF3394(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15Er"
                                "rorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_7appcode3api15PerformanceModeEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_207CF3400()
{
  return &unk_24C072348;
}

void sub_207CF3410(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207CF3424(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_207CF343C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api15PerformanceModeEvvvL"
                     "b0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api15Performan"
                                "ceModeEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api15PerformanceModeEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_7appcode3api15PerformanceModeEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_207CF34AC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_207CF34D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *sub_207CF3504@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C0723B8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_207CF355C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CF35EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CF3600(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_207CF3690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CF36A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CF3768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207CF377C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_207CF3840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CF3854(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_207CF38F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CF3910(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

uint64_t sub_207CF3924(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_207CF3A00(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    sub_207CCD214(i - 160);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_207CF3A50(float32x2_t **a1, float *a2, char a3, float a4)
{
  float32x2_t *v4;
  float32x2_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  _BOOL8 result;
  float32x2_t v28;
  uint64_t v29;
  float32x2_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  BOOL v36;
  char v37;
  double v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  double v45;
  double v46;
  char v47;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  switch(v6)
  {
    case 0:
      return 0;
    case 2:
      if ((a3 & 1) != 0)
        return 0;
      v16 = *v4;
      v17 = v4[1];
      v18 = vsub_f32(v17, *v4);
      LODWORD(v19) = HIDWORD(*(unint64_t *)v4);
      v20 = *a2;
      v21 = a2[1];
      v22 = v17.f32[1];
      v23 = (float)((float)((float)(v19 - v21) * v18.f32[0])
                  - (float)((float)(v17.f32[1] - v19) * (float)(COERCE_FLOAT(*v4) - *a2)))
          / sqrtf(vmla_lane_f32(vmul_f32(v18, v18), (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1), v18, 1).f32[0]);
      v24 = v23 == 0.0;
      if (v23 < 0.0)
        v23 = 0.0 - v23;
      if (!v24 && v23 > a4)
        return 0;
      if (v16.f32[0] == v20)
      {
        if ((float)(v19 - a4) <= v21 && v21 <= (float)(v17.f32[1] + a4))
          return 1;
        v20 = a2[1];
        if ((float)(v19 + a4) < v21)
          return 0;
      }
      else
      {
        v22 = v17.f32[0];
        if ((float)(v16.f32[0] - a4) <= v20 && v20 <= (float)(v17.f32[0] + a4))
          return 1;
        if ((float)(v16.f32[0] + a4) < v20)
          return 0;
      }
      return v20 >= (float)(v22 - a4);
    case 1:
      if ((a3 & 1) == 0)
      {
        v7 = *a2;
        v8 = v4->f32[0];
        if (*a2 == v4->f32[0])
          goto LABEL_9;
        v9 = v7 - v8;
        v10 = v8 - v7;
        if (*a2 >= v4->f32[0])
          v10 = v9;
        if (v10 <= a4)
        {
LABEL_9:
          v11 = a2[1];
          v12 = v4->f32[1];
          v13 = v11 < v12;
          if (v11 == v12)
            return 1;
          v14 = v11 - v12;
          v15 = v12 - v11;
          if (!v13)
            v15 = v14;
          if (v15 <= a4)
            return 1;
        }
      }
      return 0;
  }
  if (v5 == v4)
    return 1;
  v28 = *(float32x2_t *)a2;
  v29 = v5 - *a1;
  v30 = v4[v6 - 1];
  if ((a3 & 1) != 0)
  {
    v31 = v29 - 1;
    do
    {
      v32 = v30;
      v33 = *v4++;
      v30 = v33;
      v34 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v32, v28)), vsub_f32(v33, v32));
      LODWORD(v35) = vsub_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)).u32[0];
      v36 = v31-- != 0;
      v37 = v36;
      result = v35 < 0.0;
    }
    while (v35 < 0.0 && (v37 & 1) != 0);
  }
  else
  {
    v38 = a4;
    v39 = v29 - 1;
    do
    {
      v40 = v30;
      v41 = *v4++;
      v30 = v41;
      v42 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v40, v28));
      v43 = vsub_f32(v41, v40);
      v44 = vmul_f32(v42, v43);
      v45 = vsub_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)).f32[0];
      v46 = v38 * sqrtf(vmla_lane_f32(vmul_f32(v43, v43), (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1), v43, 1).f32[0]);
      v36 = v39-- != 0;
      v47 = v36;
      result = v46 >= v45;
    }
    while (v46 >= v45 && (v47 & 1) != 0);
  }
  return result;
}

void sub_207CF3C50(unint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float *v4;
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float *v10;
  uint64_t v11;
  float32x2_t *v12;
  float v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  float32x2_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  float32x2_t *i;
  float32x2_t v31;
  char *v32;
  float32x2_t v33;
  __int32 v34;
  float32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  float32x2_t *v38;
  float32x2_t *v39;
  float32x2_t *v40;
  float32x2_t *v41;
  float32x2_t v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float v46;
  float v47;
  float v48;
  __int32 v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x2_t *v56;
  unint64_t v57;
  float32x2_t *v58;
  float32x2_t *v59;
  float32x2_t v60;
  float32x2_t *v61;
  unint64_t v62;
  float32x2_t v63;
  float32x2_t *v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  float32x2_t *v75;
  uint64_t v76;
  int64_t v77;
  unint64_t v78;
  float32x2_t *v79;
  float32x2_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  float32x2_t *v85;
  uint64_t v86;
  __int128 v87;
  float32x2_t *v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t *v91;
  float32x2_t v92;

  if (!a1)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v4 = (float *)a2;
  v5 = a2;
  if (a1 != 1)
  {
    v6 = a2 + 1;
    v7 = 8 * a1 - 8;
    v5 = a2;
    do
    {
      v8 = v5;
      v9 = vsub_f32(*v6, *v5);
      if (v9.f32[0] <= 0.0)
      {
        v5 = v6;
        if (v9.f32[0] >= 0.0)
        {
          if (v9.f32[1] >= 0.0)
            v5 = v8;
          else
            v5 = v6;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if (a1 > 0x1555555555555555)
      sub_207CA420C();
  }
  v10 = (float *)&a2[a1];
  v92 = *v5;
  v11 = 12 * a1;
  v12 = (float32x2_t *)operator new(12 * a1);
  v13 = v92.f32[0];
  v14 = v12;
  v15 = (float32x2_t *)((char *)v12 + v11);
  v16 = v12;
  v91 = (float32x2_t *)v4;
  do
  {
    while (1)
    {
      v18 = *v4;
      v17 = v4[1];
      if (v13 != *v4)
      {
        v19 = v13 - v18;
        v20 = v18 - v13;
        if (v13 < *v4)
          v19 = v18 - v13;
        if (v19 > 0.000001)
        {
          v21 = v17 - v92.f32[1];
          goto LABEL_24;
        }
      }
      v22 = v92.f32[1] < v17;
      if (v92.f32[1] != v17)
      {
        v23 = v92.f32[1] - v17;
        v21 = v17 - v92.f32[1];
        if (v22)
          v23 = v21;
        if (v23 > 0.000001)
          break;
      }
      v24 = -3.4028e38;
      v25 = *(float32x2_t *)v4;
      if (v16 >= v15)
        goto LABEL_27;
LABEL_13:
      *v16 = v25;
      v16[1].f32[0] = v24;
      v16 = (float32x2_t *)((char *)v16 + 12);
      v4 += 2;
      if (v4 == v10)
        goto LABEL_39;
    }
    v20 = v18 - v13;
LABEL_24:
    v24 = atan2f(v21, v20);
    v13 = v92.f32[0];
    v25 = *(float32x2_t *)v4;
    if (v16 < v15)
      goto LABEL_13;
LABEL_27:
    v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v14) >> 2) + 1;
    if (v26 > 0x1555555555555555)
      sub_207CA420C();
    if (0x5555555555555556 * (((char *)v15 - (char *)v14) >> 2) > v26)
      v26 = 0x5555555555555556 * (((char *)v15 - (char *)v14) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v27 = 0x1555555555555555;
    else
      v27 = v26;
    if (v27 > 0x1555555555555555)
      sub_207CA3AB8();
    v28 = (char *)operator new(12 * v27);
    v29 = &v28[4 * (((char *)v16 - (char *)v14) >> 2)];
    *(float32x2_t *)v29 = v25;
    *((float *)v29 + 2) = v24;
    for (i = (float32x2_t *)v29; v16 != v14; i[1].i32[0] = v16[1].i32[0])
    {
      v31 = *(float32x2_t *)((char *)v16 - 12);
      v16 = (float32x2_t *)((char *)v16 - 12);
      *(float32x2_t *)((char *)i - 12) = v31;
      i = (float32x2_t *)((char *)i - 12);
    }
    v15 = (float32x2_t *)&v28[12 * v27];
    v16 = (float32x2_t *)(v29 + 12);
    if (v14)
      operator delete(v14);
    v14 = i;
    v13 = v92.f32[0];
    v4 += 2;
  }
  while (v4 != v10);
LABEL_39:
  if (v5 != v91)
  {
    v32 = (char *)v14 + 12 * (v5 - v91);
    v33 = *v14;
    v34 = v14[1].i32[0];
    *v14 = *(float32x2_t *)v32;
    v14[1].i32[0] = *((_DWORD *)v32 + 2);
    *(float32x2_t *)v32 = v33;
    *((_DWORD *)v32 + 2) = v34;
  }
  v35 = (float32x2_t *)((char *)v14 + 12);
  v36 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)&v14[1].i32[1]) >> 2));
  if (v16 == (float32x2_t *)&v14[1].i32[1])
    v37 = 0;
  else
    v37 = v36;
  sub_207CF446C((float *)&v14[1] + 1, (float *)v16, v37, 1);
  v38 = v14;
  if (v16 != v35)
  {
    v38 = v14;
    do
    {
      v39 = v35;
      v40 = (float32x2_t *)((char *)v35 + 12);
      if (&v35[1].i32[1] == (__int32 *)v16)
      {
        v35 = v16;
        v47 = v39->f32[0];
        v46 = v39->f32[1];
        v48 = v39->f32[0];
        v49 = v39[1].i32[0];
        v50 = v38->f32[0];
        v51 = v38->f32[0] < v39->f32[0];
        if (v38->f32[0] == v39->f32[0])
          goto LABEL_65;
      }
      else
      {
        v35 = (float32x2_t *)((char *)v35 + 12);
        while ((float)(v35[1].f32[0] - v39[1].f32[0]) <= 0.000004)
        {
          v35 = (float32x2_t *)((char *)v35 + 12);
          if (v35 == v16)
          {
            v35 = v16;
            break;
          }
        }
        if (v39 != v35 && v40 != v35)
        {
          v41 = v40;
          do
          {
            v42 = vsub_f32(*v39, v92);
            v43 = vmla_lane_f32(vmul_f32(v42, v42), (float32x2_t)vdup_lane_s32((int32x2_t)v42, 1), v42, 1).f32[0];
            v44 = *v41;
            v41 = (float32x2_t *)((char *)v41 + 12);
            v45 = vsub_f32(v44, v92);
            if (v43 < vmla_lane_f32(vmul_f32(v45, v45), (float32x2_t)vdup_lane_s32((int32x2_t)v45, 1), v45, 1).f32[0])
              v39 = v40;
            v40 = v41;
          }
          while (v41 != v35);
        }
        v47 = v39->f32[0];
        v46 = v39->f32[1];
        v48 = v39->f32[0];
        v49 = v39[1].i32[0];
        v50 = v38->f32[0];
        v51 = v38->f32[0] < v39->f32[0];
        if (v38->f32[0] == v39->f32[0])
        {
LABEL_65:
          v54 = v38->f32[1];
          if (v54 == v46)
            continue;
          v55 = v46 - v54;
          if (v54 >= v46)
            v55 = v54 - v46;
          if (v55 <= 0.000001)
            continue;
          goto LABEL_46;
        }
      }
      v52 = v50 - v48;
      v53 = v48 - v50;
      if (!v51)
        v53 = v52;
      if (v53 <= 0.000001)
        goto LABEL_65;
LABEL_46:
      v38[1].f32[1] = v47;
      v38[2].f32[0] = v46;
      v38 = (float32x2_t *)((char *)v38 + 12);
      v38[1].i32[0] = v49;
    }
    while (v35 != v16);
  }
  v56 = (float32x2_t *)((char *)v38 + 12);
  if (v56 == v16)
  {
    v56 = v16;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v16 == v14)
      goto LABEL_118;
  }
  else
  {
    v16 = v56;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v56 == v14)
      goto LABEL_118;
  }
  v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v14) >> 2);
  if (v57 >> 61)
    sub_207CA420C();
  v58 = (float32x2_t *)operator new(0x5555555555555558 * (((char *)v56 - (char *)v14) >> 2));
  *(_QWORD *)a3 = v58;
  *(_QWORD *)(a3 + 8) = v58;
  *(_QWORD *)(a3 + 16) = &v58[v57];
  v59 = v14;
  while (1)
  {
LABEL_75:
    v61 = *(float32x2_t **)a3;
    v62 = (unint64_t)v58 - *(_QWORD *)a3;
    if (v62 >= 9)
    {
      v63 = *v59;
      v64 = v58 - 1;
      while (1)
      {
        v65 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v63, *v64)), vsub_f32(*v64, v64[-1]));
        v66 = vsub_f32(v65, (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1)).f32[0];
        if (v66 > 0.0)
          break;
        if (v66 < 0.0
          || (v67 = vsub_f32(*v64, v64[-1]),
              v68 = vsub_f32(*v59, *v64),
              vmla_lane_f32(vmul_f32(v67, v68), (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1), v67, 1).f32[0] >= 0.0))
        {
          *(_QWORD *)(a3 + 8) = v64--;
          v62 -= 8;
          --v58;
          if (v62 > 8)
            continue;
        }
        v58 = v64 + 1;
        break;
      }
    }
    v69 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v58 >= v69)
      break;
    v60 = *v59;
    v59 = (float32x2_t *)((char *)v59 + 12);
    *v58++ = v60;
    *(_QWORD *)(a3 + 8) = v58;
    if (v59 == v16)
      goto LABEL_112;
  }
  v70 = v58 - v61;
  v71 = v70 + 1;
  if ((unint64_t)(v70 + 1) >> 61)
    sub_207CA420C();
  v72 = v69 - (_QWORD)v61;
  if (v72 >> 2 > v71)
    v71 = v72 >> 2;
  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
    v73 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v73 = v71;
  if (v73)
  {
    if (v73 >> 61)
      sub_207CA3AB8();
    v74 = operator new(8 * v73);
    v75 = (float32x2_t *)&v74[8 * v70];
    *v75 = *v59;
    v76 = (uint64_t)&v75[1];
    v77 = (char *)v58 - (char *)v61;
    if (v58 == v61)
    {
LABEL_92:
      *(_QWORD *)a3 = v75;
      *(_QWORD *)(a3 + 8) = v76;
      *(_QWORD *)(a3 + 16) = &v74[8 * v73];
      if (v61)
        goto LABEL_93;
      goto LABEL_94;
    }
  }
  else
  {
    v74 = 0;
    v75 = (float32x2_t *)(8 * v70);
    *(float32x2_t *)(8 * v70) = *v59;
    v76 = 8 * v70 + 8;
    v77 = (char *)v58 - (char *)v61;
    if (v58 == v61)
      goto LABEL_92;
  }
  v78 = v77 - 8;
  if (v78 < 0x168)
  {
    v79 = v58;
    goto LABEL_99;
  }
  v81 = ((char *)&v58[-1] - (char *)v61) & 0xFFFFFFFFFFFFFFF8;
  if (&v74[(char *)v58 - (char *)v61 - 8 - v81] > &v74[(char *)v58 - (char *)v61 - 8])
  {
    v79 = v58;
    goto LABEL_99;
  }
  if ((float32x2_t *)((char *)&v58[-1] - v81) > &v58[-1])
  {
    v79 = v58;
    goto LABEL_99;
  }
  if ((unint64_t)((char *)v61 - v74) < 0x20)
  {
    v79 = v58;
    goto LABEL_99;
  }
  v82 = (v78 >> 3) + 1;
  v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
  v79 = &v58[v83 / 0xFFFFFFFFFFFFFFF8];
  v75 = (float32x2_t *)((char *)v75 - v83);
  v84 = &v74[8 * v70 - 16];
  v85 = v58 - 2;
  v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v87 = *(_OWORD *)v85->f32;
    *(v84 - 1) = *(_OWORD *)v85[-2].f32;
    *v84 = v87;
    v84 -= 2;
    v85 -= 4;
    v86 -= 4;
  }
  while (v86);
  if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_99:
      v80 = v79[-1];
      --v79;
      v75[-1] = v80;
      --v75;
    }
    while (v79 != v61);
  }
  v61 = *(float32x2_t **)a3;
  *(_QWORD *)a3 = v75;
  *(_QWORD *)(a3 + 8) = v76;
  *(_QWORD *)(a3 + 16) = &v74[8 * v73];
  if (v61)
LABEL_93:
    operator delete(v61);
LABEL_94:
  v58 = (float32x2_t *)v76;
  *(_QWORD *)(a3 + 8) = v76;
  v59 = (float32x2_t *)((char *)v59 + 12);
  if (v59 != v16)
    goto LABEL_75;
LABEL_112:
  if ((unint64_t)v58 - *(_QWORD *)a3 > 0x18)
  {
    v89 = v58[-1];
    v88 = v58 - 1;
    v90 = vmul_f32(vsub_f32(v89, v88[-1]), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(**(float32x2_t **)a3, v89)));
    if (vsub_f32(v90, (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1)).f32[0] <= 0.0)
      *(_QWORD *)(a3 + 8) = v88;
  }
LABEL_118:
  if (v14)
    operator delete(v14);
}

void sub_207CF4420(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  if (v2)
    operator delete(v2);
  _Unwind_Resume(exception_object);
}

float *sub_207CF446C(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  float *v58;
  float *v59;
  float *v60;
  float v61;
  float *v62;
  float v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  float v67;
  float v68;
  BOOL v69;
  float *v70;
  float v71;
  float *v72;
  float v73;
  float *v74;
  float *v75;
  float v76;
  uint64_t v77;
  int v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  float *v95;
  BOOL v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int64_t v106;
  int64_t v107;
  BOOL v108;
  uint64_t v109;
  float *v110;
  float *v111;
  float v112;
  uint64_t v113;
  float *v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float *v121;
  float *v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  float *v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;
  float v131;
  float v132;
  uint64_t v133;
  float *v134;
  float v135;
  float v136;
  uint64_t v137;
  float *v138;
  float *v139;
  int v140;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v81 = v8[2];
        if (*(a2 - 1) < v81)
        {
          v82 = *(_QWORD *)v8;
          goto LABEL_104;
        }
        return result;
      case 3:
        v83 = v8[5];
        v81 = v8[2];
        v84 = *(a2 - 1);
        if (v83 < v81)
        {
          v82 = *(_QWORD *)v8;
          if (v84 >= v83)
          {
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 3);
            v8[2] = v83;
            *(_QWORD *)(v8 + 3) = v82;
            v8[5] = v81;
            if (*(a2 - 1) >= v81)
              return result;
            *(_QWORD *)(v8 + 3) = *(_QWORD *)(a2 - 3);
            v8[5] = *(a2 - 1);
          }
          else
          {
LABEL_104:
            *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
            v8[2] = *(a2 - 1);
          }
          *(_QWORD *)(a2 - 3) = v82;
          *(a2 - 1) = v81;
          return result;
        }
        if (v84 < v83)
        {
          v130 = *(_QWORD *)(v8 + 3);
          *(_QWORD *)(v8 + 3) = *(_QWORD *)(a2 - 3);
          v8[5] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v130;
          *(a2 - 1) = v83;
          v131 = v8[5];
          v132 = v8[2];
          if (v131 < v132)
          {
            v133 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)(v8 + 3);
            v8[2] = v131;
            *(_QWORD *)(v8 + 3) = v133;
            v8[5] = v132;
          }
        }
        return result;
      case 4:
        return sub_207CF53DC(v8, v8 + 3, v8 + 6, a2 - 3);
      case 5:
        result = sub_207CF53DC(v8, v8 + 3, v8 + 6, v8 + 9);
        v85 = v8[11];
        if (*(a2 - 1) < v85)
        {
          v86 = *(_QWORD *)(v8 + 9);
          *(_QWORD *)(v8 + 9) = *(_QWORD *)(a2 - 3);
          v8[11] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v86;
          *(a2 - 1) = v85;
          v87 = v8[11];
          v88 = v8[8];
          if (v87 < v88)
          {
            v89 = *((_QWORD *)v8 + 3);
            v90 = *(_QWORD *)(v8 + 9);
            *((_QWORD *)v8 + 3) = v90;
            v8[8] = v87;
            *(_QWORD *)(v8 + 9) = v89;
            v8[11] = v88;
            v91 = v8[5];
            if (v87 < v91)
            {
              v92 = *(_QWORD *)(v8 + 3);
              *(_QWORD *)(v8 + 3) = v90;
              v8[5] = v87;
              *((_QWORD *)v8 + 3) = v92;
              v8[8] = v91;
              v93 = v8[2];
              if (v87 < v93)
              {
                v94 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v90;
                v8[2] = v87;
                *(_QWORD *)(v8 + 3) = v94;
                v8[5] = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v95 = v8 + 3;
          v97 = v8 == a2 || v95 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v97)
            {
              v98 = 0;
              v99 = v8;
              do
              {
                v101 = v99[5];
                v102 = v99[2];
                v99 = v95;
                if (v101 < v102)
                {
                  v103 = *(_QWORD *)v95;
                  v104 = v98;
                  do
                  {
                    v105 = (char *)v8 + v104;
                    *(_QWORD *)(v105 + 12) = *(_QWORD *)((char *)v8 + v104);
                    *((float *)v105 + 5) = *(float *)((char *)v8 + v104 + 8);
                    if (!v104)
                    {
                      v100 = (uint64_t)v8;
                      goto LABEL_122;
                    }
                    v104 -= 12;
                  }
                  while (v101 < *((float *)v105 - 1));
                  v100 = (uint64_t)v8 + v104 + 12;
LABEL_122:
                  *(_QWORD *)v100 = v103;
                  *(float *)(v100 + 8) = v101;
                }
                v95 = v99 + 3;
                v98 += 12;
              }
              while (v99 + 3 != a2);
            }
          }
          else if (!v97)
          {
            v134 = v8 + 5;
            do
            {
              v135 = v7[5];
              v136 = v7[2];
              v7 = v95;
              if (v135 < v136)
              {
                v137 = *(_QWORD *)v95;
                v138 = v134;
                do
                {
                  v139 = v138;
                  *((_QWORD *)v138 - 1) = *(_QWORD *)(v138 - 5);
                  v140 = *((_DWORD *)v138 - 3);
                  v138 -= 3;
                  *(_DWORD *)v139 = v140;
                }
                while (v135 < *(v139 - 6));
                *((_QWORD *)v138 - 1) = v137;
                *v138 = v135;
              }
              v95 = v7 + 3;
              v134 += 3;
            }
            while (v7 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v106 = (unint64_t)(v10 - 2) >> 1;
          v107 = v106;
          do
          {
            if (v106 >= v107)
            {
              v109 = (2 * v107) | 1;
              v110 = &v8[3 * v109];
              if (2 * v107 + 2 < v10 && v110[2] < v110[5])
              {
                v110 += 3;
                v109 = 2 * v107 + 2;
              }
              v111 = &v8[3 * v107];
              v112 = v111[2];
              if (v110[2] >= v112)
              {
                v113 = *(_QWORD *)v111;
                do
                {
                  v114 = v111;
                  v111 = v110;
                  *(_QWORD *)v114 = *(_QWORD *)v110;
                  v114[2] = v110[2];
                  if (v106 < v109)
                    break;
                  v115 = 2 * v109;
                  v109 = (2 * v109) | 1;
                  v110 = &v8[3 * v109];
                  v116 = v115 + 2;
                  if (v116 < v10 && v110[2] < v110[5])
                  {
                    v110 += 3;
                    v109 = v116;
                  }
                }
                while (v110[2] >= v112);
                *(_QWORD *)v111 = v113;
                v111[2] = v112;
              }
            }
            v108 = v107-- <= 0;
          }
          while (!v108);
          v117 = v9 / 0xCuLL;
          while (2)
          {
            v118 = 0;
            v119 = *(_QWORD *)v8;
            v120 = v8[2];
            v121 = v8;
            do
            {
              v122 = v121;
              v121 += 3 * v118 + 3;
              v123 = 2 * v118;
              v118 = (2 * v118) | 1;
              v124 = v123 + 2;
              if (v124 < v117 && v121[2] < v121[5])
              {
                v121 += 3;
                v118 = v124;
              }
              *(_QWORD *)v122 = *(_QWORD *)v121;
              v122[2] = v121[2];
            }
            while (v118 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
            if (v121 != a2 - 3)
            {
              *(_QWORD *)v121 = *(_QWORD *)(a2 - 3);
              v121[2] = *(a2 - 1);
              *(_QWORD *)(a2 - 3) = v119;
              *(a2 - 1) = v120;
              v125 = (char *)v121 - (char *)v8 + 12;
              if (v125 >= 13)
              {
                v126 = (v125 / 0xCuLL - 2) >> 1;
                v127 = &v8[3 * v126];
                v120 = v121[2];
                if (v127[2] < v120)
                {
                  v128 = *(_QWORD *)v121;
                  do
                  {
                    v129 = v121;
                    v121 = v127;
                    *(_QWORD *)v129 = *(_QWORD *)v127;
                    v129[2] = v127[2];
                    if (!v126)
                      break;
                    v126 = (v126 - 1) >> 1;
                    v127 = &v8[3 * v126];
                  }
                  while (v127[2] < v120);
                  *(_QWORD *)v121 = v128;
LABEL_146:
                  v121[2] = v120;
                }
              }
              a2 -= 3;
              v108 = v117-- <= 2;
              if (v108)
                return result;
              continue;
            }
            break;
          }
          *(_QWORD *)v121 = v119;
          goto LABEL_146;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[3 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 < 0x601)
        {
          v17 = v8[2];
          v18 = v12[2];
          if (v17 >= v18)
          {
            if (v13 < v17)
            {
              v24 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
              v8[2] = *(a2 - 1);
              *(_QWORD *)(a2 - 3) = v24;
              *(a2 - 1) = v17;
              v25 = v8[2];
              v26 = v12[2];
              if (v25 < v26)
              {
                v27 = *(_QWORD *)v12;
                *(_QWORD *)v12 = *(_QWORD *)v8;
                v12[2] = v25;
                *(_QWORD *)v8 = v27;
                v8[2] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_QWORD *)v12;
            if (v13 >= v17)
            {
              *(_QWORD *)v12 = *(_QWORD *)v8;
              v12[2] = v17;
              *(_QWORD *)v8 = v19;
              v8[2] = v18;
              if (*(a2 - 1) >= v18)
                goto LABEL_32;
              *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
              v8[2] = *(a2 - 1);
            }
            else
            {
              *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
              v12[2] = *(a2 - 1);
            }
            *(_QWORD *)(a2 - 3) = v19;
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v38 = v8[2];
          v37 = *(_QWORD *)v8;
          if (*(v8 - 1) < v38)
            goto LABEL_58;
          if (v38 >= *(a2 - 1))
          {
            v72 = v8 + 3;
            do
            {
              v8 = v72;
              if (v72 >= a2)
                break;
              v73 = v72[2];
              v72 += 3;
            }
            while (v38 >= v73);
          }
          else
          {
            v70 = v8;
            do
            {
              v8 = v70 + 3;
              v71 = v70[5];
              v70 += 3;
            }
            while (v38 >= v71);
          }
          v74 = a2;
          if (v8 < a2)
          {
            v75 = a2;
            do
            {
              v74 = v75 - 3;
              v76 = *(v75 - 1);
              v75 -= 3;
            }
            while (v38 < v76);
          }
          while (v8 < v74)
          {
            v77 = *(_QWORD *)v8;
            v78 = *((_DWORD *)v8 + 2);
            *(_QWORD *)v8 = *(_QWORD *)v74;
            v8[2] = v74[2];
            *(_QWORD *)v74 = v77;
            *((_DWORD *)v74 + 2) = v78;
            do
            {
              v79 = v8[5];
              v8 += 3;
            }
            while (v38 >= v79);
            do
            {
              v80 = *(v74 - 1);
              v74 -= 3;
            }
            while (v38 < v80);
          }
          if (v8 - 3 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 3);
            v7[2] = *(v8 - 1);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 3) = v37;
          *(v8 - 1) = v38;
          continue;
        }
        v14 = v12[2];
        v15 = v8[2];
        if (v14 >= v15)
        {
          if (v13 < v14)
          {
            v20 = *(_QWORD *)v12;
            *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
            v12[2] = *(a2 - 1);
            *(_QWORD *)(a2 - 3) = v20;
            *(a2 - 1) = v14;
            v21 = v12[2];
            v22 = v8[2];
            if (v21 < v22)
            {
              v23 = *(_QWORD *)v8;
              *(_QWORD *)v8 = *(_QWORD *)v12;
              v8[2] = v21;
              *(_QWORD *)v12 = v23;
              v12[2] = v22;
            }
          }
        }
        else
        {
          v16 = *(_QWORD *)v8;
          if (v13 < v14)
          {
            *(_QWORD *)v8 = *(_QWORD *)(a2 - 3);
            v8[2] = *(a2 - 1);
            goto LABEL_22;
          }
          *(_QWORD *)v8 = *(_QWORD *)v12;
          v8[2] = v14;
          *(_QWORD *)v12 = v16;
          v12[2] = v15;
          if (*(a2 - 1) < v15)
          {
            *(_QWORD *)v12 = *(_QWORD *)(a2 - 3);
            v12[2] = *(a2 - 1);
LABEL_22:
            *(_QWORD *)(a2 - 3) = v16;
            *(a2 - 1) = v15;
          }
        }
        v28 = &v8[3 * v11];
        v29 = v28 - 3;
        v30 = *(v28 - 1);
        v31 = v8[5];
        v32 = *(a2 - 4);
        if (v30 >= v31)
        {
          if (v32 < v30)
          {
            v34 = *(_QWORD *)v29;
            *(_QWORD *)v29 = *((_QWORD *)a2 - 3);
            v29[2] = *(a2 - 4);
            *((_QWORD *)a2 - 3) = v34;
            *(a2 - 4) = v30;
            v35 = v8[5];
            if (v29[2] < v35)
            {
              v36 = *(_QWORD *)(v8 + 3);
              *(_QWORD *)(v8 + 3) = *(_QWORD *)v29;
              v8[5] = v29[2];
              *(_QWORD *)v29 = v36;
              v29[2] = v35;
            }
          }
        }
        else
        {
          v33 = *(_QWORD *)(v8 + 3);
          if (v32 < v30)
          {
            *(_QWORD *)(v8 + 3) = *((_QWORD *)a2 - 3);
            v8[5] = *(a2 - 4);
            goto LABEL_36;
          }
          *(_QWORD *)(v8 + 3) = *(_QWORD *)v29;
          v8[5] = v29[2];
          *(_QWORD *)v29 = v33;
          v29[2] = v31;
          if (*(a2 - 4) < v31)
          {
            *(_QWORD *)v29 = *((_QWORD *)a2 - 3);
            v29[2] = *(a2 - 4);
LABEL_36:
            *((_QWORD *)a2 - 3) = v33;
            *(a2 - 4) = v31;
          }
        }
        v39 = &v8[3 * v11];
        v40 = v39 + 3;
        v41 = v39[5];
        v42 = v8[8];
        v43 = *(a2 - 7);
        if (v41 >= v42)
        {
          if (v43 < v41)
          {
            v45 = *(_QWORD *)v40;
            *(_QWORD *)v40 = *(_QWORD *)(a2 - 9);
            v40[2] = *(a2 - 7);
            *(_QWORD *)(a2 - 9) = v45;
            *(a2 - 7) = v41;
            v46 = v8[8];
            if (v40[2] < v46)
            {
              v47 = *((_QWORD *)v8 + 3);
              *((_QWORD *)v8 + 3) = *(_QWORD *)v40;
              v8[8] = v40[2];
              *(_QWORD *)v40 = v47;
              v40[2] = v46;
            }
          }
        }
        else
        {
          v44 = *((_QWORD *)v8 + 3);
          if (v43 < v41)
          {
            *((_QWORD *)v8 + 3) = *(_QWORD *)(a2 - 9);
            v8[8] = *(a2 - 7);
            goto LABEL_45;
          }
          *((_QWORD *)v8 + 3) = *(_QWORD *)v40;
          v8[8] = v40[2];
          *(_QWORD *)v40 = v44;
          v40[2] = v42;
          if (*(a2 - 7) < v42)
          {
            *(_QWORD *)v40 = *(_QWORD *)(a2 - 9);
            v40[2] = *(a2 - 7);
LABEL_45:
            *(_QWORD *)(a2 - 9) = v44;
            *(a2 - 7) = v42;
          }
        }
        v48 = v12[2];
        v49 = v29[2];
        v50 = v40[2];
        if (v48 >= v49)
        {
          v51 = *(_QWORD *)v12;
          if (v50 >= v48)
          {
            v49 = v12[2];
          }
          else
          {
            v52 = *(_QWORD *)v40;
            *(_QWORD *)v12 = *(_QWORD *)v40;
            v12[2] = v50;
            *(_QWORD *)v40 = v51;
            v40[2] = v48;
            if (v50 >= v49)
            {
              v49 = v50;
              v51 = v52;
            }
            else
            {
              v51 = *(_QWORD *)v29;
              *(_QWORD *)v29 = v52;
              v29[2] = v50;
              *(_QWORD *)v12 = v51;
              v12[2] = v49;
            }
          }
        }
        else
        {
          v51 = *(_QWORD *)v29;
          if (v50 >= v48)
          {
            *(_QWORD *)v29 = *(_QWORD *)v12;
            v29[2] = v48;
            *(_QWORD *)v12 = v51;
            v12[2] = v49;
            if (v50 < v49)
            {
              v53 = *(_QWORD *)v40;
              *(_QWORD *)v12 = *(_QWORD *)v40;
              v12[2] = v50;
              *(_QWORD *)v40 = v51;
              v40[2] = v49;
              v49 = v50;
              v51 = v53;
            }
          }
          else
          {
            *(_QWORD *)v29 = *(_QWORD *)v40;
            v29[2] = v50;
            *(_QWORD *)v40 = v51;
            v40[2] = v49;
            v51 = *(_QWORD *)v12;
            v49 = v48;
          }
        }
        v54 = *(_QWORD *)v8;
        v55 = v8[2];
        *(_QWORD *)v8 = v51;
        v8[2] = v49;
        *(_QWORD *)v12 = v54;
        v8[3 * v11 + 2] = v55;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v37 = *(_QWORD *)v8;
        v38 = v8[2];
LABEL_58:
        v56 = 0;
        do
        {
          v57 = v8[v56 + 5];
          v56 += 3;
        }
        while (v57 < v38);
        v58 = &v8[v56];
        v59 = a2;
        if (v56 == 3)
        {
          v62 = a2;
          while (v58 < v62)
          {
            v60 = v62 - 3;
            v63 = *(v62 - 1);
            v62 -= 3;
            if (v63 < v38)
              goto LABEL_66;
          }
          v60 = v62;
          v8 = v58;
        }
        else
        {
          do
          {
            v60 = v59 - 3;
            v61 = *(v59 - 1);
            v59 -= 3;
          }
          while (v61 >= v38);
LABEL_66:
          v8 = v58;
          if (v58 < v60)
          {
            v64 = (unint64_t)v60;
            do
            {
              v65 = *(_QWORD *)v8;
              v66 = *((_DWORD *)v8 + 2);
              *(_QWORD *)v8 = *(_QWORD *)v64;
              v8[2] = *(float *)(v64 + 8);
              *(_QWORD *)v64 = v65;
              *(_DWORD *)(v64 + 8) = v66;
              do
              {
                v67 = v8[5];
                v8 += 3;
              }
              while (v67 < v38);
              do
              {
                v68 = *(float *)(v64 - 4);
                v64 -= 12;
              }
              while (v68 >= v38);
            }
            while ((unint64_t)v8 < v64);
          }
        }
        if (v8 - 3 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 3);
          v7[2] = *(v8 - 1);
        }
        *(_QWORD *)(v8 - 3) = v37;
        *(v8 - 1) = v38;
        if (v58 < v60)
        {
LABEL_77:
          result = (float *)sub_207CF446C(v7, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = sub_207CF5040(v7, v8 - 3);
        result = (float *)sub_207CF5040(v8, a2);
        if (!(_DWORD)result)
        {
          if (v69)
            continue;
          goto LABEL_77;
        }
        a2 = v8 - 3;
        if (!v69)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_207CF5040(float *a1, float *a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  int v34;
  float *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a1[2];
      if (*(a2 - 1) < v6)
      {
        v7 = *(_QWORD *)a1;
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      v8 = a1[5];
      v6 = a1[2];
      v9 = *(a2 - 1);
      if (v8 >= v6)
      {
        if (v9 < v8)
        {
          v25 = *(_QWORD *)(a1 + 3);
          *(_QWORD *)(a1 + 3) = *(_QWORD *)(a2 - 3);
          a1[5] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v25;
          *(a2 - 1) = v8;
          v26 = a1[5];
          v27 = a1[2];
          if (v26 < v27)
          {
            v28 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
            a1[2] = v26;
            *(_QWORD *)(a1 + 3) = v28;
            a1[5] = v27;
          }
        }
      }
      else
      {
        v7 = *(_QWORD *)a1;
        if (v9 >= v8)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
          a1[2] = v8;
          *(_QWORD *)(a1 + 3) = v7;
          a1[5] = v6;
          if (*(a2 - 1) < v6)
          {
            *(_QWORD *)(a1 + 3) = *(_QWORD *)(a2 - 3);
            a1[5] = *(a2 - 1);
            *(_QWORD *)(a2 - 3) = v7;
            *(a2 - 1) = v6;
          }
        }
        else
        {
LABEL_7:
          *(_QWORD *)a1 = *(_QWORD *)(a2 - 3);
          a1[2] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v7;
          *(a2 - 1) = v6;
        }
      }
      return result;
    case 4uLL:
      sub_207CF53DC(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_207CF53DC(a1, a1 + 3, a1 + 6, a1 + 9);
      v15 = a1[11];
      if (*(a2 - 1) >= v15)
        return 1;
      v16 = *(_QWORD *)(a1 + 9);
      *(_QWORD *)(a1 + 9) = *(_QWORD *)(a2 - 3);
      a1[11] = *(a2 - 1);
      *(_QWORD *)(a2 - 3) = v16;
      *(a2 - 1) = v15;
      v17 = a1[11];
      v18 = a1[8];
      if (v17 >= v18)
        return 1;
      v19 = *((_QWORD *)a1 + 3);
      v20 = *(_QWORD *)(a1 + 9);
      *((_QWORD *)a1 + 3) = v20;
      a1[8] = v17;
      *(_QWORD *)(a1 + 9) = v19;
      a1[11] = v18;
      v21 = a1[5];
      if (v17 >= v21)
        return 1;
      v22 = *(_QWORD *)(a1 + 3);
      *(_QWORD *)(a1 + 3) = v20;
      a1[5] = v17;
      *((_QWORD *)a1 + 3) = v22;
      a1[8] = v21;
      v23 = a1[2];
      if (v17 >= v23)
        return 1;
      v24 = *(_QWORD *)a1;
      *(_QWORD *)a1 = v20;
      a1[2] = v17;
      *(_QWORD *)(a1 + 3) = v24;
      a1[5] = v23;
      return 1;
    default:
      v10 = a1[8];
      v11 = a1 + 5;
      v12 = a1[5];
      v13 = a1[2];
      if (v12 < v13)
      {
        v14 = *(_QWORD *)a1;
        if (v10 >= v12)
        {
          *(_QWORD *)a1 = *(_QWORD *)(a1 + 3);
          a1[2] = v12;
          *(_QWORD *)(a1 + 3) = v14;
          a1[5] = v13;
          if (v10 >= v13)
            goto LABEL_30;
          *(_QWORD *)(a1 + 3) = *((_QWORD *)a1 + 3);
          a1[5] = v10;
        }
        else
        {
          *(_QWORD *)a1 = *((_QWORD *)a1 + 3);
          a1[2] = v10;
        }
        *((_QWORD *)a1 + 3) = v14;
        v11 = a1 + 8;
        goto LABEL_29;
      }
      if (v10 < v12)
      {
        v29 = *(_QWORD *)(a1 + 3);
        v30 = *((_QWORD *)a1 + 3);
        *(_QWORD *)(a1 + 3) = v30;
        a1[5] = v10;
        *((_QWORD *)a1 + 3) = v29;
        a1[8] = v12;
        if (v10 < v13)
        {
          v31 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v30;
          a1[2] = v10;
          *(_QWORD *)(a1 + 3) = v31;
LABEL_29:
          *v11 = v13;
        }
      }
LABEL_30:
      v32 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v33 = 0;
      v34 = 0;
      v35 = a1 + 6;
      while (1)
      {
        v36 = v32[2];
        if (v36 < v35[2])
          break;
LABEL_39:
        v35 = v32;
        v33 += 12;
        v32 += 3;
        if (v32 == a2)
          return 1;
      }
      v37 = *(_QWORD *)v32;
      v38 = v33;
      do
      {
        v39 = (char *)a1 + v38;
        *(_QWORD *)(v39 + 36) = *(_QWORD *)((char *)a1 + v38 + 24);
        *((float *)v39 + 11) = *(float *)((char *)a1 + v38 + 32);
        if (v38 == -24)
        {
          *(_QWORD *)a1 = v37;
          a1[2] = v36;
          if (++v34 != 8)
            goto LABEL_39;
          return v32 + 3 == a2;
        }
        v38 -= 12;
      }
      while (v36 < *((float *)v39 + 5));
      v40 = (char *)a1 + v38;
      *(_QWORD *)(v40 + 36) = v37;
      *((float *)v40 + 11) = v36;
      if (++v34 != 8)
        goto LABEL_39;
      return v32 + 3 == a2;
  }
}

float *sub_207CF53DC(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  v4 = a2[2];
  v5 = result[2];
  v6 = a3[2];
  if (v4 >= v5)
  {
    if (v6 < v4)
    {
      v8 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      *(_QWORD *)a3 = v8;
      a3[2] = v4;
      v9 = result[2];
      v6 = v4;
      if (a2[2] < v9)
      {
        v10 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = a2[2];
        *(_QWORD *)a2 = v10;
        a2[2] = v9;
        v6 = a3[2];
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)result;
    if (v6 < v4)
    {
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = a3[2];
LABEL_9:
      *(_QWORD *)a3 = v7;
      a3[2] = v5;
      v6 = v5;
      goto LABEL_10;
    }
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = a2[2];
    *(_QWORD *)a2 = v7;
    a2[2] = v5;
    v6 = a3[2];
    if (v6 < v5)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4[2] < v6)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = a4[2];
    *(_QWORD *)a4 = v11;
    a4[2] = v6;
    v12 = a2[2];
    if (a3[2] < v12)
    {
      v13 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = a3[2];
      *(_QWORD *)a3 = v13;
      a3[2] = v12;
      v14 = result[2];
      if (a2[2] < v14)
      {
        v15 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = a2[2];
        *(_QWORD *)a2 = v15;
        a2[2] = v14;
      }
    }
  }
  return result;
}

void sub_207CF5530(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254530878);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254530878))
  {
    sub_207CF5640(&sub_207CF5530, (uint64_t)&xmmword_254530858);
    __cxa_atexit((void (*)(void *))sub_207CF65DC, &xmmword_254530858, &dword_207C77000);
    __cxa_guard_release(&qword_254530878);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_254530870)
  {
    if (byte_25453086F < 0)
    {
      sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530858, *((unint64_t *)&xmmword_254530858 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_254530858;
      *(_QWORD *)(a1 + 16) = unk_254530868;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_207CF5604(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254530878);
  _Unwind_Resume(a1);
}

void sub_207CF561C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CF5640(const void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  std::__fs::filesystem::path::__string_view v5;
  char *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__fs::filesystem::path::__string_view v9;
  char *v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::__fs::filesystem::path::__string_view v13;
  int v14;
  std::__fs::filesystem::path::__string_view v15;
  char *v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  std::__fs::filesystem::path::__string_view v19;
  char *v20;
  std::basic_string_view<_CharT, _Traits>::size_type v21;
  std::basic_string_view<_CharT, _Traits>::size_type v22;
  std::__fs::filesystem::path::__string_view v23;
  int v24;
  int v25;
  std::__fs::filesystem::path::__string_view v26;
  char *v27;
  std::basic_string_view<_CharT, _Traits>::size_type v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  std::__fs::filesystem::path::__string_view v30;
  char *v31;
  std::basic_string_view<_CharT, _Traits>::size_type v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  std::__fs::filesystem::path::__string_view v34;
  int v35;
  __int16 v36;
  size_t data_low;
  char *v38;
  char *v39;
  int v41;
  std::__fs::filesystem::path::__string_view v42;
  char *v43;
  std::basic_string_view<_CharT, _Traits>::size_type v44;
  std::basic_string_view<_CharT, _Traits>::size_type v45;
  char *dli_fname;
  int dli_sname_high;
  std::__fs::filesystem::path::__string_view v48;
  char data;
  _BYTE *v50;
  std::basic_string_view<_CharT, _Traits>::size_type v51;
  std::basic_string_view<_CharT, _Traits>::size_type v52;
  std::__fs::filesystem::path::__string_view v53;
  std::__fs::filesystem::path::__string_view v54;
  _BYTE *v55;
  _BOOL4 v56;
  int dli_saddr_low;
  int v58;
  char *v59;
  std::basic_string_view<_CharT, _Traits>::size_type v60;
  std::basic_string_view<_CharT, _Traits>::size_type v61;
  std::__fs::filesystem::path::__string_view v62;
  int v63;
  int v64;
  char *v65;
  std::__fs::filesystem::path::__string_view v67;
  char *v68;
  std::basic_string_view<_CharT, _Traits>::size_type v69;
  std::basic_string_view<_CharT, _Traits>::size_type v70;
  void *dli_fbase;
  uint64_t v72;
  __int16 v73;
  std::__fs::filesystem::path __p;
  unsigned __int8 v75;
  std::__fs::filesystem::path v76;
  unsigned __int8 v77;
  std::__fs::filesystem::path v78;
  char v79;
  std::__fs::filesystem::path v80;
  std::__fs::filesystem::path v81;
  std::__fs::filesystem::path v82;
  _DWORD v83[2];
  std::__fs::filesystem::path v84;
  _BYTE v85[15];
  char v86;
  Dl_info __dst;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (!dladdr(a1, &__dst))
    goto LABEL_10;
  memset(&__p, 0, sizeof(__p));
  v3 = (char *)(__dst.dli_fname - 1);
  while (*++v3)
    ;
  sub_207CF6BB4((unint64_t)&__p, (char *)__dst.dli_fname, v3);
  std::__fs::filesystem::__weakly_canonical(&v76, &__p, 0);
  v78 = v76;
  memset(&v76, 0, sizeof(v76));
  v79 = 1;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (!v79)
    {
LABEL_10:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return;
    }
  }
  v5 = std::__fs::filesystem::path::__parent_path(&v78);
  if (v5.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v5.__size_ >= 0x17)
  {
    v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5.__size_ | 7) != 0x17)
      v7 = v5.__size_ | 7;
    v8 = v7 + 1;
    p_dst = (char *)operator new(v7 + 1);
    __dst.dli_fbase = (void *)v5.__size_;
    __dst.dli_sname = (const char *)(v8 | 0x8000000000000000);
    __dst.dli_fname = p_dst;
    goto LABEL_14;
  }
  HIBYTE(__dst.dli_sname) = v5.__size_;
  p_dst = (char *)&__dst;
  if (v5.__size_)
LABEL_14:
    memmove(p_dst, v5.__data_, v5.__size_);
  p_dst[v5.__size_] = 0;
  *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v9 = std::__fs::filesystem::path::__extension(&__p);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v9.__size_ >= 0x17)
  {
    v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17)
      v11 = v9.__size_ | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    __dst.dli_fbase = (void *)v9.__size_;
    __dst.dli_sname = (const char *)(v12 | 0x8000000000000000);
    __dst.dli_fname = v10;
    goto LABEL_22;
  }
  HIBYTE(__dst.dli_sname) = v9.__size_;
  v10 = (char *)&__dst;
  if (v9.__size_)
LABEL_22:
    memmove(v10, v9.__data_, v9.__size_);
  v10[v9.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_207CF6BB4((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v13.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__size_ = HIBYTE(__dst.dli_sname);
  else
    v13.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v14 = std::__fs::filesystem::path::__compare(&v84, v13);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (v14)
        goto LABEL_32;
LABEL_38:
      v76 = __p;
      v77 = 1;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_38;
LABEL_32:
  v15 = std::__fs::filesystem::path::__parent_path(&__p);
  if (v15.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v15.__size_ >= 0x17)
  {
    v17 = (v15.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15.__size_ | 7) != 0x17)
      v17 = v15.__size_ | 7;
    v18 = v17 + 1;
    v16 = (char *)operator new(v17 + 1);
    __dst.dli_fbase = (void *)v15.__size_;
    __dst.dli_sname = (const char *)(v18 | 0x8000000000000000);
    __dst.dli_fname = v16;
    goto LABEL_42;
  }
  HIBYTE(__dst.dli_sname) = v15.__size_;
  v16 = (char *)&__dst;
  if (v15.__size_)
LABEL_42:
    memmove(v16, v15.__data_, v15.__size_);
  v16[v15.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v19 = std::__fs::filesystem::path::__filename(&v84);
  if (v19.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v19.__size_ >= 0x17)
  {
    v21 = (v19.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19.__size_ | 7) != 0x17)
      v21 = v19.__size_ | 7;
    v22 = v21 + 1;
    v20 = (char *)operator new(v21 + 1);
    __dst.dli_fbase = (void *)v19.__size_;
    __dst.dli_sname = (const char *)(v22 | 0x8000000000000000);
    __dst.dli_fname = v20;
    goto LABEL_50;
  }
  HIBYTE(__dst.dli_sname) = v19.__size_;
  v20 = (char *)&__dst;
  if (v19.__size_)
LABEL_50:
    memmove(v20, v19.__data_, v19.__size_);
  v20[v19.__size_] = 0;
  *(_OWORD *)&v82.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v82.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_207CF6BB4((unint64_t)&__dst, "Versions", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v23.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__size_ = HIBYTE(__dst.dli_sname);
  else
    v23.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v24 = std::__fs::filesystem::path::__compare(&v82, v23);
  v25 = v24;
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if (v25)
      goto LABEL_88;
  }
  else if (v24)
  {
    goto LABEL_88;
  }
  v26 = std::__fs::filesystem::path::__parent_path(&v84);
  if (v26.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v26.__size_ >= 0x17)
  {
    v28 = (v26.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26.__size_ | 7) != 0x17)
      v28 = v26.__size_ | 7;
    v29 = v28 + 1;
    v27 = (char *)operator new(v28 + 1);
    __dst.dli_fbase = (void *)v26.__size_;
    __dst.dli_sname = (const char *)(v29 | 0x8000000000000000);
    __dst.dli_fname = v27;
    goto LABEL_68;
  }
  HIBYTE(__dst.dli_sname) = v26.__size_;
  v27 = (char *)&__dst;
  if (v26.__size_)
LABEL_68:
    memmove(v27, v26.__data_, v26.__size_);
  v27[v26.__size_] = 0;
  *(_OWORD *)&v81.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v81.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v30 = std::__fs::filesystem::path::__extension(&v81);
  if (v30.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v30.__size_ >= 0x17)
  {
    v32 = (v30.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30.__size_ | 7) != 0x17)
      v32 = v30.__size_ | 7;
    v33 = v32 + 1;
    v31 = (char *)operator new(v32 + 1);
    __dst.dli_fbase = (void *)v30.__size_;
    __dst.dli_sname = (const char *)(v33 | 0x8000000000000000);
    __dst.dli_fname = v31;
    goto LABEL_76;
  }
  HIBYTE(__dst.dli_sname) = v30.__size_;
  v31 = (char *)&__dst;
  if (v30.__size_)
LABEL_76:
    memmove(v31, v30.__data_, v30.__size_);
  v31[v30.__size_] = 0;
  *(_OWORD *)&v80.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v80.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_207CF6BB4((unint64_t)&__dst, ".framework", "");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v34.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__size_ = HIBYTE(__dst.dli_sname);
  else
    v34.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v35 = std::__fs::filesystem::path::__compare(&v80, v34);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if (v35)
        goto LABEL_86;
      goto LABEL_100;
    }
  }
  else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  if (v35)
  {
LABEL_86:
    if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__pn_.__r_.__value_.__l.__data_);
LABEL_88:
    v76.__pn_.__r_.__value_.__s.__data_[0] = 0;
    v77 = 0;
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_101;
  }
LABEL_100:
  v76 = v81;
  v77 = 1;
  if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if (!v77)
      goto LABEL_104;
    goto LABEL_92;
  }
LABEL_103:
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (!v77)
    goto LABEL_104;
LABEL_92:
  std::__fs::filesystem::__status(&v76, 0);
  if (!LOBYTE(__dst.dli_fname)
    || LOBYTE(__dst.dli_fname) == 255
    || (std::__fs::filesystem::__status(&v76, 0),
        v36 = WORD2(__dst.dli_fname),
        std::__fs::filesystem::__status(&v76, 0),
        LOBYTE(__dst.dli_fname) != 2)
    || (v36 & 0x100) == 0)
  {
LABEL_104:
    LODWORD(v82.__pn_.__r_.__value_.__l.__data_) = 1026;
    if (!_NSGetExecutablePath((char *)&__dst, (uint32_t *)&v82))
    {
      memset(&v84, 0, sizeof(v84));
      v39 = &v86;
      while (*++v39)
        ;
      sub_207CF6BB4((unint64_t)&v84, (char *)&__dst, v39);
      __p = v84;
      v75 = 1;
      goto LABEL_115;
    }
    data_low = LODWORD(v82.__pn_.__r_.__value_.__l.__data_);
    if (LODWORD(v82.__pn_.__r_.__value_.__l.__data_))
    {
      v38 = (char *)operator new(LODWORD(v82.__pn_.__r_.__value_.__l.__data_));
      bzero(v38, data_low);
    }
    else
    {
      v38 = 0;
    }
    if (_NSGetExecutablePath(v38, (uint32_t *)&v82))
    {
      v41 = 0;
      __p.__pn_.__r_.__value_.__s.__data_[0] = 0;
      v75 = 0;
      if (!v38)
        goto LABEL_114;
    }
    else
    {
      memset(&v84, 0, sizeof(v84));
      v65 = v38 - 1;
      while (*++v65)
        ;
      sub_207CF6BB4((unint64_t)&v84, v38, v65);
      __p = v84;
      v41 = 1;
      v75 = 1;
      if (!v38)
      {
LABEL_114:
        if (!v41)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          goto LABEL_209;
        }
LABEL_115:
        v42 = std::__fs::filesystem::path::__parent_path(&__p);
        if (v42.__size_ > 0x7FFFFFFFFFFFFFF7)
          sub_207C95C50();
        if (v42.__size_ >= 0x17)
        {
          v44 = (v42.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42.__size_ | 7) != 0x17)
            v44 = v42.__size_ | 7;
          v45 = v44 + 1;
          v43 = (char *)operator new(v44 + 1);
          __dst.dli_fbase = (void *)v42.__size_;
          __dst.dli_sname = (const char *)(v45 | 0x8000000000000000);
          __dst.dli_fname = v43;
        }
        else
        {
          HIBYTE(__dst.dli_sname) = v42.__size_;
          v43 = (char *)&__dst;
          if (!v42.__size_)
          {
LABEL_123:
            v43[v42.__size_] = 0;
            dli_fname = (char *)__dst.dli_fname;
            v83[0] = __dst.dli_sname;
            *(_DWORD *)((char *)v83 + 3) = *(_DWORD *)((char *)&__dst.dli_sname + 3);
            dli_sname_high = SHIBYTE(__dst.dli_sname);
            LOBYTE(__dst.dli_fname) = 0;
            LOBYTE(__dst.dli_saddr) = 0;
            if (SHIBYTE(__dst.dli_sname) < 0)
            {
              sub_207CA40D8(&__dst, dli_fname, (unint64_t)__dst.dli_fbase);
            }
            else
            {
              __dst.dli_fname = dli_fname;
              LODWORD(__dst.dli_sname) = v83[0];
              *(_DWORD *)((char *)&__dst.dli_sname + 3) = *(_DWORD *)((char *)v83 + 3);
            }
            LOBYTE(__dst.dli_saddr) = 1;
            v48 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
            if (v48.__size_ > 0x7FFFFFFFFFFFFFF7)
              sub_207C95C50();
            data = (char)v48.__data_;
            if (v48.__size_ >= 0x17)
            {
              v51 = (v48.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v48.__size_ | 7) != 0x17)
                v51 = v48.__size_ | 7;
              v52 = v51 + 1;
              v50 = operator new(v51 + 1);
              v84.__pn_.__r_.__value_.__l.__size_ = v48.__size_;
              v84.__pn_.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
              v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            }
            else
            {
              *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v48.__size_;
              v50 = &v84;
              if (!v48.__size_)
              {
LABEL_134:
                v50[v48.__size_] = 0;
                v82 = v84;
                memset(&v81, 0, sizeof(v81));
                sub_207CF6BB4((unint64_t)&v81, ".app", "");
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__data_ = (const std::string_view::value_type *)&v81;
                else
                  v53.__data_ = (const std::string_view::value_type *)v81.__pn_.__r_.__value_.__r.__words[0];
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__size_ = HIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v53.__size_ = v81.__pn_.__r_.__value_.__l.__size_;
                if (!std::__fs::filesystem::path::__compare(&v82, v53))
                {
                  v56 = 1;
                  if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_164;
                  goto LABEL_146;
                }
                v54 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
                if (v54.__size_ > 0x7FFFFFFFFFFFFFF7)
                  sub_207C95C50();
                data = (char)v54.__data_;
                if (v54.__size_ >= 0x17)
                {
                  v60 = (v54.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v54.__size_ | 7) != 0x17)
                    v60 = v54.__size_ | 7;
                  v61 = v60 + 1;
                  v55 = operator new(v60 + 1);
                  v84.__pn_.__r_.__value_.__l.__size_ = v54.__size_;
                  v84.__pn_.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
                  v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
                }
                else
                {
                  *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v54.__size_;
                  v55 = &v84;
                  if (!v54.__size_)
                  {
LABEL_155:
                    v55[v54.__size_] = 0;
                    v80 = v84;
                    memset(&v84, 0, sizeof(v84));
                    sub_207CF6BB4((unint64_t)&v84, ".bundle", "");
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__data_ = (const std::string_view::value_type *)&v84;
                    else
                      v62.__data_ = (const std::string_view::value_type *)v84.__pn_.__r_.__value_.__r.__words[0];
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__size_ = HIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]);
                    else
                      v62.__size_ = v84.__pn_.__r_.__value_.__l.__size_;
                    v56 = std::__fs::filesystem::path::__compare(&v80, v62) == 0;
                    if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v84.__pn_.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_163:
                        if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_164;
                        goto LABEL_146;
                      }
                    }
                    else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_163;
                    }
                    operator delete(v80.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_164:
                      if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_165:
                        dli_saddr_low = LOBYTE(__dst.dli_saddr);
                        if (v56)
                        {
LABEL_166:
                          if (dli_saddr_low)
                          {
                            v59 = (char *)__dst.dli_fname;
                            *(_QWORD *)v85 = __dst.dli_fbase;
                            *(_QWORD *)&v85[7] = *(void **)((char *)&__dst.dli_fbase + 7);
                            v58 = 1;
                            data = HIBYTE(__dst.dli_sname);
LABEL_168:
                            if ((dli_sname_high & 0x80000000) == 0)
                              goto LABEL_169;
                            goto LABEL_176;
                          }
                          goto LABEL_174;
                        }
LABEL_148:
                        v58 = 0;
                        v59 = 0;
                        if (!dli_saddr_low)
                          goto LABEL_175;
                        if ((SHIBYTE(__dst.dli_sname) & 0x80000000) == 0)
                          goto LABEL_168;
                        operator delete((void *)__dst.dli_fname);
LABEL_174:
                        v59 = 0;
                        v58 = 0;
LABEL_175:
                        if ((dli_sname_high & 0x80000000) == 0)
                        {
LABEL_169:
                          v63 = v77;
                          if (v77 == v58)
                            goto LABEL_170;
                          goto LABEL_177;
                        }
LABEL_176:
                        operator delete(dli_fname);
                        v63 = v77;
                        if (v77 == v58)
                        {
LABEL_170:
                          if (v63)
                          {
                            if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                            v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                            v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                            *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                            *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                            goto LABEL_186;
                          }
LABEL_181:
                          if (data < 0)
                            v64 = v58;
                          else
                            v64 = 0;
                          if (v64 == 1)
                            operator delete(v59);
LABEL_186:
                          if (!v77)
                            goto LABEL_199;
                          goto LABEL_197;
                        }
LABEL_177:
                        if (!v63)
                        {
                          v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                          v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                          *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                          *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                          v77 = 1;
LABEL_197:
                          std::__fs::filesystem::__status(&v76, 0);
                          if (LOBYTE(__dst.dli_fname))
                          {
                            if (LOBYTE(__dst.dli_fname) != 255)
                            {
                              std::__fs::filesystem::__status(&v76, 0);
                              v73 = WORD2(__dst.dli_fname);
                              std::__fs::filesystem::__status(&v76, 0);
                              if (LOBYTE(__dst.dli_fname) == 2 && (v73 & 0x100) != 0)
                              {
                                *(_BYTE *)a2 = 0;
                                *(_BYTE *)(a2 + 24) = 0;
                                if (!v77)
                                {
LABEL_209:
                                  if (v75 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                                  if (v77 && SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                                  goto LABEL_215;
                                }
                                *(std::__fs::filesystem::path *)a2 = v76;
                                memset(&v76, 0, sizeof(v76));
LABEL_208:
                                *(_BYTE *)(a2 + 24) = 1;
                                goto LABEL_209;
                              }
                            }
                          }
LABEL_199:
                          v67 = std::__fs::filesystem::path::__parent_path(&__p);
                          if (v67.__size_ > 0x7FFFFFFFFFFFFFF7)
                            sub_207C95C50();
                          if (v67.__size_ >= 0x17)
                          {
                            v69 = (v67.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v67.__size_ | 7) != 0x17)
                              v69 = v67.__size_ | 7;
                            v70 = v69 + 1;
                            v68 = (char *)operator new(v69 + 1);
                            __dst.dli_fbase = (void *)v67.__size_;
                            __dst.dli_sname = (const char *)(v70 | 0x8000000000000000);
                            __dst.dli_fname = v68;
                          }
                          else
                          {
                            HIBYTE(__dst.dli_sname) = v67.__size_;
                            v68 = (char *)&__dst;
                            if (!v67.__size_)
                              goto LABEL_207;
                          }
                          memmove(v68, v67.__data_, v67.__size_);
LABEL_207:
                          v68[v67.__size_] = 0;
                          dli_fbase = __dst.dli_fbase;
                          v72 = *(uint64_t *)((char *)&__dst.dli_fbase + 7);
                          *(_QWORD *)a2 = __dst.dli_fname;
                          *(_QWORD *)(a2 + 8) = dli_fbase;
                          *(_QWORD *)(a2 + 15) = v72;
                          *(_BYTE *)(a2 + 23) = HIBYTE(__dst.dli_sname);
                          goto LABEL_208;
                        }
                        if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                        v77 = 0;
                        goto LABEL_181;
                      }
LABEL_147:
                      operator delete(v82.__pn_.__r_.__value_.__l.__data_);
                      dli_saddr_low = LOBYTE(__dst.dli_saddr);
                      if (v56)
                        goto LABEL_166;
                      goto LABEL_148;
                    }
LABEL_146:
                    operator delete(v81.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_165;
                    goto LABEL_147;
                  }
                }
                memmove(v55, v54.__data_, v54.__size_);
                goto LABEL_155;
              }
            }
            memmove(v50, v48.__data_, v48.__size_);
            goto LABEL_134;
          }
        }
        memmove(v43, v42.__data_, v42.__size_);
        goto LABEL_123;
      }
    }
    operator delete(v38);
    v41 = v75;
    goto LABEL_114;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v77)
  {
    *(std::__fs::filesystem::path *)a2 = v76;
    *(_BYTE *)(a2 + 24) = 1;
  }
LABEL_215:
  if (v79)
  {
    if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_207CF635C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  if (a44 < 0)
    operator delete(__p);
  if (v44)
    operator delete(v44);
  if (a19 && a18 < 0)
    operator delete(exception_object);
  if (a26)
  {
    if (a25 < 0)
    {
      operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207CF65DC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

void sub_207CF6624(std::string *a1, uint64_t a2)
{
  void **v4;
  const __CFAllocator *v5;
  CFIndex v6;
  const __CFString *v7;
  CFURLRef v8;
  CFBundleRef v9;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v11;
  void *__p[2];
  uint64_t v13;
  void *__dst[2];
  uint64_t v15;
  const __CFString *v16;

  if (!*(_BYTE *)(a2 + 24))
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = *(_OWORD *)a2;
    if (v15 >= 0)
      v4 = __dst;
    else
      v4 = (void **)__dst[0];
LABEL_10:
    *(_OWORD *)__p = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    goto LABEL_11;
  }
  v4 = __dst;
  sub_207CA40D8(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  if (v15 < 0)
    v4 = (void **)__dst[0];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    goto LABEL_10;
  sub_207CA40D8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_11:
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v13 >= 0)
    v6 = HIBYTE(v13);
  else
    v6 = (CFIndex)__p[1];
  v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v4, v6, 0x8000100u, 0);
  v16 = v7;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_19:
    operator delete(__dst[0]);
    if (!v7)
      goto LABEL_20;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_19;
LABEL_16:
  if (!v7)
  {
LABEL_20:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Apple/src/BundlePath.cpp", 66, (uint64_t)"cf_path_str", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
LABEL_21:
  v8 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 1u);
  __dst[0] = v8;
  if (!v8
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Apple/src/BundlePath.cpp", 70, (uint64_t)"cf_path_url", 11, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v9 = CFBundleCreate(v5, v8);
  __p[0] = v9;
  if (!v9
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Apple/src/BundlePath.cpp", 73, (uint64_t)"cf_current_bundle", 17, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v9, (CFStringRef)*MEMORY[0x24BDBD288]);
  v11 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey)
    CFRetain(ValueForInfoDictionaryKey);
  sub_207CF7F98(v11, a1);
  if (v11)
    CFRelease(v11);
  __p[0] = 0;
  if (v9)
    CFRelease(v9);
  __dst[0] = 0;
  if (v8)
    CFRelease(v8);
  v16 = 0;
  if (v7)
    CFRelease(v7);
}

void sub_207CF68D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CF696C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  char v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2545308A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2545308A0))
  {
    sub_207CF5530((uint64_t)__p);
    sub_207CF6624((std::string *)&xmmword_254530880, (uint64_t)__p);
    if (v5 && v4 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))sub_207CF6AD0, &xmmword_254530880, &dword_207C77000);
    __cxa_guard_release(&qword_2545308A0);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_254530898)
  {
    if (byte_254530897 < 0)
    {
      sub_207CA40D8((_BYTE *)a1, (void *)xmmword_254530880, *((unint64_t *)&xmmword_254530880 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_254530880;
      *(_QWORD *)(a1 + 16) = unk_254530890;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_207CF6A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      __cxa_guard_abort(&qword_2545308A0);
      _Unwind_Resume(a1);
    }
  }
  __cxa_guard_abort(&qword_2545308A0);
  _Unwind_Resume(a1);
}

void sub_207CF6AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF6AD0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

const void **sub_207CF6B18(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_207CF6B4C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_207CF6B80(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

unint64_t sub_207CF6BB4(unint64_t a1, char *__src, char *a3)
{
  int v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  void **p_dst;
  size_t v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  char v27;
  size_t v28;
  unint64_t v30;
  uint64_t v31;
  void **__dst;
  size_t v33;
  int64_t v34;

  v6 = *(char *)(a1 + 23);
  v7 = a3 - __src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return a1;
    v8 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = *(_BYTE **)a1;
    v10 = HIBYTE(v12);
    if (*(_QWORD *)a1 > (unint64_t)__src)
      goto LABEL_11;
  }
  else
  {
    if (a3 == __src)
      return a1;
    v8 = *(unsigned __int8 *)(a1 + 23);
    v9 = 22;
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = (_BYTE *)a1;
    if (a1 > (unint64_t)__src)
    {
LABEL_11:
      if (v9 - v8 >= v7)
      {
        v16 = (_BYTE *)a1;
        if ((v10 & 0x80) != 0)
        {
          v16 = *(_BYTE **)a1;
          v17 = (_BYTE *)(*(_QWORD *)a1 + v8);
          if (v7 >= 0x20)
            goto LABEL_36;
        }
        else
        {
          v17 = (_BYTE *)(a1 + v8);
          if (v7 >= 0x20)
            goto LABEL_36;
        }
        goto LABEL_23;
      }
      v14 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - v9 < v8 + v7 - v9)
        sub_207C95C50();
      v15 = (_BYTE *)a1;
      if (v6 < 0)
      {
        v15 = *(_BYTE **)a1;
        if (v9 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v16 = operator new(0x7FFFFFFFFFFFFFF7uLL);
          if (!v8)
            goto LABEL_17;
          goto LABEL_16;
        }
      }
      else if (v9 > 0x3FFFFFFFFFFFFFF2)
      {
        goto LABEL_15;
      }
      v30 = 2 * v9;
      if (v8 + v7 > 2 * v9)
        v30 = v8 + v7;
      v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v31 = v30 | 7;
      if (v30 >= 0x17)
        v14 = v31 + 1;
      else
        v14 = 23;
      v16 = operator new(v14);
      if (!v8)
      {
LABEL_17:
        if (v9 != 22)
          operator delete(v15);
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 16) = v14 | 0x8000000000000000;
        *(_QWORD *)a1 = v16;
        v17 = &v16[v8];
        if (v7 >= 0x20)
        {
LABEL_36:
          if ((unint64_t)(&v16[v8] - __src) >= 0x20)
          {
            v18 = &__src[v7 & 0xFFFFFFFFFFFFFFE0];
            v17 += v7 & 0xFFFFFFFFFFFFFFE0;
            v23 = &v16[v8 + 16];
            v24 = (__int128 *)(__src + 16);
            v25 = v7 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v26 = *v24;
              *(v23 - 1) = *(v24 - 1);
              *v23 = v26;
              v23 += 2;
              v24 += 2;
              v25 -= 32;
            }
            while (v25);
            if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_42;
          }
          else
          {
            v18 = __src;
          }
          do
          {
LABEL_41:
            v27 = *v18++;
            *v17++ = v27;
          }
          while (v18 != a3);
LABEL_42:
          *v17 = 0;
          v28 = v8 + v7;
          if (*(char *)(a1 + 23) < 0)
            *(_QWORD *)(a1 + 8) = v28;
          else
            *(_BYTE *)(a1 + 23) = v28 & 0x7F;
          return a1;
        }
LABEL_23:
        v18 = __src;
        goto LABEL_41;
      }
LABEL_16:
      memmove(v16, v15, v8);
      goto LABEL_17;
    }
  }
  if (&v11[v8 + 1] <= __src)
    goto LABEL_11;
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v7 > 0x16)
  {
    v19 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v19 = v7 | 7;
    v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    v33 = v7;
    v34 = v20 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v34) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
  }
  memcpy(p_dst, __src, v7);
  *((_BYTE *)p_dst + v7) = 0;
  if (v34 >= 0)
    v21 = (const std::string::value_type *)&__dst;
  else
    v21 = (const std::string::value_type *)__dst;
  if (v34 >= 0)
    v22 = HIBYTE(v34);
  else
    v22 = v33;
  std::string::append((std::string *)a1, v21, v22);
  if (SHIBYTE(v34) < 0)
    operator delete(__dst);
  return a1;
}

void sub_207CF6E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207CF6EC0(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_207CF7F98(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_207CF6F18(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_207CF6F30(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_207CF7F98(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_207CF6F88(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_207CF6FA0(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_207CF7F98(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_207CF6FF8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_207CF7010(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_207CF7F98(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_207CF7068(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_207CF7080(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_207CF7F98(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_207CF70D8(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_207CF70F0(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_207CF7F98(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_207CF7148(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_207CF7160(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string::value_type v4;
  std::string::size_type v5;
  __int16 v6;
  char v7;
  std::string v8;
  std::string::value_type v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFString *)MGGetStringAnswer();
  v10 = v2;
  if (!v2)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v3 = v2;
  sub_207CF7F98(v2, &v8);
  CFRelease(v3);
  v4 = v9;
  if (!v9)
  {
LABEL_5:
    v7 = 10;
    v6 = 28271;
    v5 = 0x69746375646F7250;
    goto LABEL_6;
  }
  v5 = v8.__r_.__value_.__r.__words[0];
  v6 = v8.__r_.__value_.__r.__words[1];
  v4 = v8.__r_.__value_.__s.__data_[10];
  v10 = *(const __CFString **)((char *)&v8.__r_.__value_.__r.__words[1] + 3);
  v11 = *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3);
  v7 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
LABEL_6:
  *(_QWORD *)a1 = v5;
  *(_WORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 10) = v4;
  *(_QWORD *)(a1 + 11) = v10;
  *(_DWORD *)(a1 + 19) = v11;
  *(_BYTE *)(a1 + 23) = v7;
  *(_BYTE *)(a1 + 24) = 1;
}

void sub_207CF7248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_207C9CFA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF726C()
{
  return MGGetSInt64Answer();
}

uint64_t sub_207CF7290()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_207CF72FC()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_207CF7368()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_207CF73D4()
{
  return MGGetSInt32Answer() | 0x100000000;
}

void sub_207CF73FC(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_207CF7F98(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_207CF7454(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_207CF746C(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string *p_p;
  std::string::size_type size;
  __int128 v6;
  uint64_t v7;
  std::string __p;
  char v9;

  v2 = (const __CFString *)MGGetStringAnswer();
  *(_QWORD *)&v6 = v2;
  if (v2 && (v3 = v2, sub_207CF7F98(v2, &__p), CFRelease(v3), v9))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_207CF75E4((char *)p_p, size, ":", 1, 0, (uint64_t)&v6);
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
    if (v9)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_207CF753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CF7578()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

void sub_207CF75E4(char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  char v28;
  char *v29;
  void *__p[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v10 = a1;
    v11 = 0;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    v29 = a1;
    __p[0] = a1;
    v12 = &a1[a2];
    while (1)
    {
      v15 = v12;
      if (v10 != v12)
      {
        if (a4)
        {
          v15 = v10;
LABEL_10:
          v16 = a4;
          v17 = a3;
          while (*v17 != *v15)
          {
            ++v17;
            if (!--v16)
            {
              if (++v15 != v12)
                goto LABEL_10;
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          v15 = v12;
        }
      }
      v29 = v15;
      if (a5 != 1 && v15 == v10)
        goto LABEL_6;
      if ((unint64_t)v11 >= *(_QWORD *)(a6 + 16))
      {
        v11 = sub_207CF7880((void **)a6, (uint64_t *)__p, &v29);
        goto LABEL_5;
      }
      v18 = v15 - v10;
      if ((unint64_t)(v15 - v10) >= 0x7FFFFFFFFFFFFFF8)
        sub_207C95C50();
      if (v18 > 0x16)
      {
        v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v21 = v18 | 7;
        v22 = v21 + 1;
        v19 = (char *)operator new(v21 + 1);
        *((_QWORD *)v11 + 1) = v18;
        *((_QWORD *)v11 + 2) = v22 | 0x8000000000000000;
        *(_QWORD *)v11 = v19;
        v20 = v15 - v10;
        if (v15 == v10)
        {
LABEL_3:
          v13 = v19;
          goto LABEL_4;
        }
      }
      else
      {
        v11[23] = v18;
        v19 = v11;
        v20 = v15 - v10;
        if (v15 == v10)
          goto LABEL_3;
      }
      if (v20 < 0x20 || (unint64_t)(v19 - v10) < 0x20)
      {
        v23 = v10;
        v13 = v19;
      }
      else
      {
        v23 = &v10[v20 & 0xFFFFFFFFFFFFFFE0];
        v13 = &v19[v20 & 0xFFFFFFFFFFFFFFE0];
        v24 = v19 + 16;
        v25 = (__int128 *)(v10 + 16);
        v26 = v20 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 += 2;
          v25 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_4;
      }
      do
      {
        v28 = *v23++;
        *v13++ = v28;
      }
      while (v23 != v15);
LABEL_4:
      *v13 = 0;
      v11 += 24;
      *(_QWORD *)(a6 + 8) = v11;
LABEL_5:
      *(_QWORD *)(a6 + 8) = v11;
      v10 = v29;
LABEL_6:
      __p[0] = v10 + 1;
      if (v10++ == v12)
        return;
    }
  }
  if (a5)
  {
    v31 = 0;
    LOBYTE(__p[0]) = 0;
    sub_207CAA110((_QWORD *)a6, (uint64_t)__p, 1uLL);
    if (v31 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
}

void sub_207CF7840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_207CF7880(void **a1, uint64_t *a2, char **a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  __int128 *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  void *v25;
  void **v26;
  void **v27;
  __int128 v28;
  void **v29;
  char *v31;
  char *v32;
  char *v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_207CA420C();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA3AB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  v31 = v10;
  v32 = v10;
  v33 = &v9[24 * v8];
  v11 = *a2;
  v12 = *a3;
  v13 = (unint64_t)&(*a3)[-v11];
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v13 <= 0x16)
  {
    v10[23] = v13;
    if ((char *)v11 != v12)
      goto LABEL_14;
LABEL_23:
    v15 = v10;
    goto LABEL_26;
  }
  v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v20 = v13 | 7;
  v21 = v20 + 1;
  v22 = (char *)operator new(v20 + 1);
  *((_QWORD *)v10 + 1) = v13;
  *((_QWORD *)v10 + 2) = v21 | 0x8000000000000000;
  *(_QWORD *)v10 = v22;
  v10 = v22;
  if ((char *)v11 == v12)
    goto LABEL_23;
LABEL_14:
  if (v13 < 0x20 || (unint64_t)&v10[-v11] < 0x20)
  {
    v14 = (char *)v11;
    v15 = v10;
    do
    {
LABEL_25:
      v23 = *v14++;
      *v15++ = v23;
    }
    while (v14 != v12);
    goto LABEL_26;
  }
  v14 = (char *)(v11 + (v13 & 0xFFFFFFFFFFFFFFE0));
  v15 = &v10[v13 & 0xFFFFFFFFFFFFFFE0];
  v16 = v10 + 16;
  v17 = (__int128 *)(v11 + 16);
  v18 = v13 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v19 = *v17;
    *(v16 - 1) = *(v17 - 1);
    *v16 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 32;
  }
  while (v18);
  if (v13 != (v13 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_25;
LABEL_26:
  *v15 = 0;
  v24 = v31;
  v25 = v32 + 24;
  v26 = (void **)*a1;
  v27 = (void **)a1[1];
  if (v27 == *a1)
  {
    *a1 = v31;
    a1[1] = v25;
    a1[2] = v33;
  }
  else
  {
    do
    {
      v28 = *(_OWORD *)(v27 - 3);
      *((_QWORD *)v24 - 1) = *(v27 - 1);
      *(_OWORD *)(v24 - 24) = v28;
      v24 -= 24;
      *(v27 - 2) = 0;
      *(v27 - 1) = 0;
      *(v27 - 3) = 0;
      v27 -= 3;
    }
    while (v27 != v26);
    v27 = (void **)*a1;
    v29 = (void **)a1[1];
    *a1 = v24;
    a1[1] = v25;
    a1[2] = v33;
    while (v29 != v27)
    {
      if (*((char *)v29 - 1) < 0)
        operator delete(*(v29 - 3));
      v29 -= 3;
    }
  }
  if (v27)
    operator delete(v27);
  return v32 + 24;
}

void sub_207CF7AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_207CF7AE4(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (v1 <= 0x100)
    LOBYTE(v1) = 0;
  return v1 != 0;
}

uint64_t *sub_207CF7B20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;
  char v4;

  v0 = atomic_load((unsigned __int8 *)&qword_2545308D0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545308D0))
    return &qword_2545308B8;
  sub_207CF696C((uint64_t)__p);
  sub_207CCBD54("com.apple.cv3d", (unint64_t)__p, &qword_2545308B8);
  if (v4)
  {
    if (v3 < 0)
      operator delete(__p[0]);
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2545308B8, &dword_207C77000);
  __cxa_guard_release(&qword_2545308D0);
  return &qword_2545308B8;
}

void sub_207CF7BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      __cxa_guard_abort(&qword_2545308D0);
      _Unwind_Resume(a1);
    }
  }
  __cxa_guard_abort(&qword_2545308D0);
  _Unwind_Resume(a1);
}

uint64_t sub_207CF7C28()
{
  sub_207CF7B20();
  return os_variant_allows_internal_security_policies();
}

uint64_t sub_207CF7C54()
{
  sub_207CF7B20();
  return os_variant_allows_security_research();
}

uint64_t sub_207CF7C80()
{
  sub_207CF7B20();
  return os_variant_has_factory_content();
}

uint64_t sub_207CF7CAC()
{
  sub_207CF7B20();
  return os_variant_check();
}

uint64_t sub_207CF7CE0()
{
  sub_207CF7B20();
  return os_variant_has_internal_content();
}

uint64_t sub_207CF7D0C()
{
  sub_207CF7B20();
  return os_variant_has_internal_diagnostics();
}

uint64_t sub_207CF7D38()
{
  sub_207CF7B20();
  return os_variant_has_internal_ui();
}

uint64_t sub_207CF7D64()
{
  sub_207CF7B20();
  return os_variant_check();
}

uint64_t sub_207CF7D98()
{
  sub_207CF7B20();
  return os_variant_is_darwinos();
}

uint64_t sub_207CF7DC4()
{
  sub_207CF7B20();
  return os_variant_is_recovery();
}

uint64_t sub_207CF7DF0()
{
  sub_207CF7B20();
  return os_variant_uses_ephemeral_storage();
}

uint64_t *sub_207CF7E1C()
{
  unsigned __int8 v0;
  _QWORD *v2;
  _QWORD v3[2];

  v0 = atomic_load((unsigned __int8 *)&qword_2545308E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2545308E8))
    return &qword_2545308D8;
  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = off_24C0725C0;
  v2[3] = &off_24C072528;
  qword_2545308D8 = (uint64_t)(v2 + 3);
  unk_2545308E0 = v2;
  v3[0] = 0;
  v3[1] = 0;
  sub_207C99D78((uint64_t)v3);
  __cxa_atexit((void (*)(void *))sub_207CF7EF8, &qword_2545308D8, &dword_207C77000);
  __cxa_guard_release(&qword_2545308E8);
  return &qword_2545308D8;
}

void sub_207CF7EE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2545308E8);
  _Unwind_Resume(a1);
}

uint64_t sub_207CF7EF8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207CF7F60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0725C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CF7F70(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0725C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

const __CFString *sub_207CF7F98@<X0>(const __CFString *result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFIndex v4;
  CFIndex v5;
  std::string *v6;
  std::string v7;
  CFIndex usedBufLen;
  CFRange v9;
  CFRange v10;

  if (!result)
    goto LABEL_8;
  v3 = result;
  result = (const __CFString *)CFStringGetLength(result);
  if (result)
  {
    v4 = (CFIndex)result;
    usedBufLen = 0;
    v9.location = 0;
    v9.length = (CFIndex)result;
    result = (const __CFString *)CFStringGetBytes(v3, v9, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if ((uint64_t)result > 0)
    {
      memset(&v7, 0, sizeof(v7));
      if (usedBufLen)
      {
        std::string::append(&v7, usedBufLen, 0);
        v5 = usedBufLen;
        if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v6 = &v7;
        else
          v6 = (std::string *)v7.__r_.__value_.__r.__words[0];
      }
      else
      {
        v5 = 0;
        v6 = &v7;
      }
      v10.location = 0;
      v10.length = v4;
      result = (const __CFString *)CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, (UInt8 *)v6, v5, 0);
      *a2 = v7;
      goto LABEL_12;
    }
LABEL_8:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_12:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_207CF80BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207CF80D8(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  unint64_t v29;
  std::string *p_p;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  void **v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type size;
  std::string *v39;
  unsigned __int8 v40;
  int v41;
  _QWORD *v42;
  std::string *v43;
  std::string::size_type v44;
  _QWORD *v45;
  void **__dst;
  size_t v47;
  int64_t v48;
  std::string __p;
  uint64_t v50;
  std::__fs::filesystem::path v51;
  uint64_t v52;
  _QWORD v53[2];

  v53[1] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) >= 0)
    v10 = a1;
  else
    v10 = *(_QWORD *)a1;
  v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v12 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", v11);
  if (!v12)
  {
    if (a4)
    {
      v18 = sub_207CBAB98(a3, (uint64_t)"Could not find bundle '", 23);
      v19 = *(char *)(a1 + 23);
      if (v19 >= 0)
        v20 = a1;
      else
        v20 = *(_QWORD *)a1;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(a1 + 23);
      else
        v21 = *(_QWORD *)(a1 + 8);
      v22 = sub_207CBAB98(v18, v20, v21);
      v23 = sub_207CBAB98(v22, (uint64_t)"'.", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
      v24 = std::locale::use_facet((const std::locale *)&v51, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)&v51);
      std::ostream::put();
      std::ostream::flush();
    }
    a5->__r_.__value_.__s.__data_[0] = 0;
    a5[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v13 = (void *)objc_msgSend(v12, "resourcePath");
  if (!v13
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Resource/src/Resource.cpp", 125, (uint64_t)"resources_path", 14, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v14 = (const char *)objc_msgSend(v13, "UTF8String");
  v15 = strlen(v14);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    p_dst = (void **)operator new(v25 + 1);
    v47 = v16;
    v48 = v26 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_23;
  }
  HIBYTE(v48) = v15;
  p_dst = (void **)&__dst;
  if (v15)
LABEL_23:
    memmove(p_dst, v14, v16);
  *((_BYTE *)p_dst + v16) = 0;
  v27 = SHIBYTE(v48);
  if (v48 >= 0)
    v28 = HIBYTE(v48);
  else
    v28 = v47;
  v29 = v28 + 10;
  if (v28 + 10 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    p_p = (std::string *)operator new(v31 + 1);
    __p.__r_.__value_.__l.__size_ = v28 + 10;
    __p.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    p_p = &__p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v28 + 10;
    if (!v28)
      goto LABEL_38;
  }
  if (v27 >= 0)
    v33 = (void **)&__dst;
  else
    v33 = __dst;
  memmove(p_p, v33, v28);
LABEL_38:
  strcpy((char *)p_p + v28, "/.disabled");
  v51.__pn_ = __p;
  std::__fs::filesystem::__status(&v51, 0);
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__pn_.__r_.__value_.__l.__data_);
  v34 = HIBYTE(v48);
  v35 = (void **)&__dst;
  if (v48 < 0)
  {
    v35 = __dst;
    v34 = v47;
  }
  v51.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  v51.__pn_.__r_.__value_.__l.__size_ = v34;
  v36 = *(unsigned __int8 *)(a2 + 23);
  if ((v36 & 0x80u) == 0)
    v37 = a2;
  else
    v37 = *(_QWORD *)a2;
  if ((v36 & 0x80u) != 0)
    v36 = *(_QWORD *)(a2 + 8);
  v51.__pn_.__r_.__value_.__r.__words[2] = v37;
  v52 = v36;
  sub_207CAC8F4((uint64_t)&v51, (uint64_t)v53, "/", 1uLL, &__p);
  memset(&v51, 0, sizeof(v51));
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &__p;
  else
    v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  sub_207CF6BB4((unint64_t)&v51, (char *)v39, (char *)v39 + size);
  std::__fs::filesystem::__status(&v51, 0);
  v40 = v50;
  if (SHIBYTE(v51.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v51.__pn_.__r_.__value_.__l.__data_);
    v41 = v40;
    if (!v40)
      goto LABEL_57;
  }
  else
  {
    v41 = v50;
    if (!(_BYTE)v50)
      goto LABEL_57;
  }
  if (v41 != 255)
  {
    *a5 = __p;
    a5[1].__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(v48) < 0)
      goto LABEL_69;
    return;
  }
LABEL_57:
  if (a4)
  {
    v42 = sub_207CBAB98(a3, (uint64_t)"Resource at '", 13);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &__p;
    else
      v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v44 = __p.__r_.__value_.__l.__size_;
    v45 = sub_207CBAB98(v42, (uint64_t)v43, v44);
    sub_207CBAB98(v45, (uint64_t)"' does not exist.", 17);
  }
  a5->__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      return;
LABEL_69:
    operator delete(__dst);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48) < 0)
    goto LABEL_69;
}

void sub_207CF8588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::locale::~locale(&a17);
  _Unwind_Resume(a1);
}

void sub_207CF859C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **sub_207CF8608(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072610;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207CF86C8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF86DC()
{
  __break(1u);
}

void sub_207CF8708()
{
  __cxa_end_catch();
  JUMPOUT(0x207CF8710);
}

std::__shared_weak_count_vtbl **sub_207CF871C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207CF87DC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF87F0()
{
  __break(1u);
}

void sub_207CF881C()
{
  __cxa_end_catch();
  JUMPOUT(0x207CF8824);
}

void sub_207CF8830(uint64_t a1@<X8>)
{
  std::__shared_weak_count_vtbl *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 bundleURL;
  void *__p[2];
  char v8;
  char v9;

  sub_207CF5530((uint64_t)__p);
  if (v9)
  {
    sub_207D02904(&bundleURL, (uint64_t)__p, 1u);
    v2 = (std::__shared_weak_count_vtbl *)CFBundleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (CFURLRef)bundleURL);
    sub_207CF8608((std::__shared_weak_count_vtbl **)a1, v2, 0);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&bundleURL + 1);
    if (*((_QWORD *)&bundleURL + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&bundleURL + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (v9)
    {
      if (v8 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_207CF88FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207CF8934(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF8948(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CF8968(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CF89DC(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF89F0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CF8A10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CF8A80(int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0726B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_207CF8B48(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF8B60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207CF8B74(unsigned int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0726B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_207CF8C3C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF8C54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207CF8C68(uint64_t *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0726B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_207CF8D30(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF8D48(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207CF8D5C(void *valuePtr@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberFloatType, valuePtr);
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0726B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_207CF8E0C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF8E24(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207CF8E38(_BYTE *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl **v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD270];
  if (!*a1)
    v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD268];
  v4 = *v3;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072700;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  *a2 = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_207CF8EEC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF8F04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207CF8F18(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727A0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_207CF8FE8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF9000(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CFIndex sub_207CF9014@<X0>(CFIndex result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  CFIndex v5;
  CFIndex v6;
  std::string *v7;
  std::string v8;
  CFIndex usedBufLen;
  CFRange v10;
  CFRange v11;

  if (!result)
    goto LABEL_9;
  v3 = (const __CFString *)result;
  TypeID = CFStringGetTypeID();
  result = CFGetTypeID(v3);
  if (result != TypeID)
    goto LABEL_9;
  result = CFStringGetLength(v3);
  if (result)
  {
    v5 = result;
    usedBufLen = 0;
    v10.location = 0;
    v10.length = result;
    result = CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if (result > 0)
    {
      memset(&v8, 0, sizeof(v8));
      if (usedBufLen)
      {
        std::string::append(&v8, usedBufLen, 0);
        v6 = usedBufLen;
        if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v8;
        else
          v7 = (std::string *)v8.__r_.__value_.__r.__words[0];
      }
      else
      {
        v6 = 0;
        v7 = &v8;
      }
      v11.location = 0;
      v11.length = v5;
      result = CFStringGetBytes(v3, v11, 0x8000100u, 0, 0, (UInt8 *)v7, v6, 0);
      *a2 = v8;
      goto LABEL_13;
    }
LABEL_9:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_13:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_207CF9154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207CF9170(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727A0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_207CF9240(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF9258(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207CF9270(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF9284(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CF92A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CF9318(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF932C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CF934C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CF93C0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF93D4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CF93F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207CF9464(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C072750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CF9478(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C072750;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF949C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_207CF94B8()
{
  sub_207C95C64("vector");
}

std::__shared_weak_count_vtbl **sub_207CF94CC(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC30;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207CF958C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF95A0()
{
  __break(1u);
}

void sub_207CF95CC()
{
  __cxa_end_catch();
  JUMPOUT(0x207CF95D4);
}

std::__shared_weak_count_vtbl **sub_207CF95E0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727F0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207CF96A0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF96B4()
{
  __break(1u);
}

void sub_207CF96E0()
{
  __cxa_end_catch();
  JUMPOUT(0x207CF96E8);
}

void sub_207CF96F8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CF970C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207CF972C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_207CF979C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207CF985C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF9870()
{
  __break(1u);
}

void sub_207CF989C()
{
  __cxa_end_catch();
  JUMPOUT(0x207CF98A4);
}

void sub_207CF98B0(const UInt8 *a1@<X0>, CFIndex a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  Default = CFAllocatorGetDefault();
  v7 = (std::__shared_weak_count_vtbl *)CFDataCreateWithBytesNoCopy(Default, a1, a2, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FBE0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  sub_207CF979C(a3, v7, 1);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v8)
      return;
  }
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_207CF99D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_207C99D78((uint64_t)&a11);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CF99F0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF9A08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207CF9A1C(void **a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t *a4@<X3>, const __CFAllocator *a5@<X4>, const CFDictionaryKeyCallBacks *a6@<X5>, const CFDictionaryValueCallBacks *a7@<X6>, void ***a8@<X8>)
{
  void **v14;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  std::__shared_weak_count_vtbl *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **values;
  void **v31;
  void **v32;
  uint64_t v33;
  void ***p_values;

  v14 = a1;
  if (a1 != a3
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/src/DictionaryRef.cpp", 99, (uint64_t)"keys.size() == values.size()", 28, (uint64_t)"Number of keys must match number of values", 42, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  values = 0;
  v31 = 0;
  v32 = 0;
  if (v14)
  {
    if ((unint64_t)v14 >> 61)
      sub_207CA420C();
    values = (void **)operator new(8 * (_QWORD)v14);
    v31 = values;
    v32 = &values[(_QWORD)v14];
    p_values = &values;
    v16 = 16 * (_QWORD)v14;
    do
    {
      v33 = *a2;
      sub_207CFB754((void ***)&p_values, &v33);
      a2 += 2;
      v16 -= 16;
    }
    while (v16);
    v17 = values;
    v14 = v31;
    values = 0;
    v31 = 0;
    v32 = 0;
    if (a3)
      goto LABEL_8;
LABEL_13:
    v19 = 0;
    goto LABEL_14;
  }
  v17 = 0;
  values = 0;
  v31 = 0;
  v32 = 0;
  if (!a3)
    goto LABEL_13;
LABEL_8:
  if ((unint64_t)a3 >> 61)
    sub_207CA420C();
  values = (void **)operator new(8 * (_QWORD)a3);
  v31 = values;
  v32 = &values[(_QWORD)a3];
  p_values = &values;
  v18 = 16 * (_QWORD)a3;
  do
  {
    v33 = *a4;
    sub_207CFB754((void ***)&p_values, &v33);
    a4 += 2;
    v18 -= 16;
  }
  while (v18);
  v19 = values;
LABEL_14:
  v20 = (std::__shared_weak_count_vtbl *)CFDictionaryCreate(a5, (const void **)v17, (const void **)v19, v14 - v17, a6, a7);
  sub_207CF9D84((std::__shared_weak_count_vtbl **)&values, v20, 0);
  v21 = values;
  v22 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v23 = (unint64_t *)(v31 + 1);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *a8 = v21;
    a8[1] = (void **)&v22->__vftable;
    do
      v25 = __ldxr(v23);
    while (__stxr(v25 + 1, v23));
    do
      v26 = __ldaxr(v23);
    while (__stlxr(v26 - 1, v23));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    *a8 = values;
    a8[1] = 0;
  }
  v27 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v28 = (unint64_t *)(v31 + 1);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v19)
    operator delete(v19);
  if (v17)
    operator delete(v17);
}

void sub_207CF9C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void ***sub_207CF9CCC(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        while (1)
        {
          v6 = (std::__shared_weak_count *)*(v3 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v5 = v3 - 5;
          if (*((char *)v3 - 17) < 0)
            break;
          v3 -= 5;
          if (v5 == v2)
            goto LABEL_12;
        }
        operator delete(*v5);
        v3 -= 5;
      }
      while (v5 != v2);
LABEL_12:
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

std::__shared_weak_count_vtbl **sub_207CF9D84(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207CF9E44(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CF9E58()
{
  __break(1u);
}

void sub_207CF9E84()
{
  __cxa_end_catch();
  JUMPOUT(0x207CF9E8CLL);
}

void sub_207CF9E98(uint64_t a1, void **a2, unsigned __int8 a3, void **a4, unsigned __int8 a5)
{
  std::__shared_weak_count *v10;
  CFDictionaryRef v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **p_p;
  std::__shared_weak_count *v19;
  CFDictionaryRef v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t Count;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  const void **v29;
  unint64_t v30;
  const void **v31;
  unint64_t v32;
  CFTypeRef *v33;
  CFTypeRef *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __n128 v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  CFTypeRef *v50;
  CFTypeRef *v51;
  CFTypeRef *v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __n128 v60;
  void *v61;
  char *v62;
  char *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 v68;
  __n128 v69;
  void *__p;
  CFTypeRef *v71;
  uint64_t v72;
  void *v73;
  CFTypeRef *v74;
  uint64_t v75;
  __n128 v76;
  unint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;

  v11 = *(CFDictionaryRef *)a1;
  v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v10)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v11)
      return;
  }
  else
  {
LABEL_6:
    if (!v11)
      return;
  }
  v73 = 0;
  v74 = 0;
  v75 = 0;
  __p = 0;
  v71 = 0;
  v15 = a3;
  v72 = 0;
  if (a3)
    v16 = &v73;
  else
    v16 = 0;
  v17 = a5;
  if (a5)
    p_p = &__p;
  else
    p_p = 0;
  v20 = *(CFDictionaryRef *)a1;
  v19 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v19)
    goto LABEL_18;
  v21 = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (v20)
      goto LABEL_19;
  }
  else
  {
LABEL_18:
    if (v20)
    {
LABEL_19:
      Count = *(_QWORD *)a1;
      v24 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v24)
        goto LABEL_24;
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if (!Count)
          goto LABEL_26;
      }
      else
      {
LABEL_24:
        if (!Count)
        {
LABEL_26:
          if (v15)
          {
            v29 = (const void **)*v16;
            v30 = ((_BYTE *)v16[1] - (_BYTE *)*v16) >> 3;
            if (Count <= v30)
            {
              if (Count < v30)
                v16[1] = &v29[Count];
            }
            else
            {
              sub_207CFEB84(v16, Count - v30);
              v29 = (const void **)*v16;
            }
          }
          else
          {
            v29 = 0;
          }
          if (v17)
          {
            v31 = (const void **)*p_p;
            v32 = ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3;
            if (Count <= v32)
            {
              if (Count < v32)
                p_p[1] = &v31[Count];
            }
            else
            {
              sub_207CFEB84(p_p, Count - v32);
              v31 = (const void **)*p_p;
            }
          }
          else
          {
            v31 = 0;
          }
          CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, v29, v31);
          goto LABEL_43;
        }
      }
      Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
      goto LABEL_26;
    }
  }
LABEL_43:
  if (v15)
  {
    v77 = 0;
    v76 = 0uLL;
    sub_207CFED24((uint64_t)&v76, ((char *)v74 - (_BYTE *)v73) >> 3);
    v33 = (CFTypeRef *)v73;
    v34 = v74;
    if (v73 != v74)
    {
      do
      {
        v35 = (std::__shared_weak_count_vtbl *)*v33;
        if (*v33)
          CFRetain(*v33);
        v78 = v35;
        v36 = (std::__shared_weak_count *)operator new(0x20uLL);
        v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
        v36->__shared_owners_ = 0;
        v36->__shared_weak_owners_ = 0;
        v36[1].__vftable = v35;
        v79 = v36;
        v37 = v76.n128_u64[1];
        if (v76.n128_u64[1] < v77)
        {
          *(_QWORD *)v76.n128_u64[1] = v35;
          *(_QWORD *)(v37 + 8) = v36;
          v76.n128_u64[1] = v37 + 16;
        }
        else
        {
          v38 = sub_207CFEE1C((char **)&v76, (uint64_t)&v78);
          v39 = v79;
          v76.n128_u64[1] = (unint64_t)v38;
          if (v79)
          {
            v40 = (unint64_t *)&v79->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
        }
        ++v33;
      }
      while (v33 != v34);
    }
    v42 = v76;
    v43 = (void *)v77;
    v44 = (char *)*a2;
    if (*a2)
    {
      v68 = v76;
      v45 = (char *)a2[1];
      v46 = *a2;
      if (v45 != v44)
      {
        do
        {
          v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v42);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v45 -= 16;
        }
        while (v45 != v44);
        v46 = *a2;
      }
      a2[1] = v44;
      operator delete(v46);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v42 = v68;
    }
    *(__n128 *)a2 = v42;
    a2[2] = v43;
  }
  v50 = (CFTypeRef *)__p;
  if (v17)
  {
    v77 = 0;
    v76 = 0uLL;
    sub_207CFED24((uint64_t)&v76, ((char *)v71 - (_BYTE *)__p) >> 3);
    v51 = (CFTypeRef *)__p;
    v52 = v71;
    if (__p != v71)
    {
      do
      {
        v53 = (std::__shared_weak_count_vtbl *)*v51;
        if (*v51)
          CFRetain(*v51);
        v78 = v53;
        v54 = (std::__shared_weak_count *)operator new(0x20uLL);
        v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
        v54->__shared_owners_ = 0;
        v54->__shared_weak_owners_ = 0;
        v54[1].__vftable = v53;
        v79 = v54;
        v55 = v76.n128_u64[1];
        if (v76.n128_u64[1] < v77)
        {
          *(_QWORD *)v76.n128_u64[1] = v53;
          *(_QWORD *)(v55 + 8) = v54;
          v76.n128_u64[1] = v55 + 16;
        }
        else
        {
          v56 = sub_207CFEE1C((char **)&v76, (uint64_t)&v78);
          v57 = v79;
          v76.n128_u64[1] = (unint64_t)v56;
          if (v79)
          {
            v58 = (unint64_t *)&v79->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        ++v51;
      }
      while (v51 != v52);
    }
    v60 = v76;
    v61 = (void *)v77;
    v62 = (char *)*a4;
    if (*a4)
    {
      v69 = v76;
      v63 = (char *)a4[1];
      v64 = *a4;
      if (v63 != v62)
      {
        do
        {
          v65 = (std::__shared_weak_count *)*((_QWORD *)v63 - 1);
          if (v65)
          {
            v66 = (unint64_t *)&v65->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v65->__on_zero_shared)(v65, v60);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v63 -= 16;
        }
        while (v63 != v62);
        v64 = *a4;
      }
      a4[1] = v62;
      operator delete(v64);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v60 = v69;
    }
    *(__n128 *)a4 = v60;
    a4[2] = v61;
    v50 = (CFTypeRef *)__p;
  }
  if (v50)
  {
    v71 = v50;
    operator delete(v50);
  }
  if (v73)
  {
    v74 = (CFTypeRef *)v73;
    operator delete(v73);
  }
}

void sub_207CFA37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v22;

  sub_207CBE108(&a17);
  if (__p)
  {
    operator delete(__p);
    v22 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v22 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_207CFA438(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_207CFA4E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  v2 = **(_QWORD **)(a1 + 24) + 24 * *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != v2)
  {
    v4 = *(_BYTE *)(v2 + 23);
    if (*(char *)(v3 + 23) < 0)
    {
      if (v4 >= 0)
        v6 = (void *)v2;
      else
        v6 = *(void **)v2;
      if (v4 >= 0)
        v7 = *(unsigned __int8 *)(v2 + 23);
      else
        v7 = *(_QWORD *)(v2 + 8);
      sub_207CC2244((void **)v3, v6, v7);
    }
    else if ((*(_BYTE *)(v2 + 23) & 0x80) != 0)
    {
      sub_207CC2180((_QWORD *)v3, *(void **)v2, *(_QWORD *)(v2 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v2;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
      *(_OWORD *)v3 = v5;
    }
  }
  v8 = *(_QWORD *)(a1 + 40);
  sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v17, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16 * *(_QWORD *)(a1 + 8));
  v9 = v17;
  v17 = 0uLL;
  v10 = *(std::__shared_weak_count **)(v8 + 32);
  *(_OWORD *)(v8 + 24) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
        goto LABEL_18;
      return *(_QWORD *)(a1 + 40);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (!*((_QWORD *)&v17 + 1))
    return *(_QWORD *)(a1 + 40);
LABEL_18:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return *(_QWORD *)(a1 + 40);
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return *(_QWORD *)(a1 + 40);
}

void sub_207CFA638(uint64_t a1@<X0>, uint64_t a2@<X1>, CFMutableDictionaryRef *a3@<X8>)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  CFAllocatorRef *v11;
  CFMutableDictionaryRef MutableCopy;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
LABEL_16:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
  }
  if (!v7)
    goto LABEL_16;
LABEL_7:
  if (*(_BYTE *)(a2 + 8))
    v11 = (CFAllocatorRef *)a2;
  else
    v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  MutableCopy = CFDictionaryCreateMutableCopy(*v11, 0, *(CFDictionaryRef *)a1);
  v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14 = v13;
  v13->__shared_owners_ = 0;
  v15 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727F0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)MutableCopy;
  *a3 = MutableCopy;
  a3[1] = (CFMutableDictionaryRef)v13;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_207CFA770(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CFA788(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_207CFA79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char *v13;
  uint64_t v14;
  uint64_t v15[2];
  uint64_t *v16;

  v15[0] = a2;
  v15[1] = a3;
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_207CF9E98(a1, 0, 0, &__p, 1u);
  v3 = (char *)__p;
  v4 = v13;
  if (__p == v13)
  {
    v5 = 1;
    if (!__p)
      return v5;
    goto LABEL_10;
  }
  v5 = 1;
  while (1)
  {
    v16 = v15;
    if (!sub_207CFEF50(&v16, (uint64_t)v3, v15))
      break;
    v3 += 16;
    if (v3 == v4)
      goto LABEL_9;
  }
  v5 = 0;
LABEL_9:
  v3 = (char *)__p;
  if (__p)
  {
LABEL_10:
    v6 = v13;
    v7 = v3;
    if (v13 != v3)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v3);
      v7 = __p;
    }
    v13 = v3;
    operator delete(v7);
  }
  return v5;
}

void sub_207CFA8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207CBE108(&a9);
  _Unwind_Resume(a1);
}

void sub_207CFA8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_207CBE108(&a9);
  _Unwind_Resume(a1);
}

void sub_207CFA8E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  CFIndex *v18;
  CFIndex *v19;
  __n128 v20;
  __n128 *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  CFIndex *v29;
  CFIndex *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  void *v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  void **v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  CFDictionaryRef v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  CFIndex Count;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  __n128 v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  _BYTE v143[24];
  __int128 v144;
  __int128 v145;
  void *v146;
  unint64_t *v147;
  void *__p;
  CFIndex *v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  __n128 v158;
  unint64_t v159;

  *(_QWORD *)v143 = a1;
  *(_OWORD *)&v143[8] = 0u;
  v144 = 0u;
  v145 = 0u;
  if (!a1)
    goto LABEL_164;
  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_35;
  }
  else
  {
LABEL_7:
    if (!v5)
    {
LABEL_35:
      *(_QWORD *)v143 = 0;
      goto LABEL_164;
    }
  }
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)a1))
    goto LABEL_35;
  v9 = (char *)operator new(0x48uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_24C072890;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  *(_QWORD *)&v144 = v9 + 24;
  *((_QWORD *)&v144 + 1) = v9;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (char *)operator new(0x40uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = off_24C072840;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_QWORD *)v13 + 7) = 0;
  *(_OWORD *)(v13 + 24) = 0u;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  *(_QWORD *)&v145 = v13 + 24;
  *((_QWORD *)&v145 + 1) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  sub_207CF9E98(a1, (void **)&v153, 1u, &v150, 1u);
  v17 = v153;
  if (v153 != v154)
  {
    sub_207CFB8C8(&__p, (uint64_t)&v153);
    v157 = 0;
    v156 = 0uLL;
    sub_207CA44DC((char **)&v156, ((char *)v149 - (_BYTE *)__p) >> 4);
    v18 = (CFIndex *)__p;
    v19 = v149;
    if (__p != v149)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            sub_207CF9014(*v18, (std::string *)&v139);
            v158 = v139;
            v159 = v140;
            v21 = (__n128 *)*((_QWORD *)&v156 + 1);
            if (*((_QWORD *)&v156 + 1) >= v157)
              break;
            v20 = v158;
            *(_QWORD *)(*((_QWORD *)&v156 + 1) + 16) = v159;
            *v21 = v20;
            *((_QWORD *)&v156 + 1) = (char *)v21 + 24;
            v18 += 2;
            if (v18 == v19)
              goto LABEL_28;
          }
          *((_QWORD *)&v156 + 1) = sub_207CA4674((void **)&v156, (uint64_t)&v158);
          if (SHIBYTE(v159) < 0)
            break;
          v18 += 2;
          if (v18 == v19)
            goto LABEL_28;
        }
        operator delete((void *)v158.n128_u64[0]);
        v18 += 2;
      }
      while (v18 != v19);
    }
LABEL_28:
    v22 = v156;
    v23 = v157;
    v24 = v144;
    v25 = *(_QWORD *)v144;
    if (*(_QWORD *)v144)
    {
      v137 = v156;
      v26 = *(_QWORD *)(v144 + 8);
      v27 = *(void **)v144;
      if (v26 != v25)
      {
        do
        {
          if (*(char *)(v26 - 1) < 0)
            operator delete(*(void **)(v26 - 24));
          v26 -= 24;
        }
        while (v26 != v25);
        v27 = *(void **)v24;
      }
      *(_QWORD *)(v24 + 8) = v25;
      operator delete(v27);
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = 0;
      v22 = v137;
    }
    *(_OWORD *)v24 = v22;
    *(_QWORD *)(v24 + 16) = v23;
    v29 = (CFIndex *)__p;
    if (__p)
    {
      v30 = v149;
      v31 = __p;
      if (v149 != __p)
      {
        do
        {
          v32 = (std::__shared_weak_count *)*(v30 - 1);
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v30 -= 2;
        }
        while (v30 != v29);
        v31 = __p;
      }
      v149 = v29;
      operator delete(v31);
    }
    sub_207CFB8C8(&v146, (uint64_t)&v150);
    *(_QWORD *)&v140 = 0;
    v139 = 0uLL;
    sub_207CFED24((uint64_t)&v139, ((char *)v147 - (_BYTE *)v146) >> 4);
    v35 = (unint64_t *)v146;
    v36 = v147;
    if (v146 != v147)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            v37 = *v35;
            v38 = v35[1];
            v158.n128_u64[0] = *v35;
            v158.n128_u64[1] = v38;
            if (v38)
            {
              v39 = (unint64_t *)(v38 + 8);
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
            }
            v41 = v139.n128_u64[1];
            if (v139.n128_u64[1] >= (unint64_t)v140)
              break;
            *(_QWORD *)v139.n128_u64[1] = v37;
            *(_QWORD *)(v41 + 8) = v158.n128_u64[1];
            v139.n128_u64[1] = v41 + 16;
            v35 += 2;
            if (v35 == v36)
              goto LABEL_65;
          }
          v42 = sub_207CFEE1C((char **)&v139, (uint64_t)&v158);
          v43 = (std::__shared_weak_count *)v158.n128_u64[1];
          v139.n128_u64[1] = (unint64_t)v42;
          if (v158.n128_u64[1])
          {
            v44 = (unint64_t *)(v158.n128_u64[1] + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
              break;
          }
          v35 += 2;
          if (v35 == v36)
            goto LABEL_65;
        }
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
        v35 += 2;
      }
      while (v35 != v36);
    }
LABEL_65:
    v46 = v139;
    v47 = v140;
    v48 = v144;
    v49 = v144 + 24;
    v50 = *(_QWORD *)(v144 + 24);
    if (v50)
    {
      v138 = v139;
      v51 = *(_QWORD *)(v144 + 32);
      v52 = *(void **)(v144 + 24);
      if (v51 != v50)
      {
        do
        {
          v53 = *(std::__shared_weak_count **)(v51 - 8);
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v53->__on_zero_shared)(v53, v46);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v51 -= 16;
        }
        while (v51 != v50);
        v52 = *(void **)v49;
      }
      *(_QWORD *)(v48 + 32) = v50;
      operator delete(v52);
      *(_QWORD *)v49 = 0;
      *(_QWORD *)(v49 + 8) = 0;
      *(_QWORD *)(v49 + 16) = 0;
      v46 = v138;
    }
    *(__n128 *)(v48 + 24) = v46;
    *(_QWORD *)(v48 + 40) = v47;
    v56 = (unint64_t *)v146;
    if (v146)
    {
      v57 = v147;
      v58 = v146;
      if (v147 != v146)
      {
        do
        {
          v59 = (std::__shared_weak_count *)*(v57 - 1);
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v57 -= 2;
        }
        while (v57 != v56);
        v58 = v146;
      }
      v147 = v56;
      operator delete(v58);
    }
    v17 = v153;
    *(_QWORD *)&v143[16] = (v154 - v153) >> 4;
    v28 = (char *)v150;
    if (!v150)
      goto LABEL_98;
    goto LABEL_88;
  }
  *(_QWORD *)v143 = 0;
  v28 = (char *)v150;
  if (v150)
  {
LABEL_88:
    v62 = v151;
    v63 = v28;
    if (v151 != v28)
    {
      do
      {
        v64 = (std::__shared_weak_count *)*((_QWORD *)v62 - 1);
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v62 -= 16;
      }
      while (v62 != v28);
      v63 = v150;
    }
    v151 = v28;
    operator delete(v63);
    v17 = v153;
  }
LABEL_98:
  if (v17)
  {
    v67 = v154;
    v68 = v17;
    if (v154 != v17)
    {
      do
      {
        v69 = (std::__shared_weak_count *)*((_QWORD *)v67 - 1);
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v67 -= 16;
      }
      while (v67 != v17);
      v68 = v153;
    }
    v154 = v17;
    operator delete(v68);
  }
  if (!*(_QWORD *)v143)
    goto LABEL_164;
  v72 = *(_QWORD *)v144;
  v73 = *(_QWORD *)(v144 + 8);
  v74 = *(_QWORD *)(v144 + 24);
  v75 = *(_QWORD *)(v144 + 32);
  v159 = 0;
  v158 = 0uLL;
  if (v72 == v73)
  {
    v77 = 0;
    v81 = 0;
  }
  else
  {
    if ((unint64_t)(0x5555555555555555 * ((v72 - v73) >> 3)) >= 0x666666666666667)
      sub_207CA420C();
    v158.n128_u64[0] = (unint64_t)operator new(0x5555555555555548 * ((v72 - v73) >> 3));
    v158.n128_u64[1] = v158.n128_u64[0];
    v159 = v158.n128_u64[0] + 0x5555555555555548 * ((v72 - v73) >> 3);
    *(_QWORD *)&v156 = v158.n128_u64[0];
    v153 = (char *)v158.n128_u64[0];
    v139.n128_u64[0] = (unint64_t)&v159;
    v139.n128_u64[1] = (unint64_t)&v153;
    *(_QWORD *)&v140 = &v156;
    BYTE8(v140) = 0;
    v76 = v72 + 24;
    v77 = v158.n128_u64[0];
    while (1)
    {
      if (*(char *)(v76 - 1) < 0)
      {
        sub_207CA40D8((_BYTE *)v77, *(void **)(v76 - 24), *(_QWORD *)(v76 - 16));
      }
      else
      {
        v78 = *(_OWORD *)(v76 - 24);
        *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 - 8);
        *(_OWORD *)v77 = v78;
      }
      sub_207CFBA9C((std::__shared_weak_count_vtbl **)(v77 + 24), v74);
      v74 += 16;
      v77 = v156 + 40;
      *(_QWORD *)&v156 = v156 + 40;
      v79 = v76 + 24;
      v80 = v76 == v73;
      v76 += 24;
      if (v80)
      {
        v76 = v79;
        if (v74 == v75)
          break;
      }
    }
    v81 = v158.n128_u64[0];
    v158.n128_u64[1] = v77;
  }
  v82 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77 - v81) >> 3));
  if (v77 == v81)
    v83 = 0;
  else
    v83 = v82;
  sub_207CFBBF4(v81, (const void **)v77, v83, 1);
  v85 = (void **)v158.n128_u64[1];
  v84 = (void **)v158.n128_u64[0];
  if (v158.n128_u64[0] == v158.n128_u64[1])
    goto LABEL_151;
  v86 = 0;
  do
  {
    v87 = *(_QWORD *)v144 + 24 * v86;
    if ((void **)v87 != v84)
    {
      v88 = *((_BYTE *)v84 + 23);
      if (*(char *)(v87 + 23) < 0)
      {
        if (v88 >= 0)
          v90 = v84;
        else
          v90 = *v84;
        if (v88 >= 0)
          v91 = *((unsigned __int8 *)v84 + 23);
        else
          v91 = (size_t)v84[1];
        sub_207CC2244((void **)v87, v90, v91);
      }
      else if ((*((_BYTE *)v84 + 23) & 0x80) != 0)
      {
        sub_207CC2180((_QWORD *)v87, *v84, (size_t)v84[1]);
      }
      else
      {
        v89 = *(_OWORD *)v84;
        *(_QWORD *)(v87 + 16) = v84[2];
        *(_OWORD *)v87 = v89;
      }
    }
    v92 = *(_QWORD *)(v144 + 24);
    sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v139, (uint64_t)(v84 + 3));
    v93 = v92 + 16 * v86;
    v94 = v139;
    v139 = 0uLL;
    v95 = *(std::__shared_weak_count **)(v93 + 8);
    *(__n128 *)v93 = v94;
    if (!v95)
      goto LABEL_143;
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      v98 = (std::__shared_weak_count *)v139.n128_u64[1];
      if (!v139.n128_u64[1])
        goto LABEL_126;
    }
    else
    {
LABEL_143:
      v98 = (std::__shared_weak_count *)v139.n128_u64[1];
      if (!v139.n128_u64[1])
        goto LABEL_126;
    }
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
LABEL_126:
    v84 += 5;
    ++v86;
  }
  while (v84 != v85);
  v84 = (void **)v158.n128_u64[0];
LABEL_151:
  if (v84)
  {
    v101 = v158.n128_i64[1];
    v102 = v84;
    if ((void **)v158.n128_u64[1] != v84)
    {
      do
      {
        while (1)
        {
          v104 = *(std::__shared_weak_count **)(v101 - 8);
          if (v104)
          {
            v105 = (unint64_t *)&v104->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v103 = (void **)(v101 - 40);
          if (*(char *)(v101 - 17) < 0)
            break;
          v101 -= 40;
          if (v103 == v84)
            goto LABEL_162;
        }
        operator delete(*v103);
        v101 -= 40;
      }
      while (v103 != v84);
LABEL_162:
      v102 = (void **)v158.n128_u64[0];
    }
    v158.n128_u64[1] = (unint64_t)v84;
    operator delete(v102);
  }
LABEL_164:
  v142 = 0;
  v140 = 0u;
  v141 = 0u;
  v139 = 0u;
  v108 = *(CFDictionaryRef *)a1;
  v107 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v107)
    goto LABEL_169;
  v109 = (unint64_t *)&v107->__shared_owners_;
  do
    v110 = __ldxr(v109);
  while (__stxr(v110 + 1, v109));
  do
    v111 = __ldaxr(v109);
  while (__stlxr(v111 - 1, v109));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
    std::__shared_weak_count::__release_weak(v107);
    if (!v108)
      goto LABEL_173;
LABEL_170:
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
    v114 = v139.n128_u64[1];
    v113 = v139.n128_u64[0];
    v116 = *((_QWORD *)&v140 + 1);
    v115 = v140;
    v117 = v141;
    if ((_QWORD)v141)
    {
LABEL_174:
      v118 = (unint64_t *)(v117 + 8);
      do
        v119 = __ldxr(v118);
      while (__stxr(v119 + 1, v118));
    }
  }
  else
  {
LABEL_169:
    if (v108)
      goto LABEL_170;
LABEL_173:
    Count = 0;
    v114 = v139.n128_u64[1];
    v113 = v139.n128_u64[0];
    v116 = *((_QWORD *)&v140 + 1);
    v115 = v140;
    v117 = v141;
    if ((_QWORD)v141)
      goto LABEL_174;
  }
  v120 = *((_QWORD *)&v141 + 1);
  v121 = v142;
  if (v142)
  {
    v122 = (unint64_t *)&v142->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  v124 = v114 + Count;
  *(_OWORD *)a2 = *(_OWORD *)v143;
  if (v124 >= v115 || v124 <= -1)
    v113 = 0;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v143[16];
  *(_OWORD *)(a2 + 24) = v144;
  v144 = 0uLL;
  *(_OWORD *)(a2 + 40) = v145;
  v145 = 0uLL;
  *(_QWORD *)(a2 + 56) = v113;
  *(_QWORD *)(a2 + 64) = v124;
  *(_QWORD *)(a2 + 72) = v115;
  *(_QWORD *)(a2 + 80) = v116;
  *(_QWORD *)(a2 + 88) = v117;
  *(_QWORD *)(a2 + 96) = v120;
  *(_QWORD *)(a2 + 104) = v121;
  if (v121)
  {
    v126 = (unint64_t *)&v121->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v128 = (std::__shared_weak_count *)v141;
  if ((_QWORD)v141)
  {
    v129 = (unint64_t *)(v141 + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
  if (*((_QWORD *)&v144 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_207CFB424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  sub_207CF9CCC((void ***)(v31 - 112));
  sub_207CFA438((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ***sub_207CFB754(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_207CA420C();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_207CA3AB8();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

_QWORD *sub_207CFB8C8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_207CA420C();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_207CFB970(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207CFB9EC(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ****)(a1 + 8);
    v2 = *(void ****)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        while (1)
        {
          v7 = (std::__shared_weak_count *)*(v4 - 1);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v6 = v4 - 5;
          if (*((char *)v4 - 17) < 0)
            break;
          v4 -= 5;
          if (v6 == v5)
            return a1;
        }
        operator delete(*v6);
        v4 -= 5;
      }
      while (v6 != v5);
    }
  }
  return a1;
}

std::__shared_weak_count_vtbl **sub_207CFBA9C(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072660;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207CFBBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CFBBC0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207CFBBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CFBBF4(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  unint64_t i;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  const void *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void **v34;
  void *v35;
  unint64_t v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  const void **k;
  int v45;
  const void *v46;
  size_t v47;
  size_t v48;
  int v49;
  BOOL v50;
  int v51;
  const void *v52;
  size_t v53;
  size_t v54;
  int v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void **v68;
  void *v69;
  unint64_t v70;
  int v71;
  const void *v72;
  void *v73;
  size_t v74;
  int v75;
  int v76;
  const void *v77;
  void *v78;
  size_t v79;
  int v80;
  void **v81;
  __int128 v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  __int128 v96;
  void **v97;
  void *v98;
  size_t v99;
  const void **v100;
  const void *v101;
  const void **v102;
  size_t v103;
  size_t v104;
  int v105;
  int v106;
  const void *v107;
  size_t v108;
  size_t v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  const void *v114;
  size_t v115;
  size_t v116;
  int v117;
  BOOL v118;
  const void **j;
  const void **v120;
  const void **v121;
  size_t v122;
  int v123;
  BOOL v124;
  void **v125;
  __int128 v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void **v150;
  void *v151;
  unint64_t v152;
  int v153;
  const void *v154;
  void *v155;
  size_t v156;
  int v157;
  int v158;
  const void **v159;
  void *v160;
  size_t v161;
  int v162;
  const void **v163;
  int v164;
  const void **v165;
  size_t v166;
  int v167;
  const void *v168;
  size_t v169;
  size_t v170;
  int v171;
  const void **v172;
  const void *v173;
  uint64_t v174;
  const void **v175;
  int v176;
  const void *v177;
  size_t v178;
  int v179;
  const void *v180;
  size_t v181;
  size_t v182;
  int v183;
  BOOL v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void **v193;
  void *v194;
  int v195;
  const void *v196;
  size_t v197;
  size_t v198;
  int v199;
  BOOL v200;
  __int128 v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  int64_t v209;
  int64_t v210;
  int64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  const void *v216;
  size_t v217;
  int v218;
  const void *v219;
  size_t v220;
  size_t v221;
  int v222;
  int64_t v223;
  BOOL v224;
  const void **v225;
  int v226;
  const void *v227;
  size_t v228;
  int v229;
  const void *v230;
  size_t v231;
  size_t v232;
  int v233;
  BOOL v234;
  char v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  const void *v239;
  size_t v240;
  void **v241;
  void *v242;
  size_t v243;
  int v244;
  __int128 v245;
  __int128 v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  const void *v253;
  size_t v254;
  int v255;
  const void *v256;
  size_t v257;
  size_t v258;
  int v259;
  BOOL v260;
  __int128 v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  int64_t v269;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  const void *v278;
  size_t v279;
  int v280;
  const void *v281;
  size_t v282;
  size_t v283;
  int v284;
  __int128 v285;
  _QWORD *v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  BOOL v291;
  void **v292;
  int v293;
  __int128 v294;
  __int128 v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  const void **v299;
  const void *v300;
  const void **v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  int v308;
  const void *v309;
  size_t v310;
  int v311;
  const void *v312;
  size_t v313;
  size_t v314;
  int v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  BOOL v320;
  __int128 v321;
  unint64_t v322;
  __int128 v323;
  __int128 v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  int v328;
  const void *v329;
  size_t v330;
  void **v331;
  void *v332;
  size_t v333;
  int v334;
  BOOL v335;
  __int128 v336;
  __int128 v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  const void *v344;
  const void **v345;
  int v346;
  const void *v347;
  size_t v348;
  int v349;
  const void *v350;
  size_t v351;
  size_t v352;
  int v353;
  BOOL v354;
  __int128 v355;
  uint64_t v356;
  void **v357;
  void *v358;
  int v359;
  const void **v360;
  void *v361;
  size_t v362;
  int v363;
  const void **v364;
  __int128 v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  BOOL v369;
  __int128 v370;
  __int128 v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  std::__shared_weak_count *v383;
  unint64_t *p_shared_owners;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  const void **v389;
  const void **v390;
  const void *v392;
  const void **v393;
  const void *v394;
  int64_t v396;
  const void *v397;
  const void **v398;
  const void **v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  char v404;
  __int128 v405;
  void *__p[2];
  const void *v407;
  __int128 v408;
  __int128 v409;
  const void *v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v393 = a2 - 5;
  v389 = a2 - 15;
  v390 = a2 - 10;
  i = a1;
  v398 = a2;
  while (2)
  {
    a1 = i;
    v7 = (uint64_t)a2 - i;
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 3);
    switch(v8)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v163 = a2 - 5;
        v164 = *((char *)a2 - 17);
        if (v164 >= 0)
          v165 = a2 - 5;
        else
          v165 = (const void **)*(a2 - 5);
        if (v164 >= 0)
          v166 = *((unsigned __int8 *)a2 - 17);
        else
          v166 = (size_t)*(a2 - 4);
        v167 = *(char *)(a1 + 23);
        if (v167 >= 0)
          v168 = (const void *)a1;
        else
          v168 = *(const void **)a1;
        if (v167 >= 0)
          v169 = *(unsigned __int8 *)(a1 + 23);
        else
          v169 = *(_QWORD *)(a1 + 8);
        if (v169 >= v166)
          v170 = v166;
        else
          v170 = v169;
        v171 = memcmp(v165, v168, v170);
        if (v171)
        {
          v172 = v398;
          if ((v171 & 0x80000000) == 0)
            return;
        }
        else if (v166 == v169)
        {
          v172 = v398;
          if ((unint64_t)*(v398 - 2) >= *(_QWORD *)(a1 + 24))
            return;
        }
        else
        {
          v172 = v398;
          if (v166 >= v169)
            return;
        }
        v378 = *(_OWORD *)a1;
        v407 = *(const void **)(a1 + 16);
        *(_OWORD *)__p = v378;
        v379 = *(_OWORD *)v163;
        *(_QWORD *)(a1 + 16) = v163[2];
        *(_OWORD *)a1 = v379;
        v380 = *(_OWORD *)__p;
        v163[2] = v407;
        *(_OWORD *)v163 = v380;
        v381 = *(_OWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v382 = *((_OWORD *)v172 - 1);
        *(v172 - 2) = 0;
        *(v172 - 1) = 0;
        v383 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v382;
        if (v383)
        {
          p_shared_owners = (unint64_t *)&v383->__shared_owners_;
          do
            v385 = __ldaxr(p_shared_owners);
          while (__stlxr(v385 - 1, p_shared_owners));
          if (!v385)
          {
            v405 = v381;
            ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
            std::__shared_weak_count::__release_weak(v383);
            v381 = v405;
          }
        }
        v386 = (std::__shared_weak_count *)*(v398 - 1);
        *((_OWORD *)v398 - 1) = v381;
        if (v386)
        {
          v387 = (unint64_t *)&v386->__shared_owners_;
          do
            v388 = __ldaxr(v387);
          while (__stlxr(v388 - 1, v387));
          if (!v388)
          {
            ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
            std::__shared_weak_count::__release_weak(v386);
          }
        }
        return;
      case 3uLL:
        sub_207CFD934((const void **)a1, (const void **)(a1 + 40), v393);
        return;
      case 4uLL:
        sub_207CFE340((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), v393);
        return;
      case 5uLL:
        sub_207CFE6D0(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), v393);
        return;
      default:
        if (v7 <= 959)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return;
            v173 = (const void *)(a1 + 40);
            if ((const void **)(a1 + 40) == a2)
              return;
            v174 = a1;
            while (1)
            {
              v175 = (const void **)v174;
              v174 = (uint64_t)v173;
              v176 = *((char *)v175 + 63);
              if (v176 >= 0)
                v177 = v173;
              else
                v177 = v175[5];
              if (v176 >= 0)
                v178 = *((unsigned __int8 *)v175 + 63);
              else
                v178 = (size_t)v175[6];
              v179 = *((char *)v175 + 23);
              if (v179 >= 0)
                v180 = v175;
              else
                v180 = *v175;
              if (v179 >= 0)
                v181 = *((unsigned __int8 *)v175 + 23);
              else
                v181 = (size_t)v175[1];
              if (v181 >= v178)
                v182 = v178;
              else
                v182 = v181;
              v183 = memcmp(v177, v180, v182);
              if (v183)
              {
                if ((v183 & 0x80000000) == 0)
                  goto LABEL_366;
              }
              else
              {
                v184 = v178 >= v181;
                if (v178 == v181)
                  v184 = v175[8] >= v175[3];
                if (v184)
                  goto LABEL_366;
              }
              v185 = *(_OWORD *)v174;
              v407 = *(const void **)(v174 + 16);
              *(_OWORD *)__p = v185;
              *(_QWORD *)(v174 + 8) = 0;
              *(_QWORD *)(v174 + 16) = 0;
              *(_QWORD *)v174 = 0;
              v408 = *((_OWORD *)v175 + 4);
              v175[8] = 0;
              v175[9] = 0;
              v186 = v174;
              while (1)
              {
                v187 = (uint64_t)v175;
                if (*(char *)(v186 + 23) < 0)
                  operator delete(*(void **)v186);
                *(_OWORD *)v186 = *(_OWORD *)v175;
                *(_QWORD *)(v186 + 16) = v175[2];
                *((_BYTE *)v175 + 23) = 0;
                *(_BYTE *)v175 = 0;
                v188 = v175 + 3;
                v189 = *(_OWORD *)(v175 + 3);
                v175[4] = 0;
                v175[3] = 0;
                v190 = *(std::__shared_weak_count **)(v186 + 32);
                *(_OWORD *)(v186 + 24) = v189;
                if (v190)
                {
                  v191 = (unint64_t *)&v190->__shared_owners_;
                  do
                    v192 = __ldaxr(v191);
                  while (__stlxr(v192 - 1, v191));
                  if (!v192)
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v190);
                  }
                }
                if (v187 == a1)
                  break;
                v175 = (const void **)(v187 - 40);
                if (SHIBYTE(v407) >= 0)
                  v193 = __p;
                else
                  v193 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v194 = (void *)HIBYTE(v407);
                else
                  v194 = __p[1];
                v195 = *(char *)(v187 - 17);
                if (v195 >= 0)
                  v196 = (const void *)(v187 - 40);
                else
                  v196 = *(const void **)(v187 - 40);
                if (v195 >= 0)
                  v197 = *(unsigned __int8 *)(v187 - 17);
                else
                  v197 = *(_QWORD *)(v187 - 32);
                if (v197 >= (unint64_t)v194)
                  v198 = (size_t)v194;
                else
                  v198 = v197;
                v199 = memcmp(v193, v196, v198);
                if (v199)
                {
                  v186 = v187;
                  if ((v199 & 0x80000000) == 0)
                    goto LABEL_421;
                }
                else
                {
                  v200 = (unint64_t)v194 >= v197;
                  if (v194 == (void *)v197)
                  {
                    v186 = v187;
                    if ((unint64_t)v408 >= *(_QWORD *)(v187 - 16))
                      goto LABEL_421;
                  }
                  else
                  {
                    v186 = v187;
                    if (v200)
                      goto LABEL_421;
                  }
                }
              }
              v187 = a1;
LABEL_421:
              if (*(char *)(v187 + 23) < 0)
                operator delete(*(void **)v187);
              v201 = *(_OWORD *)__p;
              *(_QWORD *)(v187 + 16) = v407;
              *(_OWORD *)v187 = v201;
              HIBYTE(v407) = 0;
              LOBYTE(__p[0]) = 0;
              v202 = v408;
              v408 = 0uLL;
              *v188 = v202;
              v203 = *(std::__shared_weak_count **)(v187 + 32);
              *(_QWORD *)(v187 + 32) = *((_QWORD *)&v202 + 1);
              if (v203)
              {
                v204 = (unint64_t *)&v203->__shared_owners_;
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              v206 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              if (*((_QWORD *)&v408 + 1))
              {
                v207 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                }
              }
              if (SHIBYTE(v407) < 0)
                operator delete(__p[0]);
LABEL_366:
              v173 = (const void *)(v174 + 40);
              if ((const void **)(v174 + 40) == v398)
                return;
            }
          }
          if ((const void **)a1 == a2)
            return;
          v344 = (const void *)(a1 + 40);
          if ((const void **)(a1 + 40) == a2)
            return;
          while (1)
          {
            v345 = (const void **)a1;
            a1 = (uint64_t)v344;
            v346 = *((char *)v345 + 63);
            if (v346 >= 0)
              v347 = v344;
            else
              v347 = v345[5];
            if (v346 >= 0)
              v348 = *((unsigned __int8 *)v345 + 63);
            else
              v348 = (size_t)v345[6];
            v349 = *((char *)v345 + 23);
            if (v349 >= 0)
              v350 = v345;
            else
              v350 = *v345;
            if (v349 >= 0)
              v351 = *((unsigned __int8 *)v345 + 23);
            else
              v351 = (size_t)v345[1];
            if (v351 >= v348)
              v352 = v348;
            else
              v352 = v351;
            v353 = memcmp(v347, v350, v352);
            if (v353)
            {
              if ((v353 & 0x80000000) == 0)
                goto LABEL_688;
            }
            else
            {
              v354 = v348 >= v351;
              if (v348 == v351)
                v354 = v345[8] >= v345[3];
              if (v354)
                goto LABEL_688;
            }
            v355 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v355;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v408 = *((_OWORD *)v345 + 4);
            v345[8] = 0;
            v345[9] = 0;
            v356 = a1;
            do
            {
              while (1)
              {
                while (1)
                {
                  v364 = v345;
                  if (*(char *)(v356 + 23) < 0)
                    operator delete(*(void **)v356);
                  *(_OWORD *)v356 = *(_OWORD *)v345;
                  *(_QWORD *)(v356 + 16) = v345[2];
                  *((_BYTE *)v345 + 23) = 0;
                  *(_BYTE *)v345 = 0;
                  v365 = *(_OWORD *)(v345 + 3);
                  v345[3] = 0;
                  v345[4] = 0;
                  v366 = *(std::__shared_weak_count **)(v356 + 32);
                  *(_OWORD *)(v356 + 24) = v365;
                  if (v366)
                  {
                    v367 = (unint64_t *)&v366->__shared_owners_;
                    do
                      v368 = __ldaxr(v367);
                    while (__stlxr(v368 - 1, v367));
                    if (!v368)
                    {
                      ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
                      std::__shared_weak_count::__release_weak(v366);
                    }
                  }
                  v345 = v364 - 5;
                  v357 = SHIBYTE(v407) >= 0 ? __p : (void **)__p[0];
                  v358 = SHIBYTE(v407) >= 0 ? (void *)HIBYTE(v407) : __p[1];
                  v359 = *((char *)v364 - 17);
                  v360 = v359 >= 0 ? v364 - 5 : (const void **)*(v364 - 5);
                  v361 = v359 >= 0 ? (void *)*((unsigned __int8 *)v364 - 17) : (void *)*(v364 - 4);
                  v362 = (size_t)(v361 >= v358 ? v358 : v361);
                  v363 = memcmp(v357, v360, v362);
                  if (!v363)
                    break;
                  v356 = (uint64_t)v364;
                  if ((v363 & 0x80000000) == 0)
                    goto LABEL_740;
                }
                v369 = v358 >= v361;
                if (v358 != v361)
                  break;
                v356 = (uint64_t)v364;
                if ((unint64_t)v408 >= (unint64_t)*(v364 - 2))
                  goto LABEL_740;
              }
              v356 = (uint64_t)v364;
            }
            while (!v369);
LABEL_740:
            if (*((char *)v364 + 23) < 0)
              operator delete((void *)*v364);
            v370 = *(_OWORD *)__p;
            v364[2] = v407;
            *(_OWORD *)v364 = v370;
            HIBYTE(v407) = 0;
            LOBYTE(__p[0]) = 0;
            v371 = v408;
            v408 = 0uLL;
            v372 = (std::__shared_weak_count *)v364[4];
            *(_OWORD *)(v364 + 3) = v371;
            if (v372)
            {
              v373 = (unint64_t *)&v372->__shared_owners_;
              do
                v374 = __ldaxr(v373);
              while (__stlxr(v374 - 1, v373));
              if (!v374)
              {
                ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
                std::__shared_weak_count::__release_weak(v372);
              }
            }
            v375 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v376 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v377 = __ldaxr(v376);
              while (__stlxr(v377 - 1, v376));
              if (!v377)
              {
                ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                std::__shared_weak_count::__release_weak(v375);
              }
            }
            if (SHIBYTE(v407) < 0)
              operator delete(__p[0]);
LABEL_688:
            v344 = (const void *)(a1 + 40);
            if ((const void **)(a1 + 40) == v398)
              return;
          }
        }
        if (a3)
        {
          v9 = v8 >> 1;
          v10 = a1 + 40 * (v8 >> 1);
          if ((unint64_t)v7 < 0x1401)
          {
            sub_207CFD934((const void **)v10, (const void **)a1, v393);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_43;
          }
          else
          {
            sub_207CFD934((const void **)a1, (const void **)v10, v393);
            v11 = 40 * v9;
            sub_207CFD934((const void **)(a1 + 40), (const void **)(v11 + a1 - 40), v390);
            sub_207CFD934((const void **)(a1 + 80), (const void **)(a1 + 40 + v11), v389);
            sub_207CFD934((const void **)(v11 + a1 - 40), (const void **)v10, (const void **)(a1 + 40 + v11));
            v12 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v12;
            v13 = *(_QWORD *)(v10 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v10;
            v14 = *(_OWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 16) = v13;
            *(_QWORD *)(a1 + 24) = 0;
            v15 = v407;
            *(_OWORD *)v10 = *(_OWORD *)__p;
            *(_QWORD *)(a1 + 32) = 0;
            v16 = *(_OWORD *)(v10 + 24);
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 32) = 0;
            *(_QWORD *)(v10 + 16) = v15;
            v17 = *(std::__shared_weak_count **)(a1 + 32);
            *(_OWORD *)(a1 + 24) = v16;
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                v400 = v14;
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
                v14 = v400;
              }
            }
            v20 = *(std::__shared_weak_count **)(v10 + 32);
            *(_OWORD *)(v10 + 24) = v14;
            if (!v20)
              goto LABEL_16;
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_43;
            }
            else
            {
LABEL_16:
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_43;
            }
          }
          v23 = *(char *)(a1 - 17);
          if (v23 >= 0)
            v24 = (const void *)(a1 - 40);
          else
            v24 = *(const void **)(a1 - 40);
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(a1 - 17);
          else
            v25 = *(_QWORD *)(a1 - 32);
          v26 = *(char *)(a1 + 23);
          if (v26 >= 0)
            v27 = (const void *)a1;
          else
            v27 = *(const void **)a1;
          if (v26 >= 0)
            v28 = *(unsigned __int8 *)(a1 + 23);
          else
            v28 = *(_QWORD *)(a1 + 8);
          if (v28 >= v25)
            v29 = v25;
          else
            v29 = v28;
          v30 = memcmp(v24, v27, v29);
          if (v30)
          {
            if (v30 < 0)
              goto LABEL_43;
            goto LABEL_186;
          }
          if (v25 == v28)
          {
            if (*(_QWORD *)(a1 - 16) < *(_QWORD *)(a1 + 24))
              goto LABEL_43;
LABEL_186:
            v96 = *(_OWORD *)a1;
            v407 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v96;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v402 = *(_OWORD *)(a1 + 24);
            v408 = v402;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            if (SHIBYTE(v407) >= 0)
              v97 = __p;
            else
              v97 = (void **)__p[0];
            if (SHIBYTE(v407) >= 0)
              v98 = (void *)HIBYTE(v407);
            else
              v98 = __p[1];
            v99 = *((unsigned __int8 *)v398 - 17);
            v100 = (const void **)*(v398 - 5);
            v101 = *(v398 - 4);
            if ((v99 & 0x80u) == 0)
              v102 = v393;
            else
              v102 = (const void **)*(v398 - 5);
            if ((v99 & 0x80u) == 0)
              v103 = *((unsigned __int8 *)v398 - 17);
            else
              v103 = (size_t)*(v398 - 4);
            if (v103 >= (unint64_t)v98)
              v104 = (size_t)v98;
            else
              v104 = v103;
            v105 = memcmp(v97, v102, v104);
            if (v105)
            {
              if (v105 < 0)
                goto LABEL_225;
            }
            else
            {
              v112 = (unint64_t)v98 >= v103;
              if (v98 == (void *)v103)
                v112 = (unint64_t)v402 >= (unint64_t)*(v398 - 2);
              if (!v112)
              {
LABEL_225:
                for (i = a1 + 40; ; i += 40)
                {
                  v113 = *(char *)(i + 23);
                  if (v113 >= 0)
                    v114 = (const void *)i;
                  else
                    v114 = *(const void **)i;
                  if (v113 >= 0)
                    v115 = *(unsigned __int8 *)(i + 23);
                  else
                    v115 = *(_QWORD *)(i + 8);
                  if (v115 >= (unint64_t)v98)
                    v116 = (size_t)v98;
                  else
                    v116 = v115;
                  v117 = memcmp(v97, v114, v116);
                  if (v117)
                  {
                    if (v117 < 0)
                      goto LABEL_243;
                  }
                  else
                  {
                    v118 = (unint64_t)v98 >= v115;
                    if (v98 == (void *)v115)
                      v118 = (unint64_t)v402 >= *(_QWORD *)(i + 24);
                    if (!v118)
                      goto LABEL_243;
                  }
                }
              }
            }
            for (i = a1 + 40; i < (unint64_t)v398; i += 40)
            {
              v106 = *(char *)(i + 23);
              if (v106 >= 0)
                v107 = (const void *)i;
              else
                v107 = *(const void **)i;
              if (v106 >= 0)
                v108 = *(unsigned __int8 *)(i + 23);
              else
                v108 = *(_QWORD *)(i + 8);
              if (v108 >= (unint64_t)v98)
                v109 = (size_t)v98;
              else
                v109 = v108;
              v110 = memcmp(v97, v107, v109);
              if (v110)
              {
                if (v110 < 0)
                  break;
              }
              else
              {
                v111 = (unint64_t)v98 >= v108;
                if (v98 == (void *)v108)
                  v111 = (unint64_t)v402 >= *(_QWORD *)(i + 24);
                if (!v111)
                  break;
              }
            }
LABEL_243:
            j = v398;
            if (i < (unint64_t)v398)
            {
              for (j = v393; ; v101 = j[1])
              {
                if ((v99 & 0x80u) == 0)
                  v121 = j;
                else
                  v121 = v100;
                if ((v99 & 0x80u) != 0)
                  v99 = (size_t)v101;
                if (v99 >= (unint64_t)v98)
                  v122 = (size_t)v98;
                else
                  v122 = v99;
                v123 = memcmp(v97, v121, v122);
                if (v123)
                {
                  if ((v123 & 0x80000000) == 0)
                    break;
                }
                else
                {
                  v124 = (unint64_t)v98 >= v99;
                  if (v98 == (void *)v99)
                    v124 = (unint64_t)v402 >= (unint64_t)j[3];
                  if (v124)
                    break;
                }
                v120 = (const void **)*(j - 5);
                j -= 5;
                v100 = v120;
                v99 = *((unsigned __int8 *)j + 23);
              }
            }
            if (i < (unint64_t)j)
            {
              do
              {
                v139 = *(_OWORD *)i;
                v410 = *(const void **)(i + 16);
                v409 = v139;
                v140 = *(_OWORD *)j;
                *(_QWORD *)(i + 16) = j[2];
                *(_OWORD *)i = v140;
                v141 = v409;
                j[2] = v410;
                *(_OWORD *)j = v141;
                v142 = *(_OWORD *)(i + 24);
                *(_QWORD *)(i + 24) = 0;
                *(_QWORD *)(i + 32) = 0;
                v143 = *(_OWORD *)(j + 3);
                j[3] = 0;
                j[4] = 0;
                v144 = *(std::__shared_weak_count **)(i + 32);
                *(_OWORD *)(i + 24) = v143;
                if (v144)
                {
                  v145 = (unint64_t *)&v144->__shared_owners_;
                  do
                    v146 = __ldaxr(v145);
                  while (__stlxr(v146 - 1, v145));
                  if (!v146)
                  {
                    v403 = v142;
                    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                    std::__shared_weak_count::__release_weak(v144);
                    v142 = v403;
                  }
                }
                v147 = (std::__shared_weak_count *)j[4];
                *(_OWORD *)(j + 3) = v142;
                if (v147)
                {
                  v148 = (unint64_t *)&v147->__shared_owners_;
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 - 1, v148));
                  if (!v149)
                  {
                    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                    std::__shared_weak_count::__release_weak(v147);
                  }
                }
                if (SHIBYTE(v407) >= 0)
                  v150 = __p;
                else
                  v150 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v151 = (void *)HIBYTE(v407);
                else
                  v151 = __p[1];
                v152 = v408;
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      i += 40;
                      v153 = *(char *)(i + 23);
                      v154 = v153 >= 0 ? (const void *)i : *(const void **)i;
                      v155 = v153 >= 0 ? (void *)*(unsigned __int8 *)(i + 23) : *(void **)(i + 8);
                      v156 = (size_t)(v155 >= v151 ? v151 : v155);
                      v157 = memcmp(v150, v154, v156);
                      if (!v157)
                        break;
                      if (v157 < 0)
                        goto LABEL_320;
                    }
                    if (v151 != v155)
                      break;
                    if (v152 < *(_QWORD *)(i + 24))
                      goto LABEL_320;
                  }
                }
                while (v151 >= v155);
                do
                {
                  while (1)
                  {
LABEL_320:
                    while (1)
                    {
                      j -= 5;
                      v158 = *((char *)j + 23);
                      v159 = v158 >= 0 ? j : (const void **)*j;
                      v160 = v158 >= 0 ? (void *)*((unsigned __int8 *)j + 23) : (void *)j[1];
                      v161 = (size_t)(v160 >= v151 ? v151 : v160);
                      v162 = memcmp(v150, v159, v161);
                      if (!v162)
                        break;
                      if ((v162 & 0x80000000) == 0)
                        goto LABEL_285;
                    }
                    if (v151 != v160)
                      break;
                    if (v152 >= (unint64_t)j[3])
                      goto LABEL_285;
                  }
                }
                while (v151 < v160);
LABEL_285:
                a2 = v398;
              }
              while (i < (unint64_t)j);
            }
            else
            {
              a2 = v398;
            }
            v125 = (void **)(i - 40);
            if (i - 40 != a1)
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v126 = *(_OWORD *)v125;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 24);
              *(_OWORD *)a1 = v126;
              *(_BYTE *)(i - 17) = 0;
              *(_BYTE *)(i - 40) = 0;
              v127 = *(_OWORD *)(i - 16);
              *(_QWORD *)(i - 16) = 0;
              *(_QWORD *)(i - 8) = 0;
              v128 = *(std::__shared_weak_count **)(a1 + 32);
              *(_OWORD *)(a1 + 24) = v127;
              if (v128)
              {
                v129 = (unint64_t *)&v128->__shared_owners_;
                do
                  v130 = __ldaxr(v129);
                while (__stlxr(v130 - 1, v129));
                if (!v130)
                {
                  ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                  std::__shared_weak_count::__release_weak(v128);
                }
              }
            }
            if (*(char *)(i - 17) < 0)
              operator delete(*v125);
            v131 = *(_OWORD *)__p;
            *(_QWORD *)(i - 24) = v407;
            *(_OWORD *)v125 = v131;
            HIBYTE(v407) = 0;
            LOBYTE(__p[0]) = 0;
            v132 = v408;
            v408 = 0uLL;
            v133 = *(std::__shared_weak_count **)(i - 8);
            *(_OWORD *)(i - 16) = v132;
            if (v133)
            {
              v134 = (unint64_t *)&v133->__shared_owners_;
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 - 1, v134));
              if (!v135)
              {
                ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                std::__shared_weak_count::__release_weak(v133);
              }
            }
            v136 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v137 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            if (SHIBYTE(v407) < 0)
              operator delete(__p[0]);
            a4 = 0;
            continue;
          }
          if (v25 >= v28)
            goto LABEL_186;
LABEL_43:
          v31 = 0;
          v32 = *(_OWORD *)a1;
          v407 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v32;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v33 = *(_OWORD *)(a1 + 24);
          v408 = v33;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          if (SHIBYTE(v407) >= 0)
            v34 = __p;
          else
            v34 = (void **)__p[0];
          if (SHIBYTE(v407) >= 0)
            v35 = (void *)HIBYTE(v407);
          else
            v35 = __p[1];
          v36 = v33;
          while (2)
          {
            v37 = *(char *)(a1 + v31 + 63);
            if (v37 >= 0)
              v38 = (const void *)(a1 + v31 + 40);
            else
              v38 = *(const void **)(a1 + v31 + 40);
            if (v37 >= 0)
              v39 = *(unsigned __int8 *)(a1 + v31 + 63);
            else
              v39 = *(_QWORD *)(a1 + v31 + 48);
            if ((unint64_t)v35 >= v39)
              v40 = v39;
            else
              v40 = (size_t)v35;
            v41 = memcmp(v38, v34, v40);
            if (v41)
            {
              if ((v41 & 0x80000000) == 0)
                break;
              goto LABEL_51;
            }
            v42 = v39 >= (unint64_t)v35;
            if ((void *)v39 == v35)
              v42 = *(_QWORD *)(a1 + v31 + 64) >= v36;
            if (!v42)
            {
LABEL_51:
              v31 += 40;
              continue;
            }
            break;
          }
          v43 = a1 + v31 + 40;
          k = v393;
          if (v31)
          {
            while (1)
            {
              v45 = *((char *)k + 23);
              if (v45 >= 0)
                v46 = k;
              else
                v46 = *k;
              if (v45 >= 0)
                v47 = *((unsigned __int8 *)k + 23);
              else
                v47 = (size_t)k[1];
              if ((unint64_t)v35 >= v47)
                v48 = v47;
              else
                v48 = (size_t)v35;
              v49 = memcmp(v46, v34, v48);
              if (v49)
              {
                if (v49 < 0)
                  goto LABEL_106;
              }
              else
              {
                v50 = v47 >= (unint64_t)v35;
                if ((void *)v47 == v35)
                  v50 = (unint64_t)k[3] >= v36;
                if (!v50)
                  goto LABEL_106;
              }
              k -= 5;
            }
          }
          k = v398;
          if (v43 < (unint64_t)v398)
          {
            for (k = v393; ; k -= 5)
            {
              v51 = *((char *)k + 23);
              if (v51 >= 0)
                v52 = k;
              else
                v52 = *k;
              if (v51 >= 0)
                v53 = *((unsigned __int8 *)k + 23);
              else
                v53 = (size_t)k[1];
              if ((unint64_t)v35 >= v53)
                v54 = v53;
              else
                v54 = (size_t)v35;
              v55 = memcmp(v52, v34, v54);
              if (v55)
              {
                if (v43 >= (unint64_t)k || v55 < 0)
                  break;
              }
              else if ((void *)v53 == v35)
              {
                if (v43 >= (unint64_t)k || (unint64_t)k[3] < v36)
                  break;
              }
              else if (v43 >= (unint64_t)k || v53 < (unint64_t)v35)
              {
                break;
              }
            }
          }
LABEL_106:
          i = v43;
          if (v43 < (unint64_t)k)
          {
            v56 = (unint64_t)k;
            do
            {
              v57 = *(_OWORD *)i;
              v410 = *(const void **)(i + 16);
              v409 = v57;
              v58 = *(_OWORD *)v56;
              *(_QWORD *)(i + 16) = *(_QWORD *)(v56 + 16);
              *(_OWORD *)i = v58;
              v59 = v409;
              *(_QWORD *)(v56 + 16) = v410;
              *(_OWORD *)v56 = v59;
              v60 = *(_OWORD *)(i + 24);
              *(_QWORD *)(i + 24) = 0;
              *(_QWORD *)(i + 32) = 0;
              v61 = *(_OWORD *)(v56 + 24);
              *(_QWORD *)(v56 + 24) = 0;
              *(_QWORD *)(v56 + 32) = 0;
              v62 = *(std::__shared_weak_count **)(i + 32);
              *(_OWORD *)(i + 24) = v61;
              if (!v62)
                goto LABEL_113;
              v63 = (unint64_t *)&v62->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                v401 = v60;
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
                v65 = *(std::__shared_weak_count **)(v56 + 32);
                *(_OWORD *)(v56 + 24) = v401;
                if (v65)
                {
LABEL_114:
                  v66 = (unint64_t *)&v65->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
              }
              else
              {
LABEL_113:
                v65 = *(std::__shared_weak_count **)(v56 + 32);
                *(_OWORD *)(v56 + 24) = v60;
                if (v65)
                  goto LABEL_114;
              }
              if (SHIBYTE(v407) >= 0)
                v68 = __p;
              else
                v68 = (void **)__p[0];
              if (SHIBYTE(v407) >= 0)
                v69 = (void *)HIBYTE(v407);
              else
                v69 = __p[1];
              v70 = v408;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    i += 40;
                    v71 = *(char *)(i + 23);
                    v72 = v71 >= 0 ? (const void *)i : *(const void **)i;
                    v73 = v71 >= 0 ? (void *)*(unsigned __int8 *)(i + 23) : *(void **)(i + 8);
                    v74 = (size_t)(v69 >= v73 ? v73 : v69);
                    v75 = memcmp(v72, v68, v74);
                    if (!v75)
                      break;
                    if ((v75 & 0x80000000) == 0)
                      goto LABEL_143;
                  }
                  if (v73 != v69)
                    break;
                  if (*(_QWORD *)(i + 24) >= v70)
                    goto LABEL_143;
                }
              }
              while (v73 < v69);
              do
              {
                while (1)
                {
LABEL_143:
                  while (1)
                  {
                    v56 -= 40;
                    v76 = *(char *)(v56 + 23);
                    v77 = v76 >= 0 ? (const void *)v56 : *(const void **)v56;
                    v78 = v76 >= 0 ? (void *)*(unsigned __int8 *)(v56 + 23) : *(void **)(v56 + 8);
                    v79 = (size_t)(v69 >= v78 ? v78 : v69);
                    v80 = memcmp(v77, v68, v79);
                    if (!v80)
                      break;
                    if (v80 < 0)
                      goto LABEL_108;
                  }
                  if (v78 != v69)
                    break;
                  if (*(_QWORD *)(v56 + 24) < v70)
                    goto LABEL_108;
                }
              }
              while (v78 >= v69);
LABEL_108:
              ;
            }
            while (i < v56);
          }
          v81 = (void **)(i - 40);
          if (i - 40 == a1)
            goto LABEL_165;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v82 = *(_OWORD *)v81;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 24);
          *(_OWORD *)a1 = v82;
          *(_BYTE *)(i - 17) = 0;
          *(_BYTE *)(i - 40) = 0;
          v83 = *(_OWORD *)(i - 16);
          *(_QWORD *)(i - 16) = 0;
          *(_QWORD *)(i - 8) = 0;
          v84 = *(std::__shared_weak_count **)(a1 + 32);
          *(_OWORD *)(a1 + 24) = v83;
          if (!v84)
            goto LABEL_165;
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (v86)
          {
LABEL_165:
            if (*(char *)(i - 17) < 0)
              goto LABEL_166;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
            if (*(char *)(i - 17) < 0)
LABEL_166:
              operator delete(*v81);
          }
          v87 = *(_OWORD *)__p;
          *(_QWORD *)(i - 24) = v407;
          *(_OWORD *)v81 = v87;
          HIBYTE(v407) = 0;
          LOBYTE(__p[0]) = 0;
          v88 = v408;
          v408 = 0uLL;
          v89 = *(std::__shared_weak_count **)(i - 8);
          *(_OWORD *)(i - 16) = v88;
          if (!v89)
            goto LABEL_171;
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
LABEL_172:
              v93 = (unint64_t *)&v92->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
          }
          else
          {
LABEL_171:
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
              goto LABEL_172;
          }
          if (SHIBYTE(v407) < 0)
            operator delete(__p[0]);
          v42 = v43 >= (unint64_t)k;
          a2 = v398;
          if (!v42)
            goto LABEL_183;
          v95 = sub_207CFDEA8(a1, (const void **)(i - 40));
          if (!sub_207CFDEA8(i, v398))
          {
            if (v95)
              continue;
LABEL_183:
            sub_207CFBBF4(a1, i - 40, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (const void **)(i - 40);
          if (v95)
            return;
          goto LABEL_2;
        }
        if ((const void **)a1 == a2)
          return;
        v209 = (v8 - 2) >> 1;
        v210 = v209;
        do
        {
          v211 = v210;
          if (v209 < v210)
            goto LABEL_438;
          v396 = v210;
          v212 = (2 * v210) | 1;
          v213 = a1 + 40 * v212;
          v214 = 2 * v210 + 2;
          if (v214 >= (uint64_t)v8)
          {
            v223 = v210;
            goto LABEL_464;
          }
          v215 = *(char *)(v213 + 23);
          if (v215 >= 0)
            v216 = (const void *)(a1 + 40 * v212);
          else
            v216 = *(const void **)v213;
          if (v215 >= 0)
            v217 = *(unsigned __int8 *)(v213 + 23);
          else
            v217 = *(_QWORD *)(v213 + 8);
          v218 = *(char *)(v213 + 63);
          if (v218 >= 0)
            v219 = (const void *)(v213 + 40);
          else
            v219 = *(const void **)(v213 + 40);
          if (v218 >= 0)
            v220 = *(unsigned __int8 *)(v213 + 63);
          else
            v220 = *(_QWORD *)(v213 + 48);
          if (v220 >= v217)
            v221 = v217;
          else
            v221 = v220;
          v222 = memcmp(v216, v219, v221);
          if (v222)
          {
            v209 = (v8 - 2) >> 1;
            v223 = v396;
            if ((v222 & 0x80000000) == 0)
              goto LABEL_464;
LABEL_463:
            v213 += 40;
            v212 = v214;
            goto LABEL_464;
          }
          v224 = v217 >= v220;
          if (v217 == v220)
            v224 = *(_QWORD *)(v213 + 24) >= *(_QWORD *)(v213 + 64);
          v209 = (v8 - 2) >> 1;
          v223 = v396;
          if (!v224)
            goto LABEL_463;
LABEL_464:
          v225 = (const void **)(a1 + 40 * v223);
          v226 = *(char *)(v213 + 23);
          if (v226 >= 0)
            v227 = (const void *)v213;
          else
            v227 = *(const void **)v213;
          if (v226 >= 0)
            v228 = *(unsigned __int8 *)(v213 + 23);
          else
            v228 = *(_QWORD *)(v213 + 8);
          v229 = *((char *)v225 + 23);
          if (v229 >= 0)
            v230 = v225;
          else
            v230 = *v225;
          if (v229 >= 0)
            v231 = *((unsigned __int8 *)v225 + 23);
          else
            v231 = (size_t)v225[1];
          if (v231 >= v228)
            v232 = v228;
          else
            v232 = v231;
          v233 = memcmp(v227, v230, v232);
          if (v233)
          {
            v211 = v396;
            a2 = v398;
            if (v233 < 0)
              goto LABEL_438;
LABEL_486:
            v235 = 0;
            v236 = *(_OWORD *)v225;
            v407 = v225[2];
            *(_OWORD *)__p = v236;
            v225[1] = 0;
            v225[2] = 0;
            *v225 = 0;
            v408 = *(_OWORD *)(v225 + 3);
            v225[3] = 0;
            v225[4] = 0;
            while (1)
            {
              if (v235 < 0)
                operator delete((void *)*v225);
              v245 = *(_OWORD *)v213;
              v225[2] = *(const void **)(v213 + 16);
              *(_OWORD *)v225 = v245;
              *(_BYTE *)(v213 + 23) = 0;
              *(_BYTE *)v213 = 0;
              v246 = *(_OWORD *)(v213 + 24);
              *(_QWORD *)(v213 + 24) = 0;
              *(_QWORD *)(v213 + 32) = 0;
              v247 = (std::__shared_weak_count *)v225[4];
              *(_OWORD *)(v225 + 3) = v246;
              if (v247)
              {
                v248 = (unint64_t *)&v247->__shared_owners_;
                do
                  v249 = __ldaxr(v248);
                while (__stlxr(v249 - 1, v248));
                if (!v249)
                {
                  ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                  std::__shared_weak_count::__release_weak(v247);
                }
              }
              if (v209 < v212)
              {
LABEL_542:
                if (*(char *)(v213 + 23) < 0)
                  operator delete(*(void **)v213);
                v261 = *(_OWORD *)__p;
                *(_QWORD *)(v213 + 16) = v407;
                *(_OWORD *)v213 = v261;
                HIBYTE(v407) = 0;
                LOBYTE(__p[0]) = 0;
                v262 = v408;
                v408 = 0uLL;
                v263 = *(std::__shared_weak_count **)(v213 + 32);
                *(_OWORD *)(v213 + 24) = v262;
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                  }
                }
                v266 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
                if (*((_QWORD *)&v408 + 1))
                {
                  v267 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                  do
                    v268 = __ldaxr(v267);
                  while (__stlxr(v268 - 1, v267));
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                    std::__shared_weak_count::__release_weak(v266);
                  }
                }
                if (SHIBYTE(v407) < 0)
                  operator delete(__p[0]);
                v211 = v396;
                a2 = v398;
                goto LABEL_438;
              }
              v250 = 2 * v212;
              v212 = (2 * v212) | 1;
              v237 = a1 + 40 * v212;
              v251 = v250 + 2;
              if (v250 + 2 < (uint64_t)v8)
              {
                v252 = *(char *)(v237 + 23);
                if (v252 >= 0)
                  v253 = (const void *)(a1 + 40 * v212);
                else
                  v253 = *(const void **)v237;
                if (v252 >= 0)
                  v254 = *(unsigned __int8 *)(v237 + 23);
                else
                  v254 = *(_QWORD *)(v237 + 8);
                v255 = *(char *)(v237 + 63);
                if (v255 >= 0)
                  v256 = (const void *)(v237 + 40);
                else
                  v256 = *(const void **)(v237 + 40);
                if (v255 >= 0)
                  v257 = *(unsigned __int8 *)(v237 + 63);
                else
                  v257 = *(_QWORD *)(v237 + 48);
                if (v257 >= v254)
                  v258 = v254;
                else
                  v258 = v257;
                v259 = memcmp(v253, v256, v258);
                if (v259)
                {
                  v209 = (v8 - 2) >> 1;
                  if (v259 < 0)
                    goto LABEL_487;
                }
                else
                {
                  v260 = v254 >= v257;
                  if (v254 == v257)
                    v260 = *(_QWORD *)(v237 + 24) >= *(_QWORD *)(v237 + 64);
                  v209 = (v8 - 2) >> 1;
                  if (!v260)
                  {
LABEL_487:
                    v237 += 40;
                    v212 = v251;
                  }
                }
              }
              v238 = *(char *)(v237 + 23);
              if (v238 >= 0)
                v239 = (const void *)v237;
              else
                v239 = *(const void **)v237;
              if (v238 >= 0)
                v240 = *(unsigned __int8 *)(v237 + 23);
              else
                v240 = *(_QWORD *)(v237 + 8);
              if (SHIBYTE(v407) >= 0)
                v241 = __p;
              else
                v241 = (void **)__p[0];
              if (SHIBYTE(v407) >= 0)
                v242 = (void *)HIBYTE(v407);
              else
                v242 = __p[1];
              if ((unint64_t)v242 >= v240)
                v243 = v240;
              else
                v243 = (size_t)v242;
              v244 = memcmp(v239, v241, v243);
              if (v244)
              {
                if (v244 < 0)
                  goto LABEL_542;
              }
              else if ((void *)v240 == v242)
              {
                if (*(_QWORD *)(v237 + 24) < (unint64_t)v408)
                  goto LABEL_542;
              }
              else if (v240 < (unint64_t)v242)
              {
                goto LABEL_542;
              }
              v235 = *(_BYTE *)(v213 + 23);
              v225 = (const void **)v213;
              v213 = v237;
            }
          }
          v234 = v228 >= v231;
          if (v228 == v231)
            v234 = *(_QWORD *)(v213 + 24) >= (unint64_t)v225[3];
          v211 = v396;
          a2 = v398;
          if (v234)
            goto LABEL_486;
LABEL_438:
          v210 = v211 - 1;
        }
        while (v211);
        v269 = v7 / 0x28uLL;
        while (2)
        {
          if (v269 < 2)
            goto LABEL_558;
          v271 = 0;
          v272 = *(void **)a1;
          *(_QWORD *)&v409 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)((char *)&v409 + 7) = *(_QWORD *)(a1 + 15);
          v404 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v397 = *(const void **)(a1 + 24);
          v399 = a2;
          v392 = v272;
          v394 = *(const void **)(a1 + 32);
          v273 = a1;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          while (2)
          {
            v274 = v273;
            v273 += 40 * v271 + 40;
            v275 = 2 * v271;
            v271 = (2 * v271) | 1;
            v276 = v275 + 2;
            if (v275 + 2 < v269)
            {
              v277 = *(char *)(v273 + 23);
              if (v277 >= 0)
                v278 = (const void *)v273;
              else
                v278 = *(const void **)v273;
              if (v277 >= 0)
                v279 = *(unsigned __int8 *)(v273 + 23);
              else
                v279 = *(_QWORD *)(v273 + 8);
              v280 = *(char *)(v273 + 63);
              if (v280 >= 0)
                v281 = (const void *)(v273 + 40);
              else
                v281 = *(const void **)(v273 + 40);
              if (v280 >= 0)
                v282 = *(unsigned __int8 *)(v273 + 63);
              else
                v282 = *(_QWORD *)(v273 + 48);
              if (v282 >= v279)
                v283 = v279;
              else
                v283 = v282;
              v284 = memcmp(v278, v281, v283);
              if (v284)
              {
                if (v284 < 0)
                  goto LABEL_581;
              }
              else
              {
                v291 = v279 >= v282;
                if (v279 == v282)
                  v291 = *(_QWORD *)(v273 + 24) >= *(_QWORD *)(v273 + 64);
                if (!v291)
                {
LABEL_581:
                  v273 += 40;
                  v271 = v276;
                }
              }
            }
            if (*(char *)(v274 + 23) < 0)
              operator delete(*(void **)v274);
            v285 = *(_OWORD *)v273;
            *(_QWORD *)(v274 + 16) = *(_QWORD *)(v273 + 16);
            *(_OWORD *)v274 = v285;
            *(_BYTE *)(v273 + 23) = 0;
            *(_BYTE *)v273 = 0;
            v286 = (_QWORD *)(v273 + 24);
            v287 = *(_OWORD *)(v273 + 24);
            *(_QWORD *)(v273 + 24) = 0;
            *(_QWORD *)(v273 + 32) = 0;
            v288 = *(std::__shared_weak_count **)(v274 + 32);
            *(_OWORD *)(v274 + 24) = v287;
            if (v288)
            {
              v289 = (unint64_t *)&v288->__shared_owners_;
              do
                v290 = __ldaxr(v289);
              while (__stlxr(v290 - 1, v289));
              if (!v290)
              {
                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                std::__shared_weak_count::__release_weak(v288);
              }
            }
            if (v271 <= (uint64_t)((unint64_t)(v269 - 2) >> 1))
              continue;
            break;
          }
          v292 = (void **)(v399 - 5);
          v293 = *(char *)(v273 + 23);
          if ((const void **)v273 == v399 - 5)
          {
            if (v293 < 0)
              operator delete(*(void **)v273);
            *(_QWORD *)v273 = v392;
            v316 = *(_QWORD *)((char *)&v409 + 7);
            *(_QWORD *)(v273 + 8) = v409;
            *(_QWORD *)(v273 + 15) = v316;
            *(_BYTE *)(v273 + 23) = v404;
            v317 = *(std::__shared_weak_count **)(v273 + 32);
            *(_QWORD *)(v273 + 24) = v397;
            *(_QWORD *)(v273 + 32) = v394;
            if (v317)
            {
              v318 = (unint64_t *)&v317->__shared_owners_;
              do
                v319 = __ldaxr(v318);
              while (__stlxr(v319 - 1, v318));
              if (!v319)
              {
                ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                std::__shared_weak_count::__release_weak(v317);
              }
            }
          }
          else
          {
            if (v293 < 0)
              operator delete(*(void **)v273);
            v294 = *(_OWORD *)v292;
            *(_QWORD *)(v273 + 16) = *(v399 - 3);
            *(_OWORD *)v273 = v294;
            *((_BYTE *)v399 - 17) = 0;
            *((_BYTE *)v399 - 40) = 0;
            v295 = *((_OWORD *)v399 - 1);
            *(v399 - 2) = 0;
            *(v399 - 1) = 0;
            v296 = *(std::__shared_weak_count **)(v273 + 32);
            *(_OWORD *)(v273 + 24) = v295;
            if (!v296)
              goto LABEL_601;
            v297 = (unint64_t *)&v296->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
              v299 = v399;
              if (*((char *)v399 - 17) < 0)
LABEL_602:
                operator delete(*v292);
            }
            else
            {
LABEL_601:
              v299 = v399;
              if (*((char *)v399 - 17) < 0)
                goto LABEL_602;
            }
            *(v299 - 5) = v392;
            v300 = (const void *)v409;
            *(const void **)((char *)v299 - 25) = *(const void **)((char *)&v409 + 7);
            *(v299 - 4) = v300;
            *((_BYTE *)v299 - 17) = v404;
            v301 = v299;
            v302 = (std::__shared_weak_count *)*(v299 - 1);
            *(v301 - 2) = v397;
            *(v301 - 1) = v394;
            if (!v302)
              goto LABEL_607;
            v303 = (unint64_t *)&v302->__shared_owners_;
            do
              v304 = __ldaxr(v303);
            while (__stlxr(v304 - 1, v303));
            if (!v304)
            {
              ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
              std::__shared_weak_count::__release_weak(v302);
              v305 = v273 + 40 - a1;
              if (v305 < 41)
                goto LABEL_557;
LABEL_608:
              v306 = (v305 / 0x28uLL - 2) >> 1;
              v307 = a1 + 40 * v306;
              v308 = *(char *)(v307 + 23);
              if (v308 >= 0)
                v309 = (const void *)(a1 + 40 * v306);
              else
                v309 = *(const void **)v307;
              if (v308 >= 0)
                v310 = *(unsigned __int8 *)(v307 + 23);
              else
                v310 = *(_QWORD *)(v307 + 8);
              v311 = *(char *)(v273 + 23);
              if (v311 >= 0)
                v312 = (const void *)v273;
              else
                v312 = *(const void **)v273;
              if (v311 >= 0)
                v313 = *(unsigned __int8 *)(v273 + 23);
              else
                v313 = *(_QWORD *)(v273 + 8);
              if (v313 >= v310)
                v314 = v310;
              else
                v314 = v313;
              v315 = memcmp(v309, v312, v314);
              if (v315)
              {
                if ((v315 & 0x80000000) == 0)
                  goto LABEL_557;
              }
              else
              {
                v320 = v310 >= v313;
                if (v310 == v313)
                  v320 = *(_QWORD *)(v307 + 24) >= *v286;
                if (v320)
                  goto LABEL_557;
              }
              v321 = *(_OWORD *)v273;
              v407 = *(const void **)(v273 + 16);
              *(_OWORD *)__p = v321;
              *(_QWORD *)(v273 + 8) = 0;
              *(_QWORD *)(v273 + 16) = 0;
              *(_QWORD *)v273 = 0;
              v408 = *(_OWORD *)(v273 + 24);
              *v286 = 0;
              *(_QWORD *)(v273 + 32) = 0;
              while (1)
              {
                v322 = v307;
                if (*(char *)(v273 + 23) < 0)
                  operator delete(*(void **)v273);
                v323 = *(_OWORD *)v307;
                *(_QWORD *)(v273 + 16) = *(_QWORD *)(v307 + 16);
                *(_OWORD *)v273 = v323;
                *(_BYTE *)(v307 + 23) = 0;
                *(_BYTE *)v307 = 0;
                v324 = *(_OWORD *)(v307 + 24);
                *(_QWORD *)(v307 + 24) = 0;
                *(_QWORD *)(v307 + 32) = 0;
                v325 = *(std::__shared_weak_count **)(v273 + 32);
                *(_OWORD *)(v273 + 24) = v324;
                if (v325)
                {
                  v326 = (unint64_t *)&v325->__shared_owners_;
                  do
                    v327 = __ldaxr(v326);
                  while (__stlxr(v327 - 1, v326));
                  if (!v327)
                  {
                    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                    std::__shared_weak_count::__release_weak(v325);
                  }
                }
                if (!v306)
                  break;
                v306 = (v306 - 1) >> 1;
                v307 = a1 + 40 * v306;
                v328 = *(char *)(v307 + 23);
                if (v328 >= 0)
                  v329 = (const void *)(a1 + 40 * v306);
                else
                  v329 = *(const void **)v307;
                if (v328 >= 0)
                  v330 = *(unsigned __int8 *)(v307 + 23);
                else
                  v330 = *(_QWORD *)(v307 + 8);
                if (SHIBYTE(v407) >= 0)
                  v331 = __p;
                else
                  v331 = (void **)__p[0];
                if (SHIBYTE(v407) >= 0)
                  v332 = (void *)HIBYTE(v407);
                else
                  v332 = __p[1];
                if ((unint64_t)v332 >= v330)
                  v333 = v330;
                else
                  v333 = (size_t)v332;
                v334 = memcmp(v329, v331, v333);
                if (v334)
                {
                  v273 = v322;
                  if ((v334 & 0x80000000) == 0)
                    break;
                }
                else
                {
                  v335 = v330 >= (unint64_t)v332;
                  if ((void *)v330 == v332)
                  {
                    v273 = v322;
                    if (*(_QWORD *)(v307 + 24) >= (unint64_t)v408)
                      break;
                  }
                  else
                  {
                    v273 = v322;
                    if (v335)
                      break;
                  }
                }
              }
              if (*(char *)(v322 + 23) < 0)
                operator delete(*(void **)v322);
              v336 = *(_OWORD *)__p;
              *(_QWORD *)(v322 + 16) = v407;
              *(_OWORD *)v322 = v336;
              HIBYTE(v407) = 0;
              LOBYTE(__p[0]) = 0;
              v337 = v408;
              v408 = 0uLL;
              v338 = *(std::__shared_weak_count **)(v322 + 32);
              *(_OWORD *)(v322 + 24) = v337;
              if (v338)
              {
                v339 = (unint64_t *)&v338->__shared_owners_;
                do
                  v340 = __ldaxr(v339);
                while (__stlxr(v340 - 1, v339));
                if (!v340)
                {
                  ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                  std::__shared_weak_count::__release_weak(v338);
                }
              }
              v341 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              if (*((_QWORD *)&v408 + 1))
              {
                v342 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                do
                  v343 = __ldaxr(v342);
                while (__stlxr(v343 - 1, v342));
                if (!v343)
                {
                  ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
                  std::__shared_weak_count::__release_weak(v341);
                }
              }
              if (SHIBYTE(v407) < 0)
                operator delete(__p[0]);
            }
            else
            {
LABEL_607:
              v305 = v273 + 40 - a1;
              if (v305 >= 41)
                goto LABEL_608;
            }
          }
LABEL_557:
          a2 = v399;
LABEL_558:
          a2 -= 5;
          if ((unint64_t)v269-- > 2)
            continue;
          return;
        }
    }
  }
}

void sub_207CFD934(const void **a1, const void **a2, const void **a3)
{
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  const void *v24;
  __int128 v25;
  const void *v26;
  __int128 v27;
  _QWORD *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  size_t v38;
  int v39;
  const void *v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  __int128 v45;
  const void *v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  const void *v57;
  size_t v58;
  int v59;
  const void *v60;
  size_t v61;
  size_t v62;
  int v63;
  const void *v64;
  __int128 v65;
  const void *v66;
  __int128 v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const void *v75;
  __int128 v76;
  const void *v77;
  __int128 v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  const void *v84;
  __int128 v85;
  const void *v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a1 + 23);
  else
    v11 = (size_t)a1[1];
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = memcmp(v7, v10, v12);
  if (!v13)
  {
    if (v8 == v11)
    {
      if (a2[3] < a1[3])
        goto LABEL_37;
    }
    else if (v8 < v11)
    {
      goto LABEL_37;
    }
LABEL_18:
    v14 = *((char *)a3 + 23);
    if (v14 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)a3 + 23);
    else
      v16 = (size_t)a3[1];
    if (v8 >= v16)
      v17 = v16;
    else
      v17 = v8;
    v18 = memcmp(v15, v7, v17);
    if (v18)
    {
      if ((v18 & 0x80000000) == 0)
        return;
    }
    else if (v16 == v8)
    {
      if (a3[3] >= a2[3])
        return;
    }
    else if (v16 >= v8)
    {
      return;
    }
    v44 = a2[2];
    v45 = *(_OWORD *)a2;
    v46 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v46;
    *(_OWORD *)a3 = v45;
    a3[2] = v44;
    v47 = a2 + 3;
    v48 = *(_OWORD *)(a2 + 3);
    a2[3] = 0;
    a2[4] = 0;
    v49 = *(_OWORD *)(a3 + 3);
    a3[3] = 0;
    a3[4] = 0;
    v50 = (std::__shared_weak_count *)a2[4];
    *(_OWORD *)(a2 + 3) = v49;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(p_shared_owners);
      while (__stlxr(v52 - 1, p_shared_owners));
      if (!v52)
      {
        v94 = v48;
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v48 = v94;
      }
    }
    v53 = (std::__shared_weak_count *)a3[4];
    *(_OWORD *)(a3 + 3) = v48;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *((char *)a2 + 23);
    if (v56 >= 0)
      v57 = a2;
    else
      v57 = *a2;
    if (v56 >= 0)
      v58 = *((unsigned __int8 *)a2 + 23);
    else
      v58 = (size_t)a2[1];
    v59 = *((char *)a1 + 23);
    if (v59 >= 0)
      v60 = a1;
    else
      v60 = *a1;
    if (v59 >= 0)
      v61 = *((unsigned __int8 *)a1 + 23);
    else
      v61 = (size_t)a1[1];
    if (v61 >= v58)
      v62 = v58;
    else
      v62 = v61;
    v63 = memcmp(v57, v60, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        return;
    }
    else if (v58 == v61)
    {
      if (*v47 >= (unint64_t)a1[3])
        return;
    }
    else if (v58 >= v61)
    {
      return;
    }
    v84 = a1[2];
    v85 = *(_OWORD *)a1;
    v86 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v86;
    *(_OWORD *)a2 = v85;
    a2[2] = v84;
    v87 = *(_OWORD *)(a1 + 3);
    a1[3] = 0;
    a1[4] = 0;
    v88 = *(_OWORD *)(a2 + 3);
    *v47 = 0;
    a2[4] = 0;
    v89 = (std::__shared_weak_count *)a1[4];
    *(_OWORD *)(a1 + 3) = v88;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        v97 = v87;
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
        v87 = v97;
      }
    }
    v72 = (std::__shared_weak_count *)a2[4];
    *(_OWORD *)(a2 + 3) = v87;
    if (v72)
    {
      v92 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v92);
      while (__stlxr(v74 - 1, v92));
LABEL_143:
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      return;
    }
    return;
  }
  if ((v13 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_37:
  v19 = *((char *)a3 + 23);
  if (v19 >= 0)
    v20 = a3;
  else
    v20 = *a3;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)a3 + 23);
  else
    v21 = (size_t)a3[1];
  if (v8 >= v21)
    v22 = v21;
  else
    v22 = v8;
  v23 = memcmp(v20, v7, v22);
  if (!v23)
  {
    if (v21 == v8)
    {
      if (a3[3] >= a2[3])
        goto LABEL_48;
    }
    else if (v21 >= v8)
    {
      goto LABEL_48;
    }
LABEL_115:
    v64 = a1[2];
    v65 = *(_OWORD *)a1;
    v66 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v66;
    *(_OWORD *)a3 = v65;
    a3[2] = v64;
    v67 = *(_OWORD *)(a1 + 3);
    a1[3] = 0;
    a1[4] = 0;
    v68 = *(_OWORD *)(a3 + 3);
    a3[3] = 0;
    a3[4] = 0;
    v69 = (std::__shared_weak_count *)a1[4];
    *(_OWORD *)(a1 + 3) = v68;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        v95 = v67;
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v67 = v95;
      }
    }
    v72 = (std::__shared_weak_count *)a3[4];
    *(_OWORD *)(a3 + 3) = v67;
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      goto LABEL_143;
    }
    return;
  }
  if (v23 < 0)
    goto LABEL_115;
LABEL_48:
  v24 = a1[2];
  v25 = *(_OWORD *)a1;
  v26 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v26;
  *(_OWORD *)a2 = v25;
  a2[2] = v24;
  v27 = *(_OWORD *)(a1 + 3);
  a1[3] = 0;
  a1[4] = 0;
  v28 = a2 + 3;
  v29 = *(_OWORD *)(a2 + 3);
  a2[3] = 0;
  a2[4] = 0;
  v30 = (std::__shared_weak_count *)a1[4];
  *(_OWORD *)(a1 + 3) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      v93 = v27;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v27 = v93;
    }
  }
  v33 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v27;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *((char *)a3 + 23);
  if (v36 >= 0)
    v37 = a3;
  else
    v37 = *a3;
  if (v36 >= 0)
    v38 = *((unsigned __int8 *)a3 + 23);
  else
    v38 = (size_t)a3[1];
  v39 = *((char *)a2 + 23);
  if (v39 >= 0)
    v40 = a2;
  else
    v40 = *a2;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  if (v41 >= v38)
    v42 = v38;
  else
    v42 = v41;
  v43 = memcmp(v37, v40, v42);
  if (v43)
  {
    if ((v43 & 0x80000000) == 0)
      return;
  }
  else if (v38 == v41)
  {
    if ((unint64_t)a3[3] >= *v28)
      return;
  }
  else if (v38 >= v41)
  {
    return;
  }
  v75 = a2[2];
  v76 = *(_OWORD *)a2;
  v77 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v77;
  *(_OWORD *)a3 = v76;
  a3[2] = v75;
  v78 = *(_OWORD *)(a2 + 3);
  *v28 = 0;
  a2[4] = 0;
  v79 = *(_OWORD *)(a3 + 3);
  a3[3] = 0;
  a3[4] = 0;
  v80 = (std::__shared_weak_count *)a2[4];
  *(_OWORD *)(a2 + 3) = v79;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      v96 = v78;
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      v78 = v96;
    }
  }
  v72 = (std::__shared_weak_count *)a3[4];
  *(_OWORD *)(a3 + 3) = v78;
  if (v72)
  {
    v83 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v83);
    while (__stlxr(v74 - 1, v83));
    goto LABEL_143;
  }
}

BOOL sub_207CFDEA8(uint64_t a1, const void **a2)
{
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  const void **v15;
  const void **v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void **v35;
  void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  BOOL v51;
  const void *v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  void *__p[2];
  const void *v65;
  __int128 v66;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 5;
      v7 = *((char *)a2 - 17);
      if (v7 >= 0)
        v8 = a2 - 5;
      else
        v8 = (const void **)*(a2 - 5);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 17);
      else
        v9 = (size_t)*(a2 - 4);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (const void *)a1;
      else
        v11 = *(const void **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0)
          return 1;
        goto LABEL_99;
      }
      v51 = v9 >= v12;
      if (v9 == v12)
        v51 = (unint64_t)*(a2 - 2) >= *(_QWORD *)(a1 + 24);
      if (!v51)
      {
LABEL_99:
        v52 = *(const void **)(a1 + 16);
        v53 = *(_OWORD *)a1;
        v54 = (uint64_t)*(a2 - 3);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v54;
        *(_OWORD *)v6 = v53;
        *(a2 - 3) = v52;
        v55 = *(_OWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v56 = *((_OWORD *)a2 - 1);
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        v57 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v56;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            v63 = v55;
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            v55 = v63;
          }
        }
        v60 = (std::__shared_weak_count *)*(a2 - 1);
        *((_OWORD *)a2 - 1) = v55;
        if (v60)
        {
          v61 = (unint64_t *)&v60->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
      }
      return 1;
    case 3uLL:
      sub_207CFD934((const void **)a1, (const void **)(a1 + 40), a2 - 5);
      return 1;
    case 4uLL:
      sub_207CFE340((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a2 - 5);
      return 1;
    case 5uLL:
      sub_207CFE6D0(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), a2 - 5);
      return 1;
    default:
      v15 = (const void **)(a1 + 80);
      sub_207CFD934((const void **)a1, (const void **)(a1 + 40), (const void **)(a1 + 80));
      v16 = (const void **)(a1 + 120);
      if ((const void **)(a1 + 120) == a2)
        return 1;
      v17 = 0;
      while (2)
      {
        v18 = *((char *)v16 + 23);
        if (v18 >= 0)
          v19 = v16;
        else
          v19 = *v16;
        if (v18 >= 0)
          v20 = *((unsigned __int8 *)v16 + 23);
        else
          v20 = (size_t)v16[1];
        v21 = *((char *)v15 + 23);
        if (v21 >= 0)
          v22 = v15;
        else
          v22 = *v15;
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)v15 + 23);
        else
          v23 = (size_t)v15[1];
        if (v23 >= v20)
          v24 = v20;
        else
          v24 = v23;
        v25 = memcmp(v19, v22, v24);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_24;
        }
        else
        {
          v26 = v20 >= v23;
          if (v20 == v23)
            v26 = v16[3] >= v15[3];
          if (v26)
            goto LABEL_24;
        }
        v27 = 0;
        *(_OWORD *)__p = *(_OWORD *)v16;
        v65 = v16[2];
        *v16 = 0;
        v16[1] = 0;
        v66 = *(_OWORD *)(v16 + 3);
        v16[2] = 0;
        v16[3] = 0;
        v28 = (uint64_t)v16;
        v16[4] = 0;
        while (1)
        {
          v29 = (uint64_t)v15;
          if (v27 < 0)
            operator delete(*(void **)v28);
          *(_OWORD *)v28 = *(_OWORD *)v15;
          *(_QWORD *)(v28 + 16) = v15[2];
          *((_BYTE *)v15 + 23) = 0;
          *(_BYTE *)v15 = 0;
          v30 = v15 + 3;
          v31 = *(_OWORD *)(v15 + 3);
          v15[4] = 0;
          v15[3] = 0;
          v32 = *(std::__shared_weak_count **)(v28 + 32);
          *(_OWORD *)(v28 + 24) = v31;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          if (v29 == a1)
            break;
          v15 = (const void **)(v29 - 40);
          if (SHIBYTE(v65) >= 0)
            v35 = __p;
          else
            v35 = (void **)__p[0];
          if (SHIBYTE(v65) >= 0)
            v36 = (void *)HIBYTE(v65);
          else
            v36 = __p[1];
          v37 = *(char *)(v29 - 17);
          if (v37 >= 0)
            v38 = (const void *)(v29 - 40);
          else
            v38 = *(const void **)(v29 - 40);
          if (v37 >= 0)
            v39 = *(unsigned __int8 *)(v29 - 17);
          else
            v39 = *(_QWORD *)(v29 - 32);
          if (v39 >= (unint64_t)v36)
            v40 = (size_t)v36;
          else
            v40 = v39;
          v41 = memcmp(v35, v38, v40);
          if (v41)
          {
            if ((v41 & 0x80000000) == 0)
              goto LABEL_78;
          }
          else
          {
            v42 = (unint64_t)v36 >= v39;
            if (v36 == (void *)v39)
              v42 = (unint64_t)v66 >= *(_QWORD *)(v29 - 16);
            if (v42)
              goto LABEL_78;
          }
          v27 = *(_BYTE *)(v29 + 23);
          v28 = v29;
        }
        v29 = a1;
LABEL_78:
        if (*(char *)(v29 + 23) < 0)
          operator delete(*(void **)v29);
        v43 = *(_OWORD *)__p;
        *(_QWORD *)(v29 + 16) = v65;
        *(_OWORD *)v29 = v43;
        HIBYTE(v65) = 0;
        LOBYTE(__p[0]) = 0;
        v44 = v66;
        v66 = 0uLL;
        *v30 = v44;
        v45 = *(std::__shared_weak_count **)(v29 + 32);
        *(_QWORD *)(v29 + 32) = *((_QWORD *)&v44 + 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (SHIBYTE(v65) < 0)
        {
          operator delete(__p[0]);
          if (++v17 == 8)
            return v16 + 5 == a2;
LABEL_24:
          v15 = v16;
          v16 += 5;
          if (v16 == a2)
            return 1;
          continue;
        }
        break;
      }
      if (++v17 != 8)
        goto LABEL_24;
      return v16 + 5 == a2;
  }
}

void sub_207CFE340(__int128 *a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  BOOL v16;
  const void *v17;
  __int128 v18;
  const void *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  const void *v30;
  size_t v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  const void *v51;
  size_t v52;
  int v53;
  const void *v54;
  size_t v55;
  size_t v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  sub_207CFD934((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *((char *)a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(const void **)a3;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = *((_QWORD *)a3 + 1);
  if (v13 >= v10)
    v14 = v10;
  else
    v14 = v13;
  v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return;
  }
  else
  {
    v16 = v10 >= v13;
    if (v10 == v13)
      v16 = (unint64_t)a4[3] >= *((_QWORD *)a3 + 3);
    if (v16)
      return;
  }
  v17 = (const void *)*((_QWORD *)a3 + 2);
  v18 = *a3;
  v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  v20 = (_QWORD *)a3 + 3;
  v21 = *(__int128 *)((char *)a3 + 24);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  v22 = *(_OWORD *)(a4 + 3);
  a4[3] = 0;
  a4[4] = 0;
  v23 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  *(__int128 *)((char *)a3 + 24) = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      v70 = v21;
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v21 = v70;
    }
  }
  v26 = (std::__shared_weak_count *)a4[4];
  *(_OWORD *)(a4 + 3) = v21;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *((char *)a3 + 23);
  if (v29 >= 0)
    v30 = a3;
  else
    v30 = *(const void **)a3;
  if (v29 >= 0)
    v31 = *((unsigned __int8 *)a3 + 23);
  else
    v31 = *((_QWORD *)a3 + 1);
  v32 = *((char *)a2 + 23);
  if (v32 >= 0)
    v33 = a2;
  else
    v33 = *(const void **)a2;
  if (v32 >= 0)
    v34 = *((unsigned __int8 *)a2 + 23);
  else
    v34 = *((_QWORD *)a2 + 1);
  if (v34 >= v31)
    v35 = v31;
  else
    v35 = v34;
  v36 = memcmp(v30, v33, v35);
  if (v36)
  {
    if ((v36 & 0x80000000) == 0)
      return;
  }
  else
  {
    v37 = v31 >= v34;
    if (v31 == v34)
      v37 = *v20 >= *((_QWORD *)a2 + 3);
    if (v37)
      return;
  }
  v38 = *((_QWORD *)a2 + 2);
  v39 = *a2;
  v40 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v40;
  *a3 = v39;
  *((_QWORD *)a3 + 2) = v38;
  v41 = (_QWORD *)a2 + 3;
  v42 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v43 = *(__int128 *)((char *)a3 + 24);
  *v20 = 0;
  *((_QWORD *)a3 + 4) = 0;
  v44 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
  *(__int128 *)((char *)a2 + 24) = v43;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      v71 = v42;
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
      v42 = v71;
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)a3 + 4);
  *(__int128 *)((char *)a3 + 24) = v42;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *((char *)a2 + 23);
  if (v50 >= 0)
    v51 = a2;
  else
    v51 = *(const void **)a2;
  if (v50 >= 0)
    v52 = *((unsigned __int8 *)a2 + 23);
  else
    v52 = *((_QWORD *)a2 + 1);
  v53 = *((char *)a1 + 23);
  if (v53 >= 0)
    v54 = a1;
  else
    v54 = *(const void **)a1;
  if (v53 >= 0)
    v55 = *((unsigned __int8 *)a1 + 23);
  else
    v55 = *((_QWORD *)a1 + 1);
  if (v55 >= v52)
    v56 = v52;
  else
    v56 = v55;
  v57 = memcmp(v51, v54, v56);
  if (v57)
  {
    if ((v57 & 0x80000000) == 0)
      return;
    goto LABEL_84;
  }
  v58 = v52 >= v55;
  if (v52 == v55)
    v58 = *v41 >= *((_QWORD *)a1 + 3);
  if (!v58)
  {
LABEL_84:
    v59 = *((_QWORD *)a1 + 2);
    v60 = *a1;
    v61 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v61;
    *a2 = v60;
    *((_QWORD *)a2 + 2) = v59;
    v62 = *(__int128 *)((char *)a1 + 24);
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 4) = 0;
    v63 = *(__int128 *)((char *)a2 + 24);
    *v41 = 0;
    *((_QWORD *)a2 + 4) = 0;
    v64 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
    *(__int128 *)((char *)a1 + 24) = v63;
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        v72 = v62;
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
        v62 = v72;
      }
    }
    v67 = (std::__shared_weak_count *)*((_QWORD *)a2 + 4);
    *(__int128 *)((char *)a2 + 24) = v62;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
}

void sub_207CFE6D0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  size_t v15;
  size_t v16;
  int v17;
  BOOL v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  __int128 *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  const void *v53;
  size_t v54;
  int v55;
  const void *v56;
  size_t v57;
  size_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  const void *v74;
  size_t v75;
  int v76;
  const void *v77;
  size_t v78;
  size_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  sub_207CFE340((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a4 + 23);
  if (v13 >= 0)
    v14 = a4;
  else
    v14 = *(__int128 **)a4;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a4 + 23);
  else
    v15 = *((_QWORD *)a4 + 1);
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return;
  }
  else
  {
    v18 = v12 >= v15;
    if (v12 == v15)
      v18 = (unint64_t)a5[3] >= *((_QWORD *)a4 + 3);
    if (v18)
      return;
  }
  v19 = (const void *)*((_QWORD *)a4 + 2);
  v20 = *a4;
  v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((_QWORD *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  v22 = (_QWORD *)a4 + 3;
  v23 = *(__int128 *)((char *)a4 + 24);
  *((_QWORD *)a4 + 3) = 0;
  *((_QWORD *)a4 + 4) = 0;
  v24 = *(_OWORD *)(a5 + 3);
  a5[3] = 0;
  a5[4] = 0;
  v25 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  *(__int128 *)((char *)a4 + 24) = v24;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      v93 = v23;
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v23 = v93;
    }
  }
  v28 = (std::__shared_weak_count *)a5[4];
  *(_OWORD *)(a5 + 3) = v23;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *((char *)a4 + 23);
  if (v31 >= 0)
    v32 = a4;
  else
    v32 = *(__int128 **)a4;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a4 + 23);
  else
    v33 = *((_QWORD *)a4 + 1);
  v34 = *(char *)(a3 + 23);
  if (v34 >= 0)
    v35 = (const void *)a3;
  else
    v35 = *(const void **)a3;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a3 + 23);
  else
    v36 = *(_QWORD *)(a3 + 8);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0)
      return;
  }
  else
  {
    v39 = v33 >= v36;
    if (v33 == v36)
      v39 = *v22 >= *(_QWORD *)(a3 + 24);
    if (v39)
      return;
  }
  v40 = *(_QWORD *)(a3 + 16);
  v41 = *(_OWORD *)a3;
  v42 = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(_QWORD *)(a3 + 16) = v42;
  *a4 = v41;
  *((_QWORD *)a4 + 2) = v40;
  v43 = (_QWORD *)(a3 + 24);
  v44 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v45 = *(__int128 *)((char *)a4 + 24);
  *v22 = 0;
  *((_QWORD *)a4 + 4) = 0;
  v46 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v45;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      v94 = v44;
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v44 = v94;
    }
  }
  v49 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  *(__int128 *)((char *)a4 + 24) = v44;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(char *)(a3 + 23);
  if (v52 >= 0)
    v53 = (const void *)a3;
  else
    v53 = *(const void **)a3;
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(a3 + 23);
  else
    v54 = *(_QWORD *)(a3 + 8);
  v55 = *(char *)(a2 + 23);
  if (v55 >= 0)
    v56 = (const void *)a2;
  else
    v56 = *(const void **)a2;
  if (v55 >= 0)
    v57 = *(unsigned __int8 *)(a2 + 23);
  else
    v57 = *(_QWORD *)(a2 + 8);
  if (v57 >= v54)
    v58 = v54;
  else
    v58 = v57;
  v59 = memcmp(v53, v56, v58);
  if (v59)
  {
    if ((v59 & 0x80000000) == 0)
      return;
  }
  else
  {
    v60 = v54 >= v57;
    if (v54 == v57)
      v60 = *v43 >= *(_QWORD *)(a2 + 24);
    if (v60)
      return;
  }
  v61 = *(_QWORD *)(a2 + 16);
  v62 = *(_OWORD *)a2;
  v63 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v63;
  *(_OWORD *)a3 = v62;
  *(_QWORD *)(a3 + 16) = v61;
  v64 = (_QWORD *)(a2 + 24);
  v65 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v66 = *(_OWORD *)(a3 + 24);
  *v43 = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v67 = *(std::__shared_weak_count **)(a2 + 32);
  *(_OWORD *)(a2 + 24) = v66;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      v95 = v65;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v65 = v95;
    }
  }
  v70 = *(std::__shared_weak_count **)(a3 + 32);
  *(_OWORD *)(a3 + 24) = v65;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(char *)(a2 + 23);
  if (v73 >= 0)
    v74 = (const void *)a2;
  else
    v74 = *(const void **)a2;
  if (v73 >= 0)
    v75 = *(unsigned __int8 *)(a2 + 23);
  else
    v75 = *(_QWORD *)(a2 + 8);
  v76 = *(char *)(a1 + 23);
  if (v76 >= 0)
    v77 = (const void *)a1;
  else
    v77 = *(const void **)a1;
  if (v76 >= 0)
    v78 = *(unsigned __int8 *)(a1 + 23);
  else
    v78 = *(_QWORD *)(a1 + 8);
  if (v78 >= v75)
    v79 = v75;
  else
    v79 = v78;
  v80 = memcmp(v74, v77, v79);
  if (v80)
  {
    if ((v80 & 0x80000000) == 0)
      return;
    goto LABEL_115;
  }
  v81 = v75 >= v78;
  if (v75 == v78)
    v81 = *v64 >= *(_QWORD *)(a1 + 24);
  if (!v81)
  {
LABEL_115:
    v82 = *(_QWORD *)(a1 + 16);
    v83 = *(_OWORD *)a1;
    v84 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v84;
    *(_OWORD *)a2 = v83;
    *(_QWORD *)(a2 + 16) = v82;
    v85 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v86 = *(_OWORD *)(a2 + 24);
    *v64 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v87 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v86;
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        v96 = v85;
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
        v85 = v96;
      }
    }
    v90 = *(std::__shared_weak_count **)(a2 + 32);
    *(_OWORD *)(a2 + 24) = v85;
    if (v90)
    {
      v91 = (unint64_t *)&v90->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
  }
}

void sub_207CFEB84(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_207CA420C();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_207CA3AB8();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_207CFED24(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_207CA420C();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_207CFEE1C(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_207CA420C();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_207CA3AB8();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v14;
      v9 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 16;
    }
  }
  if (v13)
    operator delete(v13);
  return v10;
}

uint64_t sub_207CFEF50(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  CFTypeID v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  CFTypeID TypeID;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  unint64_t *v19;
  unint64_t v20;
  CFTypeID v21;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  CFIndex Count;
  CFIndex v45;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  uint64_t *v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;

  v61 = a3;
  v5 = CFGetTypeID(*(CFTypeRef *)a2);
  v6 = v5;
  v8 = **a1;
  v7 = (*a1)[1];
  if (!v8)
    return 0;
  v9 = 8 * v8;
  v10 = (_QWORD *)(*a1)[1];
  while (*v10 != v5)
  {
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      v10 = (_QWORD *)(v7 + 8 * v8);
      break;
    }
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
    return 0;
  if (v5 == CFDictionaryGetTypeID())
  {
    v12 = *(std::__shared_weak_count_vtbl **)a2;
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v56 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (v12 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v12) == TypeID))
    {
      sub_207CF9D84(&v57, v12, 1);
      v16 = v57;
    }
    else
    {
      v16 = 0;
      v57 = 0;
      v58 = 0;
    }
    sub_207CF9D84(&v62, v16, 1);
    v22 = v62;
    v23 = v63;
    if (v63)
    {
      v24 = (unint64_t *)&v63->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v59 = v22;
      v60 = v23;
      do
        v26 = __ldxr(v24);
      while (__stxr(v26 + 1, v24));
      do
        v27 = __ldaxr(v24);
      while (__stlxr(v27 - 1, v24));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      v59 = v62;
      v60 = 0;
    }
    v28 = v63;
    if (v63)
    {
      v29 = (unint64_t *)&v63->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v58;
    if (v58)
    {
      v32 = (unint64_t *)&v58->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v56)
    {
      v34 = (unint64_t *)&v56->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v36 = sub_207CFA79C(&v59, **a1, (*a1)[1]);
    v37 = v60;
    if (v36)
    {
      if (v60)
      {
        v38 = (unint64_t *)&v60->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
LABEL_75:
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        return 1;
      }
      return 1;
    }
    if (v60)
    {
      v40 = (unint64_t *)&v60->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      goto LABEL_86;
    }
  }
  else
  {
    if (v6 != CFArrayGetTypeID())
      return 1;
    v18 = *(std::__shared_weak_count_vtbl **)a2;
    v17 = *(std::__shared_weak_count **)(a2 + 8);
    v59 = *(std::__shared_weak_count_vtbl **)a2;
    v60 = v17;
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    if (v18 && (v21 = CFArrayGetTypeID(), CFGetTypeID(v18) == v21))
    {
      sub_207CB7A4C(&v62, v18, 1);
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    if (v17)
    {
      v42 = (unint64_t *)&v17->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    Count = CFArrayGetCount((CFArrayRef)v62);
    if (!Count)
    {
LABEL_72:
      v37 = v63;
      if (v63)
      {
        v50 = (unint64_t *)&v63->__shared_owners_;
        do
          v39 = __ldaxr(v50);
        while (__stlxr(v39 - 1, v50));
        goto LABEL_75;
      }
      return 1;
    }
    v45 = 0;
    while (1)
    {
      ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)v62, v45);
      sub_207CF871C(&v59, ValueAtIndex, 1);
      if (!sub_207CFF454(&v61, (CFTypeRef *)&v59, (uint64_t)v61))
        break;
      v47 = v60;
      if (v60)
      {
        v48 = (unint64_t *)&v60->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (++v45 == Count)
        goto LABEL_72;
    }
    v52 = v60;
    if (v60)
    {
      v53 = (unint64_t *)&v60->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v37 = v63;
    if (v63)
    {
      v55 = (unint64_t *)&v63->__shared_owners_;
      do
        v41 = __ldaxr(v55);
      while (__stlxr(v41 - 1, v55));
LABEL_86:
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  return 0;
}

void sub_207CFF3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_207CFF3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v6 - 48);
  _Unwind_Resume(a1);
}

void sub_207CFF440(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_207CFF454(uint64_t **a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeID v5;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  CFTypeRef v11;
  CFTypeID TypeID;
  std::__shared_weak_count_vtbl *v13;
  CFTypeRef v14;
  CFTypeID v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFIndex Count;
  CFIndex v41;
  std::__shared_weak_count_vtbl *ValueAtIndex;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  CFTypeRef v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count_vtbl *v54;
  std::__shared_weak_count *v55;
  CFTypeRef cf;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;

  v58 = a3;
  v5 = CFGetTypeID(*a2);
  v6 = v5;
  v8 = **a1;
  v7 = (*a1)[1];
  if (!v8)
    return 0;
  v9 = 8 * v8;
  v10 = (_QWORD *)(*a1)[1];
  while (*v10 != v5)
  {
    ++v10;
    v9 -= 8;
    if (!v9)
    {
      v10 = (_QWORD *)(v7 + 8 * v8);
      break;
    }
  }
  if (v8 == ((uint64_t)v10 - v7) >> 3)
    return 0;
  if (v5 == CFDictionaryGetTypeID())
  {
    sub_207CFBA9C((std::__shared_weak_count_vtbl **)&v52, (uint64_t)a2);
    v11 = v52;
    if (v52 && (TypeID = CFDictionaryGetTypeID(), CFGetTypeID(v11) == TypeID))
    {
      sub_207CF9D84(&v54, (std::__shared_weak_count_vtbl *)v52, 1);
      v13 = v54;
    }
    else
    {
      v13 = 0;
      v54 = 0;
      v55 = 0;
    }
    sub_207CF9D84(&v59, v13, 1);
    v16 = v59;
    v17 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      cf = v16;
      v57 = v17;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      cf = v59;
      v57 = 0;
    }
    v22 = v60;
    if (v60)
    {
      v23 = (unint64_t *)&v60->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v55;
    if (v55)
    {
      v26 = (unint64_t *)&v55->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v53;
    if (v53)
    {
      v29 = (unint64_t *)&v53->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = sub_207CFA79C(&cf, **a1, (*a1)[1]);
    v32 = v57;
    if (v31)
    {
      if (v57)
      {
        v33 = (unint64_t *)&v57->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
LABEL_69:
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        return 1;
      }
      return 1;
    }
    if (v57)
    {
      v35 = (unint64_t *)&v57->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      goto LABEL_80;
    }
  }
  else
  {
    if (v6 != CFArrayGetTypeID())
      return 1;
    sub_207CFBA9C((std::__shared_weak_count_vtbl **)&cf, (uint64_t)a2);
    v14 = cf;
    if (cf && (v15 = CFArrayGetTypeID(), CFGetTypeID(v14) == v15))
    {
      sub_207CB7A4C(&v59, (std::__shared_weak_count_vtbl *)cf, 1);
    }
    else
    {
      v59 = 0;
      v60 = 0;
    }
    v37 = v57;
    if (v57)
    {
      v38 = (unint64_t *)&v57->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    Count = CFArrayGetCount((CFArrayRef)v59);
    if (!Count)
    {
LABEL_66:
      v32 = v60;
      if (v60)
      {
        v46 = (unint64_t *)&v60->__shared_owners_;
        do
          v34 = __ldaxr(v46);
        while (__stlxr(v34 - 1, v46));
        goto LABEL_69;
      }
      return 1;
    }
    v41 = 0;
    while (1)
    {
      ValueAtIndex = (std::__shared_weak_count_vtbl *)CFArrayGetValueAtIndex((CFArrayRef)v59, v41);
      sub_207CF871C((std::__shared_weak_count_vtbl **)&cf, ValueAtIndex, 1);
      if (!sub_207CFF454(&v58, &cf, v58))
        break;
      v43 = v57;
      if (v57)
      {
        v44 = (unint64_t *)&v57->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (++v41 == Count)
        goto LABEL_66;
    }
    v48 = v57;
    if (v57)
    {
      v49 = (unint64_t *)&v57->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v32 = v60;
    if (v60)
    {
      v51 = (unint64_t *)&v60->__shared_owners_;
      do
        v36 = __ldaxr(v51);
      while (__stlxr(v36 - 1, v51));
LABEL_80:
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  return 0;
}

void sub_207CFF8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_207CFF8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_207C99D78((uint64_t)va1);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207CFF90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_207C99D78((uint64_t)va);
  sub_207C99D78(v6 - 48);
  _Unwind_Resume(a1);
}

void sub_207CFF928(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207C99D78(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_207CFF93C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C072840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CFF94C(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C072840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CFF96C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_8;
}

void sub_207CFF9E4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_207CFF9E4(a1, *(_QWORD *)a2);
    sub_207CFF9E4(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_207CFFA44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C072890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207CFFA54(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C072890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207CFFA74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = a1[3];
  if (v8)
  {
    v9 = a1[4];
    v10 = (void *)a1[3];
    if (v9 == v8)
    {
      a1[4] = v8;
      operator delete(v10);
    }
    else
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v11 = (void *)a1[3];
      a1[4] = v8;
      operator delete(v11);
    }
  }
}

void sub_207CFFB70(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  CFTypeRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::logic_error *exception;
  CFTypeRef cf;
  std::__shared_weak_count *v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;

  sub_207CFFD60(&cf, a1);
  v4 = cf;
  v3 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  sub_207CF9D84(&v23, (std::__shared_weak_count_vtbl *)cf, 1);
  v8 = v23;
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *a2 = v8;
    a2[1] = (std::__shared_weak_count_vtbl *)v9;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
    do
      v13 = __ldaxr(v10);
    while (__stlxr(v13 - 1, v10));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *a2 = v23;
    a2[1] = 0;
  }
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_207CFFD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CFFD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207CFFD60(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableDictionaryRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *value;
  std::__shared_weak_count *v41;
  void *key;
  std::__shared_weak_count *v43;
  CFMutableDictionaryRef theDict[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  sub_207CF95E0((std::__shared_weak_count_vtbl **)theDict, Mutable, 0);
  v6 = theDict[0];
  v5 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (v9)
  {
LABEL_6:
    if (v6)
      goto LABEL_7;
LABEL_41:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_41;
LABEL_7:
  v12 = (int *)*a2;
  v10 = (int *)(a2 + 1);
  v11 = v12;
  if (v12 == v10)
  {
LABEL_8:
    *(_OWORD *)a1 = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_207CF8F18((uint64_t)(v11 + 8), (CFStringRef *)&key);
    sub_207CF8A80(v11 + 14, (CFNumberRef *)&value);
    v14 = key;
    v13 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = v41;
    if (!v14)
      break;
    v19 = value;
    if (v41)
    {
      v20 = (unint64_t *)&v41->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!v19)
    {
      v18 = v41;
      break;
    }
    CFDictionarySetValue(theDict[0], key, value);
    v23 = v41;
    if (!v41)
      goto LABEL_28;
    v24 = (unint64_t *)&v41->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v26 = v43;
      if (v43)
      {
LABEL_29:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_28:
      v26 = v43;
      if (v43)
        goto LABEL_29;
    }
    v29 = (int *)*((_QWORD *)v11 + 1);
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = *(int **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (int *)*((_QWORD *)v11 + 2);
        v31 = *(_QWORD *)v30 == (_QWORD)v11;
        v11 = v30;
      }
      while (!v31);
    }
    v11 = v30;
    if (v30 == v10)
      goto LABEL_8;
  }
  *a1 = 0;
  a1[1] = 0;
  if (v18)
  {
    v32 = (unint64_t *)&v18->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = v43;
  if (v43)
  {
    v35 = (unint64_t *)&v43->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_53:
  v37 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v38 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_207D00080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v17 = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207D00144(_QWORD *a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableDictionaryRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  std::__shared_weak_count *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  BOOL v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  CFMutableDictionaryRef v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::logic_error *exception;
  CFTypeRef cf[2];
  void *value;
  std::__shared_weak_count *v57;
  void *key;
  std::__shared_weak_count *v59;
  CFMutableDictionaryRef theDict[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  sub_207CF95E0((std::__shared_weak_count_vtbl **)theDict, Mutable, 0);
  v6 = theDict[0];
  v5 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (v9)
  {
LABEL_6:
    if (v6)
      goto LABEL_7;
LABEL_41:
    *(_OWORD *)cf = 0uLL;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v6)
    goto LABEL_41;
LABEL_7:
  v12 = (int *)*a1;
  v10 = (int *)(a1 + 1);
  v11 = v12;
  if (v12 == v10)
  {
LABEL_8:
    *(_OWORD *)cf = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_207CF9170((uint64_t)(v11 + 8), (CFStringRef *)&key);
    sub_207CF8A80(v11 + 14, (CFNumberRef *)&value);
    v14 = key;
    v13 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = v57;
    if (!v14)
      break;
    v19 = value;
    if (v57)
    {
      v20 = (unint64_t *)&v57->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      do
        v22 = __ldaxr(v20);
      while (__stlxr(v22 - 1, v20));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!v19)
    {
      v18 = v57;
      break;
    }
    CFDictionarySetValue(theDict[0], key, value);
    v23 = v57;
    if (!v57)
      goto LABEL_28;
    v24 = (unint64_t *)&v57->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v26 = v59;
      if (v59)
      {
LABEL_29:
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
LABEL_28:
      v26 = v59;
      if (v59)
        goto LABEL_29;
    }
    v29 = (int *)*((_QWORD *)v11 + 1);
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = *(int **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (int *)*((_QWORD *)v11 + 2);
        v31 = *(_QWORD *)v30 == (_QWORD)v11;
        v11 = v30;
      }
      while (!v31);
    }
    v11 = v30;
    if (v30 == v10)
      goto LABEL_8;
  }
  *(_OWORD *)cf = 0uLL;
  if (v18)
  {
    v32 = (unint64_t *)&v18->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v34 = v59;
  if (v59)
  {
    v35 = (unint64_t *)&v59->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_53:
  v37 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v38 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (cf[1])
  {
    v40 = (unint64_t *)((char *)cf[1] + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      (*(void (**)(CFTypeRef))(*(_QWORD *)cf[1] + 16))(cf[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)cf[1]);
    }
  }
  if (!cf[0])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  sub_207CF95E0((std::__shared_weak_count_vtbl **)theDict, (std::__shared_weak_count_vtbl *)cf[0], 1);
  v43 = theDict[0];
  v44 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v45 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    *a2 = v43;
    a2[1] = (CFMutableDictionaryRef)v44;
    do
      v47 = __ldxr(v45);
    while (__stxr(v47 + 1, v45));
    do
      v48 = __ldaxr(v45);
    while (__stlxr(v48 - 1, v45));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  else
  {
    *a2 = theDict[0];
    a2[1] = 0;
  }
  v49 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v50 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (cf[1])
  {
    v52 = (unint64_t *)((char *)cf[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      (*(void (**)(CFTypeRef))(*(_QWORD *)cf[1] + 16))(cf[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)cf[1]);
    }
  }
}

void sub_207D005D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D005F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D00608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a16)
  {
    v21 = (unint64_t *)&a16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207D006CC(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  CFTypeRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::logic_error *exception;
  CFTypeRef cf;
  std::__shared_weak_count *v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;

  sub_207CFFD60(&cf, a1);
  v4 = cf;
  v3 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
  }
  sub_207CF95E0(&v23, (std::__shared_weak_count_vtbl *)cf, 1);
  v8 = v23;
  v9 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    *a2 = v8;
    a2[1] = (std::__shared_weak_count_vtbl *)v9;
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
    do
      v13 = __ldaxr(v10);
    while (__stlxr(v13 - 1, v10));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    *a2 = v23;
    a2[1] = 0;
  }
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_207D0088C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D008A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207D008BC(uint64_t a1, const void *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *value;
  std::__shared_weak_count *v22;

  v7 = *(CFMutableDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_7:
  sub_207CF8F18(a3, (CFStringRef *)&value);
  v12 = value;
  v11 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v16 = v12 != 0;
      if (!v12)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v16 = v12 != 0;
  if (v12)
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, value);
LABEL_14:
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_207D00A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_207D00A20(const void **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  const void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  CFTypeRef v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  CFTypeRef v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_15:
      v14 = *a1;
      goto LABEL_16;
    }
  }
  if (!v5)
    goto LABEL_15;
LABEL_7:
  v10 = *(CFTypeRef *)a2;
  v9 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v9)
    goto LABEL_12;
  v11 = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v14 = *a1;
    if (v10)
      return CFEqual(v14, *(CFTypeRef *)a2) != 0;
  }
  else
  {
LABEL_12:
    v14 = *a1;
    if (v10)
      return CFEqual(v14, *(CFTypeRef *)a2) != 0;
  }
LABEL_16:
  v16 = (std::__shared_weak_count *)a1[1];
  if (!v16)
    goto LABEL_21;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v14)
      return 0;
  }
  else
  {
LABEL_21:
    if (v14)
      return 0;
  }
  v21 = *(CFTypeRef *)a2;
  v20 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v20)
    return v21 == 0;
  v22 = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (v24)
    return v21 == 0;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return v21 == 0;
}

CFErrorRef *sub_207D00BEC(CFErrorRef *a1, const std::error_condition *a2, std::string::size_type *a3, const __CFAllocator *a4)
{
  std::__shared_weak_count *v8;
  std::string::size_type v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::string::size_type v13;
  CFDictionaryRef v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  const std::error_category *v32;
  const std::error_category *cat;
  CFIndex val;
  CFErrorRef v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const char *v40;
  size_t v41;
  std::string::size_type v42;
  std::string *p_p;
  uint64_t v44;
  uint64_t v45;
  const __CFString *v46;
  CFIndex v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::string __p;
  char v60;
  CFDictionaryRef theDict[2];
  void *value[2];

  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  sub_207D006CC(&__p, (std::__shared_weak_count_vtbl **)value);
  *(_OWORD *)theDict = *(_OWORD *)value;
  sub_207CFF9E4((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  v9 = *a3;
  v8 = (std::__shared_weak_count *)a3[1];
  if (!v8)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      goto LABEL_28;
  }
  else
  {
LABEL_6:
    if (!v9)
      goto LABEL_28;
  }
  v14 = (CFDictionaryRef)*a3;
  v13 = a3[1];
  __p.__r_.__value_.__r.__words[0] = *a3;
  __p.__r_.__value_.__l.__size_ = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v14)
    CFRetain(v14);
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18 = v17;
  v17->__shared_owners_ = 0;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727F0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_24;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v18);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_24;
  }
  v23 = (unint64_t *)&size->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    v25 = (std::__shared_weak_count *)theDict[1];
    theDict[0] = v14;
    theDict[1] = (CFDictionaryRef)v18;
    if (v25)
      goto LABEL_25;
LABEL_31:
    v28 = (const void *)*MEMORY[0x24BDBD378];
    goto LABEL_33;
  }
LABEL_24:
  v25 = (std::__shared_weak_count *)theDict[1];
  theDict[0] = v14;
  theDict[1] = (CFDictionaryRef)v18;
  if (!v25)
    goto LABEL_31;
LABEL_25:
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v28 = (const void *)*MEMORY[0x24BDBD378];
    v14 = theDict[0];
    v18 = (std::__shared_weak_count *)theDict[1];
    if (!theDict[1])
      goto LABEL_37;
    goto LABEL_33;
  }
LABEL_28:
  v28 = (const void *)*MEMORY[0x24BDBD378];
  v14 = theDict[0];
  v18 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_37;
LABEL_33:
  v29 = (unint64_t *)&v18->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (v31)
  {
LABEL_37:
    if (!v14)
      goto LABEL_43;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!v14)
  {
LABEL_43:
    std::error_condition::message(&__p, a2);
    sub_207D008BC((uint64_t)theDict, v28, (uint64_t)&__p);
    goto LABEL_44;
  }
LABEL_40:
  value[0] = 0;
  if (!v28)
    goto LABEL_43;
  if (!CFDictionaryGetValueIfPresent(theDict[0], v28, (const void **)value))
    goto LABEL_43;
  sub_207CF9014((CFIndex)value[0], &__p);
  if (!v60)
    goto LABEL_43;
LABEL_44:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    cat = a2->__cat_;
    if (cat != std::generic_category())
      goto LABEL_53;
  }
  else
  {
    v32 = a2->__cat_;
    if (v32 != std::generic_category())
      goto LABEL_53;
  }
  val = a2->__val_;
  if ((_DWORD)val)
  {
    sub_207D0178C((std::__shared_weak_count_vtbl **)&__p, (uint64_t)theDict);
    v35 = CFErrorCreate(a4, (CFErrorDomain)*MEMORY[0x24BDBD390], val, (CFDictionaryRef)__p.__r_.__value_.__l.__data_);
    v36 = (std::__shared_weak_count *)operator new(0x20uLL);
    v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC80;
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
    v37 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_73;
    v38 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    goto LABEL_71;
  }
LABEL_53:
  v40 = (const char *)((uint64_t (*)(const std::error_category *))a2->__cat_->name)(a2->__cat_);
  v41 = strlen(v40);
  if (v41 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    p_p = (std::string *)operator new(v44 + 1);
    __p.__r_.__value_.__l.__size_ = v42;
    __p.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_60;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v41;
  p_p = &__p;
  if (v41)
LABEL_60:
    memcpy(p_p, v40, v42);
  p_p->__r_.__value_.__s.__data_[v42] = 0;
  sub_207CF8F18((uint64_t)&__p, (CFStringRef *)value);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = (const __CFString *)value[0];
  v47 = a2->__val_;
  sub_207D0178C((std::__shared_weak_count_vtbl **)&__p, (uint64_t)theDict);
  v35 = CFErrorCreate(a4, v46, v47, (CFDictionaryRef)__p.__r_.__value_.__l.__data_);
  v36 = (std::__shared_weak_count *)operator new(0x20uLL);
  v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C06FC80;
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
  v48 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v49 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v37 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v51 = (unint64_t *)((char *)value[1] + 8);
    do
      v39 = __ldaxr(v51);
    while (__stlxr(v39 - 1, v51));
LABEL_71:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
LABEL_73:
  v52 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v53 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *a1 = v35;
  a1[1] = (CFErrorRef)v36;
  v55 = (unint64_t *)&v36->__shared_owners_;
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
  do
    v57 = __ldaxr(v55);
  while (__stlxr(v57 - 1, v55));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  return a1;
}

void sub_207D01128()
{
  __break(1u);
}

void sub_207D011D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  __cxa_end_catch();
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a16)
  {
    v18 = (unint64_t *)(a16 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    JUMPOUT(0x207D01238);
  }
  JUMPOUT(0x207D01298);
}

void sub_207D0125C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x207D01298);
}

void sub_207D0127C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  sub_207CFF9E4((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_207D01294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207D012D8(__CFError **a1@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  std::__shared_weak_count *v4;
  __CFError *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __CFError *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  CFDictionaryRef v24;
  std::__shared_weak_count *v25;
  CFDictionaryRef v26;
  std::__shared_weak_count *v27;
  _BYTE v28[16];

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/src/ErrorRef.cpp", 249, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_10:
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v23 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v24 = CFErrorCopyUserInfo(v9);
  v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
  v25 = v13;
  v26 = v24;
  v27 = v13;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v28[0] = 0;
  v28[8] = 0;
  sub_207CFA638((uint64_t)&v26, (uint64_t)v28, a2);
  v16 = v27;
  if (v27)
  {
    v17 = (unint64_t *)&v27->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v23)
  {
    v21 = (unint64_t *)&v23->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_207D014C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_207C99D78((uint64_t)&a13);
  sub_207C99D78((uint64_t)&a11);
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D014EC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D01504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D01528(const std::error_condition *a1@<X0>, uint64_t a2@<X1>, CFErrorRef *a3@<X8>)
{
  const __CFAllocator *Default;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::string::size_type v10[3];
  char **v11;
  char *v12[2];
  __int128 v13;

  v12[0] = 0;
  v12[1] = 0;
  v11 = v12;
  sub_207D006CC(&v11, (std::__shared_weak_count_vtbl **)&v13);
  *(_OWORD *)v10 = v13;
  sub_207CFF9E4((uint64_t)&v11, v12[0]);
  sub_207D008BC((uint64_t)v10, (const void *)*MEMORY[0x24BDBD3A8], a2);
  Default = CFAllocatorGetDefault();
  sub_207D00BEC(a3, a1, v10, Default);
  v7 = (std::__shared_weak_count *)v10[1];
  if (v10[1])
  {
    v8 = (unint64_t *)(v10[1] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_207D01608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_207CFF9E4((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_207D01620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207D01634(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727F0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207D01744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D01758(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D01770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207D0178C(std::__shared_weak_count_vtbl **a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;

  v4 = *(std::__shared_weak_count_vtbl **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v15 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v4)
    CFRetain(v4);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  v9 = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C070A98;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v4;
  *a1 = v4;
  a1[1] = (std::__shared_weak_count_vtbl *)v7;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!v15)
    return a1;
  v12 = (unint64_t *)&v15->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_207D0189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D018B0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D018C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D018E8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D018FC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

uint64_t sub_207D0191C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_207D0198C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0728E0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207D01A4C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D01A60()
{
  __break(1u);
}

void sub_207D01A8C()
{
  __cxa_end_catch();
  JUMPOUT(0x207D01A94);
}

void sub_207D01AA0(CFNumberRef *a1)
{
  char *v1;

  v1 = (char *)sub_207D01AE0 + 4 * aE[CFNumberGetType(*a1) - 1];
  __asm { BR              X10 }
}

_QWORD *sub_207D01AE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 8;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(8uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_QWORD *sub_207D01B3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  uint64_t v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 12;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(8uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_BYTE *sub_207D01B98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _BYTE *v20;
  _BYTE *result;
  char v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LOBYTE(v18) = v22;
  *(_BYTE *)v16 = 5;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(1uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_BYTE)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_WORD *sub_207D01BF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _WORD *v20;
  _WORD *result;
  __int16 v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LOWORD(v18) = v22;
  *(_BYTE *)v16 = 6;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(2uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_WORD)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_DWORD *sub_207D01C50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  _DWORD *v20;
  _DWORD *result;
  int v22;

  v18 = *v17;
  v22 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v22);
  LODWORD(v18) = v22;
  *(_BYTE *)v16 = 7;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v20 = operator new(4uLL);
  *(_QWORD *)(v16 + 8) = v20;
  *v20 = (_DWORD)v18;
  result = v20 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

_DWORD *sub_207D01CAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int valuePtr, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const __CFNumber **v17;
  const __CFNumber *v18;
  int Type;
  int v20;
  _DWORD *v21;
  _DWORD *result;
  int v23;

  v18 = *v17;
  v23 = 0;
  Type = CFNumberGetType(v18);
  CFNumberGetValue(v18, (CFNumberType)Type, &v23);
  v20 = v23;
  *(_BYTE *)v16 = 11;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 8) = 0;
  v21 = operator new(4uLL);
  *(_QWORD *)(v16 + 8) = v21;
  *v21 = v20;
  result = v21 + 1;
  *(_QWORD *)(v16 + 16) = result;
  *(_QWORD *)(v16 + 24) = result;
  return result;
}

std::__shared_weak_count_vtbl **sub_207D01D08(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0726B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  *a1 = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_207D01DAC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D01DC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207D01DD8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

double sub_207D01E10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t valuePtr, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _OWORD *v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  int v23;
  __int16 v24;
  const __CFAllocator *v25;
  CFNumberType v26;
  std::__shared_weak_count_vtbl *v27;
  double result;
  __int128 v29;
  _BYTE *v30;
  _BYTE *v31;
  __int16 v32;

  LOBYTE(v29) = 5;
  v22 = operator new(1uLL);
  *((_QWORD *)&v29 + 1) = v22;
  *v22 = 127;
  v30 = v22 + 1;
  v31 = v22 + 1;
  v23 = sub_208206DF8(v21, &v29);
  if (*((_QWORD *)&v29 + 1))
  {
    v30 = (_BYTE *)*((_QWORD *)&v29 + 1);
    operator delete(*((void **)&v29 + 1));
  }
  v24 = *(unsigned __int8 *)sub_2082062F0((uint64_t)v21);
  if (v23 == 1)
  {
    v32 = v24;
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = kCFNumberSInt16Type;
  }
  else
  {
    LOBYTE(v32) = v24;
    v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v26 = kCFNumberSInt8Type;
  }
  v27 = (std::__shared_weak_count_vtbl *)CFNumberCreate(v25, v26, &v32);
  sub_207D01D08((std::__shared_weak_count_vtbl **)&v29, v27);
  result = *(double *)&v29;
  *v20 = v29;
  return result;
}

void sub_207D02094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207D020C4(CFTypeID a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  std::string v9;

  v3 = (std::__shared_weak_count_vtbl *)CFCopyTypeIDDescription(a1);
  sub_207D0217C(&v7, v3, 0);
  sub_207CF9014((CFIndex)v7, &v9);
  *a2 = v9;
  memset(&v9, 0, sizeof(v9));
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_207D02168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207D0217C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727A0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207D0223C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D02250()
{
  __break(1u);
}

void sub_207D0227C()
{
  __cxa_end_catch();
  JUMPOUT(0x207D02284);
}

_QWORD *sub_207D02290(_QWORD *a1, CFTypeRef cf)
{
  __CFString *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  unint64_t v9;
  void *v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unsigned __int8 v15;
  CFTypeRef v16;
  std::string __p;
  int v18;
  char v19;
  char *v20;

  v16 = cf;
  if (cf)
  {
    v3 = (__CFString *)CFCopyDescription(cf);
    v13 = v3;
    v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0727A0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    v14 = v4;
    sub_207CF9014((CFIndex)v3, &__p);
    if (!(_BYTE)v18
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/src/Ref.cpp", 37, (uint64_t)"maybe_string", 12, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v8 = sub_207CBAB98(a1, (uint64_t)p_p, size);
    if ((_BYTE)v18 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return v8;
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    return v8;
  }
  else
  {
    v18 = 0;
    sub_207D02538((uint64_t)&v20, (uint64_t)&__p, &v16);
    if (v18 == -1)
      sub_207CA9F48();
    v20 = &v19;
    ((void (*)(void **__return_ptr, char **, std::string *))off_24C072968[v18])(&v13, &v20, &__p);
    if (v18 != -1)
      ((void (*)(char **, std::string *))off_24C072938[v18])(&v20, &__p);
    if ((v15 & 0x80u) == 0)
      v11 = &v13;
    else
      v11 = v13;
    if ((v15 & 0x80u) == 0)
      v12 = v15;
    else
      v12 = (uint64_t)v14;
    v8 = sub_207CBAB98(a1, (uint64_t)v11, v12);
    if (((char)v15 & 0x80000000) == 0)
      return v8;
    operator delete(v13);
    return v8;
  }
}

void sub_207D02498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D024B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D024C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  JUMPOUT(0x207D02530);
}

void sub_207D024D0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D024E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207D024F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_207CA9EF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D0250C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19 && a18 < 0)
    operator delete(__p);
  sub_207C99D78((uint64_t)&a9);
  JUMPOUT(0x207D02530);
}

void sub_207D02538(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _OWORD *v4;
  int v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;

  if (*a3)
  {
    v4 = operator new(0x118uLL);
    *v4 = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[9] = 0u;
    v4[10] = 0u;
    v4[11] = 0u;
    v4[12] = 0u;
    v4[13] = 0u;
    v4[14] = 0u;
    v4[15] = 0u;
    v4[16] = 0u;
    *((_QWORD *)v4 + 34) = 0;
    sub_207CA2878((uint64_t)v4);
    v22 = v4;
    std::ostream::operator<<();
    v5 = *((_DWORD *)v4 + 30);
    if ((v5 & 0x10) != 0)
    {
      v9 = *((_QWORD *)v4 + 14);
      v10 = *((_QWORD *)v4 + 9);
      if (v9 < v10)
      {
        *((_QWORD *)v4 + 14) = v10;
        v9 = v10;
      }
      v11 = (const void *)*((_QWORD *)v4 + 8);
      v6 = v9 - (_QWORD)v11;
      if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_26;
    }
    else
    {
      if ((v5 & 8) == 0)
      {
        v6 = 0;
        HIBYTE(v20) = 0;
        v7 = __dst;
        goto LABEL_18;
      }
      v11 = (const void *)*((_QWORD *)v4 + 5);
      v6 = *((_QWORD *)v4 + 7) - (_QWORD)v11;
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
        sub_207C95C50();
    }
    if (v6 >= 0x17)
    {
      v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v12 = v6 | 7;
      v13 = v12 + 1;
      v7 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)v6;
      v20 = v13 | 0x8000000000000000;
      __dst[0] = v7;
    }
    else
    {
      HIBYTE(v20) = v6;
      v7 = __dst;
      if (!v6)
        goto LABEL_18;
    }
    memmove(v7, v11, v6);
LABEL_18:
    *((_BYTE *)v7 + v6) = 0;
    v14 = v22;
    if (v22)
    {
      v15 = MEMORY[0x24BEDB7F0];
      v16 = *MEMORY[0x24BEDB7F0];
      *v22 = *MEMORY[0x24BEDB7F0];
      v17 = *(_QWORD *)(v15 + 72);
      *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
      v14[3] = MEMORY[0x24BEDB848] + 16;
      v14[2] = v17;
      if (*((char *)v14 + 111) < 0)
        operator delete((void *)v14[11]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD027B8](v14 + 16);
      operator delete(v14);
    }
    v22 = (_QWORD *)a2;
    v23 = (const char *)__dst;
    v24 = a2;
    v25 = (const char *)__dst;
    v26 = (const char *)__dst;
    v18 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v18 == -1)
      sub_207CA9F48();
    v21 = &v22;
    ((void (*)(_QWORD ***, uint64_t))off_24C072920[v18])(&v21, a2);
    if (SHIBYTE(v20) < 0)
      operator delete(__dst[0]);
    return;
  }
  v22 = (_QWORD *)a2;
  v23 = "nullptr";
  v24 = a2;
  v25 = "nullptr";
  v26 = "nullptr";
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_207CA9F48();
  __dst[0] = &v22;
  ((void (*)(void **, uint64_t))off_24C072950[v8])(__dst, a2);
}

void sub_207D027B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_207D027DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2082155DC((void **)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_207D027F0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  if (a3 && cf)
    CFRetain(cf);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C0728E0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = cf;
  *a1 = cf;
  a1[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_207D028B0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_207D028C4()
{
  __break(1u);
}

void sub_207D028F0()
{
  __cxa_end_catch();
  JUMPOUT(0x207D028F8);
}

_OWORD *sub_207D02904(_OWORD *a1, uint64_t a2, Boolean a3)
{
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  uint64_t v11;
  CFStringRef filePath;
  std::__shared_weak_count *v13;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  sub_207CF8F18((uint64_t)__p, &filePath);
  v5 = (std::__shared_weak_count_vtbl *)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, a3);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (SHIBYTE(v11) < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  sub_207D0198C((std::__shared_weak_count_vtbl **)__p, v5, 0);
  *a1 = *(_OWORD *)__p;
  return a1;
}

void sub_207D029FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207D02A58(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::string __p;
  char v16;

  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/src/URLRef.cpp", 58, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20821B5CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_10:
  v9 = (std::__shared_weak_count_vtbl *)CFURLCopyScheme(*(CFURLRef *)a1);
  sub_207D0217C(&v13, v9, 0);
  sub_207CF9014((CFIndex)v13, &__p);
  v10 = v14;
  if (!v14)
    goto LABEL_14;
  v11 = (unint64_t *)&v14->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_14:
    if (v16)
      goto LABEL_15;
LABEL_19:
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v16)
    goto LABEL_19;
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_207CA40D8(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v16)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
}

void sub_207D02BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D02C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D02C20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *p_p;
  BOOL v11;
  std::__shared_weak_count_vtbl *v12;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::string __p;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_10;
  }
  else
  {
LABEL_6:
    if (v5)
      goto LABEL_10;
  }
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Foundation/src/URLRef.cpp", 64, (uint64_t)"IsValid()", 9, (uint64_t)&unk_20821B5CB, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
LABEL_10:
  sub_207D02A58(a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 4)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v11 = LODWORD(p_p->__r_.__value_.__l.__data_) == 1701603686;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_24:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v11)
        goto LABEL_25;
      goto LABEL_19;
    }
  }
  else
  {
    v11 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
  }
  if (!v11)
  {
LABEL_25:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
LABEL_19:
  v12 = (std::__shared_weak_count_vtbl *)CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
  sub_207D0217C(&v19, v12, 0);
  sub_207CF9014((CFIndex)v19, &__p);
  v22[0] = __p.__r_.__value_.__l.__size_;
  v13 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v15 = v22[0];
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v22 + 7);
  *(_BYTE *)(a2 + 23) = v14;
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 7) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_207D02E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207C99D78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D02E34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void (*****v4)(void **__return_ptr, void *);
  uint64_t v5;
  int v6;
  int v7;
  void **v8;
  char *v9;
  __int128 v10;
  void **v11;
  void *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  _DWORD *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  char v42;
  __int128 v43;
  _BYTE *v44;
  size_t v45;
  void *v46;
  size_t v47;
  void **i;
  _QWORD *v49;
  void **v50;
  int v51;
  char v52;
  __int128 v53;
  void *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v69;
  uint64_t v70;
  _BYTE *v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  BOOL v78;
  char v79;
  void *v80;
  size_t v81;
  uint64_t v82;
  void **v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  double v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  void (****v93)(void **__return_ptr, void *);
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  void (****v100)(void **__return_ptr, void *);
  _BYTE *v101;
  int v102;
  void *v103;
  _BYTE *v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v109;
  void (*****v110)(void **__return_ptr, void *);
  _OWORD v111[4];
  uint64_t v112;
  _BYTE v113[52];
  _BYTE v114[28];
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  _BYTE v131[52];
  _BYTE v132[28];
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  _BYTE v149[112];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _OWORD v154[2];
  __int128 v155;
  _BYTE v156[48];
  __int128 v157;
  _DWORD *v158;
  _QWORD v159[7];
  _BYTE v160[28];
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _BYTE v180[28];
  __int128 v181;
  __int128 v182;
  int v183;
  __int128 v184;
  __int128 v185;
  int v186;
  void *v187[6];
  __int16 v188;
  char v189;
  char v190;
  __int16 v191;
  char v192;
  int v193;
  double v194;
  unint64_t v195;
  void *__src[2];
  uint64_t v197;
  char v198;
  void *v199[2];
  char v200;
  char v201;
  void *v202;
  char v203;
  char v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  int v210;
  void *__dst;
  void **v212;
  void **v213;
  uint64_t v214;
  __int16 v215;
  char v216;
  char v217;
  char v218;
  _BYTE __p[32];
  uint64_t v220;
  unint64_t v221;
  __int128 v222;
  uint64_t v223;
  _BYTE v224[32];
  uint64_t v225;
  uint64_t v226;
  int v227;
  _BYTE v228[28];
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  int v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  _BYTE v250[28];
  uint64_t v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  int v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  _DWORD *v285;
  int v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  _BYTE v292[28];
  uint64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  int v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  _OWORD v312[2];
  uint64_t v313;
  unint64_t v314;
  __int128 v315;
  int v316;
  __int128 v317;
  __int128 v318;
  int v319;
  void *v320;
  __int128 v321;
  uint64_t v322;

  v322 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v4 = (void (*****)(void **__return_ptr, void *))operator new(0x10uLL);
  *v4 = 0;
  v4[1] = 0;
  v203 = 0;
  v199[0] = 0;
  LOBYTE(v199[1]) = 0;
  v205 = 0u;
  v206 = 0u;
  v207 = 0u;
  v208 = 0u;
  v209 = 0u;
  v210 = 1065353216;
  __dst = 0;
  v212 = 0;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v218 = 0;
  v5 = a1[27];
  v6 = *(_DWORD *)a1;
  v213 = 0;
  v214 = v5;
  if (v6 == 1)
    v7 = 3;
  else
    v7 = 2;
  if (v6 == 2)
    v7 = 4;
  HIDWORD(v199[0]) = v7;
  v110 = v4;
  if (*((char *)a1 + 31) < 0)
  {
    sub_207CA40D8(__p, (void *)a1[1], a1[2]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 1);
    *(_QWORD *)&__p[16] = a1[3];
  }
  sub_207CC1A38((void **)&v205, (void **)__p, (void **)&__p[24], 1uLL);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  __src[1] = 0;
  __src[0] = 0;
  v197 = 0;
  v198 = 1;
  if (__src != a1 + 8)
  {
    if (*((char *)a1 + 87) < 0)
    {
      sub_207CC2180(__src, (void *)a1[8], a1[9]);
    }
    else
    {
      *(_OWORD *)__src = *((_OWORD *)a1 + 4);
      v197 = a1[10];
    }
  }
  v109 = a2;
  if (SHIBYTE(v197) < 0)
  {
    sub_207CA40D8(__p, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__src;
    *(_QWORD *)&__p[16] = v197;
  }
  __p[24] = v198;
  v8 = v213;
  v9 = (char *)__dst;
  if (v213 == __dst)
  {
    if (v213)
    {
      v11 = v212;
      v12 = v213;
      if (v212 != v213)
      {
        do
        {
          if (*((char *)v11 - 9) < 0)
            operator delete(*(v11 - 4));
          v11 -= 4;
        }
        while (v11 != v8);
        v12 = __dst;
      }
      v212 = v8;
      operator delete(v12);
      __dst = 0;
      v212 = 0;
      v213 = 0;
    }
    v14 = operator new(0x20uLL);
    v15 = v14;
    __dst = v14;
    v212 = (void **)v14;
    v16 = (void **)(v14 + 4);
    v213 = (void **)(v14 + 4);
    if ((__p[23] & 0x80000000) != 0)
    {
      sub_207CA40D8(v14, *(void **)__p, *(unint64_t *)&__p[8]);
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)__p;
      v14[2] = *(_QWORD *)&__p[16];
    }
    *((_BYTE *)v15 + 24) = __p[24];
LABEL_38:
    v212 = v16;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
  if (v212 != __dst)
  {
    if (__dst != __p)
    {
      if (*((char *)__dst + 23) < 0)
      {
        if (__p[23] >= 0)
          v44 = __p;
        else
          v44 = *(_BYTE **)__p;
        if (__p[23] >= 0)
          v45 = __p[23];
        else
          v45 = *(_QWORD *)&__p[8];
        sub_207CC2244((void **)__dst, v44, v45);
      }
      else if ((__p[23] & 0x80) != 0)
      {
        sub_207CC2180(__dst, *(void **)__p, *(size_t *)&__p[8]);
      }
      else
      {
        v10 = *(_OWORD *)__p;
        *((_QWORD *)__dst + 2) = *(_QWORD *)&__p[16];
        *(_OWORD *)v9 = v10;
      }
    }
    v9[24] = __p[24];
    v16 = (void **)(v9 + 32);
    for (i = v212; i != v16; i -= 4)
    {
      if (*((char *)i - 9) < 0)
        operator delete(*(i - 4));
    }
    goto LABEL_38;
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    sub_207CA40D8(__dst, *(void **)__p, *(unint64_t *)&__p[8]);
  }
  else
  {
    v13 = *(_OWORD *)__p;
    *((_QWORD *)__dst + 2) = *(_QWORD *)&__p[16];
    *(_OWORD *)v9 = v13;
  }
  v9[24] = __p[24];
  v212 = (void **)(v9 + 32);
  if ((__p[23] & 0x80000000) != 0)
LABEL_39:
    operator delete(*(void **)__p);
LABEL_40:
  memset((char *)v111 + 8, 0, 32);
  memset((char *)&v111[2] + 8, 0, 24);
  LODWORD(v112) = 1065353216;
  *(_DWORD *)v113 = 0;
  *(_OWORD *)&v113[4] = xmmword_208232BA0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)&v113[20] = _Q0;
  *(_OWORD *)&v113[36] = xmmword_208232BB0;
  *(_OWORD *)v114 = xmmword_208232BC0;
  *(_DWORD *)&v114[16] = 1042536202;
  v114[20] = 0;
  *(_DWORD *)&v114[24] = 1042536202;
  *(_DWORD *)v131 = 5;
  *(_OWORD *)&v131[4] = xmmword_208232BD0;
  *(_OWORD *)&v131[20] = _Q0;
  *(_OWORD *)&v131[36] = xmmword_208232BB0;
  *(_OWORD *)v132 = xmmword_208232BC0;
  *(_DWORD *)&v132[16] = 1042536202;
  v132[20] = 0;
  *(_DWORD *)&v132[24] = 1042536202;
  v149[0] = 1;
  *(_OWORD *)&v149[8] = xmmword_208232BE0;
  *(_OWORD *)&v149[24] = xmmword_208232BF0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)&v149[40] = xmmword_208232C00;
  *(_OWORD *)&v149[56] = _Q1;
  *(_OWORD *)&v149[72] = xmmword_208232C10;
  *(_QWORD *)&v149[88] = 0x3FF0000000000000;
  *(_WORD *)&v149[96] = 256;
  v149[98] = 1;
  *(_QWORD *)&v149[104] = 2;
  *(_OWORD *)((char *)v154 + 11) = *(_OWORD *)&v149[83];
  v154[0] = xmmword_208232C10;
  v153 = _Q1;
  v152 = xmmword_208232C00;
  v150 = xmmword_208232BE0;
  v151 = xmmword_208232BF0;
  v155 = xmmword_208232C20;
  *(_DWORD *)v156 = 1061158912;
  *(_OWORD *)&v156[8] = xmmword_208232C30;
  *(_OWORD *)&v156[24] = xmmword_208232C40;
  *(_QWORD *)&v156[40] = 3;
  v22 = operator new(4uLL);
  *(_QWORD *)&v157 = v22;
  *v22 = 4;
  v158 = v22 + 1;
  *((_QWORD *)&v157 + 1) = v22 + 1;
  v159[0] = 0x200000000;
  *(_OWORD *)v160 = xmmword_208232BC0;
  *(_OWORD *)&v159[1] = xmmword_208232C50;
  *(_OWORD *)&v159[3] = xmmword_208232C60;
  *(_OWORD *)&v159[5] = xmmword_208232C70;
  *(_DWORD *)&v160[16] = 1042536202;
  v160[20] = 0;
  *(_DWORD *)&v160[24] = 1042536202;
  v177 = xmmword_208232C80;
  v178 = xmmword_208232C90;
  *(_QWORD *)&v179 = 0x3FB53F7CED916873;
  *((_QWORD *)&v179 + 1) = 10;
  *(_QWORD *)v180 = 0x3FE0000000000000;
  *(_QWORD *)&v180[8] = 0x3FF0CCCCCCCCCCCDLL;
  v180[16] = 1;
  *(_QWORD *)&v180[20] = 0x3E99999A3F000000;
  v181 = 0u;
  v182 = 0u;
  v183 = 1065353216;
  LOBYTE(v184) = 0;
  *(_QWORD *)((char *)&v184 + 4) = 0x3D4CCCCD3F7EF9DBLL;
  HIDWORD(v184) = 0;
  v185 = xmmword_208232CA0;
  v186 = 1045220557;
  memset(v187, 0, sizeof(v187));
  v188 = 1;
  v189 = 0;
  v190 = 0;
  v191 = 256;
  v192 = 1;
  v193 = 1118437376;
  v194 = 0.0;
  sub_207D24750((uint64_t)v199, (uint64_t)__p);
  *(_QWORD *)&v111[0] = *(_QWORD *)__p;
  if (*((_QWORD *)&v111[0] + 1))
  {
    v23 = *(_QWORD *)&v111[1];
    v24 = (void *)*((_QWORD *)&v111[0] + 1);
    if (*(_QWORD *)&v111[1] != *((_QWORD *)&v111[0] + 1))
    {
      do
        v23 = sub_207D049E4(v23 - 424);
      while (v23 != *((_QWORD *)&v111[0] + 1));
      v24 = (void *)*((_QWORD *)&v111[0] + 1);
    }
    *(_QWORD *)&v111[1] = *((_QWORD *)&v111[0] + 1);
    operator delete(v24);
  }
  *(_OWORD *)((char *)v111 + 8) = *(_OWORD *)&__p[8];
  *((_QWORD *)&v111[1] + 1) = *(_QWORD *)&__p[24];
  memset(&__p[8], 0, 24);
  if (*((_QWORD *)&v111[3] + 1))
  {
    v25 = *(_QWORD **)&v111[3];
    if (*(_QWORD *)&v111[3])
    {
      do
      {
        v26 = (_QWORD *)*v25;
        sub_207D046E4((uint64_t)(v25 + 3));
        operator delete(v25);
        v25 = v26;
      }
      while (v26);
    }
    *(_QWORD *)&v111[3] = 0;
    v27 = *((_QWORD *)&v111[2] + 1);
    if (*((_QWORD *)&v111[2] + 1))
    {
      v28 = 0;
      do
        *(_QWORD *)(*(_QWORD *)&v111[2] + 8 * v28++) = 0;
      while (v27 != v28);
    }
    *((_QWORD *)&v111[3] + 1) = 0;
  }
  v29 = v220;
  v220 = 0;
  v30 = *(void **)&v111[2];
  *(_QWORD *)&v111[2] = v29;
  if (v30)
    operator delete(v30);
  v31 = v221;
  v221 = 0;
  v111[3] = v222;
  LODWORD(v112) = v223;
  *((_QWORD *)&v111[2] + 1) = v31;
  if (*((_QWORD *)&v222 + 1))
  {
    v32 = *(_QWORD *)(v222 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v32 >= v31)
        v32 %= v31;
    }
    else
    {
      v32 &= v31 - 1;
    }
    *(_QWORD *)(*(_QWORD *)&v111[2] + 8 * v32) = &v111[3];
    v222 = 0uLL;
  }
  *(_QWORD *)&v113[32] = v225;
  *(_OWORD *)v113 = *(_OWORD *)v224;
  *(_OWORD *)&v113[16] = *(_OWORD *)&v224[16];
  *(_QWORD *)&v113[40] = v226;
  *(_DWORD *)&v113[48] = v227;
  *(_OWORD *)v114 = *(_OWORD *)v228;
  *(_OWORD *)&v114[12] = *(_OWORD *)&v228[12];
  v115 = v229;
  v116 = v230;
  v118 = v232;
  v117 = v231;
  v119 = v233;
  v120 = v234;
  v122 = v236;
  v121 = v235;
  v123 = v237;
  v124 = v238;
  v126 = v240;
  v125 = v239;
  v127 = v241;
  v128 = v242;
  v130 = v244;
  v129 = v243;
  *(_QWORD *)&v131[32] = v247;
  *(_OWORD *)v131 = v245;
  *(_OWORD *)&v131[16] = v246;
  *(_DWORD *)&v131[48] = v249;
  *(_QWORD *)&v131[40] = v248;
  *(_OWORD *)&v132[12] = *(_OWORD *)&v250[12];
  *(_OWORD *)v132 = *(_OWORD *)v250;
  v134 = v252;
  v133 = v251;
  v135 = v253;
  v136 = v254;
  v138 = v256;
  v137 = v255;
  v139 = v257;
  v140 = v258;
  v142 = v260;
  v141 = v259;
  v143 = v261;
  v144 = v262;
  v146 = v264;
  v145 = v263;
  v147 = v265;
  v148 = v266;
  *(_OWORD *)&v149[32] = v269;
  *(_OWORD *)&v149[48] = v270;
  *(_OWORD *)v149 = v267;
  *(_OWORD *)&v149[16] = v268;
  *(_OWORD *)&v149[96] = v273;
  v150 = v274;
  *(_OWORD *)&v149[64] = v271;
  *(_OWORD *)&v149[80] = v272;
  v154[0] = v278;
  v154[1] = v279;
  v152 = v276;
  v153 = v277;
  v151 = v275;
  v155 = v280;
  *(_OWORD *)v156 = v281;
  *(_OWORD *)&v156[16] = v282;
  *(_OWORD *)&v156[32] = v283;
  if ((_QWORD)v157)
  {
    *((_QWORD *)&v157 + 1) = v157;
    operator delete((void *)v157);
    v157 = 0uLL;
    v158 = 0;
  }
  v157 = v284;
  v158 = v285;
  v285 = 0;
  v284 = 0uLL;
  LODWORD(v159[0]) = v286;
  *(_OWORD *)((char *)v159 + 4) = v287;
  *(_OWORD *)((char *)&v159[2] + 4) = v288;
  *(_QWORD *)((char *)&v159[4] + 4) = v289;
  HIDWORD(v159[6]) = v291;
  *(_QWORD *)((char *)&v159[5] + 4) = v290;
  *(_OWORD *)&v160[12] = *(_OWORD *)&v292[12];
  *(_OWORD *)v160 = *(_OWORD *)v292;
  v161 = v293;
  v162 = v294;
  v164 = v296;
  v163 = v295;
  v165 = v297;
  v166 = v298;
  v168 = v300;
  v167 = v299;
  v169 = v301;
  v170 = v302;
  v172 = v304;
  v171 = v303;
  v173 = v305;
  v174 = v306;
  v176 = v308;
  v175 = v307;
  *(_OWORD *)&v180[12] = *(_OWORD *)((char *)v312 + 12);
  v179 = v311;
  *(_OWORD *)v180 = v312[0];
  v177 = v309;
  v178 = v310;
  if (*((_QWORD *)&v182 + 1))
  {
    v33 = (_QWORD *)v182;
    if ((_QWORD)v182)
    {
      do
      {
        v34 = (_QWORD *)*v33;
        operator delete(v33);
        v33 = v34;
      }
      while (v34);
    }
    *(_QWORD *)&v182 = 0;
    v35 = *((_QWORD *)&v181 + 1);
    if (*((_QWORD *)&v181 + 1))
    {
      v36 = 0;
      do
        *(_QWORD *)(v181 + 8 * v36++) = 0;
      while (v35 != v36);
    }
    *((_QWORD *)&v182 + 1) = 0;
  }
  v37 = v313;
  v313 = 0;
  v38 = (void *)v181;
  *(_QWORD *)&v181 = v37;
  if (v38)
    operator delete(v38);
  v39 = v314;
  *((_QWORD *)&v181 + 1) = v314;
  v314 = 0;
  v183 = v316;
  v182 = v315;
  if (*((_QWORD *)&v315 + 1))
  {
    v40 = *(_QWORD *)(v315 + 8);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v40 >= v39)
        v40 %= v39;
    }
    else
    {
      v40 &= v39 - 1;
    }
    *(_QWORD *)(v181 + 8 * v40) = &v182;
    v315 = 0uLL;
  }
  v184 = v317;
  v185 = v318;
  v186 = v319;
  if (v187[0])
  {
    v187[1] = v187[0];
    operator delete(v187[0]);
  }
  v187[0] = v320;
  *(_OWORD *)&v187[1] = v321;
  v321 = 0uLL;
  v320 = 0;
  sub_207D04BC4(__p);
  if (*((_BYTE *)a1 + 160))
  {
    *((double *)&v177 + 1) = 1.0 / *((double *)a1 + 19);
    *(_QWORD *)&v177 = *((_QWORD *)&v177 + 1);
  }
  else if (*(_DWORD *)a1 == 2)
  {
    v177 = 0uLL;
  }
  if (*((_BYTE *)a1 + 176))
    *((double *)&v178 + 1) = 1.0 / *((double *)a1 + 21);
  LOBYTE(v215) = *((_BYTE *)a1 + 233);
  if (*((_BYTE *)a1 + 56))
  {
    if (*((_QWORD *)&v111[0] + 1) != *(_QWORD *)&v111[1])
    {
      v41 = (void **)(*((_QWORD *)&v111[0] + 1) + 8);
      if ((_QWORD *)(*((_QWORD *)&v111[0] + 1) + 8) != a1 + 4)
      {
        v42 = *((_BYTE *)a1 + 55);
        if (*(char *)(*((_QWORD *)&v111[0] + 1) + 31) < 0)
        {
          if (v42 >= 0)
            v46 = a1 + 4;
          else
            v46 = (void *)a1[4];
          if (v42 >= 0)
            v47 = *((unsigned __int8 *)a1 + 55);
          else
            v47 = a1[5];
          sub_207CC2244(v41, v46, v47);
        }
        else if ((*((_BYTE *)a1 + 55) & 0x80) != 0)
        {
          sub_207CC2180(v41, (void *)a1[4], a1[5]);
        }
        else
        {
          v43 = *((_OWORD *)a1 + 2);
          *(_QWORD *)(*((_QWORD *)&v111[0] + 1) + 24) = a1[6];
          *(_OWORD *)v41 = v43;
        }
      }
    }
  }
  if (*((_BYTE *)a1 + 112))
  {
    if (*((_QWORD *)&v111[3] + 1))
    {
      *(_QWORD *)__p = 0;
      v49 = sub_207D04CA0((uint64_t)&v111[2], 0, __p);
      v50 = (void **)(v49 + 9);
      if (v49 + 9 != a1 + 11)
      {
        v51 = *((char *)v49 + 95);
        v52 = *((_BYTE *)a1 + 111);
        if (v51 < 0)
        {
          if (v52 >= 0)
            v54 = a1 + 11;
          else
            v54 = (void *)a1[11];
          if (v52 >= 0)
            v55 = *((unsigned __int8 *)a1 + 111);
          else
            v55 = a1[12];
          sub_207CC2244(v50, v54, v55);
        }
        else if ((*((_BYTE *)a1 + 111) & 0x80) != 0)
        {
          sub_207CC2180(v50, (void *)a1[11], a1[12]);
        }
        else
        {
          v53 = *(_OWORD *)(a1 + 11);
          v50[2] = (void *)a1[13];
          *(_OWORD *)v50 = v53;
        }
      }
    }
  }
  if (*(char *)(*((_QWORD *)&v111[0] + 1) + 31) < 0)
  {
    v56 = *(_QWORD *)(*((_QWORD *)&v111[0] + 1) + 8);
    v57 = *(_QWORD *)(*((_QWORD *)&v111[0] + 1) + 16);
  }
  else
  {
    v56 = *((_QWORD *)&v111[0] + 1) + 8;
    v57 = *(unsigned __int8 *)(*((_QWORD *)&v111[0] + 1) + 31);
  }
  if (v57 >= 12)
  {
    v58 = v57 + v56;
    v59 = *(_QWORD *)(v58 - 12);
    v60 = *(unsigned int *)(v58 - 4);
    if (v59 == 0x75622E6C65646F6DLL && v60 == 1701602414)
      *(_BYTE *)(*((_QWORD *)&v111[0] + 1) + 141) = 1;
  }
  *(_QWORD *)__p = 0;
  v62 = sub_207D04CA0((uint64_t)&v111[2], 0, __p);
  if (*((char *)v62 + 95) < 0)
  {
    v63 = (_QWORD *)v62[9];
    v64 = v62[10];
    if (v64 <= 11)
      goto LABEL_149;
  }
  else
  {
    v63 = v62 + 9;
    v64 = *((unsigned __int8 *)v62 + 95);
    if ((unint64_t)v64 <= 0xB)
      goto LABEL_149;
  }
  v65 = (char *)v63 + v64;
  v66 = *(_QWORD *)(v65 - 12);
  v67 = *((unsigned int *)v65 - 1);
  if (v66 == 0x75622E6C65646F6DLL && v67 == 1701602414)
  {
    *(_QWORD *)__p = 0;
    *((_BYTE *)sub_207D04CA0((uint64_t)&v111[2], 0, __p) + 425) = 1;
  }
LABEL_149:
  v69 = (unsigned __int16)sub_207CF7368();
  if (v69 <= 0x100)
    LOBYTE(v69) = 0;
  if (!(_BYTE)v69)
  {
    v71 = (_BYTE *)*((_QWORD *)&v111[0] + 1);
    v70 = *(_QWORD *)&v111[1];
    if (*((_QWORD *)&v111[0] + 1) == *(_QWORD *)&v111[1])
      goto LABEL_159;
    v72 = *((_DWORD *)a1 + 46) == 3;
    v73 = *(_QWORD *)&v111[1] - *((_QWORD *)&v111[0] + 1) - 424;
    if (v73 >= 0x1A8)
    {
      v75 = v73 / 0x1A8 + 1;
      v74 = *((_QWORD *)&v111[0] + 1) + 424 * (v75 & 0x1FFFFFFFFFFFFFELL);
      v76 = v75 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        v71[140] = v72;
        v71[564] = v72;
        v71[144] = v72;
        v71[568] = v72;
        v71 += 848;
        v76 -= 2;
      }
      while (v76);
      if (v75 == (v75 & 0x1FFFFFFFFFFFFFELL))
      {
LABEL_159:
        v77 = *(uint64_t **)&v111[3];
        if (*(_QWORD *)&v111[3])
        {
          v78 = *((_DWORD *)a1 + 46) == 3;
          do
          {
            *((_BYTE *)v77 + 424) = v78;
            *((_BYTE *)v77 + 427) = v78;
            v77 = (uint64_t *)*v77;
          }
          while (v77);
        }
        goto LABEL_162;
      }
    }
    else
    {
      v74 = *((_QWORD *)&v111[0] + 1);
    }
    do
    {
      *(_BYTE *)(v74 + 140) = v72;
      *(_BYTE *)(v74 + 144) = v72;
      v74 += 424;
    }
    while (v74 != v70);
    goto LABEL_159;
  }
LABEL_162:
  if (&v187[3] != a1 + 15)
  {
    v79 = *((_BYTE *)a1 + 143);
    if (SHIBYTE(v187[5]) < 0)
    {
      if (v79 >= 0)
        v80 = a1 + 15;
      else
        v80 = (void *)a1[15];
      if (v79 >= 0)
        v81 = *((unsigned __int8 *)a1 + 143);
      else
        v81 = a1[16];
      sub_207CC2244(&v187[3], v80, v81);
    }
    else if ((*((_BYTE *)a1 + 143) & 0x80) != 0)
    {
      sub_207CC2180(&v187[3], (void *)a1[15], a1[16]);
    }
    else
    {
      *(_OWORD *)&v187[3] = *(_OWORD *)(a1 + 15);
      v187[5] = *((void **)a1 + 17);
    }
  }
  LOBYTE(v188) = *((_DWORD *)a1 + 46) == 3;
  v82 = HIBYTE(v187[5]);
  if (SHIBYTE(v187[5]) < 0)
    v82 = (uint64_t)v187[4];
  if (v82 >= 12)
  {
    v83 = SHIBYTE(v187[5]) >= 0 ? &v187[3] : (void **)v187[3];
    v84 = (char *)v83 + v82;
    v85 = *(_QWORD *)(v84 - 12);
    v86 = *((unsigned int *)v84 - 1);
    if (v85 == 0x75622E6C65646F6DLL && v86 == 1701602414)
      HIBYTE(v188) = 1;
  }
  v192 = 0;
  v88 = 1.0;
  if (!*((_BYTE *)a1 + 232))
    v88 = 0.0;
  v194 = v88;
  LOBYTE(v191) = *((_BYTE *)a1 + 144);
  HIBYTE(v191) = *((_BYTE *)a1 + 208);
  if (*((_BYTE *)a1 + 200))
  {
    v89 = *((_QWORD *)&v111[3] + 1);
    if (*((_QWORD *)&v111[3] + 1))
    {
      v90 = 0;
      do
      {
        v195 = v90;
        v91 = a1[24];
        *(_QWORD *)__p = &v195;
        sub_207D0531C((uint64_t)&v181, &v195, (uint64_t)&unk_20822AD51, (_QWORD **)__p)[3] = v91;
        ++v90;
      }
      while (v89 != v90);
    }
  }
  if (SHIBYTE(v197) < 0)
    operator delete(__src[0]);
  sub_207D05640((uint64_t)v199);
  v92 = operator new(0x140uLL);
  *((_QWORD *)v92 + 1) = 0;
  *((_QWORD *)v92 + 2) = 0;
  *(_QWORD *)v92 = off_24C0729E0;
  v93 = sub_207D05A74((void (****)(void **__return_ptr, void *))v92 + 3, (uint64_t)v111);
  v94 = (std::__shared_weak_count *)v110[1];
  *v110 = v93;
  v110[1] = (void (****)(void **__return_ptr, void *))v92;
  if (!v94)
    goto LABEL_198;
  p_shared_owners = (unint64_t *)&v94->__shared_owners_;
  do
    v96 = __ldaxr(p_shared_owners);
  while (__stlxr(v96 - 1, p_shared_owners));
  if (v96)
  {
LABEL_198:
    if ((SHIBYTE(v187[5]) & 0x80000000) == 0)
      goto LABEL_200;
    goto LABEL_199;
  }
  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
  std::__shared_weak_count::__release_weak(v94);
  if (SHIBYTE(v187[5]) < 0)
LABEL_199:
    operator delete(v187[3]);
LABEL_200:
  sub_207D04BC4(v111);
  v97 = (std::__shared_weak_count *)operator new(0x20uLL);
  v98 = v97;
  v97->__shared_owners_ = 0;
  v99 = (unint64_t *)&v97->__shared_owners_;
  v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C072990;
  v97->__shared_weak_owners_ = 0;
  v97[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  v100 = *v110;
  if (*v110)
  {
    if (*((_BYTE *)v100 + 264))
    {
      *(_QWORD *)v109 = v110;
      *(_QWORD *)(v109 + 8) = v97;
      *(_BYTE *)(v109 + 120) = 1;
      return kdebug_trace();
    }
    *(_OWORD *)__p = *((_OWORD *)v100 + 9);
    v101 = sub_207CCB3BC(&__p[16], (__int128 *)v100 + 10);
    v111[0] = *(_OWORD *)__p;
    LOBYTE(v111[1]) = 0;
    v113[40] = 0;
    if ((_BYTE)v226)
    {
      BYTE8(v111[2]) = 0;
      v102 = v221;
      if ((_BYTE)v221)
      {
        v111[1] = *(_OWORD *)v101;
        *(_QWORD *)&v111[2] = *((_QWORD *)v101 + 2);
        *((_QWORD *)v101 + 1) = 0;
        *((_QWORD *)v101 + 2) = 0;
        *(_QWORD *)v101 = 0;
        BYTE8(v111[2]) = 1;
      }
      LOBYTE(v111[3]) = 0;
      v113[32] = 0;
      if ((_BYTE)v225)
      {
        v112 = v223;
        v111[3] = v222;
        v222 = 0uLL;
        *(_QWORD *)v113 = *(_QWORD *)v224;
        *(_OWORD *)&v113[8] = *(_OWORD *)&v224[8];
        *(_QWORD *)&v113[24] = *(_QWORD *)&v224[24];
        v223 = 0;
        memset(&v224[8], 0, 24);
        v113[32] = 1;
      }
      v113[40] = 1;
      v113[48] = 0;
      if (v102 && SHIBYTE(v220) < 0)
      {
        v103 = *(void **)&__p[16];
LABEL_232:
        operator delete(v103);
      }
    }
    else
    {
      v113[48] = 0;
    }
  }
  else
  {
    sub_207CCB5A4((uint64_t)v199, "Pipeline creation failed");
    BYTE8(v207) = 1;
    sub_207CCAFD0(0xCu, (__int128 *)v199, (uint64_t)__p);
    v111[0] = *(_OWORD *)__p;
    LOBYTE(v111[1]) = 0;
    v113[40] = 0;
    if ((_BYTE)v226)
    {
      BYTE8(v111[2]) = 0;
      if ((_BYTE)v221)
      {
        v111[1] = *(_OWORD *)&__p[16];
        *(_QWORD *)&v111[2] = v220;
        *(_QWORD *)&__p[24] = 0;
        v220 = 0;
        *(_QWORD *)&__p[16] = 0;
        BYTE8(v111[2]) = 1;
      }
      LOBYTE(v111[3]) = 0;
      v113[32] = 0;
      if ((_BYTE)v225)
      {
        v112 = v223;
        v111[3] = v222;
        v222 = 0uLL;
        *(_QWORD *)v113 = *(_QWORD *)v224;
        *(_OWORD *)&v113[8] = *(_OWORD *)&v224[8];
        *(_QWORD *)&v113[24] = *(_QWORD *)&v224[24];
        v223 = 0;
        memset(&v224[8], 0, 24);
        v113[32] = 1;
      }
      v113[40] = 1;
      v113[48] = 0;
      if ((_BYTE)v221 && SHIBYTE(v220) < 0)
        operator delete(*(void **)&__p[16]);
      if (!BYTE8(v207))
        goto LABEL_234;
    }
    else
    {
      v113[48] = 0;
      if (!BYTE8(v207))
        goto LABEL_234;
    }
    if ((_BYTE)v207)
    {
      if (SHIBYTE(v206) < 0)
        operator delete(*((void **)&v205 + 1));
      if (v204 < 0)
        operator delete(v202);
    }
    if (v201 && v200 < 0)
    {
      v103 = v199[0];
      goto LABEL_232;
    }
  }
LABEL_234:
  *(_OWORD *)__p = v111[0];
  v104 = sub_207CCB3BC(&__p[16], &v111[1]);
  *(_OWORD *)v109 = *(_OWORD *)__p;
  *(_BYTE *)(v109 + 16) = 0;
  *(_BYTE *)(v109 + 112) = 0;
  if ((_BYTE)v226)
  {
    *(_BYTE *)(v109 + 40) = 0;
    v105 = v221;
    if ((_BYTE)v221)
    {
      *(_OWORD *)(v109 + 16) = *(_OWORD *)v104;
      *(_QWORD *)(v109 + 32) = *((_QWORD *)v104 + 2);
      *((_QWORD *)v104 + 1) = 0;
      *((_QWORD *)v104 + 2) = 0;
      *(_QWORD *)v104 = 0;
      *(_BYTE *)(v109 + 40) = 1;
    }
    *(_BYTE *)(v109 + 48) = 0;
    *(_BYTE *)(v109 + 104) = 0;
    if ((_BYTE)v225)
    {
      v106 = *(_QWORD *)v224;
      *(_QWORD *)(v109 + 64) = v223;
      *(_OWORD *)(v109 + 48) = v222;
      v222 = 0uLL;
      *(_QWORD *)(v109 + 72) = v106;
      *(_OWORD *)(v109 + 80) = *(_OWORD *)&v224[8];
      *(_QWORD *)(v109 + 96) = *(_QWORD *)&v224[24];
      v223 = 0;
      memset(&v224[8], 0, 24);
      *(_BYTE *)(v109 + 104) = 1;
    }
    *(_BYTE *)(v109 + 112) = 1;
    *(_BYTE *)(v109 + 120) = 0;
    if (v105 && SHIBYTE(v220) < 0)
      operator delete(*(void **)&__p[16]);
  }
  else
  {
    *(_BYTE *)(v109 + 120) = 0;
  }
  if (v113[48] || !v113[40])
    goto LABEL_251;
  if (!v113[32])
    goto LABEL_248;
  if ((v113[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v113[8]);
    if (SHIBYTE(v112) < 0)
      goto LABEL_256;
LABEL_248:
    if (BYTE8(v111[2]))
      goto LABEL_249;
    goto LABEL_251;
  }
  if ((SHIBYTE(v112) & 0x80000000) == 0)
    goto LABEL_248;
LABEL_256:
  operator delete(*(void **)&v111[3]);
  if (BYTE8(v111[2]))
  {
LABEL_249:
    if (SBYTE7(v111[2]) < 0)
      operator delete(*(void **)&v111[1]);
    goto LABEL_251;
  }
  do
LABEL_251:
    v107 = __ldaxr(v99);
  while (__stlxr(v107 - 1, v99));
  if (!v107)
  {
    ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
    std::__shared_weak_count::__release_weak(v98);
  }
  return kdebug_trace();
}

void sub_207D042DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  unint64_t v9;
  void *v11;
  va_list va;

  va_start(va, a9);
  STACK[0x5A8] = v9;
  if (SLOBYTE(STACK[0x607]) < 0)
    operator delete((void *)STACK[0x5F0]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  sub_207D05640((uint64_t)&STACK[0x510]);
  v11 = (void *)sub_207C99D78(a7);
  operator delete(v11);
  sub_207CD822C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D04458(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) || !*(_BYTE *)(a1 + 112))
    return a1;
  if (*(_BYTE *)(a1 + 104))
  {
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(*(void **)(a1 + 48));
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_8;
    }
    operator delete(*(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_8:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_207D044EC(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (*(char *)(a1 + 1111) < 0)
  {
    operator delete(*(void **)(a1 + 1088));
    a1 = v1;
  }
  return sub_207D04BC4((_QWORD *)a1);
}

uint64_t sub_207D0452C@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X6>, unsigned __int8 a7@<W7>, uint64_t a8@<X8>, double a9@<D0>)
{
  kdebug_trace();
  sub_207D0624C(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return kdebug_trace();
}

void sub_207D04618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CD822C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207D04630(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_207D046E4((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void **sub_207D0468C(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_207D049E4(v3 - 424);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207D046E4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  sub_207D04890(a1 + 288);
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(void **)(a1 + 72);
    if (v5 != v4)
    {
      do
      {
        v7 = *(void **)(v5 - 72);
        if (v7)
        {
          *(_QWORD *)(v5 - 64) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v5 - 96);
        if (v8)
        {
          *(_QWORD *)(v5 - 88) = v8;
          operator delete(v8);
        }
        v5 -= 192;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v6);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 32))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 32))
  {
    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_207D047D0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  return a1;
}

void **sub_207D04810(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 9);
        if (v5)
        {
          *((_QWORD *)v3 - 8) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 12);
        if (v6)
        {
          *((_QWORD *)v3 - 11) = v6;
          operator delete(v6);
        }
        v3 -= 192;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207D04890(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  sub_207D04974(a1 + 224, *(char **)(a1 + 232));
  if (*(_BYTE *)(a1 + 216) && *(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    v2 = *(void ***)(a1 + 120);
    if (!v2)
      goto LABEL_11;
  }
  else
  {
    v2 = *(void ***)(a1 + 120);
    if (!v2)
      goto LABEL_11;
  }
  v3 = *(void ***)(a1 + 128);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 1) < 0)
        operator delete(*(v3 - 3));
      v3 -= 3;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 120);
  }
  *(_QWORD *)(a1 + 128) = v2;
  operator delete(v4);
LABEL_11:
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_207D04974(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    sub_207D04974(a1, *(_QWORD *)a2);
    sub_207D04974(a1, *((_QWORD *)a2 + 1));
    v4 = (void *)*((_QWORD *)a2 + 7);
    if (v4)
    {
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_207D049E4(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (*(char *)(a1 + 407) < 0)
  {
    operator delete(*(void **)(a1 + 384));
    if ((*(char *)(a1 + 383) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(void ***)(a1 + 336);
      if (!v2)
        goto LABEL_4;
LABEL_8:
      v3 = *(void ***)(a1 + 344);
      if (v3 == v2)
      {
        *(_QWORD *)(a1 + 344) = v2;
        operator delete(v2);
        if (*(_BYTE *)(a1 + 304))
          goto LABEL_15;
      }
      else
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*(v3 - 3));
          v3 -= 3;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 336);
        *(_QWORD *)(a1 + 344) = v2;
        operator delete(v4);
        if (*(_BYTE *)(a1 + 304))
          goto LABEL_15;
      }
LABEL_16:
      if ((*(char *)(a1 + 271) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_34;
    }
  }
  else if ((*(char *)(a1 + 383) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 360));
  v2 = *(void ***)(a1 + 336);
  if (v2)
    goto LABEL_8;
LABEL_4:
  if (!*(_BYTE *)(a1 + 304))
    goto LABEL_16;
LABEL_15:
  if ((*(char *)(a1 + 303) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(*(void **)(a1 + 280));
  if ((*(char *)(a1 + 271) & 0x80000000) == 0)
  {
LABEL_17:
    if ((*(char *)(a1 + 239) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)(a1 + 248));
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
LABEL_18:
    sub_207D04974(a1 + 192, *(char **)(a1 + 200));
    v5 = *(void **)(a1 + 168);
    if (!v5)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 216));
  sub_207D04974(a1 + 192, *(char **)(a1 + 200));
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
LABEL_19:
    *(_QWORD *)(a1 + 176) = v5;
    operator delete(v5);
  }
LABEL_20:
  v6 = *(_QWORD *)(a1 + 96);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 104);
    v8 = *(void **)(a1 + 96);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v8);
  }
  if (*(_BYTE *)(a1 + 88) && *(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_38;
  }
  else if (!*(_BYTE *)(a1 + 56))
  {
    goto LABEL_38;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
LABEL_38:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_207D04BC4(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = (void *)a1[133];
  if (v2)
  {
    a1[134] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[125];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)a1[123];
  a1[123] = 0;
  if (v5)
    operator delete(v5);
  v6 = (void *)a1[87];
  if (v6)
  {
    a1[88] = v6;
    operator delete(v6);
  }
  v7 = (_QWORD *)a1[6];
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      sub_207D046E4((uint64_t)(v7 + 3));
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)a1[4];
  a1[4] = 0;
  if (v9)
    operator delete(v9);
  v10 = a1[1];
  if (v10)
  {
    v11 = a1[2];
    v12 = (void *)a1[1];
    if (v11 != v10)
    {
      do
        v11 = sub_207D049E4(v11 - 424);
      while (v11 != v10);
      v12 = (void *)a1[1];
    }
    a1[2] = v10;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_207D04CA0(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == a2)
            {
              if (result[2] == a2)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == a2)
          {
            if (result[2] == a2)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_22:
  v27 = operator new(0x2C0uLL);
  *v27 = 0;
  v27[1] = a2;
  v27[2] = *a3;
  bzero(v27 + 3, 0x2A8uLL);
  sub_207D0502C((uint64_t)(v27 + 3));
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
    goto LABEL_50;
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v19 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v19)
    goto LABEL_34;
  if (prime < *(_QWORD *)&v19)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < *(_QWORD *)&v19)
LABEL_34:
      sub_207CA6B84(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= a2)
    {
      v3 = a2 % v7;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (a2 % v7));
      v25 = v27;
      if (!v24)
        goto LABEL_53;
      goto LABEL_51;
    }
    v3 = a2;
LABEL_50:
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    v25 = v27;
    if (!v24)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v23 & a2;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & a2));
  v25 = v27;
  if (!v24)
  {
LABEL_53:
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v27)
    {
      v26 = *(_QWORD *)(*v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7)
          v26 %= v7;
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_59;
  }
LABEL_51:
  *v25 = *v24;
  *v24 = v27;
LABEL_59:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_207D04FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D04FE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D04FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D04FE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D04FE8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_207D046E4((uint64_t)v2 + 24);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207D0502C(uint64_t a1)
{
  *(_QWORD *)a1 = -1;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 180) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_BYTE *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_WORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 274) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 280) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  sub_207D051B4(a1 + 288);
  *(_BYTE *)(a1 + 568) = 1;
  *(_DWORD *)(a1 + 572) = 1066192077;
  *(_QWORD *)(a1 + 576) = 1;
  *(_QWORD *)(a1 + 584) = 0x3F0000003E800000;
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 596) = 0x402000003E4CCCCDLL;
  *(_QWORD *)(a1 + 608) = 5;
  *(_QWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 624) = 1065352377;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 1092616192;
  *(_WORD *)(a1 + 652) = 257;
  *(_DWORD *)(a1 + 656) = 1075838976;
  *(_WORD *)(a1 + 668) = 0;
  *(_QWORD *)(a1 + 660) = 0;
  *(_QWORD *)(a1 + 672) = 3;
  return a1;
}

void sub_207D0516C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D047D0((_QWORD *)(v1 + 96));
  sub_207D04810((void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*(void **)(v1 + 48));
  if (*(_BYTE *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207D051B4(uint64_t a1)
{
  void *v3[2];
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(int64x2_t *)(a1 + 64) = vdupq_n_s64(0x80uLL);
  *(int64x2_t *)(a1 + 80) = vdupq_n_s64(0x40uLL);
  *(_QWORD *)(a1 + 96) = 8;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 116) = 1;
  v4 = 11;
  strcpy((char *)v3, "3DKeyPoints");
  sub_207CAA110((_QWORD *)(a1 + 120), (uint64_t)v3, 1uLL);
  if (v4 < 0)
    operator delete(v3[0]);
  *(_QWORD *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_208232CB0;
  *(_QWORD *)(a1 + 176) = 1;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 1;
  return a1;
}

void sub_207D052D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (a14 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v14 + 56) && *(char *)(v14 + 55) < 0)
    operator delete(*(void **)(v14 + 32));
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_207D0531C(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_207D0562C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D05640(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (*(_BYTE *)(a1 + 208) && *(char *)(a1 + 207) < 0)
  {
    operator delete(*(void **)(a1 + 184));
    v2 = *(void ***)(a1 + 144);
    if (!v2)
      goto LABEL_11;
  }
  else
  {
    v2 = *(void ***)(a1 + 144);
    if (!v2)
      goto LABEL_11;
  }
  v3 = *(void ***)(a1 + 152);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 144);
  }
  *(_QWORD *)(a1 + 152) = v2;
  operator delete(v4);
LABEL_11:
  v5 = *(_QWORD **)(a1 + 120);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      sub_207D046E4((uint64_t)(v5 + 3));
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(void **)(a1 + 80);
    if (v9 != v8)
    {
      do
        v9 = sub_207D049E4(v9 - 424);
      while (v9 != v8);
      v10 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v8;
    operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(void **)(a1 + 56);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v11;
    operator delete(v13);
  }
  return a1;
}

void sub_207D0578C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D057A0(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t sub_207D05818(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d7appcode15AppCodePipelineEE27__shared_ptr_default_deleteIS3_S3_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d7appcode15AppCodePipelineEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d7appcode15AppCodePipelineEE27__shared_ptr_default_deleteIS3_S3_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d7appcode15AppCodePipelineEE27__shared_ptr_default_deleteIS3_S3_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207D05888(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C0729E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D05898(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C0729E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_207D058B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void (**v9)(void);
  void (*v10)(void);
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 296);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 304);
    v4 = *(void **)(a1 + 296);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 296);
    }
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v4);
  }
  if (!*(_BYTE *)(a1 + 288) && *(_BYTE *)(a1 + 280))
  {
    if (*(_BYTE *)(a1 + 272))
    {
      if (*(char *)(a1 + 271) < 0)
        operator delete(*(void **)(a1 + 248));
      if (*(char *)(a1 + 239) < 0)
        operator delete(*(void **)(a1 + 216));
    }
    if (*(_BYTE *)(a1 + 208) && *(char *)(a1 + 207) < 0)
      operator delete(*(void **)(a1 + 184));
  }
  sub_207CEC654(a1 + 112, *(_QWORD **)(a1 + 128));
  v8 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(void (***)(void))(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v9)
  {
    v10 = *v9;
    *v9 = 0;
    if (v10)
      v9[1]();
    operator delete(v9);
  }
  v11 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)v11[1];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  v15 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

void (****sub_207D05A74(void (****a1)(void **__return_ptr, void *), uint64_t a2))(void **__return_ptr, void *)
{
  void (***v4)(void **__return_ptr, void *);
  void (***v5)(void **__return_ptr, void *);
  int v6;
  float v7;
  float v8;
  float v9;
  void (***v10)(void **__return_ptr, void *);
  void (**v11)(void **__return_ptr, void *);
  void (***v12)(void **__return_ptr, void *);
  void (**v13)(void **__return_ptr, void *);
  __int128 v15;
  void *v16[2];
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  int v27;
  void *__p[2];
  __int128 v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  char v36;
  char v37;
  unsigned __int8 v38;

  *((_OWORD *)a1 + 1) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_DWORD *)a1 + 30) = 1065353216;
  *((_WORD *)a1 + 64) = 256;
  *((_BYTE *)a1 + 264) = 1;
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 733221624;
  kdebug_trace();
  v4 = (void (***)(void **__return_ptr, void *))operator new(0x80uLL);
  LOBYTE(__p[0]) = 0;
  BYTE8(v29) = 0;
  sub_207D354F8((uint64_t)v4, a2, (uint64_t)__p);
  if (BYTE8(v29) && SBYTE7(v29) < 0)
    operator delete(__p[0]);
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    ((void (*)(void (***)(void **__return_ptr, void *)))(*v5)[8])(v5);
    v4 = *a1;
  }
  (**v4)(__p, v4);
  v6 = v38;
  if (!v38)
  {
    v15 = *(_OWORD *)__p;
    sub_207CCB3BC(v16, &v29);
    sub_207D0607C((uint64_t)(a1 + 18), &v15);
    if (v24)
    {
      if (v23)
      {
        if (v22 < 0)
          operator delete(v21);
        if (v20 < 0)
          operator delete(v19);
      }
      if (v18 && v17 < 0)
        operator delete(v16[0]);
    }
    if (!v38 && v37)
    {
      if (v36)
      {
        if (v35 < 0)
          operator delete(v34);
        if (v33 < 0)
          operator delete(v32);
      }
      if (v31 && v30 < 0)
        operator delete((void *)v29);
    }
  }
  kdebug_trace();
  if (v6)
  {
    if (*(_QWORD *)(a2 + 56) != 1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/Pipeline/src/AppCodePipelineImpl.cpp", 63, (uint64_t)"cfg.odt_config.tracker_configs.size() == 1", 42, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v7 = *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16)
       - *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 4);
    *(void (****)(void **__return_ptr, void *))((char *)a1 + 44) = 0;
    *(void (****)(void **__return_ptr, void *))((char *)a1 + 36) = 0;
    *((_DWORD *)a1 + 13) = 0;
    *((_DWORD *)a1 + 16) = 1065353216;
    v8 = v7 * 0.0078125;
    *((float *)a1 + 8) = v7 * 0.0078125;
    v9 = v7 * -0.5;
    *((float *)a1 + 12) = v8;
    *((float *)a1 + 14) = v9;
    *((float *)a1 + 15) = v9;
    v25 = 0u;
    v26 = 0u;
    v27 = 733221632;
    kdebug_trace();
    if (*(_BYTE *)(a2 + 1130))
    {
      v10 = (void (***)(void **__return_ptr, void *))operator new(0x18uLL);
      *v10 = (void (**)(void **__return_ptr, void *))&off_24C074F60;
      v11 = (void (**)(void **__return_ptr, void *))operator new(0x17C8uLL);
      sub_207DDA8B4((uint64_t)v11, a2 + 1088);
      *v10 = (void (**)(void **__return_ptr, void *))&off_24C072BF8;
      v10[1] = v11;
      v10[2] = (void (**)(void **__return_ptr, void *))1;
      v12 = a1[1];
      a1[1] = v10;
      if (!v12)
        goto LABEL_13;
    }
    else
    {
      v10 = (void (***)(void **__return_ptr, void *))operator new(0x18uLL);
      *v10 = (void (**)(void **__return_ptr, void *))&off_24C074F60;
      v13 = (void (**)(void **__return_ptr, void *))operator new(0x17C8uLL);
      sub_207DDA8B4((uint64_t)v13, a2 + 1088);
      *v10 = (void (**)(void **__return_ptr, void *))&off_24C072BF8;
      v10[1] = v13;
      v10[2] = 0;
      v12 = a1[1];
      a1[1] = v10;
      if (!v12)
      {
LABEL_13:
        sub_207DD6A98((uint64_t)v10, (uint64_t)__p);
        if (v38)
        {
          kdebug_trace();
          *((_WORD *)a1 + 64) = *(_WORD *)(a2 + 1128);
          *((_DWORD *)a1 + 33) = *(_DWORD *)(a2 + 1132);
          a1[17] = *(void (****)(void **__return_ptr, void *))(a2 + 1136);
          v38 = 1;
          sub_207D09A50((uint64_t)__p, (uint64_t)(a1 + 18));
          if (!v38 && v37)
          {
            if (v36)
            {
              if (v35 < 0)
                operator delete(v34);
              if (v33 < 0)
                operator delete(v32);
            }
            if (v31 && v30 < 0)
              operator delete((void *)v29);
          }
        }
        else
        {
          v15 = *(_OWORD *)__p;
          sub_207CCB3BC(v16, &v29);
          sub_207D0607C((uint64_t)(a1 + 18), &v15);
          if (v24)
          {
            if (v23)
            {
              if (v22 < 0)
                operator delete(v21);
              if (v20 < 0)
                operator delete(v19);
            }
            if (v18 && v17 < 0)
              operator delete(v16[0]);
          }
          if (!v38 && v37)
          {
            if (v36)
            {
              if (v35 < 0)
                operator delete(v34);
              if (v33 < 0)
                operator delete(v32);
            }
            if (v31 && v30 < 0)
              operator delete((void *)v29);
          }
          kdebug_trace();
        }
        return a1;
      }
    }
    ((void (*)(void (***)(void **__return_ptr, void *)))(*v12)[1])(v12);
    v10 = a1[1];
    goto LABEL_13;
  }
  return a1;
}

void sub_207D05F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void **v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  sub_207D04458((uint64_t)&a31);
  sub_207CD822C((uint64_t)&a25);
  sub_207CBE108(v31 + 34);
  sub_207D04458(v34);
  sub_207D061C4(v33);
  sub_207D06200(v31 + 3);
  sub_207CBBB7C(v32);
  v36 = v31[1];
  v31[1] = 0;
  if (v36)
  {
    (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
    v37 = *v31;
    *v31 = 0;
    if (!v37)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v37 = *v31;
    *v31 = 0;
    if (!v37)
      goto LABEL_3;
  }
  (*(void (**)(void *))(*(_QWORD *)v37 + 64))(v37);
  _Unwind_Resume(a1);
}

uint64_t sub_207D0607C(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  BOOL v4;
  __int128 v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v6 = *a2;
  LOBYTE(__p[0]) = 0;
  v16 = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v9 = 0;
    if (*((_BYTE *)a2 + 40))
    {
      *(_OWORD *)__p = a2[1];
      v8 = *((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 2) = 0;
      v9 = 1;
    }
    LOBYTE(v10) = 0;
    v15 = 0;
    if (*((_BYTE *)a2 + 104))
    {
      v3 = *((_QWORD *)a2 + 9);
      v11 = *((_QWORD *)a2 + 8);
      v10 = a2[3];
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      *((_QWORD *)a2 + 6) = 0;
      v12 = v3;
      *(_OWORD *)v13 = a2[5];
      v14 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      *((_QWORD *)a2 + 12) = 0;
      v15 = 1;
    }
    v16 = 1;
  }
  v17 = 0;
  sub_207D09A50((uint64_t)&v6, a1);
  if (v17)
    v4 = 1;
  else
    v4 = v16 == 0;
  if (!v4)
  {
    if (!v15)
      goto LABEL_14;
    if (SHIBYTE(v14) < 0)
    {
      operator delete(v13[0]);
      if ((SHIBYTE(v11) & 0x80000000) == 0)
      {
LABEL_14:
        if (!v9)
          return a1;
        goto LABEL_15;
      }
    }
    else if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete((void *)v10);
    if (!v9)
      return a1;
LABEL_15:
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

uint64_t sub_207D061C4(uint64_t a1)
{
  void *v2;

  sub_207CEC654(a1 + 16, *(_QWORD **)(a1 + 32));
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void **sub_207D06200(void **a1)
{
  void (**v2)(void);
  void (*v3)(void);

  v2 = (void (**)(void))*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      v2[1]();
    operator delete(v2);
  }
  return a1;
}

void sub_207D0624C(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X6>, unsigned __int8 a7@<W7>, uint64_t a8@<X8>, double a9@<D0>)
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  _BYTE *v42;
  _BYTE *v43;
  size_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  BOOL v63;
  BOOL v64;
  double v65;
  uint64_t v66;
  char *v67;
  float32x2_t *v68;
  float32x2_t *v69;
  float32x2_t *v70;
  float32x2_t *v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x2_t v77;
  uint64_t v78;
  char *v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  float32x2_t *v86;
  int64_t v87;
  unint64_t v88;
  char *v89;
  float32x2_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float32x4_t *v94;
  float32x4_t *v95;
  uint64_t v96;
  float32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float32x2_t v101;
  float32x2_t v102;
  float v103;
  float v104;
  float32x2_t v105;
  float32x2_t v106;
  float v107;
  float32x2_t v108;
  float v109;
  float v110;
  float v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x2_t v114;
  uint64_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  size_t v132;
  char *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  _BYTE *v150;
  char *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  void **v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned __int8 v174;
  uint64_t v175;
  uint64_t j;
  unsigned __int8 v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  char *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  size_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  void (***v209)(char *);
  void (**v210)(char *);
  void *v211;
  _QWORD *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  int v218;
  char *v219;
  _BYTE *v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  size_t v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  size_t v235;
  size_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t k;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BOOL4 v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  void *v261;
  char *v262;
  void *v263;
  __int128 v264;
  std::__shared_weak_count *v265;
  char v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  BOOL v276;
  BOOL v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  int v281;
  void *v282;
  size_t v283;
  void *v284;
  _BYTE *v285;
  int v286;
  int v287;
  char v288;
  char *v289;
  __int128 v290;
  __int128 v291;
  void *v292;
  void *v293;
  __int128 v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  BOOL v303;
  void *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  _QWORD *v309;
  _QWORD *v310;
  char *v311;
  _BYTE *v312;
  uint64_t v313;
  char *v314;
  char *v315;
  _QWORD *v316;
  uint64_t v317;
  __int128 *v319;
  uint64_t v320;
  char *v321;
  uint64_t v322;
  _QWORD *v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  size_t v333;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  void *v337[5];
  char v338;
  void *v339[3];
  char v340;
  __int128 v341;
  __int128 v342;
  int v343;
  uint64_t (**v344)();
  uint64_t v345;
  std::__shared_weak_count *v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  __int16 v354;
  char v355;
  float32x2_t v356;
  unsigned __int32 v357;
  float32x2_t v358;
  unsigned __int32 v359;
  float32x2_t v360;
  unsigned __int32 v361;
  void *v362;
  void *__p;
  char *v364;
  char *v365;
  unsigned __int8 v366;
  char v367;
  __int128 v368;
  int v369;
  char v370;
  _QWORD v371[3];
  char *v372;
  unsigned __int8 v373;
  char v374;
  __int128 v375;
  uint64_t v376;

  v376 = *MEMORY[0x24BDAC8D0];
  if (a2[1] == *a2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/AppCode/Pipeline/src/AppCodePipelineImpl.cpp", 112, (uint64_t)"pixel_buffers.size() >= 1", 25, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  LOBYTE(v339[0]) = 0;
  v340 = 0;
  kdebug_trace();
  v317 = a7;
  if (a7)
    v16 = a6;
  else
    v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *, void **, uint64_t *, uint64_t, uint64_t, _QWORD *, BOOL, double))(*(_QWORD *)*a1 + 32))(&v335, *a1, a2, v339, a3, a4, a5, v16, a7 != 0, a9);
  kdebug_trace();
  if (v338)
  {
    v17 = a1;
    v18 = sub_207D08310((uint64_t)&v335);
    *(_OWORD *)(a1 + 9) = *(_OWORD *)v18;
    v19 = (void **)(a1 + 11);
    v309 = a1 + 11;
    if (a1[14])
    {
      sub_207CEC654((uint64_t)(a1 + 11), (_QWORD *)a1[13]);
      v19 = (void **)(a1 + 11);
      a1[13] = 0;
      v20 = a1[12];
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *(_QWORD *)(*v309 + 8 * i) = 0;
      }
      a1[14] = 0;
    }
    v22 = *(void **)(v18 + 16);
    *(_QWORD *)(v18 + 16) = 0;
    v23 = *v19;
    *v19 = v22;
    if (v23)
    {
      operator delete(v23);
      v19 = (void **)(a1 + 11);
    }
    v26 = *(_QWORD *)(v18 + 32);
    v25 = v18 + 32;
    v24 = v26;
    v27 = *(_QWORD *)(v25 - 8);
    a1[13] = v26;
    v28 = a1 + 13;
    v17[12] = v27;
    *(_QWORD *)(v25 - 8) = 0;
    v29 = *(_QWORD *)(v25 + 8);
    v17[14] = v29;
    *((_DWORD *)v17 + 30) = *(_DWORD *)(v25 + 16);
    if (v29)
    {
      v30 = *(_QWORD *)(v24 + 8);
      v31 = v17[12];
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v30 >= v31)
          v30 %= v31;
      }
      else
      {
        v30 &= v31 - 1;
      }
      *((_QWORD *)*v19 + v30) = v28;
      *(_QWORD *)v25 = 0;
      *(_QWORD *)(v25 + 8) = 0;
    }
    v32 = *a3;
    v341 = 0u;
    v342 = 0u;
    v343 = 733221656;
    kdebug_trace();
    if (*v28)
    {
      v310 = a6 + 41;
      v37 = (_QWORD *)*v28;
      v334 = v32;
      v323 = v17;
      do
      {
        v316 = v37;
        v39 = v37[3];
        v38 = v37[4];
        v322 = v38;
        while (v39 != v38)
        {
          if (*((_BYTE *)v17 + 128) || (v40 = **(_DWORD **)(v39 + 1104), v40 != 2))
          {
            v41 = (_DWORD *)(v39 + 1040);
            v367 = *(_BYTE *)(v39 + 1080);
            if (v367)
            {
              LODWORD(v362) = *v41;
              BYTE4(v362) = *(_BYTE *)(v39 + 1044);
              LOBYTE(__p) = 0;
              v366 = 0;
              if (*(_BYTE *)(v39 + 1072))
              {
                __p = 0;
                v364 = 0;
                v365 = 0;
                v42 = *(_BYTE **)(v39 + 1048);
                v43 = *(_BYTE **)(v39 + 1056);
                v44 = v43 - v42;
                if (v43 != v42)
                {
                  if ((v44 & 0x8000000000000000) != 0)
                    sub_207CF94B8();
                  v45 = (char *)operator new(v43 - v42);
                  v46 = &v45[v44];
                  __p = v45;
                  v365 = &v45[v44];
                  memcpy(v45, v42, v44);
                  v364 = v46;
                }
                v366 = 1;
              }
              v47 = *(_QWORD *)(v39 + 1088);
              v48 = *(std::__shared_weak_count **)(v39 + 1096);
              *(_QWORD *)&v368 = v47;
              *((_QWORD *)&v368 + 1) = v48;
              if (!v48)
              {
LABEL_42:
                if (*(_BYTE *)(v39 + 1080))
                {
                  if (!*(_BYTE *)(v39 + 1072))
                  {
                    *(_BYTE *)(v39 + 1040) = -1;
                    *(_BYTE *)(v39 + 1080) = 0;
                    if (!v48)
                      goto LABEL_51;
                    goto LABEL_49;
                  }
                  v52 = *(void **)(v39 + 1048);
                  *(_QWORD *)(v39 + 1064) = 0;
                  *(_QWORD *)(v39 + 1056) = 0;
                  *(_QWORD *)(v39 + 1048) = 0;
                  *(_BYTE *)(v39 + 1040) = -1;
                  *(_BYTE *)(v39 + 1080) = 0;
                  if (v52)
                  {
                    operator delete(v52);
                    if (!v48)
                      goto LABEL_51;
LABEL_49:
                    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                    do
                      v54 = __ldxr(p_shared_owners);
                    while (__stxr(v54 + 1, p_shared_owners));
LABEL_51:
                    *(_QWORD *)(v39 + 1088) = v47;
                    v55 = *(std::__shared_weak_count **)(v39 + 1096);
                    *(_QWORD *)(v39 + 1096) = v48;
                    if (!v55)
                      goto LABEL_55;
                    v56 = (unint64_t *)&v55->__shared_owners_;
                    do
                      v57 = __ldaxr(v56);
                    while (__stlxr(v57 - 1, v56));
                    if (!v57)
                    {
                      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                      std::__shared_weak_count::__release_weak(v55);
                      v17 = v323;
                      if (v48)
                      {
LABEL_56:
                        v58 = (unint64_t *)&v48->__shared_owners_;
                        do
                          v59 = __ldaxr(v58);
                        while (__stlxr(v59 - 1, v58));
                        if (!v59)
                        {
                          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                          std::__shared_weak_count::__release_weak(v48);
                        }
                      }
                    }
                    else
                    {
LABEL_55:
                      v17 = v323;
                      if (v48)
                        goto LABEL_56;
                    }
                    v60 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                    if (!*((_QWORD *)&v368 + 1))
                      goto LABEL_67;
                    v61 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                      if (v367)
                        v64 = v366 == 0;
                      else
                        v64 = 1;
                      if (!v64)
                        goto LABEL_71;
                    }
                    else
                    {
LABEL_67:
                      if (v367)
                        v63 = v366 == 0;
                      else
                        v63 = 1;
                      if (!v63)
                      {
LABEL_71:
                        if (__p)
                          operator delete(__p);
                      }
                    }
                    v40 = **(_DWORD **)(v39 + 1104);
                    goto LABEL_79;
                  }
                }
                else
                {
                  *(_BYTE *)v41 = -1;
                }
                if (v48)
                  goto LABEL_49;
                goto LABEL_51;
              }
            }
            else
            {
              LOBYTE(v362) = *(_BYTE *)v41;
              v47 = *(_QWORD *)(v39 + 1088);
              v48 = *(std::__shared_weak_count **)(v39 + 1096);
              *(_QWORD *)&v368 = v47;
              *((_QWORD *)&v368 + 1) = v48;
              if (!v48)
                goto LABEL_42;
            }
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
            do
              v51 = __ldxr(v49);
            while (__stxr(v51 + 1, v49));
            goto LABEL_42;
          }
LABEL_79:
          if (v40 != 2 || *(_DWORD *)(v39 + 928) != 6)
            goto LABEL_26;
          v65 = *((double *)v17 + 17);
          if (v65 <= 0.0)
          {
            if (*(_BYTE *)(v39 + 1080))
              goto LABEL_26;
          }
          else
          {
            v66 = *(_QWORD *)(v39 + 1088);
            if (v66)
            {
              *(double *)v33.i64 = a9 - *(double *)(v66 + 8);
              if (*(_BYTE *)(v39 + 1080))
                goto LABEL_86;
            }
            else
            {
              v33.i64[0] = 0;
              if (*(_BYTE *)(v39 + 1080))
              {
LABEL_86:
                if (*(double *)v33.i64 < v65)
                  goto LABEL_26;
              }
            }
          }
          v67 = 0;
          v319 = (__int128 *)(v39 + 1048);
          v68 = (float32x2_t *)(v39 + 456);
          v69 = (float32x2_t *)(v39 + 168);
          __p = 0;
          v362 = 0;
          v70 = (float32x2_t *)(v39 + 264);
          v364 = 0;
          do
          {
            v33.i32[0] = v68[1].i32[0];
            v72 = v68[2];
            v34.i32[0] = v68[3].i32[0];
            v73 = v68[4];
            v35.i32[0] = v68[5].i32[0];
            v74 = *v69;
            v36.i32[0] = v69[1].i32[0];
            *(float32x2_t *)v75.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v68, COERCE_FLOAT(*v69)), v72, *v69, 1), v73, v36.f32[0]);
            *(float32x2_t *)&v75.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.f32, *v69), v34, *v69, 1), v36, v35);
            *(float32x2_t *)v33.f32 = v68[6];
            v33.i32[2] = v68[7].i32[0];
            v76 = vaddq_f32(v75, v33);
            v72.i32[0] = *(_DWORD *)(v32 + 8);
            v34 = *(float32x2_t *)(v32 + 12);
            v73.i32[0] = *(_DWORD *)(v32 + 20);
            v35 = *(float32x2_t *)(v32 + 24);
            v74.i32[0] = *(_DWORD *)(v32 + 32);
            *(float32x2_t *)v33.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v32, v76.f32[0]), v34, *(float32x2_t *)v76.f32, 1), v35, v76, 2);
            v77 = vdiv_f32(*(float32x2_t *)v33.f32, (float32x2_t)vdup_lane_s32((int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v72, *(float32x2_t *)v76.f32), v73, *(float32x2_t *)v76.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), v74), 0));
            if (v67 < v364)
            {
              *(float32x2_t *)v67 = v77;
              v71 = (float32x2_t *)(v67 + 8);
              goto LABEL_89;
            }
            v78 = v39;
            v79 = (char *)v362;
            v80 = v67 - (_BYTE *)v362;
            v81 = (v67 - (_BYTE *)v362) >> 3;
            v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 61)
              sub_207CA420C();
            v83 = v364 - (_BYTE *)v362;
            if ((v364 - (_BYTE *)v362) >> 2 > v82)
              v82 = v83 >> 2;
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
              v84 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v84 = v82;
            if (v84)
            {
              if (v84 >> 61)
                sub_207CA3AB8();
              v85 = operator new(8 * v84);
              v86 = (float32x2_t *)&v85[8 * v81];
              *v86 = v77;
              v71 = v86 + 1;
              v87 = v67 - v79;
              if (v67 == v79)
              {
LABEL_106:
                v32 = v334;
                v39 = v78;
                v362 = v86;
                v364 = &v85[8 * v84];
                if (!v67)
                  goto LABEL_89;
LABEL_107:
                operator delete(v67);
                goto LABEL_89;
              }
            }
            else
            {
              v85 = 0;
              v86 = (float32x2_t *)(8 * v81);
              *(float32x2_t *)(8 * v81) = v77;
              v71 = (float32x2_t *)(8 * v81 + 8);
              v87 = v67 - v79;
              if (v67 == v79)
                goto LABEL_106;
            }
            v88 = v87 - 8;
            if (v88 < 0x168
              || (v91 = (v67 - 8 - v79) & 0xFFFFFFFFFFFFFFF8, &v85[v80 - 8 - v91] > &v85[v80 - 8])
              || &v67[-v91 - 8] > v67 - 8
              || (unint64_t)(v67 - v85 - v80) < 0x20)
            {
              v89 = v67;
              v32 = v334;
              v39 = v78;
              do
              {
LABEL_102:
                v90 = *(float32x2_t *)(v89 - 8);
                v89 -= 8;
                v86[-1] = v90;
                --v86;
              }
              while (v89 != v79);
              goto LABEL_103;
            }
            v92 = (v88 >> 3) + 1;
            v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
            v89 = &v67[-v93];
            v86 = (float32x2_t *)((char *)v86 - v93);
            v94 = (float32x4_t *)&v85[8 * v81 - 16];
            v95 = (float32x4_t *)(v67 - 16);
            v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            v32 = v334;
            do
            {
              v33 = v95[-1];
              v97 = *v95;
              v94[-1] = v33;
              *v94 = v97;
              v94 -= 2;
              v95 -= 2;
              v96 -= 4;
            }
            while (v96);
            v39 = v78;
            if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_102;
LABEL_103:
            v67 = (char *)v362;
            v362 = v86;
            v364 = &v85[8 * v84];
            if (v67)
              goto LABEL_107;
LABEL_89:
            __p = v71;
            v69 = (float32x2_t *)((char *)v69 + 12);
            v67 = (char *)v71;
          }
          while (v69 != v70);
          v98 = *(float32x2_t *)((char *)v362 + 8);
          v99 = vsub_f32(*(float32x2_t *)v362, v98);
          LODWORD(v100) = vmla_lane_f32(vmul_f32(v99, v99), (float32x2_t)vdup_lane_s32((int32x2_t)v99, 1), v99, 1).u32[0];
          v101 = *(float32x2_t *)((char *)v362 + 32);
          v102 = vsub_f32(v98, v101);
          v103 = sqrtf(v100);
          v104 = sqrtf(vmla_lane_f32(vmul_f32(v102, v102), (float32x2_t)vdup_lane_s32((int32x2_t)v102, 1), v102, 1).f32[0]);
          v105 = *(float32x2_t *)((char *)v362 + 16);
          v106 = vsub_f32(v101, v105);
          v107 = sqrtf(vmla_lane_f32(vmul_f32(v106, v106), (float32x2_t)vdup_lane_s32((int32x2_t)v106, 1), v106, 1).f32[0]);
          v108 = vsub_f32(v105, *(float32x2_t *)v362);
          v109 = sqrtf(vmla_lane_f32(vmul_f32(v108, v108), (float32x2_t)vdup_lane_s32((int32x2_t)v108, 1), v108, 1).f32[0]);
          if (v104 >= v103)
            v104 = v103;
          if (v107 < v104)
            v104 = v107;
          if (v109 >= v104)
            v110 = v104;
          else
            v110 = v109;
          v17 = v323;
          v111 = *((float *)v323 + 33);
          operator delete(v362);
          v115 = 1;
          if (v110 <= v111)
            goto LABEL_26;
          v34.i32[0] = v68[1].i32[0];
          v116 = v68[2];
          v35.i32[0] = v68[3].i32[0];
          v117 = v68[6];
          v36.i32[0] = v68[7].i32[0];
          v112.i32[0] = *(_DWORD *)(v32 + 8);
          v118 = *(float32x2_t *)(v32 + 12);
          v113.i32[0] = *(_DWORD *)(v32 + 20);
          v119 = *(float32x2_t *)(v32 + 24);
          v114.i32[0] = *(_DWORD *)(v32 + 32);
          v120 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v32, COERCE_FLOAT(*v68)), v118, *v68, 1), v119, v34.f32[0]);
          v121 = vmla_f32(vmla_lane_f32(vmul_f32(v112, *v68), v113, *v68, 1), v34, v114);
          v122 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v32, v116.f32[0]), v118, v116, 1), v119, v35.f32[0]);
          v123 = vmla_f32(vmla_lane_f32(vmul_f32(v112, v116), v113, v116, 1), v35, v114);
          v124 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v32, v117.f32[0]), v118, v117, 1), v119, v36.f32[0]);
          v125 = vmla_f32(vmla_lane_f32(vmul_f32(v112, v117), v113, v117, 1), v36, v114);
          v126 = (float32x2_t)v323[4];
          v36.i32[0] = *((_DWORD *)v323 + 10);
          v127 = *(float32x2_t *)((char *)v323 + 44);
          v112.i32[0] = *((_DWORD *)v323 + 13);
          v128 = (float32x2_t)v323[7];
          v113.i32[0] = *((_DWORD *)v323 + 16);
          v356 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v120, v126.f32[0]), v122, v126, 1), v124, v36.f32[0]);
          v357 = vmla_f32(vmla_lane_f32(vmul_f32(v121, v126), v123, v126, 1), v36, v125).u32[0];
          v359 = vmla_f32(vmla_lane_f32(vmul_f32(v121, v127), v123, v127, 1), v112, v125).u32[0];
          v358 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v120, v127.f32[0]), v122, v127, 1), v124, v112.f32[0]);
          v361 = vmla_f32(vmla_lane_f32(vmul_f32(v121, v128), v123, v128, 1), v113, v125).u32[0];
          v360 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v120, v128.f32[0]), v122, v128, 1), v124, v113.f32[0]);
          v129 = (_BYTE *)(v39 + 1040);
          v367 = *(_BYTE *)(v39 + 1080);
          if (!v367)
          {
            LOBYTE(v362) = *v129;
            v134 = *(_QWORD *)(v39 + 1096);
            *(_QWORD *)&v368 = *(_QWORD *)(v39 + 1088);
            *((_QWORD *)&v368 + 1) = v134;
            if (!v134)
              goto LABEL_134;
LABEL_132:
            v135 = (unint64_t *)(v134 + 8);
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
            goto LABEL_134;
          }
          LODWORD(v362) = *(_DWORD *)v129;
          BYTE4(v362) = *(_BYTE *)(v39 + 1044);
          LOBYTE(__p) = 0;
          v366 = 0;
          if (*(_BYTE *)(v39 + 1072))
          {
            __p = 0;
            v364 = 0;
            v365 = 0;
            v130 = *(_BYTE **)(v39 + 1048);
            v131 = *(_BYTE **)(v39 + 1056);
            v132 = v131 - v130;
            if (v131 != v130)
            {
              if ((v132 & 0x8000000000000000) != 0)
                sub_207CF94B8();
              __p = operator new(v131 - v130);
              v364 = (char *)__p;
              v133 = (char *)__p + v132;
              v365 = (char *)__p + v132;
              memcpy(__p, v130, v132);
              v364 = v133;
            }
            v366 = 1;
            v17 = v323;
          }
          v134 = *(_QWORD *)(v39 + 1096);
          *(_QWORD *)&v368 = *(_QWORD *)(v39 + 1088);
          *((_QWORD *)&v368 + 1) = v134;
          if (v134)
            goto LABEL_132;
LABEL_134:
          if (!v317)
          {
            v142 = 0;
            v143 = v17[1];
            LOBYTE(v344) = 0;
            goto LABEL_261;
          }
          memset(v371, 0, sizeof(v371));
          LOBYTE(v372) = 0;
          v137 = a6;
          v138 = a6[42];
          v139 = a6[43];
          if (v138 < v139)
          {
            *(_QWORD *)v138 = &off_24C072BC8;
            *(_BYTE *)(v138 + 8) = 0;
            *(_OWORD *)(v138 + 16) = 0u;
            *(_OWORD *)(v138 + 32) = 0u;
            *(_QWORD *)(v138 + 48) = 0;
            *(_QWORD *)(v138 + 56) = 0;
            *(_OWORD *)(v138 + 88) = 0u;
            *(_OWORD *)(v138 + 104) = 0u;
            *(_OWORD *)(v138 + 120) = 0u;
            *(_QWORD *)(v138 + 136) = 0;
            v140 = v371[2];
            *(_BYTE *)(v138 + 80) = (_BYTE)v372;
            v141 = (char *)(v138 + 144);
            *(_QWORD *)(v138 + 64) = 0;
            *(_QWORD *)(v138 + 72) = v140;
            a6[42] = v138 + 144;
            goto LABEL_216;
          }
          v144 = 0x8E38E38E38E38E39 * ((uint64_t)(v138 - *v310) >> 4);
          v145 = v144 + 1;
          if (v144 + 1 > 0x1C71C71C71C71C7)
            sub_207CA420C();
          v146 = 0x8E38E38E38E38E39 * ((uint64_t)(v139 - *v310) >> 4);
          if (2 * v146 > v145)
            v145 = 2 * v146;
          if (v146 >= 0xE38E38E38E38E3)
            v147 = 0x1C71C71C71C71C7;
          else
            v147 = v145;
          if (v147)
          {
            if (v147 > 0x1C71C71C71C71C7)
              sub_207CA3AB8();
            v148 = (char *)operator new(144 * v147);
          }
          else
          {
            v148 = 0;
          }
          v149 = &v148[144 * v144];
          *(_QWORD *)v149 = &off_24C072BC8;
          v149[8] = 0;
          v150 = v149 + 8;
          *((_OWORD *)v149 + 1) = 0u;
          v151 = v149 + 16;
          v149[80] = 0;
          *((_OWORD *)v149 + 2) = 0u;
          *((_OWORD *)v149 + 3) = 0u;
          *(_OWORD *)(v149 + 57) = 0u;
          *(_OWORD *)(v149 + 88) = 0u;
          *(_OWORD *)(v149 + 104) = 0u;
          *(_OWORD *)(v149 + 120) = 0u;
          *((_QWORD *)v149 + 17) = 0;
          v314 = v149;
          v152 = (std::__shared_weak_count *)*((_QWORD *)v149 + 12);
          if (v152)
          {
            v153 = (unint64_t *)&v152->__shared_owners_;
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          *v150 = 0;
          v155 = &v148[144 * v144];
          *(_OWORD *)v151 = 0u;
          *((_OWORD *)v151 + 1) = 0u;
          *((_QWORD *)v151 + 4) = 0;
          v156 = v371[2];
          v158 = *((_QWORD *)v155 + 16);
          v157 = v155 + 128;
          *(v157 - 8) = 0;
          *(v157 - 7) = v156;
          *((_BYTE *)v157 - 48) = (_BYTE)v372;
          *(v157 - 9) = 0;
          v159 = *(v157 - 1);
          if (v158 != v159)
            *v157 = v159;
          v141 = v314 + 144;
          v137 = a6;
          v160 = (char *)a6[42];
          v321 = (char *)a6[41];
          if (v160 == v321)
          {
            a6[41] = v314;
            a6[42] = v141;
            a6[43] = &v148[144 * v147];
            if (v160)
              goto LABEL_215;
            goto LABEL_216;
          }
          v311 = &v148[144 * v147];
          v312 = (_BYTE *)(v39 + 1040);
          v313 = v39;
          v161 = 0;
          v162 = &v148[144 * v144];
          v163 = v162;
          while (2)
          {
            *((_QWORD *)v163 - 18) = &off_24C072BC8;
            v164 = v163 - 144;
            v164[8] = 0;
            *(_OWORD *)(v164 + 88) = 0u;
            v165 = v164 + 88;
            v164[80] = 0;
            *((_OWORD *)v164 + 1) = 0u;
            *((_OWORD *)v164 + 2) = 0u;
            *((_OWORD *)v164 + 3) = 0u;
            *(_OWORD *)(v164 + 57) = 0u;
            *(_OWORD *)(v164 + 120) = 0u;
            v166 = (void **)(v164 + 120);
            *(_OWORD *)(v164 + 104) = 0u;
            *((_QWORD *)v164 + 17) = 0;
            v167 = *((_QWORD *)v160 - 6);
            v324 = v164;
            v325 = *((_QWORD *)v160 - 7);
            if (v167)
            {
              v168 = (unint64_t *)(v167 + 8);
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
            }
            v171 = *((_QWORD *)v160 - 14);
            v170 = *((_QWORD *)v160 - 13);
            v172 = *((_QWORD *)v160 - 12);
            v327 = *(v160 - 136);
            v329 = *((_QWORD *)v160 - 16);
            if (*(v160 - 136))
              v173 = *((_QWORD *)v160 - 14);
            else
              v173 = 0;
            v331 = *((_QWORD *)v160 - 15);
            if (v331 + *((_QWORD *)v160 - 16) * v171 + v173 > v170)
            {
              v320 = v167;
              sub_2082162D0("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_208216974);
              v174 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              if (!byte_254530A10 || byte_254530A18)
              {
                v175 = qword_2545309E8;
                for (j = qword_2545309F0; v175 != j; v175 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v175)(*(_QWORD *)(v175 + 8), "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
              }
              v177 = atomic_load((unsigned __int8 *)&qword_254530A20);
              if ((v177 & 1) == 0 && __cxa_guard_acquire(&qword_254530A20))
              {
                __cxa_atexit((void (*)(void *))sub_208216AF4, &qword_2545309E8, &dword_207C77000);
                __cxa_guard_release(&qword_254530A20);
              }
              v167 = v320;
              if (!byte_254530A10)
                abort();
              qword_254530A00(*(_QWORD *)algn_254530A08, "widthStep >= minimum_width_step", 31, "widthStep must be at least as big as minimum_width_step.", 56);
            }
            v178 = (std::__shared_weak_count *)*((_QWORD *)v162 - 6);
            *((_QWORD *)v162 - 7) = v325;
            *((_QWORD *)v162 - 6) = v167;
            if (v178)
            {
              v179 = (unint64_t *)&v178->__shared_owners_;
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            *(v162 - 136) = v327;
            *((_QWORD *)v162 - 14) = v171;
            *((_QWORD *)v162 - 13) = v170;
            *((_QWORD *)v162 - 12) = v172;
            *((_QWORD *)v162 - 16) = v329;
            *((_QWORD *)v162 - 15) = v331;
            v181 = *((_QWORD *)v160 - 9);
            *(v162 - 64) = *(v160 - 64);
            *((_QWORD *)v162 - 9) = v181;
            *((_QWORD *)v162 - 11) = v329 + v327 + v331;
            *((_QWORD *)v162 - 10) = v329 + v327;
            v182 = (_BYTE *)*((_QWORD *)v162 - 3);
            v183 = (char *)*((_QWORD *)v162 - 2);
            v184 = (v183 - v182) >> 3;
            v185 = v172 - v184;
            if (v172 <= v184)
            {
              if (v172 < v184)
                *((_QWORD *)v162 - 2) = &v182[8 * v172];
              if (v172)
                goto LABEL_203;
            }
            else
            {
              v186 = *((_QWORD *)v162 - 1);
              if (v185 <= (v186 - (uint64_t)v183) >> 3)
              {
                bzero(*((void **)v162 - 2), 8 * v185);
                *((_QWORD *)v162 - 2) = &v183[8 * v185];
              }
              else
              {
                if (v172 >> 61)
                  sub_207CA420C();
                v332 = (v183 - v182) >> 3;
                v187 = v186 - (_QWORD)v182;
                v188 = v187 >> 2;
                if (v187 >> 2 <= v172)
                  v188 = v172;
                if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFF8)
                  v188 = 0x1FFFFFFFFFFFFFFFLL;
                if (v188 >> 61)
                  sub_207CA3AB8();
                v330 = v188;
                v189 = (char *)operator new(8 * v188);
                v190 = 8 * v185;
                v326 = v189;
                v328 = 8 * v185;
                v191 = &v189[8 * v332];
                bzero(v191, v190);
                v192 = (char *)(v183 - v182);
                if (v183 == v182)
                {
                  *((_QWORD *)v162 - 3) = v191;
                  *((_QWORD *)v162 - 2) = &v191[v328];
                  *((_QWORD *)v162 - 1) = &v326[8 * v330];
                  if (v183)
                    goto LABEL_202;
                }
                else
                {
                  v193 = v192 - 8;
                  if ((unint64_t)(v192 - 8) < 0x58)
                  {
                    v194 = v191;
                    v195 = v326;
                    v196 = v328;
                    goto LABEL_200;
                  }
                  v195 = v326;
                  v196 = v328;
                  v194 = v191;
                  if ((unint64_t)(v182 - v326) < 0x20)
                    goto LABEL_398;
                  v197 = ((unint64_t)v193 >> 3) + 1;
                  v198 = 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
                  v199 = &v183[-v198];
                  v194 = &v191[-v198];
                  v200 = &v326[8 * v332 - 16];
                  v201 = v183 - 16;
                  v202 = v197 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v203 = *(_OWORD *)v201;
                    *((_OWORD *)v200 - 1) = *((_OWORD *)v201 - 1);
                    *(_OWORD *)v200 = v203;
                    v200 -= 32;
                    v201 -= 32;
                    v202 -= 4;
                  }
                  while (v202);
                  v183 = v199;
                  if (v197 != (v197 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_398:
                    do
                    {
LABEL_200:
                      v204 = *((_QWORD *)v183 - 1);
                      v183 -= 8;
                      *((_QWORD *)v194 - 1) = v204;
                      v194 -= 8;
                    }
                    while (v183 != v182);
                  }
                  v183 = (char *)*v166;
                  *((_QWORD *)v162 - 3) = v194;
                  *((_QWORD *)v162 - 2) = &v191[v196];
                  *((_QWORD *)v162 - 1) = &v195[8 * v330];
                  if (v183)
LABEL_202:
                    operator delete(v183);
                }
              }
LABEL_203:
              v205 = 0;
              v206 = 0;
              do
              {
                *((_QWORD *)*v166 + v206++) = *v165 + v205;
                v205 += v170;
              }
              while (v172 != v206);
            }
            v160 -= 144;
            v161 -= 144;
            v163 = v324;
            v162 = v324;
            if (v160 != v321)
              continue;
            break;
          }
          v160 = (char *)a6[41];
          v207 = (char *)a6[42];
          v141 = v314 + 144;
          a6[41] = v324;
          a6[42] = v314 + 144;
          a6[43] = v311;
          if (v207 == v160)
          {
            v137 = a6;
            v32 = v334;
            v129 = v312;
            v39 = v313;
            if (v160)
              goto LABEL_215;
          }
          else
          {
            v208 = v207 - 144;
            v209 = (void (***)(char *))(v207 - 144);
            v32 = v334;
            v129 = v312;
            v39 = v313;
            do
            {
              v210 = *v209;
              v209 -= 18;
              (*v210)(v208);
              v63 = v208 == v160;
              v208 = (char *)v209;
            }
            while (!v63);
            v137 = a6;
            v141 = v314 + 144;
            if (v160)
            {
LABEL_215:
              operator delete(v160);
              v137 = a6;
            }
          }
LABEL_216:
          v137[42] = v141;
          *((_OWORD *)v141 - 7) = xmmword_208232E20;
          *((_QWORD *)v141 - 12) = 128;
          *((_QWORD *)v141 - 16) = 3;
          v211 = operator new[](0xC000uLL);
          v212 = operator new(0x20uLL);
          *v212 = &off_24C072A30;
          v212[1] = 0;
          v212[2] = 0;
          v212[3] = v211;
          v213 = (std::__shared_weak_count *)*((_QWORD *)v141 - 6);
          *((_QWORD *)v141 - 7) = v211;
          *((_QWORD *)v141 - 6) = v212;
          if (v213)
          {
            v214 = (unint64_t *)&v213->__shared_owners_;
            do
              v215 = __ldaxr(v214);
            while (__stlxr(v215 - 1, v214));
            if (!v215)
            {
              ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
              std::__shared_weak_count::__release_weak(v213);
            }
          }
          v216 = v129;
          v217 = v39;
          *(v141 - 136) = 0;
          *((_OWORD *)v141 - 8) = xmmword_208232E30;
          *((_OWORD *)v141 - 7) = xmmword_208232E20;
          *(v141 - 72) = 0;
          v218 = *(_DWORD *)((char *)v371 + 3);
          *(_DWORD *)(v141 - 71) = v371[0];
          *((_DWORD *)v141 - 17) = v218;
          *(v141 - 64) = 0;
          *((_QWORD *)v141 - 10) = 3;
          *((_OWORD *)v141 - 6) = xmmword_208232E40;
          v220 = (_BYTE *)*((_QWORD *)v141 - 3);
          v219 = (char *)*((_QWORD *)v141 - 2);
          v221 = v219 - v220;
          if ((unint64_t)(v219 - v220) > 0x3FF)
          {
            v63 = v221 == 1024;
            v39 = v217;
            v129 = v216;
            if (!v63)
              *((_QWORD *)v141 - 2) = v220 + 1024;
          }
          else
          {
            v222 = v221 >> 3;
            v223 = 128 - (v221 >> 3);
            v224 = *((_QWORD *)v141 - 1);
            if (v223 <= (v224 - (uint64_t)v219) >> 3)
            {
              v236 = 8 * v223;
              bzero(*((void **)v141 - 2), v236);
              *((_QWORD *)v141 - 2) = &v219[v236];
              v39 = v217;
              v129 = v216;
            }
            else
            {
              v315 = v141;
              v225 = v224 - (_QWORD)v220;
              v226 = v225 >> 2;
              if ((unint64_t)(v225 >> 2) <= 0x80)
                v226 = 128;
              if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF8)
                v226 = 0x1FFFFFFFFFFFFFFFLL;
              if (v226 >> 61)
                sub_207CA3AB8();
              v227 = v226;
              v228 = (char *)operator new(8 * v226);
              v229 = 8 * v223;
              v230 = v228;
              v231 = &v228[8 * v222];
              v333 = v229;
              bzero(v231, v229);
              v232 = (char *)(v219 - v220);
              if (v219 == v220)
              {
                v39 = v217;
                v129 = v216;
                *((_QWORD *)v315 - 3) = v231;
                *((_QWORD *)v315 - 2) = &v231[v333];
                *((_QWORD *)v315 - 1) = &v230[8 * v227];
                v141 = v315;
                if (v219)
                  goto LABEL_246;
              }
              else
              {
                v233 = v232 - 8;
                if ((unint64_t)(v232 - 8) < 0x58)
                {
                  v234 = v231;
                  v39 = v217;
                  v129 = v216;
                  v235 = v333;
                  goto LABEL_244;
                }
                v234 = v231;
                v39 = v217;
                v129 = v216;
                v235 = v333;
                if ((unint64_t)(v220 - v230) < 0x20)
                  goto LABEL_399;
                v237 = ((unint64_t)v233 >> 3) + 1;
                v238 = 8 * (v237 & 0x3FFFFFFFFFFFFFFCLL);
                v239 = &v219[-v238];
                v234 = &v231[-v238];
                v240 = &v230[8 * v222 - 16];
                v241 = v219 - 16;
                v242 = v237 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v243 = *(_OWORD *)v241;
                  *((_OWORD *)v240 - 1) = *((_OWORD *)v241 - 1);
                  *(_OWORD *)v240 = v243;
                  v240 -= 32;
                  v241 -= 32;
                  v242 -= 4;
                }
                while (v242);
                v219 = v239;
                if (v237 != (v237 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_399:
                  do
                  {
LABEL_244:
                    v244 = *((_QWORD *)v219 - 1);
                    v219 -= 8;
                    *((_QWORD *)v234 - 1) = v244;
                    v234 -= 8;
                  }
                  while (v219 != v220);
                }
                v219 = (char *)*((_QWORD *)v315 - 3);
                *((_QWORD *)v315 - 3) = v234;
                *((_QWORD *)v315 - 2) = &v231[v235];
                *((_QWORD *)v315 - 1) = &v230[8 * v227];
                v141 = v315;
                if (v219)
LABEL_246:
                  operator delete(v219);
              }
            }
          }
          v245 = 0;
          for (k = 0; k != 49152; k += 384)
          {
            *(_QWORD *)(*((_QWORD *)v141 - 3) + v245) = *((_QWORD *)v141 - 7) + k;
            v245 += 8;
          }
          v247 = *((_QWORD *)v141 - 7);
          v248 = *((_QWORD *)v141 - 14);
          v249 = *((_QWORD *)v141 - 12);
          v250 = v248 == 0;
          if ((_DWORD)v248)
            v251 = 3;
          else
            v251 = 0;
          v252 = (unint64_t)(v248 * v251) << 32;
          if (!(_DWORD)v249)
            v250 = 1;
          if (v250)
            v252 = 0;
          v253 = v252 | v251;
          v254 = *((_QWORD *)v141 - 14) | (unint64_t)(v249 << 32);
          if (v250)
            v254 = 0;
          *(_QWORD *)((char *)v371 + 4) = v254;
          v255 = v254;
          LODWORD(v371[0]) = 3;
          v256 = v371[0];
          v257 = HIDWORD(v254);
          LODWORD(v371[0]) = 1;
          *(_QWORD *)((char *)v371 + 4) = v252 | v251;
          v258 = v371[0];
          v259 = HIDWORD(v252);
          if (HIDWORD(v254) * HIDWORD(v252) == -1
            && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
          {
            abort();
          }
          v143 = v323[1];
          v345 = 0;
          v346 = 0;
          v344 = &off_24C072A80;
          v347 = v247;
          v348 = v256;
          v350 = v258;
          v349 = v257;
          v351 = v259;
          v142 = 1;
          v352 = v255;
          v353 = v253;
          v354 = 0;
          v115 = 1;
LABEL_261:
          v355 = v142;
          (*(void (**)(_QWORD *__return_ptr, double))(*(_QWORD *)v143 + 24))(v371, a9);
          if (!v374)
          {
            if (v367)
            {
              if (v366)
              {
                v263 = __p;
                __p = 0;
                v364 = 0;
                v365 = 0;
                LOBYTE(v362) = v371[0];
                v367 = 0;
                if (v263)
                  goto LABEL_274;
LABEL_285:
                v270 = v375;
                v375 = 0uLL;
                v265 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                v368 = v270;
                if (!v265)
                  goto LABEL_290;
              }
              else
              {
                LOBYTE(v362) = v371[0];
                v367 = 0;
                v269 = v375;
                v375 = 0uLL;
                v265 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                v368 = v269;
                if (!v265)
                  goto LABEL_290;
              }
            }
            else
            {
              LOBYTE(v362) = v371[0];
              v267 = v375;
              v375 = 0uLL;
              v265 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
              v368 = v267;
              if (!v265)
                goto LABEL_290;
            }
            goto LABEL_286;
          }
          if (v373)
          {
            v261 = (void *)v371[1];
            v260 = (char *)v371[2];
            v262 = v372;
            v371[1] = 0;
            v371[2] = 0;
            v372 = 0;
            if (v367)
            {
              if (v366)
              {
                v263 = __p;
                LOBYTE(v362) = v371[0];
                *(_DWORD *)((char *)&v362 + 1) = *(_DWORD *)((char *)v371 + 1);
                __p = v261;
                v364 = v260;
                v365 = v262;
                if (!v263)
                  goto LABEL_285;
LABEL_274:
                operator delete(v263);
                v264 = v375;
                v375 = 0uLL;
                v265 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                v368 = v264;
                if (!v265)
                  goto LABEL_290;
              }
              else
              {
                LOBYTE(v362) = v371[0];
                *(_DWORD *)((char *)&v362 + 1) = *(_DWORD *)((char *)v371 + 1);
                __p = v261;
                v364 = v260;
                v365 = v262;
                v366 = 1;
                v268 = v375;
                v375 = 0uLL;
                v265 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
                v368 = v268;
                if (!v265)
                  goto LABEL_290;
              }
LABEL_286:
              v271 = (unint64_t *)&v265->__shared_owners_;
              do
                v272 = __ldaxr(v271);
              while (__stlxr(v272 - 1, v271));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
              goto LABEL_290;
            }
            LOBYTE(v362) = v371[0];
            *(_DWORD *)((char *)&v362 + 1) = *(_DWORD *)((char *)v371 + 1);
            __p = v261;
            v364 = v260;
            v266 = 1;
            v365 = v262;
LABEL_284:
            v366 = v266;
            v367 = 1;
            goto LABEL_285;
          }
          if (!v367)
          {
            v266 = 0;
            LOBYTE(v362) = v371[0];
            *(_DWORD *)((char *)&v362 + 1) = *(_DWORD *)((char *)v371 + 1);
            LOBYTE(__p) = 0;
            goto LABEL_284;
          }
          if (v366)
          {
            v263 = __p;
            __p = 0;
            v364 = 0;
            v365 = 0;
            LOBYTE(v362) = v371[0];
            *(_DWORD *)((char *)&v362 + 1) = *(_DWORD *)((char *)v371 + 1);
            v366 = 0;
            if (!v263)
              goto LABEL_285;
            goto LABEL_274;
          }
          LOBYTE(v362) = v371[0];
          *(_DWORD *)((char *)&v362 + 1) = *(_DWORD *)((char *)v371 + 1);
          v291 = v375;
          v375 = 0uLL;
          v265 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
          v368 = v291;
          if (v265)
            goto LABEL_286;
LABEL_290:
          v273 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
          if (!*((_QWORD *)&v375 + 1))
            goto LABEL_294;
          v274 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
          do
            v275 = __ldaxr(v274);
          while (__stlxr(v275 - 1, v274));
          if (!v275)
          {
            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
            std::__shared_weak_count::__release_weak(v273);
            if (v374)
              v277 = v373 == 0;
            else
              v277 = 1;
            if (!v277)
              goto LABEL_298;
          }
          else
          {
LABEL_294:
            if (v374)
              v276 = v373 == 0;
            else
              v276 = 1;
            if (!v276)
            {
LABEL_298:
              if (v371[1])
              {
                v371[2] = v371[1];
                operator delete((void *)v371[1]);
              }
            }
          }
          if (v355)
          {
            v278 = v346;
            if (v346)
            {
              v279 = (unint64_t *)&v346->__shared_owners_;
              do
                v280 = __ldaxr(v279);
              while (__stlxr(v280 - 1, v279));
              if (!v280)
              {
                ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                std::__shared_weak_count::__release_weak(v278);
                v374 = v367;
                if (!v367)
                  goto LABEL_322;
LABEL_311:
                LODWORD(v371[0]) = (_DWORD)v362;
                BYTE4(v371[0]) = BYTE4(v362);
                LOBYTE(v371[1]) = 0;
                v373 = 0;
                v281 = v366;
                if (v366)
                {
                  v371[1] = 0;
                  v371[2] = 0;
                  v372 = 0;
                  v282 = __p;
                  v283 = v364 - (_BYTE *)__p;
                  if (v364 == __p)
                  {
                    v115 = 0;
                    v284 = 0;
                    v373 = 1;
                    if (*(_BYTE *)(v39 + 1080))
                      goto LABEL_315;
                  }
                  else
                  {
                    if ((v283 & 0x8000000000000000) != 0)
                      sub_207CF94B8();
                    v284 = operator new(v364 - (_BYTE *)__p);
                    v115 = (uint64_t)v284 + v283;
                    memcpy(v284, v282, v283);
                    v373 = 1;
                    if (*(_BYTE *)(v39 + 1080))
                    {
LABEL_315:
                      v369 = (int)v362;
                      v370 = BYTE4(v362);
                      v371[2] = 0;
                      v372 = 0;
                      v371[1] = 0;
                      LODWORD(v371[0]) = *(_DWORD *)v129;
                      BYTE4(v371[0]) = v129[4];
                      v285 = (_BYTE *)(v39 + 1072);
                      if (*(_BYTE *)(v39 + 1072))
                      {
                        *(_OWORD *)&v371[1] = *v319;
                        v372 = *(char **)(v39 + 1064);
                        *(_QWORD *)v319 = 0;
                        *((_QWORD *)v319 + 1) = 0;
                        *((_QWORD *)v319 + 2) = 0;
                        v286 = 1;
                      }
                      else
                      {
                        v286 = 0;
                        v373 = 0;
                      }
                      v287 = 1;
                      goto LABEL_334;
                    }
                  }
                  *(_DWORD *)v129 = (_DWORD)v362;
                  v129[4] = BYTE4(v362);
                  *(_QWORD *)(v39 + 1048) = v284;
                  *(_QWORD *)(v39 + 1056) = v115;
                  *(_QWORD *)(v39 + 1064) = v115;
                  v371[2] = 0;
                  v372 = 0;
                  v371[1] = 0;
                  *(_BYTE *)(v39 + 1072) = 1;
                  *(_BYTE *)(v39 + 1080) = 1;
                  goto LABEL_350;
                }
                if (!*(_BYTE *)(v39 + 1080))
                {
                  *(_DWORD *)v129 = (_DWORD)v362;
                  v129[4] = BYTE4(v362);
                  *(_BYTE *)(v39 + 1048) = 0;
                  *(_BYTE *)(v39 + 1072) = 0;
                  *(_BYTE *)(v39 + 1080) = 1;
                  goto LABEL_350;
                }
                v369 = (int)v362;
                v370 = BYTE4(v362);
                LODWORD(v371[0]) = *(_DWORD *)v129;
                BYTE4(v371[0]) = v129[4];
                v285 = (_BYTE *)(v39 + 1072);
                v287 = *(unsigned __int8 *)(v39 + 1072);
                if (*(_BYTE *)(v39 + 1072))
                {
                  v287 = 0;
                  v284 = 0;
                  *(_OWORD *)&v371[1] = *v319;
                  v372 = *(char **)(v39 + 1064);
                  *(_QWORD *)v319 = 0;
                  *((_QWORD *)v319 + 1) = 0;
                  *((_QWORD *)v319 + 2) = 0;
                  v286 = 1;
                  v373 = 1;
                }
                else
                {
                  v286 = 0;
                  v284 = 0;
                }
LABEL_334:
                *(_DWORD *)v129 = v369;
                v129[4] = v370;
                if (*v285 == v287)
                {
                  if (*v285)
                  {
                    v292 = *(void **)v319;
                    if (*(_QWORD *)v319)
                    {
                      *(_QWORD *)(v39 + 1056) = v292;
                      operator delete(v292);
                      *(_QWORD *)(v39 + 1064) = 0;
                      *(_QWORD *)(v39 + 1056) = 0;
                    }
                    *(_QWORD *)(v39 + 1048) = v284;
                    *(_QWORD *)(v39 + 1056) = v115;
                    *(_QWORD *)(v39 + 1064) = v115;
                    if (!v286)
                      goto LABEL_350;
                    goto LABEL_348;
                  }
                }
                else
                {
                  if (!*v285)
                  {
                    *(_QWORD *)(v39 + 1048) = v284;
                    *(_QWORD *)(v39 + 1056) = v115;
                    *(_QWORD *)(v39 + 1064) = v115;
                    *(_BYTE *)(v39 + 1072) = 1;
                    if (v286)
                      goto LABEL_348;
                    goto LABEL_350;
                  }
                  v293 = *(void **)v319;
                  if (*(_QWORD *)v319)
                  {
                    *(_QWORD *)(v39 + 1056) = v293;
                    operator delete(v293);
                  }
                  *v285 = 0;
                }
                if (v281 && v284)
                {
                  operator delete(v284);
                  v286 = v373;
                }
                if (!v286)
                  goto LABEL_350;
LABEL_348:
                if (v371[1])
                  operator delete((void *)v371[1]);
                goto LABEL_350;
              }
            }
          }
          v374 = v367;
          if (v367)
            goto LABEL_311;
LABEL_322:
          v288 = (char)v362;
          if (*(_BYTE *)(v39 + 1080))
          {
            if (*(_BYTE *)(v39 + 1072))
            {
              v289 = *(char **)(v39 + 1064);
              v290 = *v319;
              *((_QWORD *)v319 + 1) = 0;
              *((_QWORD *)v319 + 2) = 0;
              *(_QWORD *)v319 = 0;
              LODWORD(v371[0]) = *(_DWORD *)v129;
              BYTE4(v371[0]) = v129[4];
              *(_OWORD *)&v371[1] = v290;
              v372 = v289;
              *(_BYTE *)(v39 + 1040) = v288;
              *(_BYTE *)(v39 + 1080) = 0;
              goto LABEL_348;
            }
            LODWORD(v371[0]) = *(_DWORD *)v129;
            BYTE4(v371[0]) = v129[4];
            LOBYTE(v371[1]) = 0;
            *(_BYTE *)(v39 + 1040) = (_BYTE)v362;
            *(_BYTE *)(v39 + 1080) = 0;
          }
          else
          {
            *v129 = (_BYTE)v362;
          }
LABEL_350:
          v294 = v368;
          if (*((_QWORD *)&v368 + 1))
          {
            v295 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
            do
              v296 = __ldxr(v295);
            while (__stxr(v296 + 1, v295));
          }
          *(_QWORD *)(v39 + 1088) = v294;
          v297 = *(std::__shared_weak_count **)(v39 + 1096);
          *(_QWORD *)(v39 + 1096) = *((_QWORD *)&v294 + 1);
          v17 = v323;
          if (!v297)
            goto LABEL_357;
          v298 = (unint64_t *)&v297->__shared_owners_;
          do
            v299 = __ldaxr(v298);
          while (__stlxr(v299 - 1, v298));
          if (!v299)
          {
            ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
            std::__shared_weak_count::__release_weak(v297);
            v300 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
            if (*((_QWORD *)&v368 + 1))
            {
LABEL_358:
              v301 = (unint64_t *)&v300->__shared_owners_;
              do
                v302 = __ldaxr(v301);
              while (__stlxr(v302 - 1, v301));
              if (!v302)
              {
                ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                std::__shared_weak_count::__release_weak(v300);
              }
            }
          }
          else
          {
LABEL_357:
            v300 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
            if (*((_QWORD *)&v368 + 1))
              goto LABEL_358;
          }
          if (v367)
            v303 = v366 == 0;
          else
            v303 = 1;
          if (!v303)
          {
            if (__p)
            {
              v364 = (char *)__p;
              operator delete(__p);
            }
          }
LABEL_26:
          v39 += 1344;
          v38 = v322;
        }
        v37 = (_QWORD *)*v316;
      }
      while (*v316);
    }
    kdebug_trace();
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v17 + 40))(*v17, v17 + 9);
    *(_OWORD *)a8 = *(_OWORD *)(v17 + 9);
    sub_207D08700(a8 + 16, (uint64_t)v309);
    if (v338)
    {
      sub_207CEC654((uint64_t)v337, (_QWORD *)v337[2]);
      v304 = v337[0];
      v337[0] = 0;
      if (v304)
        operator delete(v304);
      goto LABEL_379;
    }
  }
  else
  {
    *(_QWORD *)(a8 + 48) = 0;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_DWORD *)(a8 + 48) = 1065353216;
  }
  v305 = v336;
  if (v336)
  {
    v306 = (unint64_t *)&v336->__shared_owners_;
    do
      v307 = __ldaxr(v306);
    while (__stlxr(v307 - 1, v306));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
LABEL_379:
  if (v340 && v339[0])
  {
    v339[1] = v339[0];
    operator delete(v339[0]);
  }
}

void sub_207D07FEC()
{
  JUMPOUT(0x207D082F0);
}

void sub_207D07FF8()
{
  JUMPOUT(0x207D082E8);
}

void sub_207D08000()
{
  JUMPOUT(0x207D0826CLL);
}

void sub_207D08008()
{
  JUMPOUT(0x207D0826CLL);
}

void sub_207D08010()
{
  JUMPOUT(0x207D0826CLL);
}

void sub_207D08018()
{
  JUMPOUT(0x207D0826CLL);
}

void sub_207D08020()
{
  JUMPOUT(0x207D0826CLL);
}

void sub_207D08028()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 - 168))
  {
    v1 = *(_QWORD *)(v0 - 192);
    if (v1)
    {
      *(_QWORD *)(v0 - 184) = v1;
      JUMPOUT(0x207D08268);
    }
  }
  JUMPOUT(0x207D0826CLL);
}

void sub_207D08064()
{
  JUMPOUT(0x207D0826CLL);
}

void sub_207D0806C()
{
  JUMPOUT(0x207D0826CLL);
}

void sub_207D08074(void *a1, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    operator delete[](v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x207D08308);
}

void sub_207D08094()
{
  __cxa_end_catch();
  JUMPOUT(0x207D0826CLL);
}

void sub_207D080A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D08310(uint64_t result)
{
  uint64_t v1;
  void *exception;
  std::__shared_weak_count_vtbl *v3[2];

  v1 = result;
  if (!*(_BYTE *)(result + 56))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    sub_207CCBAD4(v3, v1);
    sub_207CCBA1C((uint64_t)exception, (uint64_t)v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C06FB80, (void (*)(void *))sub_207CCBA60);
  }
  return result;
}

void sub_207D08380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207C99D78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D08394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_207C99D78((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_207D083B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D083C4(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 56))
  {
    sub_207CEC654(a1 + 16, *(_QWORD **)(a1 + 32));
    v2 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v2)
      operator delete(v2);
    return a1;
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_207D08450(char **a1, uint64_t **a2)
{
  char *v4;
  char *i;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  void *v14;
  char *v15;
  _DWORD *v16;
  void *__p;

  (*(void (**)(char *))(*(_QWORD *)*a1 + 48))(*a1);
  v4 = a1[34];
  for (i = a1[35]; i != v4; i -= 16)
  {
    v6 = (std::__shared_weak_count *)*((_QWORD *)i - 1);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  a1[35] = v4;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      sub_207DF8934(*v9, &__p);
      v12 = (void **)a1[35];
      if (v12 >= (void **)a1[36])
      {
        v15 = sub_207D09670(a1 + 34, (uint64_t *)&__p);
        v16 = __p;
        a1[35] = v15;
        __p = 0;
        if (v16)
          sub_207D098B8((int)&__p, v16);
      }
      else
      {
        v13 = __p;
        *v12 = __p;
        if (v13)
        {
          v11 = operator new(0x20uLL);
          v14 = __p;
          *v11 = &off_24C072B78;
          v11[1] = 0;
          v11[2] = 0;
          v11[3] = v14;
        }
        else
        {
          v11 = 0;
        }
        v12[1] = v11;
        a1[35] = (char *)(v12 + 2);
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
}

void sub_207D08588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _DWORD *__p)
{
  _DWORD *v11;

  v11 = __p;
  __p = 0;
  if (v11)
    sub_207D098B8((int)&__p, v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D085A8(uint64_t a1)
{
  void *v2;

  sub_207CEC654(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_207D085E0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v2 = *(std::__shared_weak_count **)(a1 + 1112);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 1096);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 1096);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(_BYTE *)(a1 + 1080))
  {
    if (*(_BYTE *)(a1 + 1072))
    {
      v8 = *(void **)(a1 + 1048);
      if (v8)
      {
        *(_QWORD *)(a1 + 1056) = v8;
        operator delete(v8);
      }
    }
  }
  v9 = *(void **)(a1 + 952);
  if (v9)
  {
    *(_QWORD *)(a1 + 960) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 384);
  if (v10)
  {
    *(_QWORD *)(a1 + 392) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 360);
  if (v11)
  {
    *(_QWORD *)(a1 + 368) = v11;
    operator delete(v11);
  }
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    v12 = *(void **)a1;
    if (!*(_QWORD *)a1)
      return a1;
    goto LABEL_24;
  }
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_24:
    *(_QWORD *)(a1 + 8) = v12;
    operator delete(v12);
  }
  return a1;
}

uint64_t sub_207D08700(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_207CA6B84(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_207D08840(a1, i + 2, i + 2);
  return a1;
}

void sub_207D08818(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D085A8(v1);
  _Unwind_Resume(a1);
}

void sub_207D0882C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D085A8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D08840(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (result[2] == v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = operator new(0x30uLL);
  *v28 = 0;
  v28[1] = v6;
  v13 = a3[1];
  v28[2] = *a3;
  v28[4] = 0;
  v28[5] = 0;
  v28[3] = 0;
  sub_207D08C50((uint64_t)(v28 + 3), v13, a3[2], 0xCF3CF3CF3CF3CF3DLL * ((a3[2] - v13) >> 6));
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_207CA6B84(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v17 = v28;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      v17 = v28;
      if (v16)
        goto LABEL_26;
    }
LABEL_50:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v28)
    {
      v27 = *(_QWORD *)(*v28 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v27 >= v7)
          v27 %= v7;
      }
      else
      {
        v27 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_61;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v17 = v28;
  if (!v16)
    goto LABEL_50;
LABEL_26:
  *v17 = *v16;
  *v16 = v28;
LABEL_61:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_207D08BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D08BD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D08BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D08BD4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D08BD4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
            v4 = sub_207D085E0(v4 - 1344);
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_207D08C50(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x30C30C30C30C31)
      sub_207CA420C();
    result = (uint64_t)operator new(1344 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 1344 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_207D08DD8(v8 + v9, a2 + v9);
        v9 += 1344;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_207D08D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207D08D54(&a9);
  _Unwind_Resume(a1);
}

void sub_207D08D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 1344)
    sub_207D085E0(v10 - 1344 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_207D08D54(&a9);
  _Unwind_Resume(a1);
}

void ***sub_207D08D54(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_207D085E0(v4 - 1344);
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D08DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  _DWORD *v51;
  int *v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_207CA420C();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(char *)(a2 + 79) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
    }
    else
    {
      v11 = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = v11;
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 156) = v13;
  v14 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v14;
  v15 = *(_QWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 180) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_QWORD *)(a1 + 204) = v17;
  v18 = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v18;
  v19 = *(_QWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_QWORD *)(a1 + 228) = v19;
  v20 = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v20;
  v21 = *(_QWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_QWORD *)(a1 + 252) = v21;
  sub_207D09340(a1 + 264, (uint64_t *)(a2 + 264));
  v22 = *(_OWORD *)(a2 + 456);
  v23 = *(_OWORD *)(a2 + 472);
  v24 = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 456) = v22;
  *(_OWORD *)(a1 + 472) = v23;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  if (*(_BYTE *)(a2 + 584))
  {
    v25 = *(_OWORD *)(a2 + 520);
    v26 = *(_OWORD *)(a2 + 536);
    v27 = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 568) = v27;
    *(_OWORD *)(a1 + 520) = v25;
    *(_OWORD *)(a1 + 536) = v26;
    *(_BYTE *)(a1 + 584) = 1;
  }
  *(_BYTE *)(a1 + 588) = 0;
  *(_BYTE *)(a1 + 652) = 0;
  if (*(_BYTE *)(a2 + 652))
  {
    v28 = *(_OWORD *)(a2 + 588);
    v29 = *(_OWORD *)(a2 + 604);
    v30 = *(_OWORD *)(a2 + 636);
    *(_OWORD *)(a1 + 620) = *(_OWORD *)(a2 + 620);
    *(_OWORD *)(a1 + 636) = v30;
    *(_OWORD *)(a1 + 588) = v28;
    *(_OWORD *)(a1 + 604) = v29;
    *(_BYTE *)(a1 + 652) = 1;
  }
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  if (*(_BYTE *)(a2 + 720))
  {
    v31 = *(_OWORD *)(a2 + 656);
    v32 = *(_OWORD *)(a2 + 672);
    v33 = *(_OWORD *)(a2 + 704);
    *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 704) = v33;
    *(_OWORD *)(a1 + 656) = v31;
    *(_OWORD *)(a1 + 672) = v32;
    *(_BYTE *)(a1 + 720) = 1;
  }
  *(_BYTE *)(a1 + 724) = 0;
  *(_BYTE *)(a1 + 788) = 0;
  if (*(_BYTE *)(a2 + 788))
  {
    v34 = *(_OWORD *)(a2 + 724);
    v35 = *(_OWORD *)(a2 + 740);
    v36 = *(_OWORD *)(a2 + 772);
    *(_OWORD *)(a1 + 756) = *(_OWORD *)(a2 + 756);
    *(_OWORD *)(a1 + 772) = v36;
    *(_OWORD *)(a1 + 724) = v34;
    *(_OWORD *)(a1 + 740) = v35;
    *(_BYTE *)(a1 + 788) = 1;
  }
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  if (*(_BYTE *)(a2 + 856))
  {
    v37 = *(_OWORD *)(a2 + 792);
    v38 = *(_OWORD *)(a2 + 808);
    v39 = *(_OWORD *)(a2 + 840);
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(a2 + 824);
    *(_OWORD *)(a1 + 840) = v39;
    *(_OWORD *)(a1 + 792) = v37;
    *(_OWORD *)(a1 + 808) = v38;
    *(_BYTE *)(a1 + 856) = 1;
  }
  *(_BYTE *)(a1 + 860) = 0;
  *(_BYTE *)(a1 + 924) = 0;
  if (*(_BYTE *)(a2 + 924))
  {
    v40 = *(_OWORD *)(a2 + 860);
    v41 = *(_OWORD *)(a2 + 876);
    v42 = *(_OWORD *)(a2 + 908);
    *(_OWORD *)(a1 + 892) = *(_OWORD *)(a2 + 892);
    *(_OWORD *)(a1 + 908) = v42;
    *(_OWORD *)(a1 + 860) = v40;
    *(_OWORD *)(a1 + 876) = v41;
    *(_BYTE *)(a1 + 924) = 1;
  }
  v43 = *(_OWORD *)(a2 + 928);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 928) = v43;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  v44 = *(_BYTE **)(a2 + 952);
  v45 = *(_BYTE **)(a2 + 960);
  v46 = v45 - v44;
  if (v45 != v44)
  {
    if (v46 < 0)
      sub_207CA420C();
    v47 = (char *)operator new(v45 - v44);
    *(_QWORD *)(a1 + 952) = v47;
    *(_QWORD *)(a1 + 960) = v47;
    v48 = &v47[8 * (v46 >> 3)];
    *(_QWORD *)(a1 + 968) = v48;
    memcpy(v47, v44, v46);
    *(_QWORD *)(a1 + 960) = v48;
  }
  v49 = *(_OWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 992) = *(_QWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 976) = v49;
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  v50 = *(_OWORD *)(a2 + 1008);
  *(_OWORD *)(a1 + 1019) = *(_OWORD *)(a2 + 1019);
  *(_OWORD *)(a1 + 1008) = v50;
  v51 = (_DWORD *)(a1 + 1040);
  v52 = (int *)(a2 + 1040);
  *(_BYTE *)(a1 + 1040) = 0;
  v53 = *(unsigned __int8 *)(a2 + 1080);
  *(_BYTE *)(a1 + 1080) = v53;
  if (v53)
  {
    v54 = *v52;
    *(_BYTE *)(a1 + 1044) = *(_BYTE *)(a2 + 1044);
    *v51 = v54;
    sub_207D095B4(a1 + 1048, a2 + 1048);
    *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
    v55 = *(_QWORD *)(a2 + 1096);
    *(_QWORD *)(a1 + 1096) = v55;
    if (!v55)
      goto LABEL_30;
  }
  else
  {
    *(_BYTE *)v51 = *(_BYTE *)v52;
    *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
    v55 = *(_QWORD *)(a2 + 1096);
    *(_QWORD *)(a1 + 1096) = v55;
    if (!v55)
      goto LABEL_30;
  }
  v56 = (unint64_t *)(v55 + 8);
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
LABEL_30:
  *(_QWORD *)(a1 + 1104) = *(_QWORD *)(a2 + 1104);
  v58 = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a1 + 1112) = v58;
  if (v58)
  {
    v59 = (unint64_t *)(v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *(_OWORD *)(a2 + 1120);
  v62 = *(_OWORD *)(a2 + 1136);
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v62;
  *(_OWORD *)(a1 + 1120) = v61;
  v63 = *(_QWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a2 + 1168);
  *(_QWORD *)(a1 + 1160) = v63;
  v64 = *(_OWORD *)(a2 + 1172);
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1172) = v64;
  v65 = *(_QWORD *)(a2 + 1200);
  *(_DWORD *)(a1 + 1208) = *(_DWORD *)(a2 + 1208);
  *(_QWORD *)(a1 + 1200) = v65;
  v66 = *(_QWORD *)(a2 + 1212);
  *(_DWORD *)(a1 + 1220) = *(_DWORD *)(a2 + 1220);
  *(_QWORD *)(a1 + 1212) = v66;
  v67 = *(_QWORD *)(a2 + 1224);
  *(_DWORD *)(a1 + 1232) = *(_DWORD *)(a2 + 1232);
  *(_QWORD *)(a1 + 1224) = v67;
  v68 = *(_QWORD *)(a2 + 1236);
  *(_DWORD *)(a1 + 1244) = *(_DWORD *)(a2 + 1244);
  *(_QWORD *)(a1 + 1236) = v68;
  v69 = *(_QWORD *)(a2 + 1248);
  *(_DWORD *)(a1 + 1256) = *(_DWORD *)(a2 + 1256);
  *(_QWORD *)(a1 + 1248) = v69;
  v70 = *(_QWORD *)(a2 + 1260);
  *(_DWORD *)(a1 + 1268) = *(_DWORD *)(a2 + 1268);
  *(_QWORD *)(a1 + 1260) = v70;
  v71 = *(_QWORD *)(a2 + 1272);
  *(_DWORD *)(a1 + 1280) = *(_DWORD *)(a2 + 1280);
  *(_QWORD *)(a1 + 1272) = v71;
  v72 = *(_QWORD *)(a2 + 1284);
  *(_DWORD *)(a1 + 1292) = *(_DWORD *)(a2 + 1292);
  *(_QWORD *)(a1 + 1284) = v72;
  v73 = *(_OWORD *)(a2 + 1296);
  v74 = *(_OWORD *)(a2 + 1312);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(_OWORD *)(a1 + 1312) = v74;
  *(_OWORD *)(a1 + 1296) = v73;
  return a1;
}

void sub_207D092D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 79) < 0)
    operator delete(*v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D09340(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  v6 = *((_DWORD *)a2 + 5);
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 12) = v5;
  *(_BYTE *)(a1 + 36) = 0;
  if (*((_BYTE *)a2 + 36))
  {
    v7 = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 36) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 52) = 0;
  if (*((_BYTE *)a2 + 52))
  {
    v8 = a2[5];
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    *(_QWORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 52) = 1;
  }
  v9 = *(_OWORD *)(a2 + 7);
  v10 = *(_OWORD *)(a2 + 9);
  v11 = *((_DWORD *)a2 + 22);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v13 = (_BYTE *)a2[12];
  v12 = (_BYTE *)a2[13];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 2) > 0x1555555555555555)
      sub_207CA420C();
    v15 = (char *)operator new(v14);
    *(_QWORD *)(a1 + 96) = v15;
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = &v15[4 * (v14 >> 2)];
    v16 = 12 * ((v14 - 12) / 0xCuLL) + 12;
    memcpy(v15, v13, v16);
    *(_QWORD *)(a1 + 104) = &v15[v16];
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v18 = (_BYTE *)a2[15];
  v17 = (_BYTE *)a2[16];
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v19 >> 2) > 0x1555555555555555)
      sub_207CA420C();
    v20 = (char *)operator new(v19);
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v20;
    *(_QWORD *)(a1 + 136) = &v20[4 * (v19 >> 2)];
    memcpy(v20, v18, 12 * ((v19 - 12) / 0xCuLL) + 12);
    *(_QWORD *)(a1 + 128) = &v20[12 * ((v19 - 12) / 0xCuLL) + 12];
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  if (*((_BYTE *)a2 + 156))
  {
    v21 = a2[18];
    *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
    *(_QWORD *)(a1 + 144) = v21;
    *(_BYTE *)(a1 + 156) = 1;
  }
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  if (*((_BYTE *)a2 + 172))
  {
    v22 = a2[20];
    *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 42);
    *(_QWORD *)(a1 + 160) = v22;
    *(_BYTE *)(a1 + 172) = 1;
  }
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  return a1;
}

void sub_207D09580(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 104) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D095B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v4 = *(const void **)a2;
    v3 = *(_QWORD *)(a2 + 8);
    v5 = v3 - *(_QWORD *)a2;
    if (v3 != *(_QWORD *)a2)
    {
      if ((v5 & 0x8000000000000000) != 0)
        sub_207CF94B8();
      v6 = (char *)operator new(v3 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = &v6[v5];
      *(_QWORD *)(a1 + 16) = &v6[v5];
      memcpy(v6, v4, v5);
      *(_QWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_207D0963C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 24))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_207D09670(char **a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *v22;
  char *v23;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_207CA420C();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_207CA3AB8();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  v10 = &v8[16 * v7];
  v11 = *a2;
  *(_QWORD *)v9 = *a2;
  if (v11)
  {
    v12 = operator new(0x20uLL);
    *v12 = &off_24C072B78;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v11;
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)v9 + 1) = v12;
  *a2 = 0;
  v13 = v9 + 16;
  v22 = v9 + 16;
  v15 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    v17 = a1[1];
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v14 - 1);
      v14 -= 16;
      *((_OWORD *)v9 - 1) = v16;
      v9 -= 16;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
    }
    while (v14 != v15);
    v17 = *a1;
    v14 = a1[1];
    v13 = v22;
  }
  *a1 = v9;
  a1[1] = v13;
  a1[2] = v10;
  if (v14 == v17)
  {
    if (v14)
LABEL_20:
      operator delete(v14);
  }
  else
  {
    do
    {
      v23 = v14 - 16;
      v19 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v14 = v23;
    }
    while (v23 != v17);
    v14 = v17;
    if (v17)
      goto LABEL_20;
  }
  return v13;
}

void sub_207D09814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D099C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D0982C(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D09840(uint64_t a1)
{
  sub_207D098B8(a1 + 24, *(_DWORD **)(a1 + 24));
}

uint64_t sub_207D09848(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3vio8geometry13LensModelCRTPINS3_14VariantVIOLensEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3vio8geometry13LensModelCRTPINS3_14VariantVIOLensEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3vio8geometry13LensModelCRTPINS3_14VariantVIOLensEEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3vio8geometry13LensModelCRTPINS3_14VariantVIOLensEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207D098B8(int a1, _DWORD *__p)
{
  unsigned int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *p_shared_owners;
  unint64_t *v9;

  if (__p)
  {
    v3 = __p[248];
    if (v3 == -1)
      goto LABEL_27;
    if (v3 > 7)
    {
      if (v3 > 0xB)
      {
        if (v3 < 0xF)
          goto LABEL_27;
        v4 = (std::__shared_weak_count *)*((_QWORD *)__p + 112);
        if (!v4)
          goto LABEL_27;
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
      }
      else if (v3 > 9)
      {
        if (v3 == 10)
          goto LABEL_27;
        v4 = (std::__shared_weak_count *)*((_QWORD *)__p + 84);
        if (!v4)
          goto LABEL_27;
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(v9);
        while (__stlxr(v6 - 1, v9));
      }
      else
      {
        if (v3 != 9)
          goto LABEL_27;
        v4 = (std::__shared_weak_count *)*((_QWORD *)__p + 63);
        if (!v4)
          goto LABEL_27;
        v7 = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(v7);
        while (__stlxr(v6 - 1, v7));
      }
    }
    else
    {
      if (v3 != 7)
        goto LABEL_27;
      v4 = (std::__shared_weak_count *)*((_QWORD *)__p + 60);
      if (!v4)
        goto LABEL_27;
      v5 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
    }
    if (v6)
    {
LABEL_27:
      operator delete(__p);
      return;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(__p);
  }
}

uint64_t sub_207D099C4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_207D09A50(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  BOOL v7;
  void **v10;
  int v11;
  void *v12;
  int v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  void *v21;
  __int128 v22;
  _BYTE v23[15];
  _BYTE v24[15];
  _BYTE v25[15];

  if (*(_BYTE *)(a1 + 120))
    v7 = *(_BYTE *)(a2 + 120) == 0;
  else
    v7 = 1;
  if (!v7)
    return;
  if (!*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(a2 + 120))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (*(_BYTE *)(a1 + 112))
      {
        v15 = (void **)(a1 + 16);
        *(_BYTE *)(a2 + 40) = 0;
        if (*(_BYTE *)(a1 + 40))
        {
          v16 = *(_OWORD *)v15;
          *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
          *(_OWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *v15 = 0;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (*(_BYTE *)(a1 + 104))
        {
          v17 = *(_OWORD *)(a1 + 48);
          *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
          *(_OWORD *)(a2 + 48) = v17;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
          v18 = *(_OWORD *)(a1 + 80);
          *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
          *(_OWORD *)(a2 + 80) = v18;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        if (*(_BYTE *)(a1 + 112))
        {
          if (*(_BYTE *)(a1 + 104))
          {
            if (*(char *)(a1 + 103) < 0)
              operator delete(*(void **)(a1 + 80));
            if (*(char *)(a1 + 71) < 0)
              operator delete(*(void **)(a1 + 48));
          }
          if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
            operator delete(*v15);
        }
      }
      v19 = *(_BYTE *)(a1 + 120);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      goto LABEL_31;
    }
LABEL_29:
    sub_207D09DA8((__int128 *)a1, (__int128 *)a2);
    return;
  }
  if (*(_BYTE *)(a2 + 120))
    goto LABEL_29;
  v22 = *(_OWORD *)a2;
  if (!*(_BYTE *)(a2 + 112))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v19 = 1;
LABEL_31:
    *(_BYTE *)(a2 + 120) = v19;
    return;
  }
  v10 = (void **)(a2 + 16);
  v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v12 = *(void **)(a2 + 16);
    *(_QWORD *)v25 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v25[7] = *(_QWORD *)(a2 + 31);
    v2 = *(_BYTE *)(a2 + 39);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *v10 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
      goto LABEL_11;
  }
  else
  {
    v12 = 0;
    v13 = *(unsigned __int8 *)(a2 + 104);
    if (*(_BYTE *)(a2 + 104))
    {
LABEL_11:
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)v24 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)&v24[7] = *(_QWORD *)(a2 + 63);
      v5 = *(_BYTE *)(a2 + 71);
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v6 = *(_QWORD *)(a2 + 72);
      v3 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)v23 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)&v23[7] = *(_QWORD *)(a2 + 95);
      v4 = *(_BYTE *)(a2 + 103);
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      if (!v11)
        goto LABEL_37;
      goto LABEL_35;
    }
  }
  v14 = 0;
  if (!v11)
    goto LABEL_37;
LABEL_35:
  if (*(char *)(a2 + 39) < 0)
  {
    v21 = v12;
    operator delete(*v10);
    v12 = v21;
    *(_OWORD *)a1 = v22;
    *(_BYTE *)(a1 + 112) = 0;
LABEL_38:
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)v25;
    *(_QWORD *)(a1 + 31) = *(_QWORD *)&v25[7];
    *(_BYTE *)(a1 + 39) = v2;
    *(_BYTE *)(a1 + 40) = 1;
    v12 = 0;
    v2 = 0;
    goto LABEL_39;
  }
LABEL_37:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (v11)
    goto LABEL_38;
LABEL_39:
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v13)
  {
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)v24;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)&v24[7];
    *(_BYTE *)(a1 + 71) = v5;
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)v23;
    *(_QWORD *)(a1 + 95) = *(_QWORD *)&v23[7];
    *(_BYTE *)(a1 + 103) = v4;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  v20 = *(_BYTE *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a2 + 120) = v20;
  if (v11)
  {
    if (v2 < 0)
      operator delete(v12);
  }
}

void sub_207D09DA8(__int128 *a1, __int128 *a2)
{
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 __p;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  char v15;

  v5 = *a1;
  v3 = a1 + 1;
  LOBYTE(__p) = 0;
  v15 = 0;
  if (*((_BYTE *)a1 + 112))
  {
    v8 = 0;
    if (*((_BYTE *)a1 + 40))
    {
      __p = *v3;
      v7 = *((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *(_QWORD *)v3 = 0;
      v8 = 1;
    }
    LOBYTE(v9) = 0;
    v14 = 0;
    if (*((_BYTE *)a1 + 104))
    {
      v4 = *((_QWORD *)a1 + 9);
      v10 = *((_QWORD *)a1 + 8);
      v9 = a1[3];
      *((_QWORD *)a1 + 7) = 0;
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 6) = 0;
      v11 = v4;
      *(_OWORD *)v12 = a1[5];
      v13 = *((_QWORD *)a1 + 12);
      *((_QWORD *)a1 + 10) = 0;
      *((_QWORD *)a1 + 11) = 0;
      *((_QWORD *)a1 + 12) = 0;
      v14 = 1;
    }
    v15 = 1;
  }
  *a1 = *a2;
  sub_207D09F10((uint64_t)(a1 + 1), a2 + 1);
  *a2 = v5;
  sub_207D09F10((uint64_t)(a2 + 1), &__p);
  if (v15)
  {
    if (!v14)
      goto LABEL_11;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(v12[0]);
      if ((SHIBYTE(v10) & 0x80000000) == 0)
      {
LABEL_11:
        if (!v8)
          return;
        goto LABEL_12;
      }
    }
    else if ((SHIBYTE(v10) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete((void *)v9);
    if (!v8)
      return;
LABEL_12:
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
  }
}

void sub_207D09F10(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (*(unsigned __int8 *)(a1 + 96) != *((unsigned __int8 *)a2 + 96))
  {
    if (!*(_BYTE *)(a1 + 96))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (*((_BYTE *)a2 + 24))
      {
        v6 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v6;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)a2 = 0;
        *(_BYTE *)(a1 + 24) = 1;
      }
      *(_BYTE *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 88) = 0;
      v5 = 1;
      if (*((_BYTE *)a2 + 88))
      {
        v7 = a2[2];
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 32) = v7;
        *((_QWORD *)a2 + 5) = 0;
        *((_QWORD *)a2 + 6) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        v8 = a2[4];
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_OWORD *)(a1 + 64) = v8;
        *((_QWORD *)a2 + 9) = 0;
        *((_QWORD *)a2 + 10) = 0;
        *((_QWORD *)a2 + 8) = 0;
        *(_BYTE *)(a1 + 88) = 1;
        *(_BYTE *)(a1 + 96) = 1;
        return;
      }
      goto LABEL_16;
    }
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_12;
    if (*(char *)(a1 + 87) < 0)
    {
      operator delete(*(void **)(a1 + 64));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_12:
        v5 = *(_BYTE *)(a1 + 24);
        if (v5)
        {
LABEL_13:
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v5 = 0;
        }
LABEL_16:
        *(_BYTE *)(a1 + 96) = v5;
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 24);
    if (v5)
      goto LABEL_13;
    goto LABEL_16;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
    {
      if (*(_BYTE *)(a1 + 24))
      {
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        v4 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v4;
        *((_BYTE *)a2 + 23) = 0;
        *(_BYTE *)a2 = 0;
      }
    }
    else if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      v9 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v9;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
    sub_207D0A0D0(a1 + 32, a2 + 2);
  }
}

void sub_207D0A0D0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 56) != *((unsigned __int8 *)a2 + 56))
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      v7 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v7;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v8 = a2[2];
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_OWORD *)(a1 + 32) = v8;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *(_BYTE *)(a1 + 56) = 1;
      return;
    }
    if (*(char *)(a1 + 55) < 0)
    {
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_12:
      *(_BYTE *)(a1 + 56) = 0;
      return;
    }
    operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 56) = 0;
    return;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v5 = (void **)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v5);
    v6 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
    *((_BYTE *)a2 + 55) = 0;
    *((_BYTE *)a2 + 32) = 0;
  }
}

_QWORD *sub_207D0A20C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_24C072BC8;
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[12];
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = (std::__shared_weak_count *)a1[12];
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_207D0A2D4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_207D0A33C(_QWORD *__p)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *__p = &off_24C072BC8;
  v2 = (void *)__p[15];
  if (v2)
  {
    __p[16] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[14];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)__p[12];
      if (v6)
        goto LABEL_8;
LABEL_11:
      operator delete(__p);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)__p[12];
  if (!v6)
    goto LABEL_11;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_11;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_207D0A408(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D0A41C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete[](v1);
}

uint64_t sub_207D0A42C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3vio8cv_types12ArrayDeleterIhEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIhEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3vio8cv_types12ArrayDeleterIhEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3vio8cv_types12ArrayDeleterIhEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_207D0A49C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_207D0A504()
{
  return 21;
}

uint64_t sub_207D0A50C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_207D0A514@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_207D0A528(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_207D0A5AC(uint64_t a1@<X0>, double **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void *a10@<D0>)
{
  double **v15;
  uint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  double *v35;
  const void *v36;
  size_t v37;
  _BYTE *v38;
  _BYTE *v39;
  size_t v40;
  unint64_t v41;
  unsigned __int8 v42;
  _BYTE *v43;
  _BYTE *v44;
  int64_t v45;
  char *v46;
  char *v47;
  int v48;
  size_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  double *v59;
  unint64_t *v60;
  unint64_t v61;
  char v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  double *v66;
  unint64_t *v67;
  unint64_t v68;
  size_t v69;
  char *v70;
  char *v71;
  double *v72;
  unint64_t *v73;
  unint64_t v74;
  double **v75;
  void *v76;
  size_t v77;
  char *v78;
  char *v79;
  size_t v80;
  char *v81;
  char *v82;
  char v83;
  double *v84;
  double *v85;
  unint64_t *v86;
  unint64_t v87;
  double *v88;
  unint64_t *v89;
  unint64_t v90;
  double *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  void *__dst;
  char *v100;
  char *v101;
  char v102;
  void *__src[2];
  uint64_t v104;
  void *__p;
  uint64_t v106;
  uint64_t v107;
  uint64_t (**v108)();
  uint64_t v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int16 v114;
  char v115;
  uint64_t v116;
  _BYTE *v117;
  void *v118;
  char v119;
  char v120;
  void *v121;
  char v122;
  void *v123;
  char v124;
  char v125;
  char v126;
  char v127;

  v15 = a2;
  v17 = a1;
  LOBYTE(v108) = 0;
  v115 = 0;
  if (*(_BYTE *)(a8 + 80))
  {
    v108 = &off_24C072A80;
    v19 = *(_QWORD *)(a8 + 8);
    v20 = *(std::__shared_weak_count **)(a8 + 16);
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
      v23 = *(_WORD *)(a8 + 72);
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      v25 = *(_OWORD *)(a8 + 40);
      v111 = *(_OWORD *)(a8 + 24);
      v112 = v25;
      v113 = *(_OWORD *)(a8 + 56);
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      v109 = v19;
      v110 = v20;
      v114 = v23;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      v17 = a1;
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      v29 = *(_WORD *)(a8 + 72);
      v109 = *(_QWORD *)(a8 + 8);
      v110 = 0;
      v111 = *(_OWORD *)(a8 + 24);
      v112 = *(_OWORD *)(a8 + 40);
      v113 = *(_OWORD *)(a8 + 56);
      v114 = v29;
    }
    v115 = 1;
    v15 = a2;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*(_QWORD *)v17 + 16))(&v116, v17, a3, a4, a5, a6, a7, &v108);
  v30 = a9;
  if (!v115)
    goto LABEL_23;
  v31 = v110;
  if (!v110)
    goto LABEL_23;
  v32 = (unint64_t *)&v110->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (v127)
    {
LABEL_24:
      v34 = v17;
      v35 = *v15;
      if (*v15)
      {
        v36 = (const void *)*((_QWORD *)v35 + 3);
        v37 = *((_QWORD *)v35 + 4) - (_QWORD)v36;
        v39 = v117;
        v38 = v118;
        v40 = (_BYTE *)v118 - v117;
        if (v37 == (_BYTE *)v118 - v117
          && !memcmp(v36, v117, v37)
          && ((*((_DWORD *)v35 + 4) ^ v116) & 0x7FLL) == 0)
        {
          v41 = *(_QWORD *)v35 + 1;
          *(_QWORD *)v35 = v41;
          v35[1] = *(double *)&a10;
          if (v41 >= *(_QWORD *)(v34 + 16))
            goto LABEL_29;
LABEL_51:
          *(_BYTE *)v30 = -1;
          *(_BYTE *)(v30 + 40) = 0;
          v59 = v15[1];
          *(_QWORD *)(v30 + 48) = v35;
          *(_QWORD *)(v30 + 56) = v59;
          if (v59)
          {
            v60 = (unint64_t *)(v59 + 1);
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          goto LABEL_120;
        }
      }
      else
      {
        v39 = v117;
        v38 = v118;
        v40 = (_BYTE *)v118 - v117;
      }
      __src[0] = (void *)1;
      __src[1] = a10;
      v52 = v116;
      v104 = v116;
      __p = 0;
      v106 = 0;
      v107 = 0;
      if (v38 == v39)
      {
        v54 = 0;
        v53 = 0;
      }
      else
      {
        if ((v40 & 0x8000000000000000) != 0)
          sub_207CF94B8();
        v53 = (char *)operator new(v40);
        v54 = &v53[v40];
        memcpy(v53, v39, v40);
      }
      v55 = (char *)operator new(0x48uLL);
      *((_QWORD *)v55 + 1) = 0;
      *((_QWORD *)v55 + 2) = 0;
      *(_QWORD *)v55 = off_24C072C40;
      *(_OWORD *)(v55 + 24) = *(_OWORD *)__src;
      *((_QWORD *)v55 + 5) = v52;
      *((_QWORD *)v55 + 6) = v53;
      *((_QWORD *)v55 + 7) = v54;
      *((_QWORD *)v55 + 8) = v54;
      v106 = 0;
      v107 = 0;
      __p = 0;
      v56 = (std::__shared_weak_count *)v15[1];
      *v15 = (double *)(v55 + 24);
      v15[1] = (double *)v55;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      if (__p)
        operator delete(__p);
      v35 = *v15;
      if (*(_QWORD *)*v15 >= *(_QWORD *)(v34 + 16))
      {
LABEL_29:
        v42 = v116;
        v43 = v117;
        v44 = v118;
        if (v117 == v118)
        {
          LOBYTE(__dst) = 0;
          v102 = 0;
          v48 = v116;
          if (v116 <= 0x3Fu)
            goto LABEL_32;
        }
        else
        {
          __dst = 0;
          v100 = 0;
          v101 = 0;
          v45 = (_BYTE *)v118 - v117;
          if ((_BYTE *)v118 - v117 < 0)
            sub_207CF94B8();
          v46 = (char *)operator new((_BYTE *)v118 - v117);
          v47 = &v46[v45];
          __dst = v46;
          v101 = &v46[v45];
          memcpy(v46, v43, v44 - v43);
          v100 = v47;
          v102 = 1;
          v48 = v42;
          if (v42 <= 0x3Fu)
          {
LABEL_32:
            if (v48)
            {
              if (v48 == 8)
              {
                LODWORD(__src[0]) = 0;
                BYTE4(__src[0]) = 2;
                LOBYTE(__src[1]) = 0;
                LOBYTE(v106) = 0;
                if (v43 == v44)
                {
                  *(_DWORD *)v30 = __src[0];
                  *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
                  *(_BYTE *)(v30 + 8) = 0;
                  *(_BYTE *)(v30 + 32) = 0;
                }
                else
                {
                  __src[1] = 0;
                  v104 = 0;
                  __p = 0;
                  v49 = v100 - (_BYTE *)__dst;
                  if (v100 == __dst)
                  {
                    v51 = 0;
                    v50 = 0;
                  }
                  else
                  {
                    if ((v49 & 0x8000000000000000) != 0)
                      sub_207CF94B8();
                    v50 = (char *)operator new(v100 - (_BYTE *)__dst);
                    v51 = &v50[v49];
                    memcpy(v50, __dst, v49);
                  }
                  *(_DWORD *)v30 = __src[0];
                  *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
                  *(_QWORD *)(v30 + 8) = v50;
                  *(_QWORD *)(v30 + 16) = v51;
                  *(_QWORD *)(v30 + 24) = v51;
                  v104 = 0;
                  __p = 0;
                  __src[1] = 0;
                  *(_BYTE *)(v30 + 32) = 1;
                }
                *(_BYTE *)(v30 + 40) = 1;
                v85 = a2[1];
                *(_QWORD *)(v30 + 48) = v35;
                *(_QWORD *)(v30 + 56) = v85;
                if (v85)
                {
                  v86 = (unint64_t *)(v85 + 1);
                  do
                    v87 = __ldxr(v86);
                  while (__stxr(v87 + 1, v86));
                }
                goto LABEL_108;
              }
LABEL_72:
              *(_DWORD *)v30 = 2;
              *(_BYTE *)(v30 + 4) = v42;
              *(_BYTE *)(v30 + 8) = 0;
              *(_BYTE *)(v30 + 32) = 0;
              *(_BYTE *)(v30 + 40) = 1;
              v72 = a2[1];
              *(_QWORD *)(v30 + 48) = v35;
              *(_QWORD *)(v30 + 56) = v72;
              if (v72)
              {
                v73 = (unint64_t *)(v72 + 1);
                do
                  v74 = __ldxr(v73);
                while (__stxr(v74 + 1, v73));
              }
              goto LABEL_117;
            }
            if (v43 == v44)
            {
              LODWORD(__src[0]) = 0;
              BYTE4(__src[0]) = 0;
              LOBYTE(__src[1]) = 0;
              v75 = a2;
            }
            else
            {
              LOWORD(__src[0]) = 0;
              sub_207D0B114((uint64_t)&__dst, (char *)__dst, (char *)__src, (char *)__src + 2, 2);
              v75 = a2;
              LODWORD(__src[0]) = 0;
              BYTE4(__src[0]) = 0;
              LOBYTE(__src[1]) = 0;
              LOBYTE(v106) = 0;
              if (v102)
              {
                __src[1] = 0;
                v104 = 0;
                __p = 0;
                v76 = __dst;
                v77 = v100 - (_BYTE *)__dst;
                if (v100 == __dst)
                {
                  v79 = 0;
                  v78 = 0;
                }
                else
                {
                  if ((v77 & 0x8000000000000000) != 0)
                    sub_207CF94B8();
                  v78 = (char *)operator new(v100 - (_BYTE *)__dst);
                  v79 = &v78[v77];
                  memcpy(v78, v76, v77);
                }
                v83 = 0;
                *(_DWORD *)v30 = __src[0];
                *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
                *(_QWORD *)(v30 + 8) = v78;
                *(_QWORD *)(v30 + 16) = v79;
                *(_QWORD *)(v30 + 24) = v79;
                v104 = 0;
                __p = 0;
                __src[1] = 0;
                *(_BYTE *)(v30 + 32) = 1;
                *(_BYTE *)(v30 + 40) = 1;
                v84 = a2[1];
                *(_QWORD *)(v30 + 48) = *a2;
                *(_QWORD *)(v30 + 56) = v84;
                if (!v84)
                {
LABEL_114:
                  if ((v83 & 1) != 0)
                  {
LABEL_117:
                    if (v102 && __dst)
                    {
                      v100 = (char *)__dst;
                      operator delete(__dst);
                    }
                    goto LABEL_120;
                  }
LABEL_115:
                  if (__src[1])
                    operator delete(__src[1]);
                  goto LABEL_117;
                }
LABEL_112:
                v94 = (unint64_t *)(v84 + 1);
                do
                  v95 = __ldxr(v94);
                while (__stxr(v95 + 1, v94));
                goto LABEL_114;
              }
            }
            *(_DWORD *)v30 = __src[0];
            *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
            *(_BYTE *)(v30 + 8) = 0;
            *(_BYTE *)(v30 + 32) = 0;
            v83 = 1;
            *(_BYTE *)(v30 + 40) = 1;
            v84 = v75[1];
            *(_QWORD *)(v30 + 48) = *v75;
            *(_QWORD *)(v30 + 56) = v84;
            if (!v84)
              goto LABEL_114;
            goto LABEL_112;
          }
        }
        if (v48 == 64)
        {
          LODWORD(__src[0]) = 0;
          BYTE4(__src[0]) = 1;
          LOBYTE(__src[1]) = 0;
          LOBYTE(v106) = 0;
          if (v43 == v44)
          {
            *(_DWORD *)v30 = __src[0];
            *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
            *(_BYTE *)(v30 + 8) = 0;
            *(_BYTE *)(v30 + 32) = 0;
          }
          else
          {
            __src[1] = 0;
            v104 = 0;
            __p = 0;
            v80 = v100 - (_BYTE *)__dst;
            if (v100 == __dst)
            {
              v82 = 0;
              v81 = 0;
            }
            else
            {
              if ((v80 & 0x8000000000000000) != 0)
                sub_207CF94B8();
              v81 = (char *)operator new(v100 - (_BYTE *)__dst);
              v82 = &v81[v80];
              memcpy(v81, __dst, v80);
            }
            *(_DWORD *)v30 = __src[0];
            *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
            *(_QWORD *)(v30 + 8) = v81;
            *(_QWORD *)(v30 + 16) = v82;
            *(_QWORD *)(v30 + 24) = v82;
            v104 = 0;
            __p = 0;
            __src[1] = 0;
            *(_BYTE *)(v30 + 32) = 1;
          }
          *(_BYTE *)(v30 + 40) = 1;
          v91 = a2[1];
          *(_QWORD *)(v30 + 48) = v35;
          *(_QWORD *)(v30 + 56) = v91;
          if (v91)
          {
            v92 = (unint64_t *)(v91 + 1);
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
        }
        else
        {
          if (v48 != 110)
            goto LABEL_72;
          LODWORD(__src[0]) = 0;
          BYTE4(__src[0]) = 4;
          LOBYTE(__src[1]) = 0;
          LOBYTE(v106) = 0;
          if (v43 == v44)
          {
            *(_DWORD *)v30 = __src[0];
            *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
            *(_BYTE *)(v30 + 8) = 0;
            *(_BYTE *)(v30 + 32) = 0;
          }
          else
          {
            __src[1] = 0;
            v104 = 0;
            __p = 0;
            v69 = v100 - (_BYTE *)__dst;
            if (v100 == __dst)
            {
              v71 = 0;
              v70 = 0;
            }
            else
            {
              if ((v69 & 0x8000000000000000) != 0)
                sub_207CF94B8();
              v70 = (char *)operator new(v100 - (_BYTE *)__dst);
              v71 = &v70[v69];
              memcpy(v70, __dst, v69);
            }
            *(_DWORD *)v30 = __src[0];
            *(_BYTE *)(v30 + 4) = BYTE4(__src[0]);
            *(_QWORD *)(v30 + 8) = v70;
            *(_QWORD *)(v30 + 16) = v71;
            *(_QWORD *)(v30 + 24) = v71;
            v104 = 0;
            __p = 0;
            __src[1] = 0;
            *(_BYTE *)(v30 + 32) = 1;
          }
          *(_BYTE *)(v30 + 40) = 1;
          v88 = a2[1];
          *(_QWORD *)(v30 + 48) = v35;
          *(_QWORD *)(v30 + 56) = v88;
          if (v88)
          {
            v89 = (unint64_t *)(v88 + 1);
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
        }
LABEL_108:
        if (v43 == v44)
          goto LABEL_117;
        goto LABEL_115;
      }
      goto LABEL_51;
    }
  }
  else
  {
LABEL_23:
    if (v127)
      goto LABEL_24;
  }
  v62 = v116;
  v63 = (std::__shared_weak_count *)v15[1];
  *v15 = 0;
  v15[1] = 0;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  *(_BYTE *)v30 = v62;
  *(_BYTE *)(v30 + 40) = 0;
  v66 = v15[1];
  *(_QWORD *)(v30 + 48) = *v15;
  *(_QWORD *)(v30 + 56) = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 1);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
LABEL_120:
  if (v127)
  {
    v96 = v117;
    if (!v117)
      return;
    v118 = v117;
    goto LABEL_132;
  }
  if (v126)
  {
    if (v125)
    {
      if (v124 < 0)
        operator delete(v123);
      if (v122 < 0)
        operator delete(v121);
    }
    if (v120 && v119 < 0)
    {
      v96 = v118;
LABEL_132:
      operator delete(v96);
    }
  }
}

void sub_207D0AEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (__p)
    operator delete(__p);
  if ((_BYTE)a21 && __p)
    operator delete(__p);
  if (a16)
  {
    if (a13)
      operator delete(a13);
  }
  sub_207D0B008((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_207D0AF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_207D0AF98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D0AF98(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 80))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_207D0B008(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(_QWORD *)(a1 + 16) = v2;
LABEL_11:
      operator delete(v2);
      return a1;
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if (!*(_BYTE *)(a1 + 40))
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if (*(char *)(a1 + 39) < 0)
  {
    v2 = *(void **)(a1 + 16);
    goto LABEL_11;
  }
  return a1;
}

_QWORD *sub_207D0B09C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24C074F60;
  a1[1] = 0;
  if (v2)
  {
    v3 = (void *)sub_207DDC0B4(v2);
    operator delete(v3);
  }
  return a1;
}

void sub_207D0B0D8(_QWORD *__p)
{
  uint64_t v2;
  void *v3;

  v2 = __p[1];
  *__p = &off_24C074F60;
  __p[1] = 0;
  if (v2)
  {
    v3 = (void *)sub_207DDC0B4(v2);
    operator delete(v3);
  }
  operator delete(__p);
}

char *sub_207D0B114(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  _OWORD *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  char v36;
  char *v37;
  char *v38;
  unint64_t v39;
  __int128 v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  char *v47;
  char *v48;
  char *v49;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_207CF94B8();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v25 = &v13[(_QWORD)v16];
    memcpy(&v13[(_QWORD)v16], __src, a5);
    v26 = v5 - v11;
    v27 = &v13[(_QWORD)v16];
    if (v11 == v5)
      goto LABEL_47;
    v28 = v5;
    v29 = v25;
    if (v26 >= 8)
    {
      v28 = v5;
      v29 = v25;
      if ((unint64_t)(v11 - (_BYTE *)v16) >= 0x20)
      {
        if (v26 < 0x20)
        {
          v30 = 0;
          goto LABEL_39;
        }
        v30 = v26 & 0xFFFFFFFFFFFFFFE0;
        v37 = v5 - 16;
        v38 = (char *)v16 + v5 - 16 - v11;
        v39 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v40 = *(_OWORD *)v37;
          *((_OWORD *)v38 - 1) = *((_OWORD *)v37 - 1);
          *(_OWORD *)v38 = v40;
          v38 -= 32;
          v37 -= 32;
          v39 -= 32;
        }
        while (v39);
        if (v26 == v30)
          goto LABEL_46;
        if ((v26 & 0x18) != 0)
        {
LABEL_39:
          v28 = &v5[-(v26 & 0xFFFFFFFFFFFFFFF8)];
          v29 = &v25[-(v26 & 0xFFFFFFFFFFFFFFF8)];
          v41 = &v5[-v30 - 8];
          v42 = (char *)v16 + v41 - v11;
          v43 = v30 - (v26 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v44 = *(_QWORD *)v41;
            v41 -= 8;
            *v42-- = v44;
            v43 += 8;
          }
          while (v43);
          if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_46;
          goto LABEL_44;
        }
        v29 = &v25[-v30];
        v28 = &v5[-v30];
      }
    }
LABEL_44:
    v45 = v29 - 1;
    do
    {
      v46 = *--v28;
      *v45-- = v46;
    }
    while (v28 != v11);
LABEL_46:
    v10 = *(char **)(a1 + 8);
    v27 = (char *)v16;
LABEL_47:
    v47 = &v25[a5];
    v48 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v47, v5, v10 - v5);
    v49 = *(char **)a1;
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = &v47[v10 - v5];
    *(_QWORD *)(a1 + 16) = v48;
    if (v49)
      operator delete(v49);
    return v25;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
    v21 = &__dst[a5];
    v22 = &v10[-a5];
    v23 = v20;
    if ((unint64_t)v10 < a5)
      goto LABEL_31;
    goto LABEL_18;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    v21 = &v5[a5];
    v22 = &v20[-a5];
    v23 = &v10[v19];
    if (&v20[-a5] >= v10)
      goto LABEL_31;
LABEL_18:
    v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        v31 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        v32 = v20 + 16;
        v33 = (__int128 *)(v22 + 16);
        v34 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *v33;
          *(v32 - 1) = *(v33 - 1);
          *v32 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 32;
        }
        while (v34);
        v22 = v31;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_31;
      }
    }
    else
    {
      v23 = v20;
    }
    do
    {
      v36 = *v22++;
      *v23++ = v36;
    }
    while (v22 != v10);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(v21, v5, v20 - v21);
    if (v18 != __src)
      memmove(v5, __src, v18 - __src);
  }
  return v5;
}

void sub_207D0B420(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24C072C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_207D0B430(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C072C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_207D0B450(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_207D0B46C(uint64_t a1, _QWORD *a2)
{
  return sub_207D0B474(a1 + 8, a2);
}

uint64_t sub_207D0B474(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;
  __int128 v9;
  __int128 v10;
  void **v11;
  char v12;
  __int128 v13;
  void *v14;
  size_t v15;
  void **v16;
  char v17;
  __int128 v18;
  void *v19;
  size_t v20;
  __int128 v21;
  void **v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  void *v28;
  size_t v29;
  __int128 v30;
  void *v31;
  size_t v32;

  *(_QWORD *)a1 = *a2;
  v4 = a1 + 8;
  if ((_QWORD *)a1 == a2)
  {
    sub_207D0CAFC(a1 + 32, (_QWORD *)(a1 + 32));
    sub_207D0CAFC(a1 + 64, (_QWORD *)(a1 + 64));
  }
  else
  {
    v5 = *((_BYTE *)a2 + 31);
    if (*(char *)(a1 + 31) < 0)
    {
      if (v5 >= 0)
        v7 = a2 + 1;
      else
        v7 = (void *)a2[1];
      if (v5 >= 0)
        v8 = *((unsigned __int8 *)a2 + 31);
      else
        v8 = a2[2];
      sub_207CC2244((void **)v4, v7, v8);
    }
    else if ((*((_BYTE *)a2 + 31) & 0x80) != 0)
    {
      sub_207CC2180((_QWORD *)v4, (void *)a2[1], a2[2]);
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(v4 + 16) = a2[3];
      *(_OWORD *)v4 = v6;
    }
    sub_207D0CAFC(a1 + 32, a2 + 4);
    sub_207D0CAFC(a1 + 64, a2 + 8);
    sub_207CC1DDC((void **)(a1 + 96), (void **)a2[12], (void **)a2[13], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[13] - a2[12]) >> 3));
    v9 = *(_OWORD *)(a2 + 15);
    v10 = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 136) = v10;
    *(_OWORD *)(a1 + 120) = v9;
    sub_207D0CC14((_QWORD *)(a1 + 168), (char *)a2[21], (char *)a2[22], (uint64_t)(a2[22] - a2[21]) >> 2);
    sub_207D0CD6C(a1 + 192, (__int128 *)a2[24], (__int128 *)(a2 + 25));
    v11 = (void **)(a1 + 216);
    v12 = *((_BYTE *)a2 + 239);
    if (*(char *)(a1 + 239) < 0)
    {
      if (v12 >= 0)
        v14 = a2 + 27;
      else
        v14 = (void *)a2[27];
      if (v12 >= 0)
        v15 = *((unsigned __int8 *)a2 + 239);
      else
        v15 = a2[28];
      sub_207CC2244(v11, v14, v15);
    }
    else if ((*((_BYTE *)a2 + 239) & 0x80) != 0)
    {
      sub_207CC2180(v11, (void *)a2[27], a2[28]);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 27);
      *(_QWORD *)(a1 + 232) = a2[29];
      *(_OWORD *)v11 = v13;
    }
    *(_BYTE *)(a1 + 240) = *((_BYTE *)a2 + 240);
    v16 = (void **)(a1 + 248);
    v17 = *((_BYTE *)a2 + 271);
    if (*(char *)(a1 + 271) < 0)
    {
      if (v17 >= 0)
        v19 = a2 + 31;
      else
        v19 = (void *)a2[31];
      if (v17 >= 0)
        v20 = *((unsigned __int8 *)a2 + 271);
      else
        v20 = a2[32];
      sub_207CC2244(v16, v19, v20);
    }
    else if ((*((_BYTE *)a2 + 271) & 0x80) != 0)
    {
      sub_207CC2180(v16, (void *)a2[31], a2[32]);
    }
    else
    {
      v18 = *(_OWORD *)(a2 + 31);
      *(_QWORD *)(a1 + 264) = a2[33];
      *(_OWORD *)v16 = v18;
    }
  }
  *(_BYTE *)(a1 + 272) = *((_BYTE *)a2 + 272);
  sub_207D0CAFC(a1 + 280, a2 + 35);
  v21 = *(_OWORD *)(a2 + 39);
  *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
  *(_OWORD *)(a1 + 312) = v21;
  if ((_QWORD *)a1 != a2)
  {
    sub_207CC1DDC((void **)(a1 + 336), (void **)a2[42], (void **)a2[43], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[43] - a2[42]) >> 3));
    v22 = (void **)(a1 + 360);
    v23 = *((_BYTE *)a2 + 383);
    if (*(char *)(a1 + 383) < 0)
    {
      if (v23 >= 0)
        v28 = a2 + 45;
      else
        v28 = (void *)a2[45];
      if (v23 >= 0)
        v29 = *((unsigned __int8 *)a2 + 383);
      else
        v29 = a2[46];
      sub_207CC2244(v22, v28, v29);
      v25 = a1 + 384;
      v26 = a2 + 48;
      v27 = *((unsigned __int8 *)a2 + 407);
      if (*(char *)(a1 + 407) < 0)
        goto LABEL_51;
    }
    else if ((*((_BYTE *)a2 + 383) & 0x80) != 0)
    {
      sub_207CC2180(v22, (void *)a2[45], a2[46]);
      v25 = a1 + 384;
      v26 = a2 + 48;
      v27 = *((unsigned __int8 *)a2 + 407);
      if (*(char *)(a1 + 407) < 0)
      {
LABEL_51:
        if ((v27 & 0x80u) == 0)
          v31 = v26;
        else
          v31 = (void *)a2[48];
        if ((v27 & 0x80u) == 0)
          v32 = v27;
        else
          v32 = a2[49];
        sub_207CC2244((void **)v25, v31, v32);
        goto LABEL_59;
      }
    }
    else
    {
      v24 = *(_OWORD *)(a2 + 45);
      *(_QWORD *)(a1 + 376) = a2[47];
      *(_OWORD *)v22 = v24;
      v25 = a1 + 384;
      v26 = a2 + 48;
      v27 = *((unsigned __int8 *)a2 + 407);
      if (*(char *)(a1 + 407) < 0)
        goto LABEL_51;
    }
    if ((v27 & 0x80) != 0)
    {
      sub_207CC2180((_QWORD *)v25, (void *)a2[48], a2[49]);
    }
    else
    {
      v30 = *(_OWORD *)v26;
      *(_QWORD *)(v25 + 16) = v26[2];
      *(_OWORD *)v25 = v30;
    }
  }
LABEL_59:
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
  return a1;
}

void sub_207D0B754(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  float **v36;
  uint64_t *v37;
  uint64_t *v38;
  float *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  float **v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unsigned int *v67;
  uint64_t *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  float v82;
  float v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  int v95;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  float v131;
  unint64_t v132;
  float v133;
  unint64_t v134;
  float v135;
  float v136;
  float v137;
  unint64_t v138;
  float *v139;
  BOOL v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  char *v145;
  float *v146;
  float *v147;
  uint64_t v148;
  unint64_t v149;
  float v150;
  unint64_t v151;
  float v152;
  float v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  float *v157;
  float *i;
  uint64_t v159;
  int v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  __int128 v170;
  char *v171;
  uint64_t v172;
  char *v173;
  __int128 v174;
  double v175;
  uint64_t *v176;
  unsigned int *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  float *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  float *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (**v199)();
  unsigned __int8 v200;
  uint64_t *v201;
  std::__shared_weak_count *v202;
  void *__p;
  char *v204;
  char v205;
  uint8_t buf[32];
  uint8_t v207[32];
  int v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (*(_BYTE *)(a1 + 312))
  {
    v10 = *(_QWORD *)(a1 + 880);
    *(_QWORD *)v207 = &off_24C0848B8;
    if (*(char *)(a1 + 311) < 0)
    {
      sub_207CA40D8(&v207[8], *(void **)(a1 + 288), *(_QWORD *)(a1 + 296));
    }
    else
    {
      *(_OWORD *)&v207[8] = *(_OWORD *)(a1 + 288);
      *(_QWORD *)&v207[24] = *(_QWORD *)(a1 + 304);
    }
    (*(void (**)(uint64_t (***__return_ptr)(), _QWORD, uint8_t *))(**(_QWORD **)(v10 + 16) + 48))(&v199, *(_QWORD *)(v10 + 16), v207);
    *(_QWORD *)v207 = &off_24C0848B8;
    if ((char)v207[31] < 0)
      operator delete(*(void **)&v207[8]);
    v11 = v200;
    if (v200)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v37 = v201;
        if (*((char *)v201 + 23) < 0)
          v37 = (uint64_t *)*v201;
        *(_DWORD *)v207 = 136315138;
        *(_QWORD *)&v207[4] = v37;
        _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: CenterNet configuration failed with error: %s", v207, 0xCu);
      }
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    v199 = off_24C06E9E8;
    v12 = v202;
    if (!v202)
      goto LABEL_14;
    p_shared_owners = (unint64_t *)&v202->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v11)
        return;
    }
    else
    {
LABEL_14:
      if (v11)
        return;
    }
  }
  sub_2080BA4D8(*(_QWORD *)(*(_QWORD *)(a1 + 880) + 16), a2, 0, 0, (uint64_t)&v199);
  kdebug_trace();
  memset(v207, 0, sizeof(v207));
  v208 = 733236936;
  kdebug_trace();
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (v200)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v38 = v201;
      if (*((char *)v201 + 23) < 0)
        v38 = (uint64_t *)*v201;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v38;
      _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: CenterNet inference failed with error: %s", buf, 0xCu);
    }
    goto LABEL_17;
  }
  if (!v205)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT: CenterNet inference has no outputs", buf, 2u);
    }
    goto LABEL_17;
  }
  v197 = a1;
  if (*(_BYTE *)(a1 + 328))
    v21 = 6;
  else
    v21 = 4;
  v22 = (char *)__p;
  v23 = 0xEEEEEEEEEEEEEEEFLL * ((v204 - (_BYTE *)__p) >> 3);
  if (v23 == v21)
  {
    v24 = *((unsigned int *)__p + 1);
    v185 = *((unsigned int *)__p + 7);
    v198 = v24;
    if (v185 < v24)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v185;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v198;
      v25 = MEMORY[0x24BDACB70];
      v26 = "ODT: CenterNet unexpected buffer dimensions, output width step %lu: is less than width: %lu";
      goto LABEL_49;
    }
    v193 = *((unsigned int *)__p + 2);
    v186 = *((unsigned int *)__p + 3);
    if (*((_BYTE *)__p + 112))
    {
      v30 = v197;
      if (*((_BYTE *)__p + 108) && *((_QWORD *)__p + 12))
      {
        v31 = *((_QWORD *)__p + 8);
        v32 = (std::__shared_weak_count *)*((_QWORD *)__p + 9);
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
          do
            v35 = __ldaxr(v33);
          while (__stlxr(v35 - 1, v33));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v31 + 88))(v31, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v24 = v198;
      }
      v36 = (float **)(v22 + 96);
    }
    else
    {
      v36 = (float **)((char *)__p + 40);
      v30 = v197;
    }
    v39 = *v36;
    v176 = a4;
    if (v22[472])
    {
      if (v22[468] && *((_QWORD *)v22 + 57))
      {
        v40 = *((_QWORD *)v22 + 53);
        v41 = (std::__shared_weak_count *)*((_QWORD *)v22 + 54);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
          do
            v44 = __ldaxr(v42);
          while (__stlxr(v44 - 1, v42));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v40 + 88))(v40, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v24 = v198;
      }
      v45 = (float **)(v22 + 456);
    }
    else
    {
      v45 = (float **)(v22 + 400);
    }
    v177 = a3;
    v46 = 0;
    if ((_DWORD)v186)
    {
      v47 = 0;
      if ((_DWORD)v24 && (_DWORD)v193)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = *v45;
        v191 = v24;
        v51 = v185 - v24;
        do
        {
          v52 = 0;
          v188 = &v50[v185 * (unint64_t)v193];
          do
          {
            v53 = 0;
            v195 = &v50[v191];
            do
            {
              v54 = *v39;
              if (*v39 > *(float *)(v30 + 324) && (float)(v54 - *v50) == 0.0)
              {
                if (v47 < (unint64_t)v48)
                {
                  *(float *)v47 = v54;
                  *(_QWORD *)(v47 + 8) = v52;
                  *(_QWORD *)(v47 + 16) = v53;
                  *(_QWORD *)(v47 + 24) = v49;
                  v47 += 32;
                  goto LABEL_89;
                }
                v55 = (uint64_t)(v47 - (_QWORD)v46) >> 5;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 59)
                  sub_207D0CD58();
                if ((v48 - v46) >> 4 > v56)
                  v56 = (v48 - v46) >> 4;
                if ((unint64_t)(v48 - v46) >= 0x7FFFFFFFFFFFFFE0)
                  v57 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v57 = v56;
                if (v57)
                {
                  if (v57 >> 59)
                    sub_207CA3AB8();
                  v58 = (char *)operator new(32 * v57);
                  v59 = (uint64_t)&v58[32 * v55];
                  *(float *)v59 = v54;
                  *(_QWORD *)(v59 + 8) = v52;
                  *(_QWORD *)(v59 + 16) = v53;
                  *(_QWORD *)(v59 + 24) = v49;
                  if ((char *)v47 != v46)
                  {
LABEL_102:
                    v60 = v59;
                    do
                    {
                      v61 = (char *)(v60 - 32);
                      v62 = *(_OWORD *)(v47 - 16);
                      *(_OWORD *)(v60 - 32) = *(_OWORD *)(v47 - 32);
                      *(_OWORD *)(v60 - 16) = v62;
                      v47 -= 32;
                      v60 -= 32;
                    }
                    while ((char *)v47 != v46);
                    v48 = &v58[32 * v57];
                    v47 = v59 + 32;
                    if (v46)
LABEL_105:
                      operator delete(v46);
LABEL_106:
                    v46 = v61;
                    v30 = v197;
                    v24 = v198;
                    goto LABEL_89;
                  }
                }
                else
                {
                  v58 = 0;
                  v59 = 32 * v55;
                  *(float *)v59 = v54;
                  *(_QWORD *)(v59 + 8) = v52;
                  *(_QWORD *)(v59 + 16) = v53;
                  *(_QWORD *)(v59 + 24) = v49;
                  if ((char *)v47 != v46)
                    goto LABEL_102;
                }
                v61 = (char *)v59;
                v48 = &v58[32 * v57];
                v47 = v59 + 32;
                if (v46)
                  goto LABEL_105;
                goto LABEL_106;
              }
LABEL_89:
              ++v53;
              ++v39;
              ++v50;
            }
            while (v53 != v24);
            v39 = (float *)((char *)v39 + v51 * 4);
            v50 = &v195[v51];
            ++v52;
          }
          while (v52 != v193);
          ++v49;
          v50 = v188;
        }
        while (v49 != v186);
      }
    }
    else
    {
      v47 = 0;
    }
    v63 = 126 - 2 * __clz((uint64_t)(v47 - (_QWORD)v46) >> 5);
    if ((char *)v47 == v46)
      v64 = 0;
    else
      v64 = v63;
    sub_207D0D400((uint64_t)v46, v47, v64, 1);
    v65 = v46 + 3200;
    if (v47 - (unint64_t)v46 <= 0xC80)
      v65 = (char *)v47;
    v184 = v65;
    v66 = (char *)__p;
    if (*((_BYTE *)__p + 232))
    {
      v68 = v176;
      v67 = v177;
      v69 = v198;
      if (*((_BYTE *)__p + 228) && *((_QWORD *)__p + 27))
      {
        v71 = *((_QWORD *)__p + 23);
        v70 = (std::__shared_weak_count *)*((_QWORD *)__p + 24);
        if (v70)
        {
          v72 = (unint64_t *)&v70->__shared_owners_;
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
          do
            v74 = __ldaxr(v72);
          while (__stlxr(v74 - 1, v72));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v71 + 88))(v71, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v69 = v198;
      }
      v75 = (uint64_t *)(v66 + 216);
    }
    else
    {
      v75 = (uint64_t *)((char *)__p + 160);
      v68 = v176;
      v67 = v177;
      v69 = v198;
    }
    v183 = *v75;
    v175 = a5;
    if (v66[352])
    {
      if (v66[348] && *((_QWORD *)v66 + 42))
      {
        v77 = *((_QWORD *)v66 + 38);
        v76 = (std::__shared_weak_count *)*((_QWORD *)v66 + 39);
        if (v76)
        {
          v78 = (unint64_t *)&v76->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
          do
            v80 = __ldaxr(v78);
          while (__stlxr(v80 - 1, v78));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v77 + 88))(v77, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        v69 = v198;
      }
      v81 = (uint64_t *)(v66 + 336);
    }
    else
    {
      v81 = (uint64_t *)(v66 + 280);
    }
    if (v46 == v184)
    {
LABEL_255:
      sub_207D4C67C(v30, v68, v67, v175);
      if (v46)
        operator delete(v46);
      goto LABEL_17;
    }
    v181 = v185 * (unint64_t)v193;
    v182 = *v81;
    v82 = (float)v69;
    v83 = (float)v193;
    v84 = v46;
    while (1)
    {
      v86 = *((_QWORD *)v84 + 1);
      v87 = *((_QWORD *)v84 + 2);
      v88 = v87 + v86 * v185;
      v89 = *(float *)(v182 + 4 * v88) + (float)v86;
      v90 = (float)v87;
      v91 = 4 * (v88 + v181);
      v92 = *(float *)(v182 + v91) + v90;
      v93 = *(float *)(v183 + 4 * v88) * 0.5;
      v94 = *(float *)(v183 + v91) * 0.5;
      memset(buf, 0, 20);
      v95 = *(_DWORD *)v84;
      v96 = *((_QWORD *)v84 + 3);
      v97 = (float)(v92 - v93) / v82;
      v98 = (float)(v89 - v94) / v83;
      v99 = (float)(v92 + v93) / v82;
      v100 = (float)(v89 + v94) / v83;
      if (v97 <= v99)
        v101 = (float)(v92 - v93) / v82;
      else
        v101 = (float)(v92 + v93) / v82;
      if (v97 > v99)
        v99 = (float)(v92 - v93) / v82;
      if (v98 <= v100)
        v102 = (float)(v89 - v94) / v83;
      else
        v102 = (float)(v89 + v94) / v83;
      if (v98 > v100)
        v100 = (float)(v89 - v94) / v83;
      v103 = LODWORD(v102);
      v104 = LODWORD(v99) | ((unint64_t)LODWORD(v100) << 32);
      if (*(_BYTE *)(v30 + 328))
      {
        v178 = LODWORD(v102);
        v179 = LODWORD(v99) | ((unint64_t)LODWORD(v100) << 32);
        v187 = v84;
        v189 = LODWORD(v101);
        v105 = (char *)__p;
        if (*((_BYTE *)__p + 592))
        {
          if (*((_BYTE *)__p + 588) && *((_QWORD *)__p + 72))
          {
            v106 = *((_QWORD *)v84 + 3);
            v107 = *((_QWORD *)__p + 68);
            v108 = (std::__shared_weak_count *)*((_QWORD *)__p + 69);
            if (v108)
            {
              v109 = (unint64_t *)&v108->__shared_owners_;
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
              do
                v111 = __ldaxr(v109);
              while (__stlxr(v111 - 1, v109));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v107 + 88))(v107, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            v69 = v198;
            v96 = v106;
          }
          v112 = *((_QWORD *)v105 + 72);
          if (v105[712])
          {
LABEL_167:
            if (v105[708] && *((_QWORD *)v105 + 87))
            {
              v113 = v96;
              v114 = *((_QWORD *)v105 + 83);
              v115 = (std::__shared_weak_count *)*((_QWORD *)v105 + 84);
              if (v115)
              {
                v116 = (unint64_t *)&v115->__shared_owners_;
                do
                  v117 = __ldxr(v116);
                while (__stxr(v117 + 1, v116));
                do
                  v118 = __ldaxr(v116);
                while (__stlxr(v118 - 1, v116));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
              }
              (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v114 + 88))(v114, 0, "/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
              v69 = v198;
              v96 = v113;
            }
            v119 = (uint64_t *)(v105 + 696);
LABEL_189:
            v180 = v96;
            v131 = v93 * 1.2;
            v132 = (unint64_t)fmaxf(v92 - v131, 0.0);
            v133 = v92 + v131;
            if (v133 >= v82)
              v133 = v82;
            v134 = (unint64_t)v133;
            v135 = v94 * 1.2;
            v136 = fmaxf(v89 - v135, 0.0);
            v137 = v89 + v135;
            v138 = (unint64_t)v136;
            if (v137 >= v83)
              v137 = v83;
            v192 = (unint64_t)v137;
            v194 = v132;
            v139 = 0;
            if (v138 >= (unint64_t)v137 || v132 >= v134)
            {
              v147 = 0;
            }
            else
            {
              v146 = 0;
              v147 = 0;
              v148 = *v119;
              do
              {
                v149 = v138 * v69;
                v196 = v138;
                v150 = (float)v138 / v83;
                v151 = v194;
                do
                {
                  v152 = *(float *)(v112 + 4 * (v151 + v149));
                  if (v152 > *(float *)(v30 + 332) && (float)(v152 - *(float *)(v148 + 4 * (v151 + v149))) == 0.0)
                  {
                    v153 = (float)v151 / v82;
                    if (v147 < v146)
                    {
                      *v147 = v152;
                      v147[1] = v153;
                      v147[2] = v150;
                      v147 += 3;
                    }
                    else
                    {
                      v154 = 0xAAAAAAAAAAAAAAABLL * (v147 - v139) + 1;
                      if (v154 > 0x1555555555555555)
                        sub_207D0CD58();
                      if (0x5555555555555556 * (v146 - v139) > v154)
                        v154 = 0x5555555555555556 * (v146 - v139);
                      if (0xAAAAAAAAAAAAAAABLL * (v146 - v139) >= 0xAAAAAAAAAAAAAAALL)
                        v155 = 0x1555555555555555;
                      else
                        v155 = v154;
                      if (v155)
                      {
                        if (v155 > 0x1555555555555555)
                          sub_207CA3AB8();
                        v156 = (char *)operator new(12 * v155);
                      }
                      else
                      {
                        v156 = 0;
                      }
                      v157 = (float *)&v156[4 * (v147 - v139)];
                      *v157 = v152;
                      v157[1] = v153;
                      v157[2] = v150;
                      for (i = v157; v147 != v139; *((_DWORD *)i + 2) = v160)
                      {
                        v159 = *(_QWORD *)(v147 - 3);
                        v147 -= 3;
                        v160 = *((_DWORD *)v147 + 2);
                        *(_QWORD *)(i - 3) = v159;
                        i -= 3;
                      }
                      v146 = (float *)&v156[12 * v155];
                      v147 = v157 + 3;
                      if (v139)
                        operator delete(v139);
                      v139 = i;
                      v30 = v197;
                      v69 = v198;
                    }
                  }
                  ++v151;
                }
                while (v151 != v134);
                v138 = v196 + 1;
              }
              while (v196 + 1 != v192);
            }
            v141 = (char *)v147 - (char *)v139 == 12;
            v68 = v176;
            v67 = v177;
            if (!v141)
            {
LABEL_251:
              v84 = v187;
              if (v139)
              {
                operator delete(v139);
                v69 = v198;
              }
              goto LABEL_144;
            }
            v142 = *(_QWORD *)v139;
            *(float *)&buf[16] = v139[2];
            *(_QWORD *)&buf[8] = v142;
            v144 = (_QWORD *)v176[1];
            v143 = v176[2];
            if ((unint64_t)v144 < v143)
            {
              *(_DWORD *)v144 = v95;
              *(_QWORD *)((char *)v144 + 4) = v189 | (v178 << 32);
              *(_QWORD *)((char *)v144 + 12) = v179;
              v144[3] = v180;
              *((_OWORD *)v144 + 2) = *(_OWORD *)buf;
              *((_DWORD *)v144 + 12) = *(_DWORD *)&buf[16];
              v145 = (char *)(v144 + 7);
LABEL_250:
              v176[1] = (uint64_t)v145;
              goto LABEL_251;
            }
            v161 = (_QWORD *)*v176;
            v162 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v144 - *v176) >> 3);
            v163 = v162 + 1;
            if ((unint64_t)(v162 + 1) > 0x492492492492492)
              sub_207D0CD58();
            v164 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v143 - (_QWORD)v161) >> 3);
            if (2 * v164 > v163)
              v163 = 2 * v164;
            if (v164 >= 0x249249249249249)
              v165 = 0x492492492492492;
            else
              v165 = v163;
            if (v165)
            {
              if (v165 > 0x492492492492492)
                sub_207CA3AB8();
              v166 = (char *)operator new(56 * v165);
            }
            else
            {
              v166 = 0;
            }
            v171 = &v166[56 * v162];
            *(_DWORD *)v171 = v95;
            *(_QWORD *)(v171 + 4) = v189 | (v178 << 32);
            *(_QWORD *)(v171 + 12) = v179;
            *((_QWORD *)v171 + 3) = v180;
            *((_OWORD *)v171 + 2) = *(_OWORD *)buf;
            *((_DWORD *)v171 + 12) = *(_DWORD *)&buf[16];
            if (v144 == v161)
            {
              v145 = v171 + 56;
              *v176 = (uint64_t)v171;
              v176[1] = (uint64_t)(v171 + 56);
              v176[2] = (uint64_t)&v166[56 * v165];
              if (v144)
                goto LABEL_248;
            }
            else
            {
              v172 = 0;
              do
              {
                v173 = &v171[v172 * 8];
                *((_DWORD *)v173 - 14) = v144[v172 - 7];
                *(_QWORD *)(v173 - 52) = *(_QWORD *)((char *)&v144[v172 - 6] - 4);
                *(_QWORD *)(v173 - 44) = *(_QWORD *)((char *)&v144[v172 - 5] - 4);
                v174 = *(_OWORD *)&v144[v172 - 4];
                *(_OWORD *)(v173 - 20) = *(_OWORD *)((char *)&v144[v172 - 2] - 4);
                *((_OWORD *)v173 - 2) = v174;
                v172 -= 7;
              }
              while (&v144[v172] != v161);
              v144 = (_QWORD *)*v176;
              v145 = v171 + 56;
              *v176 = (uint64_t)&v171[v172 * 8];
              v176[1] = (uint64_t)(v171 + 56);
              v176[2] = (uint64_t)&v166[56 * v165];
              if (v144)
LABEL_248:
                operator delete(v144);
            }
            v69 = v198;
            v67 = v177;
            goto LABEL_250;
          }
        }
        else
        {
          v112 = *((_QWORD *)__p + 65);
          if (*((_BYTE *)__p + 712))
            goto LABEL_167;
        }
        v119 = (uint64_t *)(v105 + 640);
        goto LABEL_189;
      }
      v121 = (_QWORD *)v68[1];
      v120 = v68[2];
      if ((unint64_t)v121 >= v120)
        break;
      *(_DWORD *)v121 = v95;
      *(_QWORD *)((char *)v121 + 4) = LODWORD(v101) | ((unint64_t)LODWORD(v102) << 32);
      *(_QWORD *)((char *)v121 + 12) = v104;
      v121[4] = 0;
      v121[5] = 0;
      v121[3] = v96;
      *((_DWORD *)v121 + 12) = 0;
      v85 = (char *)(v121 + 7);
LABEL_143:
      v68[1] = (uint64_t)v85;
LABEL_144:
      v84 += 32;
      if (v84 == v184)
        goto LABEL_255;
    }
    v190 = LODWORD(v101);
    v122 = *v68;
    v123 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v121 - *v68) >> 3);
    v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) > 0x492492492492492)
      sub_207D0CD58();
    v125 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v120 - v122) >> 3);
    if (2 * v125 > v124)
      v124 = 2 * v125;
    if (v125 >= 0x249249249249249)
      v126 = 0x492492492492492;
    else
      v126 = v124;
    if (v126)
    {
      if (v126 > 0x492492492492492)
        sub_207CA3AB8();
      v127 = v68;
      v128 = *((_QWORD *)v84 + 3);
      v129 = v126;
      v130 = (char *)operator new(56 * v126);
      v96 = v128;
      v126 = v129;
      v68 = v127;
    }
    else
    {
      v130 = 0;
    }
    v167 = &v130[56 * v123];
    *(_DWORD *)v167 = v95;
    *(_QWORD *)(v167 + 4) = v190 | (v103 << 32);
    *(_QWORD *)(v167 + 12) = v104;
    *((_QWORD *)v167 + 4) = 0;
    *((_QWORD *)v167 + 5) = 0;
    *((_QWORD *)v167 + 3) = v96;
    *((_DWORD *)v167 + 12) = 0;
    if (v121 == (_QWORD *)v122)
    {
      v30 = v197;
      v85 = v167 + 56;
      *v68 = (uint64_t)v167;
      v68[1] = (uint64_t)(v167 + 56);
      v68[2] = (uint64_t)&v130[56 * v126];
      if (!v121)
        goto LABEL_240;
    }
    else
    {
      v168 = 0;
      v30 = v197;
      do
      {
        v169 = &v167[v168 * 8];
        *((_DWORD *)v169 - 14) = v121[v168 - 7];
        *(_QWORD *)(v169 - 52) = *(_QWORD *)((char *)&v121[v168 - 6] - 4);
        *(_QWORD *)(v169 - 44) = *(_QWORD *)((char *)&v121[v168 - 5] - 4);
        v170 = *(_OWORD *)&v121[v168 - 4];
        *(_OWORD *)(v169 - 20) = *(_OWORD *)((char *)&v121[v168 - 2] - 4);
        *((_OWORD *)v169 - 2) = v170;
        v168 -= 7;
      }
      while (&v121[v168] != (_QWORD *)v122);
      v121 = (_QWORD *)*v68;
      v85 = v167 + 56;
      *v68 = (uint64_t)&v167[v168 * 8];
      v68[1] = (uint64_t)(v167 + 56);
      v68[2] = (uint64_t)&v130[56 * v126];
      if (!v121)
        goto LABEL_240;
    }
    operator delete(v121);
LABEL_240:
    v69 = v198;
    v67 = v177;
    goto LABEL_143;
  }
  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    goto LABEL_17;
  *(_DWORD *)buf = 134218240;
  *(_QWORD *)&buf[4] = v21;
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v23;
  v25 = MEMORY[0x24BDACB70];
  v26 = "ODT: CenterNet is expected to have %lu outputs but only got %lu outputs";
LABEL_49:
  _os_log_error_impl(&dword_207C77000, v25, OS_LOG_TYPE_ERROR, v26, buf, 0x16u);
LABEL_17:
  kdebug_trace();
  if (v205)
  {
    v15 = (char *)__p;
    if (__p)
    {
      v16 = v204;
      v17 = __p;
      if (v204 != __p)
      {
        do
        {
          if (*(v16 - 8))
          {
            v18 = (std::__shared_weak_count *)*((_QWORD *)v16 - 6);
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 - 1, v19));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
          }
          v16 -= 120;
        }
        while (v16 != v15);
        v17 = __p;
      }
      v204 = v15;
      operator delete(v17);
    }
  }
  v199 = off_24C06E9E8;
  v27 = v202;
  if (v202)
  {
    v28 = (unint64_t *)&v202->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_207D0C950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;

  if (v29)
  {
    operator delete(v29);
    v33 = *(void **)v30;
    if (!*(_QWORD *)v30)
    {
LABEL_3:
      sub_207CD822C(v31 - 208);
      sub_207CA86F4((uint64_t)&a29);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v33 = *(void **)v30;
    if (!*(_QWORD *)v30)
      goto LABEL_3;
  }
  *(_QWORD *)(v30 + 8) = v33;
  operator delete(v33);
  sub_207CD822C(v31 - 208);
  sub_207CA86F4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_207D0CA54@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  v6 = 0;
  v7 = 0;
  v4 = 0;
  v5 = 0;
  result = sub_207D0E228(a1 + 64, (unsigned int *)&v4, &v6, 1, (uint64_t)&v3, 1, 0);
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  return result;
}

void sub_207D0CAC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D0CAE8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_207D4BF50(a1);
  operator delete(v1);
}

void sub_207D0CAFC(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  size_t v5;
  size_t v6;

  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if ((_QWORD *)a1 != a2 && *(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
      {
        v5 = a2[1];
        if (*((char *)a2 + 23) >= 0)
        {
          v6 = *((unsigned __int8 *)a2 + 23);
        }
        else
        {
          a2 = (_QWORD *)*a2;
          v6 = v5;
        }
        sub_207CC2244((void **)a1, a2, v6);
      }
      else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
      {
        sub_207CC2180((_QWORD *)a1, (void *)*a2, a2[1]);
      }
      else
      {
        v3 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_OWORD *)a1 = v3;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8((_BYTE *)a1, (void *)*a2, a2[1]);
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v4;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

_QWORD *sub_207D0CC14(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_207D0CD58();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_207D0CD58()
{
  sub_207C95C64("vector");
}

void sub_207D0CD6C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 *v11;
  void **v12;
  char v13;
  __int128 v14;
  void *v15;
  size_t v16;
  char *v17;
  __int128 *v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  char *i;
  __int128 *v23;
  __int128 *v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;

  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_52;
  v6 = *(uint64_t **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = v6[1] ? v6[1] : (uint64_t)v6;
  v28 = v8;
  if (!v8)
    goto LABEL_52;
  v9 = *(char **)(v8 + 16);
  if (v9)
  {
    v10 = *(char **)v9;
    if (*(_QWORD *)v9 == v8)
    {
      *(_QWORD *)v9 = 0;
      while (1)
      {
        v25 = (char *)*((_QWORD *)v9 + 1);
        if (!v25)
          break;
        do
        {
          v9 = v25;
          v25 = *(char **)v25;
        }
        while (v25);
      }
    }
    else
    {
      for (*((_QWORD *)v9 + 1) = 0; v10; v10 = (char *)*((_QWORD *)v9 + 1))
      {
        do
        {
          v9 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v27 = (uint64_t)v9;
  if (a2 == a3)
  {
    v21 = a1;
    sub_207D04974(a1, (char *)v8);
    if (!v9)
      goto LABEL_52;
    goto LABEL_49;
  }
  v11 = a2;
  do
  {
    if ((__int128 *)v8 != v11)
    {
      v12 = (void **)(v8 + 32);
      v13 = *((_BYTE *)v11 + 55);
      if (*(char *)(v8 + 55) < 0)
      {
        if (v13 >= 0)
          v15 = v11 + 2;
        else
          v15 = (void *)*((_QWORD *)v11 + 4);
        if (v13 >= 0)
          v16 = *((unsigned __int8 *)v11 + 55);
        else
          v16 = *((_QWORD *)v11 + 5);
        sub_207CC2244(v12, v15, v16);
      }
      else if ((*((_BYTE *)v11 + 55) & 0x80) != 0)
      {
        sub_207CC2180(v12, *((void **)v11 + 4), *((_QWORD *)v11 + 5));
      }
      else
      {
        v14 = v11[2];
        *(_QWORD *)(v8 + 48) = *((_QWORD *)v11 + 6);
        *(_OWORD *)v12 = v14;
      }
      sub_207CDADA0((_QWORD *)(v8 + 56), *((char **)v11 + 7), *((char **)v11 + 8), (uint64_t)(*((_QWORD *)v11 + 8) - *((_QWORD *)v11 + 7)) >> 3);
      v8 = v28;
    }
    sub_207D0D018((uint64_t **)a1, v8);
    v8 = v27;
    v28 = v27;
    if (v27)
    {
      v9 = *(char **)(v27 + 16);
      if (v9)
      {
        v17 = *(char **)v9;
        if (*(_QWORD *)v9 == v27)
        {
          *(_QWORD *)v9 = 0;
          while (1)
          {
            v20 = (char *)*((_QWORD *)v9 + 1);
            if (!v20)
              break;
            do
            {
              v9 = v20;
              v20 = *(char **)v20;
            }
            while (v20);
          }
        }
        else
        {
          for (*((_QWORD *)v9 + 1) = 0; v17; v17 = (char *)*((_QWORD *)v9 + 1))
          {
            do
            {
              v9 = v17;
              v17 = *(char **)v17;
            }
            while (v17);
          }
        }
      }
      v27 = (uint64_t)v9;
      v18 = (__int128 *)*((_QWORD *)v11 + 1);
      if (!v18)
      {
        do
        {
LABEL_37:
          v4 = (__int128 *)*((_QWORD *)v11 + 2);
          v19 = *(_QWORD *)v4 == (_QWORD)v11;
          v11 = v4;
        }
        while (!v19);
        goto LABEL_39;
      }
    }
    else
    {
      v9 = 0;
      v18 = (__int128 *)*((_QWORD *)v11 + 1);
      if (!v18)
        goto LABEL_37;
    }
    do
    {
      v4 = v18;
      v18 = *(__int128 **)v18;
    }
    while (v18);
LABEL_39:
    if (!v8)
      break;
    v11 = v4;
  }
  while (v4 != a3);
  v21 = a1;
  sub_207D04974(a1, (char *)v8);
  if (!v9)
    goto LABEL_52;
LABEL_49:
  for (i = (char *)*((_QWORD *)v9 + 2); i; i = (char *)*((_QWORD *)i + 2))
    v9 = i;
  sub_207D04974(v21, v9);
LABEL_52:
  if (v4 != a3)
  {
    do
    {
      sub_207D0D16C((uint64_t **)a1, v4 + 2);
      v23 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(__int128 **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (__int128 *)*((_QWORD *)v4 + 2);
          v19 = *(_QWORD *)v24 == (_QWORD)v4;
          v4 = v24;
        }
        while (!v19);
      }
      v4 = v24;
    }
    while (v24 != a3);
  }
}

void sub_207D0D004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D0D118((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D0D018(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  const void *v7;
  size_t v8;
  uint64_t **v9;
  _QWORD *v10;
  const void *v11;
  const void *v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    v6 = *(char *)(a2 + 55);
    if (v6 >= 0)
      v7 = (const void *)(a2 + 32);
    else
      v7 = *(const void **)(a2 + 32);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 55);
    else
      v8 = *(_QWORD *)(a2 + 40);
    while (1)
    {
      v5 = (uint64_t **)v4;
      v12 = (const void *)v4[4];
      v10 = v4 + 4;
      v11 = v12;
      v13 = *((char *)v10 + 23);
      if (v13 >= 0)
        v14 = v10;
      else
        v14 = v11;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v10 + 23);
      else
        v15 = v10[1];
      if (v15 >= v8)
        v16 = v8;
      else
        v16 = v15;
      v17 = memcmp(v7, v14, v16);
      if (v17)
      {
        if (v17 < 0)
          goto LABEL_8;
LABEL_22:
        v4 = v5[1];
        if (!v4)
        {
          v9 = v5 + 1;
          goto LABEL_25;
        }
      }
      else
      {
        if (v8 >= v15)
          goto LABEL_22;
LABEL_8:
        v4 = *v5;
        v9 = v5;
        if (!*v5)
          goto LABEL_25;
      }
    }
  }
  v9 = a1 + 1;
LABEL_25:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v5;
  *v9 = (uint64_t *)a2;
  v18 = (uint64_t *)**a1;
  v19 = (uint64_t *)a2;
  if (v18)
  {
    *a1 = v18;
    v19 = *v9;
  }
  sub_207CC24B4(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return a2;
}

uint64_t sub_207D0D118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_207D04974(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_207D04974(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

_QWORD *sub_207D0D16C(uint64_t **a1, __int128 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  const void *v10;
  size_t v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  uint64_t *v20;
  _QWORD *v22;

  v4 = a1 + 1;
  v5 = operator new(0x50uLL);
  v22 = v5;
  v6 = sub_207D0D2F8(v5 + 4, a2);
  v7 = (_QWORD *)*v4;
  v8 = v4;
  if (*v4)
  {
    v9 = *((char *)v5 + 55);
    if (v9 >= 0)
      v10 = v6;
    else
      v10 = (const void *)v5[4];
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)v5 + 55);
    else
      v11 = v5[5];
    while (1)
    {
      v4 = v7;
      v14 = (const void *)v7[4];
      v12 = v7 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v11)
        v18 = v11;
      else
        v18 = v17;
      v19 = memcmp(v10, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v7 = (_QWORD *)v4[1];
        if (!v7)
        {
          v8 = v4 + 1;
          break;
        }
      }
      else
      {
        if (v11 >= v17)
          goto LABEL_22;
LABEL_8:
        v7 = (_QWORD *)*v4;
        v8 = v4;
        if (!*v4)
          break;
      }
    }
  }
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v4;
  *v8 = v5;
  v20 = (uint64_t *)**a1;
  if (v20)
  {
    *a1 = v20;
    v5 = (_QWORD *)*v8;
  }
  sub_207CC24B4(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_207D0D288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D0D29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D0D29C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 56);
      if (v3)
      {
        *(_QWORD *)(v2 + 64) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *sub_207D0D2F8(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_207CA40D8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if (v7 < 0)
    sub_207CA420C();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_207D0D3C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D0D400(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  __int128 v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  float v39;
  __int128 v40;
  uint64_t v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float v61;
  float v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float v73;
  float v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  float v93;
  float v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  float *v98;
  uint64_t v99;
  float v100;
  float v101;
  __int128 v102;
  uint64_t v103;
  float *v104;
  float *v105;
  uint64_t v106;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v49 = *(float *)(a2 - 32);
        v50 = *(float *)v8;
        if (v49 > *(float *)v8)
        {
          *(float *)v8 = v49;
          *(float *)(a2 - 32) = v50;
          v51 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v51;
          v52 = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v52;
          v53 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v53;
        }
        return result;
      case 3uLL:
        return sub_207D0DDA8(v8, v8 + 32, a2 - 32);
      case 4uLL:
        return sub_207D0E11C(v8, v8 + 32, v8 + 64, a2 - 32);
      case 5uLL:
        return sub_207D0DC48(v8, v8 + 32, v8 + 64, v8 + 96, a2 - 32);
      default:
        if (v9 > 767)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v67 = (v10 - 2) >> 1;
              v68 = v67;
              do
              {
                if (v67 >= v68)
                {
                  v70 = (2 * v68) | 1;
                  v71 = v8 + 32 * v70;
                  if (2 * v68 + 2 < (uint64_t)v10 && *(float *)v71 > *(float *)(v71 + 32))
                  {
                    v71 += 32;
                    v70 = 2 * v68 + 2;
                  }
                  v72 = v8 + 32 * v68;
                  v73 = *(float *)v71;
                  v74 = *(float *)v72;
                  if (*(float *)v71 <= *(float *)v72)
                  {
                    v75 = *(_OWORD *)(v72 + 8);
                    v76 = *(_QWORD *)(v72 + 24);
                    do
                    {
                      v77 = v72;
                      v72 = v71;
                      *(float *)v77 = v73;
                      *(_QWORD *)(v77 + 8) = *(_QWORD *)(v71 + 8);
                      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v71 + 16);
                      *(_QWORD *)(v77 + 24) = *(_QWORD *)(v71 + 24);
                      if (v67 < v70)
                        break;
                      v78 = 2 * v70;
                      v70 = (2 * v70) | 1;
                      v71 = v8 + 32 * v70;
                      v79 = v78 + 2;
                      if (v79 < (uint64_t)v10 && *(float *)v71 > *(float *)(v71 + 32))
                      {
                        v71 += 32;
                        v70 = v79;
                      }
                      v73 = *(float *)v71;
                    }
                    while (*(float *)v71 <= v74);
                    *(float *)v72 = v74;
                    *(_OWORD *)(v72 + 8) = v75;
                    *(_QWORD *)(v72 + 24) = v76;
                  }
                }
                v69 = v68-- <= 0;
              }
              while (!v69);
              v80 = (unint64_t)v9 >> 5;
              do
              {
                v81 = 0;
                v82 = *(float *)v8;
                v83 = *(_QWORD *)(v8 + 8);
                v84 = *(_QWORD *)(v8 + 16);
                v85 = *(_QWORD *)(v8 + 24);
                v86 = v8;
                do
                {
                  v87 = v86;
                  v86 += 32 * v81 + 32;
                  v88 = 2 * v81;
                  v81 = (2 * v81) | 1;
                  v89 = v88 + 2;
                  if (v89 < v80 && *(float *)v86 > *(float *)(v86 + 32))
                  {
                    v86 += 32;
                    v81 = v89;
                  }
                  *(_DWORD *)v87 = *(_DWORD *)v86;
                  *(_QWORD *)(v87 + 8) = *(_QWORD *)(v86 + 8);
                  *(_QWORD *)(v87 + 16) = *(_QWORD *)(v86 + 16);
                  *(_QWORD *)(v87 + 24) = *(_QWORD *)(v86 + 24);
                }
                while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                if (v86 == a2 - 32)
                {
                  *(float *)v86 = v82;
                  *(_QWORD *)(v86 + 8) = v83;
                  *(_QWORD *)(v86 + 16) = v84;
                  *(_QWORD *)(v86 + 24) = v85;
                }
                else
                {
                  *(_DWORD *)v86 = *(_DWORD *)(a2 - 32);
                  *(_QWORD *)(v86 + 8) = *(_QWORD *)(a2 - 24);
                  *(_QWORD *)(v86 + 16) = *(_QWORD *)(a2 - 16);
                  *(_QWORD *)(v86 + 24) = *(_QWORD *)(a2 - 8);
                  *(float *)(a2 - 32) = v82;
                  *(_QWORD *)(a2 - 24) = v83;
                  *(_QWORD *)(a2 - 16) = v84;
                  *(_QWORD *)(a2 - 8) = v85;
                  v90 = v86 - v8 + 32;
                  if (v90 >= 33)
                  {
                    v91 = (((unint64_t)v90 >> 5) - 2) >> 1;
                    v92 = v8 + 32 * v91;
                    v93 = *(float *)v92;
                    v94 = *(float *)v86;
                    if (*(float *)v92 > *(float *)v86)
                    {
                      v95 = *(_OWORD *)(v86 + 8);
                      v96 = *(_QWORD *)(v86 + 24);
                      do
                      {
                        v97 = v86;
                        v86 = v92;
                        *(float *)v97 = v93;
                        *(_QWORD *)(v97 + 8) = *(_QWORD *)(v92 + 8);
                        *(_QWORD *)(v97 + 16) = *(_QWORD *)(v92 + 16);
                        *(_QWORD *)(v97 + 24) = *(_QWORD *)(v92 + 24);
                        if (!v91)
                          break;
                        v91 = (v91 - 1) >> 1;
                        v92 = v8 + 32 * v91;
                        v93 = *(float *)v92;
                      }
                      while (*(float *)v92 > v94);
                      *(float *)v86 = v94;
                      *(_OWORD *)(v86 + 8) = v95;
                      *(_QWORD *)(v86 + 24) = v96;
                    }
                  }
                }
                a2 -= 32;
                v69 = v80-- <= 2;
              }
              while (!v69);
            }
            return result;
          }
          v11 = v10 >> 1;
          v12 = v8 + 32 * (v10 >> 1);
          if ((unint64_t)v9 > 0x1000)
          {
            sub_207D0DDA8(v7, v7 + 32 * (v10 >> 1), a2 - 32);
            v13 = 32 * v11;
            v14 = 32 * v11 + v7 - 32;
            sub_207D0DDA8(v7 + 32, v14, a2 - 64);
            sub_207D0DDA8(v7 + 64, v7 + 32 + v13, a2 - 96);
            result = sub_207D0DDA8(v14, v12, v7 + 32 + v13);
            v15 = *(float *)v7;
            *(_DWORD *)v7 = *(_DWORD *)v12;
            *(float *)v12 = v15;
            v16 = *(_OWORD *)(v7 + 8);
            *(_OWORD *)(v7 + 8) = *(_OWORD *)(v12 + 8);
            *(_OWORD *)(v12 + 8) = v16;
            v17 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 24) = *(_QWORD *)(v12 + 24);
            *(_QWORD *)(v12 + 24) = v17;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v18 = *(float *)v7;
            if (*(float *)(v7 - 32) > *(float *)v7)
              goto LABEL_15;
            if (v18 <= *(float *)(a2 - 32))
            {
              v37 = v7 + 32;
              do
              {
                v8 = v37;
                if (v37 >= a2)
                  break;
                v37 += 32;
              }
              while (v18 <= *(float *)v8);
            }
            else
            {
              v8 = v7;
              do
              {
                v19 = *(float *)(v8 + 32);
                v8 += 32;
              }
              while (v18 <= v19);
            }
            v38 = a2;
            if (v8 < a2)
            {
              v38 = a2;
              do
              {
                v39 = *(float *)(v38 - 32);
                v38 -= 32;
              }
              while (v18 > v39);
            }
            v40 = *(_OWORD *)(v7 + 8);
            v41 = *(_QWORD *)(v7 + 24);
            if (v8 < v38)
            {
              v42 = *(float *)v8;
              v43 = *(float *)v38;
              do
              {
                *(float *)v8 = v43;
                *(float *)v38 = v42;
                v44 = *(_QWORD *)(v8 + 8);
                *(_QWORD *)(v8 + 8) = *(_QWORD *)(v38 + 8);
                *(_QWORD *)(v38 + 8) = v44;
                v45 = *(_QWORD *)(v8 + 16);
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
                *(_QWORD *)(v38 + 16) = v45;
                v46 = *(_QWORD *)(v8 + 24);
                *(_QWORD *)(v8 + 24) = *(_QWORD *)(v38 + 24);
                *(_QWORD *)(v38 + 24) = v46;
                do
                {
                  v47 = *(float *)(v8 + 32);
                  v8 += 32;
                  v42 = v47;
                }
                while (v18 <= v47);
                do
                {
                  v48 = *(float *)(v38 - 32);
                  v38 -= 32;
                  v43 = v48;
                }
                while (v18 > v48);
              }
              while (v8 < v38);
            }
            if (v8 - 32 != v7)
            {
              *(_DWORD *)v7 = *(_DWORD *)(v8 - 32);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 24);
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 - 16);
              *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 - 8);
            }
            a4 = 0;
            *(float *)(v8 - 32) = v18;
            *(_OWORD *)(v8 - 24) = v40;
            *(_QWORD *)(v8 - 8) = v41;
            continue;
          }
          result = sub_207D0DDA8(v7 + 32 * (v10 >> 1), v7, a2 - 32);
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v18 = *(float *)v7;
LABEL_15:
          v20 = 0;
          v21 = *(_OWORD *)(v7 + 8);
          v22 = *(_QWORD *)(v7 + 24);
          do
          {
            v23 = *(float *)(v7 + v20 + 32);
            v20 += 32;
          }
          while (v23 > v18);
          v24 = v7 + v20;
          v25 = (float *)a2;
          if (v20 == 32)
          {
            v25 = (float *)a2;
            do
            {
              if (v24 >= (unint64_t)v25)
                break;
              v27 = *(v25 - 8);
              v25 -= 8;
            }
            while (v27 <= v18);
          }
          else
          {
            do
            {
              v26 = *(v25 - 8);
              v25 -= 8;
            }
            while (v26 <= v18);
          }
          if (v24 >= (unint64_t)v25)
          {
            v8 = v7 + v20;
            v35 = v24 - 32;
            if (v24 - 32 == v7)
              goto LABEL_31;
          }
          else
          {
            v28 = *v25;
            v8 = v7 + v20;
            v29 = v25;
            do
            {
              *(float *)v8 = v28;
              *v29 = v23;
              v30 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *((_QWORD *)v29 + 1);
              *((_QWORD *)v29 + 1) = v30;
              v31 = *(_QWORD *)(v8 + 16);
              *(_QWORD *)(v8 + 16) = *((_QWORD *)v29 + 2);
              *((_QWORD *)v29 + 2) = v31;
              v32 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 24) = *((_QWORD *)v29 + 3);
              *((_QWORD *)v29 + 3) = v32;
              do
              {
                v33 = *(float *)(v8 + 32);
                v8 += 32;
                v23 = v33;
              }
              while (v33 > v18);
              do
              {
                v34 = *(v29 - 8);
                v29 -= 8;
                v28 = v34;
              }
              while (v34 <= v18);
            }
            while (v8 < (unint64_t)v29);
            v35 = v8 - 32;
            if (v8 - 32 == v7)
              goto LABEL_31;
          }
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 32);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 24);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 - 8);
LABEL_31:
          *(float *)(v8 - 32) = v18;
          *(_OWORD *)(v8 - 24) = v21;
          *(_QWORD *)(v8 - 8) = v22;
          if (v24 < (unint64_t)v25)
            goto LABEL_34;
          v36 = sub_207D0DEFC(v7, v35);
          result = sub_207D0DEFC(v8, a2);
          if (!(_DWORD)result)
          {
            if (v36)
              continue;
LABEL_34:
            result = sub_207D0D400(v7, v35, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v35;
          if (v36)
            return result;
          goto LABEL_2;
        }
        v54 = v8 + 32;
        v56 = v8 == a2 || v54 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v56)
          {
            v57 = 0;
            v58 = v8;
            do
            {
              v60 = v54;
              v61 = *(float *)(v58 + 32);
              v62 = *(float *)v58;
              if (v61 > *(float *)v58)
              {
                v63 = *(_OWORD *)(v58 + 40);
                v64 = *(_QWORD *)(v58 + 56);
                v65 = v57;
                do
                {
                  v66 = v8 + v65;
                  *(float *)(v66 + 32) = v62;
                  *(_OWORD *)(v66 + 40) = *(_OWORD *)(v8 + v65 + 8);
                  *(_QWORD *)(v66 + 56) = *(_QWORD *)(v8 + v65 + 24);
                  if (!v65)
                  {
                    v59 = v8;
                    goto LABEL_71;
                  }
                  v62 = *(float *)(v66 - 32);
                  v65 -= 32;
                }
                while (v61 > v62);
                v59 = v8 + v65 + 32;
LABEL_71:
                *(float *)v59 = v61;
                *(_OWORD *)(v59 + 8) = v63;
                *(_QWORD *)(v59 + 24) = v64;
              }
              v54 = v60 + 32;
              v57 += 32;
              v58 = v60;
            }
            while (v60 + 32 != a2);
          }
        }
        else if (!v56)
        {
          v98 = (float *)(v8 + 56);
          do
          {
            v99 = v54;
            v100 = *(float *)(v7 + 32);
            v101 = *(float *)v7;
            if (v100 > *(float *)v7)
            {
              v102 = *(_OWORD *)(v7 + 40);
              v103 = *(_QWORD *)(v7 + 56);
              v104 = v98;
              do
              {
                v105 = v104;
                *(v104 - 6) = v101;
                *((_OWORD *)v104 - 1) = *((_OWORD *)v104 - 3);
                v106 = *((_QWORD *)v104 - 4);
                v104 -= 8;
                *(_QWORD *)v105 = v106;
                v101 = *(v105 - 22);
              }
              while (v100 > v101);
              *(v104 - 6) = v100;
              *((_OWORD *)v104 - 1) = v102;
              *(_QWORD *)v104 = v103;
            }
            v54 = v99 + 32;
            v98 += 8;
            v7 = v99;
          }
          while (v99 + 32 != a2);
        }
        return result;
    }
  }
}

uint64_t sub_207D0DC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = sub_207D0E11C(a1, a2, a3, a4);
  v11 = *(float *)a4;
  if (*(float *)a5 > *(float *)a4)
  {
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(float *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v12;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v13;
    v14 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v14;
    v15 = *(float *)a3;
    if (*(float *)a4 > *(float *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(float *)a4 = v15;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v16;
      v17 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v17;
      v18 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v18;
      v19 = *(float *)a2;
      if (*(float *)a3 > *(float *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(float *)a3 = v19;
        v20 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v20;
        v21 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v21;
        v22 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v22;
        v23 = *(float *)a1;
        if (*(float *)a2 > *(float *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(float *)a2 = v23;
          v24 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v24;
          v25 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v25;
          v26 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t sub_207D0DDA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 > *(float *)result)
  {
    if (v5 <= v3)
    {
      *(float *)result = v3;
      *(float *)a2 = v4;
      v16 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v16;
      v17 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      v6 = (uint64_t *)(a2 + 24);
      v18 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = v17;
      v19 = *(_QWORD *)(result + 24);
      *(_QWORD *)(result + 24) = v18;
      *(_QWORD *)(a2 + 24) = v19;
      if (*(float *)a3 <= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      v20 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v20;
      v8 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    }
    else
    {
      v6 = (uint64_t *)(result + 24);
      *(float *)result = v5;
      *(float *)a3 = v4;
      v7 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a3 + 16);
    }
    *(_QWORD *)(a3 + 16) = v8;
    v12 = (uint64_t *)(a3 + 24);
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v9;
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v10;
    v12 = (uint64_t *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = v11;
    v13 = *(float *)result;
    if (*(float *)a2 > *(float *)result)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(float *)a2 = v13;
      v14 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v14;
      v15 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v15;
      v6 = (uint64_t *)(result + 24);
LABEL_10:
      v21 = *v6;
      *v6 = *v12;
      *v12 = v21;
    }
  }
  return result;
}

BOOL sub_207D0DEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v17 = *(float *)(a2 - 32);
      v18 = *(float *)a1;
      if (v17 > *(float *)a1)
      {
        *(float *)a1 = v17;
        *(float *)(a2 - 32) = v18;
        v19 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v19;
        v20 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v20;
        v21 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v21;
      }
      break;
    case 3:
      sub_207D0DDA8(a1, a1 + 32, a2 - 32);
      result = 1;
      break;
    case 4:
      sub_207D0E11C(a1, a1 + 32, a1 + 64, a2 - 32);
      result = 1;
      break;
    case 5:
      sub_207D0DC48(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      result = 1;
      break;
    default:
      v6 = (float *)(a1 + 64);
      sub_207D0DDA8(a1, a1 + 32, a1 + 64);
      v7 = a1 + 96;
      if (a1 + 96 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *(float *)v7;
          v11 = *v6;
          if (*(float *)v7 > *v6)
            break;
LABEL_12:
          v6 = (float *)v7;
          v8 += 32;
          v7 += 32;
          if (v7 == a2)
            goto LABEL_13;
        }
        v12 = *(_OWORD *)(v7 + 8);
        v13 = *(_QWORD *)(v7 + 24);
        v14 = v8;
        do
        {
          v15 = a1 + v14;
          *(float *)(v15 + 96) = v11;
          *(_OWORD *)(v15 + 104) = *(_OWORD *)(a1 + v14 + 72);
          *(_QWORD *)(v15 + 120) = *(_QWORD *)(a1 + v14 + 88);
          if (v14 == -64)
          {
            *(float *)a1 = v10;
            *(_OWORD *)(a1 + 8) = v12;
            *(_QWORD *)(a1 + 24) = v13;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_19;
          }
          v11 = *(float *)(v15 + 32);
          v14 -= 32;
        }
        while (v10 > v11);
        v16 = a1 + v14;
        *(float *)(v16 + 96) = v10;
        v16 += 96;
        *(_OWORD *)(v16 + 8) = v12;
        *(_QWORD *)(v16 + 24) = v13;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_19:
        result = v7 + 32 == a2;
      }
      break;
  }
  return result;
}

uint64_t sub_207D0E11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_207D0DDA8(a1, a2, a3);
  v9 = *(float *)a3;
  if (*(float *)a4 > *(float *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v11;
    v12 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = v12;
    v13 = *(float *)a2;
    if (*(float *)a3 > *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      v15 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v15;
      v16 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v16;
      v17 = *(float *)a1;
      if (*(float *)a2 > *(float *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(float *)a2 = v17;
        v18 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v18;
        v19 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v19;
        v20 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_207D0E228(uint64_t a1, unsigned int *a2, uint64_t *a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  void *v30;
  void *v32[2];
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = *((_DWORD *)a3 + 2);
    v13 = a2[2];
  }
  else
  {
    v14 = *a2;
    v15 = a2[1];
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v15 * v14;
    v13 = a2[2];
    if (v13)
      v12 = v17;
    else
      v12 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v16 << 32);
  }
  v18 = v12 * v13;
  v19 = 4 * v18;
  v20 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v21 = v20 | (v20 >> 4) | ((v20 | (v20 >> 4)) >> 8);
  v22 = v21 | (v21 >> 16) | ((v21 | (v21 >> 16)) >> 32);
  if (v22 + 1 > 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v23;
  if (v18)
  {
    v32[0] = 0;
    v24 = malloc_type_posix_memalign(v32, v23, 4 * v18, 0x1F88E90uLL);
    if (v24)
      sub_2081FBF78(v24, *(_QWORD *)(a1 + 16), v19);
    v25 = v32[0];
    *(void **)(a1 + 8) = v32[0];
  }
  else
  {
    v25 = 0;
  }
  v26 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 24) = v26;
  *(_QWORD *)(a1 + 36) = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a1 + 44) = 4 * v12;
  if (v25 && a6)
  {
    v27 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v28 = *(_DWORD *)(a1 + 28) == 0;
    else
      v28 = 1;
    v29 = v28 || v27 == 0;
    v30 = *(void **)(a1 + 24);
    if (v29)
    {
      v30 = 0;
      v27 = 0;
    }
    v32[0] = v25;
    v32[1] = v30;
    v33 = v27;
    v34 = v11 & 0x3FFFFFFF3FFFFFFFLL;
    v35 = v12 & 0x3FFFFFFF;
    if (v27 * (v12 & 0x3FFFFFFF) == -1
      && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v36[0] = (uint64_t)v32;
    v36[1] = a5;
    sub_207D0E408(v36);
  }
  return a1;
}

void sub_207D0E3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_207D0E408(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD v12[7];
  char v13;

  v2 = *a1;
  v3 = *(_DWORD *)(v2 + 20);
  if (v3 == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
      sub_207D0E4BC((uint64_t)a1);
    else
      sub_207D0E8C4(v2, a1[1]);
  }
  else
  {
    v11 = (_DWORD *)a1[1];
    v5 = *(_DWORD *)(v2 + 8);
    v4 = *(_DWORD *)(v2 + 12);
    v6 = *(_DWORD *)(v2 + 16);
    if (v5)
      v7 = v4 == 0;
    else
      v7 = 1;
    if (!v7 && v6 != 0)
    {
      v12[0] = 0;
      v12[1] = v5 - 1;
      v12[2] = v3;
      v12[3] = v4 - 1;
      v9 = *(_DWORD *)(v2 + 28);
      v12[4] = *(_DWORD *)(v2 + 24);
      v12[5] = v6 - 1;
      v12[6] = v9;
      v10 = *(_DWORD **)v2;
      v13 = 0;
      sub_207D0EBD8(v12, (uint64_t)&v13, &v11, v10);
    }
  }
}

uint64_t sub_207D0E4BC(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  _DWORD v24[7];
  unint64_t v25[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(_DWORD *)(*(_QWORD *)result + 12);
  v5 = *(_DWORD *)(*(_QWORD *)result + 24);
  v4 = *(_DWORD *)(*(_QWORD *)result + 28);
  if (v4 == v5 * v3)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v14 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v14 < 0x10)
      goto LABEL_22;
    v15 = 4 * v6;
    if (!(_DWORD)v6)
      v15 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      v16 = (_DWORD *)v7;
LABEL_23:
      v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    v18 = vld1q_dup_f32(v2);
    v19 = (float32x4_t *)(v7 + 16);
    v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
  else
  {
    v22 = 0;
    v9 = *(_DWORD *)(v1 + 8);
    v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    v23[2] = v2;
    v10 = *(_DWORD *)(v1 + 16);
    if (v3)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      v13 = *(_QWORD *)v1;
      v25[0] = 0;
      v25[1] = 0;
      return sub_207D0E66C((_BOOL8)v24, v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_207D0E66C(_BOOL8 result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unsigned int *v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(unsigned int *)(result + 8) | ((unint64_t)*(unsigned int *)(result + 16) << 32);
  *a2 = a4;
  a2[1] = v7;
  if (*(_DWORD *)(result + 20))
  {
    v8 = (unsigned int *)result;
    for (i = 0; i < v8[5]; ++i)
    {
      *a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if (result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * v8[6];
    }
  }
  *a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if (result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_207D0E8C4(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  _DWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  _QWORD v17[2];

  v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  v3 = *(unsigned int *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  v11 = v3;
  v13[2] = a2;
  v4 = *(_DWORD *)(result + 16);
  if ((_DWORD)v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    v7 = *(_DWORD *)(result + 24);
    v14[2] = *(_DWORD *)(result + 20);
    v14[3] = v2 - 1;
    v8 = *(_DWORD *)(result + 28);
    v9 = *(_QWORD *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    v15 = v4 - 1;
    v16 = v8;
    if (v4 != 1)
    {
      v10 = 0;
      do
      {
        sub_207D0E984((uint64_t)v14, (uint64_t)v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_207D0E984((uint64_t)v14, (uint64_t)v17, (uint64_t)v13, v9);
  }
  return result;
}

uint64_t sub_207D0E984(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_208216974);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

float sub_207D0EBD8(_DWORD *a1, uint64_t a2, _DWORD **a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  float result;

  v4 = a1[5];
  v5 = a1[3];
  if (!v4)
  {
    v6 = a1[1];
    if (v5)
      goto LABEL_14;
LABEL_25:
    v7 = *a3;
    if (!v6)
      goto LABEL_33;
    goto LABEL_26;
  }
  v6 = a1[1];
  v7 = *a3;
  v8 = a1[6];
  if (v5)
  {
    v9 = a1[4];
    if (!v6)
    {
      do
      {
        v33 = a4;
        v34 = v5;
        do
        {
          *v33 = *v7;
          v33 += v9;
          --v34;
        }
        while (v34);
        *v33 = *v7;
        a4 += v8;
        ++v6;
      }
      while (v6 != v4);
      do
      {
LABEL_32:
        *a4 = *v7;
        a4 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_33;
    }
    v10 = 0;
    v11 = 4 * v8;
    v12 = v9;
    v13 = 4 * a1[2];
    v14 = &a4[v12];
    do
    {
      v15 = 0;
      v16 = v14;
      v17 = a4;
      do
      {
        v18 = v16;
        v19 = v17;
        v20 = v6;
        do
        {
          *v19 = *v7;
          v19 = (_DWORD *)((char *)v19 + v13);
          --v20;
        }
        while (v20);
        *v19 = *v7;
        v17 = (_DWORD *)((char *)v17 + v12 * 4);
        ++v15;
        v16 = &v18[v12];
      }
      while (v15 != v5);
      v21 = v6;
      do
      {
        *v18 = *v7;
        v18 = (_DWORD *)((char *)v18 + v13);
        --v21;
      }
      while (v21);
      *v18 = *v7;
      a4 = (_DWORD *)((char *)a4 + v11);
      ++v10;
      v14 = (_DWORD *)((char *)v14 + v11);
    }
    while (v10 != v4);
LABEL_14:
    v7 = *a3;
    v9 = a1[4];
    if (v6)
    {
      v22 = 0;
      v23 = 4 * v9;
      v24 = 4 * a1[2];
      do
      {
        v25 = a4;
        v26 = v6;
        do
        {
          *v25 = *v7;
          v25 = (_DWORD *)((char *)v25 + v24);
          --v26;
        }
        while (v26);
        *v25 = *v7;
        a4 = (_DWORD *)((char *)a4 + v23);
        ++v22;
      }
      while (v22 != v5);
LABEL_26:
      v32 = 4 * a1[2];
      do
      {
        *a4 = *v7;
        a4 = (_DWORD *)((char *)a4 + v32);
        --v6;
      }
      while (v6);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v6)
  {
    v27 = 0;
    v28 = 4 * v8;
    v29 = 4 * a1[2];
    do
    {
      v30 = a4;
      v31 = v6;
      do
      {
        *v30 = *v7;
        v30 = (_DWORD *)((char *)v30 + v29);
        --v31;
      }
      while (v31);
      *v30 = *v7;
      a4 = (_DWORD *)((char *)a4 + v28);
      ++v27;
    }
    while (v27 != v4);
    goto LABEL_25;
  }
  do
  {
    *a4 = *v7;
    a4 += v8;
    --v4;
  }
  while (v4);
  v7 = *a3;
LABEL_33:
  result = *(float *)v7;
  *a4 = *v7;
  return result;
}

void sub_207D0EDF0(std::string *a1, unsigned __int8 *a2)
{
  std::string::size_type v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  std::string::size_type v11;
  unsigned __int8 *v12;
  unsigned __int8 *i;
  std::string::size_type v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string __dst;

  v3 = a2[23];
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = *(unsigned __int8 **)a2;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (!v3)
  {
LABEL_62:
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  v5 = &v4[v3];
  v6 = &v4[v3];
  v7 = v4;
  v8 = &v4[v3];
  while (1)
  {
    v9 = v7;
    while (1)
    {
      v10 = *v7++;
      if (v10 == 46)
        break;
      v9 = v7;
      if (v7 == v5)
        goto LABEL_38;
    }
    if (v7 == v5)
      break;
    v7 = v9 + 1;
    if (v9[1] == 101)
    {
      if (v9 + 2 == v5)
        break;
      if (v9[2] == 115)
      {
        if (v9 + 3 == v5)
          break;
        if (v9[3] == 112)
        {
          if (v9 + 4 == v5)
            break;
          if (v9[4] == 114)
          {
            if (v9 + 5 == v5)
              break;
            if (v9[5] == 101)
            {
              if (v9 + 6 == v5)
                break;
              if (v9[6] == 115)
              {
                if (v9 + 7 == v5)
                  break;
                if (v9[7] == 115)
                {
                  if (v9 + 8 == v5)
                    break;
                  if (v9[8] == 111)
                  {
                    if (v9 + 9 == v5)
                      break;
                    if (v9[9] == 46)
                    {
                      if (v9 + 10 == v5)
                        break;
                      if (v9[10] == 110)
                      {
                        if (v9 + 11 == v5)
                          break;
                        if (v9[11] == 101)
                        {
                          if (v9 + 12 == v5)
                            break;
                          if (v9[12] == 116)
                            v8 = v9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_38:
  if (v8 != v5)
  {
    v11 = v8 - v4;
    if (v11 != -1)
      goto LABEL_55;
  }
  v12 = v4;
  while (2)
  {
    for (i = v12 + 3; ; ++i)
    {
      v12 = i - 2;
      if (*(i - 3) != 46)
      {
        if (v12 == v5)
          goto LABEL_53;
        continue;
      }
      if (v12 == v5)
        goto LABEL_53;
      if (*v12 == 109)
      {
        if (i - 1 == v5)
          goto LABEL_53;
        if (*(i - 1) == 105)
          break;
      }
    }
    if (i != v5)
    {
      if (*i == 108)
        v6 = i - 3;
      continue;
    }
    break;
  }
LABEL_53:
  if (v6 == v5)
    goto LABEL_62;
  v11 = v6 - v4;
  if (v6 - v4 == -1)
    goto LABEL_62;
LABEL_55:
  if (v3 >= v11)
    v14 = v11;
  else
    v14 = v3;
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v14;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
    p_dst = &__dst;
    if (!v14)
      goto LABEL_68;
  }
  memmove(p_dst, v4, v14);
LABEL_68:
  p_dst->__r_.__value_.__s.__data_[v14] = 0;
  v18 = std::string::append(&__dst, ".bundle", 7uLL);
  *a1 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_207D0F100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_207D0F11C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *i;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  const void **v24;
  std::string::size_type v25;
  std::string::value_type v26;
  std::string::size_type size;
  std::string *v28;
  int data;
  int v30;
  BOOL v31;
  int v32;
  std::string *p_p;
  std::string::size_type v34;
  int v35;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t **v40;
  int v41;
  uint64_t *v42;
  unint64_t v43;
  size_t v44;
  int v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t j;
  void *v50;
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  _QWORD *v56;
  void *v57;
  char *v58;
  void *v59;
  void *v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  const void *v71;
  unint64_t v72;
  size_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  const void *v78;
  unint64_t v79;
  size_t v80;
  int v81;
  uint64_t k;
  int v83;
  const void *v84;
  unint64_t v85;
  size_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  int v99;
  const void *v100;
  unint64_t v101;
  size_t v102;
  int v103;
  uint64_t *v104;
  uint64_t *v105;
  int v106;
  const void *v107;
  unint64_t v108;
  size_t v109;
  int v110;
  uint64_t **m;
  int v112;
  uint64_t *v113;
  unint64_t v114;
  size_t v115;
  int v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  int v129;
  int v130;
  const void **v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  int v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  int v153;
  void **v154;
  int v155;
  int v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  const void *v162;
  unint64_t v163;
  size_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  const void *v169;
  unint64_t v170;
  size_t v171;
  int v172;
  uint64_t n;
  int v174;
  const void *v175;
  unint64_t v176;
  size_t v177;
  int v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  const void *v188;
  unint64_t v189;
  size_t v190;
  int v191;
  uint64_t *v192;
  uint64_t *v193;
  int v194;
  const void *v195;
  unint64_t v196;
  size_t v197;
  int v198;
  uint64_t ii;
  int v200;
  const void *v201;
  unint64_t v202;
  size_t v203;
  int v204;
  uint64_t *v205;
  uint64_t *v206;
  char *v207;
  _QWORD *v208;
  void *v209;
  char *v210;
  void *v211;
  void *v212;
  std::string::size_type v213;
  std::string::size_type v214;
  void *v215;
  std::string::size_type v216;
  void *v217;
  void *v218;
  std::string::size_type v219;
  char *v220;
  std::string::size_type v221;
  int v222;
  std::string::size_type v223;
  std::string *v224;
  std::string *v225;
  __int128 v226;
  int v227;
  const std::string::value_type *v228;
  std::string::size_type v229;
  std::string *v230;
  __int128 v231;
  uint64_t v232;
  std::string *v233;
  size_t v234;
  uint64_t v235;
  char *v236;
  unsigned __int8 v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  size_t v243;
  std::logic_error *v244;
  std::runtime_error *exception;
  std::runtime_error *v246;
  uint64_t *v248;
  char *v249;
  char *v250;
  char v252[8];
  int v253[2];
  void *v254[2];
  uint64_t v255;
  unint64_t v256;
  const void *v257[3];
  char v258;
  std::string __p;
  char v260;
  _BYTE __s1[32];
  int v262;
  char v263;
  uint64_t v264;
  int v265;
  char v266;
  __int128 v267;
  __int128 v268;
  unint64_t v269;
  void *v270[2];
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  char v276;
  uint64_t v277;
  int v278;
  char v279;
  _OWORD v280[3];
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD v284[3];
  _QWORD *v285;
  std::string v286;
  _QWORD v287[23];

  v287[20] = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)a1 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = (_BYTE *)*a1;
  if ((v2 & 0x80u) != 0)
    v2 = a1[1];
  v4 = &v3[v2];
  if (!v2)
  {
    v6 = v3;
    goto LABEL_23;
  }
  v5 = v3;
  v6 = &v3[v2];
  while (2)
  {
    for (i = v5 + 2; ; ++i)
    {
      v5 = i - 1;
      if (*(i - 2) != 46)
      {
        if (v5 == v4)
          goto LABEL_23;
        continue;
      }
      if (v5 == v4)
        goto LABEL_23;
      if (*v5 == 106)
      {
        if (i == v4)
          goto LABEL_23;
        if (*i == 115)
        {
          if (i + 1 == v4)
            goto LABEL_23;
          if (i[1] == 111)
            break;
        }
      }
    }
    v8 = i + 2;
    if (i + 2 != v4)
    {
      v9 = i - 2;
      if (*v8 == 110)
        v6 = v9;
      continue;
    }
    break;
  }
LABEL_23:
  v10 = v6 - v3;
  if (v6 == v4)
    v10 = -1;
  if (v10 != v2 - 5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v286);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_207CC0490(&v286);
  if (*(_DWORD *)((char *)&v286 + *(_QWORD *)(v286.__r_.__value_.__r.__words[0] - 24) + 32))
  {
    v246 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v246, (const std::string *)__s1);
    __cxa_throw(v246, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v285 = 0;
  sub_207D15F7C((uint64_t)v252, &v286, v284);
  v11 = v285;
  if (v285 == v284)
  {
    v12 = 4;
    v11 = v284;
LABEL_31:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  else if (v285)
  {
    v12 = 5;
    goto LABEL_31;
  }
  sub_207D0502C(a2);
  sub_207D051B4((uint64_t)__s1);
  HIBYTE(v257[2]) = 17;
  strcpy((char *)v257, "espresso_net_path");
  v13 = sub_207D133A4(v252, v257);
  memset(&__p, 0, sizeof(__p));
  sub_207D21A34((void **)v13, (uint64_t)&__p);
  if ((__s1[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__s1[8]);
    *(std::string *)&__s1[8] = __p;
    if (SHIBYTE(v257[2]) < 0)
      goto LABEL_151;
  }
  else
  {
    *(std::string *)&__s1[8] = __p;
    if ((SHIBYTE(v257[2]) & 0x80000000) == 0)
      goto LABEL_34;
LABEL_151:
    operator delete((void *)v257[0]);
  }
LABEL_34:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "camera_settings");
  v14 = sub_207D133A4(v252, (const void **)&__p.__r_.__value_.__l.__data_);
  HIBYTE(v257[2]) = 6;
  strcpy((char *)v257, "height");
  v15 = sub_207D133A4((char *)v14, v257);
  v254[0] = 0;
  sub_207D20E6C((uint64_t)v15, v254);
  *((void **)&v267 + 1) = v254[0];
  if (SHIBYTE(v257[2]) < 0)
  {
    operator delete((void *)v257[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_153;
  }
  else
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
LABEL_153:
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_36:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "camera_settings");
  v16 = sub_207D133A4(v252, (const void **)&__p.__r_.__value_.__l.__data_);
  HIBYTE(v257[2]) = 5;
  strcpy((char *)v257, "width");
  v17 = sub_207D133A4((char *)v16, v257);
  v254[0] = 0;
  sub_207D20E6C((uint64_t)v17, v254);
  *(void **)&v268 = v254[0];
  if (SHIBYTE(v257[2]) < 0)
  {
    operator delete((void *)v257[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_155;
  }
  else
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_155:
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_38:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "use_ray_dir");
  v18 = sub_207D133A4(v252, (const void **)&__p.__r_.__value_.__l.__data_);
  LOBYTE(v257[0]) = 0;
  sub_207D20D64((char *)v18, v257);
  BYTE4(v271) = v257[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__p, "use_intrinsics");
  sub_207D13AA0(v252, (const void **)&__p.__r_.__value_.__l.__data_, (_BYTE *)&v271 + 5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "use_patch_distance");
  sub_207D13AA0(v252, (const void **)&__p.__r_.__value_.__l.__data_, (_BYTE *)&v275 + 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_208233330;
  strcpy(__p.__r_.__value_.__l.__data_, "ray_dir_downsampling_factor");
  v19 = sub_207D133A4(v252, (const void **)&__p.__r_.__value_.__l.__data_);
  v257[0] = 0;
  sub_207D20E6C((uint64_t)v19, v257);
  v20 = (unint64_t)v257[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)&v268 + 1) = *((_QWORD *)&v267 + 1) / v20;
  v269 = (unint64_t)v268 / v20;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&__p, "use_float32_inference");
  sub_207D13AA0(v252, (const void **)&__p.__r_.__value_.__l.__data_, (_BYTE *)&v271 + 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "representations");
  v21 = sub_207D133A4(v252, (const void **)&__p.__r_.__value_.__l.__data_);
  sub_207D13BB8((char *)v21, (void **)&v272);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__p, "max_batch_size");
  sub_207D13CA8((uint64_t)v252, (const void **)&__p.__r_.__value_.__l.__data_, v280);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__p, "model_configs");
  sub_207D13DC0((uint64_t)v252, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v281);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "warp_on_ane");
  sub_207D13AA0(v252, (const void **)&__p.__r_.__value_.__l.__data_, (_BYTE *)v280 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "warp_input_width");
  sub_207D13CA8((uint64_t)v252, (const void **)&__p.__r_.__value_.__l.__data_, &v282);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "warp_input_height");
  sub_207D13CA8((uint64_t)v252, (const void **)&__p.__r_.__value_.__l.__data_, &v283);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  HIBYTE(v255) = 12;
  strcpy((char *)v254, "input_format");
  v22 = sub_207D133A4(v252, (const void **)v254);
  memset(v257, 0, sizeof(v257));
  sub_207D21A34((void **)v22, (uint64_t)v257);
  v23 = SHIBYTE(v257[2]);
  v24 = (const void **)v257[0];
  if (SHIBYTE(v257[2]) >= 0)
    v25 = HIBYTE(v257[2]);
  else
    v25 = (std::string::size_type)v257[1];
  memset(&__p, 0, sizeof(__p));
  std::string::reserve(&__p, v25);
  if (v23 >= 0)
    v24 = v257;
  for (; v25; --v25)
  {
    v26 = __tolower(*(unsigned __int8 *)v24);
    std::string::push_back(&__p, v26);
    v24 = (const void **)((char *)v24 + 1);
  }
  if (SHIBYTE(v257[2]) < 0)
  {
    operator delete((void *)v257[0]);
    if (SHIBYTE(v255) < 0)
      goto LABEL_157;
  }
  else
  {
    if ((SHIBYTE(v255) & 0x80000000) == 0)
      goto LABEL_69;
LABEL_157:
    operator delete(v254[0]);
  }
LABEL_69:
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 9)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v34 = p_p->__r_.__value_.__r.__words[0];
    v35 = p_p->__r_.__value_.__s.__data_[8];
    if (v34 != 0x6C61637379617267 || v35 != 101)
    {
LABEL_592:
      v244 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v244, "input_format is not supported");
      v244->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v244, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
    }
    v32 = 1;
  }
  else
  {
    if (size != 7)
      goto LABEL_592;
    v28 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
    data = (int)v28->__r_.__value_.__l.__data_;
    v30 = *(_DWORD *)((char *)v28->__r_.__value_.__r.__words + 3);
    v31 = data == 880178553 && v30 == 1714434612;
    if (!v31)
      goto LABEL_592;
    v32 = 0;
  }
  *(_DWORD *)__s1 = v32;
  HIBYTE(v257[2]) = 16;
  strcpy((char *)v257, "enable_prewiring");
  sub_207D13AA0(v252, v257, (_BYTE *)&v271 + 2);
  if (SHIBYTE(v257[2]) < 0)
  {
    operator delete((void *)v257[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_159;
  }
  else
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_159:
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_91:
  sub_207D21BC0(a2 + 288, (uint64_t)__s1);
  sub_207D04890((uint64_t)__s1);
  __s1[23] = 17;
  strcpy(__s1, "use_instance_norm");
  v37 = sub_207D133A4(v252, (const void **)__s1);
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_207D20D64((char *)v37, &__p);
  *(_BYTE *)(a2 + 568) = __p.__r_.__value_.__s.__data_[0];
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  __s1[23] = 15;
  strcpy(__s1, "camera_settings");
  v38 = sub_207D133A4(v252, (const void **)__s1);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&__p, "patch_diameter_factor");
  v39 = sub_207D133A4((char *)v38, (const void **)&__p.__r_.__value_.__l.__data_);
  LODWORD(v257[0]) = 0;
  sub_207D21E30((char *)v39, (float *)v257);
  *(_DWORD *)(a2 + 572) = v257[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((__s1[23] & 0x80000000) != 0)
      goto LABEL_161;
  }
  else
  {
    if ((__s1[23] & 0x80000000) == 0)
      goto LABEL_95;
LABEL_161:
    operator delete(*(void **)__s1);
  }
LABEL_95:
  __s1[23] = 15;
  strcpy(__s1, "min_num_matches");
  sub_207D13CA8((uint64_t)v252, (const void **)__s1, (_QWORD *)(a2 + 632));
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  *(_QWORD *)__s1 = operator new(0x28uLL);
  *(_OWORD *)&__s1[8] = xmmword_20822AB90;
  strcpy(*(char **)__s1, "min_num_p3p_inliers_from_heatmap");
  sub_207D13CA8((uint64_t)v252, (const void **)__s1, (_QWORD *)(a2 + 672));
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  strcpy(__s1, "moving_min_num_matches");
  __s1[23] = 22;
  sub_207D13CA8((uint64_t)v252, (const void **)__s1, (_QWORD *)(a2 + 640));
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  __s1[23] = 21;
  strcpy(__s1, "min_num_triangulation");
  sub_207D13CA8((uint64_t)v252, (const void **)__s1, (_QWORD *)(a2 + 608));
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  *(_QWORD *)__s1 = operator new(0x20uLL);
  *(_OWORD *)&__s1[8] = xmmword_20822C980;
  strcpy(*(char **)__s1, "mask_downsampling_factor");
  sub_207D13CA8((uint64_t)v252, (const void **)__s1, (_QWORD *)(a2 + 544));
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  __s1[23] = 18;
  strcpy(__s1, "dynamic_frame_rate");
  v250 = (char *)(a2 + 664);
  sub_207D13AA0(v252, (const void **)__s1, (_BYTE *)(a2 + 664));
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  __s1[23] = 13;
  strcpy(__s1, "use_smoothing");
  v249 = (char *)(a2 + 665);
  sub_207D13AA0(v252, (const void **)__s1, (_BYTE *)(a2 + 665));
  if ((__s1[23] & 0x80000000) != 0)
    operator delete(*(void **)__s1);
  __s1[23] = 20;
  strcpy(__s1, "refine_edge_fov_bbox");
  if (v252[0] == 1)
  {
    v40 = *(uint64_t ***)(*(_QWORD *)v253 + 8);
    if (v40)
    {
      while (2)
      {
        v41 = *((char *)v40 + 55);
        if (v41 >= 0)
          v42 = (uint64_t *)(v40 + 4);
        else
          v42 = v40[4];
        if (v41 >= 0)
          v43 = *((unsigned __int8 *)v40 + 55);
        else
          v43 = (unint64_t)v40[5];
        if (v43 >= 0x14)
          v44 = 20;
        else
          v44 = v43;
        v45 = memcmp(__s1, v42, v44);
        if (v45)
        {
          if (v45 < 0)
          {
LABEL_114:
            v40 = (uint64_t **)*v40;
            if (!v40)
              goto LABEL_132;
            continue;
          }
        }
        else if (v43 > 0x14)
        {
          goto LABEL_114;
        }
        break;
      }
      v46 = memcmp(v42, __s1, v44);
      if (v46)
      {
        if ((v46 & 0x80000000) == 0)
        {
LABEL_130:
          v47 = sub_207D151D8((uint64_t)v252, (const void **)__s1);
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          sub_207D21E30((char *)v47, (float *)&__p);
          *(_DWORD *)(a2 + 660) = __p.__r_.__value_.__l.__data_;
          if ((__s1[23] & 0x80000000) != 0)
            operator delete(*(void **)__s1);
          goto LABEL_132;
        }
      }
      else if (v43 >= 0x14)
      {
        goto LABEL_130;
      }
      ++v40;
      goto LABEL_114;
    }
  }
LABEL_132:
  v48 = *(_QWORD *)(a2 + 72);
  v248 = (uint64_t *)(a2 + 72);
  for (j = *(_QWORD *)(a2 + 80); j != v48; j -= 192)
  {
    v50 = *(void **)(j - 72);
    if (v50)
    {
      *(_QWORD *)(j - 64) = v50;
      operator delete(v50);
    }
    v51 = *(void **)(j - 96);
    if (v51)
    {
      *(_QWORD *)(j - 88) = v51;
      operator delete(v51);
    }
  }
  *(_QWORD *)(a2 + 80) = v48;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v260 = 0;
  if (v252[0] != 1)
  {
    LOBYTE(v257[0]) = 0;
    v258 = 0;
    goto LABEL_247;
  }
  if (!sub_207D21FD4(*(uint64_t *)v253, "pose_sampling"))
    goto LABEL_175;
  v52 = sub_207D149A0((uint64_t)v252, "pose_sampling");
  if (*(_BYTE *)v52 != 1 || !sub_207D21FD4(v52[1], "rotation_span"))
    goto LABEL_175;
  memset(v257, 0, sizeof(v257));
  v53 = sub_207D149A0((uint64_t)v252, "pose_sampling");
  v54 = sub_207D149A0((uint64_t)v53, "rotation_span");
  memset(__s1, 0, 24);
  sub_207D222B4((char *)v54, (void **)__s1);
  v55 = (char *)v257[0];
  if (v257[0])
  {
    v56 = v257[1];
    v57 = (void *)v257[0];
    if (v257[1] != v257[0])
    {
      v58 = (char *)v257[1];
      do
      {
        v60 = (void *)*((_QWORD *)v58 - 3);
        v58 -= 24;
        v59 = v60;
        if (v60)
        {
          *(v56 - 2) = v59;
          operator delete(v59);
        }
        v56 = v58;
      }
      while (v58 != v55);
      v57 = (void *)v257[0];
    }
    v257[1] = v55;
    operator delete(v57);
  }
  v257[0] = *(const void **)__s1;
  *(_OWORD *)&v257[1] = *(_OWORD *)&__s1[8];
  if (!v260)
  {
    sub_207D159C4(&__p, (uint64_t *)v257);
    v260 = 1;
    v61 = (char *)v257[0];
    if (!v257[0])
      goto LABEL_175;
LABEL_166:
    v62 = v257[1];
    v63 = v61;
    if (v257[1] != v61)
    {
      v64 = (char *)v257[1];
      do
      {
        v66 = (void *)*((_QWORD *)v64 - 3);
        v64 -= 24;
        v65 = v66;
        if (v66)
        {
          *(v62 - 2) = v65;
          operator delete(v65);
        }
        v62 = v64;
      }
      while (v64 != v61);
      v63 = (char *)v257[0];
    }
    v257[1] = v61;
    operator delete(v63);
    LOBYTE(v257[0]) = 0;
    v258 = 0;
    if (v252[0] == 1)
      goto LABEL_176;
    goto LABEL_247;
  }
  sub_207D155D0((uint64_t)&__p, *(char ***)__s1, *(uint64_t *)&__s1[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__s1[8] - *(_QWORD *)__s1) >> 3));
  v61 = (char *)v257[0];
  if (v257[0])
    goto LABEL_166;
LABEL_175:
  LOBYTE(v257[0]) = 0;
  v258 = 0;
  if (v252[0] != 1)
    goto LABEL_247;
LABEL_176:
  v67 = *(_QWORD *)v253;
  v68 = *(_QWORD *)v253 + 8;
  v69 = *(_QWORD *)(*(_QWORD *)v253 + 8);
  if (!v69)
    goto LABEL_246;
  while (1)
  {
    while (1)
    {
      v70 = *(char *)(v69 + 55);
      v71 = v70 >= 0 ? (const void *)(v69 + 32) : *(const void **)(v69 + 32);
      v72 = v70 >= 0 ? *(unsigned __int8 *)(v69 + 55) : *(_QWORD *)(v69 + 40);
      v73 = v72 >= 0xB ? 11 : v72;
      v74 = memcmp(v71, "R_ruf_model", v73);
      if (!v74)
        break;
      if (v74 < 0)
        goto LABEL_181;
LABEL_178:
      v68 = v69;
      v69 = *(_QWORD *)v69;
      if (!v69)
        goto LABEL_246;
    }
    if (v72 > 0xB)
      goto LABEL_178;
    if (v72 == 11)
      break;
LABEL_181:
    v69 = *(_QWORD *)(v69 + 8);
    if (!v69)
      goto LABEL_246;
  }
  v75 = *(_QWORD *)v69;
  v76 = v69;
  if (*(_QWORD *)v69)
  {
    v76 = v69;
    while (1)
    {
      v77 = *(char *)(v75 + 55);
      if (v77 >= 0)
        v78 = (const void *)(v75 + 32);
      else
        v78 = *(const void **)(v75 + 32);
      if (v77 >= 0)
        v79 = *(unsigned __int8 *)(v75 + 55);
      else
        v79 = *(_QWORD *)(v75 + 40);
      if (v79 >= 0xB)
        v80 = 11;
      else
        v80 = v79;
      v81 = memcmp(v78, "R_ruf_model", v80);
      if (v81)
      {
        if (v81 < 0)
          goto LABEL_198;
LABEL_212:
        v76 = v75;
        v75 = *(_QWORD *)v75;
        if (!v75)
          break;
      }
      else
      {
        if (v79 >= 0xB)
          goto LABEL_212;
LABEL_198:
        v75 = *(_QWORD *)(v75 + 8);
        if (!v75)
          break;
      }
    }
  }
  for (k = *(_QWORD *)(v69 + 8); k; k = *(_QWORD *)k)
  {
LABEL_216:
    v83 = *(char *)(k + 55);
    if (v83 >= 0)
      v84 = (const void *)(k + 32);
    else
      v84 = *(const void **)(k + 32);
    if (v83 >= 0)
      v85 = *(unsigned __int8 *)(k + 55);
    else
      v85 = *(_QWORD *)(k + 40);
    if (v85 >= 0xB)
      v86 = 11;
    else
      v86 = v85;
    v87 = memcmp(v84, "R_ruf_model", v86);
    if (v87)
    {
      if (v87 < 0)
        goto LABEL_215;
    }
    else if (v85 <= 0xB)
    {
LABEL_215:
      k = *(_QWORD *)(k + 8);
      if (!k)
        break;
      goto LABEL_216;
    }
    v68 = k;
  }
  if (v76 == v68)
  {
LABEL_246:
    if (!sub_207D21FD4(v67, "geometry_info"))
      goto LABEL_247;
  }
  else
  {
    memset(__s1, 0, 24);
    HIBYTE(v255) = 11;
    strcpy((char *)v254, "R_ruf_model");
    sub_207D14B28((uint64_t)v252, (const void **)v254, (void **)__s1);
    if (SHIBYTE(v255) < 0)
      operator delete(v254[0]);
    if (v258)
    {
      sub_207D155D0((uint64_t)v257, *(char ***)__s1, *(uint64_t *)&__s1[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__s1[8] - *(_QWORD *)__s1) >> 3));
    }
    else
    {
      sub_207D159C4(v257, (uint64_t *)__s1);
      v258 = 1;
    }
    v88 = *(_QWORD *)__s1;
    if (*(_QWORD *)__s1)
    {
      v89 = *(_QWORD *)&__s1[8];
      v90 = *(void **)__s1;
      if (*(_QWORD *)&__s1[8] != *(_QWORD *)__s1)
      {
        v91 = *(_QWORD *)&__s1[8];
        do
        {
          v93 = *(void **)(v91 - 24);
          v91 -= 24;
          v92 = v93;
          if (v93)
          {
            *(_QWORD *)(v89 - 16) = v92;
            operator delete(v92);
          }
          v89 = v91;
        }
        while (v91 != v88);
        v90 = *(void **)__s1;
      }
      *(_QWORD *)&__s1[8] = v88;
      operator delete(v90);
    }
    if (v252[0] == 1)
    {
      v67 = *(_QWORD *)v253;
      goto LABEL_246;
    }
LABEL_247:
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/ConfigSerialization.cpp", 184, (uint64_t)"j.count(\"geometry_info\")", 24, (uint64_t)"", 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
  }
  v94 = sub_207D149A0((uint64_t)v252, "geometry_info");
  if (*(_BYTE *)v94 != 1 || (v95 = v94[1], v98 = *(uint64_t **)(v95 + 8), v96 = v95 + 8, (v97 = v98) == 0))
  {
LABEL_314:
    v127 = sub_207D149A0((uint64_t)v252, "geometry_info");
    v128 = v127;
    v254[0] = v127;
    v254[1] = 0;
    v255 = 0;
    v256 = 0x8000000000000000;
    v129 = *(unsigned __int8 *)v127;
    if (*(_BYTE *)v127)
    {
      if (v129 == 2)
      {
        v255 = *(_QWORD *)v127[1];
      }
      else if (v129 == 1)
      {
        v254[1] = *(void **)v127[1];
      }
      else
      {
        v256 = 0;
      }
    }
    else
    {
      v256 = 1;
    }
    while (1)
    {
      *(_QWORD *)&__s1[16] = 0;
      *(_OWORD *)__s1 = (unint64_t)v128;
      *(_QWORD *)&__s1[24] = 0x8000000000000000;
      v130 = *(unsigned __int8 *)v128;
      if (v130 == 2)
      {
        *(_QWORD *)&__s1[16] = *(_QWORD *)(v128[1] + 8);
      }
      else if (v130 == 1)
      {
        *(_QWORD *)&__s1[8] = v128[1] + 8;
      }
      else
      {
        *(_QWORD *)&__s1[24] = 1;
      }
      if (sub_207D23444((unsigned __int8 **)v254, (unsigned __int8 **)__s1))
        break;
      v131 = (const void **)sub_207D152E4((uint64_t)v254);
      v132 = sub_207D151D8((uint64_t)v128, v131);
      sub_207D14CF8((uint64_t)__s1, (char *)v132, &__p, (uint64_t *)v257, *v250, *v249);
      v133 = *(_QWORD *)(a2 + 80);
      if (v133 >= *(_QWORD *)(a2 + 88))
      {
        v142 = sub_207D15AD0(v248, (uint64_t)__s1);
        v143 = (void *)v272;
        *(_QWORD *)(a2 + 80) = v142;
        if (v143)
        {
          *((_QWORD *)&v272 + 1) = v143;
          operator delete(v143);
        }
      }
      else
      {
        v134 = *(_QWORD *)__s1;
        *(_DWORD *)(v133 + 8) = *(_DWORD *)&__s1[8];
        *(_QWORD *)v133 = v134;
        v135 = *(_QWORD *)&__s1[12];
        *(_DWORD *)(v133 + 20) = *(_DWORD *)&__s1[20];
        *(_QWORD *)(v133 + 12) = v135;
        *(_BYTE *)(v133 + 24) = 0;
        *(_BYTE *)(v133 + 36) = 0;
        if (v263)
        {
          v136 = *(_QWORD *)&__s1[24];
          *(_DWORD *)(v133 + 32) = v262;
          *(_QWORD *)(v133 + 24) = v136;
          *(_BYTE *)(v133 + 36) = 1;
        }
        *(_BYTE *)(v133 + 40) = 0;
        *(_BYTE *)(v133 + 52) = 0;
        if (v266)
        {
          v137 = v264;
          *(_DWORD *)(v133 + 48) = v265;
          *(_QWORD *)(v133 + 40) = v137;
          *(_BYTE *)(v133 + 52) = 1;
        }
        v138 = v267;
        v139 = v268;
        *(_DWORD *)(v133 + 88) = v269;
        *(_OWORD *)(v133 + 72) = v139;
        *(_OWORD *)(v133 + 56) = v138;
        *(_QWORD *)(v133 + 104) = 0;
        *(_QWORD *)(v133 + 112) = 0;
        *(_QWORD *)(v133 + 96) = 0;
        *(_OWORD *)(v133 + 96) = *(_OWORD *)v270;
        *(_QWORD *)(v133 + 112) = v271;
        *(_QWORD *)(v133 + 120) = 0;
        v270[0] = 0;
        v270[1] = 0;
        v271 = 0;
        *(_QWORD *)(v133 + 128) = 0;
        *(_QWORD *)(v133 + 136) = 0;
        *(_OWORD *)(v133 + 120) = v272;
        *(_QWORD *)(v133 + 136) = v273;
        v272 = 0uLL;
        v273 = 0;
        *(_BYTE *)(v133 + 144) = 0;
        *(_BYTE *)(v133 + 156) = 0;
        if (v276)
        {
          v140 = v274;
          *(_DWORD *)(v133 + 152) = v275;
          *(_QWORD *)(v133 + 144) = v140;
          *(_BYTE *)(v133 + 156) = 1;
        }
        *(_BYTE *)(v133 + 160) = 0;
        *(_BYTE *)(v133 + 172) = 0;
        if (v279)
        {
          v141 = v277;
          *(_DWORD *)(v133 + 168) = v278;
          *(_QWORD *)(v133 + 160) = v141;
          *(_BYTE *)(v133 + 172) = 1;
        }
        *(_OWORD *)(v133 + 176) = v280[0];
        *(_QWORD *)(a2 + 80) = v133 + 192;
      }
      if (v270[0])
      {
        v270[1] = v270[0];
        operator delete(v270[0]);
      }
      v144 = *(unsigned __int8 *)v254[0];
      if (v144 == 2)
      {
        v255 += 16;
      }
      else if (v144 == 1)
      {
        v145 = v254[1];
        v146 = (_QWORD *)*((_QWORD *)v254[1] + 1);
        if (v146)
        {
          do
          {
            v147 = v146;
            v146 = (_QWORD *)*v146;
          }
          while (v146);
        }
        else
        {
          do
          {
            v147 = (_QWORD *)v145[2];
            v31 = *v147 == (_QWORD)v145;
            v145 = v147;
          }
          while (!v31);
        }
        v254[1] = v147;
      }
      else
      {
        ++v256;
      }
    }
    goto LABEL_355;
  }
  while (2)
  {
    while (2)
    {
      v99 = *((char *)v97 + 55);
      if (v99 >= 0)
        v100 = v97 + 4;
      else
        v100 = (const void *)v97[4];
      if (v99 >= 0)
        v101 = *((unsigned __int8 *)v97 + 55);
      else
        v101 = v97[5];
      if (v101 >= 4)
        v102 = 4;
      else
        v102 = v101;
      v103 = memcmp(v100, "bbox", v102);
      if (v103)
      {
        if ((v103 & 0x80000000) == 0)
          goto LABEL_251;
LABEL_254:
        v97 = (uint64_t *)v97[1];
        if (!v97)
          goto LABEL_314;
        continue;
      }
      break;
    }
    if (v101 > 4)
    {
LABEL_251:
      v96 = (uint64_t)v97;
      v97 = (uint64_t *)*v97;
      if (!v97)
        goto LABEL_314;
      continue;
    }
    break;
  }
  if (v101 != 4)
    goto LABEL_254;
  v104 = (uint64_t *)*v97;
  v105 = v97;
  if (*v97)
  {
    v105 = v97;
    while (1)
    {
      v106 = *((char *)v104 + 55);
      if (v106 >= 0)
        v107 = v104 + 4;
      else
        v107 = (const void *)v104[4];
      if (v106 >= 0)
        v108 = *((unsigned __int8 *)v104 + 55);
      else
        v108 = v104[5];
      if (v108 >= 4)
        v109 = 4;
      else
        v109 = v108;
      v110 = memcmp(v107, "bbox", v109);
      if (v110)
      {
        if (v110 < 0)
          goto LABEL_271;
LABEL_285:
        v105 = v104;
        v104 = (uint64_t *)*v104;
        if (!v104)
          break;
      }
      else
      {
        if (v108 >= 4)
          goto LABEL_285;
LABEL_271:
        v104 = (uint64_t *)v104[1];
        if (!v104)
          break;
      }
    }
  }
  for (m = (uint64_t **)v97[1]; m; m = (uint64_t **)*m)
  {
LABEL_289:
    v112 = *((char *)m + 55);
    if (v112 >= 0)
      v113 = (uint64_t *)(m + 4);
    else
      v113 = m[4];
    if (v112 >= 0)
      v114 = *((unsigned __int8 *)m + 55);
    else
      v114 = (unint64_t)m[5];
    if (v114 >= 4)
      v115 = 4;
    else
      v115 = v114;
    v116 = memcmp(v113, "bbox", v115);
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_288;
    }
    else if (v114 <= 4)
    {
LABEL_288:
      m = (uint64_t **)m[1];
      if (!m)
        break;
      goto LABEL_289;
    }
    v96 = (uint64_t)m;
  }
  if (v105 == (uint64_t *)v96)
    goto LABEL_314;
  v117 = sub_207D149A0((uint64_t)v252, "geometry_info");
  sub_207D14CF8((uint64_t)__s1, (char *)v117, &__p, (uint64_t *)v257, *v250, *v249);
  v118 = *(_QWORD *)(a2 + 80);
  if (v118 >= *(_QWORD *)(a2 + 88))
  {
    v148 = sub_207D15AD0(v248, (uint64_t)__s1);
    v149 = (void *)v272;
    *(_QWORD *)(a2 + 80) = v148;
    if (v149)
    {
      *((_QWORD *)&v272 + 1) = v149;
      operator delete(v149);
    }
  }
  else
  {
    v119 = *(_QWORD *)__s1;
    *(_DWORD *)(v118 + 8) = *(_DWORD *)&__s1[8];
    *(_QWORD *)v118 = v119;
    v120 = *(_QWORD *)&__s1[12];
    *(_DWORD *)(v118 + 20) = *(_DWORD *)&__s1[20];
    *(_QWORD *)(v118 + 12) = v120;
    *(_BYTE *)(v118 + 24) = 0;
    *(_BYTE *)(v118 + 36) = 0;
    if (v263)
    {
      v121 = *(_QWORD *)&__s1[24];
      *(_DWORD *)(v118 + 32) = v262;
      *(_QWORD *)(v118 + 24) = v121;
      *(_BYTE *)(v118 + 36) = 1;
    }
    *(_BYTE *)(v118 + 40) = 0;
    *(_BYTE *)(v118 + 52) = 0;
    if (v266)
    {
      v122 = v264;
      *(_DWORD *)(v118 + 48) = v265;
      *(_QWORD *)(v118 + 40) = v122;
      *(_BYTE *)(v118 + 52) = 1;
    }
    v123 = v267;
    v124 = v268;
    *(_DWORD *)(v118 + 88) = v269;
    *(_OWORD *)(v118 + 72) = v124;
    *(_OWORD *)(v118 + 56) = v123;
    *(_QWORD *)(v118 + 104) = 0;
    *(_QWORD *)(v118 + 112) = 0;
    *(_QWORD *)(v118 + 96) = 0;
    *(_OWORD *)(v118 + 96) = *(_OWORD *)v270;
    *(_QWORD *)(v118 + 112) = v271;
    *(_QWORD *)(v118 + 120) = 0;
    v270[0] = 0;
    v270[1] = 0;
    *(_QWORD *)(v118 + 128) = 0;
    *(_QWORD *)(v118 + 136) = 0;
    *(_OWORD *)(v118 + 120) = v272;
    *(_QWORD *)(v118 + 136) = v273;
    v271 = 0;
    v272 = 0uLL;
    v273 = 0;
    *(_BYTE *)(v118 + 144) = 0;
    *(_BYTE *)(v118 + 156) = 0;
    if (v276)
    {
      v125 = v274;
      *(_DWORD *)(v118 + 152) = v275;
      *(_QWORD *)(v118 + 144) = v125;
      *(_BYTE *)(v118 + 156) = 1;
    }
    *(_BYTE *)(v118 + 160) = 0;
    *(_BYTE *)(v118 + 172) = 0;
    if (v279)
    {
      v126 = v277;
      *(_DWORD *)(v118 + 168) = v278;
      *(_QWORD *)(v118 + 160) = v126;
      *(_BYTE *)(v118 + 172) = 1;
    }
    *(_OWORD *)(v118 + 176) = v280[0];
    *(_QWORD *)(a2 + 80) = v118 + 192;
  }
  if (v270[0])
  {
    v270[1] = v270[0];
    operator delete(v270[0]);
  }
LABEL_355:
  v150 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a2 + 664) = *(_WORD *)(v150 + 177);
  *(_QWORD *)(a2 + 384) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v150 + 104) - *(_QWORD *)(v150 + 96)) >> 2);
  *(_QWORD *)(a2 + 392) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v150 + 128) - *(_QWORD *)(v150 + 120)) >> 2);
  if (v252[0] != 1)
    goto LABEL_497;
  if (!sub_207D21FD4(*(uint64_t *)v253, "device_setup"))
    goto LABEL_367;
  v151 = sub_207D149A0((uint64_t)v252, "device_setup");
  memset(__s1, 0, 24);
  sub_207D21A34((void **)v151, (uint64_t)__s1);
  v255 = *(_QWORD *)&__s1[16];
  *(_OWORD *)v254 = *(_OWORD *)__s1;
  v152 = HIBYTE(*(_QWORD *)&__s1[16]);
  v153 = __s1[23];
  if (__s1[23] < 0)
    v152 = *(_QWORD *)&__s1[8];
  if (v152 != 6)
    goto LABEL_366;
  v154 = (void **)v254[0];
  if (__s1[23] >= 0)
    v154 = v254;
  v155 = *(_DWORD *)v154;
  v156 = *((unsigned __int16 *)v154 + 2);
  if (v155 != 1919251571 || v156 != 28517)
  {
LABEL_366:
    if ((__s1[23] & 0x80000000) == 0)
      goto LABEL_367;
LABEL_389:
    operator delete(v254[0]);
    if (v252[0] != 1)
      goto LABEL_497;
LABEL_368:
    v158 = *(_QWORD *)v253;
    v159 = *(_QWORD *)v253 + 8;
    v160 = *(_QWORD *)(*(_QWORD *)v253 + 8);
    if (v160)
    {
      while (2)
      {
        while (2)
        {
          v161 = *(char *)(v160 + 55);
          if (v161 >= 0)
            v162 = (const void *)(v160 + 32);
          else
            v162 = *(const void **)(v160 + 32);
          if (v161 >= 0)
            v163 = *(unsigned __int8 *)(v160 + 55);
          else
            v163 = *(_QWORD *)(v160 + 40);
          if (v163 >= 0xE)
            v164 = 14;
          else
            v164 = v163;
          v165 = memcmp(v162, "use_extrinsics", v164);
          if (v165)
          {
            if ((v165 & 0x80000000) == 0)
              goto LABEL_370;
LABEL_373:
            v160 = *(_QWORD *)(v160 + 8);
            if (!v160)
              goto LABEL_428;
            continue;
          }
          break;
        }
        if (v163 > 0xE)
        {
LABEL_370:
          v159 = v160;
          v160 = *(_QWORD *)v160;
          if (!v160)
            goto LABEL_428;
          continue;
        }
        break;
      }
      if (v163 != 14)
        goto LABEL_373;
      v166 = *(_QWORD *)v160;
      v167 = v160;
      if (*(_QWORD *)v160)
      {
        v167 = v160;
        while (1)
        {
          v168 = *(char *)(v166 + 55);
          if (v168 >= 0)
            v169 = (const void *)(v166 + 32);
          else
            v169 = *(const void **)(v166 + 32);
          if (v168 >= 0)
            v170 = *(unsigned __int8 *)(v166 + 55);
          else
            v170 = *(_QWORD *)(v166 + 40);
          if (v170 >= 0xE)
            v171 = 14;
          else
            v171 = v170;
          v172 = memcmp(v169, "use_extrinsics", v171);
          if (v172)
          {
            if (v172 < 0)
              goto LABEL_393;
LABEL_407:
            v167 = v166;
            v166 = *(_QWORD *)v166;
            if (!v166)
              break;
          }
          else
          {
            if (v170 >= 0xE)
              goto LABEL_407;
LABEL_393:
            v166 = *(_QWORD *)(v166 + 8);
            if (!v166)
              break;
          }
        }
      }
      for (n = *(_QWORD *)(v160 + 8); n; n = *(_QWORD *)n)
      {
LABEL_411:
        v174 = *(char *)(n + 55);
        if (v174 >= 0)
          v175 = (const void *)(n + 32);
        else
          v175 = *(const void **)(n + 32);
        if (v174 >= 0)
          v176 = *(unsigned __int8 *)(n + 55);
        else
          v176 = *(_QWORD *)(n + 40);
        if (v176 >= 0xE)
          v177 = 14;
        else
          v177 = v176;
        v178 = memcmp(v175, "use_extrinsics", v177);
        if (v178)
        {
          if (v178 < 0)
            goto LABEL_410;
        }
        else if (v176 <= 0xE)
        {
LABEL_410:
          n = *(_QWORD *)(n + 8);
          if (!n)
            break;
          goto LABEL_411;
        }
        v159 = n;
      }
      if (v167 != v159)
      {
        v179 = sub_207D149A0((uint64_t)v252, "use_extrinsics");
        __s1[0] = 0;
        sub_207D20D64((char *)v179, __s1);
        *(_BYTE *)(a2 + 440) = __s1[0];
        if (v252[0] != 1)
          goto LABEL_497;
        v158 = *(_QWORD *)v253;
      }
    }
LABEL_428:
    if (sub_207D21FD4(v158, "use_extrinsics_short"))
    {
      v180 = sub_207D149A0((uint64_t)v252, "use_extrinsics_short");
      __s1[0] = 0;
      sub_207D20D64((char *)v180, __s1);
      *(_BYTE *)(a2 + 441) = __s1[0];
    }
    if (v252[0] != 1)
      goto LABEL_497;
    v181 = *(_QWORD *)v253;
    if (sub_207D21FD4(*(uint64_t *)v253, "is_sequential"))
    {
      v182 = sub_207D149A0((uint64_t)v252, "is_sequential");
      __s1[0] = 0;
      sub_207D20D64((char *)v182, __s1);
      *(_BYTE *)(a2 + 443) = __s1[0];
      __s1[23] = 9;
      strcpy(__s1, "rnn_depth");
      v183 = sub_207D133A4(v252, (const void **)__s1);
      v254[0] = 0;
      sub_207D20E6C((uint64_t)v183, v254);
      *(void **)(a2 + 448) = v254[0];
      if ((__s1[23] & 0x80000000) != 0)
        operator delete(*(void **)__s1);
      __s1[23] = 15;
      strcpy(__s1, "rnn_hidden_size");
      v184 = sub_207D133A4(v252, (const void **)__s1);
      v254[0] = 0;
      sub_207D20E6C((uint64_t)v184, v254);
      *(void **)(a2 + 456) = v254[0];
      if ((__s1[23] & 0x80000000) != 0)
        operator delete(*(void **)__s1);
      if (v252[0] != 1)
        goto LABEL_497;
      v181 = *(_QWORD *)v253;
    }
    v185 = v181 + 8;
    v186 = *(_QWORD *)(v181 + 8);
    if (v186)
    {
      while (2)
      {
        while (2)
        {
          v187 = *(char *)(v186 + 55);
          if (v187 >= 0)
            v188 = (const void *)(v186 + 32);
          else
            v188 = *(const void **)(v186 + 32);
          if (v187 >= 0)
            v189 = *(unsigned __int8 *)(v186 + 55);
          else
            v189 = *(_QWORD *)(v186 + 40);
          if (v189 >= 0x1C)
            v190 = 28;
          else
            v190 = v189;
          v191 = memcmp(v188, "heatmap_confidence_threshold", v190);
          if (v191)
          {
            if ((v191 & 0x80000000) == 0)
              goto LABEL_440;
LABEL_443:
            v186 = *(_QWORD *)(v186 + 8);
            if (!v186)
              goto LABEL_495;
            continue;
          }
          break;
        }
        if (v189 > 0x1C)
        {
LABEL_440:
          v185 = v186;
          v186 = *(_QWORD *)v186;
          if (!v186)
            goto LABEL_495;
          continue;
        }
        break;
      }
      if (v189 != 28)
        goto LABEL_443;
      v192 = *(uint64_t **)v186;
      v193 = (uint64_t *)v186;
      if (*(_QWORD *)v186)
      {
        v193 = (uint64_t *)v186;
        while (1)
        {
          v194 = *((char *)v192 + 55);
          if (v194 >= 0)
            v195 = v192 + 4;
          else
            v195 = (const void *)v192[4];
          if (v194 >= 0)
            v196 = *((unsigned __int8 *)v192 + 55);
          else
            v196 = v192[5];
          if (v196 >= 0x1C)
            v197 = 28;
          else
            v197 = v196;
          v198 = memcmp(v195, "heatmap_confidence_threshold", v197);
          if (v198)
          {
            if (v198 < 0)
              goto LABEL_460;
LABEL_474:
            v193 = v192;
            v192 = (uint64_t *)*v192;
            if (!v192)
              break;
          }
          else
          {
            if (v196 >= 0x1C)
              goto LABEL_474;
LABEL_460:
            v192 = (uint64_t *)v192[1];
            if (!v192)
              break;
          }
        }
      }
      for (ii = *(_QWORD *)(v186 + 8); ii; ii = *(_QWORD *)ii)
      {
LABEL_478:
        v200 = *(char *)(ii + 55);
        if (v200 >= 0)
          v201 = (const void *)(ii + 32);
        else
          v201 = *(const void **)(ii + 32);
        if (v200 >= 0)
          v202 = *(unsigned __int8 *)(ii + 55);
        else
          v202 = *(_QWORD *)(ii + 40);
        if (v202 >= 0x1C)
          v203 = 28;
        else
          v203 = v202;
        v204 = memcmp(v201, "heatmap_confidence_threshold", v203);
        if (v204)
        {
          if (v204 < 0)
            goto LABEL_477;
        }
        else if (v202 <= 0x1C)
        {
LABEL_477:
          ii = *(_QWORD *)(ii + 8);
          if (!ii)
            break;
          goto LABEL_478;
        }
        v185 = ii;
      }
      if (v193 != (uint64_t *)v185)
      {
        v205 = sub_207D149A0((uint64_t)v252, "heatmap_confidence_threshold");
        *(_DWORD *)__s1 = 0;
        sub_207D21E30((char *)v205, (float *)__s1);
        *(_DWORD *)(a2 + 584) = *(_DWORD *)__s1;
        if (v252[0] != 1)
          goto LABEL_497;
        v181 = *(_QWORD *)v253;
      }
    }
LABEL_495:
    if (sub_207D21FD4(v181, "pnp_confidence_sigma"))
    {
      v206 = sub_207D149A0((uint64_t)v252, "pnp_confidence_sigma");
      *(_DWORD *)__s1 = 0;
      sub_207D21E30((char *)v206, (float *)__s1);
      *(_DWORD *)(a2 + 616) = *(_DWORD *)__s1;
    }
    goto LABEL_497;
  }
  *(_QWORD *)(a2 + 432) = 2;
  *(_QWORD *)(a2 + 576) = 2;
  if (v153 < 0)
    goto LABEL_389;
LABEL_367:
  if (v252[0] == 1)
    goto LABEL_368;
LABEL_497:
  if (v258)
  {
    v207 = (char *)v257[0];
    if (v257[0])
    {
      v208 = v257[1];
      v209 = (void *)v257[0];
      if (v257[1] != v257[0])
      {
        v210 = (char *)v257[1];
        do
        {
          v212 = (void *)*((_QWORD *)v210 - 3);
          v210 -= 24;
          v211 = v212;
          if (v212)
          {
            *(v208 - 2) = v211;
            operator delete(v211);
          }
          v208 = v210;
        }
        while (v210 != v207);
        v209 = (void *)v257[0];
      }
      v257[1] = v207;
      operator delete(v209);
    }
  }
  if (v260)
  {
    v213 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      v214 = __p.__r_.__value_.__l.__size_;
      v215 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v216 = __p.__r_.__value_.__l.__size_;
        do
        {
          v218 = *(void **)(v216 - 24);
          v216 -= 24;
          v217 = v218;
          if (v218)
          {
            *(_QWORD *)(v214 - 16) = v217;
            operator delete(v217);
          }
          v214 = v216;
        }
        while (v216 != v213);
        v215 = (void *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__l.__size_ = v213;
      operator delete(v215);
    }
  }
  sub_207D20660((uint64_t *)v253, v252[0]);
  v286.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E0];
  *(std::string::size_type *)((char *)v286.__r_.__value_.__r.__words
                            + *(_QWORD *)(v286.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0]
                                                                                               + 24);
  MEMORY[0x20BD021C4](&v286.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x20BD027B8](v287);
  v219 = *((unsigned __int8 *)a1 + 23);
  if ((v219 & 0x80u) == 0)
    v220 = (char *)a1;
  else
    v220 = (char *)*a1;
  if ((v219 & 0x80u) != 0)
    v219 = a1[1];
  if (v219)
  {
    v221 = v219;
    do
    {
      if (!v221)
        goto LABEL_532;
      v222 = v220[--v221];
    }
    while (v222 != 47);
    if (v221 == -1)
      goto LABEL_532;
    if (v219 >= v221)
      v223 = v221;
    else
      v223 = v219;
    if (v223 >= 0x7FFFFFFFFFFFFFF8)
      sub_207C95C50();
    if (v223 >= 0x17)
    {
      v240 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v223 | 7) != 0x17)
        v240 = v223 | 7;
      v241 = v240 + 1;
      v224 = (std::string *)operator new(v240 + 1);
      __p.__r_.__value_.__l.__size_ = v223;
      __p.__r_.__value_.__r.__words[2] = v241 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v223;
      v224 = &__p;
      if (!v223)
        goto LABEL_577;
    }
    memmove(v224, v220, v223);
LABEL_577:
    v224->__r_.__value_.__s.__data_[v223] = 0;
    goto LABEL_533;
  }
LABEL_532:
  memset(&__p, 0, sizeof(__p));
LABEL_533:
  v225 = std::string::append(&__p, "/", 1uLL);
  v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
  *(_QWORD *)&__s1[16] = *((_QWORD *)&v225->__r_.__value_.__l + 2);
  *(_OWORD *)__s1 = v226;
  v225->__r_.__value_.__l.__size_ = 0;
  v225->__r_.__value_.__r.__words[2] = 0;
  v225->__r_.__value_.__r.__words[0] = 0;
  v227 = *(char *)(a2 + 319);
  if (v227 >= 0)
    v228 = (const std::string::value_type *)(a2 + 296);
  else
    v228 = *(const std::string::value_type **)(a2 + 296);
  if (v227 >= 0)
    v229 = *(unsigned __int8 *)(a2 + 319);
  else
    v229 = *(_QWORD *)(a2 + 304);
  v230 = std::string::append((std::string *)__s1, v228, v229);
  v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
  v286.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v231;
  v230->__r_.__value_.__l.__size_ = 0;
  v230->__r_.__value_.__r.__words[2] = 0;
  v230->__r_.__value_.__r.__words[0] = 0;
  if ((__s1[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__s1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_544;
LABEL_541:
    v232 = a2 + 48;
    if ((std::string *)(a2 + 48) != &v286)
    {
LABEL_545:
      if (*(char *)(a2 + 71) < 0)
      {
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v233 = &v286;
        else
          v233 = (std::string *)v286.__r_.__value_.__r.__words[0];
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v234 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
        else
          v234 = v286.__r_.__value_.__l.__size_;
        sub_207CC2244((void **)v232, v233, v234);
      }
      else if ((*((_BYTE *)&v286.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_207CC2180((_QWORD *)v232, v286.__r_.__value_.__l.__data_, v286.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)v232 = v286;
      }
    }
  }
  else
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_541;
LABEL_544:
    operator delete(__p.__r_.__value_.__l.__data_);
    v232 = a2 + 48;
    if ((std::string *)(a2 + 48) != &v286)
      goto LABEL_545;
  }
  sub_207D0EDF0((std::string *)__s1, (unsigned __int8 *)&v286);
  memset(&__p, 0, sizeof(__p));
  v235 = __s1[23];
  if (__s1[23] >= 0)
    v236 = __s1;
  else
    v236 = *(char **)__s1;
  if (__s1[23] < 0)
    v235 = *(_QWORD *)&__s1[8];
  sub_207CF6BB4((unint64_t)&__p, v236, &v236[v235]);
  v237 = atomic_load((unsigned __int8 *)&qword_253E52D98);
  if ((v237 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D98))
  {
    __cxa_atexit((void (*)(void *))nullsub_155, &off_253E50C90, &dword_207C77000);
    __cxa_guard_release(&qword_253E52D98);
  }
  if (((BOOL (*)(int, std::__fs::filesystem::path *))off_253E50C90[22])((int)&off_253E50C90, (std::__fs::filesystem::path *)&__p))
  {
    v238 = sub_207C9C828();
    v239 = v238;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v239)
        goto LABEL_587;
    }
    else if (!v238)
    {
      goto LABEL_587;
    }
    if ((_BYTE *)v232 != __s1)
    {
      if (*(char *)(a2 + 71) < 0)
      {
        if (__s1[23] >= 0)
          v242 = __s1;
        else
          v242 = *(_BYTE **)__s1;
        if (__s1[23] >= 0)
          v243 = __s1[23];
        else
          v243 = *(_QWORD *)&__s1[8];
        sub_207CC2244((void **)v232, v242, v243);
      }
      else if ((__s1[23] & 0x80) != 0)
      {
        sub_207CC2180((_QWORD *)v232, *(void **)__s1, *(size_t *)&__s1[8]);
      }
      else
      {
        *(_OWORD *)v232 = *(_OWORD *)__s1;
        *(_QWORD *)(v232 + 16) = *(_QWORD *)&__s1[16];
      }
    }
    *(_BYTE *)(a2 + 401) = 1;
  }
  else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_587:
  if ((__s1[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_591:
    operator delete(v286.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)__s1);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_591;
}

void sub_207D11404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;

  sub_207D047D0(&a31);
  sub_207D153AC((char **)&a23);
  sub_207D153AC((char **)&a27);
  sub_207D046E4(a16);
  sub_207D20660(&a18, a17);
  sub_207CC05B4(&a71);
  _Unwind_Resume(a1);
}

void sub_207D1186C(char **a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *i;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  void **v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  unint64_t v21;
  size_t v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  const void *v27;
  unint64_t v28;
  size_t v29;
  int v30;
  uint64_t *v31;
  int v32;
  const void *v33;
  unint64_t v34;
  size_t v35;
  int v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  __int128 v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  int v47;
  std::string::size_type v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  std::string::size_type v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string *p_p;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void **v67;
  void **v68;
  void *v69;
  void **v70;
  void **j;
  uint64_t *v72;
  uint64_t **v73;
  int v74;
  uint64_t *v75;
  unint64_t v76;
  size_t v77;
  int v78;
  int v79;
  uint64_t *v80;
  std::string::size_type v81;
  int v82;
  std::string *v83;
  std::string::size_type v84;
  uint64_t v85;
  std::string *v87;
  std::string::size_type v88;
  int v89;
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  int v99;
  std::string::size_type v100;
  std::string::size_type v101;
  std::string *p_dst;
  std::string::size_type size;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  int v109;
  unsigned __int8 *v110;
  std::string::size_type v111;
  std::string::value_type v112;
  std::string::size_type v113;
  std::string *v114;
  int data;
  int v116;
  int v118;
  std::string *v119;
  std::string::size_type v120;
  int v121;
  void **v123;
  void **k;
  std::string::size_type v125;
  char *v126;
  std::string::size_type v127;
  int v128;
  std::string::size_type v129;
  void *v130;
  std::string *v131;
  __int128 v132;
  int v133;
  const std::string::value_type *v134;
  std::string::size_type v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  size_t v139;
  std::string::size_type v140;
  std::string *v141;
  unsigned __int8 v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  std::string *v147;
  size_t v148;
  __int128 v149;
  std::string::size_type v150;
  void **v151;
  void **v152;
  void *v153;
  std::logic_error *v154;
  std::runtime_error *exception;
  std::runtime_error *v156;
  _BYTE *v157;
  __int128 v158;
  __int128 v159;
  void **v160;
  char **v161;
  std::string *v162;
  void **v163;
  char v164[8];
  uint64_t v165;
  const void *v166[2];
  uint64_t v167;
  void *v168;
  _QWORD *v169;
  uint64_t v170;
  _OWORD __s1[2];
  std::string __p;
  std::string v173;
  std::string *v174;
  std::string v175;
  uint64_t v176;
  std::string __dst;
  void *v178[2];
  char v179;
  void *v180;
  char v181;
  void *v182[2];
  _BYTE v183[18];
  char v184;
  void *v185[2];
  char v186;
  void *v187[4];

  v187[1] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v4 >= 0)
    v5 = (char *)a1;
  else
    v5 = *a1;
  if ((char)v4 < 0)
    v4 = a1[1];
  v6 = &v4[(_QWORD)v5];
  if (!v4)
  {
    v8 = v5;
    goto LABEL_23;
  }
  v7 = v5;
  v8 = &v4[(_QWORD)v5];
  while (2)
  {
    for (i = v7 + 2; ; ++i)
    {
      v7 = i - 1;
      if (*(i - 2) != 46)
      {
        if (v7 == v6)
          goto LABEL_23;
        continue;
      }
      if (v7 == v6)
        goto LABEL_23;
      if (*v7 == 106)
      {
        if (i == v6)
          goto LABEL_23;
        if (*i == 115)
        {
          if (i + 1 == v6)
            goto LABEL_23;
          if (i[1] == 111)
            break;
        }
      }
    }
    v10 = i + 2;
    if (i + 2 != v6)
    {
      v11 = i - 2;
      if (*v10 == 110)
        v8 = v11;
      continue;
    }
    break;
  }
LABEL_23:
  v12 = v8 - v5;
  if (v8 == v6)
    v12 = -1;
  if ((char *)v12 != v4 - 5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v175);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_207CC0490(&v175);
  if (*(_DWORD *)((char *)&v175 + *(_QWORD *)(v175.__r_.__value_.__r.__words[0] - 24) + 32))
  {
    v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v156, &__dst);
    __cxa_throw(v156, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v174 = 0;
  sub_207D15F7C((uint64_t)v164, &v175, &v173);
  v13 = v174;
  if (v174 == &v173)
  {
    v14 = 4;
    v13 = &v173;
LABEL_31:
    (*(void (**)(void))(v13->__r_.__value_.__r.__words[0] + 8 * v14))();
  }
  else if (v174)
  {
    v14 = 5;
    goto LABEL_31;
  }
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  v163 = (void **)(a2 + 96);
  *(_BYTE *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_DWORD *)(a2 + 128) = 1;
  *(_QWORD *)(a2 + 132) = 0;
  *(_DWORD *)(a2 + 139) = 0;
  *(_WORD *)(a2 + 143) = 1;
  *(_OWORD *)(a2 + 152) = xmmword_208233340;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 192) = a2 + 200;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  *(_WORD *)(a2 + 271) = 8;
  strcpy((char *)(a2 + 248), "low_res_");
  *(_BYTE *)(a2 + 280) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 312) = 0;
  *(_DWORD *)(a2 + 316) = 1058642330;
  *(_BYTE *)(a2 + 320) = 0;
  *(_DWORD *)(a2 + 324) = 1050253722;
  *(_BYTE *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_BYTE *)(a2 + 383) = 7;
  strcpy((char *)(a2 + 360), "image_y");
  *(_WORD *)(a2 + 407) = 266;
  strcpy((char *)(a2 + 384), "image_cbcr");
  *(_QWORD *)(a2 + 416) = 0x3FE0000000000000;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "espresso_net_path");
  v15 = sub_207D133A4(v164, (const void **)&__p.__r_.__value_.__l.__data_);
  v157 = (_BYTE *)(a2 + 320);
  memset(&__dst, 0, sizeof(__dst));
  sub_207D21A34((void **)v15, (uint64_t)&__dst);
  v16 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v16);
  v160 = (void **)(a2 + 336);
  v161 = a1;
  v162 = (std::string *)(a2 + 8);
  *(_OWORD *)v16 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v168 = 0;
    v169 = 0;
    v170 = 0;
    if (v164[0] != 1)
      goto LABEL_95;
    goto LABEL_38;
  }
  v168 = 0;
  v169 = 0;
  v170 = 0;
  if (v164[0] == 1)
  {
LABEL_38:
    v18 = (uint64_t *)(v165 + 8);
    v17 = *(uint64_t **)(v165 + 8);
    if (!v17)
      goto LABEL_95;
    while (1)
    {
      while (1)
      {
        v19 = *((char *)v17 + 55);
        v20 = v19 >= 0 ? v17 + 4 : (uint64_t *)v17[4];
        v21 = v19 >= 0 ? *((unsigned __int8 *)v17 + 55) : v17[5];
        v22 = v21 >= 7 ? 7 : v21;
        v23 = memcmp(v20, "objects", v22);
        if (!v23)
          break;
        if (v23 < 0)
          goto LABEL_43;
LABEL_40:
        v18 = v17;
        v17 = (uint64_t *)*v17;
        if (!v17)
          goto LABEL_95;
      }
      if (v21 > 7)
        goto LABEL_40;
      if (v21 == 7)
        break;
LABEL_43:
      v17 = (uint64_t *)v17[1];
      if (!v17)
        goto LABEL_95;
    }
    v24 = (uint64_t *)*v17;
    v25 = v17;
    if (*v17)
    {
      v25 = v17;
      while (1)
      {
        v26 = *((char *)v24 + 55);
        if (v26 >= 0)
          v27 = v24 + 4;
        else
          v27 = (const void *)v24[4];
        if (v26 >= 0)
          v28 = *((unsigned __int8 *)v24 + 55);
        else
          v28 = v24[5];
        if (v28 >= 7)
          v29 = 7;
        else
          v29 = v28;
        v30 = memcmp(v27, "objects", v29);
        if (v30)
        {
          if (v30 < 0)
            goto LABEL_60;
LABEL_74:
          v25 = v24;
          v24 = (uint64_t *)*v24;
          if (!v24)
            break;
        }
        else
        {
          if (v28 >= 7)
            goto LABEL_74;
LABEL_60:
          v24 = (uint64_t *)v24[1];
          if (!v24)
            break;
        }
      }
    }
    v31 = (uint64_t *)v17[1];
    if (v31)
    {
      while (1)
      {
        v32 = *((char *)v31 + 55);
        if (v32 >= 0)
          v33 = v31 + 4;
        else
          v33 = (const void *)v31[4];
        if (v32 >= 0)
          v34 = *((unsigned __int8 *)v31 + 55);
        else
          v34 = v31[5];
        if (v34 >= 7)
          v35 = 7;
        else
          v35 = v34;
        v36 = memcmp(v33, "objects", v35);
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_77;
LABEL_91:
          v18 = v31;
          v31 = (uint64_t *)*v31;
          if (!v31)
            break;
        }
        else
        {
          if (v34 > 7)
            goto LABEL_91;
LABEL_77:
          v31 = (uint64_t *)v31[1];
          if (!v31)
            break;
        }
      }
    }
    if (v25 == v18)
      goto LABEL_95;
    v37 = sub_207D149A0((uint64_t)v164, "objects");
    sub_207D13BB8((char *)v37, &v168);
    v39 = v168;
    v38 = v169;
    memset(&__p, 0, sizeof(__p));
    sub_207CA44DC(&__p.__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * (((char *)v169 - (_BYTE *)v168) >> 3));
    if (v39 == v38)
    {
LABEL_405:
      v149 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v150 = __p.__r_.__value_.__r.__words[2];
      v151 = (void **)*v163;
      if (*v163)
      {
        v159 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v152 = *(void ***)(a2 + 104);
        v153 = *v163;
        if (v152 != v151)
        {
          do
          {
            if (*((char *)v152 - 1) < 0)
              operator delete(*(v152 - 3));
            v152 -= 3;
          }
          while (v152 != v151);
          v153 = *v163;
        }
        *(_QWORD *)(a2 + 104) = v151;
        operator delete(v153);
        *v163 = 0;
        *(_QWORD *)(a2 + 104) = 0;
        *(_QWORD *)(a2 + 112) = 0;
        v149 = v159;
      }
      *(_OWORD *)(a2 + 96) = v149;
      *(_QWORD *)(a2 + 112) = v150;
      goto LABEL_177;
    }
    while (1)
    {
      v92 = *((unsigned __int8 *)v39 + 23);
      v94 = (_QWORD *)*v39;
      v93 = v39[1];
      if ((v92 & 0x80u) == 0)
        v95 = v39;
      else
        v95 = (_QWORD *)*v39;
      if ((v92 & 0x80u) == 0)
        v96 = *((unsigned __int8 *)v39 + 23);
      else
        v96 = v39[1];
      if (v96)
      {
        v97 = (char *)v95 - 1;
        do
        {
          v98 = v96;
          if (!v96)
            break;
          v99 = v97[v96--];
        }
        while (v99 != 47);
        if ((v92 & 0x80) == 0)
        {
LABEL_243:
          v94 = v39;
          if (v98 > v92)
            goto LABEL_422;
          if (v92 - v98 >= v92)
            v100 = *((unsigned __int8 *)v39 + 23);
          else
            v100 = v92 - v98;
          if (v100 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_423;
          goto LABEL_255;
        }
      }
      else
      {
        v98 = 0;
        if ((v92 & 0x80) == 0)
          goto LABEL_243;
      }
      if (v93 < v98)
LABEL_422:
        sub_207CA4004();
      v101 = v93 - v98;
      if (v101 >= v39[1])
        v100 = v39[1];
      else
        v100 = v101;
      if (v100 > 0x7FFFFFFFFFFFFFF7)
LABEL_423:
        sub_207C95C50();
LABEL_255:
      if (v100 >= 0x17)
      {
        v104 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v100 | 7) != 0x17)
          v104 = v100 | 7;
        v105 = v104 + 1;
        p_dst = (std::string *)operator new(v104 + 1);
        __dst.__r_.__value_.__l.__size_ = v100;
        __dst.__r_.__value_.__r.__words[2] = v105 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v100;
        p_dst = &__dst;
        if (!v100)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            goto LABEL_263;
          goto LABEL_230;
        }
      }
      memmove(p_dst, (char *)v94 + v98, v100);
      p_dst->__r_.__value_.__s.__data_[v100] = 0;
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
LABEL_263:
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)sub_207CA4674((void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_231;
      }
LABEL_230:
      v91 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(size + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)size = v91;
      __p.__r_.__value_.__l.__size_ = size + 24;
LABEL_231:
      v39 += 3;
      if (v39 == v38)
        goto LABEL_405;
    }
  }
LABEL_95:
  v166[0] = 0;
  v166[1] = 0;
  v167 = 0;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__dst, "model_files");
  v40 = sub_207D133A4(v164, (const void **)&__dst.__r_.__value_.__l.__data_);
  sub_207D13BB8((char *)v40, (void **)v166);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v41 = (unsigned __int8 *)v166[0];
  v42 = (unsigned __int8 *)v166[1];
  memset(__s1, 0, 24);
  sub_207CA44DC((char **)__s1, 0xAAAAAAAAAAAAAAABLL * (((char *)v166[1] - (char *)v166[0]) >> 3));
  if (v41 != v42)
  {
LABEL_101:
    v44 = v41[23];
    if ((v44 & 0x80u) == 0)
      v45 = (char *)v41;
    else
      v45 = *(char **)v41;
    if ((v44 & 0x80u) != 0)
      v44 = *((_QWORD *)v41 + 1);
    if (v44)
    {
      v46 = v44;
      while (v46)
      {
        v47 = v45[--v46];
        if (v47 == 47)
          goto LABEL_112;
      }
      v46 = -1;
      if (v44 == -1)
        v48 = -1;
      else
        v48 = v44;
      if (v48 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_416;
    }
    else
    {
      v46 = -1;
LABEL_112:
      if (v44 >= v46)
        v48 = v46;
      else
        v48 = v44;
      if (v48 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_416;
    }
    if (v48 >= 0x17)
    {
      v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v48 | 7) != 0x17)
        v50 = v48 | 7;
      v51 = v50 + 1;
      v49 = (std::string *)operator new(v50 + 1);
      __dst.__r_.__value_.__l.__size_ = v48;
      __dst.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v48;
      v49 = &__dst;
      if (!v48)
      {
LABEL_128:
        v49->__r_.__value_.__s.__data_[v48] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &__dst;
        else
          v52 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v53 = __dst.__r_.__value_.__l.__size_;
        if (v53)
        {
          v54 = (char *)&v52[-1].__r_.__value_.__r.__words[2] + 7;
          while (v53)
          {
            v55 = v54[v53--];
            if (v55 == 47)
            {
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_139;
LABEL_143:
              operator delete(__dst.__r_.__value_.__l.__data_);
              v56 = v53 + 1;
              LODWORD(v57) = (char)v41[23];
              if ((v57 & 0x80000000) == 0)
                goto LABEL_140;
LABEL_144:
              v57 = *((_QWORD *)v41 + 1);
              if (v57 < v56)
                goto LABEL_415;
              v58 = *(char **)v41;
LABEL_146:
              v59 = v57 - v56;
              if (v59 >= v46 + ~v53)
                v60 = v46 + ~v53;
              else
                v60 = v59;
              if (v60 > 0x7FFFFFFFFFFFFFF7)
LABEL_416:
                sub_207C95C50();
              if (v60 >= 0x17)
              {
                v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v60 | 7) != 0x17)
                  v63 = v60 | 7;
                v64 = v63 + 1;
                p_p = (std::string *)operator new(v63 + 1);
                __p.__r_.__value_.__l.__size_ = v60;
                __p.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
              }
              else
              {
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = v60;
                p_p = &__p;
                if (!v60)
                {
                  __p.__r_.__value_.__s.__data_[0] = 0;
                  v62 = *((_QWORD *)&__s1[0] + 1);
                  if (*((_QWORD *)&__s1[0] + 1) >= *(_QWORD *)&__s1[1])
                    goto LABEL_158;
LABEL_99:
                  v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v62 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                  *(_OWORD *)v62 = v43;
                  *((_QWORD *)&__s1[0] + 1) = v62 + 24;
                  goto LABEL_100;
                }
              }
              memmove(p_p, &v58[v56], v60);
              p_p->__r_.__value_.__s.__data_[v60] = 0;
              v62 = *((_QWORD *)&__s1[0] + 1);
              if (*((_QWORD *)&__s1[0] + 1) < *(_QWORD *)&__s1[1])
                goto LABEL_99;
LABEL_158:
              *((_QWORD *)&__s1[0] + 1) = sub_207CA4674((void **)__s1, (uint64_t)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
LABEL_100:
              v41 += 24;
              if (v41 == v42)
                goto LABEL_162;
              goto LABEL_101;
            }
          }
          v53 = -1;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_143;
        }
        else
        {
          v53 = -1;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_143;
        }
LABEL_139:
        v56 = v53 + 1;
        LODWORD(v57) = (char)v41[23];
        if ((v57 & 0x80000000) != 0)
          goto LABEL_144;
LABEL_140:
        v57 = v57;
        v58 = (char *)v41;
        if (v56 <= v57)
          goto LABEL_146;
LABEL_415:
        sub_207CA4004();
      }
    }
    memmove(v49, v45, v48);
    goto LABEL_128;
  }
LABEL_162:
  v65 = __s1[0];
  v66 = *(_QWORD *)&__s1[1];
  v67 = (void **)*v163;
  if (*v163)
  {
    v158 = __s1[0];
    v68 = *(void ***)(a2 + 104);
    v69 = *v163;
    if (v68 != v67)
    {
      do
      {
        if (*((char *)v68 - 1) < 0)
          operator delete(*(v68 - 3));
        v68 -= 3;
      }
      while (v68 != v67);
      v69 = *v163;
    }
    *(_QWORD *)(a2 + 104) = v67;
    operator delete(v69);
    *v163 = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    v65 = v158;
  }
  *(_OWORD *)(a2 + 96) = v65;
  *(_QWORD *)(a2 + 112) = v66;
  v70 = (void **)v166[0];
  if (v166[0])
  {
    for (j = (void **)v166[1]; j != v70; j -= 3)
    {
      if (*((char *)j - 1) < 0)
        operator delete(*(j - 3));
    }
    operator delete(v70);
  }
LABEL_177:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__dst, "num_classes");
  v72 = sub_207D133A4(v164, (const void **)&__dst.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = 0;
  sub_207D20E6C((uint64_t)v72, &__p);
  *(_QWORD *)(a2 + 120) = __p.__r_.__value_.__r.__words[0];
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "Centernet");
  BYTE7(__s1[1]) = 13;
  strcpy((char *)__s1, "detector_type");
  if (v164[0] == 1)
  {
    v73 = *(uint64_t ***)(v165 + 8);
    if (v73)
    {
      while (2)
      {
        v74 = *((char *)v73 + 55);
        if (v74 >= 0)
          v75 = (uint64_t *)(v73 + 4);
        else
          v75 = v73[4];
        if (v74 >= 0)
          v76 = *((unsigned __int8 *)v73 + 55);
        else
          v76 = (unint64_t)v73[5];
        if (v76 >= 0xD)
          v77 = 13;
        else
          v77 = v76;
        v78 = memcmp(__s1, v75, v77);
        if (v78)
        {
          if (v78 < 0)
          {
LABEL_184:
            v73 = (uint64_t **)*v73;
            if (!v73)
              goto LABEL_202;
            continue;
          }
        }
        else if (v76 > 0xD)
        {
          goto LABEL_184;
        }
        break;
      }
      v79 = memcmp(v75, __s1, v77);
      if (v79)
      {
        if ((v79 & 0x80000000) == 0)
        {
LABEL_200:
          v80 = sub_207D151D8((uint64_t)v164, (const void **)__s1);
          memset(&__dst, 0, sizeof(__dst));
          sub_207D21A34((void **)v80, (uint64_t)&__dst);
          __p = __dst;
          if (SBYTE7(__s1[1]) < 0)
            operator delete(*(void **)&__s1[0]);
          goto LABEL_202;
        }
      }
      else if (v76 >= 0xD)
      {
        goto LABEL_200;
      }
      ++v73;
      goto LABEL_184;
    }
  }
LABEL_202:
  v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v82 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v81 = __p.__r_.__value_.__l.__size_;
  if (v81 != 9)
  {
    if (v81 != 11)
      goto LABEL_271;
    v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = &__p;
    v84 = v83->__r_.__value_.__r.__words[0];
    v85 = *(std::string::size_type *)((char *)v83->__r_.__value_.__r.__words + 3);
    if (v84 != 0x7265746E65666645 || v85 != 0x74654E7265746E65)
      goto LABEL_271;
    *(_DWORD *)a2 = 1;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__dst, "store_debug_info");
    sub_207D13AA0(v164, (const void **)&__dst.__r_.__value_.__l.__data_, (_BYTE *)(a2 + 328));
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__dst, "EffenterNet");
    sub_207CC1A38(v160, (void **)&__dst.__r_.__value_.__l.__data_, v178, 1uLL);
LABEL_269:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_271;
LABEL_270:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_271;
  }
  v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v87 = &__p;
  v88 = v87->__r_.__value_.__r.__words[0];
  v89 = v87->__r_.__value_.__s.__data_[8];
  if (v88 == 0x656E7265746E6543 && v89 == 116)
  {
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 320) = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&__dst, "with_up_hm");
    sub_207D13AA0(v164, (const void **)&__dst.__r_.__value_.__l.__data_, v157);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (*v157)
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&__dst, "hm");
      v179 = 2;
      strcpy((char *)v178, "wh");
      v181 = 3;
      LODWORD(v180) = 6776178;
      strcpy(v183, "\nup_hm");
      strcpy((char *)v182, "hm_maxpool");
      v184 = 5;
      v186 = 13;
      strcpy((char *)v185, "up_hm_maxpool");
      sub_207CC1A38(v160, (void **)&__dst.__r_.__value_.__l.__data_, v187, 6uLL);
      if (v186 < 0)
        operator delete(v185[0]);
      if (v184 < 0)
        operator delete(*(void **)&v183[1]);
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&__dst, "hm");
      v179 = 2;
      strcpy((char *)v178, "wh");
      v181 = 3;
      LODWORD(v180) = 6776178;
      v183[0] = 10;
      strcpy((char *)v182, "hm_maxpool");
      sub_207CC1A38(v160, (void **)&__dst.__r_.__value_.__l.__data_, (void **)&v183[1], 4uLL);
    }
    if ((v183[0] & 0x80000000) != 0)
    {
      operator delete(v182[0]);
      if ((v181 & 0x80000000) == 0)
      {
LABEL_268:
        if ((v179 & 0x80000000) == 0)
          goto LABEL_269;
        goto LABEL_396;
      }
    }
    else if ((v181 & 0x80000000) == 0)
    {
      goto LABEL_268;
    }
    operator delete(v180);
    if ((v179 & 0x80000000) == 0)
      goto LABEL_269;
LABEL_396:
    operator delete(v178[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_271;
    goto LABEL_270;
  }
LABEL_271:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__dst, "image_height");
  v106 = sub_207D133A4(v164, (const void **)&__dst.__r_.__value_.__l.__data_);
  *(_QWORD *)&__s1[0] = 0;
  sub_207D20E6C((uint64_t)v106, __s1);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)&__s1[0];
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__dst, "image_width");
  v107 = sub_207D133A4(v164, (const void **)&__dst.__r_.__value_.__l.__data_);
  *(_QWORD *)&__s1[0] = 0;
  sub_207D20E6C((uint64_t)v107, __s1);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)&__s1[0];
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  HIBYTE(v167) = 12;
  strcpy((char *)v166, "input_format");
  v108 = sub_207D133A4(v164, v166);
  memset(__s1, 0, 24);
  sub_207D21A34((void **)v108, (uint64_t)__s1);
  v109 = SBYTE7(__s1[1]);
  v110 = *(unsigned __int8 **)&__s1[0];
  if ((SBYTE7(__s1[1]) & 0x80u) == 0)
    v111 = BYTE7(__s1[1]);
  else
    v111 = *((_QWORD *)&__s1[0] + 1);
  memset(&__dst, 0, sizeof(__dst));
  std::string::reserve(&__dst, v111);
  if (v109 >= 0)
    v110 = (unsigned __int8 *)__s1;
  for (; v111; --v111)
  {
    v112 = __tolower(*v110);
    std::string::push_back(&__dst, v112);
    ++v110;
  }
  if (SBYTE7(__s1[1]) < 0)
  {
    operator delete(*(void **)&__s1[0]);
    if (SHIBYTE(v167) < 0)
      goto LABEL_314;
  }
  else
  {
    if ((SHIBYTE(v167) & 0x80000000) == 0)
      goto LABEL_284;
LABEL_314:
    operator delete((void *)v166[0]);
  }
LABEL_284:
  v113 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v113 = __dst.__r_.__value_.__l.__size_;
  if (v113 == 9)
  {
    v119 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v119 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v120 = v119->__r_.__value_.__r.__words[0];
    v121 = v119->__r_.__value_.__s.__data_[8];
    if (v120 != 0x6C61637379617267 || v121 != 101)
    {
LABEL_417:
      v154 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v154, "input_format is not supported");
      v154->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v154, (struct type_info *)off_24C06DDC0, MEMORY[0x24BEDAB88]);
    }
    v118 = 1;
  }
  else
  {
    if (v113 != 7)
      goto LABEL_417;
    v114 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v114 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    data = (int)v114->__r_.__value_.__l.__data_;
    v116 = *(_DWORD *)((char *)v114->__r_.__value_.__r.__words + 3);
    if (data != 880178553 || v116 != 1714434612)
      goto LABEL_417;
    v118 = 0;
  }
  *(_DWORD *)(a2 + 4) = v118;
  BYTE7(__s1[1]) = 13;
  strcpy((char *)__s1, "model_configs");
  sub_207D13DC0((uint64_t)v164, (const void **)__s1, a2 + 192);
  if (SBYTE7(__s1[1]) < 0)
    operator delete(*(void **)&__s1[0]);
  BYTE7(__s1[1]) = 13;
  strcpy((char *)__s1, "aspect_ratios");
  sub_207D15428((uint64_t)v164, (const void **)__s1, a2 + 168);
  if (SBYTE7(__s1[1]) < 0)
    operator delete(*(void **)&__s1[0]);
  BYTE7(__s1[1]) = 16;
  strcpy((char *)__s1, "enable_prewiring");
  sub_207D13AA0(v164, (const void **)__s1, (_BYTE *)(a2 + 142));
  if ((SBYTE7(__s1[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_310;
LABEL_316:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v82 < 0)
      goto LABEL_317;
LABEL_311:
    v123 = (void **)v168;
    if (!v168)
      goto LABEL_324;
LABEL_318:
    for (k = (void **)v169; k != v123; k -= 3)
    {
      if (*((char *)k - 1) < 0)
        operator delete(*(k - 3));
    }
    operator delete(v123);
    goto LABEL_324;
  }
  operator delete(*(void **)&__s1[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_316;
LABEL_310:
  if ((v82 & 0x80000000) == 0)
    goto LABEL_311;
LABEL_317:
  operator delete(__p.__r_.__value_.__l.__data_);
  v123 = (void **)v168;
  if (v168)
    goto LABEL_318;
LABEL_324:
  sub_207D20660(&v165, v164[0]);
  v175.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E0];
  *(std::string::size_type *)((char *)v175.__r_.__value_.__r.__words
                            + *(_QWORD *)(v175.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0]
                                                                                               + 24);
  MEMORY[0x20BD021C4](&v175.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x20BD027B8](&v176);
  v125 = *((unsigned __int8 *)v161 + 23);
  if ((v125 & 0x80u) == 0)
    v126 = (char *)v161;
  else
    v126 = *v161;
  if ((v125 & 0x80u) != 0)
    v125 = (std::string::size_type)v161[1];
  if (v125)
  {
    v127 = v125;
    do
    {
      if (!v127)
        goto LABEL_341;
      v128 = v126[--v127];
    }
    while (v128 != 47);
    if (v127 == -1)
      goto LABEL_341;
    if (v125 >= v127)
      v129 = v127;
    else
      v129 = v125;
    if (v129 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v129 >= 0x17)
    {
      v145 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v129 | 7) != 0x17)
        v145 = v129 | 7;
      v146 = v145 + 1;
      v130 = operator new(v145 + 1);
      v173.__r_.__value_.__l.__size_ = v129;
      v173.__r_.__value_.__r.__words[2] = v146 | 0x8000000000000000;
      v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
    }
    else
    {
      *((_BYTE *)&v173.__r_.__value_.__s + 23) = v129;
      v130 = &v173;
      if (!v129)
        goto LABEL_386;
    }
    memmove(v130, v126, v129);
LABEL_386:
    *((_BYTE *)v130 + v129) = 0;
    goto LABEL_342;
  }
LABEL_341:
  memset(&v173, 0, sizeof(v173));
LABEL_342:
  v131 = std::string::append(&v173, "/", 1uLL);
  v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v132;
  v131->__r_.__value_.__l.__size_ = 0;
  v131->__r_.__value_.__r.__words[2] = 0;
  v131->__r_.__value_.__r.__words[0] = 0;
  v133 = *(char *)(a2 + 31);
  if (v133 >= 0)
    v134 = (const std::string::value_type *)(a2 + 8);
  else
    v134 = *(const std::string::value_type **)(a2 + 8);
  if (v133 >= 0)
    v135 = *(unsigned __int8 *)(a2 + 31);
  else
    v135 = *(_QWORD *)(a2 + 16);
  v136 = std::string::append(&__dst, v134, v135);
  v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v175.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v137;
  v136->__r_.__value_.__l.__size_ = 0;
  v136->__r_.__value_.__r.__words[2] = 0;
  v136->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_353;
LABEL_350:
    if (v162 != &v175)
    {
LABEL_354:
      if (*(char *)(a2 + 31) < 0)
      {
        if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v138 = &v175;
        else
          v138 = (std::string *)v175.__r_.__value_.__r.__words[0];
        if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v139 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
        else
          v139 = v175.__r_.__value_.__l.__size_;
        sub_207CC2244((void **)&v162->__r_.__value_.__l.__data_, v138, v139);
      }
      else if ((*((_BYTE *)&v175.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_207CC2180(v162, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v162->__r_.__value_.__l.__data_ = *(_OWORD *)&v175.__r_.__value_.__l.__data_;
        *(_QWORD *)(a2 + 24) = *((_QWORD *)&v175.__r_.__value_.__l + 2);
      }
    }
  }
  else
  {
    if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_350;
LABEL_353:
    operator delete(v173.__r_.__value_.__l.__data_);
    if (v162 != &v175)
      goto LABEL_354;
  }
  sub_207D0EDF0(&__dst, (unsigned __int8 *)&v175);
  memset(&v173, 0, sizeof(v173));
  v140 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v141 = &__dst;
  else
    v141 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v140 = __dst.__r_.__value_.__l.__size_;
  sub_207CF6BB4((unint64_t)&v173, (char *)v141, (char *)v141 + v140);
  v142 = atomic_load((unsigned __int8 *)&qword_253E52D98);
  if ((v142 & 1) == 0 && __cxa_guard_acquire(&qword_253E52D98))
  {
    __cxa_atexit((void (*)(void *))nullsub_155, &off_253E50C90, &dword_207C77000);
    __cxa_guard_release(&qword_253E52D98);
  }
  if (((BOOL (*)(int, std::__fs::filesystem::path *))off_253E50C90[22])((int)&off_253E50C90, (std::__fs::filesystem::path *)&v173))
  {
    v143 = sub_207C9C828();
    v144 = v143;
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v173.__r_.__value_.__l.__data_);
      if (!v144)
        goto LABEL_400;
    }
    else if (!v143)
    {
      goto LABEL_400;
    }
    if (v162 != &__dst)
    {
      if (*(char *)(a2 + 31) < 0)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = &__dst;
        else
          v147 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v148 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v148 = __dst.__r_.__value_.__l.__size_;
        sub_207CC2244((void **)&v162->__r_.__value_.__l.__data_, v147, v148);
      }
      else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_207CC2180(v162, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v162->__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(_QWORD *)(a2 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      }
    }
    *(_BYTE *)(a2 + 141) = 1;
  }
  else if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
LABEL_400:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_404:
    operator delete(v175.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_404;
}

void sub_207D12F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  sub_207C99DE0(&__p);
  sub_207C99DE0(&a29);
  sub_207D049E4(v58);
  sub_207D20660(&a22, a21);
  sub_207CC05B4(&a53);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D133A4(char *a1, const void **a2)
{
  uint64_t **v3;
  int v4;
  const void *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  size_t v10;
  int v11;
  int v12;
  void *exception;
  unint64_t v15;
  const char *v16;
  size_t v17;
  size_t v18;
  size_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  BOOL v28;
  uint64_t v29;
  __int128 *v30;
  size_t v31;
  char *v32;
  __int128 *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 __dst;
  int64_t v40;
  __int128 v41;
  int64_t v42;

  if (*a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v15 = *a1;
    if (v15 > 9)
      v16 = "number";
    else
      v16 = off_24C072F18[v15];
    v17 = 0x7FFFFFFFFFFFFFF7;
    v18 = strlen(v16);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v19 = v18;
    if (v18 >= 0x17)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      p_dst = (__int128 *)operator new(v21 + 1);
      *((_QWORD *)&__dst + 1) = v19;
      v40 = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v40) = v18;
      p_dst = &__dst;
      if (!v18)
      {
LABEL_42:
        *((_BYTE *)p_dst + v19) = 0;
        if (v40 >= 0)
          v23 = HIBYTE(v40);
        else
          v23 = *((_QWORD *)&__dst + 1);
        if (v40 >= 0)
          v24 = 22;
        else
          v24 = (v40 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v24 - v23 >= 0x15)
        {
          if (v40 >= 0)
            v26 = (char *)&__dst;
          else
            v26 = (char *)__dst;
          v27 = "cannot use at() with ";
          if (v23)
          {
            v28 = &v26[v23] <= "cannot use at() with " || v26 > "cannot use at() with ";
            v29 = 21;
            if (v28)
              v29 = 0;
            v27 = &aCannotUseAtWit[v29];
            if (v40 >= 0)
              v30 = &__dst;
            else
              v30 = (__int128 *)__dst;
            memmove((char *)v30 + 21, v26, v23);
          }
          *(_OWORD *)v26 = *(_OWORD *)v27;
          *(_QWORD *)(v26 + 13) = *(_QWORD *)(v27 + 13);
          v31 = v23 + 21;
          if (SHIBYTE(v40) < 0)
            *((_QWORD *)&__dst + 1) = v23 + 21;
          else
            HIBYTE(v40) = v31 & 0x7F;
          v32 = &v26[v31];
        }
        else
        {
          v25 = v23 + 21;
          if (0x7FFFFFFFFFFFFFF6 - v24 < v23 + 21 - v24)
            sub_207C95C50();
          if (v40 >= 0)
            v33 = &__dst;
          else
            v33 = (__int128 *)__dst;
          if (v24 < 0x3FFFFFFFFFFFFFF3)
          {
            v34 = 2 * v24;
            if (v25 > 2 * v24)
              v34 = v23 + 21;
            if (v34 >= 0x17)
            {
              v35 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              v36 = v34 | 7;
              if (v36 == 23)
                v36 = v35;
              v17 = v36 + 1;
            }
            else
            {
              v17 = 23;
            }
          }
          v37 = (char *)operator new(v17);
          v38 = v37;
          qmemcpy(v37, "cannot use at() with ", 21);
          if (v23)
            memmove(v37 + 21, v33, v23);
          if (v24 != 22)
            operator delete(v33);
          *((_QWORD *)&__dst + 1) = v23 + 21;
          v40 = v17 | 0x8000000000000000;
          *(_QWORD *)&__dst = v38;
          v32 = &v38[v25];
        }
        *v32 = 0;
        v41 = __dst;
        v42 = v40;
        v40 = 0;
        __dst = 0uLL;
        sub_207D1E5F8(304, (uint64_t)&v41, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
      }
    }
    memcpy(p_dst, v16, v19);
    goto LABEL_42;
  }
  v3 = *(uint64_t ***)(*((_QWORD *)a1 + 1) + 8);
  if (!v3)
LABEL_28:
    sub_207CA4018("map::at:  key not found");
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  else
    v6 = (uint64_t *)a2[1];
  while (1)
  {
    while (1)
    {
      v7 = *((char *)v3 + 55);
      v8 = v7 >= 0 ? (uint64_t *)(v3 + 4) : v3[4];
      v9 = v7 >= 0 ? (uint64_t *)*((unsigned __int8 *)v3 + 55) : v3[5];
      v10 = (size_t)(v9 >= v6 ? v6 : v9);
      v11 = memcmp(v5, v8, v10);
      if (v11)
        break;
      if (v6 >= v9)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t **)*v3;
      if (!v3)
        goto LABEL_28;
    }
    if (v11 < 0)
      goto LABEL_9;
LABEL_23:
    v12 = memcmp(v8, v5, v10);
    if (v12)
    {
      if ((v12 & 0x80000000) == 0)
        return (uint64_t *)(v3 + 7);
      goto LABEL_27;
    }
    if (v9 >= v6)
      return (uint64_t *)(v3 + 7);
LABEL_27:
    v3 = (uint64_t **)v3[1];
    if (!v3)
      goto LABEL_28;
  }
}

void sub_207D139DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a15 < 0)
    operator delete(__p);
  __cxa_free_exception(v21);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *sub_207D13AA0(char *result, const void **a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t **v4;
  int v7;
  const void *v8;
  size_t v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  uint64_t *v14;
  char v15;

  if (*result == 1)
  {
    v3 = (uint64_t)result;
    v4 = *(uint64_t ***)(*((_QWORD *)result + 1) + 8);
    if (v4)
    {
      v7 = *((char *)a2 + 23);
      if (v7 >= 0)
        v8 = a2;
      else
        v8 = *a2;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 + 23);
      else
        v9 = (size_t)a2[1];
      do
      {
        v10 = *((char *)v4 + 55);
        if (v10 >= 0)
          v11 = (uint64_t *)(v4 + 4);
        else
          v11 = v4[4];
        if (v10 >= 0)
          v12 = *((unsigned __int8 *)v4 + 55);
        else
          v12 = (size_t)v4[5];
        if (v12 >= v9)
          v13 = v9;
        else
          v13 = v12;
        result = (char *)memcmp(v8, v11, v13);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) != 0)
            goto LABEL_11;
        }
        else if (v9 < v12)
        {
          goto LABEL_11;
        }
        result = (char *)memcmp(v11, v8, v13);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
          {
LABEL_27:
            v14 = sub_207D151D8(v3, a2);
            v15 = 0;
            result = sub_207D20D64((char *)v14, &v15);
            *a3 = v15;
            return result;
          }
        }
        else if (v12 >= v9)
        {
          goto LABEL_27;
        }
        ++v4;
LABEL_11:
        v4 = (uint64_t **)*v4;
      }
      while (v4);
    }
  }
  return result;
}

double sub_207D13BB8(char *a1, void **a2)
{
  void **v3;
  void **v4;
  void *v5;
  double result;
  __int128 v7;
  void *v8;

  v7 = 0uLL;
  v8 = 0;
  sub_207D20FDC(a1, (void **)&v7);
  v3 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *a2;
    }
    a2[1] = v3;
    operator delete(v5);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  a2[2] = v8;
  return result;
}

void sub_207D13C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D13CA8(uint64_t a1, const void **a2, _QWORD *a3)
{
  uint64_t **v4;
  int v7;
  const void *v8;
  size_t v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;

  if (*(_BYTE *)a1 == 1)
  {
    v4 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8);
    if (v4)
    {
      v7 = *((char *)a2 + 23);
      if (v7 >= 0)
        v8 = a2;
      else
        v8 = *a2;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 + 23);
      else
        v9 = (size_t)a2[1];
      do
      {
        v10 = *((char *)v4 + 55);
        if (v10 >= 0)
          v11 = (uint64_t *)(v4 + 4);
        else
          v11 = v4[4];
        if (v10 >= 0)
          v12 = *((unsigned __int8 *)v4 + 55);
        else
          v12 = (size_t)v4[5];
        if (v12 >= v9)
          v13 = v9;
        else
          v13 = v12;
        v14 = memcmp(v8, v11, v13);
        if (v14)
        {
          if (v14 < 0)
            goto LABEL_11;
        }
        else if (v9 < v12)
        {
          goto LABEL_11;
        }
        v15 = memcmp(v11, v8, v13);
        if (v15)
        {
          if ((v15 & 0x80000000) == 0)
          {
LABEL_27:
            v16 = sub_207D151D8(a1, a2);
            v17 = 0;
            sub_207D20E6C((uint64_t)v16, &v17);
            *a3 = v17;
            return;
          }
        }
        else if (v12 >= v9)
        {
          goto LABEL_27;
        }
        ++v4;
LABEL_11:
        v4 = (uint64_t **)*v4;
      }
      while (v4);
    }
  }
}

void sub_207D13DC0(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t **v4;
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  uint64_t *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  char *v16;
  uint64_t **v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  std::string::size_type *v21;
  std::string::size_type v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  _BYTE *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  int64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  std::string::size_type v43;
  int v44;
  unint64_t v45;
  unint64_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  std::string::size_type size;
  _QWORD *v64;
  _QWORD *v65;
  BOOL v66;
  char *v67;
  _QWORD *v68;
  uint64_t *v69;
  char *v70;
  uint64_t *v71;
  _BYTE *v72;
  std::string::size_type v73;
  uint64_t *v74;
  uint64_t **v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  char *v85;
  void *exception;
  char *v87;
  void *v88;
  char *v89;
  _QWORD *v91;
  std::string *v92;
  uint64_t *v93;
  _QWORD *v94;
  std::string::size_type v95;
  __int128 v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  std::string __dst;
  void *__p[2];
  char *v105;
  std::string v106;
  unint64_t v107;
  __int128 v108;
  char *v109;
  std::string v110;
  std::string v111;

  if (*(_BYTE *)a1 != 1)
    return;
  v4 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8);
  if (!v4)
    return;
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  while (1)
  {
    v9 = *((char *)v4 + 55);
    if (v9 >= 0)
      v10 = (uint64_t *)(v4 + 4);
    else
      v10 = v4[4];
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)v4 + 55);
    else
      v11 = (size_t)v4[5];
    if (v11 >= v8)
      v12 = v8;
    else
      v12 = v11;
    v13 = memcmp(v7, v10, v12);
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_11;
    }
    else if (v8 < v11)
    {
      goto LABEL_11;
    }
    v14 = memcmp(v10, v7, v12);
    if (!v14)
    {
      if (v11 >= v8)
        break;
      goto LABEL_10;
    }
    if ((v14 & 0x80000000) == 0)
      break;
LABEL_10:
    ++v4;
LABEL_11:
    v4 = (uint64_t **)*v4;
    if (!v4)
      return;
  }
  v15 = sub_207D151D8(a1, a2);
  v16 = (char *)v15;
  v98 = 0;
  v99 = 0;
  v97 = &v98;
  if (*(_BYTE *)v15 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v87 = (char *)sub_207D1E770(v16);
    sub_207C96EE8(&v106, v87);
    sub_207C96E8C("type must be object, but is ", &v106, &__dst);
    sub_207D1E5F8(302, (uint64_t)&__dst, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  v17 = &v101;
  v101 = 0;
  v102 = 0;
  v100 = &v101;
  v18 = (_QWORD *)v15[1];
  v19 = (_QWORD *)*v18;
  v91 = v18 + 1;
  if ((_QWORD *)*v18 != v18 + 1)
  {
    while (1)
    {
      v20 = (char *)(v19 + 7);
      if (*((_BYTE *)v19 + 56) != 2)
      {
        v84 = __cxa_allocate_exception(0x20uLL);
        v85 = (char *)sub_207D1E770(v20);
        sub_207C96EE8(&v111, v85);
        sub_207C96E8C("type must be array, but is ", &v111, &v106);
        sub_207D1E5F8(302, (uint64_t)&v106, (uint64_t)v84);
        __cxa_throw(v84, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
      }
      v93 = (uint64_t *)v17;
      v94 = v19;
      v109 = 0;
      v108 = 0uLL;
      v21 = (std::string::size_type *)v19[8];
      v22 = v21[1];
      v23 = v22 - *v21;
      if (v22 == *v21)
      {
        v24 = 0;
      }
      else
      {
        if (v23 < 0)
          sub_207CA420C();
        v24 = (char *)operator new((unint64_t)v23 >> 1);
        *(_QWORD *)&v108 = v24;
        *((_QWORD *)&v108 + 1) = v24;
        v109 = &v24[8 * (v23 >> 4)];
        v22 = *v21;
      }
      v92 = (std::string *)(v20 - 24);
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = (unint64_t)v20;
      v106.__r_.__value_.__r.__words[2] = v22;
      v107 = 0x8000000000000000;
      v95 = v21[1];
      while (1)
      {
        v25 = *v20;
        if (v25 != 1)
          break;
        if (!v106.__r_.__value_.__l.__size_)
          goto LABEL_104;
LABEL_46:
        v26 = v20;
        v27 = sub_207D21398((uint64_t)&v106);
        v28 = v27;
        switch(*v27)
        {
          case 4:
            v29 = v27[8];
            break;
          case 5:
          case 6:
            v29 = *((_QWORD *)v27 + 1);
            break;
          case 7:
            v29 = (unint64_t)*((double *)v27 + 1);
            break;
          default:
            v88 = __cxa_allocate_exception(0x20uLL);
            v89 = (char *)sub_207D1E770(v28);
            sub_207C96EE8(&v110, v89);
            sub_207C96E8C("type must be number, but is ", &v110, &v111);
            sub_207D1E5F8(302, (uint64_t)&v111, (uint64_t)v88);
            __cxa_throw(v88, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
        }
        v30 = v108;
        v31 = (uint64_t)&v24[-v108];
        v32 = (uint64_t)&v24[-v108] >> 3;
        v33 = (unint64_t *)(v30 + ((unint64_t)&v24[-v30] & 0xFFFFFFFFFFFFFFF8));
        if (*((_QWORD *)&v108 + 1) < (unint64_t)v109)
        {
          if (v33 == *((unint64_t **)&v108 + 1))
          {
            *v33 = v29;
            *((_QWORD *)&v108 + 1) = v33 + 1;
            v20 = v26;
            v43 = v106.__r_.__value_.__r.__words[0];
            v44 = *v106.__r_.__value_.__l.__data_;
            if (v44 != 2)
              goto LABEL_96;
          }
          else
          {
            v34 = *((_QWORD *)&v108 + 1) - (_QWORD)(v33 + 1);
            v35 = (uint64_t *)(*((_QWORD *)&v108 + 1) - 8);
            if (*((_QWORD *)&v108 + 1) < 8uLL)
            {
              v36 = (_QWORD *)*((_QWORD *)&v108 + 1);
            }
            else
            {
              v36 = (_QWORD *)*((_QWORD *)&v108 + 1);
              do
              {
                v62 = *v35++;
                *v36++ = v62;
              }
              while ((unint64_t)v35 < *((_QWORD *)&v30 + 1));
            }
            *((_QWORD *)&v108 + 1) = v36;
            if (*((unint64_t **)&v30 + 1) != v33 + 1)
              memmove((void *)(*((_QWORD *)&v30 + 1) - 8 * (v34 >> 3)), (const void *)(v30 + ((unint64_t)&v24[-v30] & 0xFFFFFFFFFFFFFFF8)), v34);
            *v33 = v29;
            v20 = v26;
            v43 = v106.__r_.__value_.__r.__words[0];
            v44 = *v106.__r_.__value_.__l.__data_;
            if (v44 != 2)
              goto LABEL_96;
          }
          goto LABEL_37;
        }
        v37 = ((uint64_t)(*((_QWORD *)&v108 + 1) - v108) >> 3) + 1;
        if (v37 >> 61)
          sub_207CA420C();
        v38 = (uint64_t)&v109[-v108];
        if ((uint64_t)&v109[-v108] >> 2 > v37)
          v37 = v38 >> 2;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          if (v39 >> 61)
            sub_207CA3AB8();
          v40 = (char *)operator new(8 * v39);
          v41 = &v40[8 * v32];
          v42 = &v40[8 * v39];
          if (v32 != v39)
            goto LABEL_71;
        }
        else
        {
          v40 = 0;
          v41 = (char *)(8 * v32);
          v42 = 0;
          if (v32)
            goto LABEL_71;
        }
        if (v31 < 1)
        {
          if ((char *)v30 == v24)
            v61 = 1;
          else
            v61 = v31 >> 2;
          if (v61 >> 61)
            sub_207CA3AB8();
          v41 = (char *)operator new(8 * v61);
          v42 = &v41[8 * v61];
          if (v40)
          {
            operator delete(v40);
            v42 = &v41[8 * v61];
            v46 = (unint64_t *)v108;
            *(_QWORD *)v41 = v29;
            v47 = v41 + 8;
            v48 = v41;
            if (v46 == v33)
              goto LABEL_78;
            goto LABEL_72;
          }
        }
        else
        {
          v45 = v32 + 2;
          if (v32 >= -1)
            v45 = v32 + 1;
          v41 -= 8 * (v45 >> 1);
        }
LABEL_71:
        v46 = (unint64_t *)v30;
        *(_QWORD *)v41 = v29;
        v47 = v41 + 8;
        v48 = v41;
        if ((unint64_t *)v30 == v33)
          goto LABEL_78;
LABEL_72:
        v49 = v30 + (v31 & 0xFFFFFFFFFFFFFFF8);
        v50 = v49 - (_QWORD)v46 - 8;
        v51 = v33;
        v48 = v41;
        if (v50 < 0x58)
          goto LABEL_151;
        v51 = v33;
        v48 = v41;
        if ((unint64_t)(v49 - (_QWORD)v41) < 0x20)
          goto LABEL_151;
        v52 = (v50 >> 3) + 1;
        v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        v51 = &v33[v53 / 0xFFFFFFFFFFFFFFF8];
        v48 = &v41[-v53];
        v54 = v41 - 16;
        v55 = (__int128 *)(v30 + 8 * v32 - 16);
        v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v57 = *v55;
          *((_OWORD *)v54 - 1) = *(v55 - 1);
          *(_OWORD *)v54 = v57;
          v54 -= 32;
          v55 -= 2;
          v56 -= 4;
        }
        while (v56);
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_151:
          do
          {
            v58 = *--v51;
            *((_QWORD *)v48 - 1) = v58;
            v48 -= 8;
          }
          while (v51 != v46);
        }
LABEL_78:
        v59 = *((_QWORD *)&v108 + 1) - (_QWORD)v33;
        if (*((unint64_t **)&v108 + 1) != v33)
        {
          v60 = v42;
          memmove(v47, v33, *((_QWORD *)&v108 + 1) - (_QWORD)v33);
          v42 = v60;
        }
        *(_QWORD *)&v108 = v48;
        *((_QWORD *)&v108 + 1) = &v47[v59];
        v109 = v42;
        if (v46)
          operator delete(v46);
        v33 = (unint64_t *)v41;
        v20 = v26;
        v43 = v106.__r_.__value_.__r.__words[0];
        v44 = *v106.__r_.__value_.__l.__data_;
        if (v44 != 2)
        {
LABEL_96:
          if (v44 == 1)
          {
            size = v106.__r_.__value_.__l.__size_;
            v64 = *(_QWORD **)(v106.__r_.__value_.__l.__size_ + 8);
            if (v64)
            {
              do
              {
                v65 = v64;
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                v65 = *(_QWORD **)(size + 16);
                v66 = *v65 == size;
                size = (std::string::size_type)v65;
              }
              while (!v66);
            }
            v106.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
          }
          else
          {
            ++v107;
          }
          goto LABEL_38;
        }
LABEL_37:
        v106.__r_.__value_.__r.__words[2] += 16;
LABEL_38:
        v24 = (char *)(v33 + 1);
        if ((char *)v43 != v20)
        {
          v83 = __cxa_allocate_exception(0x20uLL);
          v111.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
          *(_OWORD *)&v111.__r_.__value_.__r.__words[1] = xmmword_208233350;
          strcpy(v111.__r_.__value_.__l.__data_, "cannot compare iterators of different containers");
          sub_207D1E424(212, (uint64_t)&v111, (uint64_t)v83);
          __cxa_throw(v83, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
        }
      }
      if (v25 == 2)
        break;
      if (v107 != 0x8000000000000000)
        goto LABEL_46;
LABEL_104:
      v96 = v108;
      v67 = v109;
      if (*((char *)v94 + 55) < 0)
        sub_207CA40D8(&__dst, (void *)v94[4], v94[5]);
      else
        __dst = *v92;
      *(_OWORD *)__p = v96;
      v105 = v67;
      v68 = v94;
      v69 = sub_207D1DCB8((uint64_t **)&v100, v93, (uint64_t **)&v106, (uint64_t **)&v111, (const void **)&__dst.__r_.__value_.__l.__data_);
      v70 = (char *)*v69;
      if (*v69)
      {
        v71 = (uint64_t *)*((_QWORD *)v70 + 1);
        if (!v71)
          goto LABEL_118;
        do
        {
LABEL_116:
          v75 = (uint64_t **)v71;
          v71 = (uint64_t *)*v71;
        }
        while (v71);
      }
      else
      {
        v70 = (char *)operator new(0x50uLL);
        v72 = v70 + 32;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_207CA40D8(v72, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v72 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *((_QWORD *)v70 + 6) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        }
        *(_OWORD *)(v70 + 56) = *(_OWORD *)__p;
        *((_QWORD *)v70 + 9) = v105;
        __p[1] = 0;
        v105 = 0;
        __p[0] = 0;
        v73 = v106.__r_.__value_.__r.__words[0];
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = 0;
        *((_QWORD *)v70 + 2) = v73;
        *v69 = (uint64_t)v70;
        v74 = (uint64_t *)v70;
        if (*v100)
        {
          v100 = (uint64_t **)*v100;
          v74 = (uint64_t *)*v69;
        }
        sub_207CC24B4(v101, v74);
        ++v102;
        v71 = (uint64_t *)*((_QWORD *)v70 + 1);
        if (v71)
          goto LABEL_116;
        do
        {
LABEL_118:
          v75 = (uint64_t **)*((_QWORD *)v70 + 2);
          v66 = *v75 == (uint64_t *)v70;
          v70 = (char *)v75;
        }
        while (!v66);
      }
      v17 = v75;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v76 = (_QWORD *)v94[1];
        if (v76)
          goto LABEL_126;
        do
        {
LABEL_128:
          v77 = (_QWORD *)v68[2];
          v66 = *v77 == (_QWORD)v68;
          v68 = v77;
        }
        while (!v66);
      }
      else
      {
        v76 = (_QWORD *)v94[1];
        if (!v76)
          goto LABEL_128;
        do
        {
LABEL_126:
          v77 = v76;
          v76 = (_QWORD *)*v76;
        }
        while (v76);
      }
      v19 = v77;
      if (v77 == v91)
      {
        v78 = (char *)v98;
        goto LABEL_133;
      }
    }
    if (v106.__r_.__value_.__r.__words[2] == v95)
      goto LABEL_104;
    goto LABEL_46;
  }
  v78 = 0;
LABEL_133:
  sub_207D04974((uint64_t)&v97, v78);
  v79 = (char *)v101;
  v97 = v100;
  v98 = v101;
  v99 = v102;
  if (v102)
  {
    v101[2] = (uint64_t)&v98;
    v100 = &v101;
    v101 = 0;
    v102 = 0;
    v79 = 0;
  }
  else
  {
    v97 = &v98;
  }
  sub_207D04974((uint64_t)&v100, v79);
  v80 = a3 + 8;
  sub_207D04974(a3, *(char **)(a3 + 8));
  v81 = v98;
  *(_QWORD *)a3 = v97;
  *(_QWORD *)(a3 + 8) = v81;
  v82 = v99;
  *(_QWORD *)(a3 + 16) = v99;
  if (v82)
  {
    v81[2] = v80;
    v97 = &v98;
    v98 = 0;
    v99 = 0;
    v81 = 0;
  }
  else
  {
    *(_QWORD *)a3 = v80;
  }
  sub_207D04974((uint64_t)&v97, (char *)v81);
}

void sub_207D147D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, char a18, char *a19, uint64_t a20,char a21,char *a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;

  operator delete(v38);
  sub_207D15580((uint64_t)&__p);
  sub_207D04974((uint64_t)&a21, a22);
  sub_207D04974((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D149A0(uint64_t a1, const char *a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;
  const char *v8;

  v8 = a2;
  if (*(_BYTE *)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770((char *)a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("cannot use operator[] with a string argument with ", &v6, &v7);
    sub_207D1E5F8(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_207D221B8(*(_QWORD *)(a1 + 8), &v8) + 7;
}

void sub_207D14A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void **sub_207D14AB4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_207D14B28(uint64_t a1, const void **a2, void **a3)
{
  uint64_t **v4;
  int v7;
  const void *v8;
  size_t v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  double result;
  int v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  void *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v24;
  void *v25;

  if (*(_BYTE *)a1 != 1)
    return result;
  v4 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8);
  if (!v4)
    return result;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  while (1)
  {
    v10 = *((char *)v4 + 55);
    if (v10 >= 0)
      v11 = (uint64_t *)(v4 + 4);
    else
      v11 = v4[4];
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)v4 + 55);
    else
      v12 = (size_t)v4[5];
    if (v12 >= v9)
      v13 = v9;
    else
      v13 = v12;
    v14 = memcmp(v8, v11, v13);
    if (v14)
    {
      if (v14 < 0)
        goto LABEL_11;
    }
    else if (v9 < v12)
    {
      goto LABEL_11;
    }
    v16 = memcmp(v11, v8, v13);
    if (!v16)
    {
      if (v12 >= v9)
        break;
      goto LABEL_10;
    }
    if ((v16 & 0x80000000) == 0)
      break;
LABEL_10:
    ++v4;
LABEL_11:
    v4 = (uint64_t **)*v4;
    if (!v4)
      return result;
  }
  v17 = sub_207D151D8(a1, a2);
  v25 = 0;
  v24 = 0uLL;
  sub_207D222B4((char *)v17, (void **)&v24);
  v18 = (char *)*a3;
  if (*a3)
  {
    v19 = (char *)a3[1];
    v20 = *a3;
    if (v19 != v18)
    {
      v21 = (char *)a3[1];
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v19 - 2) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = *a3;
    }
    a3[1] = v18;
    operator delete(v20);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  result = *(double *)&v24;
  *(_OWORD *)a3 = v24;
  a3[2] = v25;
  return result;
}

void sub_207D14CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10)
{
  _QWORD *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      v13 = a10;
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 3);
        v13 -= 24;
        v14 = v15;
        if (v15)
        {
          *(v11 - 2) = v14;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_207D14CF8(uint64_t a1, char *a2, _BYTE *a3, uint64_t *a4, char a5, char a6)
{
  uint64_t *v10;
  uint64_t *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void *v30[2];
  char v31;
  void *__p[3];
  char v33;
  char v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v50 = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v34 = a5;
  v33 = a6;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "target_keypoints");
  sub_207D14B28((uint64_t)a2, (const void **)__p, (void **)&v50);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20822CA00;
  strcpy((char *)__p[0], "target_symmetric_keypoints");
  sub_207D14B28((uint64_t)a2, (const void **)__p, (void **)&v47);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "symmetry_axis");
  sub_207D15428((uint64_t)a2, (const void **)__p, (uint64_t)&v44);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "up_vector");
  sub_207D15428((uint64_t)a2, (const void **)__p, (uint64_t)&v41);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "bbox");
  v10 = sub_207D133A4(a2, (const void **)__p);
  v31 = 3;
  LODWORD(v30[0]) = 7235949;
  sub_207D15428((uint64_t)v10, (const void **)v30, (uint64_t)&v38);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__p[0]);
LABEL_11:
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "bbox");
  v11 = sub_207D133A4(a2, (const void **)__p);
  v31 = 3;
  LODWORD(v30[0]) = 7889261;
  sub_207D15428((uint64_t)v11, (const void **)v30, (uint64_t)&v35);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__p[0]);
LABEL_13:
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "dynamic_frame_rate");
  sub_207D13AA0(a2, (const void **)__p, &v34);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "use_smoothing");
  sub_207D13AA0(a2, (const void **)__p, &v33);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  sub_207DEBDF8((char ***)&v50, (uint64_t ***)&v47, (uint64_t *)&v44, (uint64_t *)&v41, (_QWORD **)&v38, (float32x2_t **)&v35, v34, v33, a1, v12, v13, v14, v15, v16, v17, a3, a4);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v18 = v47;
  if (v47)
  {
    v19 = v48;
    v20 = v47;
    if (v48 != v47)
    {
      v21 = v48;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v19 - 2) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = v47;
    }
    v48 = v18;
    operator delete(v20);
  }
  v24 = v50;
  if (v50)
  {
    v25 = v51;
    v26 = v50;
    if (v51 != v50)
    {
      v27 = v51;
      do
      {
        v29 = (void *)*((_QWORD *)v27 - 3);
        v27 -= 24;
        v28 = v29;
        if (v29)
        {
          *((_QWORD *)v25 - 2) = v28;
          operator delete(v28);
        }
        v25 = v27;
      }
      while (v27 != v24);
      v26 = v50;
    }
    v51 = v24;
    operator delete(v26);
  }
}

void sub_207D150E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;

  if (__p)
  {
    operator delete(__p);
    v34 = a28;
    if (!a28)
    {
LABEL_3:
      v35 = a31;
      if (!a31)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v34 = a28;
    if (!a28)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a31;
  if (!a31)
  {
LABEL_4:
    v36 = *(void **)(v32 - 120);
    if (!v36)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v35);
  v36 = *(void **)(v32 - 120);
  if (!v36)
  {
LABEL_5:
    sub_207D14AB4((void **)(v32 - 96));
    sub_207D14AB4((void **)(v32 - 72));
    _Unwind_Resume(a1);
  }
LABEL_9:
  *(_QWORD *)(v32 - 112) = v36;
  operator delete(v36);
  sub_207D14AB4((void **)(v32 - 96));
  sub_207D14AB4((void **)(v32 - 72));
  _Unwind_Resume(a1);
}

uint64_t *sub_207D151D8(uint64_t a1, const void **a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770((char *)a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("cannot use operator[] with a string argument with ", &v6, &v7);
    sub_207D1E5F8(305, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_207D23544(*(_QWORD *)(a1 + 8), a2) + 7;
}

void sub_207D15284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_207D152E4(uint64_t a1)
{
  void *exception;
  _QWORD v3[3];

  if (**(_BYTE **)a1 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v3, "cannot use key() for non-object iterators");
    sub_207D1E424(207, (uint64_t)v3, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  return *(_QWORD *)(a1 + 8) + 32;
}

void sub_207D15374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

char **sub_207D153AC(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        v5 = a1[1];
        do
        {
          v7 = (void *)*((_QWORD *)v5 - 3);
          v5 -= 24;
          v6 = v7;
          if (v7)
          {
            *((_QWORD *)v3 - 2) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

double sub_207D15428(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t **v4;
  int v7;
  const void *v8;
  size_t v9;
  int v10;
  uint64_t *v11;
  size_t v12;
  size_t v13;
  int v14;
  double result;
  int v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;

  if (*(_BYTE *)a1 != 1)
    return result;
  v4 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8);
  if (!v4)
    return result;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a2 + 23);
  else
    v9 = (size_t)a2[1];
  while (1)
  {
    v10 = *((char *)v4 + 55);
    if (v10 >= 0)
      v11 = (uint64_t *)(v4 + 4);
    else
      v11 = v4[4];
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)v4 + 55);
    else
      v12 = (size_t)v4[5];
    if (v12 >= v9)
      v13 = v9;
    else
      v13 = v12;
    v14 = memcmp(v8, v11, v13);
    if (v14)
    {
      if (v14 < 0)
        goto LABEL_11;
    }
    else if (v9 < v12)
    {
      goto LABEL_11;
    }
    v16 = memcmp(v11, v8, v13);
    if (!v16)
    {
      if (v12 >= v9)
        break;
      goto LABEL_10;
    }
    if ((v16 & 0x80000000) == 0)
      break;
LABEL_10:
    ++v4;
LABEL_11:
    v4 = (uint64_t **)*v4;
    if (!v4)
      return result;
  }
  v17 = sub_207D151D8(a1, a2);
  v20 = 0;
  v19 = 0uLL;
  sub_207D227F4((char *)v17, (uint64_t)&v19);
  v18 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v18;
    operator delete(v18);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  result = *(double *)&v19;
  *(_OWORD *)a3 = v19;
  *(_QWORD *)(a3 + 16) = v20;
  return result;
}

void sub_207D15564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D15580(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_207D155D0(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_207D159B0();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_207D15844(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_207D0CC14(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_207D15844(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_207D0CC14(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_207D15834(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_207D1583C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_207D15844(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_207D0CD58();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_207D1590C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207D15944((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D15920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_207D15944((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207D15944(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void sub_207D159B0()
{
  sub_207C95C64("vector");
}

_QWORD *sub_207D159C4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_207D159B0();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_207D15844(v3, v4, v5, v8);
  }
  return a1;
}

void sub_207D15A6C(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D15AD0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t *v25;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555)
    sub_207D159B0();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL)
    v6 = 0x155555555555555;
  else
    v6 = v4;
  v25 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x155555555555555)
      sub_207CA3AB8();
    v7 = (char *)operator new(192 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[192 * v3];
  __p = v7;
  v22 = v8;
  v23 = v8;
  v24 = &v7[192 * v6];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v8 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v8 + 5) = *(_DWORD *)(a2 + 20);
  v8[24] = 0;
  v8[36] = 0;
  if (*(_BYTE *)(a2 + 36))
  {
    *((_QWORD *)v8 + 3) = *(_QWORD *)(a2 + 24);
    *((_DWORD *)v8 + 8) = *(_DWORD *)(a2 + 32);
    v8[36] = 1;
  }
  v9 = &v7[192 * v3];
  v9[40] = 0;
  v10 = v9 + 40;
  v10[12] = 0;
  if (*(_BYTE *)(a2 + 52))
  {
    *(_QWORD *)v10 = *(_QWORD *)(a2 + 40);
    *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 48);
    v10[12] = 1;
  }
  v11 = &v7[192 * v3];
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  *((_DWORD *)v11 + 22) = *(_DWORD *)(a2 + 88);
  *((_OWORD *)v11 + 6) = *(_OWORD *)(a2 + 96);
  *((_QWORD *)v11 + 14) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(v11 + 120) = *(_OWORD *)(a2 + 120);
  *((_QWORD *)v11 + 17) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v11[156] = 0;
  v12 = v11 + 156;
  *(v12 - 12) = 0;
  if (*(_BYTE *)(a2 + 156))
  {
    *(_QWORD *)(v12 - 12) = *(_QWORD *)(a2 + 144);
    *((_DWORD *)v12 - 1) = *(_DWORD *)(a2 + 152);
    *v12 = 1;
  }
  v13 = &v7[192 * v3];
  v13[160] = 0;
  v14 = v13 + 160;
  v14[12] = 0;
  if (*(_BYTE *)(a2 + 172))
  {
    *(_QWORD *)v14 = *(_QWORD *)(a2 + 160);
    *((_DWORD *)v14 + 2) = *(_DWORD *)(a2 + 168);
    v14[12] = 1;
  }
  *(_OWORD *)&v7[192 * v3 + 176] = *(_OWORD *)(a2 + 176);
  v23 = v8 + 192;
  sub_207D15D58(a1, &__p);
  v15 = a1[1];
  v16 = v22;
  while (1)
  {
    v17 = v23;
    if (v23 == v16)
      break;
    v23 -= 192;
    v18 = (void *)*((_QWORD *)v17 - 9);
    if (v18)
    {
      *((_QWORD *)v17 - 8) = v18;
      operator delete(v18);
    }
    v19 = (void *)*((_QWORD *)v17 - 12);
    if (v19)
    {
      *((_QWORD *)v17 - 11) = v19;
      operator delete(v19);
    }
  }
  if (__p)
    operator delete(__p);
  return v15;
}

void sub_207D15D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D15F08((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D15D58(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_QWORD *)(v2 + v5 - 192);
      *(_DWORD *)(v6 - 184) = *(_DWORD *)(v2 + v5 - 184);
      *(_QWORD *)(v6 - 192) = v8;
      v9 = *(_QWORD *)(v2 + v5 - 180);
      *(_DWORD *)(v6 - 172) = *(_DWORD *)(v2 + v5 - 172);
      *(_QWORD *)(v6 - 180) = v9;
      *(_BYTE *)(v4 + v5 - 168) = 0;
      *(_BYTE *)(v6 - 156) = 0;
      if (*(_BYTE *)(v2 + v5 - 156))
      {
        v10 = *(_QWORD *)(v7 - 168);
        *(_DWORD *)(v4 + v5 - 160) = *(_DWORD *)(v7 - 160);
        *(_QWORD *)(v4 + v5 - 168) = v10;
        *(_BYTE *)(v6 - 156) = 1;
      }
      *(_BYTE *)(v6 - 152) = 0;
      *(_BYTE *)(v6 - 140) = 0;
      if (*(_BYTE *)(v7 - 140))
      {
        v11 = *(_QWORD *)(v2 + v5 - 152);
        *(_DWORD *)(v6 - 144) = *(_DWORD *)(v2 + v5 - 144);
        *(_QWORD *)(v6 - 152) = v11;
        *(_BYTE *)(v6 - 140) = 1;
      }
      v12 = v4 + v5;
      v13 = v2 + v5;
      v14 = *(_OWORD *)(v2 + v5 - 136);
      v15 = *(_OWORD *)(v2 + v5 - 120);
      *(_DWORD *)(v12 - 104) = *(_DWORD *)(v2 + v5 - 104);
      *(_OWORD *)(v12 - 120) = v15;
      *(_OWORD *)(v12 - 136) = v14;
      *(_QWORD *)(v12 - 88) = 0;
      *(_QWORD *)(v12 - 80) = 0;
      *(_QWORD *)(v12 - 96) = 0;
      *(_OWORD *)(v12 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(_QWORD *)(v12 - 80) = *(_QWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v13 - 96) = 0;
      *(_QWORD *)(v13 - 88) = 0;
      *(_QWORD *)(v13 - 80) = 0;
      *(_QWORD *)(v12 - 72) = 0;
      *(_QWORD *)(v12 - 64) = 0;
      *(_QWORD *)(v12 - 56) = 0;
      *(_OWORD *)(v12 - 72) = *(_OWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v12 - 56) = *(_QWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v13 - 72) = 0;
      *(_QWORD *)(v13 - 64) = 0;
      *(_QWORD *)(v13 - 56) = 0;
      *(_BYTE *)(v4 + v5 - 48) = 0;
      *(_BYTE *)(v12 - 36) = 0;
      if (*(_BYTE *)(v2 + v5 - 36))
      {
        v16 = *(_QWORD *)(v13 - 48);
        *(_DWORD *)(v4 + v5 - 40) = *(_DWORD *)(v13 - 40);
        *(_QWORD *)(v4 + v5 - 48) = v16;
        *(_BYTE *)(v12 - 36) = 1;
      }
      *(_BYTE *)(v12 - 32) = 0;
      *(_BYTE *)(v12 - 20) = 0;
      if (*(_BYTE *)(v13 - 20))
      {
        v17 = *(_QWORD *)(v2 + v5 - 32);
        *(_DWORD *)(v12 - 24) = *(_DWORD *)(v2 + v5 - 24);
        *(_QWORD *)(v12 - 32) = v17;
        *(_BYTE *)(v12 - 20) = 1;
      }
      *(_OWORD *)(v4 + v5 - 16) = *(_OWORD *)(v2 + v5 - 16);
      v5 -= 192;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v18 = *result;
  *result = v4;
  a2[1] = v18;
  v19 = result[1];
  result[1] = a2[2];
  a2[2] = v19;
  v20 = result[2];
  result[2] = a2[3];
  a2[3] = v20;
  *a2 = a2[1];
  return result;
}

uint64_t sub_207D15F08(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    v4 = *(void **)(i - 72);
    if (v4)
    {
      *(_QWORD *)(i - 64) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 96);
    if (v5)
    {
      *(_QWORD *)(i - 88) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_207D15F7C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  lconv *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE *v20;
  int v21;
  _QWORD v22[2];
  char v23;
  int v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 __p;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
  v6 = (_QWORD *)a3[3];
  if (!v6)
  {
    v18 = 0;
    goto LABEL_6;
  }
  if (v6 == a3)
  {
    v18 = v17;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v17);
    v7 = v18;
    if (v18)
      goto LABEL_8;
LABEL_6:
    v38 = 0;
    goto LABEL_11;
  }
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v18 = v7;
  if (!v7)
    goto LABEL_6;
LABEL_8:
  if (v7 == v17)
  {
    v38 = v37;
    (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v37);
  }
  else
  {
    v38 = v7;
    v18 = 0;
  }
LABEL_11:
  v8 = (uint64_t)v38;
  if (!v38)
  {
LABEL_14:
    v20 = (_BYTE *)v8;
    goto LABEL_16;
  }
  if (v38 != v37)
  {
    v8 = (*(uint64_t (**)(_QWORD *))(*v38 + 16))(v38);
    goto LABEL_14;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _BYTE *))(v37[0] + 24))(v37, v19);
LABEL_16:
  v21 = 0;
  v22[0] = a2;
  v22[1] = v5;
  v23 = 0;
  v24 = -1;
  v25 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  __p = 0u;
  v30 = 0;
  v31 = "";
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v9 = localeconv();
  if (v9->decimal_point)
    v10 = *v9->decimal_point;
  else
    v10 = 46;
  v35 = v10;
  v36 = 1;
  v21 = sub_207D19294((uint64_t)v22);
  v11 = v38;
  if (v38 == v37)
  {
    v12 = 4;
    v11 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_24;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_24:
  sub_207D16330((uint64_t)v19, (unsigned __int8 *)a1);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__p);
  if (*((_QWORD *)&v27 + 1))
  {
    *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
    operator delete(*((void **)&v27 + 1));
  }
  if (v22[0])
    std::ios_base::clear((std::ios_base *)(v22[0] + *(_QWORD *)(*(_QWORD *)v22[0] - 24)), *(_DWORD *)(v22[0] + *(_QWORD *)(*(_QWORD *)v22[0] - 24) + 32) & 2);
  v13 = v20;
  if (v20 == v19)
  {
    v14 = 4;
    v13 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_35;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_35:
  result = v18;
  if (v18 == v17)
  {
    v16 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_207D16234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_207C9CFA4(exception_object);
}

void sub_207D16330(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  char v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t *p_size;
  unsigned __int8 *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  std::string::size_type v76;
  uint64_t v77;
  std::string::size_type v78;
  uint64_t v79;
  std::string::size_type size;
  int v81;
  int v82;
  int v83;
  uint64_t **v84;
  uint64_t *v85;
  char **v86;
  char **v87;
  uint64_t *v88;
  char v89;
  const void *v90;
  size_t v91;
  _QWORD *v92;
  const void *v93;
  const void *v94;
  int v95;
  const void *v96;
  size_t v97;
  size_t v98;
  int v99;
  int v100;
  char *v101;
  _BYTE *v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  BOOL v106;
  char **v107;
  char *v108;
  char **v109;
  _BYTE *v110;
  int v111;
  uint64_t v112;
  int v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  int v118;
  int v119;
  std::string::size_type v120;
  std::string::size_type v121;
  unint64_t v122;
  int v123;
  uint64_t *v124;
  char **v125;
  char **v126;
  uint64_t *v127;
  char v128;
  const void *v129;
  size_t v130;
  _QWORD *v131;
  const void *v132;
  const void *v133;
  int v134;
  const void *v135;
  size_t v136;
  size_t v137;
  int v138;
  int v139;
  char *v140;
  _BYTE *v141;
  uint64_t v142;
  char *v143;
  uint64_t *v144;
  char *v145;
  char *v146;
  char **v147;
  char *v148;
  char **v149;
  _BYTE *v150;
  int v151;
  uint64_t v152;
  int v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  int v159;
  std::string::size_type v160;
  std::string::size_type v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  int v165;
  char v166;
  int v167;
  std::string::size_type v168;
  int v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  std::string::size_type v181;
  std::string::size_type v182;
  unint64_t v183;
  int v184;
  std::string::size_type v185;
  unint64_t v186;
  unsigned __int8 *v187;
  unsigned __int8 *v188;
  unsigned int v189;
  size_t v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  unsigned int v193;
  size_t v194;
  void *v195;
  int v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  unsigned int v199;
  size_t v200;
  uint64_t *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  unsigned int v209;
  size_t v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  unsigned int v213;
  size_t v214;
  void *v215;
  void *v216;
  int v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  unsigned int v220;
  size_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  void *exception;
  void *v236;
  void *v237;
  void *v238;
  uint64_t **v239;
  _OWORD *v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  std::string v247;
  std::string v248;
  std::string v249;
  std::string v250;
  std::string v251;
  _BYTE v252[24];
  _BYTE *v253;
  unsigned __int8 *v254;
  __int128 __p;
  __int128 v256;
  uint64_t v257;
  void *v258;
  char v259;
  _BYTE v260[24];
  _BYTE *v261;
  char v262;
  unsigned __int8 v263[8];
  uint64_t v264;
  char __str[8];
  uint64_t v266;
  std::runtime_error v267;
  uint64_t v268;
  uint64_t v269;

  v269 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
  {
    v4 = *(_BYTE *)(a1 + 184);
    v254 = a2;
    v241 = (_OWORD *)(a1 + 120);
    __p = 0u;
    v256 = 0u;
    LOBYTE(v257) = 0;
    BYTE1(v257) = v4;
    memset(&v251, 0, sizeof(v251));
    while (1)
    {
      switch(*(_DWORD *)(a1 + 32))
      {
        case 1:
          v249.__r_.__value_.__s.__data_[0] = 1;
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
            v69 = v254;
            v65 = *v254;
            *v254 = 4;
            __str[0] = v65;
            v68 = *((_QWORD *)v69 + 1);
            *((_QWORD *)v69 + 1) = 1;
            goto LABEL_78;
          }
          v5 = *(_QWORD *)(*((_QWORD *)&__p + 1) - 8);
          if (*(_BYTE *)v5 != 2)
          {
            v77 = *((_QWORD *)&v256 + 1);
            v65 = **((_BYTE **)&v256 + 1);
            **((_BYTE **)&v256 + 1) = 4;
            v250.__r_.__value_.__s.__data_[0] = v65;
            v76 = *(_QWORD *)(v77 + 8);
            *(_QWORD *)(v77 + 8) = 1;
            goto LABEL_87;
          }
          v6 = *(_QWORD *)(v5 + 8);
          v7 = *(_QWORD *)(v6 + 8);
          if (v7 >= *(_QWORD *)(v6 + 16))
            goto LABEL_213;
          *(_BYTE *)v7 = 4;
          *(_QWORD *)(v7 + 8) = 1;
          *(_QWORD *)(v6 + 8) = v7 + 16;
          goto LABEL_90;
        case 2:
          v249.__r_.__value_.__s.__data_[0] = 0;
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
            v67 = v254;
            v65 = *v254;
            *v254 = 4;
            goto LABEL_73;
          }
          v17 = *(_QWORD *)(*((_QWORD *)&__p + 1) - 8);
          if (*(_BYTE *)v17 != 2)
          {
            v75 = *((_QWORD *)&v256 + 1);
            v65 = **((_BYTE **)&v256 + 1);
            **((_BYTE **)&v256 + 1) = 4;
            goto LABEL_82;
          }
          v6 = *(_QWORD *)(v17 + 8);
          v18 = *(_QWORD *)(v6 + 8);
          if (v18 < *(_QWORD *)(v6 + 16))
          {
            *(_BYTE *)v18 = 4;
            *(_QWORD *)(v18 + 8) = 0;
            *(_QWORD *)(v6 + 8) = v18 + 16;
            goto LABEL_90;
          }
LABEL_213:
          v143 = sub_207D1FDEC((void **)v6, (unsigned __int8 *)&v249);
          goto LABEL_217;
        case 3:
          v249.__r_.__value_.__r.__words[0] = 0;
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
            v67 = v254;
            v65 = *v254;
            *v254 = 0;
LABEL_73:
            __str[0] = v65;
            v68 = *((_QWORD *)v67 + 1);
            *((_QWORD *)v67 + 1) = 0;
            goto LABEL_78;
          }
          v15 = *(_QWORD *)(*((_QWORD *)&__p + 1) - 8);
          if (*(_BYTE *)v15 != 2)
          {
            v75 = *((_QWORD *)&v256 + 1);
            v65 = **((_BYTE **)&v256 + 1);
            **((_BYTE **)&v256 + 1) = 0;
LABEL_82:
            v250.__r_.__value_.__s.__data_[0] = v65;
            v76 = *(_QWORD *)(v75 + 8);
            *(_QWORD *)(v75 + 8) = 0;
            goto LABEL_87;
          }
          v6 = *(_QWORD *)(v15 + 8);
          v16 = *(_QWORD *)(v6 + 8);
          if (v16 < *(_QWORD *)(v6 + 16))
          {
            *(_BYTE *)v16 = 0;
            *(_QWORD *)(v16 + 8) = 0;
            *(_QWORD *)(v6 + 8) = v16 + 16;
            goto LABEL_90;
          }
          v143 = sub_207D1FF10((void **)v6);
          goto LABEL_217;
        case 4:
          sub_207D2014C(&v254, (uint64_t)v241);
          goto LABEL_90;
        case 5:
          v12 = *(_QWORD *)(a1 + 160);
          v249.__r_.__value_.__r.__words[0] = v12;
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
            v64 = v254;
            v65 = *v254;
            v66 = 6;
            goto LABEL_76;
          }
          v26 = *(_QWORD *)(*((_QWORD *)&__p + 1) - 8);
          if (*(_BYTE *)v26 != 2)
          {
            v73 = *((_QWORD *)&v256 + 1);
            v65 = **((_BYTE **)&v256 + 1);
            v74 = 6;
            goto LABEL_85;
          }
          v6 = *(_QWORD *)(v26 + 8);
          v27 = *(_QWORD *)(v6 + 8);
          if (v27 < *(_QWORD *)(v6 + 16))
          {
            *(_BYTE *)v27 = 6;
            *(_QWORD *)(v27 + 8) = v12;
            *(_QWORD *)(v6 + 8) = v27 + 16;
            goto LABEL_90;
          }
          v143 = sub_207D2053C((void **)v6, (uint64_t *)&v249);
          goto LABEL_217;
        case 6:
          v12 = *(_QWORD *)(a1 + 152);
          v249.__r_.__value_.__r.__words[0] = v12;
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
            v64 = v254;
            v65 = *v254;
            v66 = 5;
LABEL_76:
            *v64 = v66;
            __str[0] = v65;
            v70 = *((_QWORD *)v64 + 1);
            *((_QWORD *)v64 + 1) = v12;
            v266 = v70;
            p_size = &v266;
            goto LABEL_89;
          }
          v13 = *(_QWORD *)(*((_QWORD *)&__p + 1) - 8);
          if (*(_BYTE *)v13 != 2)
          {
            v73 = *((_QWORD *)&v256 + 1);
            v65 = **((_BYTE **)&v256 + 1);
            v74 = 5;
LABEL_85:
            *(_BYTE *)v73 = v74;
            v250.__r_.__value_.__s.__data_[0] = v65;
            v78 = *(_QWORD *)(v73 + 8);
            *(_QWORD *)(v73 + 8) = v12;
            v250.__r_.__value_.__l.__size_ = v78;
            goto LABEL_88;
          }
          v6 = *(_QWORD *)(v13 + 8);
          v14 = *(_QWORD *)(v6 + 8);
          if (v14 < *(_QWORD *)(v6 + 16))
          {
            *(_BYTE *)v14 = 5;
            *(_QWORD *)(v14 + 8) = v12;
            *(_QWORD *)(v6 + 8) = v14 + 16;
            goto LABEL_90;
          }
          v143 = sub_207D20028((void **)v6, (uint64_t *)&v249);
          goto LABEL_217;
        case 7:
          v23 = *(_QWORD *)(a1 + 168);
          if ((v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            v233 = *(_QWORD *)(a1 + 72);
            sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            sub_207D1B23C(&v247, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            sub_207C96E8C("number overflow parsing '", &v247, &v248);
            sub_207C96E30("'", &v248, &v249);
            sub_207D1CEE4(406, (uint64_t)&v249, (uint64_t)__str);
            sub_207D1F8D0((uint64_t)&v254, v233, (uint64_t)&v250, (uint64_t)__str);
            *(_QWORD *)__str = off_24C072CF8;
            std::runtime_error::~runtime_error(&v267);
            std::exception::~exception((std::exception *)__str);
            if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v249.__r_.__value_.__l.__data_);
            goto LABEL_433;
          }
          v249.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 168);
          if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          {
            v72 = v254;
            v65 = *v254;
            *v254 = 7;
            __str[0] = v65;
            v68 = *((_QWORD *)v72 + 1);
            *((_QWORD *)v72 + 1) = v23;
LABEL_78:
            v266 = v68;
            p_size = &v266;
          }
          else
          {
            v24 = *(_QWORD *)(*((_QWORD *)&__p + 1) - 8);
            if (*(_BYTE *)v24 == 2)
            {
              v6 = *(_QWORD *)(v24 + 8);
              v25 = *(_QWORD *)(v6 + 8);
              if (v25 >= *(_QWORD *)(v6 + 16))
              {
                v143 = sub_207D1FCC8((void **)v6, (uint64_t *)&v249);
LABEL_217:
                *(_QWORD *)(v6 + 8) = v143;
              }
              else
              {
                *(_BYTE *)v25 = 7;
                *(_QWORD *)(v25 + 8) = v23;
                *(_QWORD *)(v6 + 8) = v25 + 16;
              }
              goto LABEL_90;
            }
            v79 = *((_QWORD *)&v256 + 1);
            v65 = **((_BYTE **)&v256 + 1);
            **((_BYTE **)&v256 + 1) = 7;
            v250.__r_.__value_.__s.__data_[0] = v65;
            v76 = *(_QWORD *)(v79 + 8);
            *(_QWORD *)(v79 + 8) = v23;
LABEL_87:
            v250.__r_.__value_.__l.__size_ = v76;
LABEL_88:
            p_size = (uint64_t *)&v250.__r_.__value_.__l.__size_;
          }
LABEL_89:
          sub_207D20660(p_size, v65);
LABEL_90:
          size = v251.__r_.__value_.__l.__size_;
          if (!v251.__r_.__value_.__l.__size_)
            goto LABEL_400;
          while (1)
          {
            if (((*(_QWORD *)(v251.__r_.__value_.__r.__words[0] + (((size - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (size - 1)) & 1) != 0)
            {
              v81 = sub_207D19294(a1 + 40);
              *(_DWORD *)(a1 + 32) = v81;
              if (v81 == 13)
                goto LABEL_158;
              if (v81 != 10)
              {
                v225 = *(_QWORD *)(a1 + 72);
                sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v249 = *(std::string *)(a1 + 72);
                sub_207C96EE8(&v247, "array");
                sub_207D1B67C(&v248, a1, 0xAu, (const void **)&v247.__r_.__value_.__l.__data_);
                sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
                sub_207D1BEE8((uint64_t)&v254, v225, (uint64_t)&v250, (uint64_t)__str);
                goto LABEL_432;
              }
              goto LABEL_97;
            }
            v82 = sub_207D19294(a1 + 40);
            *(_DWORD *)(a1 + 32) = v82;
            if (v82 == 13)
              break;
            if (v82 != 11)
            {
              v229 = *(_QWORD *)(a1 + 72);
              sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v249 = *(std::string *)(a1 + 72);
              sub_207C96EE8(&v247, "object");
              sub_207D1B67C(&v248, a1, 0xBu, (const void **)&v247.__r_.__value_.__l.__data_);
              sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
              sub_207D1BEE8((uint64_t)&v254, v229, (uint64_t)&v250, (uint64_t)__str);
              goto LABEL_432;
            }
LABEL_97:
            *((_QWORD *)&__p + 1) -= 8;
            size = --v251.__r_.__value_.__l.__size_;
            if (!v251.__r_.__value_.__l.__size_)
              goto LABEL_400;
          }
          v83 = sub_207D19294(a1 + 40);
          *(_DWORD *)(a1 + 32) = v83;
          if (v83 != 4)
            goto LABEL_430;
          v84 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)&__p + 1) - 8) + 8);
          v86 = (char **)(v84 + 1);
          v85 = v84[1];
          v87 = (char **)(v84 + 1);
          v88 = (uint64_t *)(v84 + 1);
          if (v85)
          {
            v89 = *(_BYTE *)(a1 + 143);
            if (v89 >= 0)
              v90 = (const void *)(a1 + 120);
            else
              v90 = *(const void **)(a1 + 120);
            if (v89 >= 0)
              v91 = *(unsigned __int8 *)(a1 + 143);
            else
              v91 = *(_QWORD *)(a1 + 128);
            while (1)
            {
              v88 = v85;
              v94 = (const void *)v85[4];
              v92 = v85 + 4;
              v93 = v94;
              v95 = *((char *)v92 + 23);
              if (v95 >= 0)
                v96 = v92;
              else
                v96 = v93;
              if (v95 >= 0)
                v97 = *((unsigned __int8 *)v92 + 23);
              else
                v97 = v92[1];
              if (v97 >= v91)
                v98 = v91;
              else
                v98 = v97;
              v99 = memcmp(v90, v96, v98);
              if (v99)
              {
                if (v99 < 0)
                  goto LABEL_108;
LABEL_122:
                v100 = memcmp(v96, v90, v98);
                if (v100)
                {
                  if ((v100 & 0x80000000) == 0)
                    goto LABEL_150;
                }
                else if (v97 >= v91)
                {
LABEL_150:
                  v101 = (char *)v88;
                  goto LABEL_157;
                }
                v85 = (uint64_t *)v88[1];
                if (!v85)
                {
                  v87 = (char **)(v88 + 1);
                  break;
                }
              }
              else
              {
                if (v91 >= v97)
                  goto LABEL_122;
LABEL_108:
                v85 = (uint64_t *)*v88;
                v87 = (char **)v88;
                if (!*v88)
                  break;
              }
            }
          }
          v101 = (char *)operator new(0x48uLL);
          v102 = v101 + 32;
          if (*(char *)(a1 + 143) < 0)
          {
            sub_207CA40D8(v102, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
          }
          else
          {
            *(_OWORD *)v102 = *v241;
            *((_QWORD *)v101 + 6) = *(_QWORD *)(a1 + 136);
          }
          v101[56] = 0;
          *((_QWORD *)v101 + 8) = 0;
          *(_QWORD *)v101 = 0;
          *((_QWORD *)v101 + 1) = 0;
          *((_QWORD *)v101 + 2) = v88;
          *v87 = v101;
          v103 = (uint64_t *)**v84;
          v104 = v101;
          if (v103)
          {
            *v84 = v103;
            v104 = *v87;
          }
          v105 = *v86;
          v106 = v104 == *v86;
          v104[24] = v106;
          if (v106)
            goto LABEL_156;
          while (1)
          {
            v107 = (char **)*((_QWORD *)v104 + 2);
            if (*((_BYTE *)v107 + 24))
              goto LABEL_156;
            v108 = v107[2];
            v109 = *(char ***)v108;
            if (*(char ***)v108 == v107)
              break;
            if (!v109 || (v111 = *((unsigned __int8 *)v109 + 24), v110 = v109 + 3, v111))
            {
              if (*v107 == v104)
              {
                v142 = *((_QWORD *)v104 + 1);
                *v107 = (char *)v142;
                if (v142)
                {
                  *(_QWORD *)(v142 + 16) = v107;
                  v108 = v107[2];
                }
                *((_QWORD *)v104 + 2) = v108;
                *(_QWORD *)&v107[2][8 * (*(_QWORD *)v107[2] != (_QWORD)v107)] = v104;
                *((_QWORD *)v104 + 1) = v107;
                v107[2] = v104;
                v108 = (char *)*((_QWORD *)v104 + 2);
                v104[24] = 1;
                v108[24] = 0;
                v107 = (char **)*((_QWORD *)v108 + 1);
                v117 = *v107;
                *((_QWORD *)v108 + 1) = *v107;
                if (!v117)
                  goto LABEL_154;
              }
              else
              {
                *((_BYTE *)v107 + 24) = 1;
                v108[24] = 0;
                v107 = (char **)*((_QWORD *)v108 + 1);
                v117 = *v107;
                *((_QWORD *)v108 + 1) = *v107;
                if (!v117)
                {
LABEL_154:
                  v107[2] = (char *)*((_QWORD *)v108 + 2);
                  *(_QWORD *)(*((_QWORD *)v108 + 2) + 8 * (**((_QWORD **)v108 + 2) != (_QWORD)v108)) = v107;
                  *v107 = v108;
                  goto LABEL_155;
                }
              }
              *((_QWORD *)v117 + 2) = v108;
              goto LABEL_154;
            }
LABEL_136:
            *((_BYTE *)v107 + 24) = 1;
            v104 = v108;
            v108[24] = v108 == v105;
            *v110 = 1;
            if (v108 == v105)
              goto LABEL_156;
          }
          v112 = *((_QWORD *)v108 + 1);
          if (v112)
          {
            v113 = *(unsigned __int8 *)(v112 + 24);
            v110 = (_BYTE *)(v112 + 24);
            if (!v113)
              goto LABEL_136;
          }
          if (*v107 == v104)
          {
            *((_BYTE *)v107 + 24) = 1;
            v108[24] = 0;
            v116 = v107[1];
            *(_QWORD *)v108 = v116;
            if (v116)
              goto LABEL_148;
          }
          else
          {
            v114 = v107[1];
            v115 = *(char **)v114;
            v107[1] = *(char **)v114;
            if (v115)
            {
              *((_QWORD *)v115 + 2) = v107;
              v108 = v107[2];
            }
            *((_QWORD *)v114 + 2) = v108;
            *(_QWORD *)&v107[2][8 * (*(_QWORD *)v107[2] != (_QWORD)v107)] = v114;
            *(_QWORD *)v114 = v107;
            v107[2] = v114;
            v108 = (char *)*((_QWORD *)v114 + 2);
            v107 = *(char ***)v108;
            v114[24] = 1;
            v108[24] = 0;
            v116 = v107[1];
            *(_QWORD *)v108 = v116;
            if (v116)
LABEL_148:
              *((_QWORD *)v116 + 2) = v108;
          }
          v107[2] = (char *)*((_QWORD *)v108 + 2);
          *(_QWORD *)(*((_QWORD *)v108 + 2) + 8 * (**((_QWORD **)v108 + 2) != (_QWORD)v108)) = v107;
          v107[1] = v108;
LABEL_155:
          *((_QWORD *)v108 + 2) = v107;
LABEL_156:
          v84[2] = (uint64_t *)((char *)v84[2] + 1);
LABEL_157:
          *((_QWORD *)&v256 + 1) = v101 + 56;
          v118 = sub_207D19294(a1 + 40);
          *(_DWORD *)(a1 + 32) = v118;
          if (v118 != 12)
            goto LABEL_431;
LABEL_158:
          *(_DWORD *)(a1 + 32) = sub_207D19294(a1 + 40);
          continue;
        case 8:
          __str[0] = 2;
          v8 = sub_207D1F924(&v254, (unsigned __int8 *)__str);
          v9 = v8;
          v10 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) < (unint64_t)v256)
          {
            **((_QWORD **)&__p + 1) = v8;
            v11 = (uint64_t)(v10 + 8);
            goto LABEL_162;
          }
          v28 = (_BYTE *)__p;
          v29 = *((_QWORD *)&__p + 1) - __p;
          v30 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            goto LABEL_446;
          v32 = v256 - __p;
          if ((uint64_t)(v256 - __p) >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 >> 61)
              goto LABEL_447;
            v34 = operator new(8 * v33);
            v35 = (uint64_t *)&v34[8 * v30];
            *v35 = v9;
            v11 = (uint64_t)(v35 + 1);
            v36 = (char *)(v10 - v28);
            if (v10 == v28)
            {
LABEL_160:
              *(_QWORD *)&__p = v35;
              *((_QWORD *)&__p + 1) = v11;
              *(_QWORD *)&v256 = &v34[8 * v33];
              if (!v10)
                goto LABEL_162;
LABEL_161:
              operator delete(v10);
              goto LABEL_162;
            }
          }
          else
          {
            v34 = 0;
            v35 = (uint64_t *)(8 * v30);
            *(_QWORD *)(8 * v30) = v9;
            v11 = 8 * v30 + 8;
            v36 = (char *)(v10 - v28);
            if (v10 == v28)
              goto LABEL_160;
          }
          v37 = (unint64_t)(v36 - 8);
          if (v37 < 0x58)
            goto LABEL_459;
          if ((unint64_t)(v10 - v34 - v29) < 0x20)
            goto LABEL_459;
          v38 = (v37 >> 3) + 1;
          v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v40 = &v10[-v39];
          v35 = (uint64_t *)((char *)v35 - v39);
          v41 = &v34[8 * v30 - 16];
          v42 = v10 - 16;
          v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *v41 = v44;
            v41 -= 2;
            v42 -= 32;
            v43 -= 4;
          }
          while (v43);
          v10 = v40;
          if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_459:
            do
            {
              v45 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *--v35 = v45;
            }
            while (v10 != v28);
          }
          v10 = (char *)__p;
          *(_QWORD *)&__p = v35;
          *((_QWORD *)&__p + 1) = v11;
          *(_QWORD *)&v256 = &v34[8 * v33];
          if (v10)
            goto LABEL_161;
LABEL_162:
          *((_QWORD *)&__p + 1) = v11;
          v119 = sub_207D19294(a1 + 40);
          *(_DWORD *)(a1 + 32) = v119;
          if (v119 == 10)
            goto LABEL_176;
          v120 = v251.__r_.__value_.__l.__size_;
          if (v251.__r_.__value_.__l.__size_ == v251.__r_.__value_.__r.__words[2] << 6)
          {
            if ((int64_t)(v251.__r_.__value_.__l.__size_ + 1) < 0)
              sub_207D159B0();
            v121 = v251.__r_.__value_.__r.__words[2] << 7;
            if (v251.__r_.__value_.__r.__words[2] << 7 <= (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64)
              v121 = (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v251.__r_.__value_.__l.__size_ <= 0x3FFFFFFFFFFFFFFELL)
              v122 = v121;
            else
              v122 = 0x7FFFFFFFFFFFFFFFLL;
            sub_207D1C104((uint64_t)&v251, v122);
            v120 = v251.__r_.__value_.__l.__size_;
          }
          v251.__r_.__value_.__l.__size_ = v120 + 1;
          *(_QWORD *)(v251.__r_.__value_.__r.__words[0] + ((v120 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v120;
          continue;
        case 9:
          __str[0] = 1;
          v19 = sub_207D1F924(&v254, (unsigned __int8 *)__str);
          v20 = v19;
          v21 = (_BYTE *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v256)
          {
            v46 = (_BYTE *)__p;
            v47 = *((_QWORD *)&__p + 1) - __p;
            v48 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61)
LABEL_446:
              sub_207D159B0();
            v50 = v256 - __p;
            if ((uint64_t)(v256 - __p) >> 2 > v49)
              v49 = v50 >> 2;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              if (v51 >> 61)
LABEL_447:
                sub_207CA3AB8();
              v52 = operator new(8 * v51);
              v53 = (uint64_t *)&v52[8 * v48];
              *v53 = v20;
              v22 = (uint64_t)(v53 + 1);
              v54 = (char *)(v21 - v46);
              if (v21 != v46)
              {
LABEL_62:
                v55 = (unint64_t)(v54 - 8);
                if (v55 < 0x58)
                  goto LABEL_460;
                if ((unint64_t)(v21 - v52 - v47) < 0x20)
                  goto LABEL_460;
                v56 = (v55 >> 3) + 1;
                v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
                v58 = &v21[-v57];
                v53 = (uint64_t *)((char *)v53 - v57);
                v59 = &v52[8 * v48 - 16];
                v60 = (__int128 *)(v21 - 16);
                v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v62 = *v60;
                  *(v59 - 1) = *(v60 - 1);
                  *v59 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 4;
                }
                while (v61);
                v21 = v58;
                if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_460:
                  do
                  {
                    v63 = *((_QWORD *)v21 - 1);
                    v21 -= 8;
                    *--v53 = v63;
                  }
                  while (v21 != v46);
                }
                v21 = (_BYTE *)__p;
                *(_QWORD *)&__p = v53;
                *((_QWORD *)&__p + 1) = v22;
                *(_QWORD *)&v256 = &v52[8 * v51];
                if (!v21)
                  goto LABEL_175;
LABEL_174:
                operator delete(v21);
                goto LABEL_175;
              }
            }
            else
            {
              v52 = 0;
              v53 = (uint64_t *)(8 * v48);
              *(_QWORD *)(8 * v48) = v20;
              v22 = 8 * v48 + 8;
              v54 = (char *)(v21 - v46);
              if (v21 != v46)
                goto LABEL_62;
            }
            *(_QWORD *)&__p = v53;
            *((_QWORD *)&__p + 1) = v22;
            *(_QWORD *)&v256 = &v52[8 * v51];
            if (v21)
              goto LABEL_174;
          }
          else
          {
            **((_QWORD **)&__p + 1) = v19;
            v22 = (uint64_t)(v21 + 8);
          }
LABEL_175:
          *((_QWORD *)&__p + 1) = v22;
          v123 = sub_207D19294(a1 + 40);
          *(_DWORD *)(a1 + 32) = v123;
          if (v123 == 11)
          {
LABEL_176:
            *((_QWORD *)&__p + 1) -= 8;
            goto LABEL_90;
          }
          if (v123 != 4)
          {
LABEL_430:
            v230 = *(_QWORD *)(a1 + 72);
            sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            v249 = *(std::string *)(a1 + 72);
            sub_207C96EE8(&v247, "object key");
            sub_207D1B67C(&v248, a1, 4u, (const void **)&v247.__r_.__value_.__l.__data_);
            sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
            sub_207D1BEE8((uint64_t)&v254, v230, (uint64_t)&v250, (uint64_t)__str);
            goto LABEL_432;
          }
          v239 = *(uint64_t ***)(*(_QWORD *)(*((_QWORD *)&__p + 1) - 8) + 8);
          v125 = (char **)(v239 + 1);
          v124 = v239[1];
          v126 = (char **)(v239 + 1);
          v127 = (uint64_t *)(v239 + 1);
          if (v124)
          {
            v128 = *(_BYTE *)(a1 + 143);
            if (v128 >= 0)
              v129 = (const void *)(a1 + 120);
            else
              v129 = *(const void **)(a1 + 120);
            if (v128 >= 0)
              v130 = *(unsigned __int8 *)(a1 + 143);
            else
              v130 = *(_QWORD *)(a1 + 128);
            while (1)
            {
              v127 = v124;
              v133 = (const void *)v124[4];
              v131 = v124 + 4;
              v132 = v133;
              v134 = *((char *)v131 + 23);
              if (v134 >= 0)
                v135 = v131;
              else
                v135 = v132;
              if (v134 >= 0)
                v136 = *((unsigned __int8 *)v131 + 23);
              else
                v136 = v131[1];
              if (v136 >= v130)
                v137 = v130;
              else
                v137 = v136;
              v138 = memcmp(v129, v135, v137);
              if (v138)
              {
                if (v138 < 0)
                  goto LABEL_185;
LABEL_199:
                v139 = memcmp(v135, v129, v137);
                if (v139)
                {
                  if ((v139 & 0x80000000) == 0)
                    goto LABEL_236;
                }
                else if (v136 >= v130)
                {
LABEL_236:
                  v140 = (char *)v127;
                  goto LABEL_253;
                }
                v124 = (uint64_t *)v127[1];
                if (!v124)
                {
                  v126 = (char **)(v127 + 1);
                  break;
                }
              }
              else
              {
                if (v130 >= v136)
                  goto LABEL_199;
LABEL_185:
                v124 = (uint64_t *)*v127;
                v126 = (char **)v127;
                if (!*v127)
                  break;
              }
            }
          }
          v140 = (char *)operator new(0x48uLL);
          v141 = v140 + 32;
          if (*(char *)(a1 + 143) < 0)
          {
            sub_207CA40D8(v141, *(void **)(a1 + 120), *(_QWORD *)(a1 + 128));
          }
          else
          {
            *(_OWORD *)v141 = *v241;
            *((_QWORD *)v140 + 6) = *(_QWORD *)(a1 + 136);
          }
          v140[56] = 0;
          *((_QWORD *)v140 + 8) = 0;
          *(_QWORD *)v140 = 0;
          *((_QWORD *)v140 + 1) = 0;
          *((_QWORD *)v140 + 2) = v127;
          *v126 = v140;
          v144 = (uint64_t *)**v239;
          v145 = v140;
          if (v144)
          {
            *v239 = v144;
            v145 = *v126;
          }
          v146 = *v125;
          v106 = v145 == *v125;
          v145[24] = v106;
          if (v106)
            goto LABEL_252;
          while (1)
          {
            v147 = (char **)*((_QWORD *)v145 + 2);
            if (*((_BYTE *)v147 + 24))
              goto LABEL_252;
            v148 = v147[2];
            v149 = *(char ***)v148;
            if (*(char ***)v148 == v147)
              break;
            if (!v149 || (v151 = *((unsigned __int8 *)v149 + 24), v150 = v149 + 3, v151))
            {
              if (*v147 == v145)
              {
                v156 = *((_QWORD *)v145 + 1);
                *v147 = (char *)v156;
                if (v156)
                {
                  *(_QWORD *)(v156 + 16) = v147;
                  v148 = v147[2];
                }
                *((_QWORD *)v145 + 2) = v148;
                *(_QWORD *)&v147[2][8 * (*(_QWORD *)v147[2] != (_QWORD)v147)] = v145;
                *((_QWORD *)v145 + 1) = v147;
                v147[2] = v145;
                v148 = (char *)*((_QWORD *)v145 + 2);
              }
              else
              {
                v145 = (char *)*((_QWORD *)v145 + 2);
              }
              v145[24] = 1;
              v148[24] = 0;
              v147 = (char **)*((_QWORD *)v148 + 1);
              v157 = *v147;
              *((_QWORD *)v148 + 1) = *v147;
              if (v157)
                *((_QWORD *)v157 + 2) = v148;
              v147[2] = (char *)*((_QWORD *)v148 + 2);
              *(_QWORD *)(*((_QWORD *)v148 + 2) + 8 * (**((_QWORD **)v148 + 2) != (_QWORD)v148)) = v147;
              *v147 = v148;
              goto LABEL_251;
            }
LABEL_224:
            *((_BYTE *)v147 + 24) = 1;
            v145 = v148;
            v148[24] = v148 == v146;
            *v150 = 1;
            if (v148 == v146)
              goto LABEL_252;
          }
          v152 = *((_QWORD *)v148 + 1);
          if (v152)
          {
            v153 = *(unsigned __int8 *)(v152 + 24);
            v150 = (_BYTE *)(v152 + 24);
            if (!v153)
              goto LABEL_224;
          }
          if (*v147 == v145)
          {
            v154 = (char *)*((_QWORD *)v145 + 2);
          }
          else
          {
            v154 = v147[1];
            v155 = *(char **)v154;
            v147[1] = *(char **)v154;
            if (v155)
            {
              *((_QWORD *)v155 + 2) = v147;
              v148 = v147[2];
            }
            *((_QWORD *)v154 + 2) = v148;
            *(_QWORD *)&v147[2][8 * (*(_QWORD *)v147[2] != (_QWORD)v147)] = v154;
            *(_QWORD *)v154 = v147;
            v147[2] = v154;
            v148 = (char *)*((_QWORD *)v154 + 2);
            v147 = *(char ***)v148;
          }
          v154[24] = 1;
          v148[24] = 0;
          v158 = v147[1];
          *(_QWORD *)v148 = v158;
          if (v158)
            *((_QWORD *)v158 + 2) = v148;
          v147[2] = (char *)*((_QWORD *)v148 + 2);
          *(_QWORD *)(*((_QWORD *)v148 + 2) + 8 * (**((_QWORD **)v148 + 2) != (_QWORD)v148)) = v147;
          v147[1] = v148;
LABEL_251:
          *((_QWORD *)v148 + 2) = v147;
LABEL_252:
          v239[2] = (uint64_t *)((char *)v239[2] + 1);
LABEL_253:
          *((_QWORD *)&v256 + 1) = v140 + 56;
          v159 = sub_207D19294(a1 + 40);
          *(_DWORD *)(a1 + 32) = v159;
          if (v159 != 12)
          {
LABEL_431:
            v231 = *(_QWORD *)(a1 + 72);
            sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
            v249 = *(std::string *)(a1 + 72);
            sub_207C96EE8(&v247, "object separator");
            sub_207D1B67C(&v248, a1, 0xCu, (const void **)&v247.__r_.__value_.__l.__data_);
            sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
            sub_207D1BEE8((uint64_t)&v254, v231, (uint64_t)&v250, (uint64_t)__str);
LABEL_432:
            *(_QWORD *)__str = off_24C072CF8;
            std::runtime_error::~runtime_error(&v267);
            std::exception::~exception((std::exception *)__str);
LABEL_433:
            if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v248.__r_.__value_.__l.__data_);
            if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
            {
              v216 = (void *)v247.__r_.__value_.__r.__words[0];
LABEL_397:
              operator delete(v216);
            }
LABEL_398:
            if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v250.__r_.__value_.__l.__data_);
LABEL_400:
            if (v251.__r_.__value_.__r.__words[0])
              operator delete(v251.__r_.__value_.__l.__data_);
            v217 = sub_207D19294(a1 + 40);
            *(_DWORD *)(a1 + 32) = v217;
            if (v217 == 15)
              goto LABEL_412;
            v218 = *(unsigned __int8 **)(a1 + 96);
            v219 = *(unsigned __int8 **)(a1 + 104);
            memset(&v251, 0, sizeof(v251));
            for (; v218 != v219; ++v218)
            {
              v220 = *v218;
              if (v220 > 0x1F)
              {
                std::string::push_back(&v251, v220);
              }
              else
              {
                LOBYTE(v266) = 0;
                *(_QWORD *)__str = 0;
                snprintf(__str, 9uLL, "<U+%.4X>", v220);
                v221 = strlen(__str);
                std::string::append(&v251, __str, v221);
              }
            }
            v250 = *(std::string *)(a1 + 72);
            *((_BYTE *)&v248.__r_.__value_.__s + 23) = 5;
            strcpy((char *)&v248, "value");
            sub_207D1B67C(&v249, a1, 0xFu, (const void **)&v248.__r_.__value_.__l.__data_);
            sub_207D1B330(101, (uint64_t *)&v250, (uint64_t)&v249, (uint64_t)__str);
            LOBYTE(v257) = 1;
            if (BYTE1(v257))
            {
              exception = __cxa_allocate_exception(0x28uLL);
              *(_QWORD *)exception = off_24C072CF8;
              *((_DWORD *)exception + 2) = v266;
              std::runtime_error::runtime_error((std::runtime_error *)exception + 1, &v267);
              *(_QWORD *)exception = off_24C072DF8;
              *((_QWORD *)exception + 4) = v268;
              __cxa_throw(exception, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
            }
            *(_QWORD *)__str = off_24C072CF8;
            std::runtime_error::~runtime_error(&v267);
            std::exception::~exception((std::exception *)__str);
            if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v249.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_412:
                if (!(_BYTE)v257)
                  goto LABEL_414;
                goto LABEL_413;
              }
            }
            else if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_412;
            }
            operator delete(v251.__r_.__value_.__l.__data_);
            if (!(_BYTE)v257)
              goto LABEL_414;
LABEL_413:
            v222 = *a2;
            *a2 = 9;
            v223 = *((_QWORD *)a2 + 1);
            *((_QWORD *)a2 + 1) = 0;
            v242 = v223;
            sub_207D20660(&v242, v222);
            goto LABEL_414;
          }
          v160 = v251.__r_.__value_.__l.__size_;
          if (v251.__r_.__value_.__l.__size_ == v251.__r_.__value_.__r.__words[2] << 6)
          {
            if ((int64_t)(v251.__r_.__value_.__l.__size_ + 1) < 0)
              sub_207D159B0();
            v161 = v251.__r_.__value_.__r.__words[2] << 7;
            if (v251.__r_.__value_.__r.__words[2] << 7 <= (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64)
              v161 = (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v251.__r_.__value_.__l.__size_ <= 0x3FFFFFFFFFFFFFFELL)
              v162 = v161;
            else
              v162 = 0x7FFFFFFFFFFFFFFFLL;
            sub_207D1C104((uint64_t)&v251, v162);
            v160 = v251.__r_.__value_.__l.__size_;
          }
          v251.__r_.__value_.__l.__size_ = v160 + 1;
          *(_QWORD *)(v251.__r_.__value_.__r.__words[0] + ((v160 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v160);
          *(_DWORD *)(a1 + 32) = sub_207D19294(a1 + 40);
          break;
        case 0xE:
          v207 = *(unsigned __int8 **)(a1 + 96);
          v208 = *(unsigned __int8 **)(a1 + 104);
          memset(&v250, 0, sizeof(v250));
          for (; v207 != v208; ++v207)
          {
            v209 = *v207;
            if (v209 > 0x1F)
            {
              std::string::push_back(&v250, v209);
            }
            else
            {
              LOBYTE(v266) = 0;
              *(_QWORD *)__str = 0;
              snprintf(__str, 9uLL, "<U+%.4X>", v209);
              v210 = strlen(__str);
              std::string::append(&v250, __str, v210);
            }
          }
          v249 = *(std::string *)(a1 + 72);
          *((_BYTE *)&v247.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&v247, "value");
          sub_207D1B67C(&v248, a1, 0, (const void **)&v247.__r_.__value_.__l.__data_);
          sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
          LOBYTE(v257) = 1;
          if (BYTE1(v257))
          {
            v215 = __cxa_allocate_exception(0x28uLL);
            *(_QWORD *)v215 = off_24C072CF8;
            *((_DWORD *)v215 + 2) = v266;
            std::runtime_error::runtime_error((std::runtime_error *)v215 + 1, &v267);
            *(_QWORD *)v215 = off_24C072DF8;
            *((_QWORD *)v215 + 4) = v268;
            __cxa_throw(v215, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
          }
          goto LABEL_395;
        default:
          v211 = *(unsigned __int8 **)(a1 + 96);
          v212 = *(unsigned __int8 **)(a1 + 104);
          memset(&v250, 0, sizeof(v250));
          for (; v211 != v212; ++v211)
          {
            v213 = *v211;
            if (v213 > 0x1F)
            {
              std::string::push_back(&v250, v213);
            }
            else
            {
              LOBYTE(v266) = 0;
              *(_QWORD *)__str = 0;
              snprintf(__str, 9uLL, "<U+%.4X>", v213);
              v214 = strlen(__str);
              std::string::append(&v250, __str, v214);
            }
          }
          v249 = *(std::string *)(a1 + 72);
          *((_BYTE *)&v247.__r_.__value_.__s + 23) = 5;
          strcpy((char *)&v247, "value");
          sub_207D1B67C(&v248, a1, 0x10u, (const void **)&v247.__r_.__value_.__l.__data_);
          sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
          LOBYTE(v257) = 1;
          if (BYTE1(v257))
          {
            v238 = __cxa_allocate_exception(0x28uLL);
            *(_QWORD *)v238 = off_24C072CF8;
            *((_DWORD *)v238 + 2) = v266;
            std::runtime_error::runtime_error((std::runtime_error *)v238 + 1, &v267);
            *(_QWORD *)v238 = off_24C072DF8;
            *((_QWORD *)v238 + 4) = v268;
            __cxa_throw(v238, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
          }
LABEL_395:
          *(_QWORD *)__str = off_24C072CF8;
          std::runtime_error::~runtime_error(&v267);
          std::exception::~exception((std::exception *)__str);
          if ((SHIBYTE(v248.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_398;
          v216 = (void *)v248.__r_.__value_.__r.__words[0];
          goto LABEL_397;
      }
    }
  }
  if (v3 == a1)
  {
    v253 = v252;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v252);
  }
  else
  {
    v253 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  }
  sub_207D1BF3C((uint64_t)&v254, (uint64_t)a2, (uint64_t)v252, *(_BYTE *)(a1 + 184));
  v163 = v253;
  if (v253 == v252)
  {
    v164 = 4;
    v163 = v252;
    goto LABEL_268;
  }
  if (v253)
  {
    v164 = 5;
LABEL_268:
    (*(void (**)(void))(*v163 + 8 * v164))();
  }
  memset(&v251, 0, sizeof(v251));
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        __str[0] = 1;
        sub_207D1EC10(&v254, (unsigned __int8 *)__str, 0);
        goto LABEL_287;
      case 2:
        __str[0] = 0;
        sub_207D1EC10(&v254, (unsigned __int8 *)__str, 0);
        goto LABEL_287;
      case 3:
        *(_QWORD *)__str = 0;
        sub_207D1EE14(&v254, (uint64_t)__str, 0);
        goto LABEL_287;
      case 4:
        sub_207D1F210(&v254, a1 + 120, 0);
        goto LABEL_287;
      case 5:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 160);
        sub_207D1F460(&v254, (uint64_t *)__str, 0);
        goto LABEL_287;
      case 6:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 152);
        sub_207D1F010(&v254, (uint64_t *)__str, 0);
        goto LABEL_287;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v232 = *(_QWORD *)(a1 + 72);
          sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_207D1B23C(&v247, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          sub_207C96E8C("number overflow parsing '", &v247, &v248);
          sub_207C96E30("'", &v248, &v249);
          sub_207D1CEE4(406, (uint64_t)&v249, (uint64_t)__str);
          sub_207D1CE90((uint64_t)&v254, v232, (uint64_t)&v250, (uint64_t)__str);
          *(_QWORD *)__str = off_24C072CF8;
          std::runtime_error::~runtime_error(&v267);
          std::exception::~exception((std::exception *)__str);
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v249.__r_.__value_.__l.__data_);
          goto LABEL_425;
        }
        *(_QWORD *)__str = *(_QWORD *)(a1 + 168);
        sub_207D1EA0C(&v254, (uint64_t *)__str, 0);
        goto LABEL_287;
      case 8:
        if (!sub_207D1CA00((uint64_t)&v254, 0xFFFFFFFFFFFFFFFFLL))
          goto LABEL_352;
        v165 = sub_207D19294(a1 + 40);
        *(_DWORD *)(a1 + 32) = v165;
        if (v165 == 10)
        {
          v166 = sub_207D1CD5C((uint64_t)&v254);
          goto LABEL_281;
        }
        v181 = v251.__r_.__value_.__l.__size_;
        if (v251.__r_.__value_.__l.__size_ == v251.__r_.__value_.__r.__words[2] << 6)
        {
          if ((int64_t)(v251.__r_.__value_.__l.__size_ + 1) < 0)
            sub_207D159B0();
          v182 = v251.__r_.__value_.__r.__words[2] << 7;
          if (v251.__r_.__value_.__r.__words[2] << 7 <= (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64)
            v182 = (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v251.__r_.__value_.__l.__size_ <= 0x3FFFFFFFFFFFFFFELL)
            v183 = v182;
          else
            v183 = 0x7FFFFFFFFFFFFFFFLL;
          sub_207D1C104((uint64_t)&v251, v183);
          v181 = v251.__r_.__value_.__l.__size_;
        }
        v251.__r_.__value_.__l.__size_ = v181 + 1;
        *(_QWORD *)(v251.__r_.__value_.__r.__words[0] + ((v181 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v181;
        continue;
      case 9:
        if ((sub_207D1C204((uint64_t)&v254, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
          goto LABEL_352;
        v167 = sub_207D19294(a1 + 40);
        *(_DWORD *)(a1 + 32) = v167;
        if (v167 == 11)
        {
          v166 = sub_207D1C55C((uint64_t)&v254);
LABEL_281:
          if ((v166 & 1) == 0)
            goto LABEL_352;
LABEL_287:
          v168 = v251.__r_.__value_.__l.__size_;
          if (!v251.__r_.__value_.__l.__size_)
            goto LABEL_352;
          while (1)
          {
            if (((*(_QWORD *)(v251.__r_.__value_.__r.__words[0] + (((v168 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v168 - 1)) & 1) != 0)
            {
              v169 = sub_207D19294(a1 + 40);
              *(_DWORD *)(a1 + 32) = v169;
              if (v169 == 13)
                goto LABEL_309;
              if (v169 != 10)
              {
                v224 = *(_QWORD *)(a1 + 72);
                sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
                v249 = *(std::string *)(a1 + 72);
                sub_207C96EE8(&v247, "array");
                sub_207D1B67C(&v248, a1, 0xAu, (const void **)&v247.__r_.__value_.__l.__data_);
                sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
                sub_207D1B1E8((uint64_t)&v254, v224, (uint64_t)&v250, (uint64_t)__str);
                goto LABEL_424;
              }
              if (*(_QWORD *)(*((_QWORD *)&__p + 1) - 8))
              {
                LODWORD(v250.__r_.__value_.__l.__data_) = ((*((_QWORD *)&__p + 1) - (_QWORD)__p) >> 3) - 1;
                v249.__r_.__value_.__s.__data_[0] = 3;
                if (!v261)
                  sub_207CA408C();
                if (((*(uint64_t (**)(_BYTE *, std::string *, std::string *))(*(_QWORD *)v261 + 48))(v261, &v250, &v249) & 1) != 0)
                {
                  *((_QWORD *)&__p + 1) -= 8;
                  --v257;
                }
                else
                {
                  sub_207D1D968((uint64_t)__str, v263);
                  v171 = *(unsigned __int8 **)(*((_QWORD *)&__p + 1) - 8);
                  v172 = *v171;
                  *v171 = __str[0];
                  __str[0] = v172;
                  v173 = *((_QWORD *)v171 + 1);
                  *((_QWORD *)v171 + 1) = v266;
                  v266 = v173;
                  sub_207D20660(&v266, v172);
                  v174 = *((_QWORD *)&__p + 1);
                  *((_QWORD *)&__p + 1) -= 8;
                  --v257;
                  if ((_QWORD)__p != *((_QWORD *)&__p + 1))
                  {
                    v175 = *(_QWORD *)(v174 - 16);
                    if (*(_BYTE *)v175 == 2)
                    {
                      v176 = *(_QWORD *)(v175 + 8);
                      v177 = *(_QWORD *)(v176 + 8);
                      v178 = *(unsigned __int8 *)(v177 - 16);
                      v177 -= 16;
                      sub_207D20660((uint64_t *)(v177 + 8), v178);
                      *(_QWORD *)(v176 + 8) = v177;
                    }
                  }
                }
              }
              else
              {
                *((_QWORD *)&__p + 1) -= 8;
                --v257;
              }
              goto LABEL_303;
            }
            v170 = sub_207D19294(a1 + 40);
            *(_DWORD *)(a1 + 32) = v170;
            if (v170 == 13)
              break;
            if (v170 != 11)
            {
              v226 = *(_QWORD *)(a1 + 72);
              sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
              v249 = *(std::string *)(a1 + 72);
              sub_207C96EE8(&v247, "object");
              sub_207D1B67C(&v248, a1, 0xBu, (const void **)&v247.__r_.__value_.__l.__data_);
              sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
              sub_207D1B1E8((uint64_t)&v254, v226, (uint64_t)&v250, (uint64_t)__str);
              goto LABEL_424;
            }
            if ((sub_207D1C55C((uint64_t)&v254) & 1) == 0)
              goto LABEL_352;
LABEL_303:
            v168 = --v251.__r_.__value_.__l.__size_;
            if (!v251.__r_.__value_.__l.__size_)
              goto LABEL_352;
          }
          v179 = sub_207D19294(a1 + 40);
          *(_DWORD *)(a1 + 32) = v179;
          if (v179 != 4)
            goto LABEL_422;
          if (!sub_207D1C7E4((uint64_t)&v254, a1 + 120))
            goto LABEL_352;
          v180 = sub_207D19294(a1 + 40);
          *(_DWORD *)(a1 + 32) = v180;
          if (v180 != 12)
            goto LABEL_423;
LABEL_309:
          *(_DWORD *)(a1 + 32) = sub_207D19294(a1 + 40);
          continue;
        }
        if (v167 != 4)
        {
LABEL_422:
          v227 = *(_QWORD *)(a1 + 72);
          sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
          v249 = *(std::string *)(a1 + 72);
          sub_207C96EE8(&v247, "object key");
          sub_207D1B67C(&v248, a1, 4u, (const void **)&v247.__r_.__value_.__l.__data_);
          sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
          sub_207D1B1E8((uint64_t)&v254, v227, (uint64_t)&v250, (uint64_t)__str);
          goto LABEL_424;
        }
        if (!sub_207D1C7E4((uint64_t)&v254, a1 + 120))
          goto LABEL_352;
        v184 = sub_207D19294(a1 + 40);
        *(_DWORD *)(a1 + 32) = v184;
        if (v184 == 12)
        {
          v185 = v251.__r_.__value_.__l.__size_;
          if (v251.__r_.__value_.__l.__size_ == v251.__r_.__value_.__r.__words[2] << 6)
          {
            if ((int64_t)(v251.__r_.__value_.__l.__size_ + 1) < 0)
              sub_207D159B0();
            if (v251.__r_.__value_.__l.__size_ > 0x3FFFFFFFFFFFFFFELL)
            {
              v186 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v251.__r_.__value_.__r.__words[2] << 7 <= (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0)
                                                              + 64)
            {
              v186 = (v251.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              v186 = v251.__r_.__value_.__r.__words[2] << 7;
            }
            sub_207D1C104((uint64_t)&v251, v186);
            v185 = v251.__r_.__value_.__l.__size_;
          }
          v251.__r_.__value_.__l.__size_ = v185 + 1;
          *(_QWORD *)(v251.__r_.__value_.__r.__words[0] + ((v185 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v185);
          *(_DWORD *)(a1 + 32) = sub_207D19294(a1 + 40);
          continue;
        }
LABEL_423:
        v228 = *(_QWORD *)(a1 + 72);
        sub_207D1B23C(&v250, *(unsigned __int8 **)(a1 + 96), *(unsigned __int8 **)(a1 + 104));
        v249 = *(std::string *)(a1 + 72);
        sub_207C96EE8(&v247, "object separator");
        sub_207D1B67C(&v248, a1, 0xCu, (const void **)&v247.__r_.__value_.__l.__data_);
        sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
        sub_207D1B1E8((uint64_t)&v254, v228, (uint64_t)&v250, (uint64_t)__str);
LABEL_424:
        *(_QWORD *)__str = off_24C072CF8;
        std::runtime_error::~runtime_error(&v267);
        std::exception::~exception((std::exception *)__str);
LABEL_425:
        if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v248.__r_.__value_.__l.__data_);
        if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
        {
          v195 = (void *)v247.__r_.__value_.__r.__words[0];
LABEL_349:
          operator delete(v195);
        }
LABEL_350:
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v250.__r_.__value_.__l.__data_);
LABEL_352:
        if (v251.__r_.__value_.__r.__words[0])
          operator delete(v251.__r_.__value_.__l.__data_);
        v196 = sub_207D19294(a1 + 40);
        *(_DWORD *)(a1 + 32) = v196;
        if (v196 == 15)
          goto LABEL_364;
        v197 = *(unsigned __int8 **)(a1 + 96);
        v198 = *(unsigned __int8 **)(a1 + 104);
        memset(&v251, 0, sizeof(v251));
        for (; v197 != v198; ++v197)
        {
          v199 = *v197;
          if (v199 > 0x1F)
          {
            std::string::push_back(&v251, v199);
          }
          else
          {
            LOBYTE(v266) = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v199);
            v200 = strlen(__str);
            std::string::append(&v251, __str, v200);
          }
        }
        v250 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v248.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v248, "value");
        sub_207D1B67C(&v249, a1, 0xFu, (const void **)&v248.__r_.__value_.__l.__data_);
        sub_207D1B330(101, (uint64_t *)&v250, (uint64_t)&v249, (uint64_t)__str);
        v259 = 1;
        if (v262)
        {
          v234 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v234 = off_24C072CF8;
          *((_DWORD *)v234 + 2) = v266;
          std::runtime_error::runtime_error((std::runtime_error *)v234 + 1, &v267);
          *(_QWORD *)v234 = off_24C072DF8;
          *((_QWORD *)v234 + 4) = v268;
          __cxa_throw(v234, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
        }
        *(_QWORD *)__str = off_24C072CF8;
        std::runtime_error::~runtime_error(&v267);
        std::exception::~exception((std::exception *)__str);
        if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v249.__r_.__value_.__l.__data_);
          if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_367;
LABEL_364:
          if (!v259)
            goto LABEL_368;
          goto LABEL_365;
        }
        if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_364;
LABEL_367:
        operator delete(v251.__r_.__value_.__l.__data_);
        if (v259)
        {
LABEL_365:
          v201 = &v246;
          v202 = *a2;
          *a2 = 9;
          v245 = v202;
          v203 = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = 0;
          v246 = v203;
          goto LABEL_370;
        }
LABEL_368:
        if (*a2 == 9)
        {
          v201 = &v244;
          *a2 = 0;
          v243 = 9;
          v204 = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = 0;
          v244 = v204;
          v202 = 9;
LABEL_370:
          sub_207D20660(v201, v202);
        }
        sub_207D20660(&v264, v263[0]);
        v205 = v261;
        if (v261 == v260)
        {
          v206 = 4;
          v205 = v260;
LABEL_375:
          (*(void (**)(void))(*v205 + 8 * v206))();
        }
        else if (v261)
        {
          v206 = 5;
          goto LABEL_375;
        }
        if (v258)
          operator delete(v258);
        if (*((_QWORD *)&v256 + 1))
          operator delete(*((void **)&v256 + 1));
LABEL_414:
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        return;
      case 0xE:
        v187 = *(unsigned __int8 **)(a1 + 96);
        v188 = *(unsigned __int8 **)(a1 + 104);
        memset(&v250, 0, sizeof(v250));
        for (; v187 != v188; ++v187)
        {
          v189 = *v187;
          if (v189 > 0x1F)
          {
            std::string::push_back(&v250, v189);
          }
          else
          {
            LOBYTE(v266) = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v189);
            v190 = strlen(__str);
            std::string::append(&v250, __str, v190);
          }
        }
        v249 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v247.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v247, "value");
        sub_207D1B67C(&v248, a1, 0, (const void **)&v247.__r_.__value_.__l.__data_);
        sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
        v259 = 1;
        if (v262)
        {
          v236 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v236 = off_24C072CF8;
          *((_DWORD *)v236 + 2) = v266;
          std::runtime_error::runtime_error((std::runtime_error *)v236 + 1, &v267);
          *(_QWORD *)v236 = off_24C072DF8;
          *((_QWORD *)v236 + 4) = v268;
          __cxa_throw(v236, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
        }
        *(_QWORD *)__str = off_24C072CF8;
        goto LABEL_347;
      default:
        v191 = *(unsigned __int8 **)(a1 + 96);
        v192 = *(unsigned __int8 **)(a1 + 104);
        memset(&v250, 0, sizeof(v250));
        for (; v191 != v192; ++v191)
        {
          v193 = *v191;
          if (v193 > 0x1F)
          {
            std::string::push_back(&v250, v193);
          }
          else
          {
            LOBYTE(v266) = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v193);
            v194 = strlen(__str);
            std::string::append(&v250, __str, v194);
          }
        }
        v249 = *(std::string *)(a1 + 72);
        *((_BYTE *)&v247.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v247, "value");
        sub_207D1B67C(&v248, a1, 0x10u, (const void **)&v247.__r_.__value_.__l.__data_);
        sub_207D1B330(101, (uint64_t *)&v249, (uint64_t)&v248, (uint64_t)__str);
        v259 = 1;
        if (v262)
        {
          v237 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v237 = off_24C072CF8;
          *((_DWORD *)v237 + 2) = v266;
          std::runtime_error::runtime_error((std::runtime_error *)v237 + 1, &v267);
          *(_QWORD *)v237 = off_24C072DF8;
          *((_QWORD *)v237 + 4) = v268;
          __cxa_throw(v237, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
        }
        *(_QWORD *)__str = off_24C072CF8;
LABEL_347:
        std::runtime_error::~runtime_error(&v267);
        std::exception::~exception((std::exception *)__str);
        if ((SHIBYTE(v248.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_350;
        v195 = (void *)v248.__r_.__value_.__r.__words[0];
        goto LABEL_349;
    }
  }
}

void sub_207D188C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,void *a60,uint64_t a61)
{
  std::runtime_error *v61;
  uint64_t v62;

  *(_QWORD *)(v62 - 144) = off_24C072CF8;
  std::runtime_error::~runtime_error(v61 + 1);
  std::exception::~exception((std::exception *)(v62 - 144));
  if (a34 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a47 < 0)
    operator delete(a42);
  if (a49)
    operator delete(a49);
  if (!a60)
    _Unwind_Resume(a1);
  operator delete(a60);
  _Unwind_Resume(a1);
}

void sub_207D18D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a37)
    operator delete(a37);
  sub_207D1BE64(&a44);
  _Unwind_Resume(a1);
}

uint64_t sub_207D18D64(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 40);
  if (v3)
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 2);
  v4 = *(_QWORD **)(a1 + 24);
  if (v4 == (_QWORD *)a1)
  {
    v5 = 4;
    v4 = (_QWORD *)a1;
    goto LABEL_11;
  }
  if (v4)
  {
    v5 = 5;
LABEL_11:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

_QWORD *sub_207D18DF4(_QWORD *a1)
{
  if (*a1)
    std::ios_base::clear((std::ios_base *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24)), *(_DWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 2);
  return a1;
}

_BYTE *sub_207D18E38(_BYTE *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  _QWORD *v6;

  v2 = result;
  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      *v2 = v3;
      result = v2;
      break;
    case 2:
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      *v2 = v4;
      result = v2;
      break;
    case 3:
      v5 = operator new(0x18uLL);
      v5[23] = 0;
      *v5 = 0;
      *v2 = v5;
      result = v2;
      break;
    case 4:
      *result = 0;
      break;
    case 8:
      v6 = operator new(0x20uLL);
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      *((_WORD *)v6 + 12) = 0;
      *v2 = v6;
      result = v2;
      break;
    default:
      *(_QWORD *)result = 0;
      break;
  }
  return result;
}

void sub_207D18F30(const void **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string::value_type *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  const void *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v6 = v5 + 16;
  if (v5 + 16 >= 0x7FFFFFFFFFFFFFF8)
    sub_207C95C50();
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    v9 = (std::string::value_type *)(v12 + 1);
    v22.__r_.__value_.__l.__size_ = v5 + 16;
    v22.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    *v12 = *(_OWORD *)"[json.exception.";
  }
  else
  {
    v9 = &v22.__r_.__value_.__s.__data_[16];
    v22.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v5 + 16;
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)"[json.exception.";
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v13 = a1;
  else
    v13 = *a1;
  memmove(v9, v13, v5);
LABEL_15:
  v9[v5] = 0;
  v14 = std::string::append(&v22, ".", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v21, a2);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v21;
  else
    v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v23, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v24, "] ", 2uLL);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(v22.__r_.__value_.__l.__data_);
    return;
  }
LABEL_28:
  operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
}

void sub_207D19128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

const char *sub_207D191C4(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_207D191CC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_207D191FC(std::runtime_error *a1)
{
  void *v2;

  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

uint64_t sub_207D19230(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(_QWORD *)a1)
    std::ios_base::clear((std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)), *(_DWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24) + 32) & 2);
  return a1;
}

uint64_t sub_207D19294(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v12;
  uint64_t result;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  _BYTE *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  size_t v26;
  char *v27;
  char *v28;
  int v29;
  _QWORD *v30;
  unsigned __int8 *v31;
  int v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  __int128 *v45;
  unint64_t v46;
  __int128 v47;
  char *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  int v54;
  int v55;
  char *v56;
  uint64_t v57;
  size_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  std::ios_base *v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  _BYTE *v68;
  unint64_t v69;
  _BYTE *v70;
  unint64_t v71;
  uint64_t v72;
  size_t v73;
  _BYTE *v74;
  void **v75;
  size_t v76;
  char *v77;
  char *v78;
  int v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  int v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  size_t v90;
  char *v91;
  char *v92;
  unint64_t v93;
  char *v94;
  __int128 *v95;
  unint64_t v96;
  __int128 v97;
  char *v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char v103;
  int v104;
  int v105;
  uint64_t v106;
  size_t v107;
  char *v108;
  char *v109;
  int v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  size_t v118;
  char *v119;
  char *v120;
  _QWORD *v121;
  unsigned __int8 *v122;
  unint64_t v123;
  int v124;
  int v125;
  char *v126;
  __int128 *v127;
  unint64_t v128;
  __int128 v129;
  char *v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char v135;
  uint64_t v136;
  char **v137;
  int v138;
  void *v139;
  uint64_t v140;
  size_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  std::ios_base *v145;
  _QWORD *v146;
  unsigned __int8 *v147;
  unint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  size_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  int v159;
  char *v160;
  __int128 *v161;
  unint64_t v162;
  __int128 v163;
  char *v164;
  uint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  std::string::value_type v170;
  char *v171;
  char v172;
  int v173;
  void *v174;
  uint64_t v175;
  size_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  std::ios_base *v183;
  std::ios_base *v184;
  uint64_t v185;
  int v186;
  int v187;
  _QWORD *v188;
  uint64_t v189;
  const char *v190;
  unint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int64x2_t v196;
  int64x2_t v197;
  char *__endptr[2];
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 32))
  {
    if (sub_207D1ADA4((int64x2_t *)a1) == 239)
    {
      if (sub_207D1ADA4((int64x2_t *)a1) != 187 || sub_207D1ADA4((int64x2_t *)a1) != 191)
      {
        v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
        goto LABEL_35;
      }
    }
    else
    {
      v3 = (_QWORD *)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(a1 + 24) = 1;
      --*(_QWORD *)(a1 + 32);
      if (v4 || (v3 = (_QWORD *)(a1 + 48), (v4 = *(_QWORD *)(a1 + 48)) != 0))
        *v3 = v4 - 1;
      if (*(_DWORD *)(a1 + 20) != -1)
        --*(_QWORD *)(a1 + 64);
    }
  }
  sub_207D1AB04((int64x2_t *)a1);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = (uint64_t *)(a1 + 48);
    while (1)
    {
      if (*(_DWORD *)(a1 + 20) != 47)
        goto LABEL_30;
      v6 = sub_207D1ADA4((int64x2_t *)a1);
      if (v6 != 47)
        break;
      do
        v10 = sub_207D1ADA4((int64x2_t *)a1);
      while ((v10 + 1) > 0xE || ((1 << (v10 + 1)) & 0x4803) == 0);
LABEL_29:
      sub_207D1AB04((int64x2_t *)a1);
      if (!*(_BYTE *)(a1 + 16))
        goto LABEL_30;
    }
    if (v6 == 42)
    {
      do
      {
        while (1)
        {
          v7 = sub_207D1ADA4((int64x2_t *)a1);
          if (v7 != 42)
            break;
          if (sub_207D1ADA4((int64x2_t *)a1) == 47)
            goto LABEL_29;
          *(_BYTE *)(a1 + 24) = 1;
          v8 = *(_QWORD *)(a1 + 40);
          --*(_QWORD *)(a1 + 32);
          v9 = (_QWORD *)(a1 + 40);
          if (v8 || (v8 = *v5, v9 = (_QWORD *)(a1 + 48), *v5))
            *v9 = v8 - 1;
          if (*(_DWORD *)(a1 + 20) != -1)
            --*(_QWORD *)(a1 + 64);
        }
      }
      while ((v7 + 1) >= 2);
      v2 = "invalid comment; missing closing '*/'";
    }
    else
    {
      v2 = "invalid comment; expecting '/' or '*' after '/'";
    }
LABEL_35:
    *(_QWORD *)(a1 + 104) = v2;
    return 14;
  }
LABEL_30:
  v12 = *(_DWORD *)(a1 + 20);
  result = 8;
  switch(v12)
  {
    case -1:
    case 0:
      return 15;
    case 34:
      if (*(char *)(a1 + 103) < 0)
      {
        **(_BYTE **)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v66 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        *(_BYTE *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 103) = 0;
        LOBYTE(v66) = 34;
      }
      v67 = (_QWORD *)(a1 + 56);
      v68 = *(_BYTE **)(a1 + 56);
      *(_QWORD *)(a1 + 64) = v68;
      v69 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v68 >= v69)
      {
        v71 = v69 - (_QWORD)v68;
        v72 = 2 * v71;
        if (2 * v71 <= 1)
          v72 = 1;
        if (v71 >= 0x3FFFFFFFFFFFFFFFLL)
          v73 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        v74 = operator new(v73);
        *v74 = v66;
        v70 = v74 + 1;
        *(_QWORD *)(a1 + 56) = v74;
        *(_QWORD *)(a1 + 64) = v74 + 1;
        *(_QWORD *)(a1 + 72) = &v74[v73];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *v68 = v66;
        v70 = v68 + 1;
      }
      v75 = (void **)(a1 + 80);
      *(_QWORD *)(a1 + 64) = v70;
      v197 = vdupq_n_s64(1uLL);
      while (2)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v197);
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v79 = *(_DWORD *)(a1 + 20);
          if (v79 == -1)
            goto LABEL_402;
        }
        else
        {
          v80 = *(_QWORD **)(a1 + 8);
          v81 = (unsigned __int8 *)v80[3];
          if (v81 == (unsigned __int8 *)v80[4])
          {
            v82 = (*(uint64_t (**)(_QWORD *))(*v80 + 80))(v80);
            LOBYTE(v79) = v82;
            if (v82 == -1)
            {
              v183 = (std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24));
              std::ios_base::clear(v183, v183->__rdstate_ | 2);
              *(_DWORD *)(a1 + 20) = -1;
LABEL_402:
              v2 = "invalid string: missing closing quote";
              goto LABEL_35;
            }
            *(_DWORD *)(a1 + 20) = v82;
          }
          else
          {
            v80[3] = v81 + 1;
            v79 = *v81;
            *(_DWORD *)(a1 + 20) = v79;
          }
        }
        v84 = *(_BYTE **)(a1 + 64);
        v83 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v84 < v83)
        {
          *v84 = v79;
          v85 = (uint64_t)(v84 + 1);
          goto LABEL_200;
        }
        v86 = (_BYTE *)*v67;
        v87 = (unint64_t)&v84[-*v67];
        v88 = v87 + 1;
        if ((uint64_t)(v87 + 1) < 0)
          goto LABEL_438;
        v89 = v83 - (_QWORD)v86;
        if (2 * v89 > v88)
          v88 = 2 * v89;
        if (v89 >= 0x3FFFFFFFFFFFFFFFLL)
          v90 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          v91 = (char *)operator new(v90);
          v92 = &v91[v87];
          v91[v87] = v79;
          v85 = (uint64_t)&v91[v87 + 1];
          if (v84 == v86)
          {
LABEL_198:
            *(_QWORD *)(a1 + 56) = v92;
            *(_QWORD *)(a1 + 64) = v85;
            *(_QWORD *)(a1 + 72) = &v91[v90];
            if (v84)
              operator delete(v84);
LABEL_200:
            *(_QWORD *)(a1 + 64) = v85;
            v104 = *(_DWORD *)(a1 + 20);
            if (v104 == 10)
            {
              v185 = *(_QWORD *)(a1 + 48) + 1;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 48) = v185;
              v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
              goto LABEL_35;
            }
            switch(v104)
            {
              case -1:
                goto LABEL_402;
              case 0:
                v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
                goto LABEL_35;
              case 1:
                v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
                goto LABEL_35;
              case 2:
                v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
                goto LABEL_35;
              case 3:
                v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
                goto LABEL_35;
              case 4:
                v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
                goto LABEL_35;
              case 5:
                v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
                goto LABEL_35;
              case 6:
                v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
                goto LABEL_35;
              case 7:
                v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
                goto LABEL_35;
              case 8:
                v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
                goto LABEL_35;
              case 9:
                v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
                goto LABEL_35;
              case 11:
                v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
                goto LABEL_35;
              case 12:
                v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
                goto LABEL_35;
              case 13:
                v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
                goto LABEL_35;
              case 14:
                v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
                goto LABEL_35;
              case 15:
                v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
                goto LABEL_35;
              case 16:
                v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
                goto LABEL_35;
              case 17:
                v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
                goto LABEL_35;
              case 18:
                v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
                goto LABEL_35;
              case 19:
                v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
                goto LABEL_35;
              case 20:
                v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
                goto LABEL_35;
              case 21:
                v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
                goto LABEL_35;
              case 22:
                v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
                goto LABEL_35;
              case 23:
                v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
                goto LABEL_35;
              case 24:
                v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
                goto LABEL_35;
              case 25:
                v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
                goto LABEL_35;
              case 26:
                v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
                goto LABEL_35;
              case 27:
                v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
                goto LABEL_35;
              case 28:
                v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
                goto LABEL_35;
              case 29:
                v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
                goto LABEL_35;
              case 30:
                v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
                goto LABEL_35;
              case 31:
                v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
                goto LABEL_35;
              case 32:
              case 33:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
              case 114:
              case 115:
              case 116:
              case 117:
              case 118:
              case 119:
              case 120:
              case 121:
              case 122:
              case 123:
              case 124:
              case 125:
              case 126:
              case 127:
                goto LABEL_322;
              case 34:
                return 4;
              case 92:
                switch(sub_207D1ADA4((int64x2_t *)a1))
                {
                  case '"':
                    std::string::push_back((std::string *)(a1 + 80), 34);
                    continue;
                  case '/':
                    std::string::push_back((std::string *)(a1 + 80), 47);
                    continue;
                  case '\\':
                    std::string::push_back((std::string *)(a1 + 80), 92);
                    continue;
                  case 'b':
                    std::string::push_back((std::string *)(a1 + 80), 8);
                    continue;
                  case 'f':
                    std::string::push_back((std::string *)(a1 + 80), 12);
                    continue;
                  case 'n':
                    std::string::push_back((std::string *)(a1 + 80), 10);
                    continue;
                  case 'r':
                    std::string::push_back((std::string *)(a1 + 80), 13);
                    continue;
                  case 't':
                    std::string::push_back((std::string *)(a1 + 80), 9);
                    continue;
                  case 'u':
                    v180 = sub_207D1B03C((int64x2_t *)a1);
                    if (v180 == -1)
                      goto LABEL_440;
                    v181 = v180;
                    if ((v180 & 0xFFFFFC00) == 0xD800)
                    {
                      if (sub_207D1ADA4((int64x2_t *)a1) != 92
                        || sub_207D1ADA4((int64x2_t *)a1) != 117)
                      {
                        goto LABEL_441;
                      }
                      v182 = sub_207D1B03C((int64x2_t *)a1);
                      if (v182 == -1)
                      {
LABEL_440:
                        v2 = "invalid string: '\\u' must be followed by 4 hex digits";
                        goto LABEL_35;
                      }
                      if (v182 >> 10 != 55)
                      {
LABEL_441:
                        v2 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                        goto LABEL_35;
                      }
                      v181 = v182 + (v181 << 10) - 56613888;
                      goto LABEL_356;
                    }
                    if ((v180 & 0xFFFFFC00) == 0xDC00)
                    {
                      v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                      goto LABEL_35;
                    }
                    if ((int)v180 > 127)
                    {
                      if (v180 > 0x7FF)
                      {
                        if (!HIWORD(v180))
                        {
                          std::string::push_back((std::string *)(a1 + 80), (v180 >> 12) | 0xE0);
                          goto LABEL_357;
                        }
LABEL_356:
                        std::string::push_back((std::string *)(a1 + 80), (v181 >> 18) | 0xF0);
                        std::string::push_back((std::string *)(a1 + 80), (v181 >> 12) & 0x3F | 0x80);
LABEL_357:
                        std::string::push_back((std::string *)(a1 + 80), (v181 >> 6) & 0x3F | 0x80);
                        std::string::push_back((std::string *)(a1 + 80), v181 & 0x3F | 0x80);
                        continue;
                      }
                      std::string::push_back((std::string *)(a1 + 80), (v180 >> 6) | 0xC0);
                      v170 = v181 & 0x3F | 0x80;
                    }
                    else
                    {
                      v170 = v180;
                    }
LABEL_313:
                    std::string::push_back((std::string *)(a1 + 80), v170);
                    continue;
                  default:
                    v2 = "invalid string: forbidden character after backslash";
                    goto LABEL_35;
                }
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
              case 201:
              case 202:
              case 203:
              case 204:
              case 205:
              case 206:
              case 207:
              case 208:
              case 209:
              case 210:
              case 211:
              case 212:
              case 213:
              case 214:
              case 215:
              case 216:
              case 217:
              case 218:
              case 219:
              case 220:
              case 221:
              case 222:
              case 223:
                std::string::push_back((std::string *)(a1 + 80), v104);
                *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                if (*(_BYTE *)(a1 + 24))
                {
                  *(_BYTE *)(a1 + 24) = 0;
                  v105 = *(_DWORD *)(a1 + 20);
                }
                else
                {
                  v146 = *(_QWORD **)(a1 + 8);
                  v147 = (unsigned __int8 *)v146[3];
                  if (v147 == (unsigned __int8 *)v146[4])
                  {
                    v105 = (*(uint64_t (**)(_QWORD *))(*v146 + 80))(v146);
                    if (v105 == -1)
                    {
                      v184 = (std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24));
                      std::ios_base::clear(v184, v184->__rdstate_ | 2);
                    }
                  }
                  else
                  {
                    v146[3] = v147 + 1;
                    v105 = *v147;
                  }
                  *(_DWORD *)(a1 + 20) = v105;
                }
                if (v105 == -1)
                  goto LABEL_401;
                v149 = *(_BYTE **)(a1 + 64);
                v148 = *(_QWORD *)(a1 + 72);
                if ((unint64_t)v149 < v148)
                {
                  *v149 = v105;
                  v150 = (uint64_t)(v149 + 1);
                  goto LABEL_320;
                }
                v151 = (_BYTE *)*v67;
                v152 = (unint64_t)&v149[-*v67];
                v153 = v152 + 1;
                if ((uint64_t)(v152 + 1) < 0)
                  goto LABEL_438;
                v154 = v148 - (_QWORD)v151;
                if (2 * v154 > v153)
                  v153 = 2 * v154;
                if (v154 >= 0x3FFFFFFFFFFFFFFFLL)
                  v155 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v155 = v153;
                if (v155)
                  v156 = (char *)operator new(v155);
                else
                  v156 = 0;
                v157 = &v156[v152];
                v156[v152] = v105;
                v150 = (uint64_t)&v156[v152 + 1];
                if (v149 == v151)
                  goto LABEL_318;
                if (v152 < 8 || (unint64_t)(v151 - v156) < 0x20)
                  goto LABEL_315;
                if (v152 >= 0x20)
                {
                  v158 = v152 & 0xFFFFFFFFFFFFFFE0;
                  v160 = &v156[v152 - 16];
                  v161 = (__int128 *)(v149 - 16);
                  v162 = v152 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v163 = *v161;
                    *((_OWORD *)v160 - 1) = *(v161 - 1);
                    *(_OWORD *)v160 = v163;
                    v160 -= 32;
                    v161 -= 2;
                    v162 -= 32;
                  }
                  while (v162);
                  if (v152 == v158)
                    goto LABEL_317;
                  if ((v152 & 0x18) == 0)
                  {
                    v157 -= v158;
                    v149 -= v158;
LABEL_315:
                    v171 = v157 - 1;
                    do
                    {
                      v172 = *--v149;
                      *v171-- = v172;
                    }
                    while (v149 != v151);
LABEL_317:
                    v149 = (_BYTE *)*v67;
                    v157 = v156;
LABEL_318:
                    *(_QWORD *)(a1 + 56) = v157;
                    *(_QWORD *)(a1 + 64) = v150;
                    *(_QWORD *)(a1 + 72) = &v156[v155];
                    if (v149)
                      operator delete(v149);
LABEL_320:
                    *(_QWORD *)(a1 + 64) = v150;
                    v104 = *(_DWORD *)(a1 + 20);
                    if (v104 == 10)
                    {
                      v194 = *(_QWORD *)(a1 + 48) + 1;
                      *(_QWORD *)(a1 + 40) = 0;
                      *(_QWORD *)(a1 + 48) = v194;
                    }
                    else if ((v104 - 192) >= 0xFFFFFFC0)
                    {
LABEL_322:
                      v173 = *(char *)(a1 + 103);
                      if ((v173 & 0x80000000) == 0)
                      {
                        if (*(_BYTE *)(a1 + 103) != 22)
                        {
                          v76 = *(unsigned __int8 *)(a1 + 103);
                          *(_BYTE *)(a1 + 103) = (v173 + 1) & 0x7F;
                          v77 = (char *)(a1 + 80);
LABEL_162:
                          v78 = &v77[v76];
                          *v78 = v104;
                          v78[1] = 0;
                          continue;
                        }
                        v76 = 22;
                        v174 = (void *)(a1 + 80);
                        goto LABEL_328;
                      }
                      v175 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                      v76 = v175 - 1;
                      if (*(_QWORD *)(a1 + 88) != v175 - 1)
                      {
                        v77 = (char *)*v75;
                        v76 = *(_QWORD *)(a1 + 88);
LABEL_341:
                        *(_QWORD *)(a1 + 88) = v76 + 1;
                        goto LABEL_162;
                      }
                      if (v175 != 0x7FFFFFFFFFFFFFF8)
                      {
                        v174 = *v75;
                        v176 = 0x7FFFFFFFFFFFFFF7;
                        if (v76 >= 0x3FFFFFFFFFFFFFF3)
                        {
LABEL_336:
                          v179 = (char *)operator new(v176);
                          v77 = v179;
                          if (!v76 || (memmove(v179, v174, v76), v76 != 22))
                            operator delete(v174);
                          *(_QWORD *)(a1 + 80) = v77;
                          *(_QWORD *)(a1 + 96) = v176 | 0x8000000000000000;
                          goto LABEL_341;
                        }
LABEL_328:
                        if (v76 + 1 > 2 * v76)
                          v177 = v76 + 1;
                        else
                          v177 = 2 * v76;
                        v178 = (v177 & 0x7FFFFFFFFFFFFFF8) + 8;
                        if ((v177 | 7) != 0x17)
                          v178 = v177 | 7;
                        if (v177 >= 0x17)
                          v176 = v178 + 1;
                        else
                          v176 = 23;
                        goto LABEL_336;
                      }
LABEL_439:
                      sub_207C95C50();
                    }
LABEL_401:
                    v2 = "invalid string: ill-formed UTF-8 byte";
                    goto LABEL_35;
                  }
                }
                else
                {
                  v158 = 0;
                }
                v157 -= v152 & 0xFFFFFFFFFFFFFFF8;
                v164 = &v156[&v149[-v158] - v151 - 8];
                v165 = (uint64_t *)&v149[-v158 - 8];
                v166 = v158 - (v152 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v167 = *v165--;
                  *(_QWORD *)v164 = v167;
                  v164 -= 8;
                  v166 += 8;
                }
                while (v166);
                v149 -= v152 & 0xFFFFFFFFFFFFFFF8;
                if (v152 == (v152 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_317;
                goto LABEL_315;
              case 224:
                std::string::push_back((std::string *)(a1 + 80), -32);
                sub_207D1ADA4((int64x2_t *)a1);
                v168 = *(_DWORD *)(a1 + 20);
                v169 = v168 - 192;
                goto LABEL_305;
              case 225:
              case 226:
              case 227:
              case 228:
              case 229:
              case 230:
              case 231:
              case 232:
              case 233:
              case 234:
              case 235:
              case 236:
              case 238:
              case 239:
                *(_OWORD *)__endptr = xmmword_208233360;
                std::string::push_back((std::string *)(a1 + 80), v104);
                v106 = 0;
LABEL_207:
                *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), vdupq_n_s64(1uLL));
                if (*(_BYTE *)(a1 + 24))
                {
                  *(_BYTE *)(a1 + 24) = 0;
                  v110 = *(_DWORD *)(a1 + 20);
                  if (v110 != -1)
                    goto LABEL_209;
LABEL_229:
                  v125 = -1;
                  goto LABEL_246;
                }
                v121 = *(_QWORD **)(a1 + 8);
                v122 = (unsigned __int8 *)v121[3];
                if (v122 == (unsigned __int8 *)v121[4])
                {
                  v124 = (*(uint64_t (**)(_QWORD *))(*v121 + 80))(v121);
                  LOBYTE(v110) = v124;
                  if (v124 == -1)
                  {
                    v145 = (std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24));
                    std::ios_base::clear(v145, v145->__rdstate_ | 2);
                    *(_DWORD *)(a1 + 20) = -1;
                    goto LABEL_229;
                  }
                  *(_DWORD *)(a1 + 20) = v124;
                }
                else
                {
                  v121[3] = v122 + 1;
                  v110 = *v122;
                  *(_DWORD *)(a1 + 20) = v110;
                }
LABEL_209:
                v112 = *(_BYTE **)(a1 + 64);
                v111 = *(_QWORD *)(a1 + 72);
                if ((unint64_t)v112 < v111)
                {
                  *v112 = v110;
                  v113 = (uint64_t)(v112 + 1);
LABEL_244:
                  *(_QWORD *)(a1 + 64) = v113;
                  v125 = *(_DWORD *)(a1 + 20);
                  if (v125 == 10)
                  {
                    v136 = *(_QWORD *)(a1 + 48) + 1;
                    *(_QWORD *)(a1 + 40) = 0;
                    *(_QWORD *)(a1 + 48) = v136;
                  }
LABEL_246:
                  v137 = &__endptr[v106];
                  if (*(_DWORD *)v137 > v125 || v125 > *((_DWORD *)v137 + 1))
                    goto LABEL_401;
                  v138 = *(char *)(a1 + 103);
                  if (v138 < 0)
                  {
                    v140 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
                    v107 = v140 - 1;
                    if (*(_QWORD *)(a1 + 88) != v140 - 1)
                    {
                      v108 = (char *)*v75;
                      v107 = *(_QWORD *)(a1 + 88);
LABEL_267:
                      *(_QWORD *)(a1 + 88) = v107 + 1;
LABEL_206:
                      v109 = &v108[v107];
                      *v109 = v125;
                      v109[1] = 0;
                      if (++v106 == 2)
                        continue;
                      goto LABEL_207;
                    }
                    if (v140 == 0x7FFFFFFFFFFFFFF8)
                      goto LABEL_439;
                    v139 = *v75;
                    v141 = 0x7FFFFFFFFFFFFFF7;
                    if (v107 >= 0x3FFFFFFFFFFFFFF3)
                    {
LABEL_262:
                      v144 = (char *)operator new(v141);
                      v108 = v144;
                      if (!v107 || (memmove(v144, v139, v107), v107 != 22))
                        operator delete(v139);
                      *(_QWORD *)(a1 + 80) = v108;
                      *(_QWORD *)(a1 + 96) = v141 | 0x8000000000000000;
                      goto LABEL_267;
                    }
                  }
                  else
                  {
                    if (*(_BYTE *)(a1 + 103) != 22)
                    {
                      v107 = *(unsigned __int8 *)(a1 + 103);
                      *(_BYTE *)(a1 + 103) = (v138 + 1) & 0x7F;
                      v108 = (char *)(a1 + 80);
                      goto LABEL_206;
                    }
                    v107 = 22;
                    v139 = (void *)(a1 + 80);
                  }
                  if (v107 + 1 > 2 * v107)
                    v142 = v107 + 1;
                  else
                    v142 = 2 * v107;
                  v143 = (v142 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v142 | 7) != 0x17)
                    v143 = v142 | 7;
                  if (v142 >= 0x17)
                    v141 = v143 + 1;
                  else
                    v141 = 23;
                  goto LABEL_262;
                }
                v114 = (_BYTE *)*v67;
                v115 = (unint64_t)&v112[-*v67];
                v116 = v115 + 1;
                if ((uint64_t)(v115 + 1) >= 0)
                {
                  v117 = v111 - (_QWORD)v114;
                  if (2 * v117 > v116)
                    v116 = 2 * v117;
                  if (v117 >= 0x3FFFFFFFFFFFFFFFLL)
                    v118 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v118 = v116;
                  if (v118)
                  {
                    v119 = (char *)operator new(v118);
                    v120 = &v119[v115];
                    v119[v115] = v110;
                    v113 = (uint64_t)&v119[v115 + 1];
                    if (v112 == v114)
                    {
LABEL_242:
                      *(_QWORD *)(a1 + 56) = v120;
                      *(_QWORD *)(a1 + 64) = v113;
                      *(_QWORD *)(a1 + 72) = &v119[v118];
                      if (v112)
                        operator delete(v112);
                      goto LABEL_244;
                    }
                  }
                  else
                  {
                    v119 = 0;
                    v120 = &v112[-*v67];
                    *(_BYTE *)v115 = v110;
                    v113 = v115 + 1;
                    if (v112 == v114)
                      goto LABEL_242;
                  }
                  if (v115 >= 8 && (unint64_t)(v114 - v119) >= 0x20)
                  {
                    if (v115 < 0x20)
                    {
                      v123 = 0;
                      goto LABEL_234;
                    }
                    v123 = v115 & 0xFFFFFFFFFFFFFFE0;
                    v126 = &v119[v115 - 16];
                    v127 = (__int128 *)(v112 - 16);
                    v128 = v115 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v129 = *v127;
                      *((_OWORD *)v126 - 1) = *(v127 - 1);
                      *(_OWORD *)v126 = v129;
                      v126 -= 32;
                      v127 -= 2;
                      v128 -= 32;
                    }
                    while (v128);
                    if (v115 == v123)
                      goto LABEL_241;
                    if ((v115 & 0x18) != 0)
                    {
LABEL_234:
                      v120 -= v115 & 0xFFFFFFFFFFFFFFF8;
                      v130 = &v119[&v112[-v123] - v114 - 8];
                      v131 = (uint64_t *)&v112[-v123 - 8];
                      v132 = v123 - (v115 & 0xFFFFFFFFFFFFFFF8);
                      do
                      {
                        v133 = *v131--;
                        *(_QWORD *)v130 = v133;
                        v130 -= 8;
                        v132 += 8;
                      }
                      while (v132);
                      v112 -= v115 & 0xFFFFFFFFFFFFFFF8;
                      if (v115 == (v115 & 0xFFFFFFFFFFFFFFF8))
                        goto LABEL_241;
                      goto LABEL_239;
                    }
                    v120 -= v123;
                    v112 -= v123;
                  }
LABEL_239:
                  v134 = v120 - 1;
                  do
                  {
                    v135 = *--v112;
                    *v134-- = v135;
                  }
                  while (v112 != v114);
LABEL_241:
                  v112 = (_BYTE *)*v67;
                  v120 = v119;
                  goto LABEL_242;
                }
LABEL_438:
                sub_207CA420C();
              case 237:
                std::string::push_back((std::string *)(a1 + 80), -19);
                sub_207D1ADA4((int64x2_t *)a1);
                v168 = *(_DWORD *)(a1 + 20);
                v169 = v168 - 160;
LABEL_305:
                if (v169 < 0xFFFFFFE0)
                  goto LABEL_401;
                goto LABEL_311;
              case 240:
                std::string::push_back((std::string *)(a1 + 80), -16);
                sub_207D1ADA4((int64x2_t *)a1);
                v159 = *(_DWORD *)(a1 + 20);
                if ((v159 - 192) < 0xFFFFFFD0)
                  goto LABEL_401;
                goto LABEL_310;
              case 241:
              case 242:
              case 243:
                std::string::push_back((std::string *)(a1 + 80), v104);
                sub_207D1ADA4((int64x2_t *)a1);
                v159 = *(_DWORD *)(a1 + 20);
                if ((v159 - 192) < 0xFFFFFFC0)
                  goto LABEL_401;
                goto LABEL_310;
              case 244:
                std::string::push_back((std::string *)(a1 + 80), -12);
                sub_207D1ADA4((int64x2_t *)a1);
                v159 = *(_DWORD *)(a1 + 20);
                if ((v159 - 144) < 0xFFFFFFF0)
                  goto LABEL_401;
LABEL_310:
                std::string::push_back((std::string *)(a1 + 80), v159);
                sub_207D1ADA4((int64x2_t *)a1);
                v168 = *(_DWORD *)(a1 + 20);
                if ((v168 - 192) < 0xFFFFFFC0)
                  goto LABEL_401;
LABEL_311:
                std::string::push_back((std::string *)(a1 + 80), v168);
                sub_207D1ADA4((int64x2_t *)a1);
                if ((*(_DWORD *)(a1 + 20) - 192) < 0xFFFFFFC0)
                  goto LABEL_401;
                v170 = *(_DWORD *)(a1 + 20);
                goto LABEL_313;
              default:
                goto LABEL_401;
            }
          }
        }
        else
        {
          v91 = 0;
          v92 = &v84[-*v67];
          *(_BYTE *)v87 = v79;
          v85 = v87 + 1;
          if (v84 == v86)
            goto LABEL_198;
        }
        break;
      }
      if (v87 < 8 || (unint64_t)(v86 - v91) < 0x20)
        goto LABEL_195;
      if (v87 >= 0x20)
      {
        v93 = v87 & 0xFFFFFFFFFFFFFFE0;
        v94 = &v91[v87 - 16];
        v95 = (__int128 *)(v84 - 16);
        v96 = v87 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v97 = *v95;
          *((_OWORD *)v94 - 1) = *(v95 - 1);
          *(_OWORD *)v94 = v97;
          v94 -= 32;
          v95 -= 2;
          v96 -= 32;
        }
        while (v96);
        if (v87 == v93)
          goto LABEL_197;
        if ((v87 & 0x18) == 0)
        {
          v92 -= v93;
          v84 -= v93;
LABEL_195:
          v102 = v92 - 1;
          do
          {
            v103 = *--v84;
            *v102-- = v103;
          }
          while (v84 != v86);
LABEL_197:
          v84 = (_BYTE *)*v67;
          v92 = v91;
          goto LABEL_198;
        }
      }
      else
      {
        v93 = 0;
      }
      v92 -= v87 & 0xFFFFFFFFFFFFFFF8;
      v98 = &v91[&v84[-v93] - v86 - 8];
      v99 = (uint64_t *)&v84[-v93 - 8];
      v100 = v93 - (v87 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v101 = *v99--;
        *(_QWORD *)v98 = v101;
        v98 -= 8;
        v100 += 8;
      }
      while (v100);
      v84 -= v87 & 0xFFFFFFFFFFFFFFF8;
      if (v87 == (v87 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_197;
      goto LABEL_195;
    case 44:
      return 13;
    case 45:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      if (*(char *)(a1 + 103) < 0)
      {
        **(_BYTE **)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v12 = *(_DWORD *)(a1 + 20);
        v15 = (_QWORD *)(a1 + 56);
        v14 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 64) = v14;
        v16 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v14 < v16)
          goto LABEL_33;
      }
      else
      {
        *(_BYTE *)(a1 + 80) = 0;
        *(_BYTE *)(a1 + 103) = 0;
        v15 = (_QWORD *)(a1 + 56);
        v14 = *(_BYTE **)(a1 + 56);
        *(_QWORD *)(a1 + 64) = v14;
        v16 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v14 < v16)
        {
LABEL_33:
          *v14 = v12;
          v17 = v14 + 1;
          goto LABEL_45;
        }
      }
      v18 = v16 - (_QWORD)v14;
      v19 = 2 * v18;
      if (2 * v18 <= 1)
        v19 = 1;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v20 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v21 = operator new(v20);
      *v21 = v12;
      v17 = v21 + 1;
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = v21 + 1;
      *(_QWORD *)(a1 + 72) = &v21[v20];
      if (v14)
        operator delete(v14);
LABEL_45:
      v22 = (const char *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = v17;
      v23 = *(_DWORD *)(a1 + 20);
      v24 = 5;
      if ((v23 - 49) >= 9)
      {
        if (v23 != 48)
        {
          if (v23 == 45)
            std::string::push_back((std::string *)(a1 + 80), 45);
          v64 = sub_207D1ADA4((int64x2_t *)a1);
          if ((v64 - 49) < 9)
          {
            v23 = *(_DWORD *)(a1 + 20);
            v25 = 6;
            goto LABEL_47;
          }
          if (v64 != 48)
          {
            v2 = "invalid number; expected digit after '-'";
            goto LABEL_35;
          }
          v23 = *(_DWORD *)(a1 + 20);
          v24 = 6;
        }
        std::string::push_back((std::string *)(a1 + 80), v23);
        v186 = sub_207D1ADA4((int64x2_t *)a1);
        if (v186 == 46)
        {
LABEL_113:
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 136));
          if (sub_207D1ADA4((int64x2_t *)a1) - 48 > 9)
          {
            v2 = "invalid number; expected digit after '.'";
            goto LABEL_35;
          }
          do
          {
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
            v63 = sub_207D1ADA4((int64x2_t *)a1);
          }
          while ((v63 - 48) < 0xA);
          if (v63 != 101 && v63 != 69)
          {
LABEL_375:
            v24 = 7;
            goto LABEL_376;
          }
        }
        else if (v186 != 69 && v186 != 101)
        {
          goto LABEL_376;
        }
        v54 = *(_DWORD *)(a1 + 20);
LABEL_373:
        std::string::push_back((std::string *)(a1 + 80), v54);
        v187 = sub_207D1ADA4((int64x2_t *)a1);
        if ((v187 - 48) >= 0xA)
        {
          if (v187 != 43 && v187 != 45)
          {
            v2 = "invalid number; expected '+', '-', or digit after exponent";
            goto LABEL_35;
          }
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          if (sub_207D1ADA4((int64x2_t *)a1) - 48 >= 0xA)
          {
            v2 = "invalid number; expected digit after exponent sign";
            goto LABEL_35;
          }
        }
        do
          std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
        while (sub_207D1ADA4((int64x2_t *)a1) - 48 < 0xA);
        goto LABEL_375;
      }
      v25 = 5;
LABEL_47:
      v195 = v25;
      std::string::push_back((std::string *)(a1 + 80), v23);
      v196 = vdupq_n_s64(1uLL);
      while (1)
      {
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), v196);
        if (*(_BYTE *)(a1 + 24))
        {
          *(_BYTE *)(a1 + 24) = 0;
          v29 = *(_DWORD *)(a1 + 20);
          if (v29 == -1)
            goto LABEL_109;
        }
        else
        {
          v30 = *(_QWORD **)(a1 + 8);
          v31 = (unsigned __int8 *)v30[3];
          if (v31 == (unsigned __int8 *)v30[4])
          {
            v32 = (*(uint64_t (**)(_QWORD *))(*v30 + 80))(v30);
            LOBYTE(v29) = v32;
            if (v32 == -1)
            {
              v62 = (std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24));
              std::ios_base::clear(v62, v62->__rdstate_ | 2);
              *(_DWORD *)(a1 + 20) = -1;
LABEL_109:
              v24 = v195;
              goto LABEL_376;
            }
            *(_DWORD *)(a1 + 20) = v32;
          }
          else
          {
            v30[3] = v31 + 1;
            v29 = *v31;
            *(_DWORD *)(a1 + 20) = v29;
          }
        }
        v34 = *(_BYTE **)(a1 + 64);
        v33 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v34 < v33)
        {
          *v34 = v29;
          v35 = (uint64_t)(v34 + 1);
          goto LABEL_87;
        }
        v36 = (_BYTE *)*v15;
        v37 = (unint64_t)&v34[-*v15];
        v38 = v37 + 1;
        if ((uint64_t)(v37 + 1) < 0)
          sub_207CA420C();
        v39 = v33 - (_QWORD)v36;
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (!v40)
        {
          v41 = 0;
          v42 = &v34[-*v15];
          *(_BYTE *)v37 = v29;
          v35 = v37 + 1;
          if (v34 == v36)
            goto LABEL_85;
LABEL_69:
          if (v37 >= 8 && (unint64_t)(v36 - v41) >= 0x20)
          {
            if (v37 < 0x20)
            {
              v43 = 0;
              goto LABEL_77;
            }
            v43 = v37 & 0xFFFFFFFFFFFFFFE0;
            v44 = &v41[v37 - 16];
            v45 = (__int128 *)(v34 - 16);
            v46 = v37 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v47 = *v45;
              *((_OWORD *)v44 - 1) = *(v45 - 1);
              *(_OWORD *)v44 = v47;
              v44 -= 32;
              v45 -= 2;
              v46 -= 32;
            }
            while (v46);
            if (v37 == v43)
              goto LABEL_84;
            if ((v37 & 0x18) != 0)
            {
LABEL_77:
              v42 -= v37 & 0xFFFFFFFFFFFFFFF8;
              v48 = &v41[&v34[-v43] - v36 - 8];
              v49 = (uint64_t *)&v34[-v43 - 8];
              v50 = v43 - (v37 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v51 = *v49--;
                *(_QWORD *)v48 = v51;
                v48 -= 8;
                v50 += 8;
              }
              while (v50);
              v34 -= v37 & 0xFFFFFFFFFFFFFFF8;
              if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_84;
              goto LABEL_82;
            }
            v42 -= v43;
            v34 -= v43;
          }
LABEL_82:
          v52 = v42 - 1;
          do
          {
            v53 = *--v34;
            *v52-- = v53;
          }
          while (v34 != v36);
LABEL_84:
          v34 = (_BYTE *)*v15;
          v42 = v41;
          goto LABEL_85;
        }
        v41 = (char *)operator new(v40);
        v42 = &v41[v37];
        v41[v37] = v29;
        v35 = (uint64_t)&v41[v37 + 1];
        if (v34 != v36)
          goto LABEL_69;
LABEL_85:
        *(_QWORD *)(a1 + 56) = v42;
        *(_QWORD *)(a1 + 64) = v35;
        *(_QWORD *)(a1 + 72) = &v41[v40];
        if (v34)
          operator delete(v34);
LABEL_87:
        *(_QWORD *)(a1 + 64) = v35;
        v54 = *(_DWORD *)(a1 + 20);
        if ((v54 - 48) >= 0xA)
          break;
        v55 = *(char *)(a1 + 103);
        if ((v55 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a1 + 103) != 22)
          {
            v26 = *(unsigned __int8 *)(a1 + 103);
            *(_BYTE *)(a1 + 103) = (v55 + 1) & 0x7F;
            v27 = (char *)(a1 + 80);
            goto LABEL_49;
          }
          v56 = (char *)(a1 + 80);
          v26 = 22;
LABEL_94:
          if (v26 + 1 > 2 * v26)
            v59 = v26 + 1;
          else
            v59 = 2 * v26;
          v60 = (v59 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v59 | 7) != 0x17)
            v60 = v59 | 7;
          if (v59 >= 0x17)
            v58 = v60 + 1;
          else
            v58 = 23;
LABEL_102:
          v61 = (char *)operator new(v58);
          v27 = v61;
          if (!v26 || (memmove(v61, v56, v26), v26 != 22))
            operator delete(v56);
          *(_QWORD *)(a1 + 80) = v27;
          *(_QWORD *)(a1 + 96) = v58 | 0x8000000000000000;
          goto LABEL_107;
        }
        v57 = *(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL;
        v26 = v57 - 1;
        if (*(_QWORD *)(a1 + 88) == v57 - 1)
        {
          if (v57 == 0x7FFFFFFFFFFFFFF8)
            sub_207C95C50();
          v56 = *(char **)v22;
          v58 = 0x7FFFFFFFFFFFFFF7;
          if (v26 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_94;
          goto LABEL_102;
        }
        v27 = *(char **)v22;
        v26 = *(_QWORD *)(a1 + 88);
LABEL_107:
        *(_QWORD *)(a1 + 88) = v26 + 1;
LABEL_49:
        v28 = &v27[v26];
        *v28 = v54;
        v28[1] = 0;
      }
      if (v54 > 68)
      {
        v24 = v195;
        if (v54 != 69 && v54 != 101)
          goto LABEL_376;
        goto LABEL_373;
      }
      v24 = v195;
      if (v54 == 10)
      {
        v65 = *(_QWORD *)(a1 + 48) + 1;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = v65;
      }
      else if (v54 == 46)
      {
        goto LABEL_113;
      }
LABEL_376:
      v188 = (_QWORD *)(a1 + 40);
      v189 = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(a1 + 24) = 1;
      --*(_QWORD *)(a1 + 32);
      if (v189 || (v188 = (_QWORD *)(a1 + 48), (v189 = *(_QWORD *)(a1 + 48)) != 0))
        *v188 = v189 - 1;
      if (*(_DWORD *)(a1 + 20) != -1)
        --*(_QWORD *)(a1 + 64);
      __endptr[0] = 0;
      *__error() = 0;
      if (v24 == 6)
      {
        v192 = (const char *)(a1 + 80);
        if (*(char *)(a1 + 103) < 0)
          v192 = *(const char **)v22;
        v193 = strtoll(v192, __endptr, 10);
        if (*__error())
          goto LABEL_390;
        *(_QWORD *)(a1 + 112) = v193;
        return 6;
      }
      else
      {
        if (v24 == 5)
        {
          v190 = (const char *)(a1 + 80);
          if (*(char *)(a1 + 103) < 0)
            v190 = *(const char **)v22;
          v191 = strtoull(v190, __endptr, 10);
          if (!*__error())
          {
            *(_QWORD *)(a1 + 120) = v191;
            return 5;
          }
        }
LABEL_390:
        if (*(char *)(a1 + 103) < 0)
          v22 = *(const char **)v22;
        *(double *)(a1 + 128) = strtod(v22, __endptr);
        return 7;
      }
    case 58:
      return 12;
    case 91:
      return result;
    case 93:
      return 10;
    case 102:
      if (sub_207D1ADA4((int64x2_t *)a1) != 97
        || sub_207D1ADA4((int64x2_t *)a1) != 108
        || sub_207D1ADA4((int64x2_t *)a1) != 115
        || sub_207D1ADA4((int64x2_t *)a1) != 101)
      {
        goto LABEL_149;
      }
      return 2;
    case 110:
      if (sub_207D1ADA4((int64x2_t *)a1) != 117
        || sub_207D1ADA4((int64x2_t *)a1) != 108
        || sub_207D1ADA4((int64x2_t *)a1) != 108)
      {
        goto LABEL_149;
      }
      return 3;
    case 116:
      if (sub_207D1ADA4((int64x2_t *)a1) != 114
        || sub_207D1ADA4((int64x2_t *)a1) != 117
        || sub_207D1ADA4((int64x2_t *)a1) != 101)
      {
        goto LABEL_149;
      }
      return 1;
    case 123:
      return 9;
    case 125:
      return 11;
    default:
LABEL_149:
      v2 = "invalid literal";
      goto LABEL_35;
  }
}

void sub_207D1AAEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_207C9CFA4(a1);
  _Unwind_Resume(a1);
}

void sub_207D1AB04(int64x2_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int32 v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  __int32 v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  std::ios_base *v29;
  int64x2_t v30;

  v2 = &a1[3].i64[1];
  v30 = vdupq_n_s64(1uLL);
  while (2)
  {
    a1[2] = vaddq_s64(a1[2], v30);
    if (!a1[1].i8[8])
    {
      v5 = (_QWORD *)a1->i64[1];
      v6 = (unsigned __int8 *)v5[3];
      if (v6 == (unsigned __int8 *)v5[4])
      {
        v7 = (*(uint64_t (**)(_QWORD *))(*v5 + 80))(v5);
        LOBYTE(v4) = v7;
        if (v7 == -1)
        {
          v29 = (std::ios_base *)(a1->i64[0] + *(_QWORD *)(*(_QWORD *)a1->i64[0] - 24));
          std::ios_base::clear(v29, v29->__rdstate_ | 2);
          a1[1].i32[1] = -1;
          return;
        }
        a1[1].i32[1] = v7;
      }
      else
      {
        v5[3] = v6 + 1;
        v4 = *v6;
        a1[1].i32[1] = v4;
      }
LABEL_10:
      v9 = (_BYTE *)a1[4].i64[0];
      v8 = a1[4].u64[1];
      if ((unint64_t)v9 < v8)
      {
        *v9 = v4;
        v10 = (uint64_t)(v9 + 1);
        goto LABEL_40;
      }
      v11 = (_BYTE *)*v2;
      v12 = (unint64_t)&v9[-*v2];
      v13 = v12 + 1;
      if ((uint64_t)(v12 + 1) < 0)
        sub_207CA420C();
      v14 = v8 - (_QWORD)v11;
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)operator new(v15);
        v17 = &v16[v12];
        v16[v12] = v4;
        v10 = (uint64_t)&v16[v12 + 1];
        if (v9 == v11)
        {
LABEL_38:
          a1[3].i64[1] = (uint64_t)v17;
          a1[4].i64[0] = v10;
          a1[4].i64[1] = (uint64_t)&v16[v15];
          if (v9)
            operator delete(v9);
LABEL_40:
          a1[4].i64[0] = v10;
          switch(a1[1].i32[1])
          {
            case 9:
            case 0xD:
            case 0x20:
              continue;
            case 0xA:
              v3 = a1[3].i64[0] + 1;
              a1[2].i64[1] = 0;
              a1[3].i64[0] = v3;
              continue;
            default:
              return;
          }
        }
      }
      else
      {
        v16 = 0;
        v17 = &v9[-*v2];
        *(_BYTE *)v12 = v4;
        v10 = v12 + 1;
        if (v9 == v11)
          goto LABEL_38;
      }
      if (v12 >= 8 && (unint64_t)(v11 - v16) >= 0x20)
      {
        if (v12 < 0x20)
        {
          v18 = 0;
          goto LABEL_30;
        }
        v18 = v12 & 0xFFFFFFFFFFFFFFE0;
        v19 = &v16[v12 - 16];
        v20 = (__int128 *)(v9 - 16);
        v21 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v20;
          *((_OWORD *)v19 - 1) = *(v20 - 1);
          *(_OWORD *)v19 = v22;
          v19 -= 32;
          v20 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v12 == v18)
          goto LABEL_37;
        if ((v12 & 0x18) != 0)
        {
LABEL_30:
          v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
          v23 = &v16[&v9[-v18] - v11 - 8];
          v24 = (uint64_t *)&v9[-v18 - 8];
          v25 = v18 - (v12 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v26 = *v24--;
            *(_QWORD *)v23 = v26;
            v23 -= 8;
            v25 += 8;
          }
          while (v25);
          v9 -= v12 & 0xFFFFFFFFFFFFFFF8;
          if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_37;
          goto LABEL_35;
        }
        v17 -= v18;
        v9 -= v18;
      }
LABEL_35:
      v27 = v17 - 1;
      do
      {
        v28 = *--v9;
        *v27-- = v28;
      }
      while (v9 != v11);
LABEL_37:
      v9 = (_BYTE *)*v2;
      v17 = v16;
      goto LABEL_38;
    }
    break;
  }
  a1[1].i8[8] = 0;
  v4 = a1[1].i32[1];
  if (v4 != -1)
    goto LABEL_10;
}

uint64_t sub_207D1ADA4(int64x2_t *a1)
{
  __int32 v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  __int32 v17;
  uint64_t result;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  std::ios_base *v30;

  a1[2] = vaddq_s64(a1[2], vdupq_n_s64(1uLL));
  if (a1[1].i8[8])
  {
    a1[1].i8[8] = 0;
    v2 = a1[1].i32[1];
    if (v2 != -1)
      goto LABEL_3;
    return 0xFFFFFFFFLL;
  }
  v15 = (_QWORD *)a1->i64[1];
  v16 = (unsigned __int8 *)v15[3];
  if (v16 == (unsigned __int8 *)v15[4])
  {
    v17 = (*(uint64_t (**)(_QWORD *))(*v15 + 80))(v15);
    LOBYTE(v2) = v17;
    if (v17 == -1)
    {
      v30 = (std::ios_base *)(a1->i64[0] + *(_QWORD *)(*(_QWORD *)a1->i64[0] - 24));
      std::ios_base::clear(v30, v30->__rdstate_ | 2);
      a1[1].i32[1] = -1;
      return 0xFFFFFFFFLL;
    }
    a1[1].i32[1] = v17;
  }
  else
  {
    v15[3] = v16 + 1;
    v2 = *v16;
    a1[1].i32[1] = v2;
  }
LABEL_3:
  v4 = (_BYTE *)a1[4].i64[0];
  v3 = a1[4].u64[1];
  if ((unint64_t)v4 < v3)
  {
    *v4 = v2;
    v5 = (uint64_t)(v4 + 1);
    goto LABEL_38;
  }
  v6 = a1[3].i64[1];
  v7 = (unint64_t)&v4[-v6];
  v8 = (uint64_t)&v4[-v6 + 1];
  if (v8 < 0)
    sub_207CA420C();
  v9 = v3 - v6;
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    v11 = operator new(v10);
    v12 = &v11[v7];
    v13 = &v11[v10];
    v11[v7] = v2;
    v5 = (uint64_t)&v11[v7 + 1];
    if (v4 != (_BYTE *)v6)
    {
LABEL_13:
      if (v7 < 8 || (unint64_t)(v6 - (_QWORD)v11) < 0x20)
        goto LABEL_34;
      if (v7 >= 0x20)
      {
        v14 = v7 & 0xFFFFFFFFFFFFFFE0;
        v19 = (__int128 *)(v4 - 16);
        v20 = &v4[(_QWORD)v11 - 16 - v6];
        v21 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v19;
          *(v20 - 1) = *(v19 - 1);
          *v20 = v22;
          v20 -= 2;
          v19 -= 2;
          v21 -= 32;
        }
        while (v21);
        if (v7 == v14)
        {
LABEL_36:
          v4 = (_BYTE *)a1[3].i64[1];
          a1[3].i64[1] = (uint64_t)v11;
          a1[4].i64[0] = v5;
          a1[4].i64[1] = (uint64_t)v13;
          if (!v4)
            goto LABEL_38;
          goto LABEL_37;
        }
        if ((v7 & 0x18) == 0)
        {
          v12 -= v14;
          v4 -= v14;
          goto LABEL_34;
        }
      }
      else
      {
        v14 = 0;
      }
      v12 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v23 = (uint64_t *)&v4[-v14 - 8];
      v24 = (uint64_t *)((char *)v23 + (_QWORD)v11 - v6);
      v25 = v14 - (v7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v26 = *v23--;
        *v24-- = v26;
        v25 += 8;
      }
      while (v25);
      v4 -= v7 & 0xFFFFFFFFFFFFFFF8;
      if (v7 == (v7 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_36;
LABEL_34:
      v27 = v12 - 1;
      do
      {
        v28 = *--v4;
        *v27-- = v28;
      }
      while (v4 != (_BYTE *)v6);
      goto LABEL_36;
    }
  }
  else
  {
    v11 = 0;
    v12 = &v4[-v6];
    v13 = 0;
    *(_BYTE *)v7 = v2;
    v5 = v7 + 1;
    if (v4 != (_BYTE *)v6)
      goto LABEL_13;
  }
  a1[3].i64[1] = (uint64_t)v12;
  a1[4].i64[0] = v5;
  a1[4].i64[1] = (uint64_t)v13;
  if (v4)
LABEL_37:
    operator delete(v4);
LABEL_38:
  a1[4].i64[0] = v5;
  result = a1[1].u32[1];
  if ((_DWORD)result == 10)
  {
    v29 = a1[3].i64[0] + 1;
    a1[2].i64[1] = 0;
    a1[3].i64[0] = v29;
  }
  return result;
}

uint64_t sub_207D1B03C(int64x2_t *a1)
{
  __int32 v2;
  __int32 v3;
  __int32 v4;
  __int32 v5;
  __int32 v6;
  __int32 v7;
  __int32 v8;
  __int32 v9;

  sub_207D1ADA4(a1);
  v2 = a1[1].i32[1];
  v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_207D1ADA4(a1);
    v4 = a1[1].i32[1];
    v5 = v4 - 48;
    if ((v4 - 48) < 0xA)
      goto LABEL_5;
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5)
    return 0xFFFFFFFFLL;
  v3 = v2 - 87;
  sub_207D1ADA4(a1);
  v4 = a1[1].i32[1];
  v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_207D1ADA4(a1);
    v6 = a1[1].i32[1];
    v7 = v6 - 48;
    if ((v6 - 48) < 0xA)
      goto LABEL_6;
LABEL_12:
    if ((v6 - 65) < 6)
    {
      v7 = v6 - 55;
      sub_207D1ADA4(a1);
      v8 = a1[1].i32[1];
      v9 = v8 - 48;
      if ((v8 - 48) < 0xA)
        return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
      goto LABEL_20;
    }
    if ((v6 - 97) > 5)
      return 0xFFFFFFFFLL;
    v7 = v6 - 87;
    sub_207D1ADA4(a1);
    v8 = a1[1].i32[1];
    v9 = v8 - 48;
    if ((v8 - 48) >= 0xA)
      goto LABEL_20;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5)
      return 0xFFFFFFFFLL;
    v5 = v4 - 87;
    sub_207D1ADA4(a1);
    v6 = a1[1].i32[1];
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
  else
  {
    v5 = v4 - 55;
    sub_207D1ADA4(a1);
    v6 = a1[1].i32[1];
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
LABEL_6:
  sub_207D1ADA4(a1);
  v8 = a1[1].i32[1];
  v9 = v8 - 48;
  if ((v8 - 48) < 0xA)
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
LABEL_20:
  if ((v8 - 65) < 6)
  {
    v9 = v8 - 55;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  if ((v8 - 97) <= 5)
  {
    v9 = v8 - 87;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_207D1B1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v7 = (void *)sub_207D1F664((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
  }
  return 0;
}

void sub_207D1B23C(std::string *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned int v6;
  size_t v7;
  char __str[8];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = *v4;
      if (v6 > 0x1F)
      {
        std::string::push_back(this, v6);
      }
      else
      {
        v9 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v6);
        v7 = strlen(__str);
        std::string::append(this, __str, v7);
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_207D1B310(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_207D1B330(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  std::string __p;
  const void *v24[2];
  char v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;

  v25 = 11;
  strcpy((char *)v24, "parse_error");
  sub_207D18F30(v24, a1, &v26);
  v8 = std::string::append(&v26, "parse error", 0xBuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_207D1F6F0((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, ": ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v29, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v31 = v19->__r_.__value_.__r.__words[2];
  v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_28:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
LABEL_18:
  if ((v25 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_29:
  operator delete((void *)v24[0]);
LABEL_19:
  v21 = *a2;
  if (v31 >= 0)
    v22 = (const char *)&v30;
  else
    v22 = (const char *)v30;
  *(_QWORD *)a4 = off_24C072CF8;
  *(_DWORD *)(a4 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v22);
  *(_QWORD *)a4 = off_24C072DF8;
  *(_QWORD *)(a4 + 32) = v21;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
}

void sub_207D1B578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::exception *v40;
  uint64_t v41;

  std::exception::~exception(v40);
  if (*(char *)(v41 - 57) < 0)
    operator delete(*(void **)(v41 - 80));
  _Unwind_Resume(a1);
}

void sub_207D1B67C(std::string *this, uint64_t a2, unsigned int a3, const void **a4)
{
  int v7;
  size_t v8;
  unint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string *p_dst;
  const char *v25;
  size_t v26;
  std::string::size_type v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  size_t v36;
  unsigned int v37;
  std::string::size_type size;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  __int128 v43;
  void **v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  void **v52;
  std::string::size_type v53;
  void *v54;
  const char *v55;
  size_t v56;
  std::string::size_type v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  void **v63;
  std::string::size_type v64;
  std::string v65;
  std::string __dst;
  std::string v67;
  std::string v68;
  void *__p[2];
  int64_t v70;
  char __str[8];
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 13;
  strcpy((char *)this, "syntax error ");
  v7 = *((char *)a4 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a4 + 23);
  else
    v8 = (size_t)a4[1];
  if (v8)
  {
    v9 = v8 + 14;
    if (v8 + 14 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    if (v9 > 0x16)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = (char *)operator new(v12 + 1);
      v68.__r_.__value_.__l.__size_ = v8 + 14;
      v68.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      memset(&v68, 0, sizeof(v68));
      v11 = (char *)&v68;
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = v8 + 14;
    }
    qmemcpy(v11, "while parsing ", 14);
    v14 = v11 + 14;
    if (v7 >= 0)
      v15 = a4;
    else
      v15 = *a4;
    memmove(v11 + 14, v15, v8);
    v14[v8] = 0;
    v16 = std::string::append(&v68, " ", 1uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v70 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v70 >= 0)
      v19 = HIBYTE(v70);
    else
      v19 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_22:
  std::string::append(this, "- ", 2uLL);
  v20 = *(int *)(a2 + 32);
  if ((_DWORD)v20 != 14)
  {
    if (v20 > 0x10)
      v25 = "unknown token";
    else
      v25 = off_24C072E10[v20];
    v26 = strlen(v25);
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      sub_207C95C50();
    v27 = v26;
    if (v26 >= 0x17)
    {
      v40 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v40 = v26 | 7;
      v41 = v40 + 1;
      v28 = operator new(v40 + 1);
      v68.__r_.__value_.__l.__size_ = v27;
      v68.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    }
    else
    {
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = v26;
      v28 = &v68;
      if (!v26)
        goto LABEL_49;
    }
    memcpy(v28, v25, v27);
LABEL_49:
    *((_BYTE *)v28 + v27) = 0;
    v42 = std::string::insert(&v68, 0, "unexpected ", 0xBuLL);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v70 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (v70 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v70 >= 0)
      v45 = HIBYTE(v70);
    else
      v45 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v44, v45);
    if (SHIBYTE(v70) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_87;
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_87;
    }
    v54 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_86;
  }
  v21 = *(const char **)(a2 + 144);
  v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v29 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v29 = v22 | 7;
    v30 = v29 + 1;
    p_dst = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v23;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_37;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_37:
    memmove(p_dst, v21, v23);
  p_dst->__r_.__value_.__s.__data_[v23] = 0;
  v31 = std::string::append(&__dst, "; last read: '", 0xEuLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = *(unsigned __int8 **)(a2 + 96);
  v34 = *(unsigned __int8 **)(a2 + 104);
  memset(&v65, 0, sizeof(v65));
  if (v33 == v34)
  {
    size = 0;
    v39 = 0;
    v37 = 0;
  }
  else
  {
    do
    {
      v35 = *v33;
      if (v35 > 0x1F)
      {
        std::string::push_back(&v65, v35);
      }
      else
      {
        v72 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v35);
        v36 = strlen(__str);
        std::string::append(&v65, __str, v36);
      }
      ++v33;
    }
    while (v33 != v34);
    v37 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    size = v65.__r_.__value_.__l.__size_;
    v39 = v65.__r_.__value_.__r.__words[0];
  }
  if ((v37 & 0x80u) == 0)
    v46 = &v65;
  else
    v46 = (std::string *)v39;
  if ((v37 & 0x80u) == 0)
    v47 = v37;
  else
    v47 = size;
  v48 = std::string::append(&v67, (const std::string::value_type *)v46, v47);
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v68, "'", 1uLL);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v70 = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v52 = __p;
  else
    v52 = (void **)__p[0];
  if (v70 >= 0)
    v53 = HIBYTE(v70);
  else
    v53 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v52, v53);
  if (SHIBYTE(v70) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_75:
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_83;
    }
  }
  else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(v68.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_77;
LABEL_84:
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_85;
  }
LABEL_83:
  operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_84;
LABEL_77:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_87;
LABEL_85:
  v54 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_86:
  operator delete(v54);
LABEL_87:
  if (!a3)
    return;
  if (a3 > 0x10)
    v55 = "unknown token";
  else
    v55 = off_24C072E98[a3 - 1];
  v56 = strlen(v55);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    sub_207C95C50();
  v57 = v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = operator new(v59 + 1);
    v68.__r_.__value_.__l.__size_ = v57;
    v68.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    goto LABEL_98;
  }
  *((_BYTE *)&v68.__r_.__value_.__s + 23) = v56;
  v58 = &v68;
  if (v56)
LABEL_98:
    memcpy(v58, v55, v57);
  *((_BYTE *)v58 + v57) = 0;
  v61 = std::string::insert(&v68, 0, "; expected ", 0xBuLL);
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v70 = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if (v70 >= 0)
    v63 = __p;
  else
    v63 = (void **)__p[0];
  if (v70 >= 0)
    v64 = HIBYTE(v70);
  else
    v64 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v63, v64);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_109:
    operator delete(v68.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_109;
}

void sub_207D1BD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
  {
    operator delete(__p);
    if (a35 < 0)
    {
LABEL_5:
      operator delete(a30);
      if (a16 < 0)
      {
LABEL_8:
        operator delete(a11);
        if ((a28 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a28 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a22 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v42 + 23) < 0)
            operator delete(*(void **)v42);
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a17);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a23);
      if ((a22 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a35 < 0)
  {
    goto LABEL_5;
  }
  if (a16 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

void sub_207D1BE34(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_207D1BE64(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  sub_207D20660((uint64_t *)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_207D1BEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v7 = (void *)sub_207D1F664((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C072DD0, (void (*)(void *))sub_207D1BE34);
  }
  return 0;
}

uint64_t sub_207D1BF3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = a1 + 32;
  v7 = a1 + 96;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    goto LABEL_4;
  if (v8 != a3)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_4:
    *(_QWORD *)(a1 + 120) = v8;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 120) = v7;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v7);
LABEL_6:
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 128) = a4;
  *(_BYTE *)(a1 + 136) = 9;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  if (v9 == v10 << 6)
  {
    if ((uint64_t)(v9 + 1) < 0)
      sub_207D159B0();
    v11 = v10 << 7;
    if (v11 <= (v9 & 0xFFFFFFFFFFFFFFC0) + 64)
      v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v9 <= 0x3FFFFFFFFFFFFFFELL)
      v12 = v11;
    else
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    sub_207D1C104(v6, v12);
    v9 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v9 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  return a1;
}

void sub_207D1C064(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *(void **)(v1 + 56);
  if (v5)
  {
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  operator delete(v6);
  v7 = *v3;
  if (!*v3)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v1 + 16) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

void sub_207D1C104(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_207D159B0();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_207D1C204(uint64_t a1, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  void *exception;
  std::string v44;
  std::string v45;

  v3 = (char **)(a1 + 8);
  LODWORD(v45.__r_.__value_.__l.__data_) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v44.__r_.__value_.__s.__data_[0] = 0;
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    sub_207CA408C();
  v6 = (*(uint64_t (**)(uint64_t, std::string *, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v45, &v44, a1 + 136);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0)
      sub_207D159B0();
    v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64)
      v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    sub_207D1C104(a1 + 32, v10);
    v7 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v7 + 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v7 >> 6;
  v13 = 1 << v7;
  if (v6)
    v14 = *(_QWORD *)(v11 + 8 * v12) | v13;
  else
    v14 = *(_QWORD *)(v11 + 8 * v12) & ~v13;
  *(_QWORD *)(v11 + 8 * v12) = v14;
  v45.__r_.__value_.__s.__data_[0] = 1;
  sub_207D1D090((unsigned __int8 **)a1, (char *)&v45, 1);
  v16 = v15;
  v18 = *(char **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(_QWORD *)v18 = v15;
    v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  v20 = *v3;
  v21 = v18 - *v3;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    sub_207D159B0();
  v24 = v17 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      sub_207CA3AB8();
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v16;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v18 - v20);
    if (v18 == v20)
      goto LABEL_33;
    goto LABEL_26;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_49;
    if ((unint64_t)(v18 - v26 - v21) < 0x20)
      goto LABEL_49;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v18[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v18 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v38 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v27 = v38;
      }
      while (v18 != v20);
    }
    v18 = *v3;
  }
LABEL_33:
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v28;
  if (v18)
    operator delete(v18);
LABEL_35:
  *(_QWORD *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    v39 = *(char **)(v19 - 8);
    if (v39)
    {
      v40 = *v39;
      if (v40 > 2)
        v41 = 1;
      else
        v41 = qword_208233848[v40];
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v44, a2);
        sub_207C96E8C("excessive object size: ", &v44, &v45);
        sub_207D1CEE4(408, (uint64_t)&v45, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C072D10, (void (*)(void *))sub_207D1D060);
      }
    }
  }
  return 1;
}

void sub_207D1C4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_207D1C55C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v21;
  __int128 v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  __int128 v29;
  unint64_t v30;
  _BYTE v31[8];
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 - 8))
  {
    LODWORD(v28) = ((unint64_t)(v2 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
    LOBYTE(v24) = 1;
    v3 = *(_QWORD *)(a1 + 120);
    if (!v3)
      sub_207CA408C();
    if (((*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **))(*(_QWORD *)v3 + 48))(v3, &v28, &v24) & 1) == 0)
    {
      sub_207D1D968((uint64_t)v31, (unsigned __int8 *)(a1 + 136));
      v4 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
      v5 = *v4;
      *v4 = v31[0];
      v31[0] = v5;
      v6 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v32;
      v32 = v6;
      sub_207D20660(&v32, v5);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = v7 - 8;
  *(_QWORD *)(a1 + 16) = v7 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      v11 = *v10;
      if ((v11 - 1) <= 1)
      {
        v28 = *(unsigned __int8 **)(v7 - 16);
        v29 = 0uLL;
        v30 = 0x8000000000000000;
        if (v11 == 2)
        {
          *((_QWORD *)&v29 + 1) = **((_QWORD **)v10 + 1);
        }
        else if (v11 == 1)
        {
          *(_QWORD *)&v29 = **((_QWORD **)v10 + 1);
        }
        else
        {
          v30 = 0;
        }
        while (1)
        {
          v12 = *(unsigned __int8 **)(v9 - 8);
          v25 = 0;
          v26 = 0;
          v24 = v12;
          v27 = 0x8000000000000000;
          v13 = *v12;
          if (v13 == 2)
          {
            v26 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8);
            if (sub_207D1E324(&v28, &v24))
              return 1;
          }
          else if (v13 == 1)
          {
            v25 = *((_QWORD *)v12 + 1) + 8;
            if (sub_207D1E324(&v28, &v24))
              return 1;
          }
          else
          {
            v27 = 1;
            if (sub_207D1E324(&v28, &v24))
              return 1;
          }
          if (*sub_207D1D4A4(&v28) == 9)
            break;
          v14 = *v28;
          if (v14 == 2)
          {
            *((_QWORD *)&v29 + 1) += 16;
            v9 = *(_QWORD *)(a1 + 16);
          }
          else if (v14 == 1)
          {
            v15 = (_QWORD *)v29;
            v16 = *(_QWORD **)(v29 + 8);
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v15[2];
                v18 = *v17 == (_QWORD)v15;
                v15 = v17;
              }
              while (!v18);
            }
            *(_QWORD *)&v29 = v17;
            v9 = *(_QWORD *)(a1 + 16);
          }
          else
          {
            ++v30;
            v9 = *(_QWORD *)(a1 + 16);
          }
        }
        v19 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
        v21 = v28;
        v22 = v29;
        v23 = v30;
        sub_207D1D59C(v19, &v21, &v24);
      }
    }
  }
  return 1;
}

uint64_t sub_207D1C7E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  _BYTE v21[8];
  uint64_t *v22;
  unsigned __int8 v23[8];
  uint64_t v24;
  char v25;
  __int128 *v26;

  v23[0] = 3;
  v4 = operator new(0x18uLL);
  v5 = (uint64_t)v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(_QWORD *)(a2 + 16);
  }
  v24 = v5;
  LODWORD(v26) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v25 = 4;
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
    sub_207CA408C();
  v7 = (*(uint64_t (**)(uint64_t, __int128 **, char *, unsigned __int8 *))(*(_QWORD *)v6 + 48))(v6, &v26, &v25, v23);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0)
      sub_207D159B0();
    v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64)
      v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_207D1C104(a1 + 56, v11);
    v8 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v8 + 1;
  v12 = *(_QWORD *)(a1 + 56);
  v13 = v8 >> 6;
  v14 = 1 << v8;
  v15 = 8 * v13;
  if ((v7 & 1) != 0)
  {
    *(_QWORD *)(v12 + v15) |= v14;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8))
    {
      sub_207D1D968((uint64_t)v21, (unsigned __int8 *)(a1 + 136));
      v16 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 8);
      v26 = (__int128 *)a2;
      v17 = sub_207D1E7FC(v16, (const void **)a2, (uint64_t)&unk_20822AD51, &v26);
      v18 = *((unsigned __int8 *)v17 + 56);
      v17 += 7;
      *(_BYTE *)v17 = v21[0];
      v21[0] = v18;
      v19 = (uint64_t)v17[1];
      v17[1] = v22;
      v22 = (uint64_t *)v19;
      *(_QWORD *)(a1 + 80) = v17;
      sub_207D20660((uint64_t *)&v22, v18);
    }
  }
  else
  {
    *(_QWORD *)(v12 + v15) &= ~v14;
  }
  sub_207D20660(&v24, v23[0]);
  return 1;
}

void sub_207D1C9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t *v11;

  sub_207D20660(&a10, a9);
  sub_207D20660(v11, a11);
  _Unwind_Resume(a1);
}

void sub_207D1C9D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D1C9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t *v11;

  sub_207D20660(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1CA00(uint64_t a1, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  void *exception;
  std::string v44;
  std::string v45;

  v3 = (char **)(a1 + 8);
  LODWORD(v45.__r_.__value_.__l.__data_) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v44.__r_.__value_.__s.__data_[0] = 2;
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    sub_207CA408C();
  v6 = (*(uint64_t (**)(uint64_t, std::string *, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v45, &v44, a1 + 136);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0)
      sub_207D159B0();
    v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64)
      v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    sub_207D1C104(a1 + 32, v10);
    v7 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v7 + 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v7 >> 6;
  v13 = 1 << v7;
  if (v6)
    v14 = *(_QWORD *)(v11 + 8 * v12) | v13;
  else
    v14 = *(_QWORD *)(v11 + 8 * v12) & ~v13;
  *(_QWORD *)(v11 + 8 * v12) = v14;
  v45.__r_.__value_.__s.__data_[0] = 2;
  sub_207D1D090((unsigned __int8 **)a1, (char *)&v45, 1);
  v16 = v15;
  v18 = *(char **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(_QWORD *)v18 = v15;
    v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  v20 = *v3;
  v21 = v18 - *v3;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    sub_207D159B0();
  v24 = v17 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      sub_207CA3AB8();
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v16;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v18 - v20);
    if (v18 == v20)
      goto LABEL_33;
    goto LABEL_26;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_49;
    if ((unint64_t)(v18 - v26 - v21) < 0x20)
      goto LABEL_49;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v18[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v18 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v38 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v27 = v38;
      }
      while (v18 != v20);
    }
    v18 = *v3;
  }
LABEL_33:
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v28;
  if (v18)
    operator delete(v18);
LABEL_35:
  *(_QWORD *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    v39 = *(char **)(v19 - 8);
    if (v39)
    {
      v40 = *v39;
      if (v40 > 2)
        v41 = 1;
      else
        v41 = qword_208233848[v40];
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v44, a2);
        sub_207C96E8C("excessive array size: ", &v44, &v45);
        sub_207D1CEE4(408, (uint64_t)&v45, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_24C072D10, (void (*)(void *))sub_207D1D060);
      }
    }
  }
  return 1;
}

void sub_207D1CCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t sub_207D1CD5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[8];
  uint64_t v17;
  char v18;
  int v19;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v2 - 8);
  v3 = v2 - 8;
  if (!v4)
  {
    *(_QWORD *)(a1 + 16) = v3;
    goto LABEL_6;
  }
  v19 = ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  v18 = 3;
  v5 = *(_QWORD *)(a1 + 120);
  if (!v5)
    sub_207CA408C();
  if (((*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v5 + 48))(v5, &v19, &v18) & 1) != 0)
  {
    *(_QWORD *)(a1 + 16) -= 8;
LABEL_6:
    --*(_QWORD *)(a1 + 40);
    return 1;
  }
  sub_207D1D968((uint64_t)v16, (unsigned __int8 *)(a1 + 136));
  v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
  v8 = *v7;
  *v7 = v16[0];
  v16[0] = v8;
  v9 = *((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v17;
  v17 = v9;
  sub_207D20660(&v17, v8);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v11 == v10 - 8)
    return 1;
  v12 = *(_QWORD *)(v10 - 16);
  if (*(_BYTE *)v12 != 2)
    return 1;
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(unsigned __int8 *)(v14 - 16);
  v14 -= 16;
  sub_207D20660((uint64_t *)(v14 + 8), v15);
  *(_QWORD *)(v13 + 8) = v14;
  return 1;
}

uint64_t sub_207D1CE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v7 = (void *)sub_207D1E98C((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C072D10, (void (*)(void *))sub_207D1D060);
  }
  return 0;
}

void sub_207D1CEE4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_207D18F30((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = off_24C072CF8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = off_24C072DB8;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_207D1D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207D1D060(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_207D1D090(unsigned __int8 **a1, char *a2, char a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32[8];
  _QWORD *v33;
  char v34;
  int v35;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v32[0] = *a2;
    switch(v32[0])
    {
      case 1:
        v24 = operator new(0x18uLL);
        v24[2] = 0;
        v24[1] = 0;
        *v24 = v24 + 1;
        v33 = v24;
        break;
      case 2:
        v25 = operator new(0x18uLL);
        v25[1] = 0;
        v25[2] = 0;
        *v25 = 0;
        v33 = v25;
        break;
      case 3:
        v26 = operator new(0x18uLL);
        v26[23] = 0;
        *v26 = 0;
        v33 = v26;
        break;
      case 4:
        LOBYTE(v33) = 0;
        break;
      case 8:
        v27 = operator new(0x20uLL);
        v27[1] = 0;
        v27[2] = 0;
        *v27 = 0;
        *((_WORD *)v27 + 12) = 0;
        v33 = v27;
        break;
      default:
        v33 = 0;
        break;
    }
    if ((a3 & 1) != 0)
      goto LABEL_7;
    v35 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v34 = 5;
    v5 = a1[15];
    if (!v5)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v35, &v34, v32) & 1) != 0)
    {
LABEL_7:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v32[0];
        v13 = (uint64_t)v33;
        v32[0] = 0;
        v33 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v30 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v31 = v16;
        sub_207D20660(&v31, v15);
LABEL_24:
        v11 = 1;
        goto LABEL_25;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_207D1D328((void **)v8, v32);
          }
          else
          {
            *(_BYTE *)v9 = v32[0];
            *(_QWORD *)(v9 + 8) = v33;
            v32[0] = 0;
            v33 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_24;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v32[0];
          v20 = (uint64_t)v33;
          v32[0] = 0;
          v33 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v29 = v23;
          sub_207D20660(&v29, v22);
          goto LABEL_24;
        }
      }
    }
    v11 = 0;
LABEL_25:
    sub_207D20660((uint64_t *)&v33, v32[0]);
    return v11;
  }
  return 0;
}

void sub_207D1D310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

char *sub_207D1D328(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_207D159B0();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (uint64_t *)*a1;
  v15 = (uint64_t *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *((_BYTE *)v15 - 16);
    v15 -= 2;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v15[1];
    *(_BYTE *)v15 = 0;
    v15[1] = 0;
  }
  while (v15 != v14);
  v15 = (uint64_t *)*a1;
  v17 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 1;
    do
    {
      v19 = v18 - 1;
      sub_207D20660(v18, *((unsigned __int8 *)v18 - 8));
      v18 -= 2;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

uint64_t sub_207D1D450(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    sub_207D20660((uint64_t *)(v4 + 8), v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned __int8 *sub_207D1D4A4(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  void *exception;
  _QWORD v5[3];

  result = *a1;
  v3 = *result;
  if (v3 == 2)
    return a1[2];
  if (v3 == 1)
    return a1[1] + 56;
  if (a1[3])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v5, "cannot get value");
    sub_207D1E424(214, (uint64_t)v5, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  return result;
}

void sub_207D1D560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_207D1D59C(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 **v5;
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  std::string::size_type v18;
  uint64_t *v19;
  void **v20;
  void **v21;
  void *v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  void *v28;
  void *exception;
  void *v30;
  void *v31;
  char *v32;
  std::string v33;
  std::string v34;

  if (*a2 != a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(&v34, "iterator does not fit current value");
    sub_207D1E424(202, (uint64_t)&v34, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  a3[1] = 0;
  v5 = a3 + 1;
  *a3 = a1;
  a3[2] = 0;
  a3[3] = (unsigned __int8 *)0x8000000000000000;
  v6 = *a1;
  if (v6 == 2)
  {
    v11 = *((_QWORD *)a1 + 1);
    v12 = *(unsigned __int8 **)(v11 + 8);
    a3[2] = v12;
    v13 = a2[2];
    v14 = v13 + 16;
    if (v13 + 16 == v12)
    {
      v19 = (uint64_t *)a2[2];
      if (v12 == v13)
      {
LABEL_28:
        *(_QWORD *)(v11 + 8) = v19;
        a3[2] = v13;
        return;
      }
    }
    else
    {
      do
      {
        v15 = *v14;
        v16 = *((_QWORD *)v14 + 1);
        *v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        v17 = *(v14 - 16);
        *(v14 - 16) = v15;
        v34.__r_.__value_.__s.__data_[0] = v17;
        v18 = *((_QWORD *)v14 - 1);
        *((_QWORD *)v14 - 1) = v16;
        v34.__r_.__value_.__l.__size_ = v18;
        sub_207D20660((uint64_t *)&v34.__r_.__value_.__l.__size_, v17);
        v14 += 16;
      }
      while (v14 != v12);
      v12 = *(unsigned __int8 **)(v11 + 8);
      v19 = (uint64_t *)(v14 - 16);
      if (v12 == (unsigned __int8 *)v19)
        goto LABEL_28;
    }
    v26 = (uint64_t *)(v12 - 8);
    do
    {
      v27 = v26 - 1;
      sub_207D20660(v26, *((unsigned __int8 *)v26 - 8));
      v26 -= 2;
    }
    while (v27 != v19);
    goto LABEL_28;
  }
  if (v6 != 1)
  {
    a3[3] = (unsigned __int8 *)1;
    if ((v6 - 3) > 5)
    {
      v31 = __cxa_allocate_exception(0x20uLL);
      v32 = (char *)sub_207D1E770((char *)a1);
      sub_207C96EE8(&v33, v32);
      sub_207C96E8C("cannot use erase() with ", &v33, &v34);
      sub_207D1E5F8(307, (uint64_t)&v34, (uint64_t)v31);
      __cxa_throw(v31, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
    }
    if (a2[3])
    {
      v30 = __cxa_allocate_exception(0x20uLL);
      sub_207C96EE8(&v34, "iterator out of range");
      sub_207D1E424(205, (uint64_t)&v34, (uint64_t)v30);
      __cxa_throw(v30, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
    }
    if (v6 == 8)
    {
      v21 = (void **)(a1 + 8);
      v20 = (void **)*((_QWORD *)a1 + 1);
      v28 = *v20;
      if (*v20)
      {
        v20[1] = v28;
        v22 = v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (v6 != 3)
      {
LABEL_33:
        *a1 = 0;
        return;
      }
      v21 = (void **)(a1 + 8);
      v20 = (void **)*((_QWORD *)a1 + 1);
      if (*((char *)v20 + 23) < 0)
      {
        v22 = *v20;
LABEL_31:
        operator delete(v22);
        v20 = (void **)*v21;
      }
    }
    operator delete(v20);
    *v21 = 0;
    goto LABEL_33;
  }
  v7 = (unsigned __int8 **)*((_QWORD *)a1 + 1);
  *v5 = (unsigned __int8 *)(v7 + 1);
  v8 = a2[1];
  v9 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
  if (v9)
  {
    do
    {
      v10 = v9;
      v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  else
  {
    v23 = a2[1];
    do
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v23 + 2);
      v24 = *(_QWORD *)v10 == (_QWORD)v23;
      v23 = v10;
    }
    while (!v24);
  }
  if (*v7 == v8)
    *v7 = v10;
  v25 = (uint64_t *)v7[1];
  --v7[2];
  sub_207CC2668(v25, (uint64_t *)v8);
  sub_207D20660((uint64_t *)v8 + 8, v8[56]);
  if ((char)v8[55] < 0)
    operator delete(*((void **)v8 + 4));
  operator delete(v8);
  *v5 = v10;
}

void sub_207D1D8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D1D968(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  char *v12;
  char *v13;
  const void ***v14;
  const void ***v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void ***v19;
  BOOL v20;
  uint64_t *v21;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v14 = (const void ***)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v4 + 1;
      v17 = *v14;
      v15 = v14 + 1;
      v16 = v17;
      if (v17 != (const void **)v15)
      {
        do
        {
          sub_207D1DB90((uint64_t **)v4, v4 + 1, v16 + 4, (uint64_t)(v16 + 4));
          v18 = (const void **)v16[1];
          if (v18)
          {
            do
            {
              v19 = (const void ***)v18;
              v18 = (const void **)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (const void ***)v16[2];
              v20 = *v19 == v16;
              v16 = (const void **)v19;
            }
            while (!v20);
          }
          v16 = (const void **)v19;
        }
        while (v19 != v15);
      }
      goto LABEL_21;
    case 2:
      v21 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_207D1E124(v4, *v21, v21[1], (v21[1] - *v21) >> 4);
      goto LABEL_21;
    case 3:
      v5 = (__int128 *)*((_QWORD *)a2 + 1);
      v6 = operator new(0x18uLL);
      v4 = v6;
      if (*((char *)v5 + 23) < 0)
      {
        sub_207CA40D8(v6, *(void **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v5 + 2);
        *v6 = v7;
      }
      goto LABEL_21;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
      goto LABEL_21;
    case 8:
      v8 = *((_QWORD *)a2 + 1);
      v4 = operator new(0x20uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      v10 = *(const void **)v8;
      v9 = *(_QWORD *)(v8 + 8);
      v11 = v9 - *(_QWORD *)v8;
      if (v9 != *(_QWORD *)v8)
      {
        if ((v11 & 0x8000000000000000) != 0)
          sub_207CF94B8();
        v12 = (char *)operator new(v9 - *(_QWORD *)v8);
        *v4 = v12;
        v13 = &v12[v11];
        v4[2] = &v12[v11];
        memcpy(v12, v10, v11);
        v4[1] = v13;
      }
      *((_WORD *)v4 + 12) = *(_WORD *)(v8 + 24);
LABEL_21:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_207D1DB24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D1DB38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D1DB4C(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    operator delete(v3);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D1DB90(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_207D1DCB8(a1, a2, &v15, &v14, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x48uLL);
    v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_207CA40D8((_BYTE *)v9 + 32, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(_QWORD *)(a4 + 16);
    }
    sub_207D1D968(v7 + 7, a4 + 24);
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_207CC24B4(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_207D1DC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D1E060((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207D1DC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_207D1E060((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D1DCB8(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t *sub_207D1E060(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_207D20660((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_207D1E0B8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_207D1E0B8(a1, *(_QWORD *)a2);
    sub_207D1E0B8(a1, *((_QWORD *)a2 + 1));
    sub_207D20660(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *sub_207D1E124(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_207D159B0();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_207D1D968(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_207D1E1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207D1E224(&a9);
  _Unwind_Resume(a1);
}

void sub_207D1E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_207D1E2C0((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_207D1E224(&a9);
  _Unwind_Resume(a1);
}

void ***sub_207D1E224(void ***result)
{
  void ***v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (uint64_t *)**result;
    if (v3)
    {
      v4 = (uint64_t *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_207D20660(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D1E2C0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(uint64_t ***)(a1 + 16);
    v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_207D20660(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

BOOL sub_207D1E324(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v7, "cannot compare iterators of different containers");
    sub_207D1E424(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_207D1E3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_207D1E424(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  char __p[17];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 16;
  strcpy(__p, "invalid_iterator");
  sub_207D18F30((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = off_24C072CF8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = off_24C072D50;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_207D1E544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_207D1E594(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_207D1E5C4(std::runtime_error *a1)
{
  void *v2;

  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

void sub_207D1E5F8(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_207D18F30((const void **)__p, a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = off_24C072CF8;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = off_24C072D90;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_207D1E720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const char *sub_207D1E770(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_24C072F18[v1];
}

void sub_207D1E798(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_207D1E7C8(std::runtime_error *a1)
{
  void *v2;

  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

uint64_t **sub_207D1E7FC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  char *v21;
  _BYTE *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = (char *)operator new(0x48uLL);
  v22 = v21 + 32;
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_207CA40D8(v22, *(void **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    *((_QWORD *)v21 + 6) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v22 = v24;
  }
  v21[56] = 0;
  *((_QWORD *)v21 + 8) = 0;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = v11;
  *v7 = (uint64_t *)v21;
  v25 = (uint64_t *)**a1;
  v26 = (uint64_t *)v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  sub_207CC24B4(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_207D1E978(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1E98C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_24C072CF8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(_QWORD *)a1 = off_24C072DB8;
  return a1;
}

void sub_207D1E9D8(std::runtime_error *a1)
{
  void *v2;

  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

uint64_t sub_207D1EA0C(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 7;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_207D20660(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_207D1D328((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_207D20660(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_207D20660(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_207D1EBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1EC10(unsigned __int8 **a1, unsigned __int8 *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 4;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_207D20660(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_207D1D328((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_207D20660(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_207D20660(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_207D1EDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1EE14(unsigned __int8 **a1, uint64_t a2, char a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27[8];
  uint64_t v28;
  char v29;
  int v30;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v27[0] = 0;
    v28 = 0;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v30 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v29 = 5;
    v4 = a1[15];
    if (!v4)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v4 + 48))(v4, &v30, &v29, v27) & 1) != 0)
    {
LABEL_5:
      v5 = a1[2];
      if (a1[1] == v5)
      {
        v11 = v27[0];
        v12 = v28;
        v27[0] = 0;
        v28 = 0;
        v13 = (uint64_t)*a1;
        v14 = **a1;
        *(_BYTE *)v13 = v11;
        v25 = v14;
        v15 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v12;
        v26 = v15;
        sub_207D20660(&v26, v14);
LABEL_17:
        v10 = 1;
        goto LABEL_18;
      }
      v6 = *((_QWORD *)v5 - 1);
      if (v6)
      {
        if (*(_BYTE *)v6 == 2)
        {
          v7 = *(_QWORD *)(v6 + 8);
          v8 = *(_QWORD *)(v7 + 8);
          if (v8 >= *(_QWORD *)(v7 + 16))
          {
            v9 = sub_207D1D328((void **)v7, v27);
          }
          else
          {
            *(_BYTE *)v8 = v27[0];
            *(_QWORD *)(v8 + 8) = v28;
            v27[0] = 0;
            v28 = 0;
            v9 = (char *)(v8 + 16);
          }
          *(_QWORD *)(v7 + 8) = v9;
          goto LABEL_17;
        }
        v16 = (unint64_t)(a1[8] - 1);
        v17 = *(_QWORD *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v16;
        if (((v17 >> v16) & 1) != 0)
        {
          v18 = v27[0];
          v19 = v28;
          v27[0] = 0;
          v28 = 0;
          v20 = a1[10];
          v21 = *v20;
          *v20 = v18;
          v22 = *((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = v19;
          v24 = v22;
          sub_207D20660(&v24, v21);
          goto LABEL_17;
        }
      }
    }
    v10 = 0;
LABEL_18:
    sub_207D20660(&v28, v27[0]);
    return v10;
  }
  return 0;
}

void sub_207D1EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1F010(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 5;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_207D20660(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_207D1D328((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_207D20660(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_207D20660(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_207D1F1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1F210(unsigned __int8 **a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31[8];
  uint64_t v32;
  char v33;
  int v34;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v31[0] = 3;
    v6 = operator new(0x18uLL);
    v7 = (uint64_t)v6;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_207CA40D8(v6, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v6 = *(_OWORD *)a2;
      v6[2] = *(_QWORD *)(a2 + 16);
    }
    v32 = v7;
    if ((a3 & 1) != 0)
      goto LABEL_9;
    v34 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v33 = 5;
    v9 = a1[15];
    if (!v9)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v9 + 48))(v9, &v34, &v33, v31) & 1) != 0)
    {
LABEL_9:
      v10 = a1[2];
      if (a1[1] == v10)
      {
        v15 = v31[0];
        v16 = v32;
        v31[0] = 0;
        v32 = 0;
        v17 = (uint64_t)*a1;
        v18 = **a1;
        *(_BYTE *)v17 = v15;
        v29 = v18;
        v19 = *(_QWORD *)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v16;
        v30 = v19;
        sub_207D20660(&v30, v18);
LABEL_20:
        v8 = 1;
        goto LABEL_21;
      }
      v11 = *((_QWORD *)v10 - 1);
      if (v11)
      {
        if (*(_BYTE *)v11 == 2)
        {
          v12 = *(_QWORD *)(v11 + 8);
          v13 = *(_QWORD *)(v12 + 8);
          if (v13 >= *(_QWORD *)(v12 + 16))
          {
            v14 = sub_207D1D328((void **)v12, v31);
          }
          else
          {
            *(_BYTE *)v13 = v31[0];
            *(_QWORD *)(v13 + 8) = v32;
            v31[0] = 0;
            v32 = 0;
            v14 = (char *)(v13 + 16);
          }
          *(_QWORD *)(v12 + 8) = v14;
          goto LABEL_20;
        }
        v20 = (unint64_t)(a1[8] - 1);
        v21 = *(_QWORD *)&a1[7][(v20 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v20;
        if (((v21 >> v20) & 1) != 0)
        {
          v22 = v31[0];
          v23 = v32;
          v31[0] = 0;
          v32 = 0;
          v24 = a1[10];
          v25 = *v24;
          *v24 = v22;
          v26 = *((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = v23;
          v28 = v26;
          sub_207D20660(&v28, v25);
          goto LABEL_20;
        }
      }
    }
    v8 = 0;
LABEL_21:
    sub_207D20660(&v32, v31[0]);
    return v8;
  }
  return 0;
}

void sub_207D1F434(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D1F448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1F460(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 6;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_207CA408C();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_207D20660(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_207D1D328((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_207D20660(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_207D20660(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_207D1F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_207D20660(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_207D1F664(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_24C072CF8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(_QWORD *)a1 = off_24C072DF8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

void sub_207D1F6BC(std::runtime_error *a1)
{
  void *v2;

  a1->__vftable = (std::runtime_error_vtbl *)off_24C072CF8;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  operator delete(v2);
}

void sub_207D1F6F0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, *(_QWORD *)(a1 + 16) + 1);
  v4 = std::string::insert(&v12, 0, " at line ", 9uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", column ", 9uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void sub_207D1F834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v26 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 48));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D1F8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v7 = (void *)sub_207D1E98C((uint64_t)exception, a4);
    __cxa_throw(v7, (struct type_info *)&unk_24C072D10, (void (*)(void *))sub_207D1D060);
  }
  return 0;
}

uint64_t sub_207D1F924(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  char *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  unsigned __int8 v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = 0;
    v10 = *a2;
    switch(*a2)
    {
      case 1u:
        v9 = operator new(0x18uLL);
        v9[2] = 0;
        v9[1] = 0;
        *v9 = v9 + 1;
        break;
      case 2u:
        v9 = operator new(0x18uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        break;
      case 3u:
        v9 = operator new(0x18uLL);
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        break;
      case 4u:
        LOBYTE(v22) = 0;
        v9 = v22;
        break;
      case 8u:
        v9 = operator new(0x20uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        *((_WORD *)v9 + 12) = 0;
        break;
      default:
        break;
    }
    v14 = (uint64_t)*a1;
    v15 = **a1;
    *(_BYTE *)v14 = v10;
    v21 = v15;
    v16 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v9;
    v22 = (_QWORD *)v16;
    sub_207D20660((uint64_t *)&v22, v15);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_BYTE **)(v5 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_207D1FB68((void **)v5, a2);
      }
      else
      {
        v7 = *a2;
        *v6 = v7;
        sub_207D18E38(v6 + 8, v7);
        v8 = v6 + 16;
        *(_QWORD *)(v5 + 8) = v6 + 16;
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v11 = 0;
      v12 = *a2;
      switch(*a2)
      {
        case 1u:
          v11 = operator new(0x18uLL);
          v11[2] = 0;
          v11[1] = 0;
          *v11 = v11 + 1;
          break;
        case 2u:
          v11 = operator new(0x18uLL);
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          break;
        case 3u:
          v11 = operator new(0x18uLL);
          *((_BYTE *)v11 + 23) = 0;
          *(_BYTE *)v11 = 0;
          break;
        case 4u:
          LOBYTE(v20) = 0;
          v11 = v20;
          break;
        case 8u:
          v11 = operator new(0x20uLL);
          v11[1] = 0;
          v11[2] = 0;
          *v11 = 0;
          *((_WORD *)v11 + 12) = 0;
          break;
        default:
          break;
      }
      v17 = a1[4];
      v18 = *v17;
      *v17 = v12;
      v19 = *((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v11;
      v20 = (_QWORD *)v19;
      sub_207D20660((uint64_t *)&v20, v18);
      return (uint64_t)a1[4];
    }
  }
}

void sub_207D1FB60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207D1FB68(void **a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  char *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v19;
  char *v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_207D159B0();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_207CA3AB8();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v19 = &v8[16 * v3];
  v20 = &v8[16 * v7];
  v9 = *a2;
  *v19 = v9;
  sub_207D18E38(v19 + 8, v9);
  v10 = v19;
  v11 = v19 + 16;
  v12 = (uint64_t *)*a1;
  v13 = (uint64_t *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v19;
    a1[1] = v11;
    a1[2] = v20;
    if (!v13)
      return v19 + 16;
    goto LABEL_17;
  }
  do
  {
    v14 = *((_BYTE *)v13 - 16);
    v13 -= 2;
    *(v10 - 16) = v14;
    v10 -= 16;
    *((_QWORD *)v10 + 1) = v13[1];
    *(_BYTE *)v13 = 0;
    v13[1] = 0;
  }
  while (v13 != v12);
  v13 = (uint64_t *)*a1;
  v15 = (uint64_t *)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v20;
  if (v15 != v13)
  {
    v16 = v15 - 1;
    do
    {
      v17 = v16 - 1;
      sub_207D20660(v16, *((unsigned __int8 *)v16 - 8));
      v16 -= 2;
    }
    while (v17 != v13);
  }
  if (v13)
LABEL_17:
    operator delete(v13);
  return v19 + 16;
}

void sub_207D1FCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D1D450((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_207D1FCC8(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_207D159B0();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 7;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_207D20660(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

char *sub_207D1FDEC(void **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_207D159B0();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 4;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_207D20660(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

char *sub_207D1FF10(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v3 = (uint64_t *)*a1;
  v2 = (uint64_t *)a1[1];
  v4 = ((char *)v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_207D159B0();
  v6 = (_BYTE *)a1[2] - (_BYTE *)v3;
  if (v6 >> 3 > v5)
    v5 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    sub_207CA3AB8();
  v7 = 16 * v5;
  v8 = (char *)operator new(16 * v5);
  v9 = &v8[16 * v4];
  v10 = &v8[v7];
  *v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v11 = v9 + 16;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v2)
      return v11;
    goto LABEL_13;
  }
  do
  {
    v12 = *((_BYTE *)v2 - 16);
    v2 -= 2;
    *(v9 - 16) = v12;
    v9 -= 16;
    *((_QWORD *)v9 + 1) = v2[1];
    *(_BYTE *)v2 = 0;
    v2[1] = 0;
  }
  while (v2 != v3);
  v2 = (uint64_t *)*a1;
  v13 = (uint64_t *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v2)
  {
    v14 = v13 - 1;
    do
    {
      v15 = v14 - 1;
      sub_207D20660(v14, *((unsigned __int8 *)v14 - 8));
      v14 -= 2;
    }
    while (v15 != v2);
  }
  if (v2)
LABEL_13:
    operator delete(v2);
  return v11;
}

char *sub_207D20028(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_207D159B0();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 5;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_207D20660(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

uint64_t sub_207D2014C(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = operator new(0x18uLL);
    v11 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_207CA40D8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)a2;
      v10[2] = *(_QWORD *)(a2 + 16);
    }
    v15 = (uint64_t)*a1;
    v16 = **a1;
    *(_BYTE *)v15 = 3;
    v23 = v16;
    v17 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v11;
    v24 = v17;
    sub_207D20660(&v24, v16);
    return (uint64_t)*a1;
  }
  else
  {
    v5 = *((_QWORD *)v4 - 1);
    if (*(_BYTE *)v5 == 2)
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      if (v7 >= *(_QWORD *)(v6 + 16))
      {
        v14 = sub_207D20364(v6, a2);
      }
      else
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_BYTE *)v7 = 3;
        v8 = operator new(0x18uLL);
        v9 = v8;
        if (*(char *)(a2 + 23) < 0)
        {
          sub_207CA40D8(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v8 = *(_OWORD *)a2;
          v8[2] = *(_QWORD *)(a2 + 16);
        }
        *(_QWORD *)(v7 + 8) = v9;
        v14 = (char *)(v7 + 16);
        *(_QWORD *)(v6 + 8) = v7 + 16;
      }
      *(_QWORD *)(v6 + 8) = v14;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v12 = operator new(0x18uLL);
      v13 = v12;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_207CA40D8(v12, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)a2;
        v12[2] = *(_QWORD *)(a2 + 16);
      }
      v19 = a1[4];
      v20 = *v19;
      *v19 = 3;
      v21 = *((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = v13;
      v22 = v21;
      sub_207D20660(&v22, v20);
      return (uint64_t)a1[4];
    }
  }
}

void sub_207D2031C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  operator delete(v2);
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_207D20334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D20348(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D2035C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_207D20364(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v22;

  v3 = *(uint64_t **)a1;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_207D159B0();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_207CA3AB8();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v5];
  v12 = &v10[16 * v9];
  *((_QWORD *)&v22 + 1) = v12;
  *((_QWORD *)v11 + 1) = 0;
  v13 = v11 + 8;
  *v11 = 3;
  v14 = operator new(0x18uLL);
  v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_207CA40D8(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *(uint64_t **)a1;
    v4 = *(uint64_t **)(a1 + 8);
    *v13 = v15;
    v16 = v11 + 16;
    *(_QWORD *)&v22 = v11 + 16;
    if (v4 == v3)
      goto LABEL_22;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v14[2] = *(_QWORD *)(a2 + 16);
    *v13 = v14;
    v16 = v11 + 16;
    *(_QWORD *)&v22 = v11 + 16;
    if (v4 == v3)
    {
LABEL_22:
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v12;
      if (!v3)
        return v16;
      goto LABEL_20;
    }
  }
  do
  {
    v17 = *((_BYTE *)v4 - 16);
    v4 -= 2;
    *(v11 - 16) = v17;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v4[1];
    *(_BYTE *)v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v3 = *(uint64_t **)a1;
  v18 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v22;
  v16 = (char *)v22;
  if (v18 != v3)
  {
    v19 = v18 - 1;
    do
    {
      v20 = v19 - 1;
      sub_207D20660(v19, *((unsigned __int8 *)v19 - 8));
      v19 -= 2;
    }
    while (v20 != v3);
  }
  if (v3)
LABEL_20:
    operator delete(v3);
  return v16;
}

void sub_207D2050C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  sub_207D1D450((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_207D20528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D1D450((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_207D2053C(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_207D159B0();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_207CA3AB8();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 6;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_207D20660(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

void sub_207D20660(uint64_t *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void **v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  char *v60;
  char *v61;
  int v62;
  unsigned __int8 v63;
  _QWORD *v64;
  void *__p;
  char *v66;
  char *v67;

  __p = 0;
  v66 = 0;
  v67 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    sub_207D20C80((uint64_t)&__p, *(_QWORD *)(*a1 + 16));
    v7 = *a1 + 8;
    v8 = *(_QWORD **)*a1;
    if (v8 != (_QWORD *)v7)
    {
      v9 = (unint64_t)v66;
      do
      {
        if (v9 >= (unint64_t)v67)
        {
          v9 = sub_207D1D328(&__p, v8 + 7);
        }
        else
        {
          *(_BYTE *)v9 = *((_BYTE *)v8 + 56);
          *(_QWORD *)(v9 + 8) = v8[8];
          *((_BYTE *)v8 + 56) = 0;
          v8[8] = 0;
          v9 += 16;
        }
        v66 = (char *)v9;
        v10 = (_QWORD *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v8[2];
            v12 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != (_QWORD *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_207D20C80((uint64_t)&__p, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4);
    v4 = *(_QWORD *)*a1;
    v5 = *(_QWORD *)(*a1 + 8);
    if (v4 != v5)
    {
      v6 = (unint64_t)v66;
      do
      {
        if (v6 < (unint64_t)v67)
        {
          *(_BYTE *)v6 = *(_BYTE *)v4;
          *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
          *(_BYTE *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_207D1D328(&__p, v4);
        }
        v66 = (char *)v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v14 = (char *)__p;
  v13 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v13 - 16);
      v64 = (_QWORD *)*((_QWORD *)v13 - 1);
      *(v13 - 16) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v15 = v66 - 16;
      sub_207D20660(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 == 1)
        break;
      if (v63 == 2)
      {
        v16 = (_QWORD *)*v64;
        v17 = v64 + 1;
        v18 = (_QWORD *)v64[1];
        if ((_QWORD *)*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *v15 = *(_BYTE *)v16;
              *((_QWORD *)v15 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v15 += 16;
            }
            else
            {
              v19 = (char *)__p;
              v20 = (v15 - (_BYTE *)__p) >> 4;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60)
                goto LABEL_105;
              v22 = v67 - (_BYTE *)__p;
              if ((v67 - (_BYTE *)__p) >> 3 > v21)
                v21 = v22 >> 3;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v23 = 0xFFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23 >> 60)
                goto LABEL_106;
              v24 = (char *)operator new(16 * v23);
              v25 = &v24[16 * v20];
              *v25 = *(_BYTE *)v16;
              *((_QWORD *)v25 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v26 = v66;
              v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                  *v26 = 0;
                  *((_QWORD *)v26 + 1) = 0;
                }
                while (v26 != v19);
                v19 = v66;
              }
              v29 = &v24[16 * v23];
              v30 = (char *)__p;
              v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                v31 = v19 - 8;
                do
                {
                  v32 = v31 - 8;
                  sub_207D20660(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30)
                operator delete(v30);
            }
            v66 = v15;
            v16 += 2;
          }
          while (v16 != v18);
          v16 = (_QWORD *)*v64;
          v17 = v64 + 1;
          v50 = v64[1];
          if (v50 == *v64)
          {
            *v17 = v50;
            goto LABEL_24;
          }
          v51 = v50 - 8;
          do
          {
            v52 = (_QWORD *)(v51 - 8);
            sub_207D20660(v51, *(unsigned __int8 *)(v51 - 8));
            v51 -= 16;
          }
          while (v52 != v16);
        }
        *v17 = v16;
      }
LABEL_24:
      sub_207D20660(&v64, v63);
      v14 = (char *)__p;
      v13 = v66;
      if (__p == v66)
      {
        v3 = v62;
        goto LABEL_83;
      }
    }
    v33 = (uint64_t)v64;
    v34 = v64 + 1;
    v35 = (_QWORD *)*v64;
    if ((_QWORD *)*v64 == v64 + 1)
    {
LABEL_80:
      sub_207D1E0B8(v33, *(char **)(v33 + 8));
      *(_QWORD *)v33 = v33 + 8;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_24;
    }
    while (1)
    {
      if (v15 < v67)
      {
        *v15 = *((_BYTE *)v35 + 56);
        *((_QWORD *)v15 + 1) = v35[8];
        *((_BYTE *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        v66 = v15;
        v36 = (_QWORD *)v35[1];
        if (v36)
          goto LABEL_70;
        goto LABEL_72;
      }
      v37 = (char *)__p;
      v38 = (v15 - (_BYTE *)__p) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
LABEL_105:
        sub_207D159B0();
      v40 = v67 - (_BYTE *)__p;
      if ((v67 - (_BYTE *)__p) >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41 >> 60)
LABEL_106:
        sub_207CA3AB8();
      v42 = (char *)operator new(16 * v41);
      v43 = &v42[16 * v38];
      *v43 = *((_BYTE *)v35 + 56);
      *((_QWORD *)v43 + 1) = v35[8];
      *((_BYTE *)v35 + 56) = 0;
      v35[8] = 0;
      v44 = v43 + 16;
      if (v15 == v37)
      {
        __p = v43;
        v66 = v43 + 16;
        v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((_QWORD *)v43 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v37);
        v15 = (char *)__p;
        v46 = v66;
        __p = v43;
        v66 = v44;
        v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          v47 = v46 - 8;
          do
          {
            v48 = v47 - 8;
            sub_207D20660(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          v15 = v44;
          v66 = v44;
          v36 = (_QWORD *)v35[1];
          if (v36)
            goto LABEL_70;
          goto LABEL_72;
        }
      }
      operator delete(v15);
      v15 = v44;
      v66 = v44;
      v36 = (_QWORD *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          v49 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        v49 = (_QWORD *)v35[2];
        v12 = *v49 == (_QWORD)v35;
        v35 = v49;
      }
      while (!v12);
LABEL_49:
      v35 = v49;
      if (v49 == v34)
      {
        v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_83:
  switch(v3)
  {
    case 0:
      sub_207D1E0B8(*a1, *(char **)(*a1 + 8));
      goto LABEL_96;
    case 1:
      v53 = (void **)*a1;
      v55 = *(void **)*a1;
      if (!v55)
        goto LABEL_97;
      v56 = v53[1];
      v54 = *(void **)*a1;
      if (v56 != v55)
      {
        v57 = (uint64_t)v56 - 8;
        do
        {
          v58 = (void *)(v57 - 8);
          sub_207D20660(v57, *(unsigned __int8 *)(v57 - 8));
          v57 -= 16;
        }
        while (v58 != v55);
        v54 = *v53;
      }
      v53[1] = v55;
      break;
    case 2:
      v53 = (void **)*a1;
      if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
        goto LABEL_97;
      v54 = *v53;
      break;
    case 7:
      v53 = (void **)*a1;
      v54 = *(void **)*a1;
      if (!v54)
        goto LABEL_97;
      v53[1] = v54;
      break;
    default:
      goto LABEL_98;
  }
  operator delete(v54);
LABEL_96:
  v53 = (void **)*a1;
LABEL_97:
  operator delete(v53);
  v14 = (char *)__p;
LABEL_98:
  if (v14)
  {
    v59 = v14;
    if (v66 != v14)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_207D20660(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      v59 = __p;
    }
    v66 = v14;
    operator delete(v59);
  }
}

void sub_207D20C80(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_207D159B0();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_207D20660(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

char *sub_207D20D64(char *result, _BYTE *a2)
{
  char *v2;
  void *exception;
  char *v4;
  std::string v5;
  std::string v6;

  v2 = result;
  if (*result != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v4 = (char *)sub_207D1E770(v2);
    sub_207C96EE8(&v5, v4);
    sub_207C96E8C("type must be BOOLean, but is ", &v5, &v6);
    sub_207D1E5F8(302, (uint64_t)&v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  *a2 = result[8];
  return result;
}

void sub_207D20E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_207D20E6C(uint64_t a1, _QWORD *a2)
{
  double result;
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  switch(*(_BYTE *)a1)
  {
    case 4:
      *a2 = *(unsigned __int8 *)(a1 + 8);
      break;
    case 5:
    case 6:
      *a2 = *(_QWORD *)(a1 + 8);
      break;
    case 7:
      result = *(double *)(a1 + 8);
      *a2 = (unint64_t)result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v5 = (char *)sub_207D1E770((char *)a1);
      sub_207C96EE8(&v6, v5);
      sub_207C96E8C("type must be number, but is ", &v6, &v7);
      sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return result;
}

void sub_207D20F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_207D20FDC(char *a1, void **a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770(a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("type must be array, but is ", &v6, &v7);
    sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_207D210E0((unsigned __int8 *)a1, a2);
}

void sub_207D21080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_207D210E0(unsigned __int8 *a1, void **a2)
{
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  void **v8;
  void **v9;
  void *v10;
  double result;
  unsigned __int8 *v12;
  _QWORD *v13;
  __int128 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  void *v20;

  v19 = 0uLL;
  v20 = 0;
  v4 = *a1;
  if (*a1)
  {
    if ((_DWORD)v4 == 1)
    {
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    }
    else if ((_DWORD)v4 == 2)
    {
      v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    }
    else
    {
      v4 = 1;
    }
  }
  sub_207CA44DC((char **)&v19, v4);
  v15 = a1;
  v16 = 0;
  v17 = 0;
  v18 = 0x8000000000000000;
  v5 = *a1;
  if (*a1)
  {
    if (v5 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)a1 + 1);
      v17 = *v7;
      v12 = a1;
      v13 = 0;
      *((_QWORD *)&v14 + 1) = 0x8000000000000000;
      *(_QWORD *)&v14 = v7[1];
      goto LABEL_15;
    }
    if (v5 == 1)
    {
      v6 = (uint64_t *)*((_QWORD *)a1 + 1);
      v16 = *v6;
      v14 = xmmword_208233370;
      v12 = a1;
      v13 = v6 + 1;
      goto LABEL_15;
    }
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  v12 = a1;
  v13 = 0;
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = 1;
LABEL_15:
  sub_207D21268(&v15, &v12, (void ***)&v19, *((uint64_t *)&v19 + 1));
  v8 = (void **)*a2;
  if (*a2)
  {
    v9 = (void **)a2[1];
    v10 = *a2;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a2;
    }
    a2[1] = v8;
    operator delete(v10);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  a2[2] = v20;
  return result;
}

void sub_207D21254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207C99DE0((void **)va);
  _Unwind_Resume(a1);
}

void ***sub_207D21268(unsigned __int8 **a1, unsigned __int8 **a2, void ***a3, uint64_t a4)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  void **v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  __n128 __p;
  uint64_t v17;

  v6 = a2;
  v7 = a1;
  while (!sub_207D23444(a1, a2))
  {
    v8 = (void **)sub_207D21398((uint64_t)v7);
    v17 = 0;
    __p = 0uLL;
    sub_207D21A34(v8, (uint64_t)&__p);
    v9 = sub_207D21500(a3, a4, &__p);
    if (SHIBYTE(v17) < 0)
    {
      operator delete((void *)__p.n128_u64[0]);
      v10 = **v7;
      if (v10 == 2)
      {
LABEL_15:
        v7[2] += 16;
        goto LABEL_3;
      }
    }
    else
    {
      v10 = **v7;
      if (v10 == 2)
        goto LABEL_15;
    }
    if (v10 == 1)
    {
      v11 = v7[1];
      v12 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v7[1] = v13;
    }
    else
    {
      ++v7[3];
    }
LABEL_3:
    a4 = v9 + 24;
    a1 = v7;
    a2 = v6;
  }
  return a3;
}

void sub_207D21378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_207D21398(uint64_t a1)
{
  _BYTE *result;
  int v3;
  void *v4;
  void *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 56);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v6, "cannot get value");
    sub_207D1E424(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v6, "cannot get value");
    sub_207D1E424(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  return result;
}

void sub_207D214BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D21500(void ***a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  __n128 v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  uint64_t v24;
  __int128 v25;
  void **v26;
  void **v27;
  __int128 v28;
  void **v29;
  char *v30;
  void **v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  __n128 v35;
  void **v37;
  void **v38;
  void **v39;
  char *v40;
  _QWORD *v41;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = (a2 - (uint64_t)*a1) / 24;
  v8 = (uint64_t)&(*a1)[3 * v7];
  v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      sub_207CA420C();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v6) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v15;
    v41 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        sub_207CA3AB8();
      v18 = (void **)operator new(24 * v17);
    }
    else
    {
      v18 = 0;
    }
    v37 = v18;
    v38 = &v18[3 * v7];
    v39 = v38;
    v40 = (char *)&v18[3 * v17];
    sub_207D21828((uint64_t)&v37, a3);
    v20 = v38;
    v21 = *a1;
    v22 = v38;
    if (*a1 != (void **)v8)
    {
      v23 = v38;
      v24 = v8;
      do
      {
        v22 = v23 - 3;
        v25 = *(_OWORD *)(v24 - 24);
        *(v23 - 1) = *(void **)(v24 - 8);
        *(_OWORD *)(v23 - 3) = v25;
        *(_QWORD *)(v24 - 16) = 0;
        *(_QWORD *)(v24 - 8) = 0;
        *(_QWORD *)(v24 - 24) = 0;
        v23 -= 3;
        v24 -= 24;
      }
      while ((void **)v24 != v21);
    }
    v38 = v22;
    v26 = a1[1];
    v27 = v39;
    if (v26 != (void **)v8)
    {
      do
      {
        v28 = *(_OWORD *)v8;
        v27[2] = *(void **)(v8 + 16);
        *(_OWORD *)v27 = v28;
        v27 += 3;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        v8 += 24;
      }
      while ((void **)v8 != v26);
      v22 = v38;
      v8 = (uint64_t)a1[1];
    }
    v29 = *a1;
    *a1 = v22;
    a1[1] = v27;
    v30 = (char *)a1[2];
    a1[2] = (void **)v40;
    v39 = (void **)v8;
    v40 = v30;
    v37 = v29;
    v38 = v29;
    if ((void **)v8 == v29)
    {
      if (!v8)
        return (uint64_t)v20;
    }
    else
    {
      do
      {
        v31 = (void **)(v8 - 24);
        v39 = (void **)(v8 - 24);
        if (*(char *)(v8 - 1) < 0)
        {
          operator delete(*v31);
          v31 = v39;
        }
        v8 = (uint64_t)v31;
      }
      while (v31 != v29);
      v8 = (uint64_t)v37;
      if (!v37)
        return (uint64_t)v20;
    }
    operator delete((void *)v8);
    return (uint64_t)v20;
  }
  if (v8 == v5)
  {
    v19 = *a3;
    *(_QWORD *)(v8 + 16) = a3[1].n128_u64[0];
    *(__n128 *)v8 = v19;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    a1[1] = (void **)(v8 + 24);
    return v8;
  }
  v10 = v8 + 24;
  v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    v12 = v5 - 24;
    v13 = a1[1];
    do
    {
      v14 = *(_OWORD *)v12;
      v13[2] = *(void **)(v12 + 16);
      *(_OWORD *)v13 = v14;
      v13 += 3;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if (v5 == v10)
      goto LABEL_39;
LABEL_35:
    v32 = 8 * ((uint64_t)(v5 - v10) >> 3);
    do
    {
      if (*(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      v33 = (__int128 *)(v8 + v32 - 24);
      v34 = *v33;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + v32 - 8);
      *(_OWORD *)v11 = v34;
      v11 -= 24;
      *(_BYTE *)(v8 + v32 - 1) = 0;
      *(_BYTE *)v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_39;
  }
  a1[1] = (void **)v5;
  if (v5 != v10)
    goto LABEL_35;
LABEL_39:
  if (*(char *)(v8 + 23) < 0)
    operator delete(*(void **)v8);
  v35 = *a3;
  *(_QWORD *)(v8 + 16) = a3[1].n128_u64[0];
  *(__n128 *)v8 = v35;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return v8;
}

void sub_207D21814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA4610((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_207D21828(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  __n128 result;

  v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    v5 = *(__n128 **)a1;
    v6 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v6 <= *(_QWORD *)a1)
    {
      v14 = 0x5555555555555556 * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5)
        v14 = 1;
      if (v14 >= 0xAAAAAAAAAAAAAABLL)
        sub_207CA3AB8();
      v15 = v14 >> 2;
      v16 = 24 * v14;
      v17 = (char *)operator new(24 * v14);
      v18 = &v17[24 * v15];
      v19 = &v17[v16];
      if (v4 == v6)
      {
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v18;
        *(_QWORD *)(a1 + 24) = v19;
      }
      else
      {
        v20 = ((char *)v4 - (char *)v6) / 24;
        v21 = &v18[24 * v20];
        v22 = 24 * v20;
        v23 = 24 * v15;
        do
        {
          v24 = &v17[v23];
          v25 = *v6;
          *((_QWORD *)v24 + 2) = v6[1].n128_u64[0];
          *(__n128 *)v24 = v25;
          v6->n128_u64[1] = 0;
          v6[1].n128_u64[0] = 0;
          v6->n128_u64[0] = 0;
          v6 = (__n128 *)((char *)v6 + 24);
          v23 += 24;
          v22 -= 24;
        }
        while (v22);
        v5 = *(__n128 **)a1;
        v26 = *(_QWORD *)(a1 + 8);
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v19;
        while (v27 != v26)
        {
          if (*(char *)(v27 - 1) < 0)
            operator delete(*(void **)(v27 - 24));
          v27 -= 24;
        }
      }
      if (v5)
        operator delete(v5);
      v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      if (v6 == v4)
      {
        v28 = (__n128 *)((char *)v6 - 24 * v9);
      }
      else
      {
        v11 = -24 * v9;
        do
        {
          v13 = (char *)v6 + v11;
          if (v6[1].n128_i8[v11 + 7] < 0)
            operator delete(*(void **)v13);
          v12 = *v6;
          *((_QWORD *)v13 + 2) = v6[1].n128_u64[0];
          *(__n128 *)v13 = v12;
          v6[1].n128_u8[7] = 0;
          v6->n128_u8[0] = 0;
          v6 = (__n128 *)((char *)v6 + 24);
        }
        while (v6 != v4);
        v4 = *(__n128 **)(a1 + 8);
        v28 = (__n128 *)((char *)v6 + 24 * v10);
      }
      *(_QWORD *)(a1 + 8) = (char *)v4 + 24 * v10;
      *(_QWORD *)(a1 + 16) = v28;
      v4 = v28;
    }
  }
  result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 16) += 24;
  return result;
}

void **sub_207D21A34(void **result, uint64_t a2)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  __int128 v5;
  void *v6;
  size_t v7;
  void *exception;
  char *v9;
  std::string v10;
  std::string v11;

  v2 = (char *)result;
  if (*(_BYTE *)result != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v9 = (char *)sub_207D1E770(v2);
    sub_207C96EE8(&v10, v9);
    sub_207C96E8C("type must be string, but is ", &v10, &v11);
    sub_207D1E5F8(302, (uint64_t)&v11, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  v3 = (unsigned __int8 *)result[1];
  if (v3 != (unsigned __int8 *)a2)
  {
    v4 = v3[23];
    if (*(char *)(a2 + 23) < 0)
    {
      if ((v4 & 0x80u) == 0)
        v6 = result[1];
      else
        v6 = *(void **)v3;
      if ((v4 & 0x80u) == 0)
        v7 = v3[23];
      else
        v7 = *((_QWORD *)v3 + 1);
      return sub_207CC2244((void **)a2, v6, v7);
    }
    else if ((v3[23] & 0x80) != 0)
    {
      return (void **)sub_207CC2180((_QWORD *)a2, *(void **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

void sub_207D21B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207D21BC0(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  void **v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void **v14;
  void **v15;
  void **v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v4 = (__int128 *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v5);
  v6 = *v4;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  v7 = (void **)(a1 + 32);
  v8 = (__int128 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0)
        operator delete(*v7);
      v9 = *v8;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)v7 = v9;
      *(_BYTE *)(a2 + 55) = 0;
      *(_BYTE *)(a2 + 32) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v7);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v10 = *v8;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v7 = v10;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v11 = *(_OWORD *)(a2 + 64);
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = (void **)(a1 + 120);
  v15 = *(void ***)(a1 + 120);
  *(_QWORD *)(a1 + 110) = *(_QWORD *)(a2 + 110);
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 64) = v11;
  if (v15)
  {
    v16 = *(void ***)(a1 + 128);
    v17 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v16 - 1) < 0)
          operator delete(*(v16 - 3));
        v16 -= 3;
      }
      while (v16 != v15);
      v17 = *v14;
    }
    *(_QWORD *)(a1 + 128) = v15;
    operator delete(v17);
    *v14 = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v18 = *(_OWORD *)(a2 + 169);
  v19 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v19;
  *(_OWORD *)(a1 + 169) = v18;
  v20 = (void **)(a1 + 192);
  v21 = (__int128 *)(a2 + 192);
  if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216))
  {
    if (*(_BYTE *)(a1 + 216))
    {
      if (*(char *)(a1 + 215) < 0)
        operator delete(*v20);
      v22 = *v21;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_OWORD *)v20 = v22;
      *(_BYTE *)(a2 + 215) = 0;
      *(_BYTE *)(a2 + 192) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 216))
  {
    if (*(char *)(a1 + 215) < 0)
      operator delete(*v20);
    *(_BYTE *)(a1 + 216) = 0;
  }
  else
  {
    v23 = *v21;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)v20 = v23;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_QWORD *)v21 = 0;
    *(_BYTE *)(a1 + 216) = 1;
  }
  v24 = a1 + 232;
  sub_207D04974(a1 + 224, *(char **)(a1 + 232));
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v25 = (_QWORD *)(a2 + 232);
  v26 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v26;
  v27 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v27;
  if (v27)
  {
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(a2 + 224) = v25;
    *v25 = 0;
    *(_QWORD *)(a2 + 240) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 224) = v24;
  }
  v28 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v28;
  return a1;
}

float sub_207D21E30(char *a1, float *a2)
{
  float result;
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  switch(*a1)
  {
    case 4:
      result = 0.0;
      if (a1[8])
        result = 1.0;
      *a2 = result;
      break;
    case 5:
      result = (float)*((uint64_t *)a1 + 1);
      *a2 = result;
      break;
    case 6:
      result = (float)*((unint64_t *)a1 + 1);
      *a2 = result;
      break;
    case 7:
      result = *((double *)a1 + 1);
      *a2 = result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v5 = (char *)sub_207D1E770(a1);
      sub_207C96EE8(&v6, v5);
      sub_207C96E8C("type must be number, but is ", &v6, &v7);
      sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return result;
}

void sub_207D21F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (v21)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207D21FD4(uint64_t a1, char *__s)
{
  _QWORD *v2;
  uint64_t *v3;
  size_t v5;
  int v6;
  uint64_t *v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t *v11;
  _QWORD *v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  uint64_t *v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = strlen(__s);
  while (1)
  {
    while (1)
    {
      v6 = *((char *)v3 + 55);
      v7 = v6 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v8 = v6 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v9 = v5 >= v8 ? v8 : v5;
      v10 = memcmp(v7, __s, v9);
      if (!v10)
        break;
      if (v10 < 0)
        goto LABEL_6;
LABEL_3:
      v2 = v3;
      v3 = (uint64_t *)*v3;
      if (!v3)
        return 0;
    }
    if (v8 > v5)
      goto LABEL_3;
    if (v8 >= v5)
      break;
LABEL_6:
    v3 = (uint64_t *)v3[1];
    if (!v3)
      return 0;
  }
  v11 = (uint64_t *)*v3;
  v12 = v3;
  if (*v3)
  {
    v12 = v3;
    while (1)
    {
      v13 = *((char *)v11 + 55);
      if (v13 >= 0)
        v14 = v11 + 4;
      else
        v14 = (const void *)v11[4];
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v11 + 55);
      else
        v15 = v11[5];
      if (v5 >= v15)
        v16 = v15;
      else
        v16 = v5;
      v17 = memcmp(v14, __s, v16);
      if (v17)
      {
        if (v17 < 0)
          goto LABEL_23;
LABEL_37:
        v12 = v11;
        v11 = (uint64_t *)*v11;
        if (!v11)
          break;
      }
      else
      {
        if (v15 >= v5)
          goto LABEL_37;
LABEL_23:
        v11 = (uint64_t *)v11[1];
        if (!v11)
          break;
      }
    }
  }
  v18 = (uint64_t *)v3[1];
  if (v18)
  {
    while (1)
    {
      v19 = *((char *)v18 + 55);
      if (v19 >= 0)
        v20 = v18 + 4;
      else
        v20 = (const void *)v18[4];
      if (v19 >= 0)
        v21 = *((unsigned __int8 *)v18 + 55);
      else
        v21 = v18[5];
      if (v5 >= v21)
        v22 = v21;
      else
        v22 = v5;
      v23 = memcmp(v20, __s, v22);
      if (v23)
      {
        if (v23 < 0)
          goto LABEL_40;
LABEL_54:
        v2 = v18;
        v18 = (uint64_t *)*v18;
        if (!v18)
          break;
      }
      else
      {
        if (v21 > v5)
          goto LABEL_54;
LABEL_40:
        v18 = (uint64_t *)v18[1];
        if (!v18)
          break;
      }
    }
  }
  if (v12 == v2)
    return 0;
  result = 0;
  do
  {
    v25 = (_QWORD *)v12[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        v26 = (_QWORD *)v12[2];
        v27 = *v26 == (_QWORD)v12;
        v12 = v26;
      }
      while (!v27);
    }
    ++result;
    v12 = v26;
  }
  while (v26 != v2);
  return result;
}

uint64_t *sub_207D221B8(uint64_t a1, const char **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  const char *v4;
  size_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  v5 = strlen(*a2);
  v6 = v2;
  do
  {
    while (1)
    {
      v7 = *((char *)v3 + 55);
      v8 = v7 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v9 = v7 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v10 = v5 >= v9 ? v9 : v5;
      v11 = memcmp(v8, v4, v10);
      if (v11)
        break;
      if (v9 >= v5)
        goto LABEL_17;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_18;
    }
    if (v11 < 0)
      goto LABEL_3;
LABEL_17:
    v6 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_18:
  if (v6 == v2)
    return v2;
  v12 = *((char *)v6 + 55);
  if (v12 >= 0)
    v13 = v6 + 4;
  else
    v13 = (const void *)v6[4];
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)v6 + 55);
  else
    v14 = v6[5];
  if (v5 >= v14)
    v15 = v14;
  else
    v15 = v5;
  v16 = memcmp(v13, v4, v15);
  if (!v16)
  {
    if (v14 <= v5)
      return v6;
    return v2;
  }
  if ((v16 & 0x80000000) == 0)
    return v2;
  return v6;
}

double sub_207D222B4(char *a1, void **a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770(a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("type must be array, but is ", &v6, &v7);
    sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_207D223B8((unsigned __int8 *)a1, a2);
}

void sub_207D22358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_207D223B8(unsigned __int8 *a1, void **a2)
{
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  double result;
  unsigned __int8 *v15;
  _QWORD *v16;
  __int128 v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  void *v23;

  v22 = 0uLL;
  v23 = 0;
  v4 = *a1;
  if (*a1)
  {
    if ((_DWORD)v4 == 1)
    {
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    }
    else if ((_DWORD)v4 == 2)
    {
      v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    }
    else
    {
      v4 = 1;
    }
  }
  sub_207D22544((uint64_t)&v22, v4);
  v18 = a1;
  v19 = 0;
  v20 = 0;
  v21 = 0x8000000000000000;
  v5 = *a1;
  if (*a1)
  {
    if (v5 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)a1 + 1);
      v20 = *v7;
      v15 = a1;
      v16 = 0;
      *((_QWORD *)&v17 + 1) = 0x8000000000000000;
      *(_QWORD *)&v17 = v7[1];
      goto LABEL_15;
    }
    if (v5 == 1)
    {
      v6 = (uint64_t *)*((_QWORD *)a1 + 1);
      v19 = *v6;
      v17 = xmmword_208233370;
      v15 = a1;
      v16 = v6 + 1;
      goto LABEL_15;
    }
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  v15 = a1;
  v16 = 0;
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = 1;
LABEL_15:
  sub_207D22668(&v18, &v15, (char **)&v22, *((uint64_t *)&v22 + 1));
  v8 = (char *)*a2;
  if (*a2)
  {
    v9 = (char *)a2[1];
    v10 = *a2;
    if (v9 != v8)
    {
      v11 = (char *)a2[1];
      do
      {
        v13 = (void *)*((_QWORD *)v11 - 3);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *((_QWORD *)v9 - 2) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = *a2;
    }
    a2[1] = v8;
    operator delete(v10);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *(double *)&v22;
  *(_OWORD *)a2 = v22;
  a2[2] = v23;
  return result;
}

void sub_207D22530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_207D14AB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_207D22544(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_207D159B0();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char **sub_207D22668(unsigned __int8 **a1, unsigned __int8 **a2, char **a3, uint64_t a4)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  char *v8;
  char *v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  __n128 __p;
  uint64_t v17;

  v6 = a2;
  v7 = a1;
  while (!sub_207D23444(a1, a2))
  {
    v8 = sub_207D21398((uint64_t)v7);
    v17 = 0;
    __p = 0uLL;
    sub_207D227F4(v8, (uint64_t)&__p);
    v9 = sub_207D22EB0(a3, a4, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v10 = **v7;
    if (v10 == 2)
    {
      v7[2] += 16;
    }
    else if (v10 == 1)
    {
      v11 = v7[1];
      v12 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v7[1] = v13;
    }
    else
    {
      ++v7[3];
    }
    a4 = (uint64_t)(v9 + 24);
    a1 = v7;
    a2 = v6;
  }
  return a3;
}

void sub_207D22768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D22788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_207D227F4(char *a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_207D1E770(a1);
    sub_207C96EE8(&v6, v5);
    sub_207C96E8C("type must be array, but is ", &v6, &v7);
    sub_207D1E5F8(302, (uint64_t)&v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D68, (void (*)(void *))sub_207D1E798);
  }
  return sub_207D228F8((unsigned __int8 *)a1, a2);
}

void sub_207D22898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double sub_207D228F8(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  double result;
  unsigned __int8 *v17;
  _QWORD *v18;
  __int128 v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  int v26;

  v24 = 0uLL;
  v25 = 0;
  v4 = *a1;
  if (v4 == 2)
  {
    v6 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    if (v6)
      goto LABEL_6;
  }
  else
  {
    if (v4 != 1)
    {
      if (!*a1)
      {
        v5 = 0;
        v20 = a1;
        v21 = 0;
        v22 = 0;
        v23 = 1;
        goto LABEL_17;
      }
      v6 = 1;
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    if (v6)
    {
LABEL_6:
      if (v6 >> 62)
        sub_207D0CD58();
LABEL_11:
      v5 = (char *)operator new(4 * v6);
      *(_QWORD *)&v24 = v5;
      *((_QWORD *)&v24 + 1) = v5;
      v25 = &v5[4 * v6];
      v20 = a1;
      v21 = 0;
      v22 = 0;
      v23 = 0x8000000000000000;
      goto LABEL_12;
    }
  }
  v5 = 0;
  v20 = a1;
  v21 = 0;
  v22 = 0;
  v23 = 0x8000000000000000;
LABEL_12:
  if (v4 == 2)
  {
    v8 = (uint64_t *)*((_QWORD *)a1 + 1);
    v22 = *v8;
    v17 = a1;
    v18 = 0;
    *((_QWORD *)&v19 + 1) = 0x8000000000000000;
    *(_QWORD *)&v19 = v8[1];
    goto LABEL_19;
  }
  if (v4 == 1)
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 1);
    v21 = (_QWORD *)*v7;
    v19 = xmmword_208233370;
    v17 = a1;
    v18 = v7 + 1;
    goto LABEL_19;
  }
  v23 = 0;
LABEL_17:
  v17 = a1;
  v18 = 0;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = 1;
LABEL_19:
  while (!sub_207D23444(&v20, &v17))
  {
    v9 = sub_207D21398((uint64_t)&v20);
    v26 = 0;
    sub_207D21E30(v9, (float *)&v26);
    v5 = sub_207D22B40((void **)&v24, v5, &v26) + 4;
    v10 = *v20;
    if (v10 == 2)
    {
      v22 += 16;
    }
    else if (v10 == 1)
    {
      v11 = v21;
      v12 = (_QWORD *)v21[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v21 = v13;
    }
    else
    {
      ++v23;
    }
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v24;
  *(_OWORD *)a2 = v24;
  *(_QWORD *)(a2 + 16) = v25;
  return result;
}

void sub_207D22B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_207D22B40(void **a1, _BYTE *a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  char *v39;
  int64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  int v51;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    v11 = v5 - (_QWORD)(v9 + 4);
    v12 = v11 >> 2;
    v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      v17 = a1[1];
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = v14 + v6 + 4;
      if (v5 > v15)
        v15 = (unint64_t)a1[1];
      v16 = v15 + ~v6 - v14;
      if (v16 >= 0x2C)
      {
        v17 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v6] >= 0x20)
        {
          v45 = (v16 >> 2) + 1;
          v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          v13 = (int *)((char *)v13 + v46);
          v17 = (_DWORD *)(v5 + v46);
          v47 = (_OWORD *)(v5 + 16);
          v48 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
          v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v50 = *v48;
            *(v47 - 1) = *(v48 - 1);
            *v47 = v50;
            v47 += 2;
            v48 += 2;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = a1[1];
      }
      do
      {
        v51 = *v13++;
        *v17++ = v51;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_49:
    a1[1] = v17;
    if ((char *)v5 != v9 + 4)
      memmove((void *)(v5 - 4 * v12), v9, v11);
    *(_DWORD *)v9 = *a3;
    return v9;
  }
  v18 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v18 >> 62)
    sub_207D0CD58();
  v20 = v10 - v6;
  if (v20 >> 1 > v18)
    v18 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 62)
      sub_207CA3AB8();
    v22 = (char *)operator new(4 * v21);
    v23 = &v22[4 * v8];
    v24 = &v22[4 * v21];
    if (v8 != v21)
      goto LABEL_24;
  }
  else
  {
    v22 = 0;
    v23 = (char *)(4 * v8);
    v24 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v44 = 1;
    else
      v44 = v7 >> 1;
    if (v44 >> 62)
      sub_207CA3AB8();
    v23 = (char *)operator new(4 * v44);
    v24 = &v23[4 * v44];
    if (v22)
    {
      operator delete(v22);
      v24 = &v23[4 * v44];
      v26 = (char *)*a1;
      *(_DWORD *)v23 = *a3;
      v27 = v23 + 4;
      v28 = v23;
      if (v26 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= 4 * (v25 >> 1);
  }
LABEL_24:
  v26 = (char *)v6;
  *(_DWORD *)v23 = *a3;
  v27 = v23 + 4;
  v28 = v23;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v30 = v29 - v26 - 4;
    v31 = v9;
    v28 = v23;
    if (v30 < 0x2C)
      goto LABEL_58;
    v31 = v9;
    v28 = v23;
    if ((unint64_t)(v29 - v23) < 0x20)
      goto LABEL_58;
    v32 = (v30 >> 2) + 1;
    v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v9[-v33];
    v28 = &v23[-v33];
    v34 = v23 - 16;
    v35 = (__int128 *)(v6 + 4 * v8 - 16);
    v36 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 8;
    }
    while (v36);
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        v38 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v28 - 1) = v38;
        v28 -= 4;
      }
      while (v31 != v26);
    }
  }
LABEL_31:
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
  {
    v41 = v9;
    v42 = v39 - v9;
    v43 = v24;
    memmove(v27, v41, v42);
    v24 = v43;
    v26 = (char *)*a1;
  }
  *a1 = v28;
  a1[1] = &v27[v40];
  a1[2] = v24;
  if (v26)
    operator delete(v26);
  return v23;
}

void sub_207D22E98(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *sub_207D22EB0(char **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = (a2 - (uint64_t)*a1) / 24;
  v8 = &(*a1)[24 * v7];
  v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_207D159B0();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v6) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    v38 = a1 + 2;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        sub_207CA3AB8();
      v17 = (char *)operator new(24 * v16);
    }
    else
    {
      v17 = 0;
    }
    v34 = v17;
    v35 = &v17[24 * v7];
    v36 = v35;
    v37 = &v17[24 * v16];
    sub_207D23230((uint64_t)&v34, a3);
    v18 = v35;
    v19 = *a1;
    v20 = v35;
    if (*a1 != v8)
    {
      v20 = v35;
      v21 = v8;
      do
      {
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        v20 -= 24;
        *((_QWORD *)v20 + 2) = 0;
        v22 = *(_OWORD *)(v21 - 24);
        v21 -= 24;
        *(_OWORD *)v20 = v22;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = 0;
      }
      while (v21 != v19);
    }
    v35 = v20;
    v23 = a1[1];
    v24 = v36;
    if (v23 != v8)
    {
      do
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        *(_OWORD *)v24 = *(_OWORD *)v8;
        *((_QWORD *)v24 + 2) = *((_QWORD *)v8 + 2);
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        v24 += 24;
        v8 += 24;
      }
      while (v8 != v23);
      v20 = v35;
      v8 = a1[1];
    }
    v25 = *a1;
    *a1 = v20;
    a1[1] = v24;
    v26 = a1[2];
    a1[2] = v37;
    v36 = v8;
    v37 = v26;
    v34 = v25;
    v35 = v25;
    if (v8 == v25)
    {
      if (!v8)
        return v18;
    }
    else
    {
      do
      {
        while (1)
        {
          v28 = v8 - 24;
          v27 = (void *)*((_QWORD *)v8 - 3);
          v36 = v8 - 24;
          if (!v27)
            break;
          *((_QWORD *)v8 - 2) = v27;
          operator delete(v27);
          v8 = v36;
          if (v36 == v25)
            goto LABEL_32;
        }
        v8 -= 24;
      }
      while (v28 != v25);
LABEL_32:
      v8 = v34;
      if (!v34)
        return v18;
    }
    operator delete(v8);
    return v18;
  }
  if (v8 == (char *)v5)
  {
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(__n128 *)v8 = *a3;
    *(_QWORD *)&v6[24 * v7 + 16] = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 24;
    return v8;
  }
  v10 = v8 + 24;
  v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    v12 = v5 - 24;
    v13 = a1[1];
    do
    {
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_OWORD *)v13 = *(_OWORD *)v12;
      *((_QWORD *)v13 + 2) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v13 += 24;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if ((_QWORD *)v5 == v10)
      goto LABEL_39;
LABEL_35:
    v29 = 8 * ((uint64_t)(v5 - (_QWORD)v10) >> 3);
    do
    {
      v31 = *(void **)v11;
      if (*(_QWORD *)v11)
      {
        *(_QWORD *)(v11 + 8) = v31;
        operator delete(v31);
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
      }
      v30 = (uint64_t)&v8[v29 - 24];
      *(_OWORD *)v11 = *(_OWORD *)v30;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)&v8[v29 - 8];
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = 0;
      v11 -= 24;
      v29 -= 24;
    }
    while (v29);
    goto LABEL_39;
  }
  a1[1] = (char *)v5;
  if ((_QWORD *)v5 != v10)
    goto LABEL_35;
LABEL_39:
  v32 = *(void **)v8;
  if (*(_QWORD *)v8)
  {
    *(_QWORD *)&v6[24 * v7 + 8] = v32;
    operator delete(v32);
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
  }
  *(__n128 *)v8 = *a3;
  *(_QWORD *)&v6[24 * v7 + 16] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return v8;
}

void sub_207D2321C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D22788((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_207D23230(uint64_t a1, __n128 *a2)
{
  char *v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char *v27;
  __n128 result;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v5 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(_QWORD *)a1)
    {
      v13 = 0x5555555555555556 * ((v4 - v5) >> 3);
      if (v4 == v5)
        v13 = 1;
      if (v13 >= 0xAAAAAAAAAAAAAABLL)
        sub_207CA3AB8();
      v14 = v13 >> 2;
      v15 = 24 * v13;
      v16 = (char *)operator new(24 * v13);
      v17 = &v16[24 * v14];
      v18 = &v16[v15];
      if (v4 == v6)
      {
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v18;
      }
      else
      {
        v19 = &v17[v4 - v6];
        v20 = 24 * v14;
        do
        {
          v21 = &v16[v20];
          *(_OWORD *)v21 = *(_OWORD *)v6;
          *((_QWORD *)v21 + 2) = *((_QWORD *)v6 + 2);
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v6 + 2) = 0;
          v20 += 24;
          v6 += 24;
        }
        while (v21 + 24 != v19);
        v5 = *(char **)a1;
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v19;
        *(_QWORD *)(a1 + 24) = v18;
        if (v23 != v22)
        {
          v24 = v23;
          do
          {
            v26 = *(void **)(v24 - 24);
            v24 -= 24;
            v25 = v26;
            if (v26)
            {
              *(_QWORD *)(v23 - 16) = v25;
              operator delete(v25);
            }
            v23 = v24;
          }
          while (v24 != v22);
        }
      }
      if (v5)
        operator delete(v5);
      v4 = *(char **)(a1 + 16);
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      if (v6 == v4)
      {
        v27 = &v6[-24 * v9];
      }
      else
      {
        do
        {
          v11 = (void **)&v6[24 * v10];
          v12 = *v11;
          if (*v11)
          {
            v11[1] = v12;
            operator delete(v12);
            *v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          *(_OWORD *)v11 = *(_OWORD *)v6;
          v11[2] = (void *)*((_QWORD *)v6 + 2);
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v6 + 1) = 0;
          *((_QWORD *)v6 + 2) = 0;
          v6 += 24;
        }
        while (v6 != v4);
        v4 = *(char **)(a1 + 8);
        v27 = &v6[24 * v10];
      }
      *(_QWORD *)(a1 + 8) = &v4[24 * v10];
      *(_QWORD *)(a1 + 16) = v27;
      v4 = v27;
    }
  }
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  result = *a2;
  *(__n128 *)v4 = *a2;
  *((_QWORD *)v4 + 2) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 16) += 24;
  return result;
}

BOOL sub_207D23444(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_207C96EE8(v7, "cannot compare iterators of different containers");
    sub_207D1E424(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C072D28, (void (*)(void *))sub_207D1E594);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_207D23508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_207D23544(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

void sub_207D2365C(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_207CCB3BC(v7, a2);
  sub_207D25F6C((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_207D237C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D237D4(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  unint64_t v14;
  char **v15;
  void *v16;
  std::string::size_type size;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::string::size_type v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  std::string::size_type v32;
  __int128 v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t j;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  int32x2_t v42;
  int32x2_t v43;
  __int128 *v45;
  __int128 v46;
  unint64_t v47;
  std::string::size_type v48;
  std::string *p_dst;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string *k;
  std::string::value_type *v54;
  std::string *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  void **v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD *v72;
  int32x2_t *v73;
  uint64_t v74;
  unsigned int v75;
  int64x2_t v76;
  int64x2_t v77;
  void **v78;
  __int128 v79;
  int64x2_t v80;
  __int128 v81;
  char **i;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  _BYTE v88[64];
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _OWORD v96[3];
  char v97;
  __int128 v98;
  uint64_t v99;
  __int16 v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  char v106;
  __int128 v107;
  _BYTE v108[32];
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  _QWORD *v119;
  _QWORD v120[2];
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  _BYTE v126[32];
  __int128 v127;
  __int128 v128;
  _BYTE v129[32];
  unint64_t v130;
  std::string __dst;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  v78 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (_OWORD *)(a1 + 632);
  *(_OWORD *)(a1 + 40) = 0u;
  v84 = a1 + 32;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 76) = xmmword_208232BA0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 92) = _Q0;
  *(_OWORD *)(a1 + 108) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 252) = xmmword_208232BD0;
  *(_OWORD *)(a1 + 268) = _Q0;
  *(_OWORD *)(a1 + 284) = xmmword_208232BB0;
  *(_OWORD *)(a1 + 432) = xmmword_208232BE0;
  *(_OWORD *)(a1 + 448) = xmmword_208232BF0;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 464) = xmmword_208232C00;
  *(_OWORD *)(a1 + 480) = _Q1;
  v81 = _Q1;
  *(_OWORD *)(a1 + 496) = xmmword_208232C10;
  v11 = *(_OWORD *)(a1 + 448);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a1 + 432);
  v12 = *(_OWORD *)(a1 + 480);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a1 + 464);
  *(_OWORD *)(a1 + 124) = xmmword_208232BC0;
  *(_DWORD *)(a1 + 140) = 1042536202;
  *(_BYTE *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = 1042536202;
  *(_DWORD *)(a1 + 248) = 5;
  *(_OWORD *)(a1 + 300) = xmmword_208232BC0;
  *(_DWORD *)(a1 + 316) = 1042536202;
  *(_BYTE *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 324) = 1042536202;
  *(_BYTE *)(a1 + 424) = 1;
  *(_QWORD *)(a1 + 512) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 520) = 256;
  *(_BYTE *)(a1 + 522) = 1;
  *(_QWORD *)(a1 + 528) = 2;
  *(_OWORD *)(a1 + 584) = v12;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a1 + 496);
  *(_OWORD *)(a1 + 611) = *(_OWORD *)(a1 + 507);
  *(_OWORD *)(a1 + 552) = v11;
  *(_OWORD *)(a1 + 632) = xmmword_208232C20;
  *(_DWORD *)(a1 + 648) = 1061158912;
  *(_OWORD *)(a1 + 656) = xmmword_208232C30;
  *(_OWORD *)(a1 + 672) = xmmword_208232C40;
  *(_QWORD *)(a1 + 688) = 3;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 712) = 0;
  v13 = operator new(4uLL);
  *(_QWORD *)(a1 + 696) = v13;
  *v13++ = 4;
  *(_QWORD *)(a1 + 712) = v13;
  *(_QWORD *)(a1 + 704) = v13;
  *(_QWORD *)(a1 + 720) = 0x200000000;
  v4[6] = xmmword_208232C50;
  v4[7] = xmmword_208232C60;
  v4[8] = xmmword_208232C70;
  v4[9] = xmmword_208232BC0;
  *(_DWORD *)(a1 + 792) = 1042536202;
  *(_BYTE *)(a1 + 796) = 0;
  *(_DWORD *)(a1 + 800) = 1042536202;
  *(_OWORD *)(a1 + 1040) = xmmword_208232CA0;
  *(_QWORD *)(a1 + 944) = 10;
  *(_QWORD *)(a1 + 952) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 960) = 0x3FF0CCCCCCCCCCCDLL;
  *(_BYTE *)(a1 + 968) = 1;
  *(_DWORD *)(a1 + 972) = 1056964608;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1016) = 1065353216;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1028) = 0x3D4CCCCD3F7EF9DBLL;
  *(_DWORD *)(a1 + 1036) = 0;
  *(_DWORD *)(a1 + 1056) = 1045220557;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 632) = 1059984507;
  *(_DWORD *)(a1 + 648) = 1057803469;
  *(_OWORD *)(a1 + 912) = xmmword_208233870;
  *(_OWORD *)(a1 + 928) = xmmword_208233860;
  *(_QWORD *)(a1 + 904) = 0x3FB999999999999ALL;
  *(_DWORD *)(a1 + 976) = 1061997773;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  memset(&__dst, 0, sizeof(__dst));
  sub_207D26330((uint64_t)&__dst, v14);
  v15 = *(char ***)(a2 + 56);
  for (i = *(char ***)(a2 + 64); v15 != i; v15 += 3)
  {
    sub_207D1186C(v15, (uint64_t)&v85);
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ >= __dst.__r_.__value_.__r.__words[2])
    {
      v16 = sub_207D269E4((void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&v85);
    }
    else
    {
      *(_QWORD *)__dst.__r_.__value_.__l.__size_ = v85;
      v18 = v86;
      *(_QWORD *)(size + 24) = v87;
      *(_OWORD *)(size + 8) = v18;
      v87 = 0;
      v86 = 0uLL;
      *(_BYTE *)(size + 32) = 0;
      *(_BYTE *)(size + 56) = 0;
      if (v88[24])
      {
        v19 = *(_OWORD *)v88;
        *(_QWORD *)(size + 48) = *(_QWORD *)&v88[16];
        *(_OWORD *)(size + 32) = v19;
        memset(v88, 0, 24);
        *(_BYTE *)(size + 56) = 1;
      }
      *(_BYTE *)(size + 64) = 0;
      *(_BYTE *)(size + 88) = 0;
      if (v88[56])
      {
        v20 = *(_OWORD *)&v88[32];
        *(_QWORD *)(size + 80) = *(_QWORD *)&v88[48];
        *(_OWORD *)(size + 64) = v20;
        memset(&v88[32], 0, 24);
        *(_BYTE *)(size + 88) = 1;
      }
      *(_QWORD *)(size + 96) = 0;
      *(_QWORD *)(size + 104) = 0;
      *(_QWORD *)(size + 112) = 0;
      *(_OWORD *)(size + 96) = v89;
      *(_QWORD *)(size + 112) = v90;
      v89 = 0uLL;
      v90 = 0;
      v22 = v92;
      v21 = v93;
      *(_OWORD *)(size + 120) = v91;
      *(_OWORD *)(size + 136) = v22;
      *(_OWORD *)(size + 152) = v21;
      *(_QWORD *)(size + 168) = 0;
      *(_QWORD *)(size + 176) = 0;
      *(_QWORD *)(size + 184) = 0;
      *(_OWORD *)(size + 168) = v94;
      *(_QWORD *)(size + 184) = v95;
      v94 = 0uLL;
      v95 = 0;
      *(_QWORD *)(size + 192) = *(_QWORD *)&v96[0];
      v23 = *((_QWORD *)&v96[0] + 1);
      *(_QWORD *)(size + 200) = *((_QWORD *)&v96[0] + 1);
      v24 = size + 200;
      v25 = *(_QWORD *)&v96[1];
      *(_QWORD *)(size + 208) = *(_QWORD *)&v96[1];
      if (v25)
      {
        *(_QWORD *)(v23 + 16) = v24;
        *(_QWORD *)&v96[0] = (char *)v96 + 8;
        *((_QWORD *)&v96[0] + 1) = 0;
        *(_QWORD *)&v96[1] = 0;
      }
      else
      {
        *(_QWORD *)(size + 192) = v24;
      }
      v26 = *(_OWORD *)((char *)&v96[1] + 8);
      *(_QWORD *)(size + 232) = *((_QWORD *)&v96[2] + 1);
      *(_OWORD *)(size + 216) = v26;
      v96[2] = 0uLL;
      *((_QWORD *)&v96[1] + 1) = 0;
      *(_BYTE *)(size + 240) = v97;
      v27 = v98;
      *(_QWORD *)(size + 264) = v99;
      *(_OWORD *)(size + 248) = v27;
      v99 = 0;
      v98 = 0uLL;
      *(_BYTE *)(size + 272) = v100;
      *(_BYTE *)(size + 280) = 0;
      *(_BYTE *)(size + 304) = 0;
      if ((_BYTE)v104)
      {
        v28 = v102;
        *(_QWORD *)(size + 296) = v103;
        *(_OWORD *)(size + 280) = v28;
        v103 = 0;
        v102 = 0uLL;
        *(_BYTE *)(size + 304) = 1;
      }
      v29 = v105;
      *(_BYTE *)(size + 328) = v106;
      *(_OWORD *)(size + 312) = v29;
      *(_QWORD *)(size + 344) = 0;
      *(_QWORD *)(size + 352) = 0;
      *(_QWORD *)(size + 336) = 0;
      *(_OWORD *)(size + 336) = v107;
      *(_QWORD *)(size + 352) = *(_QWORD *)v108;
      v107 = 0uLL;
      *(_QWORD *)v108 = 0;
      v30 = *(_QWORD *)&v108[24];
      *(_OWORD *)(size + 360) = *(_OWORD *)&v108[8];
      *(_QWORD *)(size + 376) = v30;
      memset(&v108[8], 0, 24);
      v31 = v109;
      *(_QWORD *)(size + 400) = v110;
      *(_OWORD *)(size + 384) = v31;
      v110 = 0;
      v109 = 0uLL;
      *(_OWORD *)(size + 408) = v111;
      v16 = (void *)(size + 424);
    }
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    sub_207D049E4((uint64_t)&v85);
  }
  v32 = __dst.__r_.__value_.__r.__words[0];
  v33 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
  v34 = *v78;
  if (*v78)
  {
    v83 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
    v35 = *(_QWORD *)(a1 + 16);
    v36 = *v78;
    if ((void *)v35 != v34)
    {
      do
        v35 = sub_207D049E4(v35 - 424);
      while ((void *)v35 != v34);
      v36 = *v78;
    }
    *(_QWORD *)(a1 + 16) = v34;
    operator delete(v36);
    *v78 = 0;
    v78[1] = 0;
    v78[2] = 0;
    v33 = v83;
  }
  *(_QWORD *)(a1 + 8) = v32;
  *(_OWORD *)(a1 + 16) = v33;
  for (j = v33; v32 != j; v32 += 424)
  {
    while (1)
    {
      v38 = (unsigned __int16)sub_207CF7368();
      if (v38 <= 0x100)
        LOBYTE(v38) = 0;
      if (!(_BYTE)v38)
        break;
      *(_BYTE *)(v32 + 240) = 1;
      *(_DWORD *)(v32 + 316) = 1050253722;
      v32 += 424;
      if (v32 == j)
        goto LABEL_31;
    }
    *(_BYTE *)(v32 + 140) = 1;
    *(_BYTE *)(v32 + 144) = 1;
    if (*(char *)(v32 + 239) < 0)
    {
      *(_QWORD *)(v32 + 224) = 8;
      v39 = *(char **)(v32 + 216);
    }
    else
    {
      v39 = (char *)(v32 + 216);
      *(_BYTE *)(v32 + 239) = 8;
    }
    strcpy(v39, "low_res_");
    *(_DWORD *)(v32 + 316) = 1050253722;
  }
LABEL_31:
  v130 = 0;
  v40 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a2 + 152) == v40)
    goto LABEL_98;
  v41 = 0;
  v76 = vdupq_n_s64(0x40uLL);
  v77 = vdupq_n_s64(0x80uLL);
  v42 = vdup_n_s32(0xBCCCCCCD);
  v43 = vdup_n_s32(0x3CCCCCCDu);
  v80 = vdupq_n_s64(0x3FD3333333333333uLL);
  __asm { FMOV            V0.2D, #0.5 }
  v79 = _Q0;
  do
  {
    v45 = (__int128 *)(v40 + 32 * v41);
    if (*((char *)v45 + 23) < 0)
    {
      v47 = *((_QWORD *)v45 + 1);
      if (!v47)
      {
LABEL_56:
        v85 = -1;
        LOBYTE(v86) = 0;
        v88[0] = 0;
        *(_DWORD *)&v88[8] = 1;
        LOBYTE(v91) = 0;
        BYTE12(v91) = 0;
        LOBYTE(v92) = 0;
        BYTE12(v92) = 0;
        v93 = 0u;
        v94 = 0u;
        memset(&v88[12], 0, 52);
        LODWORD(v93) = 1065353216;
        LODWORD(v94) = 1065353216;
        LODWORD(v95) = 1065353216;
        BYTE4(v98) = 0;
        BYTE8(v98) = 0;
        BYTE4(v99) = 0;
        v100 = 0;
        v101 = 0;
        v97 = 0;
        memset(v96, 0, sizeof(v96));
        *(_QWORD *)&v102 = 0xBFF0000000000000;
        DWORD2(v102) = 0;
        BYTE8(v107) = 0;
        v104 = 0;
        *(_QWORD *)&v105 = 0;
        v103 = 0;
        BYTE8(v105) = 0;
        *(int64x2_t *)v108 = v77;
        *(int64x2_t *)&v108[16] = v76;
        v109 = 8uLL;
        LODWORD(v110) = 0;
        WORD2(v110) = 1;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&__dst, "3DKeyPoints");
        sub_207CAA110(&v111, (uint64_t)&__dst, 1uLL);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v112 = 1;
        v113 = 0;
        v114 = xmmword_208232CB0;
        v115 = 1;
        v116 = 0;
        v117 = 0;
        v118 = 0;
        v120[0] = 0;
        v120[1] = 0;
        v119 = v120;
        v121 = 0;
        v122 = 1;
        v123 = 0;
        v124 = 0;
        LOBYTE(v125) = 1;
        DWORD1(v125) = 1066192077;
        *((_QWORD *)&v125 + 1) = 1;
        *(_QWORD *)v126 = 0x3F0000003E800000;
        v126[8] = 0;
        *(_QWORD *)&v126[12] = 0x402000003E4CCCCDLL;
        *(_QWORD *)&v126[24] = 5;
        *(_QWORD *)&v127 = 0;
        DWORD2(v127) = 1065352377;
        v128 = 0uLL;
        *(_DWORD *)v129 = 1092616192;
        *(_WORD *)&v129[4] = 257;
        *(_DWORD *)&v129[8] = 1075838976;
        *(_QWORD *)&v129[12] = 0;
        *(_WORD *)&v129[20] = 0;
        *(_QWORD *)&v129[24] = 3;
        goto LABEL_66;
      }
      sub_207CA40D8(&__dst, *(void **)v45, v47);
    }
    else
    {
      if (!*((_BYTE *)v45 + 23))
        goto LABEL_56;
      v46 = *v45;
      __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v45 + 2);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v46;
    }
    v48 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v48 = __dst.__r_.__value_.__l.__size_;
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    v50 = (std::string *)((char *)p_dst + v48);
    if (!v48)
    {
      v52 = p_dst;
      goto LABEL_60;
    }
    v51 = p_dst;
    v52 = (std::string *)((char *)p_dst + v48);
    while (2)
    {
      for (k = (std::string *)&v51->__r_.__value_.__s.__data_[2]; ; k = (std::string *)((char *)k + 1))
      {
        v51 = (std::string *)((char *)k - 1);
        if (k[-1].__r_.__value_.__s.__data_[22] != 46)
        {
          if (v51 == v50)
            goto LABEL_60;
          continue;
        }
        if (v51 == v50)
          goto LABEL_60;
        if (v51->__r_.__value_.__s.__data_[0] == 106)
        {
          if (k == v50)
            goto LABEL_60;
          if (k->__r_.__value_.__s.__data_[0] == 115)
          {
            if ((std::string *)((char *)&k->__r_.__value_.__l.__data_ + 1) == v50)
              goto LABEL_60;
            if (k->__r_.__value_.__s.__data_[1] == 111)
              break;
          }
        }
      }
      v54 = &k->__r_.__value_.__s.__data_[2];
      if (&k->__r_.__value_.__s.__data_[2] != (std::string::value_type *)v50)
      {
        v55 = (std::string *)((char *)k - 2);
        if (*v54 == 110)
          v52 = v55;
        continue;
      }
      break;
    }
LABEL_60:
    v56 = (char *)v52 - (char *)p_dst;
    if (v52 == v50)
      v56 = -1;
    if (v56 != v48 - 5)
      std::string::append(&__dst, "/0/PatchKeypointTracker.json", 0x1CuLL);
    sub_207D0F11C(&__dst, (uint64_t)&v85);
    v129[4] = *(_BYTE *)(v40 + 32 * v41 + 24);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_66:
    v57 = sub_207D286B8(v84, v130, &v130);
    v58 = v57;
    v57[3] = v85;
    v59 = v57 + 4;
    if (*((unsigned __int8 *)v57 + 56) != v88[0])
    {
      if (!*((_BYTE *)v57 + 56))
      {
        *(_OWORD *)v59 = v86;
        v57[6] = v87;
        v87 = 0;
        v86 = 0uLL;
        *((_BYTE *)v57 + 56) = 1;
        v57[8] = *(_QWORD *)&v88[8];
        v60 = (void **)(v57 + 9);
        if (*((char *)v57 + 95) < 0)
          goto LABEL_77;
        goto LABEL_78;
      }
      if (*((char *)v57 + 55) < 0)
        operator delete((void *)*v59);
      *((_BYTE *)v58 + 56) = 0;
LABEL_76:
      v58[8] = *(_QWORD *)&v88[8];
      v60 = (void **)(v58 + 9);
      if (*((char *)v58 + 95) < 0)
        goto LABEL_77;
      goto LABEL_78;
    }
    if (!*((_BYTE *)v57 + 56))
      goto LABEL_76;
    if (*((char *)v57 + 55) < 0)
      operator delete((void *)*v59);
    *(_OWORD *)v59 = v86;
    v59[2] = v87;
    HIBYTE(v87) = 0;
    LOBYTE(v86) = 0;
    v58[8] = *(_QWORD *)&v88[8];
    v60 = (void **)(v58 + 9);
    if (*((char *)v58 + 95) < 0)
LABEL_77:
      operator delete(*v60);
LABEL_78:
    v60[2] = *(void **)&v88[32];
    *(_OWORD *)v60 = *(_OWORD *)&v88[16];
    v88[39] = 0;
    v88[16] = 0;
    v61 = (void **)(v58 + 12);
    v62 = v58[12];
    if (v62)
    {
      v63 = v58[13];
      v64 = (void *)v58[12];
      if (v63 != v62)
      {
        do
        {
          v65 = *(void **)(v63 - 72);
          if (v65)
          {
            *(_QWORD *)(v63 - 64) = v65;
            operator delete(v65);
          }
          v66 = *(void **)(v63 - 96);
          if (v66)
          {
            *(_QWORD *)(v63 - 88) = v66;
            operator delete(v66);
          }
          v63 -= 192;
        }
        while (v63 != v62);
        v64 = *v61;
      }
      v58[13] = v62;
      operator delete(v64);
      *v61 = 0;
      v58[13] = 0;
      v58[14] = 0;
    }
    *((_OWORD *)v58 + 6) = *(_OWORD *)&v88[40];
    v58[14] = *(_QWORD *)&v88[56];
    memset(&v88[40], 0, 24);
    sub_207D26DDC((uint64_t)(v58 + 15), (uint64_t *)&v89);
    sub_207D21BC0((uint64_t)(v58 + 39), (uint64_t)&v102 + 8);
    v68 = *(_OWORD *)v126;
    v67 = *(_OWORD *)&v126[16];
    *((_OWORD *)v58 + 37) = v125;
    *((_OWORD *)v58 + 38) = v68;
    v70 = *(_OWORD *)v129;
    v69 = *(_OWORD *)&v129[16];
    v71 = v127;
    *((_OWORD *)v58 + 41) = v128;
    *((_OWORD *)v58 + 42) = v70;
    *((_OWORD *)v58 + 43) = v69;
    *((_OWORD *)v58 + 39) = v67;
    *((_OWORD *)v58 + 40) = v71;
    sub_207D046E4((uint64_t)&v85);
    v72 = sub_207D286B8(v84, v130, &v130);
    v72[3] = v130;
    v73 = (int32x2_t *)v72[12];
    *v73 = v42;
    v73[1].i32[0] = 0x80000000;
    v74 = v72[12];
    *(int32x2_t *)(v74 + 12) = v43;
    *(_DWORD *)(v74 + 20) = 0;
    *(_BYTE *)(v72[12] + 176) = 1;
    v75 = (unsigned __int16)sub_207CF7368();
    if (v75 <= 0x100)
      LOBYTE(v75) = 0;
    if (!(_BYTE)v75)
    {
      *((_BYTE *)v72 + 424) = 1;
      *((_BYTE *)v72 + 427) = 1;
    }
    v72[75] = *(_QWORD *)a1;
    *((_DWORD *)v72 + 152) = 1061997773;
    *((_DWORD *)v72 + 160) = 1065353216;
    if (*(_BYTE *)(a2 + 176))
      *((_DWORD *)v72 + 161) = 1056964608;
    *(_BYTE *)(v72[12] + 178) = 1;
    *(_DWORD *)(a1 + 72) = 2;
    *(_OWORD *)(a1 + 76) = xmmword_208233880;
    *(_OWORD *)(a1 + 92) = xmmword_208232C60;
    *(_OWORD *)(a1 + 108) = xmmword_208232C70;
    *(_OWORD *)(a1 + 124) = xmmword_208232BC0;
    *(_DWORD *)(a1 + 140) = 1042536202;
    *(_BYTE *)(a1 + 144) = 0;
    *(_DWORD *)(a1 + 148) = 1042536202;
    *(_OWORD *)(a1 + 432) = xmmword_208233890;
    *(_OWORD *)(a1 + 448) = v79;
    *(int64x2_t *)(a1 + 464) = v80;
    *(_OWORD *)(a1 + 480) = v81;
    *(_OWORD *)(a1 + 496) = xmmword_2082338A0;
    *(_QWORD *)(a1 + 512) = 0x4022000000000000;
    *(_WORD *)(a1 + 520) = 256;
    *(_BYTE *)(a1 + 522) = 1;
    v85 = (uint64_t)&v130;
    sub_207D0531C(a1 + 984, &v130, (uint64_t)&unk_20822AD51, (_QWORD **)&v85)[3] = 4;
    v41 = v130 + 1;
    v130 = v41;
    v40 = *(_QWORD *)(a2 + 144);
  }
  while (v41 < (*(_QWORD *)(a2 + 152) - v40) >> 5);
LABEL_98:
  *(_BYTE *)(a1 + 424) = 1;
}

void sub_207D24600(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_207D0468C((void **)(v2 - 160));
  sub_207D04BC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D24750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v41;
  __int128 v42;
  _DWORD *v43;
  _QWORD *k;
  unint64_t *v45;
  uint64_t v46;
  __int128 v49;
  __int128 v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v58;
  __int128 v59;
  _DWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  _QWORD *j;
  char *v71;
  int64_t v72;
  _BYTE *v73;
  size_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *m;
  _QWORD *n;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v95;
  _QWORD *v96;
  void **v97;
  uint64_t i;
  __int128 v99;
  __int128 v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  char v123;
  __int128 v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  uint64_t v128;
  char v129;
  __int128 v130;
  char v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  _BYTE __src[24];
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  char v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  uint64_t v161;
  char v162;
  __int128 v163;
  uint64_t v164;
  char v165;
  __int128 v166;
  char v167;
  __int128 v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;

  v175 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v4 = (_OWORD *)(a2 + 632);
  switch(*(_DWORD *)(a1 + 4))
  {
    case 0:
      *(_QWORD *)a2 = 1;
      *(_OWORD *)(a2 + 8) = 0u;
      v97 = (void **)(a2 + 8);
      v96 = (_QWORD *)(a2 + 32);
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = 1065353216;
      *(_DWORD *)(a2 + 72) = 0;
      *(_OWORD *)(a2 + 76) = xmmword_208232BA0;
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(a2 + 92) = _Q0;
      *(_OWORD *)(a2 + 108) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 124) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 140) = 1042536202;
      *(_BYTE *)(a2 + 144) = 0;
      *(_DWORD *)(a2 + 148) = 1042536202;
      *(_DWORD *)(a2 + 248) = 5;
      *(_OWORD *)(a2 + 252) = xmmword_208232BD0;
      *(_OWORD *)(a2 + 268) = _Q0;
      *(_OWORD *)(a2 + 284) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 300) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 316) = 1042536202;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 324) = 1042536202;
      *(_BYTE *)(a2 + 424) = 1;
      *(_OWORD *)(a2 + 432) = xmmword_208232BE0;
      *(_OWORD *)(a2 + 448) = xmmword_208232BF0;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(a2 + 464) = xmmword_208232C00;
      *(_OWORD *)(a2 + 480) = _Q1;
      *(_OWORD *)(a2 + 496) = xmmword_208232C10;
      *(_QWORD *)(a2 + 512) = 0x3FF0000000000000;
      *(_WORD *)(a2 + 520) = 256;
      *(_BYTE *)(a2 + 522) = 1;
      *(_QWORD *)(a2 + 528) = 2;
      *(_OWORD *)(a2 + 611) = *(_OWORD *)(a2 + 507);
      *(_OWORD *)(a2 + 600) = *(_OWORD *)(a2 + 496);
      v11 = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a2 + 584) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a2 + 568) = v11;
      v12 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a2 + 536) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a2 + 552) = v12;
      *v4 = xmmword_208232C20;
      *(_DWORD *)(a2 + 648) = 1061158912;
      *(_OWORD *)(a2 + 656) = xmmword_208232C30;
      *(_OWORD *)(a2 + 672) = xmmword_208232C40;
      *(_QWORD *)(a2 + 688) = 3;
      *(_QWORD *)(a2 + 712) = 0;
      *(_QWORD *)(a2 + 696) = 0;
      *(_QWORD *)(a2 + 704) = 0;
      v13 = operator new(4uLL);
      *(_QWORD *)(a2 + 696) = v13;
      *v13++ = 4;
      *(_QWORD *)(a2 + 712) = v13;
      *(_QWORD *)(a2 + 704) = v13;
      *(_QWORD *)(a2 + 720) = 0x200000000;
      *(_OWORD *)(a2 + 728) = xmmword_208232C50;
      *(_OWORD *)(a2 + 744) = xmmword_208232C60;
      *(_OWORD *)(a2 + 760) = xmmword_208232C70;
      *(_OWORD *)(a2 + 776) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 792) = 1042536202;
      *(_BYTE *)(a2 + 796) = 0;
      *(_DWORD *)(a2 + 800) = 1042536202;
      *(_QWORD *)(a2 + 904) = 0x3FD0000000000000;
      *(_OWORD *)(a2 + 912) = xmmword_2082338D0;
      *(_OWORD *)(a2 + 928) = xmmword_208233860;
      *(_QWORD *)(a2 + 944) = 10;
      *(_QWORD *)(a2 + 952) = 0x3FE0000000000000;
      *(_QWORD *)(a2 + 960) = 0x3FF0CCCCCCCCCCCDLL;
      *(_BYTE *)(a2 + 968) = 1;
      *(_QWORD *)(a2 + 972) = 0x3E99999A3F000000;
      *(_OWORD *)(a2 + 984) = 0u;
      *(_OWORD *)(a2 + 1000) = 0u;
      *(_DWORD *)(a2 + 1016) = 1065353216;
      *(_BYTE *)(a2 + 1024) = 0;
      *(_QWORD *)(a2 + 1028) = 0x3D4CCCCD3F7EF9DBLL;
      *(_DWORD *)(a2 + 1036) = 0;
      *(_OWORD *)(a2 + 1040) = xmmword_208232CA0;
      *(_DWORD *)(a2 + 1056) = 1045220557;
      *(_QWORD *)(a2 + 1080) = 0;
      *(_OWORD *)(a2 + 1064) = 0u;
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 168);
      if (*(_BYTE *)(a1 + 178))
      {
        *(_QWORD *)(a2 + 904) = 0;
        *(_QWORD *)(a2 + 912) = 0;
        *(_QWORD *)(a2 + 928) = 0x7FEFFFFFFFFFFFFFLL;
        *(_QWORD *)(a2 + 656) = 0;
        *(_QWORD *)(a2 + 664) = 0;
      }
      v14 = 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3);
      v101 = 0;
      v100 = 0uLL;
      sub_207D26330((uint64_t)&v100, v14);
      v15 = a1;
      v16 = *(_QWORD *)(a1 + 80);
      v95 = v15;
      for (i = *(_QWORD *)(v15 + 88); v16 != i; v16 += 424)
      {
        sub_207D26438((uint64_t)__src, v16);
        DWORD1(v166) = 1058642330;
        v102 = *(_QWORD *)__src;
        v103 = *(_OWORD *)&__src[8];
        v104 = v140;
        *(_QWORD *)&__src[8] = 0;
        *(_QWORD *)&__src[16] = 0;
        v140 = 0;
        LOBYTE(v105) = 0;
        v107 = 0;
        if (v143)
        {
          v105 = v141;
          v106 = v142;
          v142 = 0;
          v141 = 0uLL;
          v107 = 1;
        }
        LOBYTE(v108) = 0;
        v110 = 0;
        if (v146)
        {
          v108 = v144;
          v109 = v145;
          v145 = 0;
          v144 = 0uLL;
          v110 = 1;
        }
        v111 = v147;
        v18 = v148;
        v148 = 0;
        v147 = 0uLL;
        v113 = v149;
        v114 = v150;
        v115 = v151;
        v116 = v152;
        v112 = v18;
        v117 = v153;
        v153 = 0;
        v152 = 0uLL;
        v118 = v154;
        v119 = v155;
        v120 = v156;
        if (v156)
        {
          *(_QWORD *)(v155 + 16) = &v119;
          v154 = &v155;
          v155 = 0;
          v156 = 0;
        }
        else
        {
          v118 = &v119;
        }
        v121 = v157;
        v122 = v158;
        v158 = 0;
        v157 = 0uLL;
        v123 = v159;
        v124 = v160;
        v125 = v161;
        v160 = 0uLL;
        v161 = 0;
        v126 = v162;
        LOBYTE(v127) = 0;
        v129 = 0;
        if (v165)
        {
          v127 = v163;
          v128 = v164;
          v164 = 0;
          v163 = 0uLL;
          v129 = 1;
        }
        v130 = v166;
        v131 = v167;
        v132 = v168;
        v133 = v169;
        v169 = 0;
        v168 = 0uLL;
        v134 = v170;
        v135 = v171;
        v171 = 0;
        v170 = 0uLL;
        v137 = v173;
        v136 = v172;
        v172 = 0uLL;
        v173 = 0;
        v138 = v174;
        sub_207D049E4((uint64_t)__src);
        v19 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1) >= v101)
        {
          v17 = sub_207D269E4((void **)&v100, (uint64_t)&v102);
        }
        else
        {
          **((_QWORD **)&v100 + 1) = v102;
          v20 = v103;
          *(_QWORD *)(v19 + 24) = v104;
          *(_OWORD *)(v19 + 8) = v20;
          v104 = 0;
          v103 = 0uLL;
          *(_BYTE *)(v19 + 32) = 0;
          *(_BYTE *)(v19 + 56) = 0;
          if (v107)
          {
            v21 = v105;
            *(_QWORD *)(v19 + 48) = v106;
            *(_OWORD *)(v19 + 32) = v21;
            v106 = 0;
            v105 = 0uLL;
            *(_BYTE *)(v19 + 56) = 1;
          }
          *(_BYTE *)(v19 + 64) = 0;
          *(_BYTE *)(v19 + 88) = 0;
          if (v110)
          {
            v22 = v108;
            *(_QWORD *)(v19 + 80) = v109;
            *(_OWORD *)(v19 + 64) = v22;
            v109 = 0;
            v108 = 0uLL;
            *(_BYTE *)(v19 + 88) = 1;
          }
          *(_QWORD *)(v19 + 96) = 0;
          *(_QWORD *)(v19 + 104) = 0;
          *(_QWORD *)(v19 + 112) = 0;
          *(_OWORD *)(v19 + 96) = v111;
          *(_QWORD *)(v19 + 112) = v112;
          v111 = 0uLL;
          v112 = 0;
          v24 = v114;
          v23 = v115;
          *(_OWORD *)(v19 + 120) = v113;
          *(_OWORD *)(v19 + 136) = v24;
          *(_OWORD *)(v19 + 152) = v23;
          *(_QWORD *)(v19 + 168) = 0;
          *(_QWORD *)(v19 + 176) = 0;
          *(_QWORD *)(v19 + 184) = 0;
          *(_OWORD *)(v19 + 168) = v116;
          *(_QWORD *)(v19 + 184) = v117;
          v116 = 0uLL;
          v117 = 0;
          *(_QWORD *)(v19 + 192) = v118;
          v25 = v119;
          *(_QWORD *)(v19 + 200) = v119;
          v26 = v19 + 200;
          v27 = v120;
          *(_QWORD *)(v19 + 208) = v120;
          if (v27)
          {
            *(_QWORD *)(v25 + 16) = v26;
            v118 = &v119;
            v119 = 0;
            v120 = 0;
          }
          else
          {
            *(_QWORD *)(v19 + 192) = v26;
          }
          v28 = v121;
          *(_QWORD *)(v19 + 232) = v122;
          *(_OWORD *)(v19 + 216) = v28;
          v122 = 0;
          v121 = 0uLL;
          *(_BYTE *)(v19 + 240) = v123;
          v29 = v124;
          *(_QWORD *)(v19 + 264) = v125;
          *(_OWORD *)(v19 + 248) = v29;
          v125 = 0;
          v124 = 0uLL;
          *(_BYTE *)(v19 + 272) = v126;
          *(_BYTE *)(v19 + 280) = 0;
          *(_BYTE *)(v19 + 304) = 0;
          if (v129)
          {
            v30 = v127;
            *(_QWORD *)(v19 + 296) = v128;
            *(_OWORD *)(v19 + 280) = v30;
            v128 = 0;
            v127 = 0uLL;
            *(_BYTE *)(v19 + 304) = 1;
          }
          v31 = v130;
          *(_BYTE *)(v19 + 328) = v131;
          *(_OWORD *)(v19 + 312) = v31;
          *(_QWORD *)(v19 + 344) = 0;
          *(_QWORD *)(v19 + 352) = 0;
          *(_QWORD *)(v19 + 336) = 0;
          *(_OWORD *)(v19 + 336) = v132;
          *(_QWORD *)(v19 + 352) = v133;
          v132 = 0uLL;
          v133 = 0;
          v32 = v135;
          *(_OWORD *)(v19 + 360) = v134;
          *(_QWORD *)(v19 + 376) = v32;
          v135 = 0;
          v134 = 0uLL;
          v33 = v136;
          *(_QWORD *)(v19 + 400) = v137;
          *(_OWORD *)(v19 + 384) = v33;
          v137 = 0;
          v136 = 0uLL;
          *(_OWORD *)(v19 + 408) = v138;
          v17 = (void *)(v19 + 424);
        }
        *((_QWORD *)&v100 + 1) = v17;
        sub_207D049E4((uint64_t)&v102);
      }
      v65 = v100;
      v66 = v101;
      v67 = *v97;
      a1 = v95;
      if (*v97)
      {
        v99 = v100;
        v68 = *(_QWORD *)(a2 + 16);
        v69 = *v97;
        if ((void *)v68 != v67)
        {
          do
            v68 = sub_207D049E4(v68 - 424);
          while ((void *)v68 != v67);
          v69 = *v97;
        }
        *(_QWORD *)(a2 + 16) = v67;
        operator delete(v69);
        *v97 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        v65 = v99;
      }
      *(_OWORD *)(a2 + 8) = v65;
      *(_QWORD *)(a2 + 24) = v66;
      if (v96 != (_QWORD *)(v95 + 104))
      {
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(v95 + 136);
        sub_207D2709C(v96, *(_QWORD **)(v95 + 120), 0);
      }
      for (j = *(_QWORD **)(a2 + 48); j; j = (_QWORD *)*j)
      {
        *(_QWORD *)__src = j + 2;
        sub_207D0531C(a2 + 984, j + 2, (uint64_t)&unk_20822AD51, (_QWORD **)__src)[3] = 1;
      }
      *(_QWORD *)(a2 + 952) = 0x3FC999999999999ALL;
      *(_QWORD *)(a2 + 936) = 0x3FC999999999999ALL;
      *(_BYTE *)(a2 + 968) = 0;
      *(_OWORD *)__src = xmmword_2082338E0;
      sub_207D0CC14((_QWORD *)(a2 + 1064), __src, &__src[16], 4uLL);
      *(_QWORD *)(a2 + 632) = 0x3D4CCCCD3F59999ALL;
      *(_QWORD *)(a2 + 644) = 0x3DCCCCCD3F000000;
      *(_QWORD *)(a2 + 300) = 0x3DB851EC38D1B717;
      *(_BYTE *)(a2 + 320) = 1;
      *(_DWORD *)(a2 + 324) = 1042536202;
      goto LABEL_91;
    case 1:
      *(_QWORD *)a2 = 1;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = 1065353216;
      *(_DWORD *)(a2 + 72) = 0;
      *(_OWORD *)(a2 + 76) = xmmword_208232BA0;
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(a2 + 92) = _Q0;
      *(_OWORD *)(a2 + 108) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 124) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 140) = 1042536202;
      *(_BYTE *)(a2 + 144) = 0;
      *(_DWORD *)(a2 + 148) = 1042536202;
      *(_DWORD *)(a2 + 248) = 5;
      *(_OWORD *)(a2 + 252) = xmmword_208232BD0;
      *(_OWORD *)(a2 + 268) = _Q0;
      *(_OWORD *)(a2 + 284) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 300) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 316) = 1042536202;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 324) = 1042536202;
      *(_BYTE *)(a2 + 424) = 1;
      *(_OWORD *)(a2 + 432) = xmmword_208232BE0;
      *(_OWORD *)(a2 + 448) = xmmword_208232BF0;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(a2 + 464) = xmmword_208232C00;
      *(_OWORD *)(a2 + 480) = _Q1;
      *(_OWORD *)(a2 + 496) = xmmword_208232C10;
      *(_QWORD *)(a2 + 512) = 0x3FF0000000000000;
      *(_WORD *)(a2 + 520) = 256;
      *(_BYTE *)(a2 + 522) = 1;
      *(_QWORD *)(a2 + 528) = 2;
      *(_OWORD *)(a2 + 611) = *(_OWORD *)(a2 + 507);
      *(_OWORD *)(a2 + 600) = *(_OWORD *)(a2 + 496);
      v41 = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a2 + 584) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a2 + 568) = v41;
      v42 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a2 + 536) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a2 + 552) = v42;
      *(_OWORD *)(a2 + 632) = xmmword_208232C20;
      *(_DWORD *)(a2 + 648) = 1061158912;
      *(_OWORD *)(a2 + 656) = xmmword_208232C30;
      *(_OWORD *)(a2 + 672) = xmmword_208232C40;
      *(_QWORD *)(a2 + 688) = 3;
      *(_QWORD *)(a2 + 712) = 0;
      *(_QWORD *)(a2 + 696) = 0;
      *(_QWORD *)(a2 + 704) = 0;
      v43 = operator new(4uLL);
      *(_QWORD *)(a2 + 696) = v43;
      *v43++ = 4;
      *(_QWORD *)(a2 + 712) = v43;
      *(_QWORD *)(a2 + 704) = v43;
      *(_QWORD *)(a2 + 720) = 0x200000000;
      *(_OWORD *)(a2 + 728) = xmmword_208232C50;
      *(_OWORD *)(a2 + 744) = xmmword_208232C60;
      *(_OWORD *)(a2 + 760) = xmmword_208232C70;
      *(_OWORD *)(a2 + 776) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 792) = 1042536202;
      *(_BYTE *)(a2 + 796) = 0;
      *(_DWORD *)(a2 + 800) = 1042536202;
      *(_QWORD *)(a2 + 904) = 0x3FD0000000000000;
      *(_OWORD *)(a2 + 912) = xmmword_2082338D0;
      *(_OWORD *)(a2 + 928) = xmmword_208233860;
      *(_QWORD *)(a2 + 952) = 0x3FE0000000000000;
      *(_QWORD *)(a2 + 960) = 0x3FF0CCCCCCCCCCCDLL;
      *(_BYTE *)(a2 + 968) = 1;
      *(_QWORD *)(a2 + 972) = 0x3E99999A3F000000;
      *(_OWORD *)(a2 + 984) = 0u;
      *(_OWORD *)(a2 + 1000) = 0u;
      *(_DWORD *)(a2 + 1016) = 1065353216;
      *(_BYTE *)(a2 + 1024) = 0;
      *(_QWORD *)(a2 + 1028) = 0x3D4CCCCD3F7EF9DBLL;
      *(_DWORD *)(a2 + 1036) = 0;
      *(_OWORD *)(a2 + 1040) = xmmword_208232CA0;
      *(_DWORD *)(a2 + 1056) = 1045220557;
      *(_QWORD *)(a2 + 1080) = 0;
      *(_OWORD *)(a2 + 1064) = 0u;
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a2 + 944) = 3;
      *(_QWORD *)(a2 + 656) = 1;
      if (*(_BYTE *)(a1 + 178))
      {
        *(_QWORD *)(a2 + 904) = 0;
        *(_QWORD *)(a2 + 912) = 0;
        *(_QWORD *)(a2 + 928) = 0x7FEFFFFFFFFFFFFFLL;
        *(_QWORD *)(a2 + 656) = 0;
        *(_QWORD *)(a2 + 664) = 0;
      }
      if (a2 + 8 != a1 + 80)
        sub_207D26B38((uint64_t *)(a2 + 8), *(_QWORD **)(a1 + 80), *(_QWORD **)(a1 + 88), 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
      if (a2 + 32 != a1 + 104)
      {
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 136);
        sub_207D2709C((_QWORD *)(a2 + 32), *(_QWORD **)(a1 + 120), 0);
      }
      for (k = *(_QWORD **)(a2 + 48); k; k = (_QWORD *)*k)
      {
        v45 = k + 2;
        v46 = k[12];
        if (k[13] == v46 || !*(_BYTE *)(v46 + 177))
        {
          *(_QWORD *)__src = k + 2;
          sub_207D0531C(a2 + 984, v45, (uint64_t)&unk_20822AD51, (_QWORD **)__src)[3] = 1;
        }
        else
        {
          *(_QWORD *)__src = k + 2;
          sub_207D0531C(a2 + 984, v45, (uint64_t)&unk_20822AD51, (_QWORD **)__src)[3] = 2;
        }
      }
      *(_QWORD *)__src = 0x600000007;
      *(_DWORD *)&__src[8] = 4;
      v61 = *(_QWORD *)(a2 + 712);
      v62 = *(char **)(a2 + 696);
      if ((unint64_t)(v61 - (_QWORD)v62) < 0xC)
      {
        if (v62)
        {
          *(_QWORD *)(a2 + 704) = v62;
          operator delete(v62);
          v61 = 0;
          *(_QWORD *)(a2 + 696) = 0;
          *(_QWORD *)(a2 + 704) = 0;
          *(_QWORD *)(a2 + 712) = 0;
        }
        v63 = v61 >> 1;
        if ((unint64_t)(v61 >> 1) <= 3)
          v63 = 3;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
          v64 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v64 = v63;
        if (v64 >> 62)
          sub_207CA420C();
        v62 = (char *)operator new(4 * v64);
        *(_QWORD *)(a2 + 696) = v62;
        *(_QWORD *)(a2 + 704) = v62;
        *(_QWORD *)(a2 + 712) = &v62[4 * v64];
        goto LABEL_81;
      }
      v71 = *(char **)(a2 + 704);
      v72 = v71 - v62;
      if ((unint64_t)(v71 - v62) > 0xB)
      {
LABEL_81:
        *(_QWORD *)v62 = *(_QWORD *)__src;
        *((_DWORD *)v62 + 2) = *(_DWORD *)&__src[8];
        v75 = 3;
        goto LABEL_82;
      }
      v73 = &__src[v72];
      if (v71 != v62)
      {
        memcpy(*(void **)(a2 + 696), __src, v71 - v62);
        v62 = *(char **)(a2 + 704);
      }
      v74 = 12 - v72;
      memcpy(v62, v73, v74);
      v75 = v74 >> 2;
LABEL_82:
      *(_QWORD *)(a2 + 704) = &v62[4 * v75];
      goto LABEL_91;
    case 2:
      sub_207D237D4(a2, a1);
      *(_QWORD *)(a2 + 656) = 0;
      goto LABEL_91;
    case 3:
      sub_207D237D4(a2, a1);
      *(_QWORD *)(a2 + 656) = 0;
      *(_QWORD *)(a2 + 928) = 0;
      *(_OWORD *)(a2 + 904) = 0u;
      goto LABEL_91;
    case 4:
      sub_207D237D4(a2, a1);
      *(_QWORD *)(a2 + 928) = 0x7FEFFFFFFFFFFFFFLL;
      *(_QWORD *)(a2 + 664) = 0;
      *(_QWORD *)(a2 + 656) = 0;
      v35 = *(_QWORD *)(a2 + 8);
      v34 = *(_QWORD *)(a2 + 16);
      if (v35 != v34)
      {
        v36 = v35 + 216;
        do
        {
          *(_BYTE *)(v36 + 24) = 0;
          if (*(char *)(v36 + 23) < 0)
          {
            *(_QWORD *)(v36 + 8) = 8;
            v37 = *(char **)v36;
          }
          else
          {
            *(_BYTE *)(v36 + 23) = 8;
            v37 = (char *)v36;
          }
          strcpy(v37, "low_res_");
          v38 = v36 + 208;
          v36 += 424;
        }
        while (v38 != v34);
      }
      goto LABEL_91;
    case 5:
      *(_QWORD *)a2 = 1;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = 1065353216;
      *(_DWORD *)(a2 + 72) = 0;
      *(_OWORD *)(a2 + 76) = xmmword_208232BA0;
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(a2 + 92) = _Q0;
      *(_OWORD *)(a2 + 108) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 124) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 140) = 1042536202;
      *(_BYTE *)(a2 + 144) = 0;
      *(_DWORD *)(a2 + 148) = 1042536202;
      *(_DWORD *)(a2 + 248) = 5;
      *(_OWORD *)(a2 + 252) = xmmword_208232BD0;
      *(_OWORD *)(a2 + 268) = _Q0;
      *(_OWORD *)(a2 + 284) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 300) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 316) = 1042536202;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 324) = 1042536202;
      *(_BYTE *)(a2 + 424) = 1;
      *(_OWORD *)(a2 + 432) = xmmword_208232BE0;
      *(_OWORD *)(a2 + 448) = xmmword_208232BF0;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(a2 + 464) = xmmword_208232C00;
      *(_OWORD *)(a2 + 480) = _Q1;
      *(_OWORD *)(a2 + 496) = xmmword_208232C10;
      *(_QWORD *)(a2 + 512) = 0x3FF0000000000000;
      *(_WORD *)(a2 + 520) = 256;
      *(_BYTE *)(a2 + 522) = 1;
      *(_QWORD *)(a2 + 528) = 2;
      *(_OWORD *)(a2 + 611) = *(_OWORD *)(a2 + 507);
      *(_OWORD *)(a2 + 600) = *(_OWORD *)(a2 + 496);
      v49 = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a2 + 584) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a2 + 568) = v49;
      v50 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a2 + 536) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a2 + 552) = v50;
      *(_OWORD *)(a2 + 632) = xmmword_208232C20;
      *(_DWORD *)(a2 + 648) = 1061158912;
      *(_OWORD *)(a2 + 656) = xmmword_208232C30;
      *(_OWORD *)(a2 + 672) = xmmword_208232C40;
      *(_QWORD *)(a2 + 688) = 3;
      *(_QWORD *)(a2 + 712) = 0;
      *(_QWORD *)(a2 + 696) = 0;
      *(_QWORD *)(a2 + 704) = 0;
      v51 = operator new(4uLL);
      *(_QWORD *)(a2 + 696) = v51;
      *v51++ = 4;
      *(_QWORD *)(a2 + 712) = v51;
      *(_QWORD *)(a2 + 704) = v51;
      *(_QWORD *)(a2 + 720) = 0x200000000;
      *(_OWORD *)(a2 + 728) = xmmword_208232C50;
      *(_OWORD *)(a2 + 744) = xmmword_208232C60;
      *(_DWORD *)(a2 + 760) = 897988541;
      *(_OWORD *)(a2 + 764) = xmmword_2082338B0;
      *(_OWORD *)(a2 + 780) = xmmword_2082338C0;
      *(_BYTE *)(a2 + 796) = 0;
      *(_DWORD *)(a2 + 800) = 1042536202;
      *(_QWORD *)(a2 + 904) = 0x3FD0000000000000;
      *(_OWORD *)(a2 + 912) = xmmword_2082338D0;
      *(_OWORD *)(a2 + 928) = xmmword_208233860;
      *(_QWORD *)(a2 + 944) = 10;
      *(_QWORD *)(a2 + 952) = 0x3FE0000000000000;
      *(_QWORD *)(a2 + 960) = 0x3FF0CCCCCCCCCCCDLL;
      *(_BYTE *)(a2 + 968) = 1;
      *(_QWORD *)(a2 + 972) = 0x3E99999A3F000000;
      *(_OWORD *)(a2 + 984) = 0u;
      *(_OWORD *)(a2 + 1000) = 0u;
      *(_DWORD *)(a2 + 1016) = 1065353216;
      *(_BYTE *)(a2 + 1024) = 0;
      *(_QWORD *)(a2 + 1028) = 0x3D4CCCCD3F7EF9DBLL;
      *(_DWORD *)(a2 + 1036) = 0;
      *(_OWORD *)(a2 + 1040) = xmmword_208232CA0;
      *(_DWORD *)(a2 + 1056) = 1045220557;
      *(_QWORD *)(a2 + 1080) = 0;
      *(_OWORD *)(a2 + 1064) = 0u;
      *(_QWORD *)a2 = *(_QWORD *)(a1 + 168);
      *(_DWORD *)(a2 + 632) = 1059984507;
      *(_DWORD *)(a2 + 648) = 1057803469;
      if (a2 + 8 != a1 + 80)
        sub_207D26B38((uint64_t *)(a2 + 8), *(_QWORD **)(a1 + 80), *(_QWORD **)(a1 + 88), 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3));
      v53 = *(_QWORD *)(a2 + 8);
      v52 = *(_QWORD *)(a2 + 16);
      if (v53 == v52)
        goto LABEL_87;
      v54 = v52 - v53 - 424;
      if (v54 < 0x1A8)
      {
        v55 = *(_QWORD *)(a2 + 8);
        do
        {
LABEL_86:
          *(_DWORD *)(v55 + 316) = 1050253722;
          v55 += 424;
        }
        while (v55 != v52);
        goto LABEL_87;
      }
      v76 = v54 / 0x1A8 + 1;
      v55 = v53 + 424 * (v76 & 0x1FFFFFFFFFFFFFELL);
      v77 = v76 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *(_DWORD *)(v53 + 316) = 1050253722;
        *(_DWORD *)(v53 + 740) = 1050253722;
        v53 += 848;
        v77 -= 2;
      }
      while (v77);
      if (v76 != (v76 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_86;
LABEL_87:
      if (a2 + 32 != a1 + 104)
      {
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 136);
        sub_207D2709C((_QWORD *)(a2 + 32), *(_QWORD **)(a1 + 120), 0);
      }
      for (m = *(_QWORD **)(a2 + 48); m; m = (_QWORD *)*m)
      {
        *(_QWORD *)__src = m + 2;
        sub_207D0531C(a2 + 984, m + 2, (uint64_t)&unk_20822AD51, (_QWORD **)__src)[3] = 2;
      }
LABEL_91:
      if (*(_BYTE *)(a1 + 48))
      {
        *(_QWORD *)(a2 + 944) = *(_QWORD *)(a1 + 8);
        for (n = *(_QWORD **)(a2 + 48); n; n = (_QWORD *)*n)
        {
          v80 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)__src = n + 2;
          sub_207D0531C(a2 + 984, n + 2, (uint64_t)&unk_20822AD51, (_QWORD **)__src)[3] = v80;
        }
        v81 = 1.0;
        v82 = *(double *)(a1 + 24);
        v83 = *(double *)(a1 + 32);
        if (v82 == 0.0)
          v84 = 1.0;
        else
          v84 = 1.0 / v82;
        *(double *)(a2 + 912) = v84;
        if (v84 >= *(double *)(a2 + 904))
          v84 = *(double *)(a2 + 904);
        *(double *)(a2 + 904) = v84;
        v85 = 1.0 / v83;
        if (v83 == 0.0)
          v85 = 1.0;
        *(double *)(a2 + 952) = v85;
        v86 = *(double *)(a1 + 40);
        if (v86 != 0.0)
          v81 = 1.0 / v86;
        *(double *)(a2 + 936) = v81;
      }
      v88 = *(_QWORD *)(a2 + 8);
      v87 = *(_QWORD *)(a2 + 16);
      if (v88 == v87)
        return kdebug_trace();
      v89 = *(_QWORD *)(a2 + 912);
      v90 = v87 - v88 - 424;
      if (v90 < 0x1A8)
      {
        v91 = *(_QWORD *)(a2 + 8);
        do
        {
LABEL_110:
          *(_BYTE *)(v91 + 408) = 0;
          *(_QWORD *)(v91 + 416) = v89;
          v91 += 424;
        }
        while (v91 != v87);
        return kdebug_trace();
      }
      v92 = v90 / 0x1A8 + 1;
      v91 = v88 + 424 * (v92 & 0x1FFFFFFFFFFFFFELL);
      v93 = v92 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *(_BYTE *)(v88 + 408) = 0;
        *(_BYTE *)(v88 + 832) = 0;
        *(_QWORD *)(v88 + 416) = v89;
        *(_QWORD *)(v88 + 840) = v89;
        v88 += 848;
        v93 -= 2;
      }
      while (v93);
      if (v92 != (v92 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_110;
      return kdebug_trace();
    case 6:
      if (!sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Configurations.cpp", 531, (uint64_t)"false", 5, (uint64_t)"Unsupported max preset", 22, (void (*)(void **))sub_208216974))goto LABEL_55;
      goto LABEL_112;
    default:
LABEL_55:
      if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/Configurations.cpp", 533, (uint64_t)"false", 5, (uint64_t)"Unsupported preset", 18, (void (*)(void **))sub_208216974))
      {
LABEL_112:
        abort();
      }
      *(_QWORD *)a2 = 1;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = 1065353216;
      *(_DWORD *)(a2 + 72) = 0;
      *(_OWORD *)(a2 + 76) = xmmword_208232BA0;
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(a2 + 92) = _Q0;
      *(_OWORD *)(a2 + 108) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 124) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 140) = 1042536202;
      *(_BYTE *)(a2 + 144) = 0;
      *(_DWORD *)(a2 + 148) = 1042536202;
      *(_DWORD *)(a2 + 248) = 5;
      *(_OWORD *)(a2 + 252) = xmmword_208232BD0;
      *(_OWORD *)(a2 + 268) = _Q0;
      *(_OWORD *)(a2 + 284) = xmmword_208232BB0;
      *(_OWORD *)(a2 + 300) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 316) = 1042536202;
      *(_BYTE *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 324) = 1042536202;
      *(_BYTE *)(a2 + 424) = 1;
      *(_OWORD *)(a2 + 432) = xmmword_208232BE0;
      *(_OWORD *)(a2 + 448) = xmmword_208232BF0;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(a2 + 464) = xmmword_208232C00;
      *(_OWORD *)(a2 + 480) = _Q1;
      *(_OWORD *)(a2 + 496) = xmmword_208232C10;
      *(_QWORD *)(a2 + 512) = 0x3FF0000000000000;
      *(_WORD *)(a2 + 520) = 256;
      *(_BYTE *)(a2 + 522) = 1;
      *(_QWORD *)(a2 + 528) = 2;
      *(_OWORD *)(a2 + 611) = *(_OWORD *)(a2 + 507);
      *(_OWORD *)(a2 + 600) = *(_OWORD *)(a2 + 496);
      v58 = *(_OWORD *)(a2 + 464);
      *(_OWORD *)(a2 + 584) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a2 + 568) = v58;
      v59 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a2 + 536) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a2 + 552) = v59;
      *v4 = xmmword_208232C20;
      *(_DWORD *)(a2 + 648) = 1061158912;
      *(_OWORD *)(a2 + 656) = xmmword_208232C30;
      *(_OWORD *)(a2 + 672) = xmmword_208232C40;
      *(_QWORD *)(a2 + 688) = 3;
      *(_QWORD *)(a2 + 712) = 0;
      *(_QWORD *)(a2 + 696) = 0;
      *(_QWORD *)(a2 + 704) = 0;
      v60 = operator new(4uLL);
      *(_QWORD *)(a2 + 696) = v60;
      *v60++ = 4;
      *(_QWORD *)(a2 + 712) = v60;
      *(_QWORD *)(a2 + 704) = v60;
      *(_QWORD *)(a2 + 720) = 0x200000000;
      *(_OWORD *)(a2 + 728) = xmmword_208232C50;
      *(_OWORD *)(a2 + 744) = xmmword_208232C60;
      *(_OWORD *)(a2 + 760) = xmmword_208232C70;
      *(_OWORD *)(a2 + 776) = xmmword_208232BC0;
      *(_DWORD *)(a2 + 792) = 1042536202;
      *(_BYTE *)(a2 + 796) = 0;
      *(_DWORD *)(a2 + 800) = 1042536202;
      *(_QWORD *)(a2 + 904) = 0x3FD0000000000000;
      *(_OWORD *)(a2 + 912) = xmmword_2082338D0;
      *(_OWORD *)(a2 + 928) = xmmword_208233860;
      *(_QWORD *)(a2 + 944) = 10;
      *(_QWORD *)(a2 + 952) = 0x3FE0000000000000;
      *(_QWORD *)(a2 + 960) = 0x3FF0CCCCCCCCCCCDLL;
      *(_BYTE *)(a2 + 968) = 1;
      *(_QWORD *)(a2 + 972) = 0x3E99999A3F000000;
      *(_OWORD *)(a2 + 984) = 0u;
      *(_OWORD *)(a2 + 1000) = 0u;
      *(_DWORD *)(a2 + 1016) = 1065353216;
      *(_BYTE *)(a2 + 1024) = 0;
      *(_QWORD *)(a2 + 1028) = 0x3D4CCCCD3F7EF9DBLL;
      *(_DWORD *)(a2 + 1036) = 0;
      *(_OWORD *)(a2 + 1040) = xmmword_208232CA0;
      *(_DWORD *)(a2 + 1056) = 1045220557;
      *(_QWORD *)(a2 + 1080) = 0;
      *(_OWORD *)(a2 + 1064) = 0u;
      goto LABEL_91;
  }
}

void sub_207D25EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _QWORD *v41;

  sub_207D04BC4(v41);
  sub_207CD822C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_207D25F6C(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_25452B598);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_25452B598);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
      __cxa_guard_release(&qword_25452B598);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_207CCB3BC(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_253E50C48;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

__n128 sub_207D2611C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v3 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v4 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v5 = *(_OWORD *)(a2 + 120);
  v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v7 = (_QWORD *)(a2 + 200);
  v8 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 200) = v8;
  v9 = a1 + 200;
  v10 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *(_QWORD *)(a2 + 192) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 208) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 192) = v9;
  }
  v11 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v11;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v12 = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v12;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  if (*(_BYTE *)(a2 + 304))
  {
    v13 = *(_OWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = v13;
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    *(_BYTE *)(a1 + 304) = 1;
  }
  v14 = *(_OWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v14;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  v15 = *(_OWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v15;
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  v16 = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = v16;
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  result = *(__n128 *)(a2 + 408);
  *(__n128 *)(a1 + 408) = result;
  return result;
}

void sub_207D26330(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v2 = *(void **)a1;
  if (0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x9A90E7D95BC60ALL)
      sub_207CA420C();
    v4 = *(_QWORD *)(a1 + 8);
    v5 = 424 * a2;
    v6 = (char *)operator new(424 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - (_QWORD)v2];
    if ((void *)v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - (_QWORD)v2];
      do
      {
        v4 -= 424;
        sub_207D2611C((uint64_t)(v9 - 424), v4);
      }
      while ((void *)v4 != v2);
      v2 = *(void **)a1;
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while ((void *)v10 != v2)
      {
        v10 -= 424;
        sub_207D049E4(v10);
      }
      if (v2)
        goto LABEL_9;
    }
  }
}

uint64_t sub_207D26438(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  const void **v17;
  __int128 v18;
  const void **v19;
  const void ***v20;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  __int128 v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if ((*(char *)(a2 + 31) & 0x80000000) == 0)
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 32) = 0;
    v5 = a1 + 32;
    *(_BYTE *)(a1 + 56) = 0;
    if (*(_BYTE *)(a2 + 56))
      goto LABEL_3;
LABEL_6:
    *(_BYTE *)(a1 + 64) = 0;
    v7 = a1 + 64;
    *(_BYTE *)(a1 + 88) = 0;
    if (!*(_BYTE *)(a2 + 88))
      goto LABEL_14;
    goto LABEL_10;
  }
  sub_207CA40D8((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  *(_BYTE *)(a1 + 32) = 0;
  v5 = a1 + 32;
  *(_BYTE *)(a1 + 56) = 0;
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_6;
LABEL_3:
  if (*(char *)(a2 + 55) < 0)
  {
    sub_207CA40D8((_BYTE *)v5, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v5 = v6;
  }
  *(_BYTE *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 64) = 0;
  v7 = a1 + 64;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
LABEL_10:
    if (*(char *)(a2 + 87) < 0)
    {
      sub_207CA40D8((_BYTE *)v7, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)v7 = v8;
    }
    *(_BYTE *)(a1 + 88) = 1;
  }
LABEL_14:
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_207CA5698((char *)(a1 + 96), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  v11 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 120) = v9;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v13 = *(_BYTE **)(a2 + 168);
  v12 = *(_BYTE **)(a2 + 176);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      sub_207D0CD58();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 168) = v15;
    *(_QWORD *)(a1 + 176) = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *(_QWORD *)(a1 + 184) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 176) = v16;
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  v17 = *(const void ***)(a2 + 192);
  if (v17 != (const void **)(a2 + 200))
  {
    do
    {
      sub_207D2690C((uint64_t **)(a1 + 192), (uint64_t *)(a1 + 200), v17 + 4, (__int128 *)v17 + 2);
      v19 = (const void **)v17[1];
      if (v19)
      {
        do
        {
          v20 = (const void ***)v19;
          v19 = (const void **)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (const void ***)v17[2];
          v21 = *v20 == v17;
          v17 = (const void **)v20;
        }
        while (!v21);
      }
      v17 = (const void **)v20;
    }
    while (v20 != (const void ***)(a2 + 200));
  }
  if (*(char *)(a2 + 239) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 216), *(void **)(a2 + 216), *(_QWORD *)(a2 + 224));
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v18;
  }
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  if (*(char *)(a2 + 271) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 248), *(void **)(a2 + 248), *(_QWORD *)(a2 + 256));
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = v22;
  }
  *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  if (*(_BYTE *)(a2 + 304))
  {
    if (*(char *)(a2 + 303) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 280), *(void **)(a2 + 280), *(_QWORD *)(a2 + 288));
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = v23;
    }
    *(_BYTE *)(a1 + 304) = 1;
  }
  v24 = *(_OWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v24;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  sub_207CA5698((char *)(a1 + 336), *(_QWORD *)(a2 + 336), *(_QWORD *)(a2 + 344), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 344) - *(_QWORD *)(a2 + 336)) >> 3));
  if (*(char *)(a2 + 383) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 360), *(void **)(a2 + 360), *(_QWORD *)(a2 + 368));
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = v25;
  }
  v26 = (_BYTE *)(a1 + 384);
  if (*(char *)(a2 + 407) < 0)
  {
    sub_207CA40D8(v26, *(void **)(a2 + 384), *(_QWORD *)(a2 + 392));
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_OWORD *)v26 = v27;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  return a1;
}

void sub_207D267F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  uint64_t v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  uint64_t v17;
  char **v18;
  void *v20;

  if (*(_BYTE *)(v12 + 304) && *(char *)(v12 + 303) < 0)
    operator delete(*v14);
  if (*(char *)(v12 + 271) < 0)
    operator delete(*v13);
  if (*(char *)(v12 + 239) < 0)
    operator delete(*a9);
  sub_207D04974(v17, *v18);
  v20 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v12 + 176) = v20;
    operator delete(v20);
  }
  sub_207C99DE0(v15);
  if (*(_BYTE *)(v12 + 88) && *(char *)(v12 + 87) < 0)
    operator delete(*a10);
  if (*(_BYTE *)(v12 + 56) && *(char *)(v12 + 55) < 0)
    operator delete(*a11);
  if (*(char *)(v12 + 31) < 0)
    operator delete(*a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D2690C(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = sub_207D1DCB8(a1, a2, &v14, &v13, a3);
  if (*v6)
    return (uint64_t *)*v6;
  v8 = v6;
  v9 = (uint64_t *)operator new(0x50uLL);
  sub_207D0D2F8(v9 + 4, a4);
  v10 = v14;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = (uint64_t)v10;
  *v8 = (uint64_t)v9;
  v11 = (uint64_t *)**a1;
  v12 = v9;
  if (v11)
  {
    *a1 = v11;
    v12 = (uint64_t *)*v8;
  }
  sub_207CC24B4(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_207D269D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_207D269E4(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = 0x21CFB2B78C13521DLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x9A90E7D95BC609)
    sub_207CA420C();
  if (0x439F656F1826A43ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x439F656F1826A43ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x21CFB2B78C13521DLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x4D4873ECADE304)
    v6 = 0x9A90E7D95BC609;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x9A90E7D95BC609)
      sub_207CA3AB8();
    v7 = (char *)operator new(424 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[424 * v6];
  sub_207D2611C((uint64_t)&v7[424 * v3], a2);
  v10 = v9 + 424;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11)
      return v10;
    goto LABEL_16;
  }
  do
  {
    v11 -= 424;
    sub_207D2611C((uint64_t)(v9 - 424), (uint64_t)v11);
  }
  while (v11 != v12);
  v11 = (char *)*a1;
  v13 = (uint64_t)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  while ((char *)v13 != v11)
  {
    v13 -= 424;
    sub_207D049E4(v13);
  }
  if (v11)
LABEL_16:
    operator delete(v11);
  return v10;
}

uint64_t sub_207D26B38(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x21CFB2B78C13521DLL * ((v8 - *a1) >> 3) >= a4)
  {
    result = a1[1];
    if (0x21CFB2B78C13521DLL * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        v23 = v9;
      }
      else
      {
        v23 = v9;
        do
        {
          sub_207D0B474(v9, v6);
          v6 += 53;
          v9 += 424;
          v23 += 424;
        }
        while (v6 != a3);
        result = a1[1];
      }
      while (result != v23)
        result = sub_207D049E4(result - 424);
      a1[1] = v23;
    }
    else
    {
      v19 = &a2[(result - v9) >> 3];
      if (result != v9)
      {
        v20 = 8 * ((result - v9) >> 3);
        do
        {
          result = sub_207D0B474(v9, v6);
          v6 += 53;
          v9 += 424;
          v20 -= 424;
        }
        while (v20);
        v9 = a1[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          result = sub_207D26438(v9 + v22 * 8, (uint64_t)&v19[v22]);
          v22 += 53;
        }
        while (&v19[v22] != a3);
        v21 = v9 + v22 * 8;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          v10 = sub_207D049E4(v10 - 424);
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x9A90E7D95BC609)
      goto LABEL_37;
    v12 = 0x21CFB2B78C13521DLL * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x4D4873ECADE304 ? 0x9A90E7D95BC609 : v13;
    if (v14 > 0x9A90E7D95BC609)
LABEL_37:
      sub_207CA420C();
    v15 = 424 * v14;
    result = (uint64_t)operator new(424 * v14);
    v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        result = sub_207D26438(v17 + v18 * 8, (uint64_t)&v6[v18]);
        v18 += 53;
      }
      while (&v6[v18] != a3);
      v17 += v18 * 8;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_207D26DDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 12) = v5;
  v6 = (_QWORD *)(a1 + 24);
  v7 = a2 + 3;
  if (*(unsigned __int8 *)(a1 + 36) != *((unsigned __int8 *)a2 + 36))
  {
    if (!*(_BYTE *)(a1 + 36))
    {
      v13 = *v7;
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *v6 = v13;
      *(_BYTE *)(a1 + 36) = 1;
      v9 = a1 + 40;
      v10 = a2 + 5;
      v11 = *(unsigned __int8 *)(a1 + 52);
      if (v11 != *((unsigned __int8 *)a2 + 52))
        goto LABEL_11;
      goto LABEL_8;
    }
    *(_BYTE *)(a1 + 36) = 0;
LABEL_7:
    v9 = a1 + 40;
    v10 = a2 + 5;
    v11 = *(unsigned __int8 *)(a1 + 52);
    if (v11 != *((unsigned __int8 *)a2 + 52))
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 36))
    goto LABEL_7;
  v8 = *v7;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *v6 = v8;
  v9 = a1 + 40;
  v10 = a2 + 5;
  v11 = *(unsigned __int8 *)(a1 + 52);
  if (v11 != *((unsigned __int8 *)a2 + 52))
  {
LABEL_11:
    if (v11)
    {
      *(_BYTE *)(a1 + 52) = 0;
    }
    else
    {
      v14 = *v10;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)v10 + 2);
      *(_QWORD *)v9 = v14;
      *(_BYTE *)(a1 + 52) = 1;
    }
    goto LABEL_14;
  }
LABEL_8:
  if (v11)
  {
    v12 = *v10;
    *(_DWORD *)(v9 + 8) = *((_DWORD *)v10 + 2);
    *(_QWORD *)v9 = v12;
  }
LABEL_14:
  v15 = *(_OWORD *)(a2 + 7);
  v16 = *(_OWORD *)(a2 + 9);
  v18 = (_QWORD *)(a1 + 96);
  v17 = *(void **)(a1 + 96);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 56) = v15;
  v19 = a2 + 12;
  if (v17)
  {
    *(_QWORD *)(a1 + 104) = v17;
    operator delete(v17);
    *v18 = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_QWORD *)(a1 + 112) = a2[14];
  *v19 = 0;
  a2[13] = 0;
  a2[14] = 0;
  v20 = *(void **)(a1 + 120);
  if (v20)
  {
    *(_QWORD *)(a1 + 128) = v20;
    operator delete(v20);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
  *(_QWORD *)(a1 + 136) = a2[17];
  a2[15] = 0;
  a2[16] = 0;
  a2[17] = 0;
  v21 = (_QWORD *)(a1 + 144);
  v22 = a2 + 18;
  if (*(unsigned __int8 *)(a1 + 156) != *((unsigned __int8 *)a2 + 156))
  {
    if (!*(_BYTE *)(a1 + 156))
    {
      v28 = *v22;
      *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
      *v21 = v28;
      *(_BYTE *)(a1 + 156) = 1;
      v24 = a1 + 160;
      v25 = a2 + 20;
      v26 = *(unsigned __int8 *)(a1 + 172);
      if (v26 != *((unsigned __int8 *)a2 + 172))
        goto LABEL_28;
      goto LABEL_25;
    }
    *(_BYTE *)(a1 + 156) = 0;
LABEL_24:
    v24 = a1 + 160;
    v25 = a2 + 20;
    v26 = *(unsigned __int8 *)(a1 + 172);
    if (v26 != *((unsigned __int8 *)a2 + 172))
      goto LABEL_28;
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a1 + 156))
    goto LABEL_24;
  v23 = *v22;
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *v21 = v23;
  v24 = a1 + 160;
  v25 = a2 + 20;
  v26 = *(unsigned __int8 *)(a1 + 172);
  if (v26 != *((unsigned __int8 *)a2 + 172))
  {
LABEL_28:
    if (v26)
    {
      *(_BYTE *)(a1 + 172) = 0;
    }
    else
    {
      v29 = *v25;
      *(_DWORD *)(v24 + 8) = *((_DWORD *)v25 + 2);
      *(_QWORD *)v24 = v29;
      *(_BYTE *)(a1 + 172) = 1;
    }
    goto LABEL_31;
  }
LABEL_25:
  if (v26)
  {
    v27 = *v25;
    *(_DWORD *)(v24 + 8) = *((_DWORD *)v25 + 2);
    *(_QWORD *)v24 = v27;
  }
LABEL_31:
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  return a1;
}

void sub_207D27060(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_207D046E4((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_207D2709C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      sub_207D27324((uint64_t)(v8 + 3), (uint64_t)(a2 + 3));
      v9 = *v8;
      sub_207D27200(a1, v8);
      a2 = (_QWORD *)*a2;
      v8 = (uint64_t *)v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v11 = *v8;
      sub_207D046E4((uint64_t)(v8 + 3));
      operator delete(v8);
      v8 = (uint64_t *)v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = (uint64_t *)operator new(0x2C0uLL);
      *v10 = 0;
      v10[1] = 0;
      v10[2] = a2[2];
      sub_207D280EC((uint64_t)(v10 + 3), (uint64_t)(a2 + 3));
      v10[1] = v10[2];
      sub_207D27200(a1, v10);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_207D271A0(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_207D27060(v1, v2);
  __cxa_rethrow();
}

void sub_207D271BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207D271D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D271E4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_207D046E4(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_207D27200(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = a2 + 2;
  v4 = a2[2];
  *(v5 - 1) = v4;
  v6 = sub_207D27C94((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *(v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *v6;
  *v6 = (uint64_t)a2;
  if (*a2)
  {
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t sub_207D27324(uint64_t a1, uint64_t a2)
{
  void **v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_207D0CAFC(a1 + 8, (_QWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (a1 != a2)
  {
    v4 = (void **)(a1 + 48);
    v5 = *(_BYTE *)(a2 + 71);
    if (*(char *)(a1 + 71) < 0)
    {
      if (v5 >= 0)
        v7 = (void *)(a2 + 48);
      else
        v7 = *(void **)(a2 + 48);
      if (v5 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 71);
      else
        v8 = *(_QWORD *)(a2 + 56);
      sub_207CC2244(v4, v7, v8);
    }
    else if ((*(_BYTE *)(a2 + 71) & 0x80) != 0)
    {
      sub_207CC2180(v4, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)v4 = v6;
    }
    sub_207D2778C((uint64_t *)(a1 + 72), *(uint64_t **)(a2 + 72), *(uint64_t **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 6));
  }
  sub_207D27414(a1 + 96, (uint64_t *)(a2 + 96));
  sub_207D27668(a1 + 288, a2 + 288);
  v10 = *(_OWORD *)(a2 + 584);
  v9 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 584) = v10;
  *(_OWORD *)(a1 + 600) = v9;
  v11 = *(_OWORD *)(a2 + 664);
  v13 = *(_OWORD *)(a2 + 616);
  v12 = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 664) = v11;
  *(_OWORD *)(a1 + 616) = v13;
  *(_OWORD *)(a1 + 632) = v12;
  return a1;
}

uint64_t sub_207D27414(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 12) = v5;
  v6 = (_QWORD *)(a1 + 24);
  v7 = a2 + 3;
  if (*(unsigned __int8 *)(a1 + 36) != *((unsigned __int8 *)a2 + 36))
  {
    if (!*(_BYTE *)(a1 + 36))
    {
      v13 = *v7;
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *v6 = v13;
      *(_BYTE *)(a1 + 36) = 1;
      v9 = a1 + 40;
      v10 = a2 + 5;
      v11 = *(unsigned __int8 *)(a1 + 52);
      if (v11 != *((unsigned __int8 *)a2 + 52))
        goto LABEL_11;
      goto LABEL_8;
    }
    *(_BYTE *)(a1 + 36) = 0;
LABEL_7:
    v9 = a1 + 40;
    v10 = a2 + 5;
    v11 = *(unsigned __int8 *)(a1 + 52);
    if (v11 != *((unsigned __int8 *)a2 + 52))
      goto LABEL_11;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 36))
    goto LABEL_7;
  v8 = *v7;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *v6 = v8;
  v9 = a1 + 40;
  v10 = a2 + 5;
  v11 = *(unsigned __int8 *)(a1 + 52);
  if (v11 != *((unsigned __int8 *)a2 + 52))
  {
LABEL_11:
    if (v11)
    {
      *(_BYTE *)(a1 + 52) = 0;
    }
    else
    {
      v14 = *v10;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)v10 + 2);
      *(_QWORD *)v9 = v14;
      *(_BYTE *)(a1 + 52) = 1;
    }
    goto LABEL_14;
  }
LABEL_8:
  if (v11)
  {
    v12 = *v10;
    *(_DWORD *)(v9 + 8) = *((_DWORD *)v10 + 2);
    *(_QWORD *)v9 = v12;
  }
LABEL_14:
  v15 = *(_OWORD *)(a2 + 7);
  v16 = *(_OWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 56) = v15;
  if ((uint64_t *)a1 != a2)
  {
    sub_207D27A90((_QWORD *)(a1 + 96), (char *)a2[12], (char *)a2[13], 0xAAAAAAAAAAAAAAABLL * ((a2[13] - a2[12]) >> 2));
    sub_207D27A90((_QWORD *)(a1 + 120), (char *)a2[15], (char *)a2[16], 0xAAAAAAAAAAAAAAABLL * ((a2[16] - a2[15]) >> 2));
  }
  v17 = (_QWORD *)(a1 + 144);
  v18 = a2 + 18;
  if (*(unsigned __int8 *)(a1 + 156) != *((unsigned __int8 *)a2 + 156))
  {
    if (!*(_BYTE *)(a1 + 156))
    {
      v24 = *v18;
      *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
      *v17 = v24;
      *(_BYTE *)(a1 + 156) = 1;
      v20 = a1 + 160;
      v21 = a2 + 20;
      v22 = *(unsigned __int8 *)(a1 + 172);
      if (v22 != *((unsigned __int8 *)a2 + 172))
        goto LABEL_26;
      goto LABEL_23;
    }
    *(_BYTE *)(a1 + 156) = 0;
LABEL_22:
    v20 = a1 + 160;
    v21 = a2 + 20;
    v22 = *(unsigned __int8 *)(a1 + 172);
    if (v22 != *((unsigned __int8 *)a2 + 172))
      goto LABEL_26;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a1 + 156))
    goto LABEL_22;
  v19 = *v18;
  *(_DWORD *)(a1 + 152) = *((_DWORD *)a2 + 38);
  *v17 = v19;
  v20 = a1 + 160;
  v21 = a2 + 20;
  v22 = *(unsigned __int8 *)(a1 + 172);
  if (v22 != *((unsigned __int8 *)a2 + 172))
  {
LABEL_26:
    if (v22)
    {
      *(_BYTE *)(a1 + 172) = 0;
    }
    else
    {
      v25 = *v21;
      *(_DWORD *)(v20 + 8) = *((_DWORD *)v21 + 2);
      *(_QWORD *)v20 = v25;
      *(_BYTE *)(a1 + 172) = 1;
    }
    goto LABEL_29;
  }
LABEL_23:
  if (v22)
  {
    v23 = *v21;
    *(_DWORD *)(v20 + 8) = *((_DWORD *)v21 + 2);
    *(_QWORD *)v20 = v23;
  }
LABEL_29:
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  return a1;
}

uint64_t sub_207D27668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (a1 == a2)
  {
    sub_207D0CAFC(a1 + 32, (_QWORD *)(a1 + 32));
    sub_207D0CAFC(a1 + 192, (_QWORD *)(a1 + 192));
  }
  else
  {
    v5 = *(_BYTE *)(a2 + 31);
    if (*(char *)(a1 + 31) < 0)
    {
      if (v5 >= 0)
        v7 = (void *)(a2 + 8);
      else
        v7 = *(void **)(a2 + 8);
      if (v5 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 31);
      else
        v8 = *(_QWORD *)(a2 + 16);
      sub_207CC2244((void **)v4, v7, v8);
    }
    else if ((*(_BYTE *)(a2 + 31) & 0x80) != 0)
    {
      sub_207CC2180((_QWORD *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v4 = v6;
    }
    sub_207D0CAFC(a1 + 32, (_QWORD *)(a2 + 32));
    v9 = *(_OWORD *)(a2 + 64);
    v10 = *(_OWORD *)(a2 + 80);
    v11 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 110) = *(_QWORD *)(a2 + 110);
    *(_OWORD *)(a1 + 80) = v10;
    *(_OWORD *)(a1 + 96) = v11;
    *(_OWORD *)(a1 + 64) = v9;
    sub_207CC1DDC((void **)(a1 + 120), *(void ***)(a2 + 120), *(void ***)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
    v12 = *(_OWORD *)(a2 + 144);
    v13 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 169) = *(_OWORD *)(a2 + 169);
    *(_OWORD *)(a1 + 144) = v12;
    *(_OWORD *)(a1 + 160) = v13;
    sub_207D0CAFC(a1 + 192, (_QWORD *)(a2 + 192));
    sub_207D0CD6C(a1 + 224, *(__int128 **)(a2 + 224), (__int128 *)(a2 + 232));
  }
  v14 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v14;
  return a1;
}

void sub_207D2778C(uint64_t *a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 6) >= __sz)
  {
    v14 = a1[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v9) >> 6) >= __sz)
    {
      if (a2 == a3)
      {
        v19 = *a1;
      }
      else
      {
        v19 = *a1;
        do
        {
          sub_207D27414(v9, v6);
          v6 += 24;
          v9 += 192;
          v19 += 192;
        }
        while (v6 != a3);
        v14 = a1[1];
      }
      while (v14 != v19)
      {
        v26 = *(void **)(v14 - 72);
        if (v26)
        {
          *(_QWORD *)(v14 - 64) = v26;
          operator delete(v26);
        }
        v27 = *(void **)(v14 - 96);
        if (v27)
        {
          *(_QWORD *)(v14 - 88) = v27;
          operator delete(v27);
        }
        v14 -= 192;
      }
      a1[1] = v19;
    }
    else
    {
      v15 = &a2[8 * ((v14 - v9) >> 6)];
      if (v14 != v9)
      {
        v16 = (v14 - v9) >> 6 << 6;
        do
        {
          sub_207D27414(v9, v6);
          v6 += 24;
          v9 += 192;
          v16 -= 192;
        }
        while (v16);
        v9 = a1[1];
      }
      v17 = v9;
      if (v15 != a3)
      {
        v18 = 0;
        do
        {
          sub_207D09340(v9 + v18 * 8, &v15[v18]);
          v18 += 24;
        }
        while (&v15[v18] != a3);
        v17 = v9 + v18 * 8;
      }
      a1[1] = v17;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          v12 = *(void **)(v10 - 72);
          if (v12)
          {
            *(_QWORD *)(v10 - 64) = v12;
            operator delete(v12);
          }
          v13 = *(void **)(v10 - 96);
          if (v13)
          {
            *(_QWORD *)(v10 - 88) = v13;
            operator delete(v13);
          }
          v10 -= 192;
        }
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x155555555555555)
      goto LABEL_46;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0xAAAAAAAAAAAAAALL ? 0x155555555555555 : v21;
    if (v22 > 0x155555555555555)
LABEL_46:
      sub_207D159B0();
    v23 = 192 * v22;
    v24 = (char *)operator new(192 * v22);
    *a1 = (uint64_t)v24;
    a1[1] = (uint64_t)v24;
    a1[2] = (uint64_t)&v24[v23];
    if (v6 != a3)
    {
      v25 = 0;
      do
      {
        sub_207D09340((uint64_t)&v24[v25 * 8], &v6[v25]);
        v25 += 24;
      }
      while (&v6[v25] != a3);
      v24 += v25 * 8;
    }
    a1[1] = (uint64_t)v24;
  }
}

_QWORD *sub_207D27A90(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 2) >= __sz)
    {
      v24 = *result;
      if (a2 != a3)
      {
        v25 = *result;
        do
        {
          v26 = *(_QWORD *)v6;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v25 = v26;
          v25 += 12;
          v6 += 12;
          v24 += 12;
        }
        while (v6 != a3);
      }
      v15 = v24 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[4 * ((v17 - v9) >> 2)];
      if (v17 != v9)
      {
        v19 = 4 * ((v17 - v9) >> 2);
        do
        {
          v20 = *(_QWORD *)v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v9 = v20;
          v9 += 12;
          v6 += 12;
          v19 -= 12;
        }
        while (v19);
        v9 = *v16;
      }
      v21 = v9;
      if (v18 != a3)
      {
        v21 = v9;
        v22 = v9;
        do
        {
          v23 = *(_QWORD *)v18;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v18 + 2);
          *v22 = v23;
          v22 = (_QWORD *)((char *)v22 + 12);
          v18 += 12;
          v21 = (_QWORD *)((char *)v21 + 12);
        }
        while (v18 != a3);
      }
      v15 = (char *)v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_28;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_28:
      sub_207CA420C();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      v14 = &v9[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

_QWORD *sub_207D27C94(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        sub_207D27F1C(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (_QWORD *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (v10[2] != v12);
          v11 |= v10[2] == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (_QWORD *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (v25[2] != v27);
      v26 |= v25[2] == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_207D27F1C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    if (a2 >> 61)
      sub_207CA3AB8();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v8 = a1 + 16;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v9 = v7[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        while (1)
        {
          v18 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v19 = v18[1];
          if (v19 >= a2)
            v19 %= a2;
          if (v19 == v9)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v20 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19))
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20 && v18[2] == v20[2]);
              *v7 = v20;
              v22 = 8 * v19;
              *v21 = **(_QWORD **)(*(_QWORD *)a1 + v22);
              **(_QWORD **)(*(_QWORD *)a1 + v22) = v18;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v7;
              v7 = v18;
              v9 = v19;
            }
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
        while (1)
        {
          v12 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v13 = v12[1] & v10;
          if (v13 == v11)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v14 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14 && v12[2] == v14[2]);
              *v7 = v14;
              v16 = 8 * v13;
              *v15 = **(_QWORD **)(*(_QWORD *)a1 + v16);
              **(_QWORD **)(*(_QWORD *)a1 + v16) = v12;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              v7 = v12;
              v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v17)
      operator delete(v17);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_207D280EC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(char *)(a2 + 31) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v4;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_207D28278(a1 + 72, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 6));
  sub_207D09340(a1 + 96, (uint64_t *)(a2 + 96));
  sub_207D2843C(a1 + 288, a2 + 288);
  v6 = *(_OWORD *)(a2 + 568);
  v7 = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = v7;
  *(_OWORD *)(a1 + 568) = v6;
  v8 = *(_OWORD *)(a2 + 616);
  v9 = *(_OWORD *)(a2 + 632);
  v10 = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 664) = v10;
  *(_OWORD *)(a1 + 616) = v8;
  *(_OWORD *)(a1 + 632) = v9;
  return a1;
}

void sub_207D28218(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D28278(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x155555555555556)
      sub_207D159B0();
    result = (uint64_t)operator new(192 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 192 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_207D09340(v8 + v9, (uint64_t *)(a2 + v9));
        v9 += 192;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_207D28334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_207D28398(&a9);
  _Unwind_Resume(a1);
}

void sub_207D28348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;

  for (; v11; v11 -= 192)
  {
    v13 = v10 + v11;
    v14 = *(void **)(v10 + v11 - 72);
    if (v14)
    {
      *(_QWORD *)(v13 - 64) = v14;
      operator delete(v14);
    }
    v15 = *(void **)(v13 - 96);
    if (v15)
    {
      *(_QWORD *)(v10 + v11 - 88) = v15;
      operator delete(v15);
    }
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_207D28398(&a9);
  _Unwind_Resume(a1);
}

void ***sub_207D28398(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 9);
          if (v6)
          {
            *((_QWORD *)v4 - 8) = v6;
            operator delete(v6);
          }
          v7 = (void *)*((_QWORD *)v4 - 12);
          if (v7)
          {
            *((_QWORD *)v4 - 11) = v7;
            operator delete(v7);
          }
          v4 -= 192;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_207D2843C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  const void **v15;
  __int128 v16;
  const void **v18;
  const void ***v19;
  BOOL v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_207CA40D8((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    *(_BYTE *)(a1 + 32) = 0;
    v5 = a1 + 32;
    *(_BYTE *)(a1 + 56) = 0;
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_9;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 32) = 0;
    v5 = a1 + 32;
    *(_BYTE *)(a1 + 56) = 0;
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_9;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_207CA40D8((_BYTE *)v5, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v5 = v6;
  }
  *(_BYTE *)(a1 + 56) = 1;
LABEL_9:
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 110);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 110) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  sub_207CA5698((char *)(a1 + 120), *(_QWORD *)(a2 + 120), *(_QWORD *)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3));
  v11 = *(_OWORD *)(a2 + 144);
  v12 = *(_OWORD *)(a2 + 160);
  v13 = *(_OWORD *)(a2 + 169);
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 169) = v13;
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    if (*(char *)(a2 + 215) < 0)
    {
      sub_207CA40D8((_BYTE *)(a1 + 192), *(void **)(a2 + 192), *(_QWORD *)(a2 + 200));
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = v14;
    }
    *(_BYTE *)(a1 + 216) = 1;
  }
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 240) = 0;
  v15 = *(const void ***)(a2 + 224);
  if (v15 != (const void **)(a2 + 232))
  {
    do
    {
      sub_207D2690C((uint64_t **)(a1 + 224), (uint64_t *)(a1 + 232), v15 + 4, (__int128 *)v15 + 2);
      v18 = (const void **)v15[1];
      if (v18)
      {
        do
        {
          v19 = (const void ***)v18;
          v18 = (const void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (const void ***)v15[2];
          v20 = *v19 == v15;
          v15 = (const void **)v19;
        }
        while (!v20);
      }
      v15 = (const void **)v19;
    }
    while (v19 != (const void ***)(a2 + 232));
  }
  v16 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v16;
  return a1;
}

void sub_207D28640(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (v1[216] && v1[215] < 0)
    operator delete(*v5);
  sub_207C99DE0(v4);
  if (v1[56] && v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D286B8(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == a2)
            {
              if (result[2] == a2)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == a2)
          {
            if (result[2] == a2)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_22:
  v27 = operator new(0x2C0uLL);
  *v27 = 0;
  v27[1] = a2;
  v27[2] = *a3;
  bzero(v27 + 3, 0x2A8uLL);
  sub_207D0502C((uint64_t)(v27 + 3));
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
    goto LABEL_50;
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v19 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v19)
    goto LABEL_34;
  if (prime < *(_QWORD *)&v19)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v20);
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
    }
    if (prime <= v20)
      prime = v20;
    if (prime < *(_QWORD *)&v19)
LABEL_34:
      sub_207CA6B84(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v23 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= a2)
    {
      v3 = a2 % v7;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (a2 % v7));
      v25 = v27;
      if (!v24)
        goto LABEL_53;
      goto LABEL_51;
    }
    v3 = a2;
LABEL_50:
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    v25 = v27;
    if (!v24)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v23 & a2;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & a2));
  v25 = v27;
  if (!v24)
  {
LABEL_53:
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v27)
    {
      v26 = *(_QWORD *)(*v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7)
          v26 %= v7;
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_59;
  }
LABEL_51:
  *v25 = *v24;
  *v24 = v27;
LABEL_59:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_207D289D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D04FE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_207D289EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D04FE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D28A00(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  *(_QWORD *)a1 = off_24C072F78;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  kdebug_trace();
  v6 = operator new(0x718uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_24C073000;
  v7 = sub_207D30744((uint64_t)(v6 + 3), a2, a3);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  kdebug_trace();
  return a1;
}

void sub_207D28B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_207CD822C((uint64_t)&a9);
  sub_207D061C4(v9 + 24);
  sub_207C99D78(v10);
  _Unwind_Resume(a1);
}

void sub_207D28B50(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_207D28B58(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_207D28B60(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x8_t *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int8x8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  unint64_t *v55;
  _QWORD *v56;
  int8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD **v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int8x8_t *v74;
  char *v75;
  int8x8_t v76;
  uint64_t v77;
  char *v78;
  void **v79;
  char v80;
  __int128 v81;
  void *v82;
  size_t v83;
  char *v84;
  int8x8_t *v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  __int128 v89;
  int v90;
  uint64_t *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  _QWORD v99[2];
  char v100;
  char v101;

  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectPipeline.cpp", 605, (uint64_t)"m_ != nullptr && \"The DetectPipeline doesn't seem to exist, it has to be \" \"created once before reconfiguring\"", 110, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
    {
      abort();
    }
    v10 = *(_QWORD *)(a1 + 8);
  }
  sub_207D293B8(v10, a2);
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v11 = *(int8x8_t **)(a1 + 8);
  v12 = (uint64_t *)v11[207];
  v95 = a2;
  if (!v12)
  {
    v54 = 0;
    v74 = v11 + 205;
    if (&v11[205] != a3)
      goto LABEL_140;
    goto LABEL_175;
  }
  v94 = a5;
  do
  {
    v14 = (unsigned __int8 *)(v12 + 2);
    v15 = *((char *)v12 + 39);
    if (v15 >= 0)
      v16 = v12 + 2;
    else
      v16 = (uint64_t *)v12[2];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)v12 + 39);
    else
      v17 = v12[3];
    v18 = sub_207CA77C0((uint64_t)v99, v16, v17);
    v19 = a3[1];
    if (v19)
    {
      v20 = v18;
      v21 = (uint8x8_t)vcnt_s8(v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = v18;
        if (v18 >= *(_QWORD *)&v19)
          v22 = v18 % *(_QWORD *)&v19;
      }
      else
      {
        v22 = (*(_QWORD *)&v19 - 1) & v18;
      }
      v23 = *(uint64_t ***)(*(_QWORD *)a3 + 8 * v22);
      if (v23)
      {
        v24 = *v23;
        if (*v23)
        {
          v25 = *((_BYTE *)v12 + 39);
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v12 + 39);
          else
            v26 = v12[3];
          if (v25 < 0)
            v14 = (unsigned __int8 *)v12[2];
          if (v21.u32[0] < 2uLL)
          {
            v27 = *(_QWORD *)&v19 - 1;
            while (1)
            {
              v32 = v24[1];
              if (v20 == v32)
              {
                v33 = *((unsigned __int8 *)v24 + 39);
                if ((v33 & 0x80u) == 0)
                  v34 = *((unsigned __int8 *)v24 + 39);
                else
                  v34 = v24[3];
                if (v34 == v26)
                {
                  if ((v33 & 0x80) != 0)
                  {
                    if (!memcmp((const void *)v24[2], v14, v24[3]))
                      goto LABEL_8;
                  }
                  else
                  {
                    if (!*((_BYTE *)v24 + 39))
                      goto LABEL_8;
                    v35 = 0;
                    while (*((unsigned __int8 *)v24 + v35 + 16) == v14[v35])
                    {
                      if (v33 == ++v35)
                        goto LABEL_61;
                    }
                  }
                }
              }
              else if ((v32 & v27) != v22)
              {
                goto LABEL_62;
              }
              v24 = (uint64_t *)*v24;
              if (!v24)
                goto LABEL_62;
            }
          }
          do
          {
            v28 = v24[1];
            if (v20 == v28)
            {
              v29 = *((unsigned __int8 *)v24 + 39);
              if ((v29 & 0x80u) == 0)
                v30 = *((unsigned __int8 *)v24 + 39);
              else
                v30 = v24[3];
              if (v30 == v26)
              {
                if ((v29 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v24[2], v14, v24[3]))
                    goto LABEL_8;
                }
                else
                {
                  if (!*((_BYTE *)v24 + 39))
                    goto LABEL_8;
                  v31 = 0;
                  while (*((unsigned __int8 *)v24 + v31 + 16) == v14[v31])
                  {
                    if (v29 == ++v31)
                    {
LABEL_61:
                      if (v24)
                        goto LABEL_8;
                      goto LABEL_62;
                    }
                  }
                }
              }
            }
            else
            {
              if (v28 >= *(_QWORD *)&v19)
                v28 %= *(_QWORD *)&v19;
              if (v28 != v22)
                break;
            }
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_62:
    v36 = v97;
    if (v97 >= v98)
    {
      v37 = v96;
      v38 = (v97 - v96) >> 3;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61)
        sub_207CA420C();
      v40 = v98 - v96;
      if ((v98 - v96) >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        if (v41 >> 61)
          sub_207CA3AB8();
        v42 = (char *)operator new(8 * v41);
        v43 = &v42[8 * v38];
        *(_QWORD *)v43 = v12[5];
        v13 = (uint64_t)(v43 + 8);
        v44 = (char *)(v97 - v96);
        if (v97 == v96)
          goto LABEL_80;
      }
      else
      {
        v42 = 0;
        v43 = (char *)(8 * v38);
        *(_QWORD *)(8 * v38) = v12[5];
        v13 = 8 * v38 + 8;
        v44 = (char *)(v97 - v96);
        if (v97 == v96)
        {
LABEL_80:
          v96 = v43;
          v98 = &v42[8 * v41];
          if (v37)
            operator delete(v37);
          goto LABEL_7;
        }
      }
      v45 = (unint64_t)(v44 - 8);
      if (v45 < 0x58)
        goto LABEL_183;
      if ((unint64_t)(v96 - v42) < 0x20)
        goto LABEL_183;
      v46 = (v45 >> 3) + 1;
      v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = &v97[-v47];
      v43 -= v47;
      v49 = &v42[8 * v38 - 16];
      v50 = (__int128 *)(v97 - 16);
      v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v52 = *v50;
        *((_OWORD *)v49 - 1) = *(v50 - 1);
        *(_OWORD *)v49 = v52;
        v49 -= 32;
        v50 -= 2;
        v51 -= 4;
      }
      while (v51);
      v36 = v48;
      if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_183:
        do
        {
          v53 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *((_QWORD *)v43 - 1) = v53;
          v43 -= 8;
        }
        while (v36 != v96);
      }
      goto LABEL_80;
    }
    *(_QWORD *)v97 = v12[5];
    v13 = (uint64_t)(v97 + 8);
LABEL_7:
    v97 = (char *)v13;
LABEL_8:
    v12 = (uint64_t *)*v12;
  }
  while (v12);
  v54 = v96;
  v11 = *(int8x8_t **)(a1 + 8);
  if (v96 == v97)
  {
    a5 = v94;
    v74 = v11 + 205;
    if (&v11[205] != a3)
      goto LABEL_140;
  }
  else
  {
    a5 = v94;
    if (v11[137])
    {
      v55 = (unint64_t *)v96;
      do
      {
        v56 = *(_QWORD **)(a1 + 8);
        v57 = (int8x8_t)v56[137];
        if (v57)
        {
          v58 = *v55;
          v59 = (uint8x8_t)vcnt_s8(v57);
          v59.i16[0] = vaddlv_u8(v59);
          if (v59.u32[0] > 1uLL)
          {
            v60 = *v55;
            if (*(_QWORD *)&v57 <= v58)
              v60 = v58 % *(_QWORD *)&v57;
          }
          else
          {
            v60 = (*(_QWORD *)&v57 - 1) & v58;
          }
          v61 = v56[136];
          v62 = *(_QWORD ***)(v61 + 8 * v60);
          if (v62)
          {
            v63 = *v62;
            if (*v62)
            {
              v64 = *(_QWORD *)&v57 - 1;
              if (v59.u32[0] < 2uLL)
              {
                while (1)
                {
                  v65 = v63[1];
                  if (v65 == v58)
                  {
                    if (v63[2] == v58)
                      goto LABEL_108;
                  }
                  else if ((v65 & v64) != v60)
                  {
                    goto LABEL_86;
                  }
                  v63 = (_QWORD *)*v63;
                  if (!v63)
                    goto LABEL_86;
                }
              }
              do
              {
                v66 = v63[1];
                if (v66 == v58)
                {
                  if (v63[2] == v58)
                  {
LABEL_108:
                    if (v59.u32[0] > 1uLL)
                    {
                      if (*(_QWORD *)&v57 <= v58)
                        v58 %= *(_QWORD *)&v57;
                    }
                    else
                    {
                      v58 &= v64;
                    }
                    v67 = *(_QWORD **)(v61 + 8 * v58);
                    do
                    {
                      v68 = v67;
                      v67 = (_QWORD *)*v67;
                    }
                    while (v67 != v63);
                    if (v68 == v56 + 138)
                      goto LABEL_125;
                    v69 = v68[1];
                    if (v59.u32[0] > 1uLL)
                    {
                      if (v69 >= *(_QWORD *)&v57)
                        v69 %= *(_QWORD *)&v57;
                    }
                    else
                    {
                      v69 &= v64;
                    }
                    if (v69 != v58)
                    {
LABEL_125:
                      if (!*v63)
                        goto LABEL_126;
                      v70 = *(_QWORD *)(*v63 + 8);
                      if (v59.u32[0] > 1uLL)
                      {
                        if (v70 >= *(_QWORD *)&v57)
                          v70 %= *(_QWORD *)&v57;
                      }
                      else
                      {
                        v70 &= v64;
                      }
                      if (v70 != v58)
LABEL_126:
                        *(_QWORD *)(v61 + 8 * v58) = 0;
                    }
                    v71 = *v63;
                    if (*v63)
                    {
                      v72 = *(_QWORD *)(v71 + 8);
                      if (v59.u32[0] > 1uLL)
                      {
                        if (v72 >= *(_QWORD *)&v57)
                          v72 %= *(_QWORD *)&v57;
                      }
                      else
                      {
                        v72 &= v64;
                      }
                      if (v72 != v58)
                      {
                        *(_QWORD *)(v56[136] + 8 * v72) = v68;
                        v71 = *v63;
                      }
                    }
                    *v68 = v71;
                    *v63 = 0;
                    --v56[139];
                    v73 = v63[3];
                    v63[3] = 0;
                    if (v73)
                      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
                    operator delete(v63);
                    break;
                  }
                }
                else
                {
                  if (v66 >= *(_QWORD *)&v57)
                    v66 %= *(_QWORD *)&v57;
                  if (v66 != v60)
                    break;
                }
                v63 = (_QWORD *)*v63;
              }
              while (v63);
            }
          }
        }
LABEL_86:
        ++v55;
      }
      while (v55 != (unint64_t *)v97);
      v11 = *(int8x8_t **)(a1 + 8);
    }
    v74 = v11 + 205;
    if (&v11[205] != a3)
    {
LABEL_140:
      v11[209].i32[0] = a3[4].i32[0];
      v75 = (char *)a3[2];
      v76 = v11[206];
      if (!*(_QWORD *)&v76)
        goto LABEL_158;
      v77 = 0;
      do
        *(_QWORD *)(*(_QWORD *)v74 + 8 * v77++) = 0;
      while (*(_QWORD *)&v76 != v77);
      v78 = (char *)v11[207];
      v11[208] = 0;
      v11[207] = 0;
      if (v78)
      {
        while (v75)
        {
          if (v78 != v75)
          {
            v79 = (void **)(v78 + 16);
            v80 = v75[39];
            if (v78[39] < 0)
            {
              if (v80 >= 0)
                v82 = v75 + 16;
              else
                v82 = (void *)*((_QWORD *)v75 + 2);
              if (v80 >= 0)
                v83 = v75[39];
              else
                v83 = *((_QWORD *)v75 + 3);
              sub_207CC2244(v79, v82, v83);
            }
            else if (v75[39] < 0)
            {
              sub_207CC2180(v79, *((void **)v75 + 2), *((_QWORD *)v75 + 3));
            }
            else
            {
              v81 = *((_OWORD *)v75 + 1);
              *((_QWORD *)v78 + 4) = *((_QWORD *)v75 + 4);
              *(_OWORD *)v79 = v81;
            }
          }
          *((_QWORD *)v78 + 5) = *((_QWORD *)v75 + 5);
          v84 = *(char **)v78;
          sub_207D31330((uint64_t)v74, (uint64_t)v78);
          v75 = *(char **)v75;
          v78 = v84;
          if (!v84)
            goto LABEL_158;
        }
        do
        {
          v93 = *(char **)v78;
          if (v78[39] < 0)
            operator delete(*((void **)v78 + 2));
          operator delete(v78);
          v78 = v93;
        }
        while (v93);
      }
      else
      {
LABEL_158:
        if (v75)
        {
          v85 = v11 + 207;
          do
          {
            v86 = (char *)operator new(0x30uLL);
            v87 = (uint64_t)v86;
            v99[0] = v86;
            v99[1] = v85;
            v100 = 0;
            v88 = (uint64_t *)(v86 + 16);
            *(_QWORD *)v86 = 0;
            *((_QWORD *)v86 + 1) = 0;
            if (v75[39] < 0)
            {
              sub_207CA40D8(v86 + 16, *((void **)v75 + 2), *((_QWORD *)v75 + 3));
            }
            else
            {
              v89 = *((_OWORD *)v75 + 1);
              *((_QWORD *)v86 + 4) = *((_QWORD *)v75 + 4);
              *(_OWORD *)v88 = v89;
            }
            *(_QWORD *)(v87 + 40) = *((_QWORD *)v75 + 5);
            v100 = 1;
            v90 = *(char *)(v87 + 39);
            if (v90 >= 0)
              v91 = v88;
            else
              v91 = *(uint64_t **)(v87 + 16);
            if (v90 >= 0)
              v92 = *(unsigned __int8 *)(v87 + 39);
            else
              v92 = *(_QWORD *)(v87 + 24);
            *(_QWORD *)(v87 + 8) = sub_207CA77C0((uint64_t)&v101, v91, v92);
            sub_207D31330((uint64_t)v74, v87);
            v75 = *(char **)v75;
          }
          while (v75);
        }
      }
    }
  }
LABEL_175:
  sub_207D2975C(a1, a4, (float **)(v95 + 1064));
  sub_207D29B3C(a5, *(_QWORD *)(a1 + 8));
  if (v54)
    operator delete(v54);
}

void sub_207D29330(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  void **v15;

  __cxa_begin_catch(a1);
  sub_207D31008(v15);
  __cxa_rethrow();
}

void sub_207D2935C()
{
  __cxa_end_catch();
  JUMPOUT(0x207D2939CLL);
}

void sub_207D29378()
{
  char *v0;
  void **v1;

  if (v0[39] < 0)
    operator delete(*v1);
  operator delete(v0);
  JUMPOUT(0x207D2939CLL);
}

void sub_207D29398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D293B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (a1 != a2)
  {
    sub_207D26B38((uint64_t *)(a1 + 8), *(_QWORD **)(a2 + 8), *(_QWORD **)(a2 + 16), 0x21CFB2B78C13521DLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    sub_207D2709C((_QWORD *)(a1 + 32), *(_QWORD **)(a2 + 48), 0);
  }
  v4 = *(_OWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  v6 = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 124) = v7;
  v8 = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v8;
  v9 = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 164) = v9;
  v10 = *(_QWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v10;
  v11 = *(_QWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_QWORD *)(a1 + 188) = v11;
  v12 = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v12;
  v13 = *(_QWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_QWORD *)(a1 + 212) = v13;
  v14 = *(_QWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v14;
  v15 = *(_QWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_QWORD *)(a1 + 236) = v15;
  v16 = *(_OWORD *)(a2 + 248);
  v17 = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v17;
  *(_OWORD *)(a1 + 248) = v16;
  v18 = *(_QWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v18;
  v19 = *(_OWORD *)(a2 + 300);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 300) = v19;
  v20 = *(_QWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v20;
  v21 = *(_QWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  *(_QWORD *)(a1 + 340) = v21;
  v22 = *(_QWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v22;
  v23 = *(_QWORD *)(a2 + 364);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(_QWORD *)(a1 + 364) = v23;
  v24 = *(_QWORD *)(a2 + 376);
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v24;
  v25 = *(_QWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_QWORD *)(a1 + 388) = v25;
  v26 = *(_QWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = v26;
  v27 = *(_QWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_QWORD *)(a1 + 412) = v27;
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  v28 = *(_OWORD *)(a2 + 440);
  v29 = *(_OWORD *)(a2 + 456);
  v30 = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 488) = v30;
  *(_OWORD *)(a1 + 440) = v28;
  *(_OWORD *)(a1 + 456) = v29;
  v31 = *(_OWORD *)(a2 + 504);
  v32 = *(_OWORD *)(a2 + 520);
  v33 = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 552) = v33;
  *(_OWORD *)(a1 + 504) = v31;
  *(_OWORD *)(a1 + 520) = v32;
  v34 = *(_OWORD *)(a2 + 568);
  v35 = *(_OWORD *)(a2 + 584);
  v36 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v36;
  *(_OWORD *)(a1 + 568) = v34;
  *(_OWORD *)(a1 + 584) = v35;
  v37 = *(_OWORD *)(a2 + 632);
  v38 = *(_OWORD *)(a2 + 648);
  v39 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = v39;
  *(_OWORD *)(a1 + 632) = v37;
  *(_OWORD *)(a1 + 648) = v38;
  if (a1 != a2)
    sub_207CB9D2C((_QWORD *)(a1 + 696), *(char **)(a2 + 696), *(char **)(a2 + 704), (uint64_t)(*(_QWORD *)(a2 + 704) - *(_QWORD *)(a2 + 696)) >> 2);
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  v40 = *(_OWORD *)(a2 + 724);
  v41 = *(_OWORD *)(a2 + 740);
  *(_QWORD *)(a1 + 756) = *(_QWORD *)(a2 + 756);
  *(_OWORD *)(a1 + 740) = v41;
  *(_OWORD *)(a1 + 724) = v40;
  v42 = *(_QWORD *)(a2 + 764);
  *(_DWORD *)(a1 + 772) = *(_DWORD *)(a2 + 772);
  *(_QWORD *)(a1 + 764) = v42;
  v43 = *(_OWORD *)(a2 + 776);
  *(_OWORD *)(a1 + 788) = *(_OWORD *)(a2 + 788);
  *(_OWORD *)(a1 + 776) = v43;
  v44 = *(_QWORD *)(a2 + 804);
  *(_DWORD *)(a1 + 812) = *(_DWORD *)(a2 + 812);
  *(_QWORD *)(a1 + 804) = v44;
  v45 = *(_QWORD *)(a2 + 816);
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  *(_QWORD *)(a1 + 816) = v45;
  v46 = *(_QWORD *)(a2 + 828);
  *(_DWORD *)(a1 + 836) = *(_DWORD *)(a2 + 836);
  *(_QWORD *)(a1 + 828) = v46;
  v47 = *(_QWORD *)(a2 + 840);
  *(_DWORD *)(a1 + 848) = *(_DWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 840) = v47;
  v48 = *(_QWORD *)(a2 + 852);
  *(_DWORD *)(a1 + 860) = *(_DWORD *)(a2 + 860);
  *(_QWORD *)(a1 + 852) = v48;
  v49 = *(_QWORD *)(a2 + 864);
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 864) = v49;
  v50 = *(_QWORD *)(a2 + 876);
  *(_DWORD *)(a1 + 884) = *(_DWORD *)(a2 + 884);
  *(_QWORD *)(a1 + 876) = v50;
  v51 = *(_QWORD *)(a2 + 888);
  *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 888) = v51;
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a2 + 904);
  v52 = *(_OWORD *)(a2 + 920);
  v53 = *(_OWORD *)(a2 + 936);
  v54 = *(_OWORD *)(a2 + 952);
  *(_OWORD *)(a1 + 964) = *(_OWORD *)(a2 + 964);
  *(_OWORD *)(a1 + 936) = v53;
  *(_OWORD *)(a1 + 952) = v54;
  *(_OWORD *)(a1 + 920) = v52;
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 1016) = *(_DWORD *)(a2 + 1016);
    sub_207D2CDB4((_QWORD *)(a1 + 984), *(_QWORD **)(a2 + 1000), 0);
    v55 = *(_OWORD *)(a2 + 1024);
    v56 = *(_OWORD *)(a2 + 1040);
    *(_DWORD *)(a1 + 1056) = *(_DWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = v56;
    *(_OWORD *)(a1 + 1024) = v55;
    sub_207D0CC14((_QWORD *)(a1 + 1064), *(char **)(a2 + 1064), *(char **)(a2 + 1072), (uint64_t)(*(_QWORD *)(a2 + 1072) - *(_QWORD *)(a2 + 1064)) >> 2);
  }
  return a1;
}

void sub_207D2975C(uint64_t a1, uint64_t **a2, float **a3)
{
  uint64_t *v4;
  uint64_t v6;
  int v7;
  float v8;
  float *v9;
  float *v10;
  int64_t v11;
  float v12;
  float v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *__src;
  char *v19;
  char *v20;
  float v21;
  char **p_src;

  v4 = *a2;
  if (*a2 == a2[1] || *a3 == a3[1])
  {
    v16 = *(_QWORD *)(a1 + 8);
    v17 = (char *)operator new(4uLL);
    *(_DWORD *)v17 = 0;
    sub_207D0CC14((_QWORD *)(v16 + 1584), v17, v17 + 4, 1uLL);
    operator delete(v17);
    return;
  }
  v6 = *v4;
  v7 = *(_DWORD *)(*v4 + 992);
  if (v7 == -1)
  {
    if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
    {
      goto LABEL_33;
    }
    v7 = *(_DWORD *)(v6 + 992);
  }
  if (!v7)
    goto LABEL_32;
  if (v7 != -1)
    goto LABEL_10;
  if (sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
  {
LABEL_33:
    abort();
  }
  v7 = *(_DWORD *)(v6 + 992);
LABEL_10:
  if (!v7)
  {
LABEL_32:
    sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1741, (uint64_t)&unk_20821CCC2, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_208216974);
    abort();
  }
  v8 = *(double *)(v6 + 144) + *(double *)(v6 + 144);
  v9 = *a3;
  v10 = a3[1];
  __src = 0;
  v19 = 0;
  v20 = 0;
  v11 = (char *)v10 - (char *)v9;
  if (v10 == v9)
  {
    v15 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    if (v11 < 0)
      sub_207D0CD58();
    __src = (char *)operator new(v11);
    v19 = __src;
    v20 = &__src[4 * (v11 >> 2)];
    p_src = &__src;
    if (v8 <= 0.0)
    {
      do
      {
        v21 = 0.0;
        sub_207D2F520((uint64_t *)&p_src, &v21);
        ++v9;
      }
      while (v9 != v10);
    }
    else
    {
      do
      {
        v12 = *v9;
        v13 = 0.0;
        if (*v9 > 0.0 && v8 > v12)
          v13 = 1.0 - (float)(v12 / v8);
        v21 = v13;
        sub_207D2F520((uint64_t *)&p_src, &v21);
        ++v9;
      }
      while (v9 != v10);
    }
    v11 = (int64_t)__src;
    v15 = *(_QWORD *)(a1 + 8);
    if (__src != v19)
    {
      sub_207D0CC14((_QWORD *)(v15 + 1584), __src, v19, (v19 - __src) >> 2);
      goto LABEL_29;
    }
  }
  LODWORD(__src) = 0;
  sub_207D0CC14((_QWORD *)(v15 + 1584), (char *)&__src, (char *)&__src + 4, 1uLL);
LABEL_29:
  if (v11)
    operator delete((void *)v11);
}

void sub_207D29B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void sub_207D29B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  int v37;
  __int128 *v38;
  __int128 v39;
  std::string::size_type v40;
  unsigned __int8 v41;
  __int128 *v42;
  unsigned __int8 v43;
  uint64_t v44;
  void *v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  int v53;
  OSType v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v58;
  OSType v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _BYTE *v66;
  unsigned __int8 v67;
  uint64_t v68;
  void *v69[2];
  _BYTE __p[32];
  void *v71[2];
  uint64_t v72;
  uint64_t v73;
  void *v74[2];
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  std::string v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  std::string buf;
  std::string v94;
  char v95;
  void *v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v3 == v4)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v6 = *(_DWORD *)(v3 + 4);
  v7 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    if (*(_DWORD *)(v7 + 4) != v6)
    {
      sub_207CCB5A4((uint64_t)&buf, "All detectors must have same input formats.");
      v99 = 1;
      sub_207CCAFD0(0x59u, (__int128 *)&buf, (uint64_t)v69);
      goto LABEL_45;
    }
    v8 = *(unsigned __int8 *)(v7 + 407);
    if ((v8 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(v7 + 407);
    else
      v9 = *(_QWORD *)(v7 + 392);
    v10 = *(unsigned __int8 *)(v3 + 407);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(v3 + 392);
    if (v9 != v10)
      goto LABEL_44;
    v12 = v11 >= 0 ? (unsigned __int8 *)(v3 + 384) : *(unsigned __int8 **)(v3 + 384);
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v7 + 384), v12, *(_QWORD *)(v7 + 392)))
        goto LABEL_44;
    }
    else if (*(_BYTE *)(v7 + 407))
    {
      v13 = 0;
      while (*(unsigned __int8 *)(v7 + v13 + 384) == v12[v13])
      {
        if (v8 == ++v13)
          goto LABEL_20;
      }
      goto LABEL_44;
    }
LABEL_20:
    v14 = *(unsigned __int8 *)(v7 + 383);
    if ((v14 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v7 + 383);
    else
      v15 = *(_QWORD *)(v7 + 368);
    v16 = *(unsigned __int8 *)(v3 + 383);
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(v3 + 368);
    if (v15 != v16)
      goto LABEL_44;
    v18 = v17 >= 0 ? (unsigned __int8 *)(v3 + 360) : *(unsigned __int8 **)(v3 + 360);
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v7 + 360), v18, *(_QWORD *)(v7 + 368)))
        goto LABEL_44;
    }
    else if (*(_BYTE *)(v7 + 383))
    {
      v19 = 0;
      while (*(unsigned __int8 *)(v7 + v19 + 360) == v18[v19])
      {
        if (v14 == ++v19)
          goto LABEL_36;
      }
LABEL_44:
      sub_207CCB5A4((uint64_t)&buf, "All detectors must have same input tensor names.");
      v99 = 1;
      sub_207CCAFD0(0x59u, (__int128 *)&buf, (uint64_t)v69);
      goto LABEL_45;
    }
LABEL_36:
    if (*(_QWORD *)(v7 + 160) != *(_QWORD *)(v3 + 160) || *(_QWORD *)(v7 + 152) != *(_QWORD *)(v3 + 152))
    {
      sub_207CCB5A4((uint64_t)&buf, "All detectors must have same input dimensions.");
      v99 = 1;
      sub_207CCAFD0(0x59u, (__int128 *)&buf, (uint64_t)v69);
      goto LABEL_45;
    }
    if (*(_QWORD *)(v7 + 120) != *(_QWORD *)(v3 + 120))
    {
      sub_207CCB5A4((uint64_t)&buf, "All detectors must output same number of classes.");
      v99 = 1;
      sub_207CCAFD0(0x59u, (__int128 *)&buf, (uint64_t)v69);
      goto LABEL_45;
    }
    if (*(unsigned __int8 *)(v7 + 143) != *(unsigned __int8 *)(v3 + 143))
    {
      sub_207CCB5A4((uint64_t)&buf, "All detectors must have same direct binding options.");
      v99 = 1;
      sub_207CCAFD0(0x59u, (__int128 *)&buf, (uint64_t)v69);
      goto LABEL_45;
    }
    if (*(unsigned __int8 *)(v7 + 141) != *(unsigned __int8 *)(v3 + 141))
      break;
    v7 += 424;
    if (v7 == v4)
    {
      v92 = 1;
      goto LABEL_62;
    }
  }
  sub_207CCB5A4((uint64_t)&buf, "All detectors must have same EspressoV2 options.");
  v99 = 1;
  sub_207CCAFD0(0x59u, (__int128 *)&buf, (uint64_t)v69);
LABEL_45:
  v81 = *(_OWORD *)v69;
  LOBYTE(v82) = 0;
  v91 = 0;
  if (!v77)
  {
    v92 = 0;
    if (!v99)
      goto LABEL_62;
LABEL_56:
    if (!v98)
      goto LABEL_59;
    if (v97 < 0)
    {
      operator delete(v96);
      if ((v95 & 0x80000000) == 0)
      {
LABEL_59:
        if (!v94.__r_.__value_.__s.__data_[0])
          goto LABEL_62;
LABEL_60:
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        goto LABEL_62;
      }
    }
    else if ((v95 & 0x80000000) == 0)
    {
      goto LABEL_59;
    }
    operator delete((void *)v94.__r_.__value_.__l.__size_);
    if (!v94.__r_.__value_.__s.__data_[0])
      goto LABEL_62;
    goto LABEL_60;
  }
  v84 = 0;
  if (__p[24])
  {
    v82 = *(_OWORD *)__p;
    v83 = *(_QWORD *)&__p[16];
    memset(__p, 0, 24);
    v84 = 1;
  }
  LOBYTE(v85) = 0;
  v90 = 0;
  if (v76)
  {
    v86 = v72;
    v85 = *(_OWORD *)v71;
    v71[0] = 0;
    v71[1] = 0;
    v87 = v73;
    *(_OWORD *)v88 = *(_OWORD *)v74;
    v89 = v75;
    v72 = 0;
    v74[0] = 0;
    v74[1] = 0;
    v75 = 0;
    v90 = 1;
  }
  v91 = 1;
  v92 = 0;
  if (__p[24] && (__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v99)
    goto LABEL_56;
LABEL_62:
  if (!v92)
  {
    if (v91)
      v42 = &v82;
    else
      v42 = (__int128 *)&unk_208287788;
    v43 = atomic_load((unsigned __int8 *)&qword_25452B598);
    if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
      __cxa_guard_release(&qword_25452B598);
    }
    v69[0] = (void *)15;
    v69[1] = &off_253E50C48;
    sub_207DEB8A0((const std::error_condition *)v69, (uint64_t)v42, (CFErrorRef *)a1);
    goto LABEL_157;
  }
  v20 = *(_QWORD *)(a2 + 16);
  v21 = v20 - *(_QWORD *)(a2 + 8);
  if (!v21)
    goto LABEL_125;
  v22 = 0;
  v68 = 0x21CFB2B78C13521DLL * (v21 >> 3);
  while (2)
  {
    v23 = *(_QWORD *)(a2 + 8) + 424 * v22;
    v24 = v22;
    if (*(_BYTE *)(v23 + 88))
    {
      v24 = v22;
      if (*(_QWORD *)(a2 + 1664))
      {
        v69[0] = (void *)(v23 + 64);
        v24 = sub_207D2CF4C(a2 + 1640, v23 + 64, (uint64_t)&unk_20822AD51, (__int128 **)v69)[5];
      }
    }
    v80 = v24;
    v25 = *(int8x8_t *)(a2 + 1096);
    if (v25)
    {
      v26 = (uint8x8_t)vcnt_s8(v25);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        v27 = v24;
        if (v24 >= *(_QWORD *)&v25)
          v27 = v24 % *(_QWORD *)&v25;
      }
      else
      {
        v27 = (*(_QWORD *)&v25 - 1) & v24;
      }
      v28 = *(_QWORD **)(*(_QWORD *)(a2 + 1088) + 8 * v27);
      if (v28)
      {
        v29 = (_QWORD *)*v28;
        if (v29)
        {
          if (v26.u32[0] < 2uLL)
          {
            v30 = *(_QWORD *)&v25 - 1;
            while (1)
            {
              v32 = v29[1];
              if (v32 == v24)
              {
                if (v29[2] == v24)
                  goto LABEL_116;
              }
              else if ((v32 & v30) != v27)
              {
                goto LABEL_88;
              }
              v29 = (_QWORD *)*v29;
              if (!v29)
                goto LABEL_88;
            }
          }
          do
          {
            v31 = v29[1];
            if (v31 == v24)
            {
              if (v29[2] == v24)
                goto LABEL_116;
            }
            else
            {
              if (v31 >= *(_QWORD *)&v25)
                v31 %= *(_QWORD *)&v25;
              if (v31 != v27)
                break;
            }
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
      }
    }
LABEL_88:
    if (*(_BYTE *)(a2 + 1784))
    {
      if (*(char *)(a2 + 1783) < 0)
        sub_207CA40D8(&buf, *(void **)(a2 + 1760), *(_QWORD *)(a2 + 1768));
      else
        buf = *(std::string *)(a2 + 1760);
      std::to_string(&v79, v24);
      v94 = v79;
      *(_OWORD *)v69 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)__p = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      *(std::string *)&__p[8] = v79;
      LOBYTE(v71[0]) = 1;
      LOBYTE(v71[1]) = 1;
    }
    else
    {
      LOBYTE(v69[0]) = 0;
      LOBYTE(v71[1]) = 0;
    }
    sub_207D4A4A4((_DWORD *)v23, (unint64_t)v69, a2 + 1608, &buf.__r_.__value_.__l.__data_);
    v33 = sub_207D2D3BC((uint64_t *)(a2 + 1088), v24, &v80);
    v34 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    v35 = v33[3];
    v33[3] = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
      v36 = buf.__r_.__value_.__r.__words[0];
      buf.__r_.__value_.__r.__words[0] = 0;
      if (v36)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 32))(v36);
    }
    v37 = *(unsigned __int8 *)(a2 + 1616);
    if (*(_BYTE *)(a2 + 1616))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v40 = *(_QWORD *)(a2 + 1624);
        if (*(char *)(v40 + 23) < 0)
          v40 = *(_QWORD *)v40;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
        _os_log_error_impl(&dword_207C77000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ODT detector creation failed: %s", (uint8_t *)&buf, 0xCu);
        v38 = *(__int128 **)(a2 + 1624);
        if (*((char *)v38 + 23) < 0)
          goto LABEL_104;
LABEL_100:
        v39 = *v38;
        buf.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v39;
      }
      else
      {
        v38 = *(__int128 **)(a2 + 1624);
        if ((*((char *)v38 + 23) & 0x80000000) == 0)
          goto LABEL_100;
LABEL_104:
        sub_207CA40D8(&buf, *(void **)v38, *((_QWORD *)v38 + 1));
      }
      v94.__r_.__value_.__s.__data_[0] = 1;
      v41 = atomic_load((unsigned __int8 *)&qword_25452B598);
      if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
      {
        __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
        __cxa_guard_release(&qword_25452B598);
      }
      v79.__r_.__value_.__r.__words[0] = 12;
      v79.__r_.__value_.__l.__size_ = (std::string::size_type)&off_253E50C48;
      sub_207DEB95C((const std::error_condition *)&v79, (uint64_t)&buf, v23 + 64, (CFErrorRef *)a1);
      if (v94.__r_.__value_.__s.__data_[0] && SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (LOBYTE(v71[1]))
    {
      if (LOBYTE(v71[0]) && (__p[31] & 0x80000000) != 0)
        operator delete(*(void **)&__p[8]);
      if ((__p[7] & 0x80000000) != 0)
        operator delete(v69[0]);
    }
    if (v37)
      goto LABEL_157;
LABEL_116:
    if (++v22 != v68)
      continue;
    break;
  }
  v20 = *(_QWORD *)(a2 + 8);
LABEL_125:
  v44 = *(_QWORD *)(*(_QWORD *)(a2 + 1104) + 24);
  v45 = *(void **)(v44 + 880);
  v46 = *(unint64_t **)(v44 + 888);
  v69[0] = v45;
  v69[1] = v46;
  if (v46)
  {
    v47 = v46 + 1;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  sub_207D54AEC(a2 + 1160, (uint64_t **)v69);
  v49 = (std::__shared_weak_count *)v69[1];
  if (v69[1])
  {
    v50 = (unint64_t *)((char *)v69[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = *(_DWORD *)(v20 + 4);
  if (v52 == 1)
    v53 = 1278226488;
  else
    v53 = 0;
  if (v52)
    v54 = v53;
  else
    v54 = 875704422;
  *(_DWORD *)(a2 + 1264) = v54;
  v55 = *(_QWORD *)(v20 + 152) * *(_QWORD *)(v20 + 160);
  v56 = *(_QWORD *)(a2 + 1272);
  v57 = (*(_QWORD *)(a2 + 1280) - v56) >> 2;
  v58 = v55 >= v57;
  if (v55 <= v57)
  {
    v59 = v54;
    if (!v58)
    {
      *(_QWORD *)(a2 + 1280) = v56 + 4 * v55;
      v59 = v54;
    }
  }
  else
  {
    sub_207D55DD4(a2 + 1272, v55 - v57);
    v59 = *(_DWORD *)(a2 + 1264);
  }
  if (v59 != 1278226488)
  {
    v60 = *(_QWORD *)(a2 + 1296);
    v61 = (*(_QWORD *)(a2 + 1304) - v60) >> 2;
    if (v55 >> 1 <= v61)
    {
      if (v55 >> 1 < v61)
        *(_QWORD *)(a2 + 1304) = v60 + 4 * (v55 >> 1);
    }
    else
    {
      sub_207D55DD4(a2 + 1296, (v55 >> 1) - v61);
    }
  }
  v62 = *(_QWORD *)(v20 + 152);
  v63 = *(_QWORD *)(v20 + 160);
  sub_207D54974(v62, v63, &buf);
  sub_207D51B24((int8x8_t *)(a2 + 1160), (uint64_t)&buf, v62, v63, v54, (uint64_t)v69);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!v78)
      goto LABEL_169;
LABEL_153:
    v64 = *(_QWORD **)(a2 + 1104);
    if (v64)
    {
      v65 = *(_QWORD *)(a2 + 904);
      do
      {
        *(_QWORD *)(v64[3] + 896) = v65;
        v64 = (_QWORD *)*v64;
      }
      while (v64);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    if (v78)
      goto LABEL_153;
LABEL_169:
    if (v77)
      v66 = __p;
    else
      v66 = &unk_208287788;
    v67 = atomic_load((unsigned __int8 *)&qword_25452B598);
    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
      __cxa_guard_release(&qword_25452B598);
    }
    buf.__r_.__value_.__r.__words[0] = 15;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)&off_253E50C48;
    sub_207DEB8A0((const std::error_condition *)&buf, (uint64_t)v66, (CFErrorRef *)a1);
    if (!v78 && v77)
    {
      if (v76)
      {
        if (SHIBYTE(v75) < 0)
          operator delete(v74[0]);
        if (SHIBYTE(v72) < 0)
          operator delete(v71[0]);
      }
      if (__p[24] && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
  }
LABEL_157:
  if (!v92 && v91)
  {
    if (v90)
    {
      if (SHIBYTE(v89) < 0)
        operator delete(v88[0]);
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85);
    }
    if (v84)
    {
      if (SHIBYTE(v83) < 0)
        operator delete((void *)v82);
    }
  }
}

void sub_207D2A710(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A724(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A738(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A74C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A760(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_207D04458((uint64_t)&a15);
  sub_207D04458((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_207D2A7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_207D04458((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_207D2A7B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_207D04458((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_207D2A7E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CCB148(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_207D2A7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 185) < 0)
  {
    operator delete(*(void **)(v35 - 208));
    sub_207D04458((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
  sub_207D04458((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_207D2A8D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(_QWORD **)(a1 + 8);
  if (v3[139])
  {
    v4 = (_QWORD *)v3[138];
    if (v4)
    {
      do
      {
        v7 = (_QWORD *)*v4;
        v8 = v4[3];
        v4[3] = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
        operator delete(v4);
        v4 = v7;
      }
      while (v7);
    }
    v3[138] = 0;
    v5 = v3[137];
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(v3[136] + 8 * i) = 0;
    }
    v3[139] = 0;
  }
  *a2 = 0;
  a2[1] = 0;
}

uint64_t sub_207D2A96C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, char a5@<W7>, uint64_t a6@<X8>, double a7@<D0>)
{
  __int128 v15;

  if (a2[1] == *a2
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/ODT/Tracking/src/DetectPipeline.cpp", 645, (uint64_t)"pixel_buffers.size() >= 1u", 26, (uint64_t)&unk_20821CCC2, 0, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  if (*(_BYTE *)(a3 + 24))
  {
    *(_QWORD *)&v15 = **(_QWORD **)a3;
    *((_QWORD *)&v15 + 1) = 1;
  }
  else
  {
    LOBYTE(v15) = 0;
    BYTE8(v15) = 0;
  }
  return sub_207D2AA4C(*(_QWORD *)(a1 + 8), a2, (int8x8_t *)(a1 + 24), &v15, a4, a5, a6, a7);
}

uint64_t sub_207D2AA4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int8x8_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>)
{
  double v13;
  unint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  int8x16_t v26;
  int8x16_t v27;
  _QWORD *v28;
  float v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int16x4_t v33;
  unsigned int v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned int v38;
  int8x16_t v39;
  float32x4_t v40;
  BOOL v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  char *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int8x8_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  _QWORD *v108;
  unint64_t v109;
  char *v110;
  int64x2_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  BOOL v116;
  char v117;
  uint64_t v118;
  int8x8_t v119;
  uint8x8_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int8x8_t v129;
  uint8x8_t v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint8x8_t v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  double v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  _QWORD *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _OWORD *v191;
  _QWORD *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  __int128 v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unsigned __int8 v208;
  __int128 v209;
  void *v210;
  uint64_t v211;
  _QWORD *v212;
  double v213;
  double v214;
  double v215;
  uint64_t v216;
  double v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float *v222;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  void (***v227)(void **__return_ptr, _QWORD, void **, __int128 *, double);
  uint64_t *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *p_shared_owners;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  int32x2_t v241;
  float *v242;
  float *v243;
  int64_t v244;
  unint64_t v245;
  float *v246;
  float32x2_t v247;
  float32x2_t v248;
  int v249;
  float v250;
  float v251;
  int64x2_t v252;
  int32x2_t v253;
  int32x2_t v254;
  int8x8_t v255;
  int8x16_t v256;
  int8x16_t v257;
  _BOOL4 v258;
  float v259;
  float v260;
  float *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  float *v267;
  uint64_t v268;
  char *v269;
  __int128 v270;
  float *v271;
  float *v272;
  unint64_t *v273;
  _OWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int64_t v279;
  _OWORD *v280;
  _OWORD *v281;
  uint64_t v282;
  uint64_t v283;
  _OWORD *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  _OWORD *v289;
  _QWORD *v290;
  unint64_t v291;
  __int128 v292;
  unint64_t v293;
  char *v294;
  char *v295;
  void *v296;
  char *v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  _QWORD *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int8x16_t v311;
  char *v312;
  float v313;
  char *v314;
  int64x2_t v315;
  float v316;
  uint64_t *v317;
  int32x2_t v318;
  int32x2_t v320;
  void *v321;
  float *v322;
  float *v323;
  unint64_t v324;
  void *v325;
  char *v326;
  _QWORD v327[2];
  std::__shared_weak_count *v328;
  __int128 v329;
  void *v330[2];
  uint64_t v331;
  void *__dst[2];
  uint64_t v333;
  void *v334[2];
  _QWORD *v335;
  int64x2_t v336;
  _BYTE v337[9];
  char v338;
  char v339;
  void *v340;
  char v341;
  void *__p;
  char v343;
  char v344;
  char v345;
  char v346;
  __int128 v347;
  void *v348[2];
  __int128 v349;
  int v350;
  __int128 v351;
  __int128 v352;
  int v353;
  __int128 v354;
  float *v355;
  _BYTE v356[24];
  uint64_t v357;

  v357 = *MEMORY[0x24BDAC8D0];
  v351 = 0u;
  v352 = 0u;
  v353 = 733236896;
  kdebug_trace();
  *(_OWORD *)v348 = 0u;
  v349 = 0u;
  v347 = 0u;
  v350 = 1065353216;
  if (!*(_QWORD *)(a1 + 56))
  {
    v22 = 0;
    *(_OWORD *)(a7 + 16) = 0uLL;
    *(_OWORD *)(a7 + 32) = 0uLL;
    *(_OWORD *)a7 = 0uLL;
    *(_DWORD *)(a7 + 48) = 1065353216;
    goto LABEL_49;
  }
  v309 = a1;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
  {
LABEL_25:
    v23 = *a2;
    v24 = sub_20815C130(*a2);
    v25 = sub_20815C3B0(v23);
    v28 = *(_QWORD **)(a1 + 48);
    if (v28)
    {
      v29 = (float)v24 / (float)v25;
      do
      {
        v30 = v28[12];
        v26.i64[0] = *(_QWORD *)v30;
        v31 = (float32x4_t)v26;
        v31.i32[2] = *(_DWORD *)(v30 + 8);
        v27.i64[0] = *(_QWORD *)(v30 + 12);
        v32 = (float32x4_t)v27;
        v32.i32[2] = *(_DWORD *)(v30 + 20);
        v33 = vmovn_s32(vcgtq_f32(v31, v32));
        if ((v33.i8[0] & 1) != 0)
          v34 = -1;
        else
          v34 = 0;
        v35 = (int8x16_t)vdupq_n_s32(v34);
        v36 = (float32x4_t)vbslq_s8(v35, v26, v27);
        v37 = (float32x4_t)vbslq_s8(v35, v27, v26);
        if ((v33.i8[2] & 1) != 0)
          v38 = -1;
        else
          v38 = 0;
        v39 = (int8x16_t)vdupq_n_s32(v38);
        v36.i32[1] = vbslq_s8(v39, v26, v27).i32[1];
        v37.i32[1] = vbslq_s8(v39, v27, v26).i32[1];
        v40 = vsubq_f32(v36, v37);
        v40.f32[0] = vdivq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1)).f32[0];
        v41 = v40.f32[0] <= 1.0;
        v42 = (float)((float)(v40.f32[0] * 0.5) / v29) * 0.5;
        v43 = v42 + 0.5;
        v44 = (float)(v29 * (float)(0.5 / v40.f32[0])) * 0.5;
        v45 = v44 + 0.5;
        if (v41)
          v46 = 0.25;
        else
          v46 = 0.5 - v44;
        if (v41)
        {
          v45 = 0.75;
          v47 = 0.5 - v42;
        }
        else
        {
          v47 = 0.25;
        }
        if (v41)
          v48 = v43;
        else
          v48 = 0.75;
        sub_207DF44D8((int8x8_t *)&v347, v28[2], v46, v47, v45, v48, 0.0);
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    sub_207D2D8BC((_QWORD *)v309, a5, a6, (_QWORD *)v349);
    *(_OWORD *)a7 = v347;
    v49 = v348[0];
    v50 = (unint64_t)v348[1];
    v348[1] = 0;
    v348[0] = 0;
    *(_QWORD *)(a7 + 16) = v49;
    *(_QWORD *)(a7 + 24) = v50;
    v51 = *((_QWORD *)&v349 + 1);
    v22 = (_QWORD *)v349;
    *(_QWORD *)(a7 + 32) = v349;
    *(_QWORD *)(a7 + 40) = v51;
    *(_DWORD *)(a7 + 48) = v350;
    if (v51)
    {
      v52 = v22[1];
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v52 >= v50)
          v52 %= v50;
      }
      else
      {
        v52 &= v50 - 1;
      }
      v22 = 0;
      v49[v52] = a7 + 32;
      v349 = 0uLL;
    }
LABEL_49:
    *(_BYTE *)(a7 + 56) = 1;
    sub_207CEC654((uint64_t)v348, v22);
    v53 = v348[0];
    v348[0] = 0;
    if (!v53)
      return kdebug_trace();
LABEL_50:
    operator delete(v53);
    return kdebug_trace();
  }
  sub_207D2CADC((uint64_t)&v336, *(_BYTE *)(a1 + 1616));
  if (!v346)
  {
    if (v345)
    {
      if (v344)
      {
        if (v343 < 0)
          operator delete(__p);
        if (v341 < 0)
          operator delete(v340);
      }
      if (v339 && v338 < 0)
        operator delete(*(void **)v337);
    }
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 1688))
  {
    v13 = a8 - *(double *)(a1 + 1680);
    v14 = *(_QWORD *)(a1 + 1744);
    v15 = (double)v14;
    v16 = *(double *)(a1 + 1752) * (double)v14;
    *(double *)(a1 + 1752) = v16;
    v17 = *(_QWORD *)(a1 + 1704);
    v18 = (*(_QWORD *)(a1 + 1712) - v17) >> 3;
    if (v14 >= v18)
    {
      v19 = *(_QWORD *)(a1 + 1736);
      if (!v19)
        v19 = (*(_QWORD *)(a1 + 1712) - v17) >> 3;
      *(double *)(a1 + 1752) = v16 - *(double *)(v17 + 8 * v19 - 8);
    }
    v20 = *(_QWORD *)(a1 + 1728);
    if (!v20)
      v20 = v18;
    v21 = v20 - 1;
    *(_QWORD *)(a1 + 1728) = v21;
    *(double *)(v17 + 8 * v21) = v13;
    if (v14 == v18)
    {
      if (*(_QWORD *)(a1 + 1736))
        v14 = *(_QWORD *)(a1 + 1736);
      *(_QWORD *)(a1 + 1736) = v14 - 1;
    }
    else
    {
      v55 = v14 + 1;
      *(_QWORD *)(a1 + 1744) = v55;
      v15 = (double)v55;
    }
    *(double *)(a1 + 1752) = (v13 + *(double *)(a1 + 1752)) / v15;
  }
  v56 = *(_QWORD *)(a1 + 1112);
  v302 = a7;
  v317 = a2;
  if (v56 != 1)
  {
    v57 = a1;
    if (!v56)
    {
      v334[0] = 0;
      v334[1] = 0;
      v335 = 0;
      v58 = *(_QWORD **)(a1 + 1104);
      if (!v58)
        goto LABEL_327;
      while (1)
      {
LABEL_286:
        v167 = v58[3];
        v168 = *(double *)(v57 + 1752);
        if (*(_BYTE *)(v167 + 912) && a8 - *(double *)(v167 + 904) < *(double *)(v167 + 896) - v168
          || *(_BYTE *)(v167 + 920))
        {
          goto LABEL_285;
        }
        v169 = v334[0];
        if (v334[0] != v334[1])
        {
          while (*v169 != v58[2])
          {
            if (++v169 == v334[1])
            {
              v169 = v334[1];
              break;
            }
          }
        }
        if (v169 != v334[1])
          goto LABEL_285;
        if (*(_BYTE *)(v57 + 1688))
        {
          if (v168 == 0.0)
            v168 = 1.0;
          v170 = vcvtad_u64_f64(*(double *)(v167 + 896) / v168);
          if (v170 <= 1)
            v171 = 1;
          else
            v171 = v170;
          v172 = v58[2];
          v173 = v309;
          v174 = *(char **)(v309 + 1136);
          v175 = *(_QWORD *)(v309 + 1144);
          if ((unint64_t)v174 < v175)
          {
LABEL_301:
            *(_QWORD *)v174 = v172;
            *((_QWORD *)v174 + 1) = v171;
            v176 = v174 + 16;
            v57 = v173;
            goto LABEL_316;
          }
        }
        else
        {
          v171 = 1;
          v172 = v58[2];
          v173 = v309;
          v174 = *(char **)(v309 + 1136);
          v175 = *(_QWORD *)(v309 + 1144);
          if ((unint64_t)v174 < v175)
            goto LABEL_301;
        }
        v177 = *(char **)(v173 + 1128);
        v178 = (v174 - v177) >> 4;
        v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 60)
          sub_207CA420C();
        v180 = v175 - (_QWORD)v177;
        if (v180 >> 3 > v179)
          v179 = v180 >> 3;
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF0)
          v181 = 0xFFFFFFFFFFFFFFFLL;
        else
          v181 = v179;
        if (v181)
        {
          if (v181 >> 60)
            sub_207CA3AB8();
          v182 = (char *)operator new(16 * v181);
          v183 = &v182[16 * v178];
          *(_QWORD *)v183 = v172;
          *((_QWORD *)v183 + 1) = v171;
          v184 = (uint64_t)v183;
          if (v174 != v177)
          {
LABEL_312:
            v57 = v309;
            do
            {
              *(_OWORD *)(v184 - 16) = *((_OWORD *)v174 - 1);
              v184 -= 16;
              v174 -= 16;
            }
            while (v174 != v177);
            v174 = *(char **)(v309 + 1128);
            *(_QWORD *)(v309 + 1128) = v184;
            v176 = v183 + 16;
            *(_QWORD *)(v309 + 1136) = v183 + 16;
            *(_QWORD *)(v309 + 1144) = &v182[16 * v181];
            if (!v174)
              goto LABEL_316;
LABEL_315:
            operator delete(v174);
            goto LABEL_316;
          }
        }
        else
        {
          v182 = 0;
          v183 = (char *)(16 * v178);
          *(_QWORD *)v183 = v172;
          *((_QWORD *)v183 + 1) = v171;
          v184 = 16 * v178;
          if (v174 != v177)
            goto LABEL_312;
        }
        v57 = v309;
        *(_QWORD *)(v309 + 1128) = v184;
        v176 = v183 + 16;
        *(_QWORD *)(v309 + 1136) = v183 + 16;
        *(_QWORD *)(v309 + 1144) = &v182[16 * v181];
        if (v174)
          goto LABEL_315;
LABEL_316:
        *(_QWORD *)(v57 + 1136) = v176;
        v185 = *(_QWORD *)(v57 + 1128);
        if ((uint64_t)v176 - v185 >= 17)
        {
          v186 = ((((unint64_t)v176 - v185) >> 4) - 2) >> 1;
          v187 = *(v176 - 1);
          if (*(_QWORD *)(v185 + 16 * v186 + 8) > v187)
          {
            v190 = *(v176 - 2);
            v189 = v176 - 2;
            v188 = v190;
            do
            {
              v191 = v189;
              v189 = (_QWORD *)(v185 + 16 * v186);
              *v191 = *(_OWORD *)v189;
              if (!v186)
                break;
              v186 = (v186 - 1) >> 1;
            }
            while (*(_QWORD *)(v185 + 16 * v186 + 8) > v187);
            *v189 = v188;
            v189[1] = v187;
          }
        }
        *(_BYTE *)(v58[3] + 920) = 1;
LABEL_285:
        v58 = (_QWORD *)*v58;
        if (!v58)
          goto LABEL_327;
      }
    }
    goto LABEL_59;
  }
  v57 = a1;
  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 1104) + 24);
  if (!*(_BYTE *)(v59 + 96))
  {
    v112 = *(_QWORD *)(v59 + 128);
    if (v112)
    {
      v113 = 0;
      v114 = 0;
      v115 = 1;
      v116 = 1;
      do
      {
        v118 = sub_207DF3CAC(a3, v114);
        v119 = *(int8x8_t *)(v309 + 992);
        if (!*(_QWORD *)&v119)
          goto LABEL_165;
        v120 = (uint8x8_t)vcnt_s8(v119);
        v120.i16[0] = vaddlv_u8(v120);
        if (v120.u32[0] > 1uLL)
        {
          v121 = v114;
          if (v114 >= *(_QWORD *)&v119)
            v121 = v114 % *(_QWORD *)&v119;
        }
        else
        {
          v121 = (*(_QWORD *)&v119 - 1) & v114;
        }
        v122 = *(_QWORD *)(v309 + 984);
        v123 = *(_QWORD **)(v122 + 8 * v121);
        if (!v123 || (v124 = (_QWORD *)*v123) == 0)
        {
LABEL_165:
          v116 = 0;
          v113 += v118;
          v129 = a3[3];
          if (v129)
            goto LABEL_166;
LABEL_201:
          if ((v115 & 1) != 0)
            goto LABEL_202;
LABEL_139:
          v117 = 0;
          goto LABEL_140;
        }
        v125 = *(_QWORD *)&v119 - 1;
        if (v120.u32[0] < 2uLL)
        {
          while (1)
          {
            v126 = v124[1];
            if (v126 == v114)
            {
              if (v124[2] == v114)
                goto LABEL_162;
            }
            else if ((v126 & v125) != v121)
            {
              goto LABEL_165;
            }
            v124 = (_QWORD *)*v124;
            if (!v124)
              goto LABEL_165;
          }
        }
        while (1)
        {
          v127 = v124[1];
          if (v127 == v114)
            break;
          if (v127 >= *(_QWORD *)&v119)
            v127 %= *(_QWORD *)&v119;
          if (v127 != v121)
            goto LABEL_165;
LABEL_156:
          v124 = (_QWORD *)*v124;
          if (!v124)
            goto LABEL_165;
        }
        if (v124[2] != v114)
          goto LABEL_156;
LABEL_162:
        if (!v116)
          goto LABEL_165;
        if (v120.u32[0] > 1uLL)
        {
          v128 = v114;
          if (v114 >= *(_QWORD *)&v119)
            v128 = v114 % *(_QWORD *)&v119;
        }
        else
        {
          v128 = v125 & v114;
        }
        v142 = *(_QWORD **)(v122 + 8 * v128);
        if (!v142 || (v143 = (_QWORD *)*v142) == 0)
LABEL_493:
          sub_207CA4018("unordered_map::at: key not found");
        if (v120.u32[0] < 2uLL)
        {
          while (1)
          {
            v144 = v143[1];
            if (v144 == v114)
            {
              if (v143[2] == v114)
                goto LABEL_200;
            }
            else if ((v144 & v125) != v128)
            {
              goto LABEL_493;
            }
            v143 = (_QWORD *)*v143;
            if (!v143)
              goto LABEL_493;
          }
        }
        while (2)
        {
          v146 = v143[1];
          if (v146 != v114)
          {
            if (v146 >= *(_QWORD *)&v119)
              v146 %= *(_QWORD *)&v119;
            if (v146 != v128)
              goto LABEL_493;
LABEL_208:
            v143 = (_QWORD *)*v143;
            if (!v143)
              goto LABEL_493;
            continue;
          }
          break;
        }
        if (v143[2] != v114)
          goto LABEL_208;
LABEL_200:
        v116 = v118 == v143[3];
        v113 += v118;
        v129 = a3[3];
        if (!*(_QWORD *)&v129)
          goto LABEL_201;
LABEL_166:
        v130 = (uint8x8_t)vcnt_s8(v129);
        v130.i16[0] = vaddlv_u8(v130);
        if (v130.u32[0] > 1uLL)
        {
          v131 = v114;
          if (*(_QWORD *)&v129 <= v114)
            v131 = v114 % *(_QWORD *)&v129;
        }
        else
        {
          v131 = (*(_QWORD *)&v129 - 1) & v114;
        }
        v132 = *(_QWORD **)(*(_QWORD *)&a3[2] + 8 * v131);
        if (!v132)
          goto LABEL_201;
        v133 = (_QWORD *)*v132;
        if (!v133)
          goto LABEL_201;
        if (v130.u32[0] < 2uLL)
        {
          v134 = *(_QWORD *)&v129 - 1;
          while (1)
          {
            v136 = v133[1];
            if (v136 == v114)
            {
              if (v133[2] == v114)
                goto LABEL_186;
            }
            else if ((v136 & v134) != v131)
            {
              goto LABEL_201;
            }
            v133 = (_QWORD *)*v133;
            if (!v133)
              goto LABEL_201;
          }
        }
        while (2)
        {
          v135 = v133[1];
          if (v135 != v114)
          {
            if (v135 >= *(_QWORD *)&v129)
              v135 %= *(_QWORD *)&v129;
            if (v135 != v131)
              goto LABEL_201;
            goto LABEL_175;
          }
          if (v133[2] != v114)
          {
LABEL_175:
            v133 = (_QWORD *)*v133;
            if (!v133)
              goto LABEL_201;
            continue;
          }
          break;
        }
LABEL_186:
        if (v118)
          goto LABEL_201;
        v138 = v133[3];
        v137 = v133[4];
        if (v138 == v137)
        {
          v140 = 0;
        }
        else
        {
          v139 = v137 - v138 - 1344;
          if (v139 < 0x540)
          {
            v140 = 0;
            v141 = v138;
            goto LABEL_228;
          }
          v147 = 0;
          v148 = 0;
          v149 = (((v139 >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64) + 1;
          v141 = v138 + 1344 * (v149 & 0x7FFFFFFFFFFFFELL);
          v150 = v149 & 0x7FFFFFFFFFFFFELL;
          do
          {
            if (**(_DWORD **)(v138 + 1104) == 2 && *(_BYTE *)(v138 + 441) == 0)
              ++v147;
            if (**(_DWORD **)(v138 + 2448) == 2 && *(_BYTE *)(v138 + 1785) == 0)
              ++v148;
            v138 += 2688;
            v150 -= 2;
          }
          while (v150);
          v140 = v148 + v147;
          if (v149 != (v149 & 0x7FFFFFFFFFFFFELL))
          {
            do
            {
LABEL_228:
              if (**(_DWORD **)(v141 + 1104) == 2 && *(_BYTE *)(v141 + 441) == 0)
                ++v140;
              v141 += 1344;
            }
            while (v141 != v137);
          }
        }
        if (!*(_QWORD *)&v119)
          goto LABEL_139;
        v154 = (uint8x8_t)vcnt_s8(v119);
        v154.i16[0] = vaddlv_u8(v154);
        if (v154.u32[0] > 1uLL)
        {
          v155 = v114;
          if (v114 >= *(_QWORD *)&v119)
            v155 = v114 % *(_QWORD *)&v119;
        }
        else
        {
          v155 = (*(_QWORD *)&v119 - 1) & v114;
        }
        v156 = *(_QWORD *)(v309 + 984);
        v157 = *(_QWORD **)(v156 + 8 * v155);
        if (!v157)
          goto LABEL_139;
        v158 = (_QWORD *)*v157;
        if (!*v157)
          goto LABEL_139;
        v159 = *(_QWORD *)&v119 - 1;
        if (v154.u32[0] < 2uLL)
        {
          while (1)
          {
            v160 = v158[1];
            if (v160 == v114)
            {
              if (v158[2] == v114)
                goto LABEL_255;
            }
            else if ((v160 & v159) != v155)
            {
              goto LABEL_139;
            }
            v117 = 0;
            v158 = (_QWORD *)*v158;
            if (!v158)
              goto LABEL_140;
          }
        }
        while (2)
        {
          v161 = v158[1];
          if (v161 != v114)
          {
            if (v161 >= *(_QWORD *)&v119)
              v161 %= *(_QWORD *)&v119;
            if (v161 != v155)
              goto LABEL_139;
            goto LABEL_249;
          }
          if (v158[2] != v114)
          {
LABEL_249:
            v117 = 0;
            v158 = (_QWORD *)*v158;
            if (!v158)
              goto LABEL_140;
            continue;
          }
          break;
        }
LABEL_255:
        if ((v115 & 1) == 0)
          goto LABEL_139;
        if (v154.u32[0] > 1uLL)
        {
          v162 = v114;
          if (v114 >= *(_QWORD *)&v119)
            v162 = v114 % *(_QWORD *)&v119;
        }
        else
        {
          v162 = v159 & v114;
        }
        v163 = *(_QWORD **)(v156 + 8 * v162);
        if (!v163)
          goto LABEL_493;
        v164 = (_QWORD *)*v163;
        if (!v164)
          goto LABEL_493;
        if (v154.u32[0] < 2uLL)
        {
          while (1)
          {
            v165 = v164[1];
            if (v165 == v114)
            {
              if (v164[2] == v114)
                goto LABEL_268;
            }
            else if ((v165 & v159) != v162)
            {
              goto LABEL_493;
            }
            v164 = (_QWORD *)*v164;
            if (!v164)
              goto LABEL_493;
          }
        }
        while (2)
        {
          v166 = v164[1];
          if (v166 != v114)
          {
            if (v166 >= *(_QWORD *)&v119)
              v166 %= *(_QWORD *)&v119;
            if (v166 != v162)
              goto LABEL_493;
LABEL_271:
            v164 = (_QWORD *)*v164;
            if (!v164)
              goto LABEL_493;
            continue;
          }
          break;
        }
        if (v164[2] != v114)
          goto LABEL_271;
LABEL_268:
        if (v140 != v164[3])
          goto LABEL_139;
LABEL_202:
        v145 = v113 >= *(_QWORD *)(v309 + 944) || v116;
        if ((v145 & 1) != 0)
        {
          v192 = operator new(8uLL);
          v334[0] = v192;
          *v192 = 0;
          v334[1] = v192 + 1;
          v335 = v192 + 1;
          v58 = *(_QWORD **)(v309 + 1104);
          if (v58)
            goto LABEL_286;
          goto LABEL_327;
        }
        v117 = 1;
LABEL_140:
        ++v114;
        v115 = v117;
      }
      while (v114 != v112);
    }
  }
LABEL_59:
  v334[0] = 0;
  v334[1] = 0;
  v335 = 0;
  v60 = *(_QWORD **)(v57 + 1104);
  if (!v60)
    goto LABEL_282;
  v314 = 0;
  v61 = 0;
  v62 = 0;
  v312 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  do
  {
    v66 = v64;
    v67 = sub_207DF3CAC(a3, v60[2]);
    v68 = v67;
    v69 = *(int8x8_t *)(v57 + 992);
    if (!*(_QWORD *)&v69)
      goto LABEL_81;
    v70 = v60[2];
    v71 = (uint8x8_t)vcnt_s8(v69);
    v71.i16[0] = vaddlv_u8(v71);
    if (v71.u32[0] > 1uLL)
    {
      v72 = v60[2];
      if (v70 >= *(_QWORD *)&v69)
        v72 = v70 % *(_QWORD *)&v69;
    }
    else
    {
      v72 = (*(_QWORD *)&v69 - 1) & v70;
    }
    v73 = *(_QWORD *)(v57 + 984);
    v74 = *(_QWORD **)(v73 + 8 * v72);
    if (!v74 || (v75 = (_QWORD *)*v74) == 0)
    {
LABEL_81:
      v64 = v66;
      goto LABEL_82;
    }
    v76 = *(_QWORD *)&v69 - 1;
    if (v71.u32[0] < 2uLL)
    {
      while (1)
      {
        v77 = v75[1];
        if (v77 == v70)
        {
          if (v75[2] == v70)
            goto LABEL_84;
        }
        else if ((v77 & v76) != v72)
        {
          goto LABEL_81;
        }
        v75 = (_QWORD *)*v75;
        if (!v75)
          goto LABEL_81;
      }
    }
    while (1)
    {
      v78 = v75[1];
      if (v78 == v70)
        break;
      if (v78 >= *(_QWORD *)&v69)
        v78 %= *(_QWORD *)&v69;
      if (v78 != v72)
        goto LABEL_81;
LABEL_76:
      v75 = (_QWORD *)*v75;
      if (!v75)
        goto LABEL_81;
    }
    if (v75[2] != v70)
      goto LABEL_76;
LABEL_84:
    if (v71.u32[0] > 1uLL)
    {
      v79 = v60[2];
      if (v70 >= *(_QWORD *)&v69)
        v79 = v70 % *(_QWORD *)&v69;
    }
    else
    {
      v79 = v76 & v70;
    }
    v80 = *(_QWORD **)(v73 + 8 * v79);
    if (!v80 || (v81 = (_QWORD *)*v80) == 0)
    {
LABEL_489:
      v334[0] = v62;
      v334[1] = v61;
      v335 = v314;
      sub_207CA4018("unordered_map::at: key not found");
    }
    if (v71.u32[0] < 2uLL)
    {
      while (1)
      {
        v82 = v81[1];
        if (v82 == v70)
        {
          if (v81[2] == v70)
            goto LABEL_96;
        }
        else if ((v82 & v76) != v79)
        {
          goto LABEL_489;
        }
        v81 = (_QWORD *)*v81;
        if (!v81)
          goto LABEL_489;
      }
    }
    while (2)
    {
      v83 = v81[1];
      if (v83 != v70)
      {
        if (v83 >= *(_QWORD *)&v69)
          v83 %= *(_QWORD *)&v69;
        if (v83 != v79)
          goto LABEL_489;
LABEL_100:
        v81 = (_QWORD *)*v81;
        if (!v81)
          goto LABEL_489;
        continue;
      }
      break;
    }
    if (v81[2] != v70)
      goto LABEL_100;
LABEL_96:
    v64 = v66;
    if (v67 < v81[3])
      goto LABEL_82;
    if ((unint64_t)v66 < v63)
    {
      *v66 = v70;
      v64 = v66 + 1;
      v61 = v66 + 1;
      goto LABEL_82;
    }
    v84 = v63;
    v85 = v312;
    v86 = (char *)((char *)v66 - v312);
    v87 = ((char *)v66 - v312) >> 3;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 61)
    {
      v334[0] = v62;
      v334[1] = v61;
      v335 = v314;
      sub_207CA420C();
    }
    v89 = v84 - (_QWORD)v312;
    v90 = (uint64_t)(v84 - (_QWORD)v312) >> 2;
    if (v90 > v88)
      v88 = v90;
    if (v89 >= 0x7FFFFFFFFFFFFFF8)
      v91 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v91 = v88;
    if (v91)
    {
      if (v91 >> 61)
      {
        v334[0] = v62;
        v334[1] = v61;
        v335 = v314;
        sub_207CA3AB8();
      }
      v92 = v91;
      v93 = (char *)operator new(8 * v91);
      v64 = v66;
      v91 = v92;
      v85 = v312;
      v62 = &v93[8 * v87];
      *(_QWORD *)v62 = v60[2];
      v94 = (uint64_t)(v62 + 8);
      v95 = (char *)((char *)v66 - v312);
      if (v66 != (unint64_t *)v312)
      {
LABEL_115:
        v96 = (unint64_t)(v95 - 8);
        if (v96 < 0x168
          || (v101 = ((char *)(v64 - 1) - v85) & 0xFFFFFFFFFFFFFFF8,
              &v86[(_QWORD)v93 - 8 - v101] > &v86[(_QWORD)v93 - 8])
          || (unint64_t *)((char *)v64 - v101 - 8) > v64 - 1
          || (unint64_t)((char *)v64 - v93 - (_QWORD)v86) < 0x20)
        {
          v97 = (char *)v64;
          v61 = (void *)v94;
        }
        else
        {
          v102 = (v96 >> 3) + 1;
          v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
          v97 = (char *)&v64[v103 / 0xFFFFFFFFFFFFFFF8];
          v62 -= v103;
          v104 = &v93[8 * v87 - 16];
          v105 = (__int128 *)(v64 - 2);
          v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
          v61 = (void *)v94;
          do
          {
            v107 = *v105;
            *((_OWORD *)v104 - 1) = *(v105 - 1);
            *(_OWORD *)v104 = v107;
            v104 -= 32;
            v105 -= 2;
            v106 -= 4;
          }
          while (v106);
          if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_118:
            v99 = &v93[8 * v91];
            v314 = v99;
            if (v85)
              goto LABEL_119;
LABEL_122:
            v312 = v62;
            v63 = (unint64_t)v99;
            goto LABEL_123;
          }
        }
        do
        {
          v98 = *((_QWORD *)v97 - 1);
          v97 -= 8;
          *((_QWORD *)v62 - 1) = v98;
          v62 -= 8;
        }
        while (v97 != v85);
        goto LABEL_118;
      }
    }
    else
    {
      v93 = 0;
      v62 = (char *)(8 * v87);
      *(_QWORD *)(8 * v87) = v70;
      v94 = 8 * v87 + 8;
      v95 = (char *)((char *)v66 - v312);
      if (v66 != (unint64_t *)v312)
        goto LABEL_115;
    }
    v61 = (void *)v94;
    v99 = &v93[8 * v91];
    v314 = v99;
    if (!v85)
      goto LABEL_122;
LABEL_119:
    v100 = v99;
    operator delete(v85);
    v312 = v62;
    v63 = (unint64_t)v100;
LABEL_123:
    v64 = (unint64_t *)v61;
LABEL_82:
    v65 += v68;
    v60 = (_QWORD *)*v60;
  }
  while (v60);
  v334[0] = v62;
  v334[1] = v61;
  v335 = v314;
  if (v65 <= *(_QWORD *)(v57 + 944))
    goto LABEL_282;
  v108 = *(_QWORD **)(v57 + 1104);
  v109 = *(_QWORD *)(v57 + 1112);
  v336 = 0uLL;
  *(_QWORD *)v337 = 0;
  if (!v109)
  {
    v110 = 0;
    *(_QWORD *)v356 = &v336;
    if (v108)
      goto LABEL_135;
    goto LABEL_278;
  }
  if (v109 >> 61)
    sub_207CA420C();
  v110 = (char *)operator new(8 * v109);
  v109 = (unint64_t)&v110[8 * v109];
  v336.i64[0] = (uint64_t)v110;
  v336.i64[1] = (uint64_t)v110;
  *(_QWORD *)v337 = v109;
  *(_QWORD *)v356 = &v336;
  if (!v108)
  {
LABEL_278:
    v111 = vdupq_n_s64((unint64_t)v110);
    goto LABEL_279;
  }
  do
  {
LABEL_135:
    *(_QWORD *)&v354 = v108[2];
    sub_207CD6B94((uint64_t *)v356, &v354);
    v108 = (_QWORD *)*v108;
  }
  while (v108);
  v111 = v336;
  v109 = *(_QWORD *)v337;
LABEL_279:
  if (v62)
  {
    v315 = v111;
    operator delete(v62);
    v111 = v315;
  }
  *(int64x2_t *)v334 = v111;
  v335 = (_QWORD *)v109;
LABEL_282:
  v58 = *(_QWORD **)(v57 + 1104);
  if (v58)
    goto LABEL_286;
LABEL_327:
  *(double *)(v57 + 1680) = a8;
  *(_BYTE *)(v57 + 1688) = 1;
  if (*(_QWORD *)(v57 + 1128) == *(_QWORD *)(v57 + 1136))
  {
    *(_OWORD *)v302 = v347;
    v200 = v348[0];
    v201 = (unint64_t)v348[1];
    v348[1] = 0;
    v348[0] = 0;
    *(_QWORD *)(v302 + 16) = v200;
    *(_QWORD *)(v302 + 24) = v201;
    v202 = v349;
    *(_OWORD *)(v302 + 32) = v349;
    *(_DWORD *)(v302 + 48) = v350;
    if (*((_QWORD *)&v202 + 1))
    {
      v203 = *(_QWORD *)(v202 + 8);
      if ((v201 & (v201 - 1)) != 0)
      {
        if (v203 >= v201)
          v203 %= v201;
      }
      else
      {
        v203 &= v201 - 1;
      }
      v200[v203] = v302 + 32;
      v349 = 0uLL;
    }
    *(_BYTE *)(v302 + 56) = 1;
    goto LABEL_485;
  }
  v193 = *(_QWORD *)(v57 + 1696) + 1;
  *(_QWORD *)(v57 + 1696) = v193;
  v194 = *v317;
  if (v193 >= 0xAAAAAAAAAAAAAAABLL * ((v317[1] - *v317) >> 3))
  {
    v193 = 0;
    *(_QWORD *)(v57 + 1696) = 0;
  }
  v195 = v194 + 24 * v193;
  v197 = *(_QWORD *)(v57 + 8);
  v196 = *(_QWORD *)(v57 + 16);
  if (v197 != v196)
  {
    do
    {
      sub_207D4C008(v195, v197);
      v197 += 424;
    }
    while (v197 != v196);
    v197 = *(_QWORD *)(v309 + 8);
  }
  v199 = *(_QWORD *)(v197 + 152);
  v198 = *(_QWORD *)(v197 + 160);
  if (*(char *)(v197 + 383) < 0)
  {
    sub_207CA40D8(__dst, *(void **)(v197 + 360), *(_QWORD *)(v197 + 368));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v197 + 360);
    v333 = *(_QWORD *)(v197 + 376);
  }
  if (*(char *)(v197 + 407) < 0)
  {
    sub_207CA40D8(v330, *(void **)(v197 + 384), *(_QWORD *)(v197 + 392));
  }
  else
  {
    *(_OWORD *)v330 = *(_OWORD *)(v197 + 384);
    v331 = *(_QWORD *)(v197 + 400);
  }
  v204 = v309 + 1160;
  sub_207D546E8(v309 + 1160, v198, v199, (uint64_t)__dst, (uint64_t)v330, *(_BYTE *)(v197 + 143), *(_BYTE *)(v197 + 141));
  if ((SHIBYTE(v331) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v333) & 0x80000000) == 0)
      goto LABEL_344;
LABEL_361:
    operator delete(__dst[0]);
    v205 = *(_QWORD *)(v309 + 1584);
    v206 = *(_QWORD *)(v309 + 1592) - v205;
    if ((unint64_t)v206 < 5)
      goto LABEL_346;
LABEL_345:
    v207 = (*(_QWORD *)(v309 + 1576) + 1) % (unint64_t)(v206 >> 2);
    *(_QWORD *)(v309 + 1576) = v207;
    *(_DWORD *)(v309 + 1176) = *(_DWORD *)(v205 + 4 * v207);
    goto LABEL_346;
  }
  operator delete(v330[0]);
  if (SHIBYTE(v333) < 0)
    goto LABEL_361;
LABEL_344:
  v205 = *(_QWORD *)(v309 + 1584);
  v206 = *(_QWORD *)(v309 + 1592) - v205;
  if ((unint64_t)v206 >= 5)
    goto LABEL_345;
LABEL_346:
  v329 = *a4;
  sub_207D54508(v195, *(_QWORD *)(v197 + 160), *(_QWORD *)(v197 + 152), (uint64_t)&v329, v327);
  if (BYTE8(v329) && sub_2081FD320((double *)&v329))
  {
    *(_WORD *)&v337[7] = 270;
    strcpy(v336.i8, "Buffer expired");
    v208 = atomic_load((unsigned __int8 *)&qword_25452B598);
    if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_25452B598))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253E50C48, &dword_207C77000);
      __cxa_guard_release(&qword_25452B598);
    }
    *(_QWORD *)v356 = 1;
    *(_QWORD *)&v356[8] = &off_253E50C48;
    sub_207DEB8A0((const std::error_condition *)v356, (uint64_t)&v336, (CFErrorRef *)&v354);
    v209 = v354;
    v354 = 0uLL;
    *(_OWORD *)v302 = v209;
    *(_BYTE *)(v302 + 56) = 0;
    if (v337[8] && (v337[7] & 0x80000000) != 0)
    {
      v210 = (void *)v336.i64[0];
      goto LABEL_479;
    }
    goto LABEL_480;
  }
  sub_207D50E14(v204, (uint64_t)v327, (uint64_t)&v336);
  if (v346)
  {
    sub_207D52874(v204, (uint64_t *)&v325, a8);
    v211 = v309;
    v212 = *(_QWORD **)(v309 + 1104);
    if (v212)
    {
      v213 = 0.0;
      do
      {
        v214 = *(double *)(v212[3] + 896);
        if (v214 == 0.0)
          v215 = 1.0;
        else
          v215 = 1.0 / v214;
        v213 = v213 + v215;
        v212 = (_QWORD *)*v212;
      }
      while (v212);
    }
    else
    {
      v213 = 0.0;
    }
    v216 = 0;
    v217 = v213 * *(double *)(v309 + 1752);
    v218 = vcvtpd_u64_f64(v217);
    if (v218 <= 1)
      v219 = 1;
    else
      v219 = v218;
    v306 = v219;
    v307 = (_QWORD *)(v309 + 1320);
    v310 = v309 + 1520;
    v305 = (_QWORD *)(v309 + 1480);
    v316 = *(float *)&v217;
    v313 = *(float *)&v217;
    v320 = *(int32x2_t *)&v217;
    v318 = *(int32x2_t *)&v217;
    while (2)
    {
      v324 = **(_QWORD **)(v211 + 1128);
      v224 = sub_207D2D3BC((uint64_t *)(v309 + 1088), v324, &v324);
      v225 = v224[3];
      v226 = *(_QWORD *)(v225 + 128);
      sub_207D0CAFC(v225 + 288, (_QWORD *)(v197 + 280));
      v308 = v216;
      kdebug_trace();
      v227 = (void (***)(void **__return_ptr, _QWORD, void **, __int128 *, double))v224[3];
      if (sub_207D5A890(v307, v310))
      {
        v228 = sub_207D5A890(v307, v310);
        if (!v228)
          sub_207CA4018("unordered_map::at: key not found");
        v229 = v228[6];
        v230 = (std::__shared_weak_count *)v228[7];
        *(_QWORD *)v356 = &off_24C08A5D8;
        *(_QWORD *)&v356[8] = v229;
        *(_QWORD *)&v356[16] = v230;
        if (v230)
        {
          p_shared_owners = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldxr(p_shared_owners);
          while (__stxr(v232 + 1, p_shared_owners));
        }
      }
      else
      {
        v230 = 0;
        *(_QWORD *)v356 = &off_24C08A5D8;
        *(_QWORD *)&v356[8] = 0;
        *(_QWORD *)&v356[16] = 0;
      }
      *(_QWORD *)&v354 = sub_20815BF9C((uint64_t)v356);
      (**v227)(&v321, v227, &v325, &v354, a8);
      *(_QWORD *)v356 = &off_24C08A5D8;
      if (v230)
      {
        v233 = (unint64_t *)&v230->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
      kdebug_trace();
      v235 = v224[3];
      *(double *)(v235 + 904) = a8;
      *(_BYTE *)(v235 + 912) = 1;
      v236 = v224[3];
      v237 = *(double *)(v211 + 920) * *(double *)(v236 + 896);
      if (*(double *)(v236 + 424) < v237)
        v237 = *(double *)(v236 + 424);
      *(double *)(v236 + 896) = v237;
      *(_BYTE *)(v236 + 920) = 0;
      v238 = *(_QWORD *)(v211 + 1576);
      v239 = *(_QWORD *)(v211 + 1584);
      if (v238 >= (*(_QWORD *)(v211 + 1592) - v239) >> 2)
        v238 = 0;
      if (*(float *)(v239 + 4 * v238) <= 0.0)
      {
        v271 = (float *)v321;
        v246 = v322;
      }
      else
      {
        if (sub_207D5AABC(v305, v310))
        {
          v240 = sub_207D5AABC(v305, v310);
          if (!v240)
            sub_207CA4018("unordered_map::at: key not found");
          v241.i32[0] = *((_DWORD *)v240 + 10);
          v318 = v241;
          v241.i32[0] = *((_DWORD *)v240 + 11);
          v320 = v241;
          v313 = *((float *)v240 + 12);
          v316 = *((float *)v240 + 13);
        }
        v242 = (float *)v321;
        v243 = v322;
        v354 = 0uLL;
        v355 = 0;
        v244 = (char *)v322 - (_BYTE *)v321;
        if (v322 != v321)
        {
          v245 = 0x6DB6DB6DB6DB6DB7 * (v244 >> 3);
          if (v245 > 0x492492492492492)
            sub_207D0CD58();
          v246 = (float *)operator new(v244);
          *(_QWORD *)&v354 = v246;
          *((_QWORD *)&v354 + 1) = v246;
          v355 = &v246[14 * v245];
          v247 = (float32x2_t)vdup_lane_s32(v320, 0);
          v248 = (float32x2_t)vdup_lane_s32(v318, 0);
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v249 = *(_DWORD *)v242;
                *(_OWORD *)&v356[4] = *(_OWORD *)(v242 + 6);
                *(float *)&v356[20] = v242[10];
                v250 = v242[11];
                v251 = v242[12];
                v252 = (int64x2_t)vextq_s8(*(int8x16_t *)(v242 + 1), *(int8x16_t *)(v242 + 1), 8uLL);
                v253 = (int32x2_t)vadd_f32(v248, vmul_n_f32((float32x2_t)vmovn_s64(v252), v313));
                *(float32x2_t *)v252.i8 = vadd_f32(v247, vmul_n_f32((float32x2_t)vshrn_n_s64(v252, 0x20uLL), v316));
                v254 = vcgt_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v252.i8, v253), (float32x2_t)vzip1_s32(*(int32x2_t *)v252.i8, v253));
                v255 = vbsl_s8((int8x8_t)vdup_lane_s32(v254, 1), (int8x8_t)v253, (int8x8_t)vrev64_s32(v253));
                v256.i64[0] = v255.u32[0];
                v256.i64[1] = v255.u32[1];
                v257 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(v254, 0), *(int8x8_t *)v252.i8, (int8x8_t)vrev64_s32(*(int32x2_t *)v252.i8)), 0x20uLL), v256);
                v258 = v250 > 0.0;
                if (v251 > 0.0)
                  v258 = 1;
                v259 = v258 ? *(float *)v318.i32 + (float)(v250 * v313) : v242[11];
                v260 = v258 ? *(float *)v320.i32 + (float)(v251 * v316) : v242[12];
                if (v246 >= v355)
                  break;
                *(_DWORD *)v246 = v249;
                *(int8x16_t *)(v246 + 1) = v257;
                *(_OWORD *)(v246 + 6) = *(_OWORD *)&v356[4];
                v246[10] = *(float *)&v356[20];
                v246[11] = v259;
                v246[12] = v260;
                v246 += 14;
                *((_QWORD *)&v354 + 1) = v246;
                v242 += 14;
                if (v242 == v243)
                  goto LABEL_427;
              }
              v261 = (float *)v354;
              v262 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v246 - v354) >> 3);
              v263 = v262 + 1;
              if ((unint64_t)(v262 + 1) > 0x492492492492492)
                sub_207D0CD58();
              v311 = v257;
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)((uint64_t)v355 - v354) >> 3) > v263)
                v263 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)((uint64_t)v355 - v354) >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v355 - v354) >> 3)) >= 0x249249249249249)
                v264 = 0x492492492492492;
              else
                v264 = v263;
              if (v264 > 0x492492492492492)
                sub_207CA3AB8();
              v265 = (char *)operator new(56 * v264);
              v266 = &v265[56 * v262];
              *(_DWORD *)v266 = v249;
              *(int8x16_t *)(v266 + 4) = v311;
              *(_OWORD *)(v266 + 24) = *(_OWORD *)&v356[4];
              *((_DWORD *)v266 + 10) = *(_DWORD *)&v356[20];
              *((float *)v266 + 11) = v259;
              *((float *)v266 + 12) = v260;
              v267 = (float *)(v266 + 56);
              if (v246 != v261)
                break;
              *(_QWORD *)&v354 = v266;
              v355 = (float *)&v265[56 * v264];
              v261 = v246;
LABEL_426:
              operator delete(v261);
              v246 = v267;
              *((_QWORD *)&v354 + 1) = v267;
              v242 += 14;
              if (v242 == v243)
              {
LABEL_427:
                v271 = (float *)v354;
                v272 = v355;
                v242 = (float *)v321;
                if (v321)
                  goto LABEL_428;
                goto LABEL_429;
              }
            }
            v268 = 0;
            do
            {
              v269 = &v266[v268 * 4];
              *((float *)v269 - 14) = v246[v268 - 14];
              *(_QWORD *)(v269 - 52) = *(_QWORD *)&v246[v268 - 13];
              *(_QWORD *)(v269 - 44) = *(_QWORD *)&v246[v268 - 11];
              v270 = *(_OWORD *)&v246[v268 - 8];
              *(_OWORD *)(v269 - 20) = *(_OWORD *)&v246[v268 - 5];
              *((_OWORD *)v269 - 2) = v270;
              v268 -= 14;
            }
            while (&v246[v268] != v261);
            *(_QWORD *)&v354 = &v266[v268 * 4];
            v355 = (float *)&v265[56 * v264];
            if (v261)
              goto LABEL_426;
            v246 = (float *)(v266 + 56);
            *((_QWORD *)&v354 + 1) = v266 + 56;
            v242 += 14;
            if (v242 == v243)
              goto LABEL_427;
          }
        }
        v272 = 0;
        v246 = 0;
        v271 = 0;
        if (v321)
        {
LABEL_428:
          v322 = v242;
          operator delete(v242);
        }
LABEL_429:
        v321 = v271;
        v322 = v246;
        v323 = v272;
        v211 = v309;
      }
      while (v271 != v246)
      {
        v273 = (unint64_t *)(v271 + 6);
        if (v226 <= 1)
          v273 = &v324;
        sub_207DF45FC((int8x8_t *)&v347, *v273, v271[2], v271[1], v271[4], v271[3], *v271, v271[12], v271[11], v271[10]);
        v271 += 14;
      }
      v274 = *(_OWORD **)(v211 + 1128);
      v275 = *(_QWORD *)(v211 + 1136);
      v276 = v275 - (_QWORD)v274;
      if (v275 - (uint64_t)v274 < 17)
      {
        v220 = v308;
        v221 = v275 - 16;
        *(_QWORD *)(v211 + 1136) = v275 - 16;
        v222 = (float *)v321;
        if (!v321)
        {
LABEL_375:
          v216 = v220 + 1;
          if (v274 != (_OWORD *)v221 && v216 != v306)
            continue;
          sub_207D2D8BC((_QWORD *)v211, a5, a6, (_QWORD *)v349);
          *(_OWORD *)v302 = v347;
          v290 = v348[0];
          v291 = (unint64_t)v348[1];
          v348[1] = 0;
          v348[0] = 0;
          *(_QWORD *)(v302 + 16) = v290;
          *(_QWORD *)(v302 + 24) = v291;
          v292 = v349;
          *(_OWORD *)(v302 + 32) = v349;
          *(_DWORD *)(v302 + 48) = v350;
          if (*((_QWORD *)&v292 + 1))
          {
            v293 = *(_QWORD *)(v292 + 8);
            if ((v291 & (v291 - 1)) != 0)
            {
              if (v293 >= v291)
                v293 %= v291;
            }
            else
            {
              v293 &= v291 - 1;
            }
            v290[v293] = v302 + 32;
            v349 = 0uLL;
          }
          *(_BYTE *)(v302 + 56) = 1;
          v294 = (char *)v325;
          if (v325)
          {
            v295 = v326;
            v296 = v325;
            if (v326 != v325)
            {
              do
              {
                v297 = v295 - 128;
                v298 = *((unsigned int *)v295 - 2);
                if ((_DWORD)v298 != -1)
                  ((void (*)(_BYTE *, char *))off_24C072FD8[v298])(v356, v295 - 128);
                *((_DWORD *)v295 - 2) = -1;
                v295 -= 128;
              }
              while (v297 != v294);
              v296 = v325;
            }
            v326 = v294;
            operator delete(v296);
          }
          if (v346)
            goto LABEL_480;
          goto LABEL_470;
        }
      }
      else
      {
        v277 = 0;
        v278 = v276 >> 4;
        *(_OWORD *)v356 = *v274;
        v279 = (unint64_t)((v276 >> 4) - 2) >> 1;
        v280 = v274;
        v220 = v308;
        do
        {
          v281 = &v280[v277 + 1];
          v282 = (2 * v277) | 1;
          v283 = 2 * v277 + 2;
          if (v283 < v278)
          {
            v41 = *((_QWORD *)v281 + 1) > *((_QWORD *)v281 + 3);
            v281 += v41;
            if (v41)
              v282 = v283;
          }
          *v280 = *v281;
          v280 = v281;
          v277 = v282;
        }
        while (v282 <= v279);
        v284 = (_OWORD *)(v275 - 16);
        if (v281 == v284)
        {
          *v281 = *(_OWORD *)v356;
          v274 = *(_OWORD **)(v211 + 1128);
          v221 = *(_QWORD *)(v211 + 1136) - 16;
          *(_QWORD *)(v211 + 1136) = v221;
          v222 = (float *)v321;
          if (!v321)
            goto LABEL_375;
        }
        else
        {
          *v281 = *v284;
          *v284 = *(_OWORD *)v356;
          v285 = (char *)v281 - (char *)v274 + 16;
          if (v285 >= 17)
          {
            v286 = (((unint64_t)v285 >> 4) - 2) >> 1;
            v287 = *((_QWORD *)v281 + 1);
            if (*((_QWORD *)&v274[v286] + 1) > v287)
            {
              v288 = *(_QWORD *)v281;
              do
              {
                v289 = v281;
                v281 = &v274[v286];
                *v289 = *v281;
                if (!v286)
                  break;
                v286 = (v286 - 1) >> 1;
              }
              while (*((_QWORD *)&v274[v286] + 1) > v287);
              *(_QWORD *)v281 = v288;
              *((_QWORD *)v281 + 1) = v287;
            }
          }
          v274 = *(_OWORD **)(v211 + 1128);
          v221 = *(_QWORD *)(v211 + 1136) - 16;
          *(_QWORD *)(v211 + 1136) = v221;
          v222 = (float *)v321;
          if (!v321)
            goto LABEL_375;
        }
      }
      break;
    }
    v322 = v222;
    operator delete(v222);
    goto LABEL_375;
  }
  *(_QWORD *)(v302 + 48) = 0;
  *(_OWORD *)(v302 + 16) = 0u;
  *(_OWORD *)(v302 + 32) = 0u;
  *(_OWORD *)v302 = 0u;
  *(_DWORD *)(v302 + 48) = 1065353216;
  *(_BYTE *)(v302 + 56) = 1;
LABEL_470:
  if (v345)
  {
    if (v344)
    {
      if (v343 < 0)
        operator delete(__p);
      if (v341 < 0)
        operator delete(v340);
    }
    if (v339 && v338 < 0)
    {
      v210 = *(void **)v337;
LABEL_479:
      operator delete(v210);
    }
  }
LABEL_480:
  v327[0] = &off_24C08A5D8;
  v299 = v328;
  if (v328)
  {
    v300 = (unint64_t *)&v328->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
LABEL_485:
  if (v334[0])
    operator delete(v334[0]);
  sub_207CEC654((uint64_t)v348, (_QWORD *)v349);
  v53 = v348[0];
  v348[0] = 0;
  if (v53)
    goto LABEL_50;
  return kdebug_trace();
}

void sub_207D2C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  if (a61 && a60 < 0)
    operator delete(__p);
  sub_20815B3F4(&a38);
  if (a51)
    operator delete(a51);
  sub_207D061C4((uint64_t)&a72);
  sub_207CD822C(v72 - 256);
  _Unwind_Resume(a1);
}

void sub_207D2C900(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  if (a1 + 24 != a2)
  {
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
    sub_207D2E6DC((_QWORD *)(a1 + 40), *(uint64_t **)(a2 + 32), 0);
  }
}

void sub_207D2C934(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    sub_207D2CADC(a2, *(_BYTE *)(v3 + 1616));
    return;
  }
  LOBYTE(v6) = 0;
  v14 = 0;
  sub_207D2365C(4u, &v6, (uint64_t)&v15);
  *(_OWORD *)a2 = v15;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v25)
  {
    *(_BYTE *)(a2 + 120) = 0;
    if (!v14)
      return;
    goto LABEL_14;
  }
  *(_BYTE *)(a2 + 40) = 0;
  v4 = v18;
  if (v18)
  {
    *(_OWORD *)(a2 + 16) = __p;
    *(_QWORD *)(a2 + 32) = v17;
    v17 = 0;
    __p = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v24)
  {
    v5 = v21;
    *(_QWORD *)(a2 + 64) = v20;
    *(_OWORD *)(a2 + 48) = v19;
    v19 = 0uLL;
    *(_QWORD *)(a2 + 72) = v5;
    *(_OWORD *)(a2 + 80) = v22;
    *(_QWORD *)(a2 + 96) = v23;
    v20 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v4 && SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (v14)
  {
LABEL_14:
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
      if (v10 < 0)
        operator delete(v9);
    }
    if (v8)
    {
      if (v7 < 0)
        operator delete((void *)v6);
    }
  }
}

void sub_207D2CAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_207D2CADC(uint64_t a1, char a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  char v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 __p;
  uint64_t v16;
  unsigned __int8 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  char v24;

  if (!a2)
  {
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  LOBYTE(v5) = 0;
  v13 = 0;
  sub_207D2365C(0xCu, &v5, (uint64_t)&v14);
  *(_OWORD *)a1 = v14;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v24)
  {
    *(_BYTE *)(a1 + 120) = 0;
    if (!v13)
      return;
LABEL_14:
    if (!v12)
      goto LABEL_17;
    if (v11 < 0)
    {
      operator delete(v10);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_17:
        if (!v7)
          return;
        goto LABEL_18;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v8);
    if (!v7)
      return;
LABEL_18:
    if (v6 < 0)
      operator delete((void *)v5);
    return;
  }
  *(_BYTE *)(a1 + 40) = 0;
  v3 = v17;
  if (v17)
  {
    *(_OWORD *)(a1 + 16) = __p;
    *(_QWORD *)(a1 + 32) = v16;
    v16 = 0;
    __p = 0uLL;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v23)
  {
    v4 = v20;
    *(_QWORD *)(a1 + 64) = v19;
    *(_OWORD *)(a1 + 48) = v18;
    v18 = 0uLL;
    *(_QWORD *)(a1 + 72) = v4;
    *(_OWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 96) = v22;
    v19 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  if (v3 && SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  if (v13)
    goto LABEL_14;
}

void sub_207D2CC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_207CCB148((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_207D2CC9C(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = off_24C072F78;
  sub_207CEC654(a1 + 40, *(_QWORD **)(a1 + 56));
  v2 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_207D2CD28(void *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = off_24C072F78;
  sub_207CEC654((uint64_t)a1 + 40, *((_QWORD **)a1 + 7));
  v2 = (void *)*((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 5) = 0;
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_207D2CDB4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      v8[3] = a2[3];
      v9 = *v8;
      sub_207D27200(a1, v8);
      a2 = (_QWORD *)*a2;
      v8 = (uint64_t *)v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v11 = *v8;
      operator delete(v8);
      v8 = (uint64_t *)v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x20uLL);
      *(_QWORD *)v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v10 + 1) = *((_QWORD *)v10 + 2);
      sub_207D27200(a1, (uint64_t *)v10);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_207D2CE9C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_207D2CEBC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_207D2CED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_207D2CEE4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    return a1;
  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_207D2CF4C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_207CA77C0((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = v26 + 2;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_207CA40D8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[5] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_207CA6B84(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_207D2D390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_207D2D3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207CA82AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_207D2D3BC(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_207CA3AB8();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_207D2D854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_207D2D868((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_207D2D868(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      v2[3] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_207D2D8BC(_QWORD *a1, uint64_t a2, char a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  VTPixelTransferSessionRef *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl **v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count_vtbl **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void (**v64)(void);
  void (*v65)(void);
  _QWORD *v66;
  uint64_t v68;
  void **v69;
  unsigned int v70[22];
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  void *__p;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  char v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl **v89;
  VTPixelTransferSessionRef *v90;

  if (!a3 || !*(_BYTE *)(a2 + 32))
    return;
  v5 = a1;
  v6 = *(_QWORD **)(a2 + 40);
  v69 = (void **)(a2 + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (a4)
  {
    while (1)
    {
      v9 = a4[3];
      v8 = a4[4];
      v66 = a4;
      if (v9 != v8)
        break;
      v7 = (char *)v6;
LABEL_6:
      a4 = (_QWORD *)*v66;
      v6 = v7;
      if (!*v66)
        goto LABEL_30;
    }
    v68 = a4[4];
    while (1)
    {
      while (1)
      {
        v10 = *(_QWORD *)(v9 + 32);
        v11 = *(_DWORD *)(v9 + 100);
        v12 = *(_QWORD *)(v9 + 128);
        v13 = *(_QWORD *)(v9 + 136);
        v14 = v5[212];
        v15 = *(_QWORD *)(a2 + 56);
        if ((unint64_t)v6 >= v15)
          break;
        *(_DWORD *)v6 = v11;
        *(_QWORD *)((char *)v6 + 4) = v12;
        *(_QWORD *)((char *)v6 + 12) = v13;
        v6[3] = v10;
        v6[4] = v14;
        v6[5] = 0;
        v7 = (char *)(v6 + 7);
        *((_DWORD *)v6 + 12) = 0;
        *(_QWORD *)(a2 + 48) = v6 + 7;
        v9 += 1344;
        v6 += 7;
        if (v9 == v8)
          goto LABEL_6;
      }
      v16 = *v69;
      v17 = 0x6DB6DB6DB6DB6DB7 * (((char *)v6 - (_BYTE *)*v69) >> 3);
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) > 0x492492492492492)
        sub_207D0CD58();
      v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)v16) >> 3);
      if (2 * v19 > v18)
        v18 = 2 * v19;
      if (v19 >= 0x249249249249249)
        v20 = 0x492492492492492;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 > 0x492492492492492)
          sub_207CA3AB8();
        v21 = (char *)operator new(56 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[56 * v17];
      *(_DWORD *)v22 = v11;
      *(_QWORD *)(v22 + 4) = v12;
      *(_QWORD *)(v22 + 12) = v13;
      *((_QWORD *)v22 + 3) = v10;
      *((_QWORD *)v22 + 4) = v14;
      *((_QWORD *)v22 + 5) = 0;
      *((_DWORD *)v22 + 12) = 0;
      if (v6 == v16)
      {
        v7 = v22 + 56;
        *(_QWORD *)(a2 + 40) = v22;
        *(_QWORD *)(a2 + 48) = v22 + 56;
        *(_QWORD *)(a2 + 56) = &v21[56 * v20];
        if (!v6)
          goto LABEL_26;
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = &v22[v23 * 8];
          *((_DWORD *)v24 - 14) = v6[v23 - 7];
          *(_QWORD *)(v24 - 52) = *(_QWORD *)((char *)&v6[v23 - 6] - 4);
          *(_QWORD *)(v24 - 44) = *(_QWORD *)((char *)&v6[v23 - 5] - 4);
          v25 = *(_OWORD *)&v6[v23 - 4];
          *(_OWORD *)(v24 - 20) = *(_OWORD *)((char *)&v6[v23 - 2] - 4);
          *((_OWORD *)v24 - 2) = v25;
          v23 -= 7;
        }
        while (&v6[v23] != v16);
        v6 = *v69;
        v7 = v22 + 56;
        *(_QWORD *)(a2 + 40) = &v22[v23 * 8];
        *(_QWORD *)(a2 + 48) = v22 + 56;
        *(_QWORD *)(a2 + 56) = &v21[56 * v20];
        if (!v6)
          goto LABEL_26;
      }
      operator delete(v6);
LABEL_26:
      v5 = a1;
      v8 = v68;
      *(_QWORD *)(a2 + 48) = v7;
      v9 += 1344;
      v6 = v7;
      if (v9 == v68)
        goto LABEL_6;
    }
  }
LABEL_30:
  v26 = (VTPixelTransferSessionRef *)operator new(0x10uLL);
  sub_207DFF76C(v26);
  v90 = v26;
  v27 = v5[1];
  if (v27 == v5[2])
  {
    LODWORD(v28) = 352;
    LODWORD(v29) = 432;
  }
  else
  {
    v28 = *(_QWORD *)(v27 + 152);
    v29 = *(_QWORD *)(v27 + 160);
  }
  v30 = (std::__shared_weak_count_vtbl **)operator new(0x10uLL);
  __p = operator new(0x20uLL);
  v74 = xmmword_208233330;
  strcpy((char *)__p, "ODT_REGTEST_DETECTOR_IMAGES");
  v70[0] = v29;
  v70[1] = v28;
  LODWORD(v84) = 16;
  BYTE4(v84) = 1;
  sub_20815A0D8(v30, v70, 0x42475241u, (uint64_t *)&__p, 1u, (unsigned int *)&v84);
  v89 = v30;
  if (SHIBYTE(v74) < 0)
    operator delete(__p);
  if (sub_207D5A890(v5 + 165, (uint64_t)(v5 + 190)))
  {
    v31 = sub_207D5A890(v5 + 165, (uint64_t)(v5 + 190));
    if (!v31)
      sub_207CA4018("unordered_map::at: key not found");
    v33 = v31[6];
    v32 = (std::__shared_weak_count *)v31[7];
    __p = &off_24C08A5D8;
    *(_QWORD *)&v74 = v33;
    *((_QWORD *)&v74 + 1) = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v74 = 0uLL;
    __p = &off_24C08A5D8;
  }
  v36 = (std::__shared_weak_count *)operator new(0x30uLL);
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)off_24C0760E8;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C08A5D8;
  v36[1].__shared_owners_ = v33;
  v36[1].__shared_weak_owners_ = (uint64_t)v32;
  if (v32)
  {
    v37 = (unint64_t *)&v32->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v87 = &v36[1].__vftable;
    v88 = v36;
    __p = &off_24C08A5D8;
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  else
  {
    v87 = &v36[1].__vftable;
    v88 = v36;
  }
  sub_207DFFEE4((CVPixelBufferPoolRef *)v30, v26, (uint64_t *)&v87, (uint64_t)&v84);
  sub_207E010BC(&v84, 1, (uint64_t)v70);
  sub_207D2E0FC((uint64_t)&__p, (unsigned __int8 *)v70);
  v40 = a2 + 152;
  if (*(_BYTE *)(a2 + 296))
  {
    sub_207D2E32C(v40, &v80, v76, v77, v78, *((uint64_t *)&v74 + 1), v75, v74, &v79);
    v76 = 0;
    v77 = 0;
    v78 = 0;
    __p = &off_24C072BC8;
    v41 = v82;
    if (!v82)
      goto LABEL_53;
    goto LABEL_52;
  }
  sub_207D2E4A8(v40, (uint64_t)&__p);
  *(_BYTE *)(a2 + 296) = 1;
  __p = &off_24C072BC8;
  v41 = v82;
  if (v82)
  {
LABEL_52:
    v83 = v41;
    operator delete(v41);
  }
LABEL_53:
  v42 = v81;
  if (v81)
  {
    v43 = (unint64_t *)&v81->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v72;
  if (v72)
  {
    v49 = (unint64_t *)&v72->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v71;
  if (v71)
  {
    v52 = (unint64_t *)&v71->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v86)
  {
    v54 = v85;
    if (v85)
    {
      v55 = (unint64_t *)&v85->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  v57 = v88;
  if (v88)
  {
    v58 = (unint64_t *)&v88->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v89;
  v89 = 0;
  if (v60)
  {
    v61 = (std::__shared_weak_count *)v60[1];
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    operator delete(v60);
  }
  v64 = (void (**)(void))v90;
  v90 = 0;
  if (v64)
  {
    v65 = *v64;
    *v64 = 0;
    if (v65)
      v64[1]();
    operator delete(v64);
  }
}

void sub_207D2DF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_207D0A20C(&a29);
  sub_207D2E210((uint64_t)&a15);
  sub_207D2E2BC(v29 - 160);
  sub_207C99D78(v29 - 136);
  sub_207CBBB7C((_QWORD **)(v29 - 120));
  sub_207D06200((void **)(v29 - 112));
  _Unwind_Resume(a1);
}

void sub_207D2DFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  sub_20815B3F4(&a29);
  sub_207CBBB7C((_QWORD **)(v29 - 120));
  sub_207D06200((void **)(v29 - 112));
  _Unwind_Resume(a1);
}

void sub_207D2DFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  uint64_t v35;

  if (a34 < 0)
    operator delete(__p);
  operator delete(v34);
  sub_207D06200((void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void sub_207D2E014(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207D06200((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_207D2E028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_207D2E03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_207CBBB7C((_QWORD **)(v1 - 120));
  sub_207D06200((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void **sub_207D2E058(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 128;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_24C072FD8[v6])(&v8, v3 - 128);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 128;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_207D2E0FC(uint64_t a1, unsigned __int8 *a2)
{
  *(_QWORD *)a1 = &off_24C072BC8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  sub_207D2E32C(a1, (__int128 *)a2 + 5, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), *a2, (uint64_t *)a2 + 8);
  return a1;
}

void sub_207D2E184(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = (void *)v1[15];
  if (v3)
  {
    v1[16] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_207D2E210(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 88);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_207D2E2BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_207D2E32C(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t *a9)
{
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a8)
    v17 = a3;
  else
    v17 = 0;
  if (a7 + a6 * a3 + v17 > a4
    && sub_208216178("/Library/Caches/com.apple.xbs/Sources/AppC3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/Image.h", 306, (uint64_t)"widthStep >= minimum_width_step", 31, (uint64_t)"widthStep must be at least as big as minimum_width_step.", 56, (void (*)(void **))sub_208216974))
  {
    abort();
  }
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 8) = a8;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = a7;
  v23 = *a9;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a9 + 8);
  *(_QWORD *)(a1 + 64) = a8 + a6;
  *(_QWORD *)(a1 + 72) = v23;
  *(_QWORD *)(a1 + 56) = a8 + a6 + a7;
  v24 = (*(_QWORD *)(a1 + 128) - v22) >> 3;
  if (a5 > v24)
  {
    sub_207CFEB84((void **)(a1 + 120), a5 - v24);
LABEL_16:
    v25 = 0;
    v26 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v26++) = *(_QWORD *)(a1 + 88) + v25;
      v25 += a4;
    }
    while (a5 != v26);
    return;
  }
  if (a5 < v24)
    *(_QWORD *)(a1 + 128) = v22 + 8 * a5;
  if (a5)
    goto LABEL_16;
}

uint64_t sub_207D2E4A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24C072BC8;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v3 = (_QWORD *)(a2 + 32);
  sub_207D2E32C(a1, (__int128 *)(a2 + 88), *(_QWORD *)(a2 + 32), v3[1], v3[2], *(v3 - 2), *(v3 - 1), *((unsigned __int8 *)v3 - 24), v3 + 5);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void sub_207D2E538(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = (void *)v1[15];
  if (v3)
  {
    v1[16] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)v1[14];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v1[12];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_207D2E5C4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_207D2E624(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a2 + 112))
  {
    v2 = *(std::__shared_weak_count **)(a2 + 72);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
}

void sub_207D2E684(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_207D2E6DC(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;

  v6 = a1[1];
  if (!v6)
    goto LABEL_11;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      if (v8 != a2)
        sub_207D2E800(v8 + 3, a2[3], a2[4], 0xCF3CF3CF3CF3CF3DLL * ((a2[4] - a2[3]) >> 6));
      v9 = *v8;
      sub_207D27200(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = (uint64_t *)v9;
      if (!v9)
        goto LABEL_11;
    }
    sub_207CEC654((uint64_t)a1, v8);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      sub_207D2F45C(a1, a2 + 2);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_207D2E7D0(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_207CEC654(v1, v2);
  __cxa_rethrow();
}

void sub_207D2E7EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_207D2E800(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((v8 - *a1) >> 6) >= a4)
  {
    result = a1[1];
    if (0xCF3CF3CF3CF3CF3DLL * ((result - v9) >> 6) >= a4)
    {
      if (a2 == a3)
      {
        v23 = v9;
      }
      else
      {
        v23 = v9;
        do
        {
          sub_207D2EAA4(v9, v6);
          v6 += 1344;
          v9 += 1344;
          v23 += 1344;
        }
        while (v6 != a3);
        result = a1[1];
      }
      while (result != v23)
        result = sub_207D085E0(result - 1344);
      a1[1] = v23;
    }
    else
    {
      v19 = a2 + ((result - v9) >> 6 << 6);
      if (result != v9)
      {
        v20 = (result - v9) >> 6 << 6;
        do
        {
          result = sub_207D2EAA4(v9, v6);
          v6 += 1344;
          v9 += 1344;
          v20 -= 1344;
        }
        while (v20);
        v9 = a1[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          result = sub_207D08DD8(v9 + v22, v19 + v22);
          v22 += 1344;
        }
        while (v19 + v22 != a3);
        v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          v10 = sub_207D085E0(v10 - 1344);
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x30C30C30C30C30)
      goto LABEL_37;
    v12 = 0xCF3CF3CF3CF3CF3DLL * (v8 >> 6);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x18618618618618 ? 0x30C30C30C30C30 : v13;
    if (v14 > 0x30C30C30C30C30)
LABEL_37:
      sub_207CA420C();
    v15 = 1344 * v14;
    result = (uint64_t)operator new(1344 * v14);
    v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        result = sub_207D08DD8(v17 + v18, v6 + v18);
        v18 += 1344;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

